record_number,buggy_code,fixed_code,code_similarity
160001,"private void drawArrowsForSource(TransferData data,Point parentPoint){
  if (data.card.isAbility()) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    UUID uuid=data.card.getParentId();
    for (    PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point source=permanent.getLocationOnScreen();
        source.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.addArrow((int)source.getX() + 40,(int)source.getY() + 10,(int)me.getX() + 35,(int)me.getY() + 20,Color.blue,ArrowBuilder.Type.SOURCE);
      }
    }
  }
}","private void drawArrowsForSource(TransferData data,Point parentPoint){
  if (data.card.isAbility()) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    UUID uuid=data.card.getParentId();
    for (    PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point source=permanent.getLocationOnScreen();
        source.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)source.getX() + 40,(int)source.getY() + 10,(int)me.getX() + 35,(int)me.getY() + 20,Color.blue,ArrowBuilder.Type.SOURCE);
      }
    }
  }
}",0.9830278343516632
160002,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    ActionCallback callback=Plugins.getInstance().getActionCallback();
    ((MageActionCallback)callback).hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}",0.9791332263242376
160003,"@Override public void mouseExited(MouseEvent e,final TransferData data){
  hidePopup();
  startHideTimeout();
  this.state=false;
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.TARGET);
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.PAIRED);
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.SOURCE);
}","@Override public void mouseExited(MouseEvent e,final TransferData data){
  hideAll();
}",0.4189526184538653
160004,"/** 
 * Creates new form GamePanel 
 */
public GamePanel(){
  initComponents();
  combat=new CombatDialog();
  pickNumber=new PickNumberDialog();
  MageFrame.getDesktop().add(combat,JLayeredPane.POPUP_LAYER);
  combat.hideDialog();
  MageFrame.getDesktop().add(pickNumber,JLayeredPane.POPUP_LAYER);
  this.feedbackPanel.setConnectedChatPanel(this.userChatPanel);
  try {
    this.setLayout(new BorderLayout());
    final JLayeredPane j=new JLayeredPane();
    j.setSize(1024,768);
    this.add(j);
    j.add(jSplitPane0,JLayeredPane.DEFAULT_LAYER);
    Map<String,JComponent> myUi=getUIComponents(j);
    Plugins.getInstance().updateGamePanel(myUi);
    addComponentListener(new ComponentAdapter(){
      @Override public void componentResized(      ComponentEvent e){
        int width=((JComponent)e.getSource()).getWidth();
        int height=((JComponent)e.getSource()).getHeight();
        j.setSize(width,height);
        jSplitPane0.setSize(width,height);
        sizeToScreen();
        if (!initialized) {
          String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
          if (state != null) {
            if (state.equals(""String_Node_Str"")) {
              jSplitPane0.setDividerLocation(1.0);
            }
          }
          initialized=true;
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","/** 
 * Creates new form GamePanel 
 */
public GamePanel(){
  initComponents();
  combat=new CombatDialog();
  pickNumber=new PickNumberDialog();
  MageFrame.getDesktop().add(combat,JLayeredPane.POPUP_LAYER);
  combat.hideDialog();
  MageFrame.getDesktop().add(pickNumber,JLayeredPane.POPUP_LAYER);
  this.feedbackPanel.setConnectedChatPanel(this.userChatPanel);
  try {
    this.setLayout(new BorderLayout());
    final JLayeredPane j=new JLayeredPane();
    j.setSize(1024,768);
    this.add(j);
    j.add(jSplitPane0,JLayeredPane.DEFAULT_LAYER);
    Map<String,JComponent> myUi=getUIComponents(j);
    Plugins.getInstance().updateGamePanel(myUi);
    addComponentListener(new ComponentAdapter(){
      @Override public void componentResized(      ComponentEvent e){
        int width=((JComponent)e.getSource()).getWidth();
        int height=((JComponent)e.getSource()).getHeight();
        j.setSize(width,height);
        jSplitPane0.setSize(width,height);
        if (height < storedHeight) {
          pnlBattlefield.setSize(0,200);
        }
        storedHeight=height;
        sizeToScreen();
        if (!initialized) {
          String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
          if (state != null) {
            if (state.equals(""String_Node_Str"")) {
              jSplitPane0.setDividerLocation(1.0);
            }
          }
          initialized=true;
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}",0.96056622851365
160005,"@Override public void componentResized(ComponentEvent e){
  int width=((JComponent)e.getSource()).getWidth();
  int height=((JComponent)e.getSource()).getHeight();
  j.setSize(width,height);
  jSplitPane0.setSize(width,height);
  sizeToScreen();
  if (!initialized) {
    String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
    if (state != null) {
      if (state.equals(""String_Node_Str"")) {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
    initialized=true;
  }
}","@Override public void componentResized(ComponentEvent e){
  int width=((JComponent)e.getSource()).getWidth();
  int height=((JComponent)e.getSource()).getHeight();
  j.setSize(width,height);
  jSplitPane0.setSize(width,height);
  if (height < storedHeight) {
    pnlBattlefield.setSize(0,200);
  }
  storedHeight=height;
  sizeToScreen();
  if (!initialized) {
    String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
    if (state != null) {
      if (state.equals(""String_Node_Str"")) {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
    initialized=true;
  }
}",0.9179170344218888
160006,"private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 650) {
    if (smallMode == false) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode == true) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  int height=pnlBattlefield.getHeight();
  phasesContainer.setPreferredSize(new Dimension(X_PHASE_WIDTH,height));
  DialogManager.getManager(gameId).setScreenWidth(rect.width);
  DialogManager.getManager(gameId).setScreenHeight(rect.height);
  DialogManager.getManager(gameId).setBounds(0,0,rect.width,rect.height);
}","private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 720) {
    if (!smallMode) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  DialogManager.getManager(gameId).setScreenWidth(rect.width);
  DialogManager.getManager(gameId).setScreenHeight(rect.height);
  DialogManager.getManager(gameId).setBounds(0,0,rect.width,rect.height);
}",0.9393455706304868
160007,"/** 
 * Checks if there are enough   {@link Permanent} that can be selected.  Should not be usedfor Ability targets since this does not check for protection, shroud etc.
 * @param sourceControllerId - controller of the select event
 * @param game
 * @return - true if enough valid {@link Permanent} exist
 */
@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0) {
    return true;
  }
  int count=0;
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,game)) {
    if (!targets.containsKey(permanent.getId())) {
      count++;
      if (count >= remainingTargets)       return true;
    }
  }
  return false;
}","/** 
 * Checks if there are enough   {@link Permanent} that can be selected.  Should not be usedfor Ability targets since this does not check for protection, shroud etc.
 * @param sourceControllerId - controller of the select event
 * @param game
 * @return - true if enough valid {@link Permanent} exist
 */
@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0) {
    return true;
  }
  int count=0;
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,game)) {
    if (!targets.containsKey(permanent.getId())) {
      count++;
      if (count >= remainingTargets) {
        return true;
      }
    }
  }
  return false;
}",0.9922580645161292
160008,"protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<Permanent>();
  List<Permanent> legendary=new ArrayList<Permanent>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))         somethingHappened=true;
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))             somethingHappened=true;
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))               somethingHappened=true;
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))             somethingHappened=true;
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))               somethingHappened=true;
            }
          }
        }
      }
    }
    if (filterLegendary.match(perm,this))     legendary.add(perm);
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null) {
          perm.attachTo(null,this);
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this))           somethingHappened=true;
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this))           somethingHappened=true;
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          for (          Permanent perm : getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
            perm.moveToZone(Zone.GRAVEYARD,null,this,false);
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        for (        Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
          dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
        }
        return true;
      }
    }
  }
  return somethingHappened;
}","protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<Permanent>();
  List<Permanent> legendary=new ArrayList<Permanent>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
        }
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))             somethingHappened=true;
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))               somethingHappened=true;
            }
          }
        }
      }
    }
    if (filterLegendary.match(perm,this)) {
      legendary.add(perm);
    }
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null || !creature.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null || !land.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          for (          Permanent perm : getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
            perm.moveToZone(Zone.GRAVEYARD,null,this,false);
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        for (        Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
          dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
        }
        return true;
      }
    }
  }
  return somethingHappened;
}",0.98125886657209
160009,"@Override public MarkOfTheOniTriggeredAbility copy(){
  return new MarkOfTheOniTriggeredAbility(this);
}","@Override public MarkOfTheOni copy(){
  return new MarkOfTheOni(this);
}",0.8181818181818182
160010,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent creature : game.getBattlefield().getAllActivePermanents(filter,game)) {
    AttacksIfAbleTargetEffect effect=new AttacksIfAbleTargetEffect(Duration.EndOfTurn);
    effect.setTargetPointer(new FixedTarget(creature.getId()));
    game.addEffect(effect,source);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Permanent creature : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    AttacksIfAbleTargetEffect effect=new AttacksIfAbleTargetEffect(Duration.EndOfTurn);
    effect.setTargetPointer(new FixedTarget(creature.getId()));
    game.addEffect(effect,source);
  }
  return true;
}",0.9350993377483444
160011,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent creature=game.getPermanent(source.getFirstTarget());
  if (creature != null && creature.getId().equals(permanent.getId())) {
    return true;
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (this.getTargetPointer().getTargets(game,source).contains(permanent.getId())) {
    return true;
  }
  return false;
}",0.6157205240174672
160012,"@Override public String getText(Mode mode){
  if (this.duration == Duration.EndOfTurn)   return ""String_Node_Str"" + mode.getTargets().get(0).getTargetName() + ""String_Node_Str"";
 else   return ""String_Node_Str"" + mode.getTargets().get(0).getTargetName() + ""String_Node_Str"";
}","@Override public String getText(Mode mode){
  if (this.duration == Duration.EndOfTurn) {
    return new StringBuilder(""String_Node_Str"").append(mode.getTargets().get(0).getTargetName()).append(""String_Node_Str"").toString();
  }
 else {
    return new StringBuilder(""String_Node_Str"").append(mode.getTargets().get(0).getTargetName()).append(""String_Node_Str"").toString();
  }
}",0.5460122699386503
160013,"@Override public boolean apply(Game game,Ability source){
  List<Permanent> lands=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),game);
  for (  Permanent land : lands) {
    Abilities<ManaAbility> mana=land.getAbilities().getManaAbilities(Constants.Zone.BATTLEFIELD);
    Mana types=new Mana();
    for (    ManaAbility ability : mana) {
      types.add(ability.getNetMana(game));
    }
    Choice choice=new ChoiceImpl(true);
    choice.setMessage(""String_Node_Str"");
    if (types.getBlack() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getRed() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getBlue() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getGreen() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getWhite() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getColorless() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getAny() > 0) {
      choice.getChoices().add(""String_Node_Str"");
      choice.getChoices().add(""String_Node_Str"");
      choice.getChoices().add(""String_Node_Str"");
      choice.getChoices().add(""String_Node_Str"");
      choice.getChoices().add(""String_Node_Str"");
      choice.getChoices().add(""String_Node_Str"");
    }
    if (choice.getChoices().size() > 0) {
      Player player=game.getPlayer(source.getControllerId());
      if (choice.getChoices().size() == 1) {
        choice.setChoice(choice.getChoices().iterator().next());
      }
 else {
        player.choose(outcome,choice,game);
      }
      if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.BlackMana,game,source);
      }
 else       if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.BlueMana,game,source);
      }
 else       if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.RedMana,game,source);
      }
 else       if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.GreenMana,game,source);
      }
 else       if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.WhiteMana,game,source);
      }
 else       if (choice.getChoice().equals(""String_Node_Str"")) {
        player.getManaPool().addMana(Mana.ColorlessMana,game,source);
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  List<Permanent> lands=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),game);
  Mana types=new Mana();
  for (  Permanent land : lands) {
    Abilities<ManaAbility> mana=land.getAbilities().getManaAbilities(Constants.Zone.BATTLEFIELD);
    for (    ManaAbility ability : mana) {
      types.add(ability.getNetMana(game));
    }
  }
  Choice choice=new ChoiceImpl(true);
  choice.setMessage(""String_Node_Str"");
  if (types.getBlack() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getRed() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getBlue() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getGreen() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getWhite() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getColorless() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getAny() > 0) {
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
  }
  if (choice.getChoices().size() > 0) {
    Player player=game.getPlayer(source.getControllerId());
    if (choice.getChoices().size() == 1) {
      choice.setChoice(choice.getChoices().iterator().next());
    }
 else {
      player.choose(outcome,choice,game);
    }
    if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.BlackMana,game,source);
    }
 else     if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.BlueMana,game,source);
    }
 else     if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.RedMana,game,source);
    }
 else     if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.GreenMana,game,source);
    }
 else     if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.WhiteMana,game,source);
    }
 else     if (choice.getChoice().equals(""String_Node_Str"")) {
      player.getManaPool().addMana(Mana.ColorlessMana,game,source);
    }
  }
  return true;
}",0.961033634126333
160014,"@Override public boolean apply(Game game,Ability source){
  List<Card> chosen=new ArrayList<Card>();
  Player you=game.getPlayer(source.getControllerId());
  if (you != null) {
    Choice choiceImpl=new ChoiceImpl();
    choiceImpl.setChoices(choice);
    while (!you.choose(outcome.Neutral,choiceImpl,game))     ;
    CardType type=null;
    String choosenType=choiceImpl.getChoice();
    if (choosenType.equals(CardType.ARTIFACT.toString())) {
      type=CardType.ARTIFACT;
    }
 else     if (choosenType.equals(CardType.LAND.toString())) {
      type=CardType.LAND;
    }
 else     if (choosenType.equals(CardType.CREATURE.toString())) {
      type=CardType.CREATURE;
    }
 else     if (choosenType.equals(CardType.ENCHANTMENT.toString())) {
      type=CardType.ENCHANTMENT;
    }
 else     if (choosenType.equals(CardType.INSTANT.toString())) {
      type=CardType.INSTANT;
    }
 else     if (choosenType.equals(CardType.SORCERY.toString())) {
      type=CardType.SORCERY;
    }
 else     if (choosenType.equals(CardType.PLANESWALKER.toString())) {
      type=CardType.PLANESWALKER;
    }
 else     if (choosenType.equals(CardType.TRIBAL.toString())) {
      type=CardType.TRIBAL;
    }
    FilterPermanent filter=new FilterPermanent();
    filter.add(new CardTypePredicate(type));
    System.out.println(""String_Node_Str"" + type.toString());
    TargetPermanent target=new TargetControlledPermanent(1,1,filter,false);
    target.setRequired(true);
    target.setNotTarget(true);
    if (target.canChoose(you.getId(),game)) {
      while (!target.isChosen() && target.canChoose(you.getId(),game)) {
        you.choose(Constants.Outcome.Sacrifice,target,source.getId(),game);
      }
      Permanent permanent=game.getPermanent(target.getFirstTarget());
      if (permanent != null) {
        chosen.add(permanent);
      }
    }
    target.clearChosen();
    for (    UUID playerId : game.getPlayerList()) {
      if (playerId != you.getId()) {
        Player player=game.getPlayer(playerId);
        if (target.canChoose(playerId,game)) {
          while (!target.isChosen() && target.canChoose(playerId,game)) {
            player.choose(Constants.Outcome.Sacrifice,target,source.getId(),game);
          }
          Permanent permanent=game.getPermanent(target.getFirstTarget());
          if (permanent != null) {
            chosen.add(permanent);
          }
          target.clearChosen();
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents()) {
      if (chosen.contains(permanent)) {
        permanent.sacrifice(source.getId(),game);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  List<Card> chosen=new ArrayList<Card>();
  Player you=game.getPlayer(source.getControllerId());
  Permanent sourceCreature=game.getPermanent(source.getSourceId());
  if (you != null && sourceCreature != null) {
    Choice choiceImpl=new ChoiceImpl();
    choiceImpl.setChoices(choice);
    while (!you.choose(Outcome.Neutral,choiceImpl,game)) {
    }
    ;
    CardType type=null;
    String choosenType=choiceImpl.getChoice();
    if (choosenType.equals(CardType.ARTIFACT.toString())) {
      type=CardType.ARTIFACT;
    }
 else     if (choosenType.equals(CardType.LAND.toString())) {
      type=CardType.LAND;
    }
 else     if (choosenType.equals(CardType.CREATURE.toString())) {
      type=CardType.CREATURE;
    }
 else     if (choosenType.equals(CardType.ENCHANTMENT.toString())) {
      type=CardType.ENCHANTMENT;
    }
 else     if (choosenType.equals(CardType.INSTANT.toString())) {
      type=CardType.INSTANT;
    }
 else     if (choosenType.equals(CardType.SORCERY.toString())) {
      type=CardType.SORCERY;
    }
 else     if (choosenType.equals(CardType.PLANESWALKER.toString())) {
      type=CardType.PLANESWALKER;
    }
 else     if (choosenType.equals(CardType.TRIBAL.toString())) {
      type=CardType.TRIBAL;
    }
    FilterPermanent filter=new FilterControlledPermanent(new StringBuilder(""String_Node_Str"").append(type.toString()).toString());
    filter.add(new CardTypePredicate(type));
    TargetPermanent target=new TargetControlledPermanent(1,1,filter,false);
    target.setRequired(true);
    target.setNotTarget(true);
    if (target.canChoose(you.getId(),game)) {
      while (!target.isChosen() && target.canChoose(you.getId(),game)) {
        you.choose(Constants.Outcome.Sacrifice,target,source.getId(),game);
      }
      Permanent permanent=game.getPermanent(target.getFirstTarget());
      if (permanent != null) {
        chosen.add(permanent);
      }
    }
    target.clearChosen();
    for (    UUID playerId : game.getPlayerList()) {
      if (playerId != you.getId()) {
        Player player=game.getPlayer(playerId);
        if (target.canChoose(playerId,game)) {
          while (!target.isChosen() && target.canChoose(playerId,game)) {
            player.choose(Constants.Outcome.Sacrifice,target,source.getId(),game);
          }
          Permanent permanent=game.getPermanent(target.getFirstTarget());
          if (permanent != null) {
            chosen.add(permanent);
          }
          target.clearChosen();
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents()) {
      if (chosen.contains(permanent)) {
        permanent.sacrifice(source.getId(),game);
      }
    }
    return true;
  }
  return false;
}",0.9521354933726068
160015,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
switch (targetController) {
case YOU:
      boolean yours=event.getPlayerId().equals(this.controllerId);
    if (yours) {
      if (getTargets().size() == 0) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
      }
    }
  return yours;
case OPPONENT:
if (game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
  if (getTargets().size() == 0) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
    }
  }
  return true;
}
break;
case ANY:
if (getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
case CONTROLLER_ATTACHED_TO:
Permanent attachment=game.getPermanent(sourceId);
if (attachment != null && attachment.getAttachedTo() != null) {
Permanent attachedTo=game.getPermanent(attachment.getAttachedTo());
if (attachedTo != null && attachedTo.getControllerId().equals(event.getPlayerId())) {
if (getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
}
}
}
}
return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
switch (targetController) {
case YOU:
      boolean yours=event.getPlayerId().equals(this.controllerId);
    if (yours && setTargetPointer) {
      if (getTargets().size() == 0) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
      }
    }
  return yours;
case OPPONENT:
if (game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
  if (setTargetPointer && getTargets().size() == 0) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
    }
  }
  return true;
}
break;
case ANY:
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
case CONTROLLER_ATTACHED_TO:
Permanent attachment=game.getPermanent(sourceId);
if (attachment != null && attachment.getAttachedTo() != null) {
Permanent attachedTo=game.getPermanent(attachment.getAttachedTo());
if (attachedTo != null && attachedTo.getControllerId().equals(event.getPlayerId())) {
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
}
}
}
}
return false;
}",0.9717314487632508
160016,"public BeginningOfUpkeepTriggeredAbility(final BeginningOfUpkeepTriggeredAbility ability){
  super(ability);
  this.targetController=ability.targetController;
}","public BeginningOfUpkeepTriggeredAbility(final BeginningOfUpkeepTriggeredAbility ability){
  super(ability);
  this.targetController=ability.targetController;
  this.setTargetPointer=ability.setTargetPointer;
}",0.8648648648648649
160017,"public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(permanent);
      game.getBattlefield().addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      permanent.entersBattlefield(sourceId,game);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}","public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(permanent);
      game.addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      permanent.entersBattlefield(sourceId,game);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}",0.9897652016857316
160018,"public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  List<UUID> consumed=new ArrayList<UUID>();
  do {
    List<ReplacementEffect> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> i=rEffects.iterator(); i.hasNext(); ) {
      ReplacementEffect entry=i.next();
      if (consumed.contains(entry.getId()))       i.remove();
    }
    if (rEffects.isEmpty())     break;
    int index;
    if (rEffects.size() == 1) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(rEffects,game);
    }
    ReplacementEffect rEffect=rEffects.get(index);
    caught=rEffect.replaceEvent(event,this.getAbility(rEffect.getId()),game);
    if (caught)     break;
    consumed.add(rEffect.getId());
    game.applyEffects();
  }
 while (true);
  return caught;
}","public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  List<UUID> consumed=new ArrayList<UUID>();
  do {
    List<ReplacementEffect> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> i=rEffects.iterator(); i.hasNext(); ) {
      ReplacementEffect entry=i.next();
      if (consumed.contains(entry.getId())) {
        i.remove();
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    if (rEffects.size() == 1) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(rEffects,game);
    }
    ReplacementEffect rEffect=rEffects.get(index);
    caught=rEffect.replaceEvent(event,this.getAbility(rEffect.getId()),game);
    if (caught) {
      break;
    }
    consumed.add(rEffect.getId());
    game.applyEffects();
  }
 while (true);
  return caught;
}",0.9563758389261744
160019,"public List<RestrictionEffect> getApplicableRestrictionEffects(Permanent permanent,Game game){
  List<RestrictionEffect> effects=new ArrayList<RestrictionEffect>();
  for (  RestrictionEffect effect : restrictionEffects) {
    Ability ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,permanent,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}","public List<RestrictionEffect> getApplicableRestrictionEffects(Permanent permanent,Game game){
  List<RestrictionEffect> effects=new ArrayList<RestrictionEffect>();
  for (  RestrictionEffect effect : restrictionEffects) {
    Ability ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,permanent,false)) {
      if (effect.applies(permanent,ability,game)) {
        effects.add(effect);
      }
    }
  }
  return effects;
}",0.9879518072289156
160020,"public Ability getAbility(UUID effectId){
  Ability ability=layeredEffects.getAbility(effectId);
  if (ability == null)   ability=replacementEffects.getAbility(effectId);
  if (ability == null)   ability=preventionEffects.getAbility(effectId);
  if (ability == null)   ability=requirementEffects.getAbility(effectId);
  if (ability == null)   ability=restrictionEffects.getAbility(effectId);
  if (ability == null)   ability=asThoughEffects.getAbility(effectId);
  if (ability == null)   ability=costModificationEffects.getAbility(effectId);
  return ability;
}","public Ability getAbility(UUID effectId){
  Ability ability=layeredEffects.getAbility(effectId);
  if (ability == null) {
    ability=replacementEffects.getAbility(effectId);
  }
  if (ability == null) {
    ability=preventionEffects.getAbility(effectId);
  }
  if (ability == null) {
    ability=requirementEffects.getAbility(effectId);
  }
  if (ability == null) {
    ability=restrictionEffects.getAbility(effectId);
  }
  if (ability == null) {
    ability=asThoughEffects.getAbility(effectId);
  }
  if (ability == null) {
    ability=costModificationEffects.getAbility(effectId);
  }
  return ability;
}",0.7606837606837606
160021,"public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
  for (  Map.Entry<Effect,UUID> entry : effect.sources.entrySet()) {
    sources.put(entry.getKey(),entry.getValue());
  }
  collectAllEffects();
}","public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
  for (  Map.Entry<Effect,UUID> entry : effect.sources.entrySet()) {
    sources.put(entry.getKey(),entry.getValue());
  }
  collectAllEffects();
  lastSetTimestamp=effect.lastSetTimestamp;
}",0.972636815920398
160022,"/** 
 * Initially effect timestamp is set when game starts in game.loadCard method. After that timestamp should be updated whenever effect becomes ""actual"" meaning it becomes turned on that is defined by Ability.#isInUseableZone(Game, boolean) method in #getLayeredEffects(Game).
 * @param layerEffects
 */
private void updateTimestamps(List<ContinuousEffect> layerEffects){
  for (  ContinuousEffect continuousEffect : layerEffects) {
    if (!previous.contains(continuousEffect)) {
      continuousEffect.setTimestamp();
    }
  }
  previous.clear();
  previous.addAll(layerEffects);
}","/** 
 * Initially effect timestamp is set when game starts in game.loadCard method. After that timestamp should be updated whenever effect becomes ""actual"" meaning it becomes turned on that is defined by Ability.#isInUseableZone(Game, boolean) method in #getLayeredEffects(Game).
 * @param layerEffects
 */
private void updateTimestamps(List<ContinuousEffect> layerEffects){
  for (  ContinuousEffect continuousEffect : layerEffects) {
    if (!previous.contains(continuousEffect)) {
      setUniqueTimesstamp(continuousEffect);
    }
  }
  previous.clear();
  previous.addAll(layerEffects);
}",0.952542372881356
160023,"/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event,Game game){
  List<ReplacementEffect> replaceEffects=new ArrayList<ReplacementEffect>();
  if (planeswalkerRedirectionEffect.applies(event,null,game))   replaceEffects.add(planeswalkerRedirectionEffect);
  if (auraReplacementEffect.applies(event,null,game))   replaceEffects.add(auraReplacementEffect);
  for (  ReplacementEffect effect : replacementEffects) {
    Ability ability=replacementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    Ability ability=preventionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  return replaceEffects;
}","/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event,Game game){
  List<ReplacementEffect> replaceEffects=new ArrayList<ReplacementEffect>();
  if (planeswalkerRedirectionEffect.applies(event,null,game)) {
    replaceEffects.add(planeswalkerRedirectionEffect);
  }
  if (auraReplacementEffect.applies(event,null,game)) {
    replaceEffects.add(auraReplacementEffect);
  }
  for (  ReplacementEffect effect : replacementEffects) {
    Ability ability=replacementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    Ability ability=preventionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  return replaceEffects;
}",0.994060876020787
160024,"private List<ContinuousEffect> filterLayeredEffects(List<ContinuousEffect> effects,Layer layer){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : effects) {
    if (effect.hasLayer(layer))     layerEffects.add(effect);
  }
  return layerEffects;
}","private List<ContinuousEffect> filterLayeredEffects(List<ContinuousEffect> effects,Layer layer){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : effects) {
    if (effect.hasLayer(layer)) {
      layerEffects.add(effect);
    }
  }
  return layerEffects;
}",0.9839228295819936
160025,"public List<ContinuousEffect> getLayeredEffects(Game game){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : layeredEffects) {
switch (effect.getDuration()) {
case WhileOnBattlefield:
case WhileOnStack:
case WhileInGraveyard:
      Ability ability=layeredEffects.getAbility(effect.getId());
    if (ability.isInUseableZone(game,null,false))     layerEffects.add(effect);
  break;
default :
layerEffects.add(effect);
}
}
updateTimestamps(layerEffects);
Collections.sort(layerEffects,new TimestampSorter());
return layerEffects;
}","public List<ContinuousEffect> getLayeredEffects(Game game){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : layeredEffects) {
switch (effect.getDuration()) {
case WhileOnBattlefield:
case WhileOnStack:
case WhileInGraveyard:
      Ability ability=layeredEffects.getAbility(effect.getId());
    if (ability.isInUseableZone(game,null,false)) {
      layerEffects.add(effect);
    }
  break;
default :
layerEffects.add(effect);
}
}
updateTimestamps(layerEffects);
Collections.sort(layerEffects,new TimestampSorter());
return layerEffects;
}",0.9425675675675677
160026,"public List<RequirementEffect> getApplicableRequirementEffects(Permanent permanent,Game game){
  List<RequirementEffect> effects=new ArrayList<RequirementEffect>();
  for (  RequirementEffect effect : requirementEffects) {
    Ability ability=requirementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}","public List<RequirementEffect> getApplicableRequirementEffects(Permanent permanent,Game game){
  List<RequirementEffect> effects=new ArrayList<RequirementEffect>();
  for (  RequirementEffect effect : requirementEffects) {
    Ability ability=requirementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.applies(permanent,ability,game)) {
        effects.add(effect);
      }
    }
  }
  return effects;
}",0.9878296146044624
160027,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    if (counter != null) {
      Counter newCounter=counter.copy();
      newCounter.add(amount.calculate(game,source));
      permanent.addCounters(counter.copy(),game);
      if (informPlayers) {
        Player player=game.getPlayer(source.getControllerId());
        if (player != null) {
          game.informPlayers(player.getName() + ""String_Node_Str"" + newCounter.getCount()+ ""String_Node_Str""+ newCounter.getName()+ ""String_Node_Str""+ permanent.getName());
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    if (counter != null) {
      Counter newCounter=counter.copy();
      newCounter.add(amount.calculate(game,source));
      permanent.addCounters(newCounter,game);
      if (informPlayers) {
        Player player=game.getPlayer(source.getControllerId());
        if (player != null) {
          game.informPlayers(player.getName() + ""String_Node_Str"" + newCounter.getCount()+ ""String_Node_Str""+ newCounter.getName()+ ""String_Node_Str""+ permanent.getName());
        }
      }
    }
  }
  return true;
}",0.981679389312977
160028,"public TargetPermanentOrPlayer(final TargetPermanentOrPlayer target){
  super(target);
  this.filter=target.filter.copy();
}","public TargetPermanentOrPlayer(final TargetPermanentOrPlayer target){
  super(target);
  this.filter=target.filter.copy();
  this.filterPermanent=target.filterPermanent.copy();
}",0.8211920529801324
160029,"@Override public boolean hasLayer(Constants.Layer layer){
  return layer == Constants.Layer.RulesEffects;
}","@Override public boolean hasLayer(Layer layer){
  return layer == Layer.RulesEffects;
}",0.8969072164948454
160030,"public TargetSpellOrPermanent(final TargetSpellOrPermanent target){
  super(target);
  this.filter=target.filter.copy();
}","public TargetSpellOrPermanent(final TargetSpellOrPermanent target){
  super(target);
  this.filter=target.filter.copy();
  this.filterPermanent=target.filterPermanent.copy();
}",0.8187919463087249
160031,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(new AnotherPredicate());
    TargetCreaturePermanent target1=new TargetCreaturePermanent(0,3,filter,false);
    game.getPlayer(getControllerId()).choose(Outcome.Exile,target1,sourceId,game);
    if (target1.getTargets().size() > 0) {
      getTargets().add(target1);
    }
    int leftTargets=3 - target1.getTargets().size();
    if (leftTargets > 0) {
      FilterCard filter2=new FilterCreatureCard(""String_Node_Str"" + leftTargets + ""String_Node_Str""+ (leftTargets > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      TargetCardInGraveyard target2=new TargetCardInGraveyard(0,leftTargets,filter2);
      game.getPlayer(getControllerId()).choose(Outcome.Exile,target2,sourceId,game);
      if (target2.getTargets().size() > 0) {
        getTargets().add(target2);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    getTargets().clear();
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(new AnotherPredicate());
    TargetCreaturePermanent target1=new TargetCreaturePermanent(0,3,filter,false);
    game.getPlayer(getControllerId()).chooseTarget(Outcome.Exile,target1,this,game);
    if (target1.getTargets().size() > 0) {
      getTargets().add(target1);
    }
    int leftTargets=3 - target1.getTargets().size();
    if (leftTargets > 0) {
      FilterCard filter2=new FilterCreatureCard(""String_Node_Str"" + leftTargets + ""String_Node_Str""+ (leftTargets > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      TargetCardInGraveyard target2=new TargetCardInGraveyard(0,leftTargets,filter2);
      game.getPlayer(getControllerId()).chooseTarget(Outcome.Exile,target2,this,game);
      if (target2.getTargets().size() > 0) {
        getTargets().add(target2);
      }
    }
    return true;
  }
  return false;
}",0.970616113744076
160032,"public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  tournament.addPlayer(player,seat.getPlayerType());
  table.joinTable(player,seat);
  User user=UserManager.getInstance().getUser(userId);
  user.addTable(player.getId(),table);
  user.joinedTable(table.getRoomId(),table.getId(),true);
  logger.info(""String_Node_Str"" + player.getId());
  if (seat.getPlayer().isHuman()) {
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}","public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  tournament.addPlayer(player,seat.getPlayerType());
  table.joinTable(player,seat);
  User user=UserManager.getInstance().getUser(userId);
  user.addTable(player.getId(),table);
  logger.info(""String_Node_Str"" + player.getId());
  if (seat.getPlayer().isHuman()) {
    user.joinedTable(table.getRoomId(),table.getId(),true);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}",0.9232769830949284
160033,"public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList) throws MageException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Deck deck=Deck.load(deckList);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    throw new InvalidDeckException(name + ""String_Node_Str"",table.getValidator().getInvalid());
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  User user=UserManager.getInstance().getUser(userId);
  user.addTable(player.getId(),table);
  user.joinedTable(table.getRoomId(),table.getId(),false);
  logger.info(""String_Node_Str"" + player.getId());
  if (seat.getPlayer().isHuman()) {
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}","public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList) throws MageException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Deck deck=Deck.load(deckList);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    throw new InvalidDeckException(name + ""String_Node_Str"",table.getValidator().getInvalid());
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  User user=UserManager.getInstance().getUser(userId);
  user.addTable(player.getId(),table);
  logger.info(""String_Node_Str"" + player.getId());
  if (seat.getPlayer().isHuman()) {
    user.joinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}",0.9380165289256198
160034,"private static String getTokenImagePath(CardInfo card){
  String filename=getImagePath(card,null);
  TFile file=new TFile(filename);
  if (!file.exists()) {
    CardInfo updated=new CardInfo(card);
    updated.setName(card.getName() + ""String_Node_Str"");
    filename=getImagePath(updated,null);
    file=new TFile(filename);
    if (!file.exists()) {
      updated=new CardInfo(card);
      updated.setName(card.getName() + ""String_Node_Str"");
      filename=getImagePath(updated,null);
    }
  }
  return filename;
}","private static String getTokenImagePath(CardInfo card){
  String useDefault=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_USE_DEFAULT,""String_Node_Str"");
  String path=useDefault.equals(""String_Node_Str"") ? null : PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_PATH,null);
  String filename=getImagePath(card,path);
  TFile file=new TFile(filename);
  if (!file.exists()) {
    CardInfo updated=new CardInfo(card);
    updated.setName(card.getName() + ""String_Node_Str"");
    filename=getImagePath(updated,path);
    file=new TFile(filename);
    if (!file.exists()) {
      updated=new CardInfo(card);
      updated.setName(card.getName() + ""String_Node_Str"");
      filename=getImagePath(updated,path);
    }
  }
  return filename;
}",0.7418856259659969
160035,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      if (playerId != source.getControllerId()) {
        Player opponent=game.getPlayer(playerId);
        if (opponent != null) {
          opponent.damage(2,source.getId(),game,false,true);
          Cards cards=opponent.getHand();
          for (int i=0; i < 2 && !cards.isEmpty(); i++) {
            Card card=cards.getRandom(game);
            if (card != null) {
              card.moveToZone(Constants.Zone.HAND,source.getId(),game,true);
              cards.remove(card);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      if (playerId != source.getControllerId()) {
        Player opponent=game.getPlayer(playerId);
        if (opponent != null) {
          opponent.damage(2,source.getId(),game,false,true);
          int amount=Math.min(2,opponent.getHand().size());
          for (int i=0; i < amount; i++) {
            Card card=opponent.getHand().getRandom(game);
            if (card != null) {
              opponent.discard(card,source,game);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.8700866089273818
160036,"@Override public Token apply(Card source){
  if (target == null)   throw new IllegalArgumentException(""String_Node_Str"");
  target.setName(source.getName());
  target.getColor().setColor(source.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(source.getManaCost());
  target.getCardType().clear();
  for (  Constants.CardType type : source.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : source.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : source.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.getAbilities().clear();
  for (  Ability ability0 : source.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().setValue(source.getPower().getValue());
  target.getToughness().setValue(source.getToughness().getValue());
  return target;
}","@Override public Token apply(Card source){
  if (target == null)   throw new IllegalArgumentException(""String_Node_Str"");
  target.setName(source.getName());
  target.getColor().setColor(source.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(source.getManaCost());
  target.getCardType().clear();
  for (  Constants.CardType type : source.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : source.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : source.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.getAbilities().clear();
  for (  Ability ability0 : source.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().setValue(Integer.parseInt(source.getPower().toString()));
  target.getToughness().setValue(Integer.parseInt(source.getToughness().toString()));
  return target;
}",0.9319271332694152
160037,"@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  return targets.canChoose(controllerId,game);
}","@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  return targets.canChoose(sourceId,controllerId,game);
}",0.9649805447470816
160038,"public int count(FilterCard filter,UUID playerId,Game game);","public int count(FilterCard filter,UUID sourceId,UUID playerId,Game game);",0.8955223880597015
160039,"@Override public int count(FilterCard filter,UUID playerId,Game game){
  int result=0;
  for (  UUID card : this) {
    if (filter.match(game.getCard(card),playerId,game))     result++;
  }
  return result;
}","@Override public int count(FilterCard filter,UUID sourceId,UUID playerId,Game game){
  if (sourceId == null) {
    return count(filter,playerId,game);
  }
  int result=0;
  for (  UUID card : this) {
    if (filter.match(game.getCard(card),sourceId,playerId,game)) {
      result++;
    }
  }
  return result;
}",0.8015414258188824
160040,"public boolean match(Card card,UUID playerId,Game game){
  if (!this.match(card,game)) {
    return false;
  }
  return Predicates.and(extraPredicates).apply(new ObjectPlayer(card,playerId),game);
}","public boolean match(Card card,UUID sourceId,UUID playerId,Game game){
  if (!this.match(card,game)) {
    return false;
  }
  return Predicates.and(extraPredicates).apply(new ObjectSourcePlayer(card,sourceId,playerId),game);
}",0.9317647058823528
160041,"/** 
 * Checks if there are enough   {@link Card} that can be selected.
 * @param sourceControllerId - controller of the select event
 * @param game
 * @return - true if enough valid {@link Card} exist
 */
@Override public boolean canChoose(UUID sourceControllerId,Game game){
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
switch (zone) {
case HAND:
        if (player.getHand().count(filter,player.getId(),game) >= this.minNumberOfTargets) {
          return true;
        }
      break;
case GRAVEYARD:
    if (player.getGraveyard().count(filter,player.getId(),game) >= this.minNumberOfTargets) {
      return true;
    }
  break;
case LIBRARY:
if (player.getLibrary().count(filter,game) >= this.minNumberOfTargets) {
  return true;
}
break;
case EXILED:
if (game.getExile().getPermanentExile().count(filter,player.getId(),game) >= this.minNumberOfTargets) {
return true;
}
break;
}
}
}
return false;
}","/** 
 * Checks if there are enough   {@link Card} that can be selected.
 * @param sourceControllerId - controller of the select event
 * @param game
 * @return - true if enough valid {@link Card} exist
 */
@Override public boolean canChoose(UUID sourceControllerId,Game game){
  return canChoose(null,sourceControllerId,game);
}",0.4279279279279279
160042,"@Override public boolean apply(Game game,Ability source){
  DynamicValue amount=new DisruptingShoalVariableValue();
  Spell spell=game.getStack().getSpell(targetPointer.getFirst(game,source));
  if (spell != null && spell.getManaCost().convertedManaCost() == amount.calculate(game,source)) {
    return game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  DynamicValue amount=new ExileFromHandCostCardConvertedMana();
  Spell spell=game.getStack().getSpell(targetPointer.getFirst(game,source));
  if (spell != null && spell.getManaCost().convertedManaCost() == amount.calculate(game,source)) {
    return game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game);
  }
  return false;
}",0.9230769230769232
160043,"public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode);
      game.getState().addCard(permanent);
      game.getBattlefield().addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      permanent.entersBattlefield(sourceId,game);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}","public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(permanent);
      game.getBattlefield().addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      permanent.entersBattlefield(sourceId,game);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}",0.9970113568439928
160044,"@Override public boolean apply(Game game,Ability source){
  return game.getPermanent(source.getSourceId()).isTransformed();
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    if (notCondition) {
      return !permanent.isTransformed();
    }
 else {
      return permanent.isTransformed();
    }
  }
  return false;
}",0.5202863961813843
160045,"public TransformedCondition(){
}","/** 
 * The condition checks wether a permanent is transformed or not.
 * @param notCondition if true the condition is true when the permanent is not transformed
 * @return true if the condition is true, false if the condition is false
 */
public TransformedCondition(Boolean notCondition){
  this.notCondition=notCondition;
}",0.1787709497206704
160046,"@Override public String getRule(){
  return text;
}","@Override public String getRule(){
  if (text != null && text.isEmpty()) {
    return ability.getRule();
  }
  return text;
}",0.5795454545454546
160047,"/** 
 * Returns true if this abilities source is in the zone for the ability
 * @param game
 * @param checkLKI
 * @return 
 */
public boolean isInUseableZone(Game game,boolean checkLKI);","/** 
 * Returns true if this abilities source is in the zone for the ability
 * @param game
 * @param checkLKI
 * @return 
 */
public boolean isInUseableZone(Game game,MageObject source,boolean checkLKI);",0.953846153846154
160048,"@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  if (!(this instanceof MageSingleton)) {
    MageObject object=game.getObject(getSourceId());
    if (object != null && !object.getAbilities().contains(this)) {
      boolean found=false;
      if (object instanceof PermanentCard && ((PermanentCard)object).canTransform()) {
        PermanentCard permanent=(PermanentCard)object;
        found=permanent.getSecondCardFace().getAbilities().contains(this) || permanent.getCard().getAbilities().contains(this);
      }
      if (!found) {
        return false;
      }
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}","@Override public boolean isInUseableZone(Game game,MageObject source,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  MageObject object;
  UUID sourceId;
  if (this instanceof MageSingleton && source != null) {
    object=source;
    sourceId=source.getId();
  }
 else {
    object=game.getObject(getSourceId());
    sourceId=getSourceId();
  }
  if (object != null && !object.getAbilities().contains(this)) {
    boolean found=false;
    if (object instanceof PermanentCard && ((PermanentCard)object).canTransform()) {
      PermanentCard permanent=(PermanentCard)object;
      found=permanent.getSecondCardFace().getAbilities().contains(this) || permanent.getCard().getAbilities().contains(this);
    }
    if (!found) {
      return false;
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}",0.702845100105374
160049,"public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,true)) {
      MageObject object=getMageObject(event,game,ability);
      if (object != null) {
        if (checkAbilityStillExists(ability,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}","public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,null,true)) {
      MageObject object=getMageObject(event,game,ability);
      if (object != null) {
        if (checkAbilityStillExists(ability,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}",0.9960095770151636
160050,"@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  MageObject before=game.getLastKnownInformation(sourceId,Constants.Zone.BATTLEFIELD);
  Zone after=game.getState().getZone(sourceId);
  return before != null && after != null && Zone.GRAVEYARD.match(after);
}","@Override public boolean isInUseableZone(Game game,MageObject source,boolean checkLKI){
  MageObject before=game.getLastKnownInformation(sourceId,Constants.Zone.BATTLEFIELD);
  Zone after=game.getState().getZone(sourceId);
  return before != null && after != null && Zone.GRAVEYARD.match(after);
}",0.96875
160051,"@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public boolean isInUseableZone(Game game,MageObject source,boolean checkLKI){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9366197183098592
160052,"private static void traceCombat(Game game,Permanent attacker,Permanent blocker){
  String uuid=""String_Node_Str"" + UUID.randomUUID() + ""String_Node_Str"";
  log.error(uuid + ""String_Node_Str"");
  log.error(uuid + blocker.getName() + ""String_Node_Str""+ attacker.getName());
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"");
  for (  Ability ability : attacker.getAbilities()) {
    log.error(uuid + ""String_Node_Str"" + ability.toString()+ ""String_Node_Str""+ ability.getId());
  }
  log.error(uuid + ""String_Node_Str"");
  for (  Ability ability : blocker.getAbilities()) {
    log.error(uuid + ""String_Node_Str"" + ability.toString()+ ""String_Node_Str""+ ability.getId());
  }
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"" + FlyingAbility.getInstance().getId());
  log.error(uuid + ""String_Node_Str"" + ReachAbility.getInstance().getId());
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"");
  Ability ability=attacker.getAbilities().size() > 0 ? attacker.getAbilities().get(0) : null;
  ContinuousEffectsList<RestrictionEffect> restrictionEffects=(ContinuousEffectsList<RestrictionEffect>)game.getContinuousEffects().getRestrictionEffects();
  for (  RestrictionEffect effect : restrictionEffects) {
    log.error(uuid + ""String_Node_Str"" + effect);
    log.error(uuid + ""String_Node_Str"" + effect.getId());
    log.error(uuid + ""String_Node_Str"" + effect.applies(attacker,ability,game));
    log.error(uuid + ""String_Node_Str"" + effect.applies(blocker,ability,game));
  }
  for (  RestrictionEffect effect : restrictionEffects) {
    ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      log.error(uuid + ""String_Node_Str"" + ability+ ""String_Node_Str""+ effect.applies(attacker,ability,game));
      log.error(uuid + ""String_Node_Str"" + ability+ ""String_Node_Str""+ effect.applies(blocker,ability,game));
    }
 else {
      boolean usable=ability.isInUseableZone(game,false);
      log.error(uuid + ""String_Node_Str"" + (ability instanceof StaticAbility)+ ""String_Node_Str""+ ability);
      log.error(uuid + ""String_Node_Str"" + usable+ ""String_Node_Str""+ ability);
      if (!usable) {
        Constants.Zone zone=ability.getZone();
        log.error(uuid + ""String_Node_Str"" + zone);
        MageObject object=game.getObject(ability.getSourceId());
        log.error(uuid + ""String_Node_Str"" + object);
        if (object != null) {
          log.error(uuid + ""String_Node_Str"" + object.getAbilities().contains(ability));
        }
        Constants.Zone test=game.getState().getZone(ability.getSourceId());
        log.error(uuid + ""String_Node_Str"" + test);
      }
    }
  }
  log.error(uuid);
}","private static void traceCombat(Game game,Permanent attacker,Permanent blocker){
  String uuid=""String_Node_Str"" + UUID.randomUUID() + ""String_Node_Str"";
  log.error(uuid + ""String_Node_Str"");
  log.error(uuid + blocker.getName() + ""String_Node_Str""+ attacker.getName());
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"");
  for (  Ability ability : attacker.getAbilities()) {
    log.error(uuid + ""String_Node_Str"" + ability.toString()+ ""String_Node_Str""+ ability.getId());
  }
  log.error(uuid + ""String_Node_Str"");
  for (  Ability ability : blocker.getAbilities()) {
    log.error(uuid + ""String_Node_Str"" + ability.toString()+ ""String_Node_Str""+ ability.getId());
  }
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"" + FlyingAbility.getInstance().getId());
  log.error(uuid + ""String_Node_Str"" + ReachAbility.getInstance().getId());
  log.error(uuid);
  log.error(uuid + ""String_Node_Str"");
  Ability ability=attacker.getAbilities().size() > 0 ? attacker.getAbilities().get(0) : null;
  ContinuousEffectsList<RestrictionEffect> restrictionEffects=(ContinuousEffectsList<RestrictionEffect>)game.getContinuousEffects().getRestrictionEffects();
  for (  RestrictionEffect effect : restrictionEffects) {
    log.error(uuid + ""String_Node_Str"" + effect);
    log.error(uuid + ""String_Node_Str"" + effect.getId());
    log.error(uuid + ""String_Node_Str"" + effect.applies(attacker,ability,game));
    log.error(uuid + ""String_Node_Str"" + effect.applies(blocker,ability,game));
  }
  traceForPermanent(game,attacker,uuid,restrictionEffects);
  traceForPermanent(game,blocker,uuid,restrictionEffects);
  log.error(uuid);
}",0.7049067035245336
160053,"private void addPermanent(PermanentView permanent,final int count){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  final MagePermanent perm=Plugins.getInstance().getMagePermanent(permanent,bigCard,cardDimension,gameId,true);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    perm.setBounds(findEmptySpace(new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight)));
  }
 else {
  }
  permanents.put(permanent.getId(),perm);
  BattlefieldPanel.this.jPanel.add(perm,10);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    moveToFront(perm);
    perm.update(permanent);
  }
 else {
    moveToFront(jPanel);
    Plugins.getInstance().onAddCard(perm,1);
  }
  if (permanent.getCardTypes().contains(Constants.CardType.ARTIFACT)) {
    addedArtifact=true;
  }
 else   if (permanent.getCardTypes().contains(Constants.CardType.CREATURE)) {
    addedCreature=true;
  }
 else {
    addedPermanent=true;
  }
}","private void addPermanent(PermanentView permanent,final int count){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  final MagePermanent perm=Plugins.getInstance().getMagePermanent(permanent,bigCard,cardDimension,gameId,true);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
  }
 else {
  }
  permanents.put(permanent.getId(),perm);
  BattlefieldPanel.this.jPanel.add(perm,10);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    moveToFront(perm);
    perm.update(permanent);
  }
 else {
    moveToFront(jPanel);
    Plugins.getInstance().onAddCard(perm,1);
  }
  if (permanent.getCardTypes().contains(Constants.CardType.ARTIFACT)) {
    addedArtifact=true;
  }
 else   if (permanent.getCardTypes().contains(Constants.CardType.CREATURE)) {
    addedCreature=true;
  }
 else {
    addedPermanent=true;
  }
}",0.9417933927635028
160054,"@Override public void init(Game game,boolean testMode){
  this.abort=false;
  if (!testMode) {
    this.hand.clear();
    this.graveyard.clear();
  }
  this.abilities.clear();
  this.counters.clear();
  this.wins=false;
  this.loses=false;
  this.left=false;
  this.passed=false;
  this.passedTurn=false;
  this.passedAllTurns=false;
  this.canGainLife=true;
  this.canLoseLife=true;
  game.getState().getWatchers().add(new BloodthirstWatcher(playerId));
}","@Override public void init(Game game,boolean testMode){
  this.abort=false;
  if (!testMode) {
    this.hand.clear();
    this.graveyard.clear();
  }
  this.library.reset();
  this.abilities.clear();
  this.counters.clear();
  this.wins=false;
  this.loses=false;
  this.left=false;
  this.passed=false;
  this.passedTurn=false;
  this.passedAllTurns=false;
  this.canGainLife=true;
  this.canLoseLife=true;
  game.getState().getWatchers().add(new BloodthirstWatcher(playerId));
}",0.9722222222222222
160055,"@Override public void loadCards(CardsView showCards,SortBy sortBy,boolean piles,BigCard bigCard,UUID gameId){
  this.bigCard=bigCard;
  this.gameId=gameId;
  int landCount=0;
  int creatureCount=0;
  for (  CardView card : showCards.values()) {
    if (!cards.containsKey(card.getId())) {
      addCard(card,bigCard,gameId);
    }
    if (updateCountsCallback != null) {
      if (card.getCardTypes().contains(Constants.CardType.LAND))       landCount++;
      if (card.getCardTypes().contains(Constants.CardType.CREATURE))       creatureCount++;
    }
  }
  for (Iterator<Entry<UUID,CardView>> i=cards.entrySet().iterator(); i.hasNext(); ) {
    Entry<UUID,CardView> entry=i.next();
    if (!showCards.containsKey(entry.getKey())) {
      i.remove();
      if (displayNoCopies) {
        String key=entry.getValue().getName() + entry.getValue().getExpansionSetCode() + entry.getValue().getCardNumber();
        if (cardsNoCopies.containsKey(key)) {
          Integer count=cardsNoCopies.get(key);
          count--;
          if (count > 0) {
            cardsNoCopies.put(key,count);
          }
 else {
            cardsNoCopies.remove(key);
          }
          for (int j=0; j < view.size(); j++) {
            CardView cv=view.get(j);
            if (cv.getId().equals(entry.getKey())) {
              if (count > 0) {
                String key1=cv.getName() + cv.getExpansionSetCode();
                for (                CardView cardView : cards.values()) {
                  String key2=cardView.getName() + cardView.getExpansionSetCode();
                  if ((key1).equals(key2)) {
                    view.set(j,cardView);
                    break;
                  }
                }
              }
 else {
                view.remove(j);
              }
              break;
            }
          }
        }
      }
 else {
        for (        CardView cv : view) {
          if (cv.getId().equals(entry.getKey())) {
            view.remove(cv);
            break;
          }
        }
      }
    }
  }
  if (updateCountsCallback != null) {
    updateCountsCallback.update(cards.size(),creatureCount,landCount);
  }
  sort(1,true);
  drawCards(sortBy,piles);
}","@Override public void loadCards(CardsView showCards,SortBy sortBy,boolean piles,BigCard bigCard,UUID gameId){
  this.bigCard=bigCard;
  this.gameId=gameId;
  int landCount=0;
  int creatureCount=0;
  for (  CardView card : showCards.values()) {
    if (!cards.containsKey(card.getId())) {
      addCard(card,bigCard,gameId);
    }
    if (updateCountsCallback != null) {
      if (card.getCardTypes().contains(Constants.CardType.LAND))       landCount++;
      if (card.getCardTypes().contains(Constants.CardType.CREATURE))       creatureCount++;
    }
  }
  for (Iterator<Entry<UUID,CardView>> i=cards.entrySet().iterator(); i.hasNext(); ) {
    Entry<UUID,CardView> entry=i.next();
    if (!showCards.containsKey(entry.getKey())) {
      i.remove();
      if (displayNoCopies) {
        String key=entry.getValue().getName() + entry.getValue().getExpansionSetCode() + entry.getValue().getCardNumber();
        if (cardsNoCopies.containsKey(key)) {
          Integer count=cardsNoCopies.get(key);
          count--;
          if (count > 0) {
            cardsNoCopies.put(key,count);
          }
 else {
            cardsNoCopies.remove(key);
          }
          for (int j=0; j < view.size(); j++) {
            CardView cv=view.get(j);
            if (cv.getId().equals(entry.getValue().getId())) {
              if (count > 0) {
                String key1=cv.getName() + cv.getExpansionSetCode() + cv.getCardNumber();
                for (                CardView cardView : cards.values()) {
                  String key2=cardView.getName() + cardView.getExpansionSetCode() + cardView.getCardNumber();
                  if ((key1).equals(key2)) {
                    view.set(j,cardView);
                    break;
                  }
                }
              }
 else {
                view.remove(j);
              }
              break;
            }
          }
        }
      }
 else {
        for (        CardView cv : view) {
          if (cv.getId().equals(entry.getKey())) {
            view.remove(cv);
            break;
          }
        }
      }
    }
  }
  if (updateCountsCallback != null) {
    updateCountsCallback.update(cards.size(),creatureCount,landCount);
  }
  sort(1,true);
  drawCards(sortBy,piles);
}",0.9855725879170424
160056,"protected String getMessageText(Game game){
  StringBuilder sb=new StringBuilder();
  MageObject object=game.getObject(this.sourceId);
  if (object != null)   sb.append(object.getName());
 else   sb.append(""String_Node_Str"");
  if (getTargets().size() > 0) {
    sb.append(""String_Node_Str"");
    for (    Target target : getTargets()) {
      sb.append(target.getTargetedName(game));
    }
  }
  return sb.toString();
}","protected String getMessageText(Game game){
  StringBuilder sb=new StringBuilder();
  MageObject object=game.getObject(this.sourceId);
  if (object != null) {
    if (object instanceof StackAbility) {
      Card card=game.getCard(((StackAbility)object).getSourceId());
      if (card != null) {
        sb.append(card.getName());
      }
 else {
        sb.append(object.getName());
      }
    }
 else {
      sb.append(object.getName());
    }
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (getTargets().size() > 0) {
    sb.append(""String_Node_Str"");
    for (    Target target : getTargets()) {
      sb.append(target.getTargetedName(game));
    }
  }
  return sb.toString();
}",0.7171171171171171
160057,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case OUTSIDE:
case PICK:
break;
default :
logger.fatal(""String_Node_Str"" + fromZone);
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
updateZoneChangeCounter();
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case LIBRARY:
if (flag) game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
 else game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
if (flag) permanent.setTapped(true);
event.setTarget(permanent);
break;
default :
logger.fatal(""String_Node_Str"" + toZone);
return false;
}
setControllerId(ownerId);
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case OUTSIDE:
case PICK:
break;
default :
logger.fatal(""String_Node_Str"" + fromZone);
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
updateZoneChangeCounter();
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case LIBRARY:
if (flag) game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
 else game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
if (flag) permanent.setTapped(true);
event.setTarget(permanent);
break;
default :
logger.fatal(""String_Node_Str"" + toZone);
return false;
}
setControllerId(ownerId);
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}",0.9888947646747752
160058,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.9810981098109812
160059,"public List<RestrictionEffect> getApplicableRestrictionEffects(Permanent permanent,Game game){
  List<RestrictionEffect> effects=new ArrayList<RestrictionEffect>();
  for (  RestrictionEffect effect : restrictionEffects) {
    Ability ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}","public List<RestrictionEffect> getApplicableRestrictionEffects(Permanent permanent,Game game){
  List<RestrictionEffect> effects=new ArrayList<RestrictionEffect>();
  for (  RestrictionEffect effect : restrictionEffects) {
    Ability ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,permanent,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}",0.9897330595482546
160060,"/** 
 * Filters out asThough effects that are not active.
 * @param game
 * @return
 */
private List<AsThoughEffect> getApplicableAsThoughEffects(Game game){
  List<AsThoughEffect> asThoughEffectsList=new ArrayList<AsThoughEffect>();
  for (  AsThoughEffect effect : asThoughEffects) {
    Ability ability=asThoughEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        asThoughEffectsList.add(effect);
      }
    }
  }
  return asThoughEffectsList;
}","/** 
 * Filters out asThough effects that are not active.
 * @param game
 * @return
 */
private List<AsThoughEffect> getApplicableAsThoughEffects(Game game){
  List<AsThoughEffect> asThoughEffectsList=new ArrayList<AsThoughEffect>();
  for (  AsThoughEffect effect : asThoughEffects) {
    Ability ability=asThoughEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        asThoughEffectsList.add(effect);
      }
    }
  }
  return asThoughEffectsList;
}",0.9958437240232751
160061,"/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event,Game game){
  List<ReplacementEffect> replaceEffects=new ArrayList<ReplacementEffect>();
  if (planeswalkerRedirectionEffect.applies(event,null,game))   replaceEffects.add(planeswalkerRedirectionEffect);
  if (auraReplacementEffect.applies(event,null,game))   replaceEffects.add(auraReplacementEffect);
  for (  ReplacementEffect effect : replacementEffects) {
    Ability ability=replacementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    Ability ability=preventionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  return replaceEffects;
}","/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event,Game game){
  List<ReplacementEffect> replaceEffects=new ArrayList<ReplacementEffect>();
  if (planeswalkerRedirectionEffect.applies(event,null,game))   replaceEffects.add(planeswalkerRedirectionEffect);
  if (auraReplacementEffect.applies(event,null,game))   replaceEffects.add(auraReplacementEffect);
  for (  ReplacementEffect effect : replacementEffects) {
    Ability ability=replacementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    Ability ability=preventionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(event,ability,game)) {
          replaceEffects.add(effect);
        }
      }
    }
  }
  return replaceEffects;
}",0.9962518740629686
160062,"/** 
 * Filters out cost modification effects that are not active.
 * @param game
 * @return
 */
private List<CostModificationEffect> getApplicableCostModificationEffects(Game game){
  List<CostModificationEffect> costEffects=new ArrayList<CostModificationEffect>();
  for (  CostModificationEffect effect : costModificationEffects) {
    Ability ability=costModificationEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        costEffects.add(effect);
      }
    }
  }
  return costEffects;
}","/** 
 * Filters out cost modification effects that are not active.
 * @param game
 * @return
 */
private List<CostModificationEffect> getApplicableCostModificationEffects(Game game){
  List<CostModificationEffect> costEffects=new ArrayList<CostModificationEffect>();
  for (  CostModificationEffect effect : costModificationEffects) {
    Ability ability=costModificationEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        costEffects.add(effect);
      }
    }
  }
  return costEffects;
}",0.9961089494163424
160063,"public List<ContinuousEffect> getLayeredEffects(Game game){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : layeredEffects) {
switch (effect.getDuration()) {
case WhileOnBattlefield:
case WhileOnStack:
case WhileInGraveyard:
      Ability ability=layeredEffects.getAbility(effect.getId());
    if (ability.isInUseableZone(game,false))     layerEffects.add(effect);
  break;
default :
layerEffects.add(effect);
}
}
updateTimestamps(layerEffects);
Collections.sort(layerEffects,new TimestampSorter());
return layerEffects;
}","public List<ContinuousEffect> getLayeredEffects(Game game){
  List<ContinuousEffect> layerEffects=new ArrayList<ContinuousEffect>();
  for (  ContinuousEffect effect : layeredEffects) {
switch (effect.getDuration()) {
case WhileOnBattlefield:
case WhileOnStack:
case WhileInGraveyard:
      Ability ability=layeredEffects.getAbility(effect.getId());
    if (ability.isInUseableZone(game,null,false))     layerEffects.add(effect);
  break;
default :
layerEffects.add(effect);
}
}
updateTimestamps(layerEffects);
Collections.sort(layerEffects,new TimestampSorter());
return layerEffects;
}",0.9957228400342172
160064,"public List<RequirementEffect> getApplicableRequirementEffects(Permanent permanent,Game game){
  List<RequirementEffect> effects=new ArrayList<RequirementEffect>();
  for (  RequirementEffect effect : requirementEffects) {
    Ability ability=requirementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}","public List<RequirementEffect> getApplicableRequirementEffects(Permanent permanent,Game game){
  List<RequirementEffect> effects=new ArrayList<RequirementEffect>();
  for (  RequirementEffect effect : requirementEffects) {
    Ability ability=requirementEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
      if (effect.applies(permanent,ability,game))       effects.add(effect);
    }
  }
  return effects;
}",0.9948400412796696
160065,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  getAffectedObjects().add(source.getSourceId());
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}",0.896414342629482
160066,"@Override public void resetForSourceId(UUID sourceId){
  for (  ContinuousEffect effect : getContinuousEffects().getLayeredEffects(this)) {
    if (effect.getAffectedObjects().contains(sourceId)) {
      effect.getAffectedObjects().remove(sourceId);
    }
    if (effect.getAffectedObjects().contains(sourceId)) {
      effect.getAffectedObjects().remove(sourceId);
    }
  }
  getContinuousEffects().removeGainedEffectsForSource(sourceId);
}","@Override public void resetForSourceId(UUID sourceId){
  for (  ContinuousEffect effect : getContinuousEffects().getLayeredEffects(this)) {
    if (effect.getAffectedObjects().contains(sourceId)) {
      effect.getAffectedObjects().remove(sourceId);
      if (effect instanceof SourceEffect) {
        effect.discard();
      }
    }
  }
  getContinuousEffects().removeGainedEffectsForSource(sourceId);
}",0.7848699763593381
160067,"@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  MageObject object=game.getObject(getSourceId());
  if (object != null && !object.getAbilities().contains(this)) {
    boolean found=false;
    if (object instanceof PermanentCard && ((PermanentCard)object).canTransform()) {
      PermanentCard permanent=(PermanentCard)object;
      found=permanent.getSecondCardFace().getAbilities().contains(this) || permanent.getCard().getAbilities().contains(this);
    }
    if (!found) {
      return false;
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}","@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  if (!(this instanceof MageSingleton)) {
    MageObject object=game.getObject(getSourceId());
    if (object != null && !object.getAbilities().contains(this)) {
      boolean found=false;
      if (object instanceof PermanentCard && ((PermanentCard)object).canTransform()) {
        PermanentCard permanent=(PermanentCard)object;
        found=permanent.getSecondCardFace().getAbilities().contains(this) || permanent.getCard().getAbilities().contains(this);
      }
      if (!found) {
        return false;
      }
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}",0.944770857814336
160068,"@Override public List<String> getRules(String source){
  List<String> rules=new ArrayList<String>();
  for (  T ability : this) {
    if (!(ability instanceof SpellAbility || ability instanceof PlayLandAbility))     rules.add(ability.getRule());
    if (ability instanceof SpellAbility) {
      if (ability.getAlternativeCosts().size() > 0) {
        StringBuilder sbRule=new StringBuilder();
        for (        AlternativeCost cost : ability.getAlternativeCosts()) {
          sbRule.append(cost.getName()).append(""String_Node_Str"");
        }
        rules.add(sbRule.toString());
      }
      if (ability.getCosts().size() > 0) {
        StringBuilder sbRule=new StringBuilder();
        for (        Cost cost : ability.getCosts()) {
          sbRule.append(cost.getText()).append(""String_Node_Str"");
        }
        rules.add(sbRule.toString());
      }
    }
  }
  return rules;
}","@Override public List<String> getRules(String source){
  List<String> rules=new ArrayList<String>();
  for (  T ability : this) {
    if (!(ability instanceof SpellAbility || ability instanceof PlayLandAbility))     rules.add(ability.getRule());
    if (ability instanceof SpellAbility) {
      if (ability.getAlternativeCosts().size() > 0) {
        StringBuilder sbRule=new StringBuilder();
        for (        AlternativeCost cost : ability.getAlternativeCosts()) {
          sbRule.append(cost.getName()).append(""String_Node_Str"");
        }
        rules.add(sbRule.toString());
      }
      if (ability.getCosts().size() > 0) {
        StringBuilder sbRule=new StringBuilder();
        for (        Cost cost : ability.getCosts()) {
          if (cost.getText() != null && !cost.getText().isEmpty()) {
            if (!cost.getText().startsWith(""String_Node_Str"")) {
              sbRule.append(""String_Node_Str"");
            }
            sbRule.append(cost.getText()).append(""String_Node_Str"");
          }
        }
        rules.add(sbRule.toString());
      }
    }
  }
  return rules;
}",0.8534136546184738
160069,"protected Integer addActionsTimed(){
  FutureTask<Integer> task=new FutureTask<Integer>(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      return addActions(root,maxDepth,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
  }
);
  pool.execute(task);
  try {
    return task.get(maxThink,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.info(""String_Node_Str"");
    task.cancel(true);
  }
catch (  ExecutionException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  Exception e) {
    e.printStackTrace();
    task.cancel(true);
  }
  return 0;
}","protected Integer addActionsTimed(){
  FutureTask<Integer> task=new FutureTask<Integer>(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      return addActions(root,maxDepth,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
  }
);
  pool.execute(task);
  try {
    System.out.println(""String_Node_Str"" + maxThink);
    return task.get(maxThink,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.info(""String_Node_Str"");
    task.cancel(true);
  }
catch (  ExecutionException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  Exception e) {
    e.printStackTrace();
    task.cancel(true);
  }
  return 0;
}",0.9626038781163436
160070,"protected void act(Game game){
  if (actions == null || actions.size() == 0)   pass();
 else {
    boolean usedStack=false;
    while (actions.peek() != null) {
      Ability ability=actions.poll();
      System.out.println(""String_Node_Str"" + game.getPlayer(playerId).getName() + ""String_Node_Str""+ ability.toString());
      if (ability.getTargets().size() > 0) {
        Player player=game.getPlayer(ability.getFirstTarget());
        if (player != null) {
          System.out.println(""String_Node_Str"" + player.getName());
        }
      }
      this.activateAbility((ActivatedAbility)ability,game);
      if (ability.isUsesStack())       usedStack=true;
      if (!suggested.isEmpty() && !(ability instanceof PassAbility)) {
        Iterator<String> it=suggested.iterator();
        while (it.hasNext()) {
          Card card=game.getCard(ability.getSourceId());
          String action=it.next();
          System.out.println(""String_Node_Str"" + action + ""String_Node_Str""+ card);
          if (action.equals(card.getName())) {
            System.out.println(""String_Node_Str"" + action);
            it.remove();
          }
        }
      }
    }
    if (usedStack)     pass();
  }
}","protected void act(Game game){
  if (actions == null || actions.size() == 0)   pass();
 else {
    boolean usedStack=false;
    while (actions.peek() != null) {
      Ability ability=actions.poll();
      System.out.println(""String_Node_Str"" + game.getPlayer(playerId).getName() + ""String_Node_Str""+ ability.toString());
      if (ability.getTargets().size() > 0) {
        for (        Target target : ability.getTargets()) {
          for (          UUID id : target.getTargets()) {
            target.updateTarget(id,game);
          }
        }
        Player player=game.getPlayer(ability.getFirstTarget());
        if (player != null) {
          System.out.println(""String_Node_Str"" + player.getName());
        }
      }
      this.activateAbility((ActivatedAbility)ability,game);
      if (ability.isUsesStack())       usedStack=true;
      if (!suggested.isEmpty() && !(ability instanceof PassAbility)) {
        Iterator<String> it=suggested.iterator();
        while (it.hasNext()) {
          Card card=game.getCard(ability.getSourceId());
          String action=it.next();
          System.out.println(""String_Node_Str"" + action + ""String_Node_Str""+ card);
          if (action.equals(card.getName())) {
            System.out.println(""String_Node_Str"" + action);
            it.remove();
          }
        }
      }
    }
    if (usedStack)     pass();
  }
}",0.928766056831452
160071,"public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,object.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          MageObject emblem=game.getEmblem(stackAbility.getSourceId());
          if (emblem != null) {
            Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
            if (sourceCard != null) {
              stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
              stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
            }
          }
          stack.put(stackObject.getId(),new CardView(stackAbility));
          checkPaid(stackObject.getId(),stackAbility);
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}","public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,card.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          MageObject emblem=game.getEmblem(stackAbility.getSourceId());
          if (emblem != null) {
            Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
            if (sourceCard != null) {
              stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
              stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
            }
          }
          stack.put(stackObject.getId(),new CardView(stackAbility));
          checkPaid(stackObject.getId(),stackAbility);
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}",0.9982900136798906
160072,"protected String formatRule(String rule,String source){
  String replace=rule.replace(""String_Node_Str"",source);
  replace=replace.replace(""String_Node_Str"",source);
  return replace;
}","protected String formatRule(String rule,String source){
  String replace=rule;
  if (source != null && !source.isEmpty()) {
    replace=rule.replace(""String_Node_Str"",source);
    replace=replace.replace(""String_Node_Str"",source);
  }
  return replace;
}",0.7699316628701595
160073,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case LIBRARY:
if (flag) owner.getLibrary().putOnTop(card,game);
 else owner.getLibrary().putOnBottom(card,game);
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone);
    if (!game.replaceEvent(event)) {
      if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
        for (        ContinuousEffect effect : game.getContinuousEffects().getLayeredEffects(game)) {
          if (effect.getAffectedObjects().contains(getId())) {
            effect.getAffectedObjects().remove(getId());
          }
        }
      }
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case LIBRARY:
if (flag) owner.getLibrary().putOnTop(card,game);
 else owner.getLibrary().putOnBottom(card,game);
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}",0.869857262804366
160074,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null)   this.txtStep.setText(game.getStep().toString());
 else   this.txtStep.setText(""String_Node_Str"");
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  updatePhases(game.getStep());
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null)   this.txtStep.setText(game.getStep().toString());
 else   this.txtStep.setText(""String_Node_Str"");
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}",0.9882740930743862
160075,"/** 
 * Update phase buttons\labels.
 */
private void updatePhases(Constants.PhaseStep step){
  if (step == null) {
    logger.warn(""String_Node_Str"");
    return;
  }
  if (currentStep != null) {
    currentStep.setLocation(prevPoint);
  }
switch (step) {
case UNTAP:
    updateButton(""String_Node_Str"");
  break;
case UPKEEP:
updateButton(""String_Node_Str"");
break;
case DRAW:
updateButton(""String_Node_Str"");
break;
case PRECOMBAT_MAIN:
updateButton(""String_Node_Str"");
break;
case BEGIN_COMBAT:
updateButton(""String_Node_Str"");
break;
case DECLARE_ATTACKERS:
updateButton(""String_Node_Str"");
break;
case DECLARE_BLOCKERS:
updateButton(""String_Node_Str"");
break;
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
updateButton(""String_Node_Str"");
break;
case POSTCOMBAT_MAIN:
updateButton(""String_Node_Str"");
break;
case END_TURN:
updateButton(""String_Node_Str"");
break;
}
}","/** 
 * Update phase buttons\labels.
 */
private void updatePhases(Constants.PhaseStep step){
  if (step == null) {
    logger.warn(""String_Node_Str"");
    return;
  }
  if (currentStep != null) {
    currentStep.setLocation(prevPoint);
  }
switch (step) {
case UNTAP:
    updateButton(""String_Node_Str"");
  break;
case UPKEEP:
updateButton(""String_Node_Str"");
break;
case DRAW:
updateButton(""String_Node_Str"");
break;
case PRECOMBAT_MAIN:
updateButton(""String_Node_Str"");
break;
case BEGIN_COMBAT:
updateButton(""String_Node_Str"");
break;
case DECLARE_ATTACKERS:
updateButton(""String_Node_Str"");
break;
case DECLARE_BLOCKERS:
updateButton(""String_Node_Str"");
break;
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
updateButton(""String_Node_Str"");
break;
case END_COMBAT:
updateButton(""String_Node_Str"");
break;
case POSTCOMBAT_MAIN:
updateButton(""String_Node_Str"");
break;
case END_TURN:
updateButton(""String_Node_Str"");
break;
}
}",0.9683509161576902
160076,"@Override public Set<UUID> possibleTargets(UUID sourceId,UUID sourceControllerId,Game game){
  Set<UUID> availablePossibleTargets=super.possibleTargets(sourceId,sourceControllerId,game);
  Set<UUID> possibleTargets=new HashSet<UUID>();
  MageObject object=game.getObject(sourceId);
  if (object instanceof StackObject) {
    UUID playerId=((StackObject)object).getStackAbility().getFirstTarget();
    for (    UUID targetId : availablePossibleTargets) {
      Permanent permanent=game.getPermanent(targetId);
      if (permanent != null && permanent.getControllerId().equals(playerId)) {
        possibleTargets.add(targetId);
      }
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceId,UUID sourceControllerId,Game game){
  Set<UUID> availablePossibleTargets=super.possibleTargets(sourceId,sourceControllerId,game);
  Set<UUID> possibleTargets=new HashSet<UUID>();
  MageObject object=game.getObject(sourceId);
  for (  StackObject item : game.getState().getStack()) {
    if (item.getId().equals(sourceId)) {
      object=item;
    }
    if (item.getSourceId().equals(sourceId)) {
      object=item;
    }
  }
  if (object instanceof StackObject) {
    UUID playerId=((StackObject)object).getStackAbility().getFirstTarget();
    for (    UUID targetId : availablePossibleTargets) {
      Permanent permanent=game.getPermanent(targetId);
      if (permanent != null && permanent.getControllerId().equals(playerId)) {
        possibleTargets.add(targetId);
      }
    }
  }
  return possibleTargets;
}",0.8251295336787565
160077,"@Override public boolean resolve(Game game){
  if (ability.getTargets().stillLegal(ability,game)) {
    return ability.resolve(game);
  }
  counter(null,game);
  return false;
}","@Override public boolean resolve(Game game){
  if (ability.getTargets().stillLegal(ability,game)) {
    return ability.resolve(game);
  }
  game.informPlayers(""String_Node_Str"" + getRule());
  counter(null,game);
  return false;
}",0.8697788697788698
160078,"public boolean stillLegal(Ability source,Game game){
  int illegalCount=0;
  for (  Target target : this) {
    if (target.isLegal(source,game)) {
      illegalCount++;
    }
  }
  return this.size() == illegalCount;
}","public boolean stillLegal(Ability source,Game game){
  int illegalCount=0;
  for (  Target target : this) {
    if (!target.isLegal(source,game)) {
      illegalCount++;
    }
  }
  return this.size() == 0 || this.size() != illegalCount;
}",0.9540481400437636
160079,"@Override public DearlyDeparted copy(){
  return new DearlyDeparted(this);
}","@Override public EntersBattlefieldEffect copy(){
  return new EntersBattlefieldEffect(this);
}",0.6352941176470588
160080,"@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}","@Override public boolean isInUseableZone(Game game,boolean checkLKI){
  if (zone.equals(Zone.COMMAND)) {
    return true;
  }
  if (checkLKI) {
    MageObject lkiTest=game.getShortLivingLKI(getSourceId(),zone);
    if (lkiTest != null) {
      return true;
    }
  }
  MageObject object=game.getObject(getSourceId());
  if (object != null && !object.getAbilities().contains(this)) {
    boolean found=false;
    if (object instanceof PermanentCard && ((PermanentCard)object).canTransform()) {
      PermanentCard permanent=(PermanentCard)object;
      found=permanent.getSecondCardFace().getAbilities().contains(this) || permanent.getCard().getAbilities().contains(this);
    }
    if (!found) {
      return false;
    }
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}",0.5429787234042553
160081,"public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
  collectAllEffects();
}","public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
  for (  Map.Entry<Effect,UUID> entry : effect.sources.entrySet()) {
    sources.put(entry.getKey(),entry.getValue());
  }
  collectAllEffects();
}",0.9146426092990978
160082,"public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.CopyEffects_1,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layerEffects=getLayeredEffects(game);
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,layeredEffects.getAbility(effect.getId()),game);
  }
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,layeredEffects.getAbility(effect.getId()),game);
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PlayerEffects,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.RulesEffects,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
}","public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.CopyEffects_1,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
  for (  ContinuousEffect effect : layer) {
    layerEffects=getLayeredEffects(game);
    if (layerEffects.contains(effect)) {
      effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,layeredEffects.getAbility(effect.getId()),game);
  }
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,layeredEffects.getAbility(effect.getId()),game);
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.PlayerEffects,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    effect.apply(Layer.RulesEffects,SubLayer.NA,layeredEffects.getAbility(effect.getId()),game);
  }
}",0.9762131303520456
160083,"public void clear(){
  for (  ContinuousEffectsList effectsList : allEffectsLists) {
    effectsList.clear();
  }
}","public void clear(){
  for (  ContinuousEffectsList effectsList : allEffectsLists) {
    effectsList.clear();
  }
  sources.clear();
}",0.923694779116466
160084,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent perm : game.getBattlefield().getAllActivePermanents(filter,source.getControllerId(),game)) {
    if (!this.affectedObjectsSet || objects.contains(perm.getId())) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        for (        Ability abilityToAdd : ability) {
          perm.addAbility(abilityToAdd,game);
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Permanent perm : game.getBattlefield().getAllActivePermanents(filter,source.getControllerId(),game)) {
    if (!this.affectedObjectsSet || objects.contains(perm.getId())) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        for (        Ability abilityToAdd : ability) {
          perm.addAbility(abilityToAdd,source.getSourceId(),game);
        }
      }
    }
  }
  return true;
}",0.9776833156216792
160085,"@Override public boolean apply(Game game,Ability source){
  int affectedTargets=0;
  for (  UUID permanentId : targetPointer.getTargets(game,source)) {
    Permanent permanent=game.getPermanent(permanentId);
    if (permanent != null) {
      permanent.getAbilities().clear();
      affectedTargets++;
    }
  }
  return affectedTargets > 0;
}","@Override public boolean apply(Game game,Ability source){
  int affectedTargets=0;
  for (  UUID permanentId : targetPointer.getTargets(game,source)) {
    Permanent permanent=game.getPermanent(permanentId);
    if (permanent != null) {
      permanent.removeAllAbilities(source.getSourceId(),game);
      affectedTargets++;
    }
  }
  return affectedTargets > 0;
}",0.9393511988716502
160086,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.9904588823262154
160087,"public void addEffect(ContinuousEffect effect,Ability source){
  effects.addEffect(effect,source);
}","public void addEffect(ContinuousEffect effect,UUID sourceId,Ability source){
  effects.addEffect(effect,sourceId,source);
}",0.8968609865470852
160088,"public void addAbility(Ability ability,MageObject attachedTo){
  if (ability instanceof StaticAbility) {
    if (ability instanceof KickerAbility) {
      return;
    }
    for (    Mode mode : ability.getModes().values()) {
      for (      Effect effect : mode.getEffects()) {
        if (effect instanceof ContinuousEffect) {
          addEffect((ContinuousEffect)effect,ability);
        }
      }
    }
  }
 else   if (ability instanceof TriggeredAbility) {
    this.triggers.add((TriggeredAbility)ability,attachedTo);
  }
}","public void addAbility(Ability ability,UUID sourceId,MageObject attachedTo){
  if (ability instanceof StaticAbility) {
    if (ability instanceof KickerAbility) {
      return;
    }
    for (    Mode mode : ability.getModes().values()) {
      for (      Effect effect : mode.getEffects()) {
        if (effect instanceof ContinuousEffect) {
          addEffect((ContinuousEffect)effect,sourceId,ability);
        }
      }
    }
  }
 else   if (ability instanceof TriggeredAbility) {
    this.triggers.add((TriggeredAbility)ability,attachedTo);
  }
}",0.9787234042553192
160089,"public void addAbility(Ability ability,Game game);","public void addAbility(Ability ability,UUID sourceId,Game game);",0.8771929824561403
160090,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone);
    if (!game.replaceEvent(event)) {
      if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
        for (        ContinuousEffect effect : game.getContinuousEffects().getLayeredEffects(game)) {
          if (effect.getAffectedObjects().contains(getId())) {
            effect.getAffectedObjects().remove(getId());
          }
        }
      }
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case LIBRARY:
if (flag) owner.getLibrary().putOnTop(card,game);
 else owner.getLibrary().putOnBottom(card,game);
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone);
    if (!game.replaceEvent(event)) {
      if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
        game.resetForSourceId(getId());
      }
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case LIBRARY:
if (flag) owner.getLibrary().putOnTop(card,game);
 else owner.getLibrary().putOnBottom(card,game);
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}",0.8938906752411575
160091,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.LOST_CONTROL) {
    if (event.getPlayerId().equals(source.getControllerId()) && event.getTargetId().equals(source.getSourceId())) {
      this.used=true;
      return false;
    }
  }
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && event.getTargetId().equals(source.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD) {
      this.used=true;
      return false;
    }
  }
  if (game.getTurn().getStepType() == Constants.PhaseStep.UNTAP && event.getType() == GameEvent.EventType.UNTAP) {
    if (event.getTargetId().equals(targetPointer.getFirst(game,source))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.LOST_CONTROL) {
    if (event.getTargetId().equals(source.getSourceId())) {
      this.used=true;
      return false;
    }
  }
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && event.getTargetId().equals(source.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD) {
      this.used=true;
      return false;
    }
  }
  if (game.getTurn().getStepType() == Constants.PhaseStep.UNTAP && event.getType() == GameEvent.EventType.UNTAP) {
    if (event.getTargetId().equals(targetPointer.getFirst(game,source))) {
      return true;
    }
  }
  return false;
}",0.964102564102564
160092,"public void clear(){
  layeredEffects.clear();
  replacementEffects.clear();
  preventionEffects.clear();
  requirementEffects.clear();
  restrictionEffects.clear();
  asThoughEffects.clear();
  costModificationEffects.clear();
}","public void clear(){
  for (  ContinuousEffectsList effectsList : allEffectsLists) {
    effectsList.clear();
  }
}",0.2616279069767442
160093,"public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
}","public ContinuousEffects(final ContinuousEffects effect){
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  this.auraReplacementEffect=effect.auraReplacementEffect.copy();
  layeredEffects=effect.layeredEffects.copy();
  replacementEffects=effect.replacementEffects.copy();
  preventionEffects=effect.preventionEffects.copy();
  requirementEffects=effect.requirementEffects.copy();
  restrictionEffects=effect.restrictionEffects.copy();
  asThoughEffects=effect.asThoughEffects.copy();
  costModificationEffects=effect.costModificationEffects.copy();
  collectAllEffects();
}",0.9822393822393822
160094,"@Override public boolean changeControllerId(UUID controllerId,Game game){
  if (!controllerId.equals(this.controllerId)) {
    Player newController=game.getPlayer(controllerId);
    if (newController != null && (!newController.hasLeft() || !newController.hasLost())) {
      if (!controllerId.equals(beforeResetControllerId)) {
        this.removeFromCombat(game);
        this.controlledFromStartOfControllerTurn=false;
        this.controllerChanged=true;
      }
 else {
        this.controllerChanged=false;
      }
      this.controllerId=controllerId;
      this.abilities.setControllerId(controllerId);
      return true;
    }
  }
  return false;
}","@Override public boolean changeControllerId(UUID controllerId,Game game){
  if (!controllerId.equals(this.controllerId)) {
    Player newController=game.getPlayer(controllerId);
    if (newController != null && (!newController.hasLeft() || !newController.hasLost())) {
      if (!controllerId.equals(beforeResetControllerId)) {
        this.removeFromCombat(game);
        this.controlledFromStartOfControllerTurn=false;
        this.controllerChanged=true;
      }
 else {
        this.controllerChanged=false;
      }
      this.controllerId=controllerId;
      this.abilities.setControllerId(controllerId);
      game.getContinuousEffects().setController(this.objectId,controllerId);
      return true;
    }
  }
  return false;
}",0.9445644348452124
160095,"/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setTitle(""String_Node_Str"" + version);
  clientId=UUID.randomUUID();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.getInstance().loadPlugins();
  initComponents();
  setSize(1024,768);
  SettingsManager.getInstance().setScreenWidthAndHeight(1024,768);
  DialogManager.getManager().setScreenWidth(1024);
  DialogManager.getManager().setScreenHeight(768);
  DialogManager.getManager().setBounds(0,0,1024,768);
  DialogManager.getManager().setVisible(false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  session=new SessionImpl(this);
  session.setEmbeddedMageServerAction(new Action(){
    @Override public void execute(){
      Main.main(new String[]{});
    }
  }
);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.POPUP_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  pingTaskExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      session.ping();
    }
  }
,60,60,TimeUnit.SECONDS);
  try {
    tablesPane=new TablesPane();
    desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    tablesPane.setMaximum(true);
    collectionViewerPane=new CollectionViewerPane();
    desktopPane.add(collectionViewerPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    collectionViewerPane.setMaximum(true);
  }
 catch (  PropertyVetoException ex) {
    logger.fatal(null,ex);
  }
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.getInstance().install();
  desktopPane.add(ArrowBuilder.getArrowsPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      JPanel arrowsPanel=ArrowBuilder.getArrowsPanelRef();
      if (arrowsPanel != null)       arrowsPanel.setSize(width,height);
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  mageToolbar.add(new javax.swing.JToolBar.Separator());
  mageToolbar.add(createWindowsButton());
  if (Plugins.getInstance().isCardPluginLoaded()) {
    Separator separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownloadSymbols=new JButton(""String_Node_Str"");
    btnDownloadSymbols.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownloadSymbols.setFocusable(false);
    btnDownloadSymbols.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownloadSymbols.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownloadSymbols.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnSymbolsActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownloadSymbols);
    separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownload=new JButton(""String_Node_Str"");
    btnDownload.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownload.setFocusable(false);
    btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownload.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnImagesActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownload);
  }
  if (Plugins.getInstance().isCounterPluginLoaded()) {
    int i=Plugins.getInstance().getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  ui.addButton(MageComponents.TABLES_MENU_BUTTON,btnGames);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      disableButtons();
      if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str""))       checkForNewImages();
      logger.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
      if (autoConnect())       enableButtons();
 else {
        connectDialog.showDialog();
      }
    }
  }
);
}","/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setTitle(""String_Node_Str"" + version);
  clientId=UUID.randomUUID();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.getInstance().loadPlugins();
  initComponents();
  setSize(1024,768);
  SettingsManager.getInstance().setScreenWidthAndHeight(1024,768);
  DialogManager.updateParams(768,1024,false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  session=new SessionImpl(this);
  session.setEmbeddedMageServerAction(new Action(){
    @Override public void execute(){
      Main.main(new String[]{});
    }
  }
);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.POPUP_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  pingTaskExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      session.ping();
    }
  }
,60,60,TimeUnit.SECONDS);
  try {
    tablesPane=new TablesPane();
    desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    tablesPane.setMaximum(true);
    collectionViewerPane=new CollectionViewerPane();
    desktopPane.add(collectionViewerPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    collectionViewerPane.setMaximum(true);
  }
 catch (  PropertyVetoException ex) {
    logger.fatal(null,ex);
  }
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.getInstance().install();
  desktopPane.add(ArrowBuilder.getArrowsPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      JPanel arrowsPanel=ArrowBuilder.getArrowsPanelRef();
      if (arrowsPanel != null)       arrowsPanel.setSize(width,height);
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  mageToolbar.add(new javax.swing.JToolBar.Separator());
  mageToolbar.add(createWindowsButton());
  if (Plugins.getInstance().isCardPluginLoaded()) {
    Separator separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownloadSymbols=new JButton(""String_Node_Str"");
    btnDownloadSymbols.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownloadSymbols.setFocusable(false);
    btnDownloadSymbols.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownloadSymbols.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownloadSymbols.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnSymbolsActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownloadSymbols);
    separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownload=new JButton(""String_Node_Str"");
    btnDownload.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownload.setFocusable(false);
    btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownload.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnImagesActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownload);
  }
  if (Plugins.getInstance().isCounterPluginLoaded()) {
    int i=Plugins.getInstance().getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  ui.addButton(MageComponents.TABLES_MENU_BUTTON,btnGames);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      disableButtons();
      if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str""))       checkForNewImages();
      logger.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
      if (autoConnect())       enableButtons();
 else {
        connectDialog.showDialog();
      }
    }
  }
);
}",0.9824324324324324
160096,"public static DialogManager getManager(){
  if (dialogManager == null) {
    dialogManager=new DialogManager();
    dialogManager.setVisible(true);
  }
  return dialogManager;
}","public static DialogManager getManager(UUID gameId){
  if (!dialogManagers.containsKey(gameId)) {
synchronized (dialogManagers) {
      if (!dialogManagers.containsKey(gameId)) {
        DialogManager dialogManager=new DialogManager();
        dialogManager.setScreenWidth(768);
        dialogManager.setScreenHeight(1024);
        dialogManager.setBounds(0,0,768,1024);
        dialogManager.setVisible(false);
        dialogManagers.put(gameId,dialogManager);
      }
    }
  }
  return dialogManagers.get(gameId);
}",0.3136690647482014
160097,"/** 
 * This is the default constructor
 */
public ChoiceDialog(DlgParams params){
  super(params);
  this.params=params;
  cards=params.getCards();
  isOptional=params.isOptional();
  isCancelStopsPlaying=params.isCancelStopsPlaying();
  isChooseAbility=params.isChooseAbility();
  in_a_row=5;
  rows=2;
  maxPages=cards.size() / (in_a_row * rows);
  if (cards.size() % (in_a_row * rows) != 0) {
    maxPages++;
  }
  initialize();
}","/** 
 * This is the default constructor
 */
public ChoiceDialog(DlgParams params){
  super(params);
  this.params=params;
  this.gameId=params.gameId;
  cards=params.getCards();
  isOptional=params.isOptional();
  isCancelStopsPlaying=params.isCancelStopsPlaying();
  isChooseAbility=params.isChooseAbility();
  in_a_row=5;
  rows=2;
  maxPages=cards.size() / (in_a_row * rows);
  if (cards.size() % (in_a_row * rows) != 0) {
    maxPages++;
  }
  initialize();
}",0.967670011148272
160098,"private HoverButton getJButtonOK(){
  if (jButtonOK == null) {
    jButtonOK=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgActiveAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 75;
    int h=getDlgParams().rect.height - 90;
    jButtonOK.setBounds(new Rectangle(w / 2 - 40,h - 50,60,60));
    jButtonOK.setToolTipText(""String_Node_Str"");
    jButtonOK.setObserver(new Command(){
      public void execute(){
        DialogManager.getManager().fadeOut((DialogContainer)getParent());
      }
    }
);
  }
  return jButtonOK;
}","private HoverButton getJButtonOK(){
  if (jButtonOK == null) {
    jButtonOK=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgActiveAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 75;
    int h=getDlgParams().rect.height - 90;
    jButtonOK.setBounds(new Rectangle(w / 2 - 40,h - 50,60,60));
    jButtonOK.setToolTipText(""String_Node_Str"");
    jButtonOK.setObserver(new Command(){
      public void execute(){
        DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
      }
    }
);
  }
  return jButtonOK;
}",0.9957081545064378
160099,"/** 
 * This method initializes jButtonCancel
 * @return javax.swing.JButton
 */
private HoverButton getJButtonCancel(){
  if (jButtonCancel == null) {
    jButtonCancel=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgCancelButtonImage(),ImageManagerImpl.getInstance().getDlgActiveCancelButtonImage(),ImageManagerImpl.getInstance().getDlgCancelButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 75;
    int h=getDlgParams().rect.height - 90;
    jButtonCancel.setBounds(new Rectangle(w / 2 + 150,h - 50,60,60));
    jButtonCancel.setToolTipText(""String_Node_Str"");
    jButtonCancel.setVisible(isOptional);
    if (!isCancelStopsPlaying) {
      jButtonCancel.setToolTipText(""String_Node_Str"");
      jButtonCancel.setBounds(new Rectangle(w / 2 + 150,h - 50,60,60));
    }
    jButtonCancel.setObserver(new Command(){
      private static final long serialVersionUID=-567322540616089486L;
      public void execute(){
        DialogManager.getManager().fadeOut((DialogContainer)getParent());
      }
    }
);
  }
  return jButtonCancel;
}","/** 
 * This method initializes jButtonCancel
 * @return javax.swing.JButton
 */
private HoverButton getJButtonCancel(){
  if (jButtonCancel == null) {
    jButtonCancel=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgCancelButtonImage(),ImageManagerImpl.getInstance().getDlgActiveCancelButtonImage(),ImageManagerImpl.getInstance().getDlgCancelButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 75;
    int h=getDlgParams().rect.height - 90;
    jButtonCancel.setBounds(new Rectangle(w / 2 + 150,h - 50,60,60));
    jButtonCancel.setToolTipText(""String_Node_Str"");
    jButtonCancel.setVisible(isOptional);
    if (!isCancelStopsPlaying) {
      jButtonCancel.setToolTipText(""String_Node_Str"");
      jButtonCancel.setBounds(new Rectangle(w / 2 + 150,h - 50,60,60));
    }
    jButtonCancel.setObserver(new Command(){
      private static final long serialVersionUID=-567322540616089486L;
      public void execute(){
        DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
      }
    }
);
  }
  return jButtonCancel;
}",0.9972426470588236
160100,"public void execute(){
  DialogManager.getManager().fadeOut((DialogContainer)getParent());
}","public void execute(){
  DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
}",0.968421052631579
160101,"private HoverButton getJButtonAccept(){
  if (jButtonAccept == null) {
    jButtonAccept=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgActiveAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 90;
    int h=getDlgParams().rect.height - 90;
    jButtonAccept.setBounds(new Rectangle(w / 2 - 80,h - 50,60,60));
    jButtonAccept.setObserver(new Command(){
      @Override public void execute(){
        DialogManager.getManager().fadeOut((DialogContainer)getParent());
        StackDialog.this.feedbackPanel.doClick();
      }
      private static final long serialVersionUID=1L;
    }
);
  }
  return jButtonAccept;
}","private HoverButton getJButtonAccept(){
  if (jButtonAccept == null) {
    jButtonAccept=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgActiveAcceptButtonImage(),ImageManagerImpl.getInstance().getDlgAcceptButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 90;
    int h=getDlgParams().rect.height - 90;
    jButtonAccept.setBounds(new Rectangle(w / 2 - 80,h - 50,60,60));
    jButtonAccept.setObserver(new Command(){
      @Override public void execute(){
        DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
        StackDialog.this.feedbackPanel.doClick();
      }
      private static final long serialVersionUID=1L;
    }
);
  }
  return jButtonAccept;
}",0.9961880559085132
160102,"/** 
 * This is the default constructor
 */
public StackDialog(DlgParams params){
  super(params);
  this.feedbackPanel=params.feedbackPanel;
  initialize();
  displayStack(params.getCards(),params.gameId,params.bigCard);
}","/** 
 * This is the default constructor
 */
public StackDialog(DlgParams params){
  super(params);
  this.feedbackPanel=params.feedbackPanel;
  this.gameId=params.gameId;
  initialize();
  displayStack(params.getCards(),params.gameId,params.bigCard);
}",0.9389473684210526
160103,"private HoverButton getJButtonResponse(){
  if (jButtonResponse == null) {
    jButtonResponse=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgCancelButtonImage(),ImageManagerImpl.getInstance().getDlgActiveCancelButtonImage(),ImageManagerImpl.getInstance().getDlgCancelButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 90;
    int h=getDlgParams().rect.height - 90;
    jButtonResponse.setBounds(new Rectangle(w / 2 + 5,h - 48,60,60));
    jButtonResponse.setObserver(new Command(){
      @Override public void execute(){
        DialogManager.getManager().fadeOut((DialogContainer)getParent());
      }
      private static final long serialVersionUID=1L;
    }
);
  }
  return jButtonResponse;
}","private HoverButton getJButtonResponse(){
  if (jButtonResponse == null) {
    jButtonResponse=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getDlgCancelButtonImage(),ImageManagerImpl.getInstance().getDlgActiveCancelButtonImage(),ImageManagerImpl.getInstance().getDlgCancelButtonImage(),new Rectangle(60,60));
    int w=getDlgParams().rect.width - 90;
    int h=getDlgParams().rect.height - 90;
    jButtonResponse.setBounds(new Rectangle(w / 2 + 5,h - 48,60,60));
    jButtonResponse.setObserver(new Command(){
      @Override public void execute(){
        DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
      }
      private static final long serialVersionUID=1L;
    }
);
  }
  return jButtonResponse;
}",0.9959893048128342
160104,"@Override public void execute(){
  DialogManager.getManager().fadeOut((DialogContainer)getParent());
}","@Override public void execute(){
  DialogManager.getManager(gameId).fadeOut((DialogContainer)getParent());
}",0.9714285714285714
160105,"public void pickAbility(AbilityPickerView choices){
  DialogManager.getManager().fadeOut();
  this.abilityPicker.show(choices,MageFrame.getDesktop().getMousePosition());
}","public void pickAbility(AbilityPickerView choices){
  DialogManager.getManager(gameId).fadeOut();
  this.abilityPicker.show(choices,MageFrame.getDesktop().getMousePosition());
}",0.9827586206896552
160106,"public void playXMana(String message,GameView gameView){
  updateGame(gameView);
  DialogManager.getManager().fadeOut();
  this.feedbackPanel.getFeedback(FeedbackMode.CONFIRM,message,gameView.getSpecial(),null);
}","public void playXMana(String message,GameView gameView){
  updateGame(gameView);
  DialogManager.getManager(gameId).fadeOut();
  this.feedbackPanel.getFeedback(FeedbackMode.CONFIRM,message,gameView.getSpecial(),null);
}",0.9861111111111112
160107,"public void installComponents(){
  jLayeredPane.setOpaque(false);
  jLayeredPane.add(abilityPicker);
  jLayeredPane.add(DialogManager.getManager(),JLayeredPane.MODAL_LAYER,0);
  abilityPicker.setVisible(false);
}","public void installComponents(){
  jLayeredPane.setOpaque(false);
  jLayeredPane.add(abilityPicker);
  jLayeredPane.add(DialogManager.getManager(gameId),JLayeredPane.MODAL_LAYER,0);
  abilityPicker.setVisible(false);
}",0.986046511627907
160108,"public void playMana(String message,GameView gameView){
  updateGame(gameView);
  DialogManager.getManager().fadeOut();
  this.feedbackPanel.getFeedback(FeedbackMode.CANCEL,message,gameView.getSpecial(),null);
}","public void playMana(String message,GameView gameView){
  updateGame(gameView);
  DialogManager.getManager(gameId).fadeOut();
  this.feedbackPanel.getFeedback(FeedbackMode.CANCEL,message,gameView.getSpecial(),null);
}",0.985981308411215
160109,"private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 650) {
    if (smallMode == false) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode == true) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  int height=pnlBattlefield.getHeight();
  phasesContainer.setPreferredSize(new Dimension(X_PHASE_WIDTH,height));
  DialogManager.getManager().setScreenWidth(rect.width);
  DialogManager.getManager().setScreenHeight(rect.height);
  DialogManager.getManager().setBounds(0,0,rect.width,rect.height);
}","private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 650) {
    if (smallMode == false) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode == true) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  int height=pnlBattlefield.getHeight();
  phasesContainer.setPreferredSize(new Dimension(X_PHASE_WIDTH,height));
  DialogManager.getManager(gameId).setScreenWidth(rect.width);
  DialogManager.getManager(gameId).setScreenHeight(rect.height);
  DialogManager.getManager(gameId).setBounds(0,0,rect.width,rect.height);
}",0.9931245225362872
160110,"private void btnGraveActionPerformed(java.awt.event.ActionEvent evt){
  if (graveyard == null) {
    graveyard=new ShowCardsDialog();
  }
  DialogManager.getManager().showChoiceDialog(CardsViewUtil.convertSimple(player.getGraveyard()),bigCard,gameId);
}","private void btnGraveActionPerformed(java.awt.event.ActionEvent evt){
  DialogManager.getManager(gameId).showChoiceDialog(CardsViewUtil.convertSimple(player.getGraveyard()),bigCard,gameId);
}",0.8333333333333334
160111,"@Override public void selectAttackers(Game game,UUID attackingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombat filter=filterCreatureForCombat.copy();
  filter.add(new ControllerIdPredicate(attackingPlayerId));
  while (!abort) {
    if (passedAllTurns || passedTurn) {
      return;
    }
    game.fireSelectEvent(playerId,""String_Node_Str"");
    waitForResponse();
    if (response.getBoolean() != null) {
      return;
    }
 else     if (response.getInteger() != null) {
      if (response.getInteger() == -9999) {
        passedAllTurns=true;
      }
      passedTurn=true;
      return;
    }
 else     if (response.getUUID() != null) {
      Permanent attacker=game.getPermanent(response.getUUID());
      if (attacker != null) {
        if (filterCreatureForCombat.match(attacker,null,playerId,game)) {
          selectDefender(game.getCombat().getDefenders(),attacker.getId(),game);
        }
 else         if (filterAttack.match(attacker,null,playerId,game) && game.getStack().isEmpty()) {
          game.getCombat().removeAttacker(attacker.getId(),game);
        }
      }
    }
  }
}","@Override public void selectAttackers(Game game,UUID attackingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombat filter=filterCreatureForCombat.copy();
  filter.add(new ControllerIdPredicate(attackingPlayerId));
  while (!abort) {
    if (passedAllTurns || passedTurn) {
      return;
    }
    game.fireSelectEvent(playerId,""String_Node_Str"");
    waitForResponse();
    if (response.getBoolean() != null) {
      return;
    }
 else     if (response.getInteger() != null) {
      if (response.getInteger() == -9999) {
        passedAllTurns=true;
      }
      passedTurn=true;
      return;
    }
 else     if (response.getUUID() != null) {
      Permanent attacker=game.getPermanent(response.getUUID());
      if (attacker != null) {
        if (filterCreatureForCombat.match(attacker,null,playerId,game)) {
          selectDefender(game.getCombat().getDefenders(),attacker.getId(),game);
        }
 else         if (filterAttack.match(attacker,null,playerId,game) && game.getStack().isEmpty()) {
          removeAttackerIfPossible(game,attacker);
        }
      }
    }
  }
}",0.9666814749000444
160112,"public boolean asThough(UUID objectId,AsThoughEffectType type,Game game){
  for (  AsThoughEffect entry : asThoughEffects) {
    AsThoughEffect effect=entry;
    if (effect.getAsThoughEffectType() == type) {
      if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
        if (effect.applies(objectId,asThoughEffects.getAbility(entry.getId()),game)) {
          return true;
        }
      }
    }
  }
  return false;
}","public boolean asThough(UUID objectId,AsThoughEffectType type,Game game){
  List<AsThoughEffect> asThoughEffectsList=getApplicableAsThoughEffects(game);
  for (  AsThoughEffect effect : asThoughEffectsList) {
    if (effect.getAsThoughEffectType() == type) {
      if (effect.applies(objectId,asThoughEffects.getAbility(effect.getId()),game)) {
        return true;
      }
    }
  }
  return false;
}",0.6475507765830346
160113,"public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,object.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        StackAbility stackAbility=((StackAbility)object);
        stackAbility.newId();
        MageObject emblem=game.getEmblem(stackAbility.getSourceId());
        if (emblem != null) {
          Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
          if (sourceCard != null) {
            stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
            stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
          }
        }
        stack.put(stackObject.getId(),new CardView(stackAbility));
        checkPaid(stackObject.getId(),stackAbility);
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}","public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,object.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          MageObject emblem=game.getEmblem(stackAbility.getSourceId());
          if (emblem != null) {
            Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
            if (sourceCard != null) {
              stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
              stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
            }
          }
          stack.put(stackObject.getId(),new CardView(stackAbility));
          checkPaid(stackObject.getId(),stackAbility);
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}",0.9480682839173404
160114,"@Override public DynamicValue clone(){
  return new SourcePermanentPowerCount();
}","@Override public DynamicValue clone(){
  return new TargetPermanentPowerCount();
}",0.951219512195122
160115,"public FilterStackObject(final FilterStackObject filter){
  super(filter);
  this.extraPredicates=new ArrayList<ObjectPlayerPredicate<ObjectPlayer<Permanent>>>(extraPredicates);
}","public FilterStackObject(final FilterStackObject filter){
  super(filter);
  this.extraPredicates=new ArrayList<ObjectPlayerPredicate<ObjectPlayer<Permanent>>>(filter.extraPredicates);
}",0.9808219178082191
160116,"@Override public boolean apply(ObjectPlayer<Permanent> input,Game game){
  Permanent permanent=input.getObject();
  UUID playerId=input.getPlayerId();
switch (controller) {
case YOU:
    if (permanent.getControllerId().equals(playerId)) {
      return true;
    }
  break;
case OPPONENT:
if (game.getOpponents(playerId).contains(permanent.getControllerId())) {
  return true;
}
break;
case NOT_YOU:
if (!permanent.getControllerId().equals(playerId)) {
return true;
}
break;
}
return true;
}","@Override public boolean apply(ObjectPlayer<Permanent> input,Game game){
  Permanent permanent=input.getObject();
  UUID playerId=input.getPlayerId();
switch (controller) {
case YOU:
    if (permanent.getControllerId().equals(playerId)) {
      return true;
    }
  break;
case OPPONENT:
if (game.getOpponents(playerId).contains(permanent.getControllerId())) {
  return true;
}
break;
case NOT_YOU:
if (!permanent.getControllerId().equals(playerId)) {
return true;
}
break;
}
return false;
}",0.9928644240570846
160117,"@Override public String getText(Mode mode){
  if (text == null || text.length() == 0)   return ""String_Node_Str"" + baseEffects.getText(mode);
 else   return text;
}","@Override public String getText(Mode mode){
  return (text == null || text.isEmpty()) ? baseEffects.getText(mode) : text;
}",0.759581881533101
160118,"@Override public boolean activate(Game game,boolean noMana){
  UUID defenderId=game.getCombat().getDefendingPlayer(sourceId);
  if (defenderId != null) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(new ControllerIdPredicate(defenderId));
    this.getTargets().clear();
    TargetCreaturePermanent target=new TargetCreaturePermanent(filter);
    target.setRequired(true);
    this.addTarget(target);
    return super.activate(game,noMana);
  }
  return false;
}","@Override public boolean activate(Game game,boolean noMana){
  UUID defenderId=game.getCombat().getDefendingPlayer(sourceId);
  if (defenderId != null) {
    FilterCreaturePermanent filter=filterTemplate.copy();
    filter.add(new ControllerIdPredicate(defenderId));
    this.getTargets().clear();
    TargetCreaturePermanent target=new TargetCreaturePermanent(filter);
    target.setRequired(true);
    this.addTarget(target);
    return super.activate(game,noMana);
  }
  return false;
}",0.5782652043868395
160119,"@Override public boolean canActivate(UUID playerId,Game game){
  MageObject object=game.getObject(sourceId);
  if ((object.getCardType().contains(CardType.INSTANT) || object.getAbilities().containsKey(FlashAbility.getInstance().getId()) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,game)|| game.canPlaySorcery(playerId))) {
    if (costs.canPay(sourceId,controllerId,game) && canChooseTarget(game)) {
      return true;
    }
  }
  return false;
}","@Override public boolean canActivate(UUID playerId,Game game){
  MageObject object=game.getObject(sourceId);
  if ((object.getCardType().contains(CardType.INSTANT) || object.getAbilities().containsKey(FlashAbility.getInstance().getId()) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,game)|| game.canPlaySorcery(playerId))) {
    if (!controllerId.equals(playerId)) {
      return false;
    }
    if (costs.canPay(sourceId,controllerId,game) && canChooseTarget(game)) {
      return true;
    }
  }
  return false;
}",0.9332023575638508
160120,"public FilterObject(FilterObject filter){
  super(filter);
  this.abilities=filter.abilities.copy();
  this.notAbilities=filter.notAbilities;
  this.cardType.addAll(filter.cardType);
  this.notCardTypeList.addAll(filter.notCardTypeList);
  this.scopeCardType=filter.scopeCardType;
  this.notCardType=filter.notCardType;
  this.notScopeCardType=filter.notScopeCardType;
  this.colorless=filter.colorless;
  this.useColorless=filter.useColorless;
  this.useColor=filter.useColor;
  this.color=filter.color.copy();
  this.scopeColor=filter.scopeColor;
  this.notColor=filter.notColor;
  this.name.addAll(filter.name);
  this.notName=filter.notName;
  this.subtype.addAll(filter.subtype);
  this.scopeSubtype=filter.scopeSubtype;
  this.notSubtype=filter.notSubtype;
  this.supertype.addAll(filter.supertype);
  this.scopeSupertype=filter.scopeSupertype;
  this.notSupertype=filter.notSupertype;
  this.convertedManaCost=filter.convertedManaCost;
  this.convertedManaCostComparison=filter.convertedManaCostComparison;
  this.power=filter.power;
  this.powerComparison=filter.powerComparison;
  this.toughness=filter.toughness;
  this.toughnessComparison=filter.toughnessComparison;
  this.another=filter.another;
}","public FilterObject(FilterObject filter){
  super(filter);
  this.abilities=filter.abilities.copy();
  this.notAbilities=filter.notAbilities;
  this.cardType.addAll(filter.cardType);
  this.notCardType.addAll(filter.notCardType);
  this.scopeCardType=filter.scopeCardType;
  this.scopeNotCardType=filter.scopeNotCardType;
  this.colorless=filter.colorless;
  this.useColorless=filter.useColorless;
  this.useColor=filter.useColor;
  this.color=filter.color.copy();
  this.scopeColor=filter.scopeColor;
  this.notColor=filter.notColor;
  this.name.addAll(filter.name);
  this.notName=filter.notName;
  this.subtype.addAll(filter.subtype);
  this.scopeSubtype=filter.scopeSubtype;
  this.notSubtype=filter.notSubtype;
  this.supertype.addAll(filter.supertype);
  this.scopeSupertype=filter.scopeSupertype;
  this.notSupertype=filter.notSupertype;
  this.convertedManaCost=filter.convertedManaCost;
  this.convertedManaCostComparison=filter.convertedManaCostComparison;
  this.power=filter.power;
  this.powerComparison=filter.powerComparison;
  this.toughness=filter.toughness;
  this.toughnessComparison=filter.toughnessComparison;
  this.another=filter.another;
}",0.968394437420986
160121,"@Override public boolean match(E object,Game game){
  if (name.size() > 0) {
    if (name.contains(object.getName()) == notName)     return notFilter;
  }
  if (useColor) {
    if (scopeColor == ComparisonScope.All) {
      if (object.getColor().equals(color) == notColor) {
        return notFilter;
      }
    }
 else     if (object.getColor().contains(color) == notColor) {
      if (useColorless && colorless) {
        if (object.getColor().isColorless() != colorless) {
          return notFilter;
        }
      }
 else {
        return notFilter;
      }
    }
  }
 else   if (useColorless && object.getColor().isColorless() != colorless) {
    return notFilter;
  }
  if (cardType.size() > 0) {
    if (!compCardType.compare(cardType,object.getCardType(),scopeCardType,notCardType))     return notFilter;
  }
  if (notCardTypeList.size() > 0) {
    if (compCardType.compare(notCardTypeList,object.getCardType(),notScopeCardType,false))     return notFilter;
  }
  if (subtype.size() > 0) {
    if (!object.getAbilities().contains(ChangelingAbility.getInstance())) {
      if (!compString.compare(subtype,object.getSubtype(),scopeSubtype,notSubtype))       return notFilter;
    }
  }
  if (supertype.size() > 0) {
    if (!compString.compare(supertype,object.getSupertype(),scopeSupertype,notSupertype))     return notFilter;
  }
  if (abilities.size() > 0) {
    List<Ability> test=new ArrayList<Ability>(abilities);
    for (    Ability ability : object.getAbilities()) {
      for (      Ability abilityTest : test) {
        if (ability == abilityTest || ability.getClass().equals(abilityTest.getClass())) {
          test.remove(abilityTest);
          break;
        }
      }
    }
    if (test.isEmpty() == notAbilities)     return notFilter;
  }
  if (convertedManaCostComparison != null) {
    if (!compareInts(object.getManaCost().convertedManaCost(),convertedManaCost,convertedManaCostComparison))     return notFilter;
  }
  if (powerComparison != null) {
    if (!compareInts(object.getPower().getValue(),power,powerComparison))     return notFilter;
  }
  if (toughnessComparison != null) {
    if (!compareInts(object.getToughness().getValue(),toughness,toughnessComparison))     return notFilter;
  }
  return !notFilter;
}","@Override public boolean match(E object,Game game){
  if (name.size() > 0) {
    if (name.contains(object.getName()) == notName)     return notFilter;
  }
  if (useColor) {
    if (scopeColor == ComparisonScope.All) {
      if (object.getColor().equals(color) == notColor) {
        return notFilter;
      }
    }
 else     if (object.getColor().contains(color) == notColor) {
      if (useColorless && colorless) {
        if (object.getColor().isColorless() != colorless) {
          return notFilter;
        }
      }
 else {
        return notFilter;
      }
    }
  }
 else   if (useColorless && object.getColor().isColorless() != colorless) {
    return notFilter;
  }
  if (cardType.size() > 0) {
    if (!compCardType.compare(cardType,object.getCardType(),scopeCardType,false))     return notFilter;
  }
  if (notCardType.size() > 0) {
    if (compCardType.compare(notCardType,object.getCardType(),scopeNotCardType,false))     return notFilter;
  }
  if (subtype.size() > 0) {
    if (!object.getAbilities().contains(ChangelingAbility.getInstance())) {
      if (!compString.compare(subtype,object.getSubtype(),scopeSubtype,notSubtype))       return notFilter;
    }
  }
  if (supertype.size() > 0) {
    if (!compString.compare(supertype,object.getSupertype(),scopeSupertype,notSupertype))     return notFilter;
  }
  if (abilities.size() > 0) {
    List<Ability> test=new ArrayList<Ability>(abilities);
    for (    Ability ability : object.getAbilities()) {
      for (      Ability abilityTest : test) {
        if (ability == abilityTest || ability.getClass().equals(abilityTest.getClass())) {
          test.remove(abilityTest);
          break;
        }
      }
    }
    if (test.isEmpty() == notAbilities)     return notFilter;
  }
  if (convertedManaCostComparison != null) {
    if (!compareInts(object.getManaCost().convertedManaCost(),convertedManaCost,convertedManaCostComparison))     return notFilter;
  }
  if (powerComparison != null) {
    if (!compareInts(object.getPower().getValue(),power,powerComparison))     return notFilter;
  }
  if (toughnessComparison != null) {
    if (!compareInts(object.getToughness().getValue(),toughness,toughnessComparison))     return notFilter;
  }
  return !notFilter;
}",0.9532085561497328
160122,"public List<CardType> getNotCardType(){
  return this.notCardTypeList;
}","public List<CardType> getNotCardType(){
  return this.notCardType;
}",0.9714285714285714
160123,"public void addAbility(Ability ability){
  if (ability instanceof StaticAbility) {
    for (    Mode mode : ability.getModes().values()) {
      for (      Effect effect : mode.getEffects()) {
        if (effect instanceof ContinuousEffect) {
          addEffect((ContinuousEffect)effect,ability);
        }
      }
    }
  }
 else   if (ability instanceof TriggeredAbility) {
    this.triggers.add((TriggeredAbility)ability);
  }
}","public void addAbility(Ability ability){
  if (ability instanceof StaticAbility) {
    if (ability instanceof KickerAbility) {
      return;
    }
    for (    Mode mode : ability.getModes().values()) {
      for (      Effect effect : mode.getEffects()) {
        if (effect instanceof ContinuousEffect) {
          addEffect((ContinuousEffect)effect,ability);
        }
      }
    }
  }
 else   if (ability instanceof TriggeredAbility) {
    this.triggers.add((TriggeredAbility)ability);
  }
}",0.9310344827586208
160124,"@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,Zone.EXILED);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
switch (fromZone) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (exileId == null) {
game.getExile().getPermanentExile().add(this);
}
 else {
game.getExile().createZone(exileId,name).add(this);
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return true;
}
return false;
}","@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,Zone.EXILED);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
switch (fromZone) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (exileId == null) {
game.getExile().getPermanentExile().add(this);
}
 else {
game.getExile().createZone(exileId,name).add(this);
}
updateZoneChangeCounter();
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return true;
}
return false;
}",0.9845272206303723
160125,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case OUTSIDE:
case PICK:
break;
default :
logger.fatal(""String_Node_Str"" + fromZone);
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case LIBRARY:
if (flag) game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
 else game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.getBattlefield().addPermanent(permanent);
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
if (flag) permanent.setTapped(true);
event.setTarget(permanent);
break;
default :
logger.fatal(""String_Node_Str"" + toZone);
return false;
}
setControllerId(ownerId);
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case OUTSIDE:
case PICK:
break;
default :
logger.fatal(""String_Node_Str"" + fromZone);
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case LIBRARY:
if (flag) game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
 else game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.getBattlefield().addPermanent(permanent);
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
if (flag) permanent.setTapped(true);
event.setTarget(permanent);
break;
default :
logger.fatal(""String_Node_Str"" + toZone);
return false;
}
setControllerId(ownerId);
updateZoneChangeCounter();
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}",0.9925476124758488
160126,"public boolean isFlipCard(){
  return flipCard;
}","@Override public boolean isFlipCard(){
  return flipCard;
}",0.9074074074074074
160127,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
PermanentCard permanent=new PermanentCard(this,controllerId);
game.getBattlefield().addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.getBattlefield().addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.9878869448183042
160128,"@Override public void remove(UUID id){
  if (targets.containsKey(id))   targets.remove(id);
}","@Override public void remove(UUID id){
  if (targets.containsKey(id)) {
    targets.remove(id);
    zoneChangeCounters.remove(id);
  }
}",0.8122270742358079
160129,"@Override public void clearChosen(){
  targets.clear();
  chosen=false;
}","@Override public void clearChosen(){
  targets.clear();
  zoneChangeCounters.clear();
  chosen=false;
}",0.8295454545454546
160130,"@Override public void add(UUID id,Game game){
  if (maxNumberOfTargets == 0 || targets.size() < maxNumberOfTargets) {
    if (!targets.containsKey(id)) {
      targets.put(id,0);
    }
  }
}","@Override public void add(UUID id,Game game){
  if (maxNumberOfTargets == 0 || targets.size() < maxNumberOfTargets) {
    if (!targets.containsKey(id)) {
      targets.put(id,0);
      rememberZoneChangeCounter(id,game);
    }
  }
}",0.9004739336492891
160131,"@Override public void addTarget(UUID id,int amount,Ability source,Game game,boolean skipEvent){
  if (targets.containsKey(id)) {
    amount+=targets.get(id);
  }
  if (source != null) {
    if (!game.replaceEvent(GameEvent.getEvent(EventType.TARGET,id,source.getId(),source.getControllerId()))) {
      targets.put(id,amount);
      chosen=targets.size() >= minNumberOfTargets;
      if (!skipEvent)       game.fireEvent(GameEvent.getEvent(EventType.TARGETED,id,source.getId(),source.getControllerId()));
    }
  }
 else {
    targets.put(id,amount);
  }
}","@Override public void addTarget(UUID id,int amount,Ability source,Game game,boolean skipEvent){
  if (targets.containsKey(id)) {
    amount+=targets.get(id);
  }
  if (source != null) {
    if (!game.replaceEvent(GameEvent.getEvent(EventType.TARGET,id,source.getId(),source.getControllerId()))) {
      targets.put(id,amount);
      rememberZoneChangeCounter(id,game);
      chosen=targets.size() >= minNumberOfTargets;
      if (!skipEvent)       game.fireEvent(GameEvent.getEvent(EventType.TARGETED,id,source.getId(),source.getControllerId()));
    }
  }
 else {
    targets.put(id,amount);
    rememberZoneChangeCounter(id,game);
  }
}",0.931323283082077
160132,"@Override public boolean isLegal(Ability source,Game game){
  for (  UUID targetId : targets.keySet()) {
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId())))     continue;
    if (canTarget(targetId,source,game))     return true;
  }
  return false;
}","@Override public boolean isLegal(Ability source,Game game){
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        continue;
      }
    }
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId())))     continue;
    if (canTarget(targetId,source,game))     return true;
  }
  return false;
}",0.7437425506555423
160133,"public TargetImpl(final TargetImpl<T> target){
  this.targetName=target.targetName;
  this.zone=target.zone;
  this.maxNumberOfTargets=target.maxNumberOfTargets;
  this.minNumberOfTargets=target.minNumberOfTargets;
  this.required=target.required;
  this.chosen=target.chosen;
  this.targets.putAll(target.targets);
}","public TargetImpl(final TargetImpl<T> target){
  this.targetName=target.targetName;
  this.zone=target.zone;
  this.maxNumberOfTargets=target.maxNumberOfTargets;
  this.minNumberOfTargets=target.minNumberOfTargets;
  this.required=target.required;
  this.chosen=target.chosen;
  this.targets.putAll(target.targets);
  this.zoneChangeCounters.putAll(target.zoneChangeCounters);
}",0.912230215827338
160134,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    if (player.getLibrary().size() > 0) {
      Card card=player.getLibrary().getFromTop(game);
      player.revealCards(""String_Node_Str"",new CardsImpl(card),game);
      if (card.getCardType().contains(CardType.CREATURE)) {
        FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
        filter.getSubtype().addAll(card.getSubtype());
        filter.setScopeSubtype(Filter.ComparisonScope.Any);
        int count=game.getBattlefield().getAllActivePermanents(filter,player.getId(),game).size();
        if (count > 0) {
          game.informPlayers(""String_Node_Str"");
          if (player.chooseUse(Constants.Outcome.Benefit,""String_Node_Str"",game)) {
            player.cast(card.getSpellAbility(),game,true);
          }
 else {
            game.informPlayers(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
            player.getLibrary().putOnBottom(card,game);
          }
        }
 else {
          game.informPlayers(""String_Node_Str"");
          player.getLibrary().putOnBottom(card,game);
        }
      }
 else {
        player.getLibrary().putOnBottom(card,game);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    if (player.getLibrary().size() > 0) {
      Card card=player.getLibrary().getFromTop(game);
      player.revealCards(""String_Node_Str"",new CardsImpl(card),game);
      if (card.getCardType().contains(CardType.CREATURE)) {
        FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
        filter.getSubtype().addAll(card.getSubtype());
        filter.setScopeSubtype(Filter.ComparisonScope.Any);
        int count=game.getBattlefield().getAllActivePermanents(filter,player.getId(),game).size();
        if (count > 0) {
          game.informPlayers(""String_Node_Str"");
          if (player.chooseUse(Constants.Outcome.Benefit,""String_Node_Str"",game)) {
            player.cast(card.getSpellAbility(),game,true);
          }
 else {
            game.informPlayers(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
            player.getLibrary().putOnBottom(card,game);
          }
        }
 else {
          game.informPlayers(""String_Node_Str"");
          player.getLibrary().putOnBottom(card,game);
        }
      }
 else {
        game.informPlayers(""String_Node_Str"" + card.getName() + ""String_Node_Str"");
        player.getLibrary().putOnBottom(card,game);
      }
      return true;
    }
  }
  return false;
}",0.9691176470588236
160135,"public void putOnBottom(Card card,Game game){
  if (card.getOwnerId().equals(playerId)) {
    game.setZone(card.getId(),Zone.LIBRARY);
    library.add(card.getId());
  }
 else {
    game.getPlayer(card.getOwnerId()).getLibrary().putOnBottom(card,game);
  }
}","public void putOnBottom(Card card,Game game){
  if (card.getOwnerId().equals(playerId)) {
    game.setZone(card.getId(),Zone.LIBRARY);
    if (library.contains(card.getId())) {
      library.remove(card.getId());
    }
    library.add(card.getId());
  }
 else {
    game.getPlayer(card.getOwnerId()).getLibrary().putOnBottom(card,game);
  }
}",0.86
160136,"/** 
 * Tests copied card should NOT be possible to transform
 */
@Test public void testCopyCantTransform(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Constants.Zone.HAND,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  addCard(Constants.Zone.HAND,playerB,""String_Node_Str"");
  castSpell(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(2,Constants.PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(5,Constants.PhaseStep.BEGIN_COMBAT);
  execute();
  assertHandCount(playerA,2);
  assertHandCount(playerB,1);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
}","/** 
 * Tests copied card should NOT be possible to transform
 */
@Test public void testCopyCantTransform(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Constants.Zone.HAND,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  addCard(Constants.Zone.HAND,playerB,""String_Node_Str"");
  castSpell(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(2,Constants.PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(5,Constants.PhaseStep.BEGIN_COMBAT);
  execute();
  assertHandCount(playerA,2);
  assertHandCount(playerB,2);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
}",0.9272237196765498
160137,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (permanent == null) {
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.getAbilities().clear();
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,game);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (permanent == null) {
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.getAbilities().clear();
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,game);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  if (target instanceof Permanent) {
    permanent.setTransformed(((Permanent)target).isTransformed());
    permanent.setSecondCardFace(((Permanent)target).getSecondCardFace());
  }
  return true;
}",0.9047619047619048
160138,"public ManaPoolView(ManaPool pool){
  this.red=pool.getRed();
  this.green=pool.getGreen();
  this.blue=pool.getBlue();
  this.white=pool.getWhite();
  this.black=pool.getBlack();
  this.colorless=pool.getColorless();
  for (  ConditionalMana mana : pool.getConditionalMana()) {
    this.red=mana.getRed();
    this.green=mana.getGreen();
    this.blue=mana.getBlue();
    this.white=mana.getWhite();
    this.black=mana.getBlack();
    this.colorless=mana.getColorless();
  }
}","public ManaPoolView(ManaPool pool){
  this.red=pool.getRed();
  this.green=pool.getGreen();
  this.blue=pool.getBlue();
  this.white=pool.getWhite();
  this.black=pool.getBlack();
  this.colorless=pool.getColorless();
  for (  ConditionalMana mana : pool.getConditionalMana()) {
    this.red+=mana.getRed();
    this.green+=mana.getGreen();
    this.blue+=mana.getBlue();
    this.white+=mana.getWhite();
    this.black+=mana.getBlack();
    this.colorless+=mana.getColorless();
  }
}",0.9937629937629938
160139,"@Override public boolean checkStateAndTriggered(){
  boolean somethingHappened=false;
  while (!isPaused() && !this.isGameOver()) {
    if (!checkStateBasedActions()) {
      if (isPaused() || this.isGameOver() || !checkTriggered()) {
        break;
      }
    }
    somethingHappened=true;
  }
  return somethingHappened;
}","@Override public boolean checkStateAndTriggered(){
  boolean somethingHappened=false;
  while (!isPaused() && !this.isGameOver()) {
    if (!checkStateBasedActions()) {
      if (isPaused() || this.isGameOver() || !checkTriggered()) {
        break;
      }
    }
    somethingHappened=true;
  }
  resetLKI();
  return somethingHappened;
}",0.9789156626506024
160140,"public void sortLayout(){
  Plugins.getInstance().sortPermanents(ui,permanents.values());
  if (battlefield == null) {
    return;
  }
  for (  PermanentView permanent : battlefield.values()) {
    if (permanent.getAttachments() != null) {
      groupAttachments(permanent);
    }
  }
  invalidate();
  repaint();
}","public void sortLayout(){
  int height=Plugins.getInstance().sortPermanents(ui,permanents.values());
  BattlefieldPanel.this.jPanel.setPreferredSize(new Dimension(width - 30,height));
  this.jScrollPane.repaint();
  this.jScrollPane.revalidate();
  if (battlefield == null) {
    return;
  }
  for (  PermanentView permanent : battlefield.values()) {
    if (permanent.getAttachments() != null) {
      groupAttachments(permanent);
    }
  }
  invalidate();
  repaint();
}",0.8005082592121983
160141,"@Override public void run(){
  Plugins.getInstance().onRemoveCard((MagePermanent)comp,count);
  comp.setVisible(false);
  BattlefieldPanel.this.remove(comp);
}","@Override public void run(){
  Plugins.getInstance().onRemoveCard((MagePermanent)comp,count);
  comp.setVisible(false);
  BattlefieldPanel.this.jPanel.remove(comp);
}",0.9784615384615384
160142,"/** 
 * Creates new form BattlefieldPanel 
 */
public BattlefieldPanel(JScrollPane jScrollPane){
  ui.put(""String_Node_Str"",jScrollPane);
  ui.put(""String_Node_Str"",this);
  initComponents();
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      sortLayout();
    }
  }
);
}","/** 
 * Creates new form BattlefieldPanel 
 */
public BattlefieldPanel(){
  ui.put(""String_Node_Str"",this);
  initComponents();
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=e.getComponent().getWidth();
      int height=e.getComponent().getHeight();
      BattlefieldPanel.this.jScrollPane.setSize(width,height);
      BattlefieldPanel.this.width=width;
      sortLayout();
    }
  }
);
}",0.2666666666666666
160143,"private void addPermanent(PermanentView permanent,final int count){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  final MagePermanent perm=Plugins.getInstance().getMagePermanent(permanent,bigCard,cardDimension,gameId,true);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    perm.setBounds(findEmptySpace(new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight)));
  }
 else {
  }
  permanents.put(permanent.getId(),perm);
  BattlefieldPanel.this.add(perm,10);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    moveToFront(perm);
    perm.update(permanent);
  }
 else {
    Plugins.getInstance().onAddCard(perm,1);
  }
}","private void addPermanent(PermanentView permanent,final int count){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  final MagePermanent perm=Plugins.getInstance().getMagePermanent(permanent,bigCard,cardDimension,gameId,true);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    perm.setBounds(findEmptySpace(new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight)));
  }
 else {
  }
  permanents.put(permanent.getId(),perm);
  this.jPanel.add(perm);
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    moveToFront(perm);
    perm.update(permanent);
  }
 else {
    Plugins.getInstance().onAddCard(perm,1);
  }
}",0.7601374570446735
160144,"private void initComponents(){
  setOpaque(true);
}","private void initComponents(){
  setOpaque(true);
  jPanel=new JPanel();
  jPanel.setLayout(null);
  jScrollPane=new JScrollPane(jPanel);
  Border empty=new EmptyBorder(0,0,0,0);
  jScrollPane.setBorder(empty);
  jScrollPane.setViewportBorder(empty);
  this.add(jScrollPane);
}",0.3109756097560975
160145,"@Override public void componentResized(ComponentEvent e){
  sortLayout();
}","@Override public void componentResized(ComponentEvent e){
  int width=e.getComponent().getWidth();
  int height=e.getComponent().getHeight();
  BattlefieldPanel.this.jScrollPane.setSize(width,height);
  BattlefieldPanel.this.width=width;
  sortLayout();
}",0.4545454545454545
160146,"private void removePermanent(UUID permanentId,final int count){
  for (  Component c : this.getComponents()) {
    final Component comp=c;
    if (comp instanceof Permanent) {
      if (((Permanent)comp).getPermanentId().equals(permanentId)) {
        comp.setVisible(false);
        this.remove(comp);
      }
    }
 else     if (comp instanceof MagePermanent) {
      if (((MagePermanent)comp).getOriginal().getId().equals(permanentId)) {
        Thread t=new Thread(new Runnable(){
          @Override public void run(){
            Plugins.getInstance().onRemoveCard((MagePermanent)comp,count);
            comp.setVisible(false);
            BattlefieldPanel.this.remove(comp);
          }
        }
);
        t.start();
      }
    }
  }
}","private void removePermanent(UUID permanentId,final int count){
  for (  Component c : this.jPanel.getComponents()) {
    final Component comp=c;
    if (comp instanceof Permanent) {
      if (((Permanent)comp).getPermanentId().equals(permanentId)) {
        comp.setVisible(false);
        this.jPanel.remove(comp);
      }
    }
 else     if (comp instanceof MagePermanent) {
      if (((MagePermanent)comp).getOriginal().getId().equals(permanentId)) {
        Thread t=new Thread(new Runnable(){
          @Override public void run(){
            Plugins.getInstance().onRemoveCard((MagePermanent)comp,count);
            comp.setVisible(false);
            BattlefieldPanel.this.jPanel.remove(comp);
          }
        }
);
        t.start();
      }
    }
  }
}",0.9861202908129544
160147,"@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jPanel3=new javax.swing.JPanel();
  pnlGameInfo=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  btnConcede=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<String,SimpleCardsView>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  pnlGameInfo.setOpaque(false);
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText(""String_Node_Str"");
  txtPhase.setText(""String_Node_Str"");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText(""String_Node_Str"");
  txtStep.setText(""String_Node_Str"");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText(""String_Node_Str"");
  txtTurn.setText(""String_Node_Str"");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText(""String_Node_Str"");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText(""String_Node_Str"");
  txtPriority.setText(""String_Node_Str"");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText(""String_Node_Str"");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  btnConcede.setText(""String_Node_Str"");
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnConcedeActionPerformed(null);
    }
  }
);
  btnSwitchHands.setText(""String_Node_Str"");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnSwitchHandActionPerformed(null);
    }
  }
);
  btnStopWatching.setText(""String_Node_Str"");
  btnStopWatching.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopWatchingActionPerformed(evt);
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlGameInfo=new javax.swing.GroupLayout(pnlGameInfo);
  pnlGameInfo.setLayout(gl_pnlGameInfo);
  gl_pnlGameInfo.setHorizontalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addGap(10,10,10).addComponent(btnConcede).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSwitchHands).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnStopWatching).addContainerGap(62,Short.MAX_VALUE)).addComponent(bigCard,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addComponent(feedbackPanel,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addComponent(stack,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addGroup(gl_pnlGameInfo.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlGameInfo.setVerticalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addComponent(bigCard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(1,1,1).addComponent(feedbackPanel,javax.swing.GroupLayout.PREFERRED_SIZE,109,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(stack,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnConcede).addComponent(btnSwitchHands).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,100));
  jPhases.setLayout(new GridBagLayout());
  untap=new JButton(""String_Node_Str"");
  untap.setToolTipText(""String_Node_Str"");
  upkeep=new JButton(""String_Node_Str"");
  upkeep.setToolTipText(""String_Node_Str"");
  draw=new JButton(""String_Node_Str"");
  draw.setToolTipText(""String_Node_Str"");
  main1=new JButton(""String_Node_Str"");
  main1.setToolTipText(""String_Node_Str"");
  attack=new JButton(""String_Node_Str"");
  attack.setToolTipText(""String_Node_Str"");
  block=new JButton(""String_Node_Str"");
  block.setToolTipText(""String_Node_Str"");
  combatButton=new JButton(""String_Node_Str"");
  combatButton.setToolTipText(""String_Node_Str"");
  main2=new JButton(""String_Node_Str"");
  main2.setToolTipText(""String_Node_Str"");
  endOfTurn=new JButton(""String_Node_Str"");
  endOfTurn.setToolTipText(""String_Node_Str"");
  endOfTurn.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (feedbackPanel != null && FeedbackMode.SELECT.equals(feedbackPanel.getMode())) {
        logger.info(""String_Node_Str"");
        endButtonTip.setVisible(false);
        session.sendPlayerInteger(gameId,0);
      }
    }
  }
);
  endButtonTip=new JLabel(""String_Node_Str"");
  endButtonTip.setForeground(Color.white);
  jPhases.add(untap);
  jPhases.add(upkeep);
  jPhases.add(draw);
  jPhases.add(main1);
  jPhases.add(attack);
  jPhases.add(block);
  jPhases.add(combatButton);
  jPhases.add(main2);
  jPhases.add(endOfTurn);
  jPhases.add(endButtonTip);
  pnlReplay.setOpaque(false);
  HelperPanel helper=new HelperPanel();
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlGameInfo,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addGap(0).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jPhases,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addGap(49)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addPreferredGap(ComponentPlacement.RELATED).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(jPhases,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(pnlGameInfo,GroupLayout.DEFAULT_SIZE,400,Short.MAX_VALUE));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane1.setRightComponent(jSplitPane2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}","@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jPanel3=new javax.swing.JPanel();
  pnlGameInfo=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  btnConcede=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<String,SimpleCardsView>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  pnlGameInfo.setOpaque(false);
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText(""String_Node_Str"");
  txtPhase.setText(""String_Node_Str"");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText(""String_Node_Str"");
  txtStep.setText(""String_Node_Str"");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText(""String_Node_Str"");
  txtTurn.setText(""String_Node_Str"");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText(""String_Node_Str"");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText(""String_Node_Str"");
  txtPriority.setText(""String_Node_Str"");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText(""String_Node_Str"");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  btnConcede.setText(""String_Node_Str"");
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnConcedeActionPerformed(null);
    }
  }
);
  btnSwitchHands.setText(""String_Node_Str"");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnSwitchHandActionPerformed(null);
    }
  }
);
  btnStopWatching.setText(""String_Node_Str"");
  btnStopWatching.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopWatchingActionPerformed(evt);
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlGameInfo=new javax.swing.GroupLayout(pnlGameInfo);
  pnlGameInfo.setLayout(gl_pnlGameInfo);
  gl_pnlGameInfo.setHorizontalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addGap(10,10,10).addComponent(btnConcede).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSwitchHands).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnStopWatching).addContainerGap(62,Short.MAX_VALUE)).addComponent(bigCard,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addComponent(feedbackPanel,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addComponent(stack,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addGroup(gl_pnlGameInfo.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlGameInfo.setVerticalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addComponent(bigCard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(1,1,1).addComponent(feedbackPanel,javax.swing.GroupLayout.PREFERRED_SIZE,109,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(stack,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnConcede).addComponent(btnSwitchHands).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,100));
  jPhases.setLayout(new GridBagLayout());
  untap=new JButton(""String_Node_Str"");
  untap.setToolTipText(""String_Node_Str"");
  upkeep=new JButton(""String_Node_Str"");
  upkeep.setToolTipText(""String_Node_Str"");
  draw=new JButton(""String_Node_Str"");
  draw.setToolTipText(""String_Node_Str"");
  main1=new JButton(""String_Node_Str"");
  main1.setToolTipText(""String_Node_Str"");
  attack=new JButton(""String_Node_Str"");
  attack.setToolTipText(""String_Node_Str"");
  block=new JButton(""String_Node_Str"");
  block.setToolTipText(""String_Node_Str"");
  combatButton=new JButton(""String_Node_Str"");
  combatButton.setToolTipText(""String_Node_Str"");
  main2=new JButton(""String_Node_Str"");
  main2.setToolTipText(""String_Node_Str"");
  endOfTurn=new JButton(""String_Node_Str"");
  endOfTurn.setToolTipText(""String_Node_Str"");
  endOfTurn.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (feedbackPanel != null && FeedbackMode.SELECT.equals(feedbackPanel.getMode())) {
        logger.info(""String_Node_Str"");
        endButtonTip.setVisible(false);
        session.sendPlayerInteger(gameId,0);
      }
    }
  }
);
  endButtonTip=new JLabel(""String_Node_Str"");
  endButtonTip.setForeground(Color.white);
  jPhases.add(untap);
  jPhases.add(upkeep);
  jPhases.add(draw);
  jPhases.add(main1);
  jPhases.add(attack);
  jPhases.add(block);
  jPhases.add(combatButton);
  jPhases.add(main2);
  jPhases.add(endOfTurn);
  jPhases.add(endButtonTip);
  pnlReplay.setOpaque(false);
  HelperPanel helper=new HelperPanel();
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlGameInfo,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addGap(0).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jPhases,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addPreferredGap(ComponentPlacement.RELATED).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(jPhases,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(pnlGameInfo,GroupLayout.DEFAULT_SIZE,400,Short.MAX_VALUE));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane1.setRightComponent(jSplitPane2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}",0.9995817331457468
160148,"public void sizePlayer(boolean smallMode){
  this.playerPanel.sizePlayerPanel(smallMode);
  if (smallMode) {
    this.playerPanel.setPreferredSize(new Dimension(92,160));
    this.jScrollPane1.setPreferredSize(new Dimension(160,160));
  }
 else {
    this.playerPanel.setPreferredSize(new Dimension(92,212));
    this.jScrollPane1.setPreferredSize(new Dimension(160,212));
  }
}","public void sizePlayer(boolean smallMode){
  this.playerPanel.sizePlayerPanel(smallMode);
  if (smallMode) {
    this.playerPanel.setPreferredSize(new Dimension(92,160));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,160));
  }
 else {
    this.playerPanel.setPreferredSize(new Dimension(92,212));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,212));
  }
}",0.9267015706806284
160149,"private void initComponents(){
  setBorder(BorderFactory.createLineBorder(new Color(0,0,0,0)));
  playerPanel=new PlayerPanelExt();
  btnCheat=new javax.swing.JButton();
  jScrollPane1=new javax.swing.JScrollPane();
  battlefieldPanel=new mage.client.game.BattlefieldPanel(jScrollPane1);
  btnCheat.setText(""String_Node_Str"");
  btnCheat.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnCheatActionPerformed(evt);
    }
  }
);
  jScrollPane1.setViewportView(battlefieldPanel);
  Border empty=new EmptyBorder(0,0,0,0);
  jScrollPane1.setBorder(empty);
  jScrollPane1.setViewportBorder(empty);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  layout.setHorizontalGroup(layout.createSequentialGroup().addComponent(playerPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(jScrollPane1,0,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(playerPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(jScrollPane1,GroupLayout.DEFAULT_SIZE,160,Short.MAX_VALUE));
  this.setLayout(layout);
}","private void initComponents(){
  setBorder(BorderFactory.createLineBorder(new Color(0,0,0,0)));
  playerPanel=new PlayerPanelExt();
  btnCheat=new javax.swing.JButton();
  battlefieldPanel=new mage.client.game.BattlefieldPanel();
  btnCheat.setText(""String_Node_Str"");
  btnCheat.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnCheatActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  layout.setHorizontalGroup(layout.createSequentialGroup().addComponent(playerPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(battlefieldPanel,0,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(playerPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(battlefieldPanel,GroupLayout.DEFAULT_SIZE,160,Short.MAX_VALUE));
  this.setLayout(layout);
}",0.8559568285595683
160150,"void sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents);","int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents);",0.9700598802395208
160151,"@Override public void sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents){
  sortingOptions.put(""String_Node_Str"",PreferencesDialog.getCachedValue(""String_Node_Str"",""String_Node_Str""));
  if (this.cardPlugin != null)   this.cardPlugin.sortPermanents(ui,permanents,sortingOptions);
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents){
  sortingOptions.put(""String_Node_Str"",PreferencesDialog.getCachedValue(""String_Node_Str"",""String_Node_Str""));
  if (this.cardPlugin != null)   return this.cardPlugin.sortPermanents(ui,permanents,sortingOptions);
  return -1;
}",0.957613814756672
160152,"@Override public void sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null)   throw new RuntimeException(""String_Node_Str"");
  JComponent component=ui.get(""String_Node_Str"");
  JComponent component2=ui.get(""String_Node_Str"");
  if (component == null)   throw new RuntimeException(""String_Node_Str"");
  if (component2 == null)   throw new RuntimeException(""String_Node_Str"");
  if (!(component instanceof JScrollPane))   throw new RuntimeException(""String_Node_Str"");
  if (!(component instanceof JScrollPane))   throw new RuntimeException(""String_Node_Str"");
  JScrollPane jScrollPane=(JScrollPane)component;
  JLayeredPane battlefieldPanel=(JLayeredPane)component2;
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent))     continue;
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1)       break;
    }
    Stack stack=new Stack();
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=jScrollPane.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=(int)Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=(int)Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : (int)Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=(int)Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<Row>(rows.size());
    for (    Row row : rows)     storedRows.add((Row)row.clone());
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows)     fillRow(others,rows,row);
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty())     break;
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows)     fillRow(others,rows,row);
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty())     break;
    cardWidth--;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  x=0;
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++)         x-=row.get(i).getWidth();
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToBack(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null)   throw new RuntimeException(""String_Node_Str"");
  JComponent component2=ui.get(""String_Node_Str"");
  if (component2 == null)   throw new RuntimeException(""String_Node_Str"");
  JLayeredPane battlefieldPanel=(JLayeredPane)component2;
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent))     continue;
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1)       break;
    }
    Stack stack=new Stack();
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=(int)Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=(int)Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : (int)Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=(int)Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<Row>(rows.size());
    for (    Row row : rows)     storedRows.add((Row)row.clone());
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows)     fillRow(others,rows,row);
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty())     break;
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows)     fillRow(others,rows,row);
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty())     break;
    cardWidth--;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  x=0;
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++)         x-=row.get(i).getWidth();
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToBack(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  return y;
}",0.6688047893949113
160153,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null && (card.getCardType().contains(CardType.ARTIFACT) || card.getCardType().contains(CardType.CREATURE))) {
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  if (source instanceof SpellAbility) {
    Card card=game.getCard(source.getSourceId());
    if (card != null && (card.getCardType().contains(CardType.ARTIFACT) || card.getCardType().contains(CardType.CREATURE))) {
      return true;
    }
  }
  return false;
}",0.91156462585034
160154,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null)   return false;
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      for (      UUID cardId : (List<UUID>)target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        if (card != null) {
          if (card.putOntoBattlefield(game,Zone.HAND,source.getId(),source.getControllerId())) {
            if (tapped) {
              Permanent permanent=game.getPermanent(card.getId());
              if (permanent != null)               permanent.setTapped(true);
            }
          }
        }
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  if (forceShuffle)   player.shuffleLibrary(game);
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null)   return false;
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      for (      UUID cardId : (List<UUID>)target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        if (card != null) {
          if (card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId())) {
            if (tapped) {
              Permanent permanent=game.getPermanent(card.getId());
              if (permanent != null)               permanent.setTapped(true);
            }
          }
        }
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  if (forceShuffle)   player.shuffleLibrary(game);
  return false;
}",0.9946075494307968
160155,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
switch (fromZone) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
PermanentCard permanent=new PermanentCard(this,controllerId);
game.getBattlefield().addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
default :
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
PermanentCard permanent=new PermanentCard(this,controllerId);
game.getBattlefield().addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(sourceId,game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.9295089936801166
160156,"private static void loadPhases(Preferences prefs){
  load(prefs,dialog.checkBoxUpkeepYou,UPKEEP_YOU);
  load(prefs,dialog.checkBoxDrawYou,DRAW_YOU);
  load(prefs,dialog.checkBoxMainYou,MAIN_YOU);
  load(prefs,dialog.checkBoxBeforeCYou,BEFORE_COMBAT_YOU);
  load(prefs,dialog.checkBoxEndOfCYou,END_OF_COMBAT_YOU);
  load(prefs,dialog.checkBoxMain2You,MAIN_2_YOU);
  load(prefs,dialog.checkBoxEndTurnYou,END_OF_TURN_YOU);
  load(prefs,dialog.checkBoxUpkeepOthers,UPKEEP_OTHERS);
  load(prefs,dialog.checkBoxDrawOthers,DRAW_OTHERS);
  load(prefs,dialog.checkBoxMainOthers,MAIN_OTHERS);
  load(prefs,dialog.checkBoxBeforeCOthers,BEFORE_COMBAT_OTHERS);
  load(prefs,dialog.checkBoxEndOfCOthers,END_OF_COMBAT_OTHERS);
  load(prefs,dialog.checkBoxMain2Others,MAIN_2_OTHERS);
  load(prefs,dialog.checkBoxEndTurnOthers,END_OF_TURN_OTHERS);
  load(prefs,dialog.displayBigCardsInHand,KEY_HAND_USE_BIG_CARDS,""String_Node_Str"");
  load(prefs,dialog.showToolTipsInHand,KEY_HAND_SHOW_TOOLTIPS,""String_Node_Str"");
  load(prefs,dialog.nonLandPermanentsInOnePile,KEY_PERMANENTS_IN_ONE_PILE,""String_Node_Str"");
}","private static void loadPhases(Preferences prefs){
  load(prefs,dialog.checkBoxUpkeepYou,UPKEEP_YOU);
  load(prefs,dialog.checkBoxDrawYou,DRAW_YOU);
  load(prefs,dialog.checkBoxMainYou,MAIN_YOU);
  load(prefs,dialog.checkBoxBeforeCYou,BEFORE_COMBAT_YOU);
  load(prefs,dialog.checkBoxEndOfCYou,END_OF_COMBAT_YOU);
  load(prefs,dialog.checkBoxMain2You,MAIN_2_YOU);
  load(prefs,dialog.checkBoxEndTurnYou,END_OF_TURN_YOU);
  load(prefs,dialog.checkBoxUpkeepOthers,UPKEEP_OTHERS);
  load(prefs,dialog.checkBoxDrawOthers,DRAW_OTHERS);
  load(prefs,dialog.checkBoxMainOthers,MAIN_OTHERS);
  load(prefs,dialog.checkBoxBeforeCOthers,BEFORE_COMBAT_OTHERS);
  load(prefs,dialog.checkBoxEndOfCOthers,END_OF_COMBAT_OTHERS);
  load(prefs,dialog.checkBoxMain2Others,MAIN_2_OTHERS);
  load(prefs,dialog.checkBoxEndTurnOthers,END_OF_TURN_OTHERS);
  load(prefs,dialog.displayBigCardsInHand,KEY_HAND_USE_BIG_CARDS,""String_Node_Str"");
  load(prefs,dialog.showToolTipsInAnyZone,KEY_SHOW_TOOLTIPS_ANY_ZONE,""String_Node_Str"");
  load(prefs,dialog.nonLandPermanentsInOnePile,KEY_PERMANENTS_IN_ONE_PILE,""String_Node_Str"");
}",0.9886000911992704
160157,"private void saveButtonActionPerformed(java.awt.event.ActionEvent evt){
  Preferences prefs=MageFrame.getPreferences();
  save(prefs,dialog.checkBoxUpkeepYou,UPKEEP_YOU);
  save(prefs,dialog.checkBoxDrawYou,DRAW_YOU);
  save(prefs,dialog.checkBoxMainYou,MAIN_YOU);
  save(prefs,dialog.checkBoxBeforeCYou,BEFORE_COMBAT_YOU);
  save(prefs,dialog.checkBoxEndOfCYou,END_OF_COMBAT_YOU);
  save(prefs,dialog.checkBoxMain2You,MAIN_2_YOU);
  save(prefs,dialog.checkBoxEndTurnYou,END_OF_TURN_YOU);
  save(prefs,dialog.checkBoxUpkeepOthers,UPKEEP_OTHERS);
  save(prefs,dialog.checkBoxDrawOthers,DRAW_OTHERS);
  save(prefs,dialog.checkBoxMainOthers,MAIN_OTHERS);
  save(prefs,dialog.checkBoxBeforeCOthers,BEFORE_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxEndOfCOthers,END_OF_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxMain2Others,MAIN_2_OTHERS);
  save(prefs,dialog.checkBoxEndTurnOthers,END_OF_TURN_OTHERS);
  save(prefs,dialog.displayBigCardsInHand,KEY_HAND_USE_BIG_CARDS,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.showToolTipsInHand,KEY_HAND_SHOW_TOOLTIPS,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.nonLandPermanentsInOnePile,KEY_PERMANENTS_IN_ONE_PILE,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbProxyType,KEY_PROXY_TYPE);
  save(prefs,dialog.txtProxyServer,KEY_PROXY_ADDRESS);
  save(prefs,dialog.txtProxyPort,KEY_PROXY_PORT);
  save(prefs,dialog.txtProxyUserName,KEY_PROXY_USERNAME);
  save(prefs,dialog.rememberPswd,KEY_PROXY_REMEMBER,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  if (dialog.rememberPswd.isSelected()) {
    char[] input=txtPasswordField.getPassword();
    prefs.put(KEY_PROXY_PSWD,new String(input));
  }
  if (availableAvatars.contains(selectedId)) {
    prefs.put(KEY_AVATAR,String.valueOf(selectedId));
    updateCache(KEY_AVATAR,String.valueOf(selectedId));
  }
  saveImagesPath(prefs);
  try {
    prefs.flush();
  }
 catch (  BackingStoreException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
  dialog.setVisible(false);
}","private void saveButtonActionPerformed(java.awt.event.ActionEvent evt){
  Preferences prefs=MageFrame.getPreferences();
  save(prefs,dialog.checkBoxUpkeepYou,UPKEEP_YOU);
  save(prefs,dialog.checkBoxDrawYou,DRAW_YOU);
  save(prefs,dialog.checkBoxMainYou,MAIN_YOU);
  save(prefs,dialog.checkBoxBeforeCYou,BEFORE_COMBAT_YOU);
  save(prefs,dialog.checkBoxEndOfCYou,END_OF_COMBAT_YOU);
  save(prefs,dialog.checkBoxMain2You,MAIN_2_YOU);
  save(prefs,dialog.checkBoxEndTurnYou,END_OF_TURN_YOU);
  save(prefs,dialog.checkBoxUpkeepOthers,UPKEEP_OTHERS);
  save(prefs,dialog.checkBoxDrawOthers,DRAW_OTHERS);
  save(prefs,dialog.checkBoxMainOthers,MAIN_OTHERS);
  save(prefs,dialog.checkBoxBeforeCOthers,BEFORE_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxEndOfCOthers,END_OF_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxMain2Others,MAIN_2_OTHERS);
  save(prefs,dialog.checkBoxEndTurnOthers,END_OF_TURN_OTHERS);
  save(prefs,dialog.displayBigCardsInHand,KEY_HAND_USE_BIG_CARDS,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.showToolTipsInAnyZone,KEY_SHOW_TOOLTIPS_ANY_ZONE,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.nonLandPermanentsInOnePile,KEY_PERMANENTS_IN_ONE_PILE,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbProxyType,KEY_PROXY_TYPE);
  save(prefs,dialog.txtProxyServer,KEY_PROXY_ADDRESS);
  save(prefs,dialog.txtProxyPort,KEY_PROXY_PORT);
  save(prefs,dialog.txtProxyUserName,KEY_PROXY_USERNAME);
  save(prefs,dialog.rememberPswd,KEY_PROXY_REMEMBER,""String_Node_Str"",""String_Node_Str"",UPDATE_CACHE_POLICY);
  if (dialog.rememberPswd.isSelected()) {
    char[] input=txtPasswordField.getPassword();
    prefs.put(KEY_PROXY_PSWD,new String(input));
  }
  if (availableAvatars.contains(selectedId)) {
    prefs.put(KEY_AVATAR,String.valueOf(selectedId));
    updateCache(KEY_AVATAR,String.valueOf(selectedId));
  }
  saveImagesPath(prefs);
  try {
    prefs.flush();
  }
 catch (  BackingStoreException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
  dialog.setVisible(false);
}",0.991263282172373
160158,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  jTabbedPane1=new javax.swing.JTabbedPane();
  jPanel1=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  showToolTipsInHand=new javax.swing.JCheckBox();
  displayBigCardsInHand=new javax.swing.JCheckBox();
  jPanel7=new javax.swing.JPanel();
  nonLandPermanentsInOnePile=new javax.swing.JCheckBox();
  jPanel2=new javax.swing.JPanel();
  jLabel1=new javax.swing.JLabel();
  jLabel2=new javax.swing.JLabel();
  jLabel3=new javax.swing.JLabel();
  jLabel4=new javax.swing.JLabel();
  jLabel5=new javax.swing.JLabel();
  jLabel6=new javax.swing.JLabel();
  jLabel7=new javax.swing.JLabel();
  jLabel8=new javax.swing.JLabel();
  jLabel9=new javax.swing.JLabel();
  jLabel10=new javax.swing.JLabel();
  checkBoxUpkeepYou=new javax.swing.JCheckBox();
  checkBoxDrawYou=new javax.swing.JCheckBox();
  checkBoxMainYou=new javax.swing.JCheckBox();
  checkBoxBeforeCYou=new javax.swing.JCheckBox();
  checkBoxEndOfCYou=new javax.swing.JCheckBox();
  checkBoxMain2You=new javax.swing.JCheckBox();
  checkBoxEndTurnYou=new javax.swing.JCheckBox();
  checkBoxUpkeepOthers=new javax.swing.JCheckBox();
  checkBoxDrawOthers=new javax.swing.JCheckBox();
  checkBoxMainOthers=new javax.swing.JCheckBox();
  checkBoxBeforeCOthers=new javax.swing.JCheckBox();
  checkBoxEndOfCOthers=new javax.swing.JCheckBox();
  checkBoxMain2Others=new javax.swing.JCheckBox();
  checkBoxEndTurnOthers=new javax.swing.JCheckBox();
  jPanel4=new javax.swing.JPanel();
  jPanel5=new javax.swing.JPanel();
  useDefaultImageFolder=new javax.swing.JCheckBox();
  imageFolderPath=new javax.swing.JTextField();
  browseButton=new javax.swing.JButton();
  checkForNewImages=new javax.swing.JCheckBox();
  jPanel6=new javax.swing.JPanel();
  lblProxyType=new javax.swing.JLabel();
  cbProxyType=new javax.swing.JComboBox();
  pnlProxySettings=new javax.swing.JPanel();
  pnlProxy=new javax.swing.JPanel();
  lblProxyServer=new javax.swing.JLabel();
  txtProxyServer=new javax.swing.JTextField();
  lblProxyPort=new javax.swing.JLabel();
  txtProxyPort=new javax.swing.JTextField();
  lblProxyUserName=new javax.swing.JLabel();
  txtProxyUserName=new javax.swing.JTextField();
  lblProxyPassword=new javax.swing.JLabel();
  txtPasswordField=new javax.swing.JPasswordField();
  rememberPswd=new javax.swing.JCheckBox();
  jLabel11=new javax.swing.JLabel();
  jPanel8=new javax.swing.JPanel();
  jScrollPane1=new javax.swing.JScrollPane();
  jPanel9=new javax.swing.JPanel();
  jPanel10=new javax.swing.JPanel();
  jPanel13=new javax.swing.JPanel();
  jPanel11=new javax.swing.JPanel();
  jLabel12=new javax.swing.JLabel();
  jPanel12=new javax.swing.JPanel();
  jPanel14=new javax.swing.JPanel();
  jPanel15=new javax.swing.JPanel();
  jLabel13=new javax.swing.JLabel();
  jPanel16=new javax.swing.JPanel();
  jPanel17=new javax.swing.JPanel();
  jPanel18=new javax.swing.JPanel();
  jPanel19=new javax.swing.JPanel();
  jPanel20=new javax.swing.JPanel();
  jPanel21=new javax.swing.JPanel();
  saveButton=new javax.swing.JButton();
  exitButton=new javax.swing.JButton();
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle(""String_Node_Str"");
  jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  showToolTipsInHand.setSelected(true);
  showToolTipsInHand.setText(""String_Node_Str"");
  showToolTipsInHand.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showToolTipsInHandActionPerformed(evt);
    }
  }
);
  displayBigCardsInHand.setText(""String_Node_Str"");
  displayBigCardsInHand.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      displayBigCardsInHandActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout jPanel3Layout=new javax.swing.GroupLayout(jPanel3);
  jPanel3.setLayout(jPanel3Layout);
  jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(showToolTipsInHand).addComponent(displayBigCardsInHand)).addContainerGap(161,Short.MAX_VALUE)));
  jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addComponent(showToolTipsInHand).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(displayBigCardsInHand).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  nonLandPermanentsInOnePile.setSelected(true);
  nonLandPermanentsInOnePile.setLabel(""String_Node_Str"");
  nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      nonLandPermanentsInOnePileActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout jPanel7Layout=new javax.swing.GroupLayout(jPanel7);
  jPanel7.setLayout(jPanel7Layout);
  jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addContainerGap().addComponent(nonLandPermanentsInOnePile).addContainerGap(199,Short.MAX_VALUE)));
  jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addComponent(nonLandPermanentsInOnePile).addContainerGap(30,Short.MAX_VALUE)));
  nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName(""String_Node_Str"");
  javax.swing.GroupLayout jPanel1Layout=new javax.swing.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel7,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jPanel3,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jPanel3,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jPanel7,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(84,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel1);
  jLabel1.setText(""String_Node_Str"");
  jLabel2.setText(""String_Node_Str"");
  jLabel3.setText(""String_Node_Str"");
  jLabel4.setText(""String_Node_Str"");
  jLabel5.setText(""String_Node_Str"");
  jLabel6.setText(""String_Node_Str"");
  jLabel7.setText(""String_Node_Str"");
  jLabel8.setText(""String_Node_Str"");
  jLabel9.setText(""String_Node_Str"");
  jLabel10.setText(""String_Node_Str"");
  javax.swing.GroupLayout jPanel2Layout=new javax.swing.GroupLayout(jPanel2);
  jPanel2.setLayout(jPanel2Layout);
  jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(20,20,20).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel2).addComponent(jLabel5).addComponent(jLabel6).addComponent(jLabel7).addComponent(jLabel8)).addGap(77,77,77).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(2,2,2).addComponent(jLabel9).addGap(32,32,32).addComponent(jLabel10)).addGroup(jPanel2Layout.createSequentialGroup().addGap(13,13,13).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxDrawYou).addComponent(checkBoxUpkeepYou).addComponent(checkBoxMainYou).addComponent(checkBoxBeforeCYou).addComponent(checkBoxEndOfCYou).addComponent(checkBoxMain2You).addComponent(checkBoxEndTurnYou)).addGap(78,78,78).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepOthers).addComponent(checkBoxBeforeCOthers).addComponent(checkBoxMainOthers).addComponent(checkBoxEndOfCOthers).addComponent(checkBoxDrawOthers).addComponent(checkBoxMain2Others).addComponent(checkBoxEndTurnOthers))))).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(jLabel4,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jLabel3,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)))).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1))).addContainerGap(100,Short.MAX_VALUE)));
  jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel10).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(checkBoxUpkeepOthers)).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel1).addGap(20,20,20)).addComponent(jLabel9)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepYou).addComponent(jLabel2)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel3).addComponent(checkBoxDrawYou).addComponent(checkBoxDrawOthers)).addGap(4,4,4).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel4).addComponent(checkBoxMainYou).addComponent(checkBoxMainOthers)).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel5,javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxBeforeCYou,javax.swing.GroupLayout.Alignment.TRAILING))).addGroup(jPanel2Layout.createSequentialGroup().addGap(6,6,6).addComponent(checkBoxBeforeCOthers))).addGap(7,7,7).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel6).addComponent(checkBoxEndOfCYou).addComponent(checkBoxEndOfCOthers)).addGap(9,9,9).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel7).addComponent(checkBoxMain2You).addComponent(checkBoxMain2Others)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxEndTurnYou).addComponent(jLabel8).addComponent(checkBoxEndTurnOthers)).addContainerGap(24,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel2);
  jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  useDefaultImageFolder.setText(""String_Node_Str"");
  useDefaultImageFolder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      useDefaultImageFolderActionPerformed(evt);
    }
  }
);
  browseButton.setText(""String_Node_Str"");
  browseButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      browseButtonActionPerformed(evt);
    }
  }
);
  checkForNewImages.setText(""String_Node_Str"");
  javax.swing.GroupLayout jPanel5Layout=new javax.swing.GroupLayout(jPanel5);
  jPanel5.setLayout(jPanel5Layout);
  jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(useDefaultImageFolder)).addGroup(jPanel5Layout.createSequentialGroup().addGap(19,19,19).addComponent(imageFolderPath,javax.swing.GroupLayout.PREFERRED_SIZE,284,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(browseButton)).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(checkForNewImages))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(useDefaultImageFolder).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(imageFolderPath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(browseButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(checkForNewImages).addContainerGap(45,Short.MAX_VALUE)));
  javax.swing.GroupLayout jPanel4Layout=new javax.swing.GroupLayout(jPanel4);
  jPanel4.setLayout(jPanel4Layout);
  jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jPanel5,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jPanel5,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(92,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel4);
  lblProxyType.setText(""String_Node_Str"");
  cbProxyType.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbProxyTypeActionPerformed(evt);
    }
  }
);
  pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  lblProxyServer.setText(""String_Node_Str"");
  lblProxyPort.setText(""String_Node_Str"");
  txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter(){
    public void keyTyped(    java.awt.event.KeyEvent evt){
      txtProxyPortkeyTyped(evt);
    }
  }
);
  lblProxyUserName.setText(""String_Node_Str"");
  lblProxyPassword.setText(""String_Node_Str"");
  txtPasswordField.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtPasswordFieldActionPerformed(evt);
    }
  }
);
  rememberPswd.setText(""String_Node_Str"");
  rememberPswd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      rememberPswdActionPerformed(evt);
    }
  }
);
  jLabel11.setFont(new java.awt.Font(""String_Node_Str"",2,10));
  jLabel11.setText(""String_Node_Str"");
  javax.swing.GroupLayout pnlProxyLayout=new javax.swing.GroupLayout(pnlProxy);
  pnlProxy.setLayout(pnlProxyLayout);
  pnlProxyLayout.setHorizontalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addGap(29,29,29).addComponent(rememberPswd).addGap(18,18,18).addComponent(jLabel11).addGap(34,34,34)).addGroup(pnlProxyLayout.createSequentialGroup().addContainerGap().addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblProxyPort).addComponent(lblProxyPassword).addComponent(lblProxyServer).addComponent(lblProxyUserName)).addGap(19,19,19).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,58,javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(txtPasswordField,javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyUserName,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.PREFERRED_SIZE,148,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(txtProxyServer,javax.swing.GroupLayout.DEFAULT_SIZE,295,Short.MAX_VALUE)).addContainerGap()));
  pnlProxyLayout.setVerticalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addGap(6,6,6).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyServer,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyServer)).addGap(8,8,8).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblProxyPort).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyUserName,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyUserName)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtPasswordField,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyPassword)).addGap(18,18,18).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(rememberPswd).addComponent(jLabel11)).addContainerGap(25,Short.MAX_VALUE)));
  javax.swing.GroupLayout pnlProxySettingsLayout=new javax.swing.GroupLayout(pnlProxySettings);
  pnlProxySettings.setLayout(pnlProxySettingsLayout);
  pnlProxySettingsLayout.setHorizontalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addContainerGap().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pnlProxySettingsLayout.setVerticalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  javax.swing.GroupLayout jPanel6Layout=new javax.swing.GroupLayout(jPanel6);
  jPanel6.setLayout(jPanel6Layout);
  jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addGap(40,40,40).addComponent(lblProxyType).addGap(18,18,18).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,126,javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addComponent(pnlProxySettings,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE))).addContainerGap()));
  jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblProxyType).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(pnlProxySettings,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(40,Short.MAX_VALUE)));
  pnlProxySettings.getAccessibleContext().setAccessibleDescription(""String_Node_Str"");
  jTabbedPane1.addTab(""String_Node_Str"",jPanel6);
  jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel10Layout=new javax.swing.GroupLayout(jPanel10);
  jPanel10.setLayout(jPanel10Layout);
  jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel13Layout=new javax.swing.GroupLayout(jPanel13);
  jPanel13.setLayout(jPanel13Layout);
  jPanel13Layout.setHorizontalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel13Layout.setVerticalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel11Layout=new javax.swing.GroupLayout(jPanel11);
  jPanel11.setLayout(jPanel11Layout);
  jPanel11Layout.setHorizontalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel11Layout.setVerticalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jLabel12.setFont(new java.awt.Font(""String_Node_Str"",1,11));
  jLabel12.setText(""String_Node_Str"");
  jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel12Layout=new javax.swing.GroupLayout(jPanel12);
  jPanel12.setLayout(jPanel12Layout);
  jPanel12Layout.setHorizontalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel12Layout.setVerticalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel14Layout=new javax.swing.GroupLayout(jPanel14);
  jPanel14.setLayout(jPanel14Layout);
  jPanel14Layout.setHorizontalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel14Layout.setVerticalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel15Layout=new javax.swing.GroupLayout(jPanel15);
  jPanel15.setLayout(jPanel15Layout);
  jPanel15Layout.setHorizontalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel15Layout.setVerticalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jLabel13.setFont(new java.awt.Font(""String_Node_Str"",1,11));
  jLabel13.setText(""String_Node_Str"");
  jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel16Layout=new javax.swing.GroupLayout(jPanel16);
  jPanel16.setLayout(jPanel16Layout);
  jPanel16Layout.setHorizontalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel16Layout.setVerticalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel17Layout=new javax.swing.GroupLayout(jPanel17);
  jPanel17.setLayout(jPanel17Layout);
  jPanel17Layout.setHorizontalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel17Layout.setVerticalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel18Layout=new javax.swing.GroupLayout(jPanel18);
  jPanel18.setLayout(jPanel18Layout);
  jPanel18Layout.setHorizontalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel18Layout.setVerticalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel19Layout=new javax.swing.GroupLayout(jPanel19);
  jPanel19.setLayout(jPanel19Layout);
  jPanel19Layout.setHorizontalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel19Layout.setVerticalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel20Layout=new javax.swing.GroupLayout(jPanel20);
  jPanel20.setLayout(jPanel20Layout);
  jPanel20Layout.setHorizontalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel20Layout.setVerticalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel21Layout=new javax.swing.GroupLayout(jPanel21);
  jPanel21.setLayout(jPanel21Layout);
  jPanel21Layout.setHorizontalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel21Layout.setVerticalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  javax.swing.GroupLayout jPanel9Layout=new javax.swing.GroupLayout(jPanel9);
  jPanel9.setLayout(jPanel9Layout);
  jPanel9Layout.setHorizontalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addComponent(jLabel12)).addGroup(jPanel9Layout.createSequentialGroup().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGap(30,30,30).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel12,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel10,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel19,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(33,33,33).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel13,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel14,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel20,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGap(20,20,20).addComponent(jPanel16,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(33,33,33).addComponent(jPanel17,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel13)))).addGap(32,32,32).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel18,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel21,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel15,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel11,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)))).addContainerGap(29,Short.MAX_VALUE)));
  jPanel9Layout.setVerticalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addComponent(jLabel12).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel11,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel13,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel10,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(26,26,26).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel15,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel12,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel14,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(23,23,23).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel19,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel20,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel21,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18,18,18).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel9Layout.createSequentialGroup().addComponent(jLabel13).addGap(18,18,18).addComponent(jPanel16,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jPanel17,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel18,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(25,25,25)));
  jScrollPane1.setViewportView(jPanel9);
  javax.swing.GroupLayout jPanel8Layout=new javax.swing.GroupLayout(jPanel8);
  jPanel8.setLayout(jPanel8Layout);
  jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1,javax.swing.GroupLayout.DEFAULT_SIZE,434,Short.MAX_VALUE));
  jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1,javax.swing.GroupLayout.DEFAULT_SIZE,264,Short.MAX_VALUE));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel8);
  saveButton.setLabel(""String_Node_Str"");
  saveButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      saveButtonActionPerformed(evt);
    }
  }
);
  exitButton.setLabel(""String_Node_Str"");
  exitButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exitButtonActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTabbedPane1,javax.swing.GroupLayout.DEFAULT_SIZE,439,Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,layout.createSequentialGroup().addContainerGap(311,Short.MAX_VALUE).addComponent(saveButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exitButton,javax.swing.GroupLayout.PREFERRED_SIZE,55,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jTabbedPane1,javax.swing.GroupLayout.PREFERRED_SIZE,292,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(exitButton).addComponent(saveButton)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  pack();
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  jTabbedPane1=new javax.swing.JTabbedPane();
  jPanel1=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  showToolTipsInAnyZone=new javax.swing.JCheckBox();
  displayBigCardsInHand=new javax.swing.JCheckBox();
  jPanel7=new javax.swing.JPanel();
  nonLandPermanentsInOnePile=new javax.swing.JCheckBox();
  jPanel2=new javax.swing.JPanel();
  jLabel1=new javax.swing.JLabel();
  jLabel2=new javax.swing.JLabel();
  jLabel3=new javax.swing.JLabel();
  jLabel4=new javax.swing.JLabel();
  jLabel5=new javax.swing.JLabel();
  jLabel6=new javax.swing.JLabel();
  jLabel7=new javax.swing.JLabel();
  jLabel8=new javax.swing.JLabel();
  jLabel9=new javax.swing.JLabel();
  jLabel10=new javax.swing.JLabel();
  checkBoxUpkeepYou=new javax.swing.JCheckBox();
  checkBoxDrawYou=new javax.swing.JCheckBox();
  checkBoxMainYou=new javax.swing.JCheckBox();
  checkBoxBeforeCYou=new javax.swing.JCheckBox();
  checkBoxEndOfCYou=new javax.swing.JCheckBox();
  checkBoxMain2You=new javax.swing.JCheckBox();
  checkBoxEndTurnYou=new javax.swing.JCheckBox();
  checkBoxUpkeepOthers=new javax.swing.JCheckBox();
  checkBoxDrawOthers=new javax.swing.JCheckBox();
  checkBoxMainOthers=new javax.swing.JCheckBox();
  checkBoxBeforeCOthers=new javax.swing.JCheckBox();
  checkBoxEndOfCOthers=new javax.swing.JCheckBox();
  checkBoxMain2Others=new javax.swing.JCheckBox();
  checkBoxEndTurnOthers=new javax.swing.JCheckBox();
  jPanel4=new javax.swing.JPanel();
  jPanel5=new javax.swing.JPanel();
  useDefaultImageFolder=new javax.swing.JCheckBox();
  imageFolderPath=new javax.swing.JTextField();
  browseButton=new javax.swing.JButton();
  checkForNewImages=new javax.swing.JCheckBox();
  jPanel6=new javax.swing.JPanel();
  lblProxyType=new javax.swing.JLabel();
  cbProxyType=new javax.swing.JComboBox();
  pnlProxySettings=new javax.swing.JPanel();
  pnlProxy=new javax.swing.JPanel();
  lblProxyServer=new javax.swing.JLabel();
  txtProxyServer=new javax.swing.JTextField();
  lblProxyPort=new javax.swing.JLabel();
  txtProxyPort=new javax.swing.JTextField();
  lblProxyUserName=new javax.swing.JLabel();
  txtProxyUserName=new javax.swing.JTextField();
  lblProxyPassword=new javax.swing.JLabel();
  txtPasswordField=new javax.swing.JPasswordField();
  rememberPswd=new javax.swing.JCheckBox();
  jLabel11=new javax.swing.JLabel();
  jPanel8=new javax.swing.JPanel();
  jScrollPane1=new javax.swing.JScrollPane();
  jPanel9=new javax.swing.JPanel();
  jPanel10=new javax.swing.JPanel();
  jPanel13=new javax.swing.JPanel();
  jPanel11=new javax.swing.JPanel();
  jLabel12=new javax.swing.JLabel();
  jPanel12=new javax.swing.JPanel();
  jPanel14=new javax.swing.JPanel();
  jPanel15=new javax.swing.JPanel();
  jLabel13=new javax.swing.JLabel();
  jPanel16=new javax.swing.JPanel();
  jPanel17=new javax.swing.JPanel();
  jPanel18=new javax.swing.JPanel();
  jPanel19=new javax.swing.JPanel();
  jPanel20=new javax.swing.JPanel();
  jPanel21=new javax.swing.JPanel();
  saveButton=new javax.swing.JButton();
  exitButton=new javax.swing.JButton();
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle(""String_Node_Str"");
  jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  showToolTipsInAnyZone.setSelected(true);
  showToolTipsInAnyZone.setText(""String_Node_Str"");
  showToolTipsInAnyZone.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showToolTipsInHandActionPerformed(evt);
    }
  }
);
  displayBigCardsInHand.setText(""String_Node_Str"");
  displayBigCardsInHand.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      displayBigCardsInHandActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout jPanel3Layout=new javax.swing.GroupLayout(jPanel3);
  jPanel3.setLayout(jPanel3Layout);
  jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(showToolTipsInAnyZone).addComponent(displayBigCardsInHand)).addContainerGap(161,Short.MAX_VALUE)));
  jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addComponent(showToolTipsInAnyZone).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(displayBigCardsInHand).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  nonLandPermanentsInOnePile.setSelected(true);
  nonLandPermanentsInOnePile.setLabel(""String_Node_Str"");
  nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      nonLandPermanentsInOnePileActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout jPanel7Layout=new javax.swing.GroupLayout(jPanel7);
  jPanel7.setLayout(jPanel7Layout);
  jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addContainerGap().addComponent(nonLandPermanentsInOnePile).addContainerGap(199,Short.MAX_VALUE)));
  jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addComponent(nonLandPermanentsInOnePile).addContainerGap(30,Short.MAX_VALUE)));
  nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName(""String_Node_Str"");
  javax.swing.GroupLayout jPanel1Layout=new javax.swing.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel7,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jPanel3,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jPanel3,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jPanel7,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(84,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel1);
  jLabel1.setText(""String_Node_Str"");
  jLabel2.setText(""String_Node_Str"");
  jLabel3.setText(""String_Node_Str"");
  jLabel4.setText(""String_Node_Str"");
  jLabel5.setText(""String_Node_Str"");
  jLabel6.setText(""String_Node_Str"");
  jLabel7.setText(""String_Node_Str"");
  jLabel8.setText(""String_Node_Str"");
  jLabel9.setText(""String_Node_Str"");
  jLabel10.setText(""String_Node_Str"");
  javax.swing.GroupLayout jPanel2Layout=new javax.swing.GroupLayout(jPanel2);
  jPanel2.setLayout(jPanel2Layout);
  jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(20,20,20).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel2).addComponent(jLabel5).addComponent(jLabel6).addComponent(jLabel7).addComponent(jLabel8)).addGap(77,77,77).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(2,2,2).addComponent(jLabel9).addGap(32,32,32).addComponent(jLabel10)).addGroup(jPanel2Layout.createSequentialGroup().addGap(13,13,13).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxDrawYou).addComponent(checkBoxUpkeepYou).addComponent(checkBoxMainYou).addComponent(checkBoxBeforeCYou).addComponent(checkBoxEndOfCYou).addComponent(checkBoxMain2You).addComponent(checkBoxEndTurnYou)).addGap(78,78,78).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepOthers).addComponent(checkBoxBeforeCOthers).addComponent(checkBoxMainOthers).addComponent(checkBoxEndOfCOthers).addComponent(checkBoxDrawOthers).addComponent(checkBoxMain2Others).addComponent(checkBoxEndTurnOthers))))).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(jLabel4,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jLabel3,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)))).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1))).addContainerGap(100,Short.MAX_VALUE)));
  jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel10).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(checkBoxUpkeepOthers)).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel1).addGap(20,20,20)).addComponent(jLabel9)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepYou).addComponent(jLabel2)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel3).addComponent(checkBoxDrawYou).addComponent(checkBoxDrawOthers)).addGap(4,4,4).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel4).addComponent(checkBoxMainYou).addComponent(checkBoxMainOthers)).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel5,javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxBeforeCYou,javax.swing.GroupLayout.Alignment.TRAILING))).addGroup(jPanel2Layout.createSequentialGroup().addGap(6,6,6).addComponent(checkBoxBeforeCOthers))).addGap(7,7,7).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel6).addComponent(checkBoxEndOfCYou).addComponent(checkBoxEndOfCOthers)).addGap(9,9,9).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel7).addComponent(checkBoxMain2You).addComponent(checkBoxMain2Others)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxEndTurnYou).addComponent(jLabel8).addComponent(checkBoxEndTurnOthers)).addContainerGap(24,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel2);
  jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  useDefaultImageFolder.setText(""String_Node_Str"");
  useDefaultImageFolder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      useDefaultImageFolderActionPerformed(evt);
    }
  }
);
  browseButton.setText(""String_Node_Str"");
  browseButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      browseButtonActionPerformed(evt);
    }
  }
);
  checkForNewImages.setText(""String_Node_Str"");
  javax.swing.GroupLayout jPanel5Layout=new javax.swing.GroupLayout(jPanel5);
  jPanel5.setLayout(jPanel5Layout);
  jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(useDefaultImageFolder)).addGroup(jPanel5Layout.createSequentialGroup().addGap(19,19,19).addComponent(imageFolderPath,javax.swing.GroupLayout.PREFERRED_SIZE,284,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(browseButton)).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(checkForNewImages))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap().addComponent(useDefaultImageFolder).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(imageFolderPath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(browseButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(checkForNewImages).addContainerGap(45,Short.MAX_VALUE)));
  javax.swing.GroupLayout jPanel4Layout=new javax.swing.GroupLayout(jPanel4);
  jPanel4.setLayout(jPanel4Layout);
  jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jPanel5,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jPanel5,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(92,Short.MAX_VALUE)));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel4);
  lblProxyType.setText(""String_Node_Str"");
  cbProxyType.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbProxyTypeActionPerformed(evt);
    }
  }
);
  pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  lblProxyServer.setText(""String_Node_Str"");
  lblProxyPort.setText(""String_Node_Str"");
  txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter(){
    public void keyTyped(    java.awt.event.KeyEvent evt){
      txtProxyPortkeyTyped(evt);
    }
  }
);
  lblProxyUserName.setText(""String_Node_Str"");
  lblProxyPassword.setText(""String_Node_Str"");
  txtPasswordField.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtPasswordFieldActionPerformed(evt);
    }
  }
);
  rememberPswd.setText(""String_Node_Str"");
  rememberPswd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      rememberPswdActionPerformed(evt);
    }
  }
);
  jLabel11.setFont(new java.awt.Font(""String_Node_Str"",2,10));
  jLabel11.setText(""String_Node_Str"");
  javax.swing.GroupLayout pnlProxyLayout=new javax.swing.GroupLayout(pnlProxy);
  pnlProxy.setLayout(pnlProxyLayout);
  pnlProxyLayout.setHorizontalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addGap(29,29,29).addComponent(rememberPswd).addGap(18,18,18).addComponent(jLabel11).addGap(34,34,34)).addGroup(pnlProxyLayout.createSequentialGroup().addContainerGap().addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblProxyPort).addComponent(lblProxyPassword).addComponent(lblProxyServer).addComponent(lblProxyUserName)).addGap(19,19,19).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,58,javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(txtPasswordField,javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyUserName,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.PREFERRED_SIZE,148,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(txtProxyServer,javax.swing.GroupLayout.DEFAULT_SIZE,295,Short.MAX_VALUE)).addContainerGap()));
  pnlProxyLayout.setVerticalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addGap(6,6,6).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyServer,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyServer)).addGap(8,8,8).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblProxyPort).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyUserName,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyUserName)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtPasswordField,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyPassword)).addGap(18,18,18).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(rememberPswd).addComponent(jLabel11)).addContainerGap(25,Short.MAX_VALUE)));
  javax.swing.GroupLayout pnlProxySettingsLayout=new javax.swing.GroupLayout(pnlProxySettings);
  pnlProxySettings.setLayout(pnlProxySettingsLayout);
  pnlProxySettingsLayout.setHorizontalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addContainerGap().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pnlProxySettingsLayout.setVerticalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  javax.swing.GroupLayout jPanel6Layout=new javax.swing.GroupLayout(jPanel6);
  jPanel6.setLayout(jPanel6Layout);
  jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addGap(40,40,40).addComponent(lblProxyType).addGap(18,18,18).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,126,javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addComponent(pnlProxySettings,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE))).addContainerGap()));
  jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblProxyType).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(pnlProxySettings,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(40,Short.MAX_VALUE)));
  pnlProxySettings.getAccessibleContext().setAccessibleDescription(""String_Node_Str"");
  jTabbedPane1.addTab(""String_Node_Str"",jPanel6);
  jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel10Layout=new javax.swing.GroupLayout(jPanel10);
  jPanel10.setLayout(jPanel10Layout);
  jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel13Layout=new javax.swing.GroupLayout(jPanel13);
  jPanel13.setLayout(jPanel13Layout);
  jPanel13Layout.setHorizontalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel13Layout.setVerticalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel11Layout=new javax.swing.GroupLayout(jPanel11);
  jPanel11.setLayout(jPanel11Layout);
  jPanel11Layout.setHorizontalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel11Layout.setVerticalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jLabel12.setFont(new java.awt.Font(""String_Node_Str"",1,11));
  jLabel12.setText(""String_Node_Str"");
  jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel12Layout=new javax.swing.GroupLayout(jPanel12);
  jPanel12.setLayout(jPanel12Layout);
  jPanel12Layout.setHorizontalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel12Layout.setVerticalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel14Layout=new javax.swing.GroupLayout(jPanel14);
  jPanel14.setLayout(jPanel14Layout);
  jPanel14Layout.setHorizontalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel14Layout.setVerticalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel15Layout=new javax.swing.GroupLayout(jPanel15);
  jPanel15.setLayout(jPanel15Layout);
  jPanel15Layout.setHorizontalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel15Layout.setVerticalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jLabel13.setFont(new java.awt.Font(""String_Node_Str"",1,11));
  jLabel13.setText(""String_Node_Str"");
  jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel16Layout=new javax.swing.GroupLayout(jPanel16);
  jPanel16.setLayout(jPanel16Layout);
  jPanel16Layout.setHorizontalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel16Layout.setVerticalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel17Layout=new javax.swing.GroupLayout(jPanel17);
  jPanel17.setLayout(jPanel17Layout);
  jPanel17Layout.setHorizontalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel17Layout.setVerticalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel18Layout=new javax.swing.GroupLayout(jPanel18);
  jPanel18.setLayout(jPanel18Layout);
  jPanel18Layout.setHorizontalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel18Layout.setVerticalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel19Layout=new javax.swing.GroupLayout(jPanel19);
  jPanel19.setLayout(jPanel19Layout);
  jPanel19Layout.setHorizontalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel19Layout.setVerticalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel20Layout=new javax.swing.GroupLayout(jPanel20);
  jPanel20.setLayout(jPanel20Layout);
  jPanel20Layout.setHorizontalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel20Layout.setVerticalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  javax.swing.GroupLayout jPanel21Layout=new javax.swing.GroupLayout(jPanel21);
  jPanel21.setLayout(jPanel21Layout);
  jPanel21Layout.setHorizontalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  jPanel21Layout.setVerticalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,100,Short.MAX_VALUE));
  javax.swing.GroupLayout jPanel9Layout=new javax.swing.GroupLayout(jPanel9);
  jPanel9.setLayout(jPanel9Layout);
  jPanel9Layout.setHorizontalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addComponent(jLabel12)).addGroup(jPanel9Layout.createSequentialGroup().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGap(30,30,30).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel12,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel10,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel19,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(33,33,33).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel13,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel14,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel20,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGap(20,20,20).addComponent(jPanel16,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(33,33,33).addComponent(jPanel17,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel13)))).addGap(32,32,32).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel18,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel21,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel15,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel11,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)))).addContainerGap(29,Short.MAX_VALUE)));
  jPanel9Layout.setVerticalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addContainerGap().addComponent(jLabel12).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel11,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel13,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel10,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(26,26,26).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel15,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel12,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel14,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(23,23,23).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel19,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel20,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel21,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18,18,18).addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel9Layout.createSequentialGroup().addComponent(jLabel13).addGap(18,18,18).addComponent(jPanel16,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jPanel17,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel18,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(25,25,25)));
  jScrollPane1.setViewportView(jPanel9);
  javax.swing.GroupLayout jPanel8Layout=new javax.swing.GroupLayout(jPanel8);
  jPanel8.setLayout(jPanel8Layout);
  jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1,javax.swing.GroupLayout.DEFAULT_SIZE,434,Short.MAX_VALUE));
  jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1,javax.swing.GroupLayout.DEFAULT_SIZE,264,Short.MAX_VALUE));
  jTabbedPane1.addTab(""String_Node_Str"",jPanel8);
  saveButton.setLabel(""String_Node_Str"");
  saveButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      saveButtonActionPerformed(evt);
    }
  }
);
  exitButton.setLabel(""String_Node_Str"");
  exitButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exitButtonActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTabbedPane1,javax.swing.GroupLayout.DEFAULT_SIZE,439,Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,layout.createSequentialGroup().addContainerGap(311,Short.MAX_VALUE).addComponent(saveButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exitButton,javax.swing.GroupLayout.PREFERRED_SIZE,55,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jTabbedPane1,javax.swing.GroupLayout.PREFERRED_SIZE,292,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(exitButton).addComponent(saveButton)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  pack();
}",0.9990858725761772
160159,"private void showPopup(final TransferData data,final Component parentComponent,final Point parentPoint){
  if (data.card.getRarity().equals(Constants.Rarity.NA)) {
    return;
  }
  if (data.component instanceof MageCard) {
    String zone=((MageCard)(data.component)).getZone();
    if (zone != null && zone.equals(Constants.Zone.HAND.toString())) {
      String showTooltips=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_HAND_SHOW_TOOLTIPS,""String_Node_Str"");
      if (showTooltips.equals(""String_Node_Str"")) {
        return;
      }
    }
  }
  if (cardInfoPane == null) {
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
  }
 else {
    ThreadUtils.threadPool2.submit(new Runnable(){
      @Override public void run(){
        ThreadUtils.sleep(700);
        if (popupCard == null || !popupCard.equals(data.card)) {
          return;
        }
        try {
          if (session == null || !state) {
            return;
          }
          final Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
          Component popup2=MageFrame.getUI().getComponent(MageComponents.CARD_INFO_PANE);
          ((CardInfoPane)popup2).setCard(data.card);
          Point location=new Point((int)data.locationOnScreen.getX() + data.popupOffsetX - 40,(int)data.locationOnScreen.getY() + data.popupOffsetY - 40);
          location=GuiDisplayUtil.keepComponentInsideParent(location,parentPoint,popup2,parentComponent);
          location.translate(-parentPoint.x,-parentPoint.y);
          popupContainer.setLocation(location);
          ThreadUtils.sleep(200);
          final Component c=MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              if (!state) {
                return;
              }
              popupContainer.setVisible(true);
              c.repaint();
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
}","private void showPopup(final TransferData data,final Component parentComponent,final Point parentPoint){
  if (data.card.getRarity().equals(Constants.Rarity.NA)) {
    return;
  }
  if (data.component instanceof MageCard) {
    String showTooltips=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_SHOW_TOOLTIPS_ANY_ZONE,""String_Node_Str"");
    if (showTooltips.equals(""String_Node_Str"")) {
      return;
    }
  }
  if (cardInfoPane == null) {
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
  }
 else {
    ThreadUtils.threadPool2.submit(new Runnable(){
      @Override public void run(){
        ThreadUtils.sleep(700);
        if (popupCard == null || !popupCard.equals(data.card)) {
          return;
        }
        try {
          if (session == null || !state) {
            return;
          }
          final Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
          Component popup2=MageFrame.getUI().getComponent(MageComponents.CARD_INFO_PANE);
          ((CardInfoPane)popup2).setCard(data.card);
          Point location=new Point((int)data.locationOnScreen.getX() + data.popupOffsetX - 40,(int)data.locationOnScreen.getY() + data.popupOffsetY - 40);
          location=GuiDisplayUtil.keepComponentInsideParent(location,parentPoint,popup2,parentComponent);
          location.translate(-parentPoint.x,-parentPoint.y);
          popupContainer.setLocation(location);
          ThreadUtils.sleep(200);
          final Component c=MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              if (!state) {
                return;
              }
              popupContainer.setVisible(true);
              c.repaint();
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
}",0.9647549530761208
160160,"public void updateSize(String size){
  if (size.equals(""String_Node_Str"")) {
    this.conf=new _3x3Configuration();
  }
 else   if (size.equals(""String_Node_Str"")) {
    this.conf=new _4x4Configuration();
  }
 else {
    return;
  }
  setSize(conf.WIDTH,conf.HEIGHT);
  setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
  setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
  pageRight.setBounds(conf.WIDTH - 2 * LEFT_RIGHT_PAGES_WIDTH - 64,0,64,64);
  addSetTabs();
  showCards();
}","public void updateSize(String size){
  if (size.equals(LAYOUT_3x3)) {
    this.conf=new _3x3Configuration();
  }
 else   if (size.equals(LAYOUT_4x4)) {
    this.conf=new _4x4Configuration();
  }
 else {
    return;
  }
  currentPage=0;
  pageLeft.setVisible(false);
  setSize(conf.WIDTH,conf.HEIGHT);
  setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
  setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
  pageRight.setBounds(conf.WIDTH - 2 * LEFT_RIGHT_PAGES_WIDTH - 64,0,64,64);
  addSetTabs();
  showCards();
}",0.900883218842002
160161,"@Override public void beginStep(Game game,UUID activePlayerId){
  Player activePlayer=game.getPlayer(activePlayerId);
  activePlayer.drawCards(1,game);
  super.beginStep(game,activePlayerId);
}","@Override public void beginStep(Game game,UUID activePlayerId){
  Player activePlayer=game.getPlayer(activePlayerId);
  activePlayer.drawCards(1,game);
  game.applyEffects();
  super.beginStep(game,activePlayerId);
}",0.9437652811735942
160162,"@Override public boolean isInUseableZone(Game game){
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}","@Override public boolean isInUseableZone(Game game){
  MageObject lkiTest=game.getLastKnownInformation(getSourceId(),zone);
  if (lkiTest != null) {
    return true;
  }
  Zone test=game.getState().getZone(sourceId);
  return test != null && zone.match(test);
}",0.7111111111111111
160163,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && !event.getTargetId().equals(this.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Constants.Zone.BATTLEFIELD && zEvent.getToZone() == Constants.Zone.GRAVEYARD) {
      Permanent p=(Permanent)game.getLastKnownInformation(event.getTargetId(),Constants.Zone.BATTLEFIELD);
      if (p != null && p.getControllerId().equals(this.controllerId)) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && !event.getTargetId().equals(this.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Constants.Zone.BATTLEFIELD && zEvent.getToZone() == Constants.Zone.GRAVEYARD) {
      Permanent p=(Permanent)game.getLastKnownInformation(event.getTargetId(),Constants.Zone.BATTLEFIELD);
      if (p != null && p.getControllerId().equals(this.controllerId) && filter.match(p)) {
        return true;
      }
    }
  }
  return false;
}",0.9837467921300256
160164,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
    UUID sourceId=getSourceId();
    if (game.getPermanent(sourceId) == null) {
      if (game.getLastKnownInformation(sourceId,Constants.Zone.BATTLEFIELD) == null) {
        return false;
      }
    }
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    Permanent permanent=zEvent.getTarget();
    if (permanent != null && permanent.getCardType().contains(Constants.CardType.CREATURE) && zEvent.isDiesEvent() && permanent.getControllerId().equals(this.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
    UUID sourceId=getSourceId();
    if (game.getPermanent(sourceId) == null) {
      if (game.getLastKnownInformation(sourceId,Constants.Zone.BATTLEFIELD) == null) {
        return false;
      }
    }
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    Permanent permanent=zEvent.getTarget();
    if (permanent != null && permanent.getCardType().contains(Constants.CardType.CREATURE) && zEvent.isDiesEvent() && permanent.getControllerId().equals(this.getControllerId()) && filter != null && filter.match(permanent)) {
      return true;
    }
  }
  return false;
}",0.966542750929368
160165,"@Override public int damage(int damage,UUID sourceId,Game game,boolean combatDamage,boolean preventable){
  if (damage > 0 && canDamage(game.getObject(sourceId))) {
    GameEvent event=new DamagePlayerEvent(playerId,sourceId,playerId,damage,preventable,combatDamage);
    if (!game.replaceEvent(event)) {
      int actualDamage=event.getAmount();
      if (actualDamage > 0) {
        Permanent source=game.getPermanent(sourceId);
        if (source != null && (source.getAbilities().containsKey(InfectAbility.getInstance().getId()))) {
          addCounters(CounterType.POISON.createInstance(actualDamage),game);
        }
 else {
          this.loseLife(actualDamage,game);
        }
        if (source != null && source.getAbilities().containsKey(LifelinkAbility.getInstance().getId())) {
          Player player=game.getPlayer(source.getControllerId());
          player.gainLife(damage,game);
        }
        game.fireEvent(new DamagedPlayerEvent(playerId,sourceId,playerId,actualDamage,combatDamage));
        return actualDamage;
      }
    }
  }
  return 0;
}","@Override public int damage(int damage,UUID sourceId,Game game,boolean combatDamage,boolean preventable){
  if (damage > 0 && canDamage(game.getObject(sourceId))) {
    GameEvent event=new DamagePlayerEvent(playerId,sourceId,playerId,damage,preventable,combatDamage);
    if (!game.replaceEvent(event)) {
      int actualDamage=event.getAmount();
      if (actualDamage > 0) {
        Permanent source=game.getPermanent(sourceId);
        if (source == null) {
          MageObject lastKnownInformation=game.getLastKnownInformation(sourceId,Zone.BATTLEFIELD);
          if (lastKnownInformation instanceof Permanent) {
            source=(Permanent)lastKnownInformation;
          }
        }
        if (source != null && (source.getAbilities().containsKey(InfectAbility.getInstance().getId()))) {
          addCounters(CounterType.POISON.createInstance(actualDamage),game);
        }
 else {
          this.loseLife(actualDamage,game);
        }
        if (source != null && source.getAbilities().containsKey(LifelinkAbility.getInstance().getId())) {
          Player player=game.getPlayer(source.getControllerId());
          player.gainLife(damage,game);
        }
        game.fireEvent(new DamagedPlayerEvent(playerId,sourceId,playerId,actualDamage,combatDamage));
        return actualDamage;
      }
    }
  }
  return 0;
}",0.890924229808493
160166,"public void setAllowBadMoves(boolean allowBadMoves){
}","@Override public void setAllowBadMoves(boolean allowBadMoves){
}",0.9152542372881356
160167,"/** 
 * Get manacost score. Depends on chosen colors. Returns negative score for those cards that doesn't fit allowed colors. If allowed colors are not chosen, then score based on converted cost is returned with penalty for heavy colored cards.
 * @param card
 * @param allowedColors Can be null.
 * @return
 */
private static int getManaCostScore(Card card,List<Constants.ColoredManaSymbol> allowedColors){
  int converted=card.getManaCost().convertedManaCost();
  if (allowedColors == null) {
    int colorPenalty=0;
    for (    String symbol : card.getManaCost().getSymbols()) {
      if (isColoredMana(symbol)) {
        colorPenalty++;
      }
    }
    return 2 * (converted - colorPenalty + 1);
  }
  final Map<String,Integer> singleCount=new HashMap<String,Integer>();
  int maxSingleCount=0;
  for (  String symbol : card.getManaCost().getSymbols()) {
    int count=0;
    symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (isColoredMana(symbol)) {
      for (      Constants.ColoredManaSymbol allowed : allowedColors) {
        if (allowed.toString().equals(symbol)) {
          count++;
        }
      }
      if (count == 0) {
        return -100;
      }
      Integer typeCount=singleCount.get(symbol);
      if (typeCount == null) {
        typeCount=new Integer(0);
      }
      typeCount+=1;
      singleCount.put(symbol,typeCount);
      maxSingleCount=Math.max(maxSingleCount,typeCount);
    }
  }
  return 2 * converted + 3 * (10 - SINGLE_PENALTY[maxSingleCount]);
}","/** 
 * Get manacost score. Depends on chosen colors. Returns negative score for those cards that doesn't fit allowed colors. If allowed colors are not chosen, then score based on converted cost is returned with penalty for heavy colored cards.
 * @param card
 * @param allowedColors Can be null.
 * @return
 */
private static int getManaCostScore(Card card,List<Constants.ColoredManaSymbol> allowedColors){
  int converted=card.getManaCost().convertedManaCost();
  if (allowedColors == null) {
    int colorPenalty=0;
    for (    String symbol : card.getManaCost().getSymbols()) {
      if (isColoredMana(symbol)) {
        colorPenalty++;
      }
    }
    return 2 * (converted - colorPenalty + 1);
  }
  final Map<String,Integer> singleCount=new HashMap<String,Integer>();
  int maxSingleCount=0;
  for (  String symbol : card.getManaCost().getSymbols()) {
    int count=0;
    symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (isColoredMana(symbol)) {
      for (      Constants.ColoredManaSymbol allowed : allowedColors) {
        if (allowed.toString().equals(symbol)) {
          count++;
        }
      }
      if (count == 0) {
        return -100;
      }
      Integer typeCount=singleCount.get(symbol);
      if (typeCount == null) {
        typeCount=new Integer(0);
      }
      typeCount+=1;
      singleCount.put(symbol,typeCount);
      maxSingleCount=Math.max(maxSingleCount,typeCount);
    }
  }
  if (maxSingleCount > 5)   maxSingleCount=5;
  return 2 * converted + 3 * (10 - SINGLE_PENALTY[maxSingleCount]);
}",0.9853875476493013
160168,"private void runEmbeddedMageServer(){
  if (embeddedMageServerAction != null) {
    embeddedMageServerAction.execute();
  }
}","private void runEmbeddedMageServer(){
  if (embeddedMageServerAction != null) {
    try {
      embeddedMageServerAction.execute();
    }
 catch (    MageException e) {
      logger.error(e);
    }
  }
}",0.7439024390243902
160169,"@Override public void run(){
  if (SessionManager.getInstance().isValidSession(sessionId)) {
    try {
      action.execute();
    }
 catch (    MageException me) {
      throw new RuntimeException(me);
    }
  }
}","@Override public void run(){
  if (SessionManager.getInstance().isValidSession(sessionId)) {
    try {
      action.execute();
    }
 catch (    MageException me) {
      throw new RuntimeException(me);
    }
  }
 else {
    LogServiceImpl.instance.log(LogKeys.KEY_NOT_VALID_SESSION_INTERNAL,actionName,sessionId);
  }
}",0.797752808988764
160170,"protected void execute(final String actionName,final String sessionId,final Action action) throws MageException {
  if (SessionManager.getInstance().isValidSession(sessionId)) {
    try {
      callExecutor.execute(new Runnable(){
        @Override public void run(){
          if (SessionManager.getInstance().isValidSession(sessionId)) {
            try {
              action.execute();
            }
 catch (            MageException me) {
              throw new RuntimeException(me);
            }
          }
        }
      }
);
    }
 catch (    Exception ex) {
      handleException(ex);
    }
  }
 else {
    LogServiceImpl.instance.log(LogKeys.KEY_NOT_VALID_SESSION,actionName,sessionId);
  }
}","protected void execute(final String actionName,final String sessionId,final Action action) throws MageException {
  if (SessionManager.getInstance().isValidSession(sessionId)) {
    try {
      callExecutor.execute(new Runnable(){
        @Override public void run(){
          if (SessionManager.getInstance().isValidSession(sessionId)) {
            try {
              action.execute();
            }
 catch (            MageException me) {
              throw new RuntimeException(me);
            }
          }
 else {
            LogServiceImpl.instance.log(LogKeys.KEY_NOT_VALID_SESSION_INTERNAL,actionName,sessionId);
          }
        }
      }
);
    }
 catch (    Exception ex) {
      handleException(ex);
    }
  }
 else {
    LogServiceImpl.instance.log(LogKeys.KEY_NOT_VALID_SESSION,actionName,sessionId);
  }
}",0.78748370273794
160171,"public boolean updateProjectRelease(ProjectRelease release){
  boolean found=false;
  List<ProjectRelease> releases=getProjectReleases();
  for (int i=0; i < releases.size(); i++) {
    ProjectRelease projectRelease=releases.get(i);
    if (release.getRepository() != null && release.getRepository().equals(projectRelease.getRepository())) {
      release.setRepository(projectRelease.getRepository());
    }
    if (projectRelease.getVersion().equals(release)) {
      releases.set(i,release);
      found=true;
      break;
    }
  }
  if (!found) {
    releases.add(release);
  }
  release.replaceVersionPattern();
  return found;
}","public boolean updateProjectRelease(ProjectRelease release){
  boolean found=false;
  List<ProjectRelease> releases=getProjectReleases();
  for (int i=0; i < releases.size(); i++) {
    ProjectRelease projectRelease=releases.get(i);
    if (release.getRepository() != null && release.getRepository().equals(projectRelease.getRepository())) {
      release.setRepository(projectRelease.getRepository());
    }
    if (projectRelease.getVersion().equals(release.getVersion())) {
      releases.set(i,release);
      found=true;
      break;
    }
  }
  if (!found) {
    releases.add(release);
  }
  release.replaceVersionPattern();
  return found;
}",0.989867498051442
160172,"@Test public void projectMetadata_updateProject() throws Exception {
  Project project=service.getProject(""String_Node_Str"");
  List<Map<String,Object>> releases=new ArrayList<>();
  for (  ProjectRelease release : project.getProjectReleases()) {
    release=release.createWithVersionPattern();
    Map<String,Object> map=getRelease(release);
    releases.add(map);
  }
  project.getProjectReleases().iterator().next().setVersion(""String_Node_Str"");
  mockMvc.perform(MockMvcRequestBuilders.put(""String_Node_Str"").content(mapper.writeValueAsString(releases)).contentType(MediaType.APPLICATION_JSON_UTF8)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andDo(docs(""String_Node_Str""));
}","@Test public void projectMetadata_updateProject() throws Exception {
  Project project=service.getProject(""String_Node_Str"");
  List<Map<String,Object>> releases=new ArrayList<>();
  for (  ProjectRelease release : project.getProjectReleases()) {
    release=release.createWithVersionPattern();
    Map<String,Object> map=getRelease(release);
    releases.add(map);
  }
  releases.iterator().next().put(""String_Node_Str"",""String_Node_Str"");
  mockMvc.perform(MockMvcRequestBuilders.put(""String_Node_Str"").content(mapper.writeValueAsString(releases)).contentType(MediaType.APPLICATION_JSON_UTF8)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andDo(docs(""String_Node_Str""));
  entityManager.flush();
}",0.9364005412719892
160173,"public List<ProjectRelease> getProjectReleases(){
  return releaseList;
}","public List<ProjectRelease> getProjectReleases(){
  releaseList.sort((release1,release2) -> {
    if (release1.getVersion() == null || release2.getVersion() == null) {
      return 0;
    }
    return release1.getVersion().compareTo(release2.getVersion());
  }
);
  releaseList.sort(ProjectRelease::compareTo);
  return releaseList;
}",0.3144963144963145
160174,"@Override public int compareTo(ProjectRelease other){
  return versionName.compareTo(other.versionName);
}","@Override public int compareTo(ProjectRelease other){
  if (this.getVersion() == null || other.getVersion() == null) {
    return 0;
  }
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher thisMatcher=pattern.matcher(this.getVersion());
  Matcher otherMatcher=pattern.matcher(other.getVersion());
  int versionDiff=0;
  boolean thisFind=thisMatcher.find();
  boolean otherFind=otherMatcher.find();
  while (thisFind && otherFind) {
    int thisFoundVersion=Integer.parseInt(thisMatcher.group(0));
    int otherFoundVersion=Integer.parseInt(otherMatcher.group(0));
    versionDiff=otherFoundVersion - thisFoundVersion;
    if (versionDiff != 0) {
      return versionDiff;
    }
    thisFind=thisMatcher.find();
    otherFind=otherMatcher.find();
  }
  if (thisFind) {
    return -1;
  }
  if (otherFind) {
    return 1;
  }
  return versionDiff;
}",0.1492227979274611
160175,"private void updateMemberProfile(MemberProfile profile,MemberProfile existingProfile){
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setBio(profile.getBio());
  existingProfile.setName(profile.getName());
  existingProfile.setJobTitle(profile.getJobTitle());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setLanyrdUsername(profile.getLanyrdUsername());
  existingProfile.setGplusId(profile.getGplusId());
  existingProfile.setLocation(profile.getLocation());
  existingProfile.setGeoLocation(profile.getGeoLocation());
  existingProfile.setVideoEmbeds(profile.getVideoEmbeds());
  existingProfile.setGravatarEmail(profile.getGravatarEmail());
  existingProfile.setHidden(profile.isHidden());
  if (!StringUtils.isEmpty(profile.getGravatarEmail())) {
    Md5PasswordEncoder encoder=new Md5PasswordEncoder();
    String hashedEmail=encoder.encodePassword(profile.getGravatarEmail(),null);
    existingProfile.setAvatarUrl(String.format(""String_Node_Str"",hashedEmail));
  }
  teamRepository.save(existingProfile);
  try {
    searchService.saveToIndex(mapper.map(existingProfile));
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + existingProfile.getId(),e);
  }
}","private void updateMemberProfile(MemberProfile profile,MemberProfile existingProfile){
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setBio(profile.getBio());
  existingProfile.setName(profile.getName());
  existingProfile.setJobTitle(profile.getJobTitle());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setLanyrdUsername(profile.getLanyrdUsername());
  existingProfile.setGplusId(profile.getGplusId());
  existingProfile.setLocation(profile.getLocation());
  existingProfile.setGeoLocation(profile.getGeoLocation());
  existingProfile.setVideoEmbeds(profile.getVideoEmbeds());
  existingProfile.setGravatarEmail(profile.getGravatarEmail());
  existingProfile.setHidden(profile.isHidden());
  updateAvatarUrlwithGravatar(existingProfile);
  teamRepository.save(existingProfile);
  try {
    searchService.saveToIndex(mapper.map(existingProfile));
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + existingProfile.getId(),e);
  }
}",0.7452647854657904
160176,"public MemberProfile createOrUpdateMemberProfile(Long githubId,String username,String avatarUrl,String name){
  MemberProfile profile=teamRepository.findByGithubId(githubId);
  if (profile == null) {
    profile=new MemberProfile();
    profile.setGithubId(githubId);
    profile.setUsername(username);
    profile.setHidden(true);
  }
  profile.setAvatarUrl(avatarUrl);
  profile.setName(name);
  profile.setGithubUsername(username);
  return teamRepository.save(profile);
}","public MemberProfile createOrUpdateMemberProfile(Long githubId,String username,String avatarUrl,String name){
  MemberProfile profile=teamRepository.findByGithubId(githubId);
  if (profile == null) {
    profile=new MemberProfile();
    profile.setGithubId(githubId);
    profile.setUsername(username);
    profile.setHidden(true);
  }
  profile.setAvatarUrl(avatarUrl);
  profile.setName(name);
  profile.setGithubUsername(username);
  updateAvatarUrlwithGravatar(profile);
  return teamRepository.save(profile);
}",0.9595959595959596
160177,"@CacheEvict(value=CACHE_NAME,key=""String_Node_Str"") public void deletePost(Post post){
  postRepository.delete(post);
}","@CacheEvict(value=CACHE_NAME,key=""String_Node_Str"",condition=""String_Node_Str"") public void deletePost(Post post){
  postRepository.delete(post);
}",0.8947368421052632
160178,"@CacheEvict(value=CACHE_NAME,key=""String_Node_Str"") public void updatePost(Post post,PostForm postForm){
  postFormAdapter.updatePostFromPostForm(post,postForm);
  postRepository.save(post);
  saveToIndex(post);
}","@CacheEvict(value=CACHE_NAME,key=""String_Node_Str"",condition=""String_Node_Str"") public void updatePost(Post post,PostForm postForm){
  postFormAdapter.updatePostFromPostForm(post,postForm);
  postRepository.save(post);
  saveToIndex(post);
}",0.9383259911894272
160179,"@Test public void showsAllGgtsGaDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),equalTo(""String_Node_Str""));
  assertThat(document.text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),containsString(""String_Node_Str""));
}","@Test public void showsAllGgtsGaDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),equalTo(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").text(),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
}",0.815068493150685
160180,"@Test public void hidesStsMilestoneDownloadsIfNotAvailable() throws Exception {
  String responseXml=Fixtures.load(""String_Node_Str"");
  stub(restTemplate.getForObject(anyString(),eq(String.class))).toReturn(responseXml);
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.text(),not(containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),not(containsString(""String_Node_Str"")));
}","@Test public void hidesStsMilestoneDownloadsIfNotAvailable() throws Exception {
  String responseXml=Fixtures.load(""String_Node_Str"");
  stub(restTemplate.getForObject(anyString(),eq(String.class))).toReturn(responseXml);
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),not(allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""))));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),not(allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str""))));
}",0.81353591160221
160181,"@Test public void showsAllGgtsMilestoneDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),containsString(""String_Node_Str""));
}","@Test public void showsAllGgtsMilestoneDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
}",0.7597864768683275
160182,"@Test public void hidesGgtsMilestoneDownloadsIfNotAvailable() throws Exception {
  String responseXml=Fixtures.load(""String_Node_Str"");
  stub(restTemplate.getForObject(anyString(),eq(String.class))).toReturn(responseXml);
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.text(),not(containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),not(containsString(""String_Node_Str"")));
}","@Test public void hidesGgtsMilestoneDownloadsIfNotAvailable() throws Exception {
  String responseXml=Fixtures.load(""String_Node_Str"");
  stub(restTemplate.getForObject(anyString(),eq(String.class))).toReturn(responseXml);
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),not(allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""))));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),not(allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str""))));
}",0.8137931034482758
160183,"@Test public void showsAllStsGaDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),equalTo(""String_Node_Str""));
  assertThat(document.text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),containsString(""String_Node_Str""));
}","@Test public void showsAllStsGaDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),equalTo(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").text(),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
}",0.8148148148148148
160184,"@Test public void showsAllStsMilestoneDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.text(),containsString(""String_Node_Str""));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),containsString(""String_Node_Str""));
}","@Test public void showsAllStsMilestoneDownloads() throws Exception {
  MvcResult mvcResult=mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  Document document=Jsoup.parse(mvcResult.getResponse().getContentAsString());
  assertThat(document.select(""String_Node_Str"").text(),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
  assertThat(document.select(""String_Node_Str"").attr(""String_Node_Str""),allOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
}",0.7593582887700535
160185,"public PostBuilder(){
  this.title=""String_Node_Str"";
  this.author=new MemberProfile();
  this.author.setUsername(""String_Node_Str"");
  this.category=PostCategory.ENGINEERING;
  this.rawContent=""String_Node_Str"";
  this.renderedContent=""String_Node_Str"";
  this.renderedSummary=""String_Node_Str"";
  this.broadcast=false;
  this.publishAt=new Date(System.currentTimeMillis() - 24 * 60 * 60* 1000);
  this.draft=false;
}","public PostBuilder(){
  this.title=""String_Node_Str"";
  this.author=new MemberProfile();
  this.author.setUsername(""String_Node_Str"");
  this.category=PostCategory.ENGINEERING;
  this.rawContent=""String_Node_Str"";
  this.renderedContent=""String_Node_Str"";
  this.renderedSummary=""String_Node_Str"";
  this.broadcast=false;
  this.publishAt=new Date(System.currentTimeMillis());
  this.draft=false;
}",0.9742962056303548
160186,"@Test public void containsBlogPostFields() throws Exception {
  Post post=PostBuilder.post().category(PostCategory.ENGINEERING).isBroadcast().build();
  postRepository.save(post);
  ResultActions resultActions=mockMvc.perform(get(""String_Node_Str""));
  MvcResult mvcResult=resultActions.andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  assertThat(mvcResult.getResponse().getCharacterEncoding(),equalTo(""String_Node_Str""));
  String atomFeed=mvcResult.getResponse().getContentAsString();
  assertThat(atomFeed,containsString(post.getTitle()));
  assertThat(atomFeed,containsString(post.getRenderedContent()));
  String postDate=new SimpleDateFormat(""String_Node_Str"").format(post.getCreatedAt());
  assertThat(atomFeed,containsString(postDate));
  assertThat(atomFeed,containsString(""String_Node_Str"" + post.getPublicSlug()));
  assertThat(atomFeed,containsString(PostCategory.ENGINEERING.getDisplayName()));
  assertThat(atomFeed,containsString(""String_Node_Str""));
}","@Test public void containsBlogPostFields() throws Exception {
  Post post=PostBuilder.post().category(PostCategory.ENGINEERING).isBroadcast().build();
  postRepository.save(post);
  ResultActions resultActions=mockMvc.perform(get(""String_Node_Str""));
  MvcResult mvcResult=resultActions.andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(""String_Node_Str"")).andReturn();
  assertThat(mvcResult.getResponse().getCharacterEncoding(),equalTo(""String_Node_Str""));
  String atomFeed=mvcResult.getResponse().getContentAsString();
  assertThat(atomFeed,containsString(post.getTitle()));
  assertThat(atomFeed,containsString(post.getRenderedContent()));
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeUtil.UTC);
  String postDate=dateFormat.format(post.getCreatedAt());
  assertThat(atomFeed,containsString(postDate));
  assertThat(atomFeed,containsString(""String_Node_Str"" + post.getPublicSlug()));
  assertThat(atomFeed,containsString(PostCategory.ENGINEERING.getDisplayName()));
  assertThat(atomFeed,containsString(""String_Node_Str""));
}",0.9522024367385192
160187,"private void setId(Post post,Entry entry,HttpServletRequest request){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(UTC);
  String dateString=dateFormat.format(post.getCreatedAt());
  String host=request.getServerName();
  String id=String.format(""String_Node_Str"",host,dateString,post.getId());
  entry.setId(id);
}","private void setId(Post post,Entry entry,HttpServletRequest request){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeUtil.UTC);
  String dateString=dateFormat.format(post.getCreatedAt());
  String host=request.getServerName();
  String id=String.format(""String_Node_Str"",host,dateString,post.getId());
  entry.setId(id);
}",0.9878542510121456
160188,"@Override public int compare(JsonElement o1,JsonElement o2){
  String term1=o1.getAsJsonObject().get(""String_Node_Str"").getAsString();
  String term2=o2.getAsJsonObject().get(""String_Node_Str"").getAsString();
  return term1.compareTo(term2);
}","@Override public int compare(JsonElement o1,JsonElement o2){
  String term1=o1.getAsJsonObject().get(""String_Node_Str"").getAsString().replace(""String_Node_Str"",""String_Node_Str"");
  String term2=o2.getAsJsonObject().get(""String_Node_Str"").getAsString().replace(""String_Node_Str"",""String_Node_Str"");
  return term1.compareTo(term2);
}",0.84375
160189,"private List<JsonElement> sortedTermElements(JsonArray termArray){
  ArrayList<JsonElement> list=Lists.newArrayList(termArray);
  Collections.sort(list,new Comparator<JsonElement>(){
    @Override public int compare(    JsonElement o1,    JsonElement o2){
      String term1=o1.getAsJsonObject().get(""String_Node_Str"").getAsString();
      String term2=o2.getAsJsonObject().get(""String_Node_Str"").getAsString();
      return term1.compareTo(term2);
    }
  }
);
  return list;
}","private List<JsonElement> sortedTermElements(JsonArray termArray){
  ArrayList<JsonElement> list=Lists.newArrayList(termArray);
  Collections.sort(list,new Comparator<JsonElement>(){
    @Override public int compare(    JsonElement o1,    JsonElement o2){
      String term1=o1.getAsJsonObject().get(""String_Node_Str"").getAsString().replace(""String_Node_Str"",""String_Node_Str"");
      String term2=o2.getAsJsonObject().get(""String_Node_Str"").getAsString().replace(""String_Node_Str"",""String_Node_Str"");
      return term1.compareTo(term2);
    }
  }
);
  return list;
}",0.9139579349904398
160190,"@Test public void returnNestedFacets(){
  SearchFacet guidesFacet=searchResults.getFacets().get(0);
  assertThat(guidesFacet.getFacets().size(),equalTo(3));
}","@Test public void returnNestedFacets(){
  SearchFacet guidesFacet=searchResults.getFacets().get(0);
  assertThat(guidesFacet.getFacets().size(),equalTo(3));
  SearchFacet projectsFacet=searchResults.getFacets().get(1);
  List<SearchFacet> projectsFacetFacets=projectsFacet.getFacets();
  assertThat(projectsFacetFacets.size(),equalTo(4));
  assertThat(projectsFacetFacets.get(0).getName(),equalTo(""String_Node_Str""));
  assertThat(projectsFacetFacets.get(1).getName(),equalTo(""String_Node_Str""));
  assertThat(projectsFacetFacets.get(2).getName(),equalTo(""String_Node_Str""));
  assertThat(projectsFacetFacets.get(3).getName(),equalTo(""String_Node_Str""));
}",0.3882063882063882
160191,"public void updateMemberProfile(String memberId,MemberProfile profile){
  MemberProfile existingProfile=fetchMemberProfile(memberId);
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setBio(profile.getBio());
  existingProfile.setName(profile.getName());
  existingProfile.setGithubUsername(profile.getGithubUsername());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setLanyrdUsername(profile.getLanyrdUsername());
  existingProfile.setLocation(profile.getLocation());
  existingProfile.setGeoLocation(profile.getGeoLocation());
  existingProfile.setVideoEmbeds(profile.getVideoEmbeds());
  existingProfile.setGravatarEmail(profile.getGravatarEmail());
  if (!StringUtils.isEmpty(profile.getGravatarEmail())) {
    PasswordEncoder encoder=new Md5PasswordEncoder();
    String hashedEmail=encoder.encodePassword(profile.getGravatarEmail(),null);
    existingProfile.setAvatarUrl(String.format(""String_Node_Str"",hashedEmail));
  }
  teamRepository.save(existingProfile);
  try {
    searchService.saveToIndex(mapper.map(existingProfile));
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + existingProfile.getMemberId(),e);
  }
}","public void updateMemberProfile(String memberId,MemberProfile profile){
  MemberProfile existingProfile=fetchMemberProfile(memberId);
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setBio(profile.getBio());
  existingProfile.setName(profile.getName());
  existingProfile.setTwitterUsername(profile.getTwitterUsername());
  existingProfile.setSpeakerdeckUsername(profile.getSpeakerdeckUsername());
  existingProfile.setLanyrdUsername(profile.getLanyrdUsername());
  existingProfile.setLocation(profile.getLocation());
  existingProfile.setGeoLocation(profile.getGeoLocation());
  existingProfile.setVideoEmbeds(profile.getVideoEmbeds());
  existingProfile.setGravatarEmail(profile.getGravatarEmail());
  if (!StringUtils.isEmpty(profile.getGravatarEmail())) {
    PasswordEncoder encoder=new Md5PasswordEncoder();
    String hashedEmail=encoder.encodePassword(profile.getGravatarEmail(),null);
    existingProfile.setAvatarUrl(String.format(""String_Node_Str"",hashedEmail));
  }
  teamRepository.save(existingProfile);
  try {
    searchService.saveToIndex(mapper.map(existingProfile));
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + existingProfile.getMemberId(),e);
  }
}",0.975317875841436
160192,"private void saveProfile(String editTeamUri) throws Exception {
  MemberProfile existingProfile=new MemberProfile();
  existingProfile.setMemberId(""String_Node_Str"");
  existingProfile.setName(""String_Node_Str"");
  existingProfile.setLocation(""String_Node_Str"");
  existingProfile.setBio(""String_Node_Str"");
  existingProfile.setGithubUsername(""String_Node_Str"");
  existingProfile.setTwitterUsername(""String_Node_Str"");
  existingProfile.setSpeakerdeckUsername(""String_Node_Str"");
  existingProfile.setLanyrdUsername(""String_Node_Str"");
  teamRepository.save(existingProfile);
  MockHttpServletRequestBuilder requestBuilder=put(editTeamUri).principal(principal);
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  performRequestAndExpectRedirect(requestBuilder,editTeamUri);
  MemberProfile profile=teamRepository.findByMemberId(""String_Node_Str"");
  assertThat(profile,not(nullValue()));
  assertEquals(""String_Node_Str"",profile.getMemberId());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getBio());
  assertEquals(""String_Node_Str"",profile.getGithubUsername());
  assertEquals(""String_Node_Str"",profile.getTwitterUsername());
  assertEquals(""String_Node_Str"",profile.getSpeakerdeckUsername());
  assertEquals(""String_Node_Str"",profile.getLanyrdUsername());
  assertEquals(""String_Node_Str"",profile.getVideoEmbeds());
  assertThat(profile.getGeoLocation(),not(nullValue()));
  assertThat((double)profile.getGeoLocation().getLatitude(),closeTo(-12.5,0.1));
  assertThat((double)profile.getGeoLocation().getLongitude(),closeTo(45.3,0.1));
}","private void saveProfile(String editTeamUri) throws Exception {
  MemberProfile existingProfile=new MemberProfile();
  existingProfile.setMemberId(""String_Node_Str"");
  existingProfile.setName(""String_Node_Str"");
  existingProfile.setLocation(""String_Node_Str"");
  existingProfile.setBio(""String_Node_Str"");
  existingProfile.setGithubUsername(""String_Node_Str"");
  existingProfile.setTwitterUsername(""String_Node_Str"");
  existingProfile.setSpeakerdeckUsername(""String_Node_Str"");
  existingProfile.setLanyrdUsername(""String_Node_Str"");
  teamRepository.save(existingProfile);
  MockHttpServletRequestBuilder requestBuilder=put(editTeamUri).principal(principal);
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  requestBuilder.param(""String_Node_Str"",""String_Node_Str"");
  performRequestAndExpectRedirect(requestBuilder,editTeamUri);
  MemberProfile profile=teamRepository.findByMemberId(""String_Node_Str"");
  assertThat(profile,not(nullValue()));
  assertEquals(""String_Node_Str"",profile.getMemberId());
  assertEquals(""String_Node_Str"",profile.getGithubUsername());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getBio());
  assertEquals(""String_Node_Str"",profile.getTwitterUsername());
  assertEquals(""String_Node_Str"",profile.getSpeakerdeckUsername());
  assertEquals(""String_Node_Str"",profile.getLanyrdUsername());
  assertEquals(""String_Node_Str"",profile.getVideoEmbeds());
  assertThat(profile.getGeoLocation(),not(nullValue()));
  assertThat((double)profile.getGeoLocation().getLatitude(),closeTo(-12.5,0.1));
  assertThat((double)profile.getGeoLocation().getLongitude(),closeTo(45.3,0.1));
}",0.9733049846444602
160193,"@Autowired public StaticPageIndexer(CrawlerService crawlerService,SearchService searchService,StaticPageMapper staticPageMapper){
  this.crawlerService=crawlerService;
  this.staticPageMapper=staticPageMapper;
  this.documentProcessor=new CrawledWebDocumentProcessor(searchService,new WebDocumentSearchEntryMapper());
}","@Autowired public StaticPageIndexer(CrawlerService crawlerService,SearchService searchService,StaticPageMapper staticPageMapper){
  this.crawlerService=crawlerService;
  this.staticPageMapper=staticPageMapper;
  this.documentProcessor=new CrawledWebDocumentProcessor(searchService,new LocalStaticPagesSearchEntryMapper());
}",0.95800933125972
160194,"@Autowired public ToolsIndexer(CrawlerService crawlerService,SearchService searchService){
  this.crawlerService=crawlerService;
  this.documentProcessor=new CrawledWebDocumentProcessor(searchService,new WebDocumentSearchEntryMapper());
}","@Autowired public ToolsIndexer(CrawlerService crawlerService,SearchService searchService){
  this.crawlerService=crawlerService;
  this.documentProcessor=new CrawledWebDocumentProcessor(searchService,new LocalStaticPagesSearchEntryMapper());
}",0.943866943866944
160195,"@Override public void addViewControllers(ViewControllerRegistry registry){
  try {
    for (    StaticPageMapper.StaticPageMapping mapping : this.staticPageMapper.staticPagePaths()) {
      registry.addViewController(mapping.getUrlPath()).setViewName(""String_Node_Str"" + mapping.getFilePath());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}","@Override public void addViewControllers(ViewControllerRegistry registry){
  try {
    for (    StaticPageMapper.StaticPageMapping mapping : this.staticPageMapper.staticPagePaths()) {
      String urlPath=mapping.getUrlPath();
      registry.addViewController(urlPath).setViewName(""String_Node_Str"" + mapping.getFilePath());
      if (!urlPath.isEmpty()) {
        registry.addViewController(urlPath + ""String_Node_Str"").setViewName(""String_Node_Str"" + mapping.getFilePath());
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.7709163346613546
160196,"private QueryBuilder addFiltersByFacets(List<String> filters,QueryBuilder query){
  if (!filters.isEmpty()) {
    TermsFilterBuilder termsFilterBuilder=new TermsFilterBuilder(""String_Node_Str"",filters).execution(""String_Node_Str"");
    query=QueryBuilders.filteredQuery(query,termsFilterBuilder);
  }
  return query;
}","private QueryBuilder addFiltersByFacets(List<String> filters,QueryBuilder query){
  if (filters != null && !filters.isEmpty()) {
    TermsFilterBuilder termsFilterBuilder=new TermsFilterBuilder(""String_Node_Str"",filters).execution(""String_Node_Str"");
    query=QueryBuilders.filteredQuery(query,termsFilterBuilder);
  }
  return query;
}",0.9709923664122138
160197,"@SuppressWarnings(""String_Node_Str"") @Test public void search_providesAllResultsForBlankQuery(){
  SearchForm searchForm=new SearchForm();
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((List<SearchResult>)this.model.get(""String_Node_Str""),equalTo(this.entries));
}","@SuppressWarnings(""String_Node_Str"") @Test public void search_providesAllResultsForBlankQuery(){
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((List<SearchResult>)this.model.get(""String_Node_Str""),equalTo(this.entries));
}",0.9297658862876256
160198,"@Test public void search_providesQueryInModel(){
  SearchForm searchForm=new SearchForm();
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((SearchForm)this.model.get(""String_Node_Str""),equalTo(searchForm));
}","@Test public void search_providesQueryInModel(){
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((SearchForm)this.model.get(""String_Node_Str""),equalTo(searchForm));
}",0.9128630705394192
160199,"@SuppressWarnings(""String_Node_Str"") @Test public void search_providesResultsInModel(){
  SearchForm searchForm=new SearchForm();
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((List<SearchResult>)this.model.get(""String_Node_Str""),equalTo(this.entries));
}","@SuppressWarnings(""String_Node_Str"") @Test public void search_providesResultsInModel(){
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat((List<SearchResult>)this.model.get(""String_Node_Str""),equalTo(this.entries));
}",0.9275862068965516
160200,"@Test public void search_providesPaginationInfoInModel(){
  SearchForm searchForm=new SearchForm();
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat(this.model.get(""String_Node_Str""),is(notNullValue()));
}","@Test public void search_providesPaginationInfoInModel(){
  searchForm.setQ(""String_Node_Str"");
  this.controller.search(searchForm,1,this.model);
  assertThat(this.model.get(""String_Node_Str""),is(notNullValue()));
}",0.9113924050632912
160201,"@RequestMapping(value=""String_Node_Str"",method={GET,HEAD}) public String showPost(@PathVariable Long postId,@PathVariable String slug,Model model){
  model.addAttribute(""String_Node_Str"",service.getPost(postId));
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method={GET,HEAD}) public String showPost(@PathVariable Long postId,@PathVariable String slug,Model model){
  model.addAttribute(""String_Node_Str"",postViewFactory.createPostView(service.getPost(postId)));
  return ""String_Node_Str"";
}",0.937984496124031
160202,"@PostConstruct public void deleteSearchIndex() throws Exception {
  ElasticsearchTemplate elasticsearchTemplate=new ElasticsearchTemplate(elasticSearchClient());
  elasticsearchTemplate.deleteIndex(Post.class);
  elasticsearchTemplate.createIndex(Post.class);
}","@PostConstruct public void deleteSearchIndex() throws Exception {
  ElasticsearchTemplate elasticsearchTemplate=new ElasticsearchTemplate(elasticSearchClient());
  elasticsearchTemplate.deleteIndex(Post.class);
  elasticsearchTemplate.createIndex(Post.class);
  elasticsearchTemplate.putMapping(Post.class);
  elasticsearchTemplate.refresh(Post.class,false);
}",0.8405797101449275
160203,"@Test public void showPostModel(){
  Post post=PostBuilder.post().build();
  when(blogService.getPost(post.getId())).thenReturn(post);
  controller.showPost(post.getId(),""String_Node_Str"",model);
  assertThat((Post)model.get(""String_Node_Str""),is(post));
}","@Test public void showPostModel(){
  Post post=PostBuilder.post().build();
  when(blogService.getPost(post.getId())).thenReturn(post);
  controller.showPost(post.getId(),""String_Node_Str"",model);
  PostView view=(PostView)model.get(""String_Node_Str"");
  assertThat(view,is(notNullValue()));
}",0.7846715328467153
160204,"@Override public List<Guide> listGuides(){
  ObjectMapper mapper=new ObjectMapper();
  try {
    InputStream json=new ClassPathResource(""String_Node_Str"",getClass()).getInputStream();
    return mapper.readValue(json,new TypeReference<List<Guide>>(){
    }
);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public List<Guide> listGuides(){
  ObjectMapper mapper=new ObjectMapper();
  try {
    String reposJson=""String_Node_Str"";
    InputStream json=new ClassPathResource(reposJson,getClass()).getInputStream();
    return mapper.readValue(json,new TypeReference<List<Guide>>(){
    }
);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.8530259365994236
160205,"@Override protected void onDraw(Canvas canvas){
  this.canvas=canvas;
  super.onDraw(canvas);
  strokewidth=CalculationUtil.convertDpToPx(widthInDp,getContext());
  float scope=canvas.getWidth() + canvas.getHeight() + canvas.getHeight()+ canvas.getWidth() - strokewidth;
  if (isOutline()) {
    drawOutline();
  }
  if (isStartline()) {
    drawStartline();
  }
  if (isShowProgress()) {
    drawPercent(percentSettings);
  }
  if (isCenterline()) {
    drawCenterline(strokewidth);
  }
  if ((isClearOnHundred() && progress == 100.0) || (progress <= 0.0)) {
    return;
  }
  if (isIndeterminate()) {
    Path path=new Path();
    DrawStop drawEnd=getDrawEnd((scope / 100) * Float.valueOf(String.valueOf(indeterminate_count)),canvas);
    if (drawEnd.place == Place.TOP) {
      path.moveTo(drawEnd.location - indeterminate_width - strokewidth,strokewidth / 2);
      path.lineTo(drawEnd.location,strokewidth / 2);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.RIGHT) {
      path.moveTo(canvas.getWidth() - (strokewidth / 2),drawEnd.location - indeterminate_width);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth + drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.BOTTOM) {
      path.moveTo(drawEnd.location - indeterminate_width - strokewidth,canvas.getHeight() - (strokewidth / 2));
      path.lineTo(drawEnd.location,canvas.getHeight() - (strokewidth / 2));
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.LEFT) {
      path.moveTo((strokewidth / 2),drawEnd.location - indeterminate_width - strokewidth);
      path.lineTo((strokewidth / 2),drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    indeterminate_count++;
    if (indeterminate_count > 100) {
      indeterminate_count=0;
    }
    invalidate();
  }
 else {
    Path path=new Path();
    DrawStop drawEnd=getDrawEnd((scope / 100) * Float.valueOf(String.valueOf(progress)),canvas);
    if (drawEnd.place == Place.TOP) {
      if (drawEnd.location > (canvas.getWidth() / 2)) {
        path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
        path.lineTo(drawEnd.location,strokewidth / 2);
      }
 else {
        path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
        path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
        path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
        path.lineTo(strokewidth / 2,canvas.getHeight() - strokewidth / 2);
        path.lineTo(strokewidth / 2,strokewidth / 2);
        path.lineTo(drawEnd.location,strokewidth / 2);
      }
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.RIGHT) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2 + drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.BOTTOM) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
      path.lineTo(drawEnd.location,canvas.getHeight() - (strokewidth / 2));
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.LEFT) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
      path.lineTo(strokewidth / 2,canvas.getHeight() - strokewidth / 2);
      path.lineTo((strokewidth / 2),drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
  }
}","@Override protected void onDraw(Canvas canvas){
  this.canvas=canvas;
  super.onDraw(canvas);
  strokewidth=CalculationUtil.convertDpToPx(widthInDp,getContext());
  float scope=canvas.getWidth() + canvas.getHeight() + canvas.getHeight()+ canvas.getWidth() - strokewidth;
  if (isOutline()) {
    drawOutline();
  }
  if (isStartline()) {
    drawStartline();
  }
  if (isShowProgress()) {
    drawPercent(percentSettings);
  }
  if (isCenterline()) {
    drawCenterline(strokewidth);
  }
  if ((isClearOnHundred() && progress == 100.0) || (progress <= 0.0)) {
    return;
  }
  if (isIndeterminate()) {
    Path path=new Path();
    DrawStop drawEnd=getDrawEnd((scope / 100) * Float.valueOf(String.valueOf(indeterminate_count)),canvas);
    if (drawEnd.place == Place.TOP) {
      path.moveTo(drawEnd.location - indeterminate_width - strokewidth,strokewidth / 2);
      path.lineTo(drawEnd.location,strokewidth / 2);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.RIGHT) {
      path.moveTo(canvas.getWidth() - (strokewidth / 2),drawEnd.location - indeterminate_width);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth + drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.BOTTOM) {
      path.moveTo(drawEnd.location - indeterminate_width - strokewidth,canvas.getHeight() - (strokewidth / 2));
      path.lineTo(drawEnd.location,canvas.getHeight() - (strokewidth / 2));
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.LEFT) {
      path.moveTo((strokewidth / 2),drawEnd.location - indeterminate_width - strokewidth);
      path.lineTo((strokewidth / 2),drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    indeterminate_count++;
    if (indeterminate_count > 100) {
      indeterminate_count=0;
    }
    invalidate();
  }
 else {
    Path path=new Path();
    DrawStop drawEnd=getDrawEnd((scope / 100) * Float.valueOf(String.valueOf(progress)),canvas);
    if (drawEnd.place == Place.TOP) {
      if (drawEnd.location > (canvas.getWidth() / 2) && progress < 100.0) {
        path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
        path.lineTo(drawEnd.location,strokewidth / 2);
      }
 else {
        path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
        path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
        path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
        path.lineTo(strokewidth / 2,canvas.getHeight() - strokewidth / 2);
        path.lineTo(strokewidth / 2,strokewidth / 2);
        path.lineTo(drawEnd.location,strokewidth / 2);
      }
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.RIGHT) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2 + drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.BOTTOM) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
      path.lineTo(drawEnd.location,canvas.getHeight() - (strokewidth / 2));
      canvas.drawPath(path,progressBarPaint);
    }
    if (drawEnd.place == Place.LEFT) {
      path.moveTo(canvas.getWidth() / 2,strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),strokewidth / 2);
      path.lineTo(canvas.getWidth() - (strokewidth / 2),canvas.getHeight() - strokewidth / 2);
      path.lineTo(strokewidth / 2,canvas.getHeight() - strokewidth / 2);
      path.lineTo((strokewidth / 2),drawEnd.location);
      canvas.drawPath(path,progressBarPaint);
    }
  }
}",0.9974312869252504
160206,"public CustomColourDialog(final Context context){
  super(context);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  this.setContentView(R.layout.customcolourdialog);
  this.setCancelable(false);
  Button closeButton=(Button)this.findViewById(R.id.returnColourDialog);
  closeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  saveButton=(Button)this.findViewById(R.id.shareColourDialog);
  rSeekBar=(SeekBar)findViewById(R.id.rSeekBar);
  rSeekBar.setMax(255);
  rSeekBar.setProgress(111);
  rSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
  gSeekBar=(SeekBar)findViewById(R.id.gSeekBar);
  gSeekBar.setMax(255);
  gSeekBar.setProgress(111);
  gSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
  bSeekBar=(SeekBar)findViewById(R.id.bSeekBar);
  bSeekBar.setMax(255);
  bSeekBar.setProgress(111);
  bSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
}","public CustomColourDialog(final Context context){
  super(context);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  this.setContentView(R.layout.customcolourdialog);
  this.setCancelable(false);
  Button closeButton=(Button)this.findViewById(R.id.returnColourDialog);
  closeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  saveButton=(Button)this.findViewById(R.id.shareColourDialog);
  rSeekBar=(SeekBar)findViewById(R.id.rSeekBar);
  rSeekBar.setMax(255);
  rSeekBar.setProgress(111);
  rSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
  gSeekBar=(SeekBar)findViewById(R.id.gSeekBar);
  gSeekBar.setMax(255);
  gSeekBar.setProgress(111);
  gSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
  bSeekBar=(SeekBar)findViewById(R.id.bSeekBar);
  bSeekBar.setMax(255);
  bSeekBar.setProgress(111);
  bSeekBar.setOnSeekBarChangeListener(rgbOnSeekBarListener());
  calculateRGB();
}",0.99079754601227
160207,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fragmentManager=getFragmentManager();
  squareFragment=new SquareFragment();
  fragmentManager.beginTransaction().replace(R.id.content_frame,squareFragment).commit();
  setContentView(R.layout.activity_main);
  title=drawerTitle=getTitle();
  partTitle=getResources().getStringArray(R.array.drawer_titel);
  descriptions=getResources().getStringArray(R.array.drawer_descriptions);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawerListView=(ListView)findViewById(R.id.left_drawer);
  drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  BaseAdapter adapter=new BaseAdapter(){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View item=convertView;
      View headerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_header_layout,parent,false);
      TextView title=(TextView)headerItem.findViewById(R.id.lv_list_hdr);
      View styleItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_style,parent,false);
      CheckBox box=(CheckBox)styleItem.findViewById(R.id.checkBox1);
      View githubItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_github,parent,false);
      TextView githublink=(TextView)githubItem.findViewById(R.id.textView1);
      View signerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_signer,parent,false);
      View imageItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_image,parent,false);
      ImageView imagePreview=(ImageView)imageItem.findViewById(R.id.imageView1);
      TextView imageDesc=(TextView)imageItem.findViewById(R.id.imagetag);
switch (position) {
case 0:
        title.setText(""String_Node_Str"");
      return headerItem;
case 11:
    title.setText(""String_Node_Str"");
  return headerItem;
case 12:
box.setText(R.string.opacity);
box.setChecked(squareFragment.squareProgressBar.isOpacity());
box.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
squareFragment.squareProgressBar.setOpacity(isChecked);
}
}
);
return styleItem;
case 13:
title.setText(""String_Node_Str"");
return headerItem;
case 14:
imagePreview.setImageResource(R.drawable.city);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.city);
}
}
);
return imageItem;
case 15:
imagePreview.setImageResource(R.drawable.millennium_stadium);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.millennium_stadium);
}
}
);
return imageItem;
case 16:
imagePreview.setImageResource(R.drawable.edinburgh);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.edinburgh);
}
}
);
return imageItem;
case 17:
imagePreview.setImageResource(R.drawable.holyroodpark);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.holyroodpark);
}
}
);
return imageItem;
case 18:
title.setText(""String_Node_Str"");
return headerItem;
case 19:
String text=""String_Node_Str"";
githublink.setText(Html.fromHtml(text));
githubItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return githubItem;
case 20:
signerItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return signerItem;
default :
break;
}
ArrayList<Integer> colourArray=new ArrayList<Integer>();
colourArray.add(color.holo_blue_bright);
colourArray.add(color.holo_blue_dark);
colourArray.add(color.holo_blue_light);
colourArray.add(color.holo_green_dark);
colourArray.add(color.holo_green_light);
colourArray.add(color.holo_orange_dark);
colourArray.add(color.holo_orange_light);
colourArray.add(color.holo_purple);
colourArray.add(color.holo_red_dark);
colourArray.add(color.holo_red_light);
if (position <= 10) {
Context context=getApplicationContext();
item=LayoutInflater.from(context).inflate(R.layout.lv_colour,parent,false);
View colourView=item.findViewById(R.id.colour_preview);
final Integer integer=colourArray.get(position - 1);
colourView.setBackgroundColor(context.getResources().getColor(integer));
item.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
squareFragment.squareProgressBar.setHoloColor(integer);
selectItem(position);
}
}
);
TextView textView=(TextView)item.findViewById(R.id.colour_name);
textView.setText(getName(position - 1));
}
return item;
}
@Override public long getItemId(int position){
return position;
}
@Override public Object getItem(int position){
return position;
}
@Override public int getCount(){
return 21;
}
}
;
drawerListView.setAdapter(adapter);
drawerListView.setOnItemClickListener(new DrawerItemClickListener());
getActionBar().setDisplayHomeAsUpEnabled(true);
getActionBar().setHomeButtonEnabled(true);
drawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
@Override public void onDrawerClosed(View view){
getActionBar().setTitle(title);
invalidateOptionsMenu();
}
@Override public void onDrawerOpened(View drawerView){
getActionBar().setTitle(drawerTitle);
invalidateOptionsMenu();
}
}
;
drawerLayout.setDrawerListener(drawerToggle);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fragmentManager=getFragmentManager();
  squareFragment=new SquareFragment();
  fragmentManager.beginTransaction().replace(R.id.content_frame,squareFragment).commit();
  setContentView(R.layout.activity_main);
  title=drawerTitle=getTitle();
  partTitle=getResources().getStringArray(R.array.drawer_titel);
  descriptions=getResources().getStringArray(R.array.drawer_descriptions);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawerListView=(ListView)findViewById(R.id.left_drawer);
  drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  BaseAdapter adapter=new BaseAdapter(){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View item=convertView;
      View headerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_header_layout,parent,false);
      TextView title=(TextView)headerItem.findViewById(R.id.lv_list_hdr);
      View styleItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_style,parent,false);
      CheckBox box=(CheckBox)styleItem.findViewById(R.id.checkBox1);
      View githubItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_github,parent,false);
      TextView githublink=(TextView)githubItem.findViewById(R.id.textView1);
      View signerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_signer,parent,false);
      View imageItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_image,parent,false);
      ImageView imagePreview=(ImageView)imageItem.findViewById(R.id.imageView1);
      TextView imageDesc=(TextView)imageItem.findViewById(R.id.imagetag);
switch (position) {
case 0:
        title.setText(""String_Node_Str"");
      return headerItem;
case 11:
    title.setText(""String_Node_Str"");
  return headerItem;
case 12:
box.setText(R.string.opacity);
box.setChecked(squareFragment.squareProgressBar.isOpacity());
box.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
squareFragment.squareProgressBar.setOpacity(isChecked);
}
}
);
return styleItem;
case 13:
title.setText(""String_Node_Str"");
return headerItem;
case 14:
imagePreview.setImageResource(R.drawable.city);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.city);
}
}
);
return imageItem;
case 15:
imagePreview.setImageResource(R.drawable.millennium_stadium);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.millennium_stadium);
}
}
);
return imageItem;
case 16:
imagePreview.setImageResource(R.drawable.edinburgh);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.edinburgh);
}
}
);
return imageItem;
case 17:
imagePreview.setImageResource(R.drawable.holyroodpark);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.holyroodpark);
}
}
);
return imageItem;
case 18:
title.setText(""String_Node_Str"");
return headerItem;
case 19:
String text=""String_Node_Str"";
githublink.setText(Html.fromHtml(text));
githubItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return githubItem;
case 20:
signerItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return signerItem;
default :
break;
}
ArrayList<Integer> colourArray=new ArrayList<Integer>();
colourArray.add(color.holo_blue_bright);
colourArray.add(color.holo_blue_dark);
colourArray.add(color.holo_blue_light);
colourArray.add(color.holo_green_dark);
colourArray.add(color.holo_green_light);
colourArray.add(color.holo_orange_dark);
colourArray.add(color.holo_orange_light);
colourArray.add(color.holo_purple);
colourArray.add(color.holo_red_dark);
colourArray.add(color.holo_red_light);
if (position <= 10) {
Context context=getApplicationContext();
item=LayoutInflater.from(context).inflate(R.layout.lv_colour,parent,false);
View colourView=item.findViewById(R.id.colour_preview);
final Integer integer=colourArray.get(position - 1);
colourView.setBackgroundColor(context.getResources().getColor(integer));
item.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
squareFragment.squareProgressBar.setHoloColor(integer);
selectItem(position);
lastPosition=position;
}
}
);
TextView textView=(TextView)item.findViewById(R.id.colour_name);
textView.setText(getName(position - 1));
}
return item;
}
@Override public long getItemId(int position){
return position;
}
@Override public Object getItem(int position){
return position;
}
@Override public int getCount(){
return 21;
}
}
;
drawerListView.setAdapter(adapter);
drawerListView.setOnItemClickListener(new DrawerItemClickListener());
getActionBar().setDisplayHomeAsUpEnabled(true);
getActionBar().setHomeButtonEnabled(true);
drawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
@Override public void onDrawerClosed(View view){
getActionBar().setTitle(title);
invalidateOptionsMenu();
}
@Override public void onDrawerOpened(View drawerView){
getActionBar().setTitle(drawerTitle);
invalidateOptionsMenu();
}
}
;
drawerLayout.setDrawerListener(drawerToggle);
}",0.9980793319415447
160208,"@Override public void onClick(View arg0){
  squareFragment.squareProgressBar.setHoloColor(integer);
  selectItem(position);
}","@Override public void onClick(View arg0){
  squareFragment.squareProgressBar.setHoloColor(integer);
  selectItem(position);
  lastPosition=position;
}",0.9090909090909092
160209,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if ((position != 0) && (position != 11) && (position != 13)&& (position != 17)) {
    selectItem(position);
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if ((position != 0) && (position != 11) && (position != 13)&& (position != 17)) {
    selectItem(position);
  }
 else {
    selectItem(lastPosition);
  }
}",0.9066666666666666
160210,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  View item=convertView;
  View headerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_header_layout,parent,false);
  TextView title=(TextView)headerItem.findViewById(R.id.lv_list_hdr);
  View styleItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_style,parent,false);
  CheckBox box=(CheckBox)styleItem.findViewById(R.id.checkBox1);
  View githubItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_github,parent,false);
  TextView githublink=(TextView)githubItem.findViewById(R.id.textView1);
  View signerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_signer,parent,false);
  View imageItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_image,parent,false);
  ImageView imagePreview=(ImageView)imageItem.findViewById(R.id.imageView1);
  TextView imageDesc=(TextView)imageItem.findViewById(R.id.imagetag);
switch (position) {
case 0:
    title.setText(""String_Node_Str"");
  return headerItem;
case 11:
title.setText(""String_Node_Str"");
return headerItem;
case 12:
box.setText(R.string.opacity);
box.setChecked(squareFragment.squareProgressBar.isOpacity());
box.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
squareFragment.squareProgressBar.setOpacity(isChecked);
}
}
);
return styleItem;
case 13:
title.setText(""String_Node_Str"");
return headerItem;
case 14:
imagePreview.setImageResource(R.drawable.city);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.city);
}
}
);
return imageItem;
case 15:
imagePreview.setImageResource(R.drawable.millennium_stadium);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.millennium_stadium);
}
}
);
return imageItem;
case 16:
imagePreview.setImageResource(R.drawable.edinburgh);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.edinburgh);
}
}
);
return imageItem;
case 17:
imagePreview.setImageResource(R.drawable.holyroodpark);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.holyroodpark);
}
}
);
return imageItem;
case 18:
title.setText(""String_Node_Str"");
return headerItem;
case 19:
String text=""String_Node_Str"";
githublink.setText(Html.fromHtml(text));
githubItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return githubItem;
case 20:
signerItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return signerItem;
default :
break;
}
ArrayList<Integer> colourArray=new ArrayList<Integer>();
colourArray.add(color.holo_blue_bright);
colourArray.add(color.holo_blue_dark);
colourArray.add(color.holo_blue_light);
colourArray.add(color.holo_green_dark);
colourArray.add(color.holo_green_light);
colourArray.add(color.holo_orange_dark);
colourArray.add(color.holo_orange_light);
colourArray.add(color.holo_purple);
colourArray.add(color.holo_red_dark);
colourArray.add(color.holo_red_light);
if (position <= 10) {
Context context=getApplicationContext();
item=LayoutInflater.from(context).inflate(R.layout.lv_colour,parent,false);
View colourView=item.findViewById(R.id.colour_preview);
final Integer integer=colourArray.get(position - 1);
colourView.setBackgroundColor(context.getResources().getColor(integer));
item.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
squareFragment.squareProgressBar.setHoloColor(integer);
selectItem(position);
}
}
);
TextView textView=(TextView)item.findViewById(R.id.colour_name);
textView.setText(getName(position - 1));
}
return item;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  View item=convertView;
  View headerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_header_layout,parent,false);
  TextView title=(TextView)headerItem.findViewById(R.id.lv_list_hdr);
  View styleItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_style,parent,false);
  CheckBox box=(CheckBox)styleItem.findViewById(R.id.checkBox1);
  View githubItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_github,parent,false);
  TextView githublink=(TextView)githubItem.findViewById(R.id.textView1);
  View signerItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_signer,parent,false);
  View imageItem=LayoutInflater.from(getApplicationContext()).inflate(R.layout.lv_image,parent,false);
  ImageView imagePreview=(ImageView)imageItem.findViewById(R.id.imageView1);
  TextView imageDesc=(TextView)imageItem.findViewById(R.id.imagetag);
switch (position) {
case 0:
    title.setText(""String_Node_Str"");
  return headerItem;
case 11:
title.setText(""String_Node_Str"");
return headerItem;
case 12:
box.setText(R.string.opacity);
box.setChecked(squareFragment.squareProgressBar.isOpacity());
box.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
squareFragment.squareProgressBar.setOpacity(isChecked);
}
}
);
return styleItem;
case 13:
title.setText(""String_Node_Str"");
return headerItem;
case 14:
imagePreview.setImageResource(R.drawable.city);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.city);
}
}
);
return imageItem;
case 15:
imagePreview.setImageResource(R.drawable.millennium_stadium);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.millennium_stadium);
}
}
);
return imageItem;
case 16:
imagePreview.setImageResource(R.drawable.edinburgh);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.edinburgh);
}
}
);
return imageItem;
case 17:
imagePreview.setImageResource(R.drawable.holyroodpark);
imageDesc.setText(""String_Node_Str"");
imageItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
squareFragment.squareProgressBar.setImage(R.drawable.holyroodpark);
}
}
);
return imageItem;
case 18:
title.setText(""String_Node_Str"");
return headerItem;
case 19:
String text=""String_Node_Str"";
githublink.setText(Html.fromHtml(text));
githubItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return githubItem;
case 20:
signerItem.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
startActivity(browserIntent);
}
}
);
return signerItem;
default :
break;
}
ArrayList<Integer> colourArray=new ArrayList<Integer>();
colourArray.add(color.holo_blue_bright);
colourArray.add(color.holo_blue_dark);
colourArray.add(color.holo_blue_light);
colourArray.add(color.holo_green_dark);
colourArray.add(color.holo_green_light);
colourArray.add(color.holo_orange_dark);
colourArray.add(color.holo_orange_light);
colourArray.add(color.holo_purple);
colourArray.add(color.holo_red_dark);
colourArray.add(color.holo_red_light);
if (position <= 10) {
Context context=getApplicationContext();
item=LayoutInflater.from(context).inflate(R.layout.lv_colour,parent,false);
View colourView=item.findViewById(R.id.colour_preview);
final Integer integer=colourArray.get(position - 1);
colourView.setBackgroundColor(context.getResources().getColor(integer));
item.setOnClickListener(new OnClickListener(){
@Override public void onClick(View arg0){
squareFragment.squareProgressBar.setHoloColor(integer);
selectItem(position);
lastPosition=position;
}
}
);
TextView textView=(TextView)item.findViewById(R.id.colour_name);
textView.setText(getName(position - 1));
}
return item;
}",0.9973813047933509
160211,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final SquareProgressBar squareProgressBar=(SquareProgressBar)findViewById(R.id.subi2);
  squareProgressBar.setImage(R.drawable.house);
  squareProgressBar.setColor(getApplicationContext().getResources().getColor(android.R.color.holo_blue_dark));
  Button change=(Button)findViewById(R.id.button2);
  change.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (darth) {
        squareProgressBar.setImage(R.drawable.house);
        darth=false;
      }
 else {
        squareProgressBar.setImage(R.drawable.darth);
        darth=true;
      }
    }
  }
);
  SeekBar seekBar=(SeekBar)findViewById(R.id.seekBar1);
  seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      squareProgressBar.setProgress(progress);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final SquareProgressBar squareProgressBar=(SquareProgressBar)findViewById(R.id.subi2);
  squareProgressBar.setImage(R.drawable.house);
  squareProgressBar.setColor(getApplicationContext().getResources().getColor(android.R.color.holo_blue_dark));
  squareProgressBar.setProgress(90);
  Button change=(Button)findViewById(R.id.button2);
  change.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (darth) {
        squareProgressBar.setImage(R.drawable.house);
        darth=false;
      }
 else {
        squareProgressBar.setImage(R.drawable.darth);
        darth=true;
      }
    }
  }
);
  SeekBar seekBar=(SeekBar)findViewById(R.id.seekBar1);
  seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      squareProgressBar.setProgress(progress);
    }
  }
);
}",0.984602580108198
160212,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final SquareProgressBar squareProgressBar=(SquareProgressBar)findViewById(R.id.subi2);
  squareProgressBar.setImage(R.drawable.house);
  squareProgressBar.setColor(getApplicationContext().getResources().getColor(android.R.color.holo_blue_dark));
  squareProgressBar.setProgress(90);
  Button change=(Button)findViewById(R.id.button2);
  change.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (darth) {
        squareProgressBar.setImage(R.drawable.house);
        darth=false;
      }
 else {
        squareProgressBar.setImage(R.drawable.darth);
        darth=true;
      }
    }
  }
);
  SeekBar seekBar=(SeekBar)findViewById(R.id.seekBar1);
  seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      squareProgressBar.setProgress(progress);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final SquareProgressBar squareProgressBar=(SquareProgressBar)findViewById(R.id.subi2);
  squareProgressBar.setImage(R.drawable.house);
  squareProgressBar.setColor(getApplicationContext().getResources().getColor(android.R.color.holo_blue_dark));
  squareProgressBar.setProgress(25);
  Button change=(Button)findViewById(R.id.button2);
  change.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (darth) {
        squareProgressBar.setImage(R.drawable.house);
        darth=false;
      }
 else {
        squareProgressBar.setImage(R.drawable.darth);
        darth=true;
      }
    }
  }
);
  SeekBar seekBar=(SeekBar)findViewById(R.id.seekBar1);
  seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      squareProgressBar.setProgress(progress);
    }
  }
);
}",0.9983606557377048
160213,"private CustomViewGroup(Context context){
  super(context);
  this.setOrientation(VERTICAL);
  this.setGravity(Gravity.CENTER);
  this.setWeightSum(3);
  this.textView=new TextView(context);
  this.imageView=new ImageView(context);
  this.button=new Button(context);
  LinearLayout.LayoutParams layoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0,1);
  this.textView.setLayoutParams(layoutParams);
  this.imageView.setLayoutParams(layoutParams);
  this.button.setLayoutParams(layoutParams);
  this.textView.setGravity(Gravity.CENTER);
  this.imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
  this.button.setText(""String_Node_Str"");
  this.button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      view.getContext().startActivity(i);
    }
  }
);
  this.addView(this.textView);
  this.addView(this.imageView);
  this.addView(this.button);
}","private CustomViewGroup(Context context){
  super(context);
  this.setOrientation(VERTICAL);
  this.textView=new TextView(context);
  this.imageView=new ImageView(context);
  this.button=new Button(context);
  LinearLayout.LayoutParams layoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  this.textView.setLayoutParams(layoutParams);
  this.imageView.setLayoutParams(layoutParams);
  this.button.setLayoutParams(layoutParams);
  this.textView.setGravity(Gravity.CENTER);
  this.imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
  this.imageView.setAdjustViewBounds(true);
  this.button.setText(""String_Node_Str"");
  this.button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      view.getContext().startActivity(i);
    }
  }
);
  this.addView(this.textView);
  this.addView(this.imageView);
  this.addView(this.button);
}",0.924234821876568
160214,"@Override protected boolean getChildStaticTransformation(View child,Transformation t){
  FancyCoverFlowItemWrapper item=(FancyCoverFlowItemWrapper)child;
  if (android.os.Build.VERSION.SDK_INT >= 16) {
    item.invalidate();
  }
  final int coverFlowCenter=this.getWidth() / 2;
  final int childCenter=item.getLeft() + item.getWidth() / 2;
  final int childWidth=item.getWidth();
  final int childHeight=item.getWidth();
  final float effectsAmount=Math.min(1.0f,Math.max(-1.0f,(1.0f / this.actionDistance) * (childCenter - coverFlowCenter)));
  final int rotationAngle=(int)(-effectsAmount * this.maxRotation);
  final float zoomAmount=1 - this.maxScaleDown * Math.abs(effectsAmount);
  final float alphaAmount=(this.unselectedAlpha - 1) * Math.abs(effectsAmount) + 1;
  final float saturationAmount=(this.unselectedSaturation - 1) * Math.abs(effectsAmount) + 1;
  t.clear();
  t.setTransformationType(Transformation.TYPE_BOTH);
  t.setAlpha(alphaAmount);
  item.setSaturation(saturationAmount);
  final Matrix imageMatrix=t.getMatrix();
  this.transformationCamera.save();
  this.transformationCamera.rotateY(rotationAngle);
  this.transformationCamera.getMatrix(imageMatrix);
  this.transformationCamera.restore();
  imageMatrix.preTranslate(-childWidth / 2.0f,-childHeight / 2.0f);
  imageMatrix.postScale(zoomAmount,zoomAmount);
  imageMatrix.postTranslate(childWidth / 2.0f,childHeight / 2.0f);
  return true;
}","@Override protected boolean getChildStaticTransformation(View child,Transformation t){
  FancyCoverFlowItemWrapper item=(FancyCoverFlowItemWrapper)child;
  if (android.os.Build.VERSION.SDK_INT >= 16) {
    item.invalidate();
  }
  final int coverFlowCenter=this.getWidth() / 2;
  final int childWidth=item.getWidth();
  final int childHeight=item.getHeight();
  final int childCenter=item.getLeft() + childWidth / 2;
  final float effectsAmount=Math.min(1.0f,Math.max(-1.0f,(1.0f / this.actionDistance) * (childCenter - coverFlowCenter)));
  final int rotationAngle=(int)(-effectsAmount * this.maxRotation);
  final float zoomAmount=1 - this.maxScaleDown * Math.abs(effectsAmount);
  final float alphaAmount=(this.unselectedAlpha - 1) * Math.abs(effectsAmount) + 1;
  final float saturationAmount=(this.unselectedSaturation - 1) * Math.abs(effectsAmount) + 1;
  t.clear();
  t.setTransformationType(Transformation.TYPE_BOTH);
  t.setAlpha(alphaAmount);
  item.setSaturation(saturationAmount);
  final Matrix imageMatrix=t.getMatrix();
  this.transformationCamera.save();
  this.transformationCamera.rotateY(rotationAngle);
  this.transformationCamera.getMatrix(imageMatrix);
  this.transformationCamera.restore();
  imageMatrix.preTranslate(-childWidth / 2.0f,-childHeight / 2.0f);
  imageMatrix.postScale(zoomAmount,zoomAmount);
  imageMatrix.postTranslate(childWidth / 2.0f,childHeight / 2.0f);
  return true;
}",0.9371024734982332
160215,"@Override protected boolean getChildStaticTransformation(View child,Transformation t){
  FancyCoverFlowItemWrapper item=(FancyCoverFlowItemWrapper)child;
  if (android.os.Build.VERSION.SDK_INT >= 16) {
    item.invalidate();
  }
  final int coverFlowWidth=this.getWidth();
  final int coverFlowCenter=coverFlowWidth / 2;
  final int childWidth=item.getWidth();
  final int childHeight=item.getHeight();
  final int childCenter=item.getLeft() + childWidth / 2;
  final int actionDistance=(this.actionDistance == ACTION_DISTANCE_AUTO) ? (int)((coverFlowWidth) / 2.0f) : this.actionDistance;
  final float effectsAmount=Math.min(1.0f,Math.max(-1.0f,(1.0f / actionDistance) * (childCenter - coverFlowCenter)));
  final int rotationAngle=(int)(-effectsAmount * this.maxRotation);
  final float zoomAmount=1 - this.unselectedScale * Math.abs(effectsAmount);
  final float alphaAmount=(this.unselectedAlpha - 1) * Math.abs(effectsAmount) + 1;
  final float saturationAmount=(this.unselectedSaturation - 1) * Math.abs(effectsAmount) + 1;
  t.clear();
  t.setTransformationType(Transformation.TYPE_BOTH);
  t.setAlpha(alphaAmount);
  item.setSaturation(saturationAmount);
  final Matrix imageMatrix=t.getMatrix();
  this.transformationCamera.save();
  this.transformationCamera.rotateY(rotationAngle);
  this.transformationCamera.getMatrix(imageMatrix);
  this.transformationCamera.restore();
  final float translateX=childWidth / 2.0f;
  float translateY=0;
switch (this.scaleDownGravity) {
case Top:
    translateY=0;
  break;
case Center:
translateY=childHeight / 2.0f;
break;
case Bottom:
translateY=childHeight;
break;
}
imageMatrix.preTranslate(-translateX,-translateY);
imageMatrix.postScale(zoomAmount,zoomAmount);
imageMatrix.postTranslate(translateX,translateY);
return true;
}","@Override protected boolean getChildStaticTransformation(View child,Transformation t){
  FancyCoverFlowItemWrapper item=(FancyCoverFlowItemWrapper)child;
  if (android.os.Build.VERSION.SDK_INT >= 16) {
    item.invalidate();
  }
  final int coverFlowWidth=this.getWidth();
  final int coverFlowCenter=coverFlowWidth / 2;
  final int childWidth=item.getWidth();
  final int childHeight=item.getHeight();
  final int childCenter=item.getLeft() + childWidth / 2;
  final int actionDistance=(this.actionDistance == ACTION_DISTANCE_AUTO) ? (int)((coverFlowWidth) / 2.0f) : this.actionDistance;
  final float effectsAmount=Math.min(1.0f,Math.max(-1.0f,(1.0f / actionDistance) * (childCenter - coverFlowCenter)));
  final int rotationAngle=(int)(-effectsAmount * this.maxRotation);
  final float zoomAmount=(this.unselectedScale - 1) * Math.abs(effectsAmount) + 1;
  final float alphaAmount=(this.unselectedAlpha - 1) * Math.abs(effectsAmount) + 1;
  final float saturationAmount=(this.unselectedSaturation - 1) * Math.abs(effectsAmount) + 1;
  t.clear();
  t.setTransformationType(Transformation.TYPE_BOTH);
  t.setAlpha(alphaAmount);
  item.setSaturation(saturationAmount);
  final Matrix imageMatrix=t.getMatrix();
  this.transformationCamera.save();
  this.transformationCamera.rotateY(rotationAngle);
  this.transformationCamera.getMatrix(imageMatrix);
  this.transformationCamera.restore();
  final float translateX=childWidth / 2.0f;
  float translateY=0;
switch (this.scaleDownGravity) {
case Top:
    translateY=0;
  break;
case Center:
translateY=childHeight / 2.0f;
break;
case Bottom:
translateY=childHeight;
break;
}
imageMatrix.preTranslate(-translateX,-translateY);
imageMatrix.postScale(zoomAmount,zoomAmount);
imageMatrix.postTranslate(translateX,translateY);
return true;
}",0.9854014598540146
160216,"protected ReplicatorConfiguration.Builder makeConfig(boolean push,boolean pull,boolean continuous,Database db,URI targetURI) throws URISyntaxException {
  URLEndpoint endpoint=new URLEndpoint(targetURI.getHost(),targetURI.getPort(),targetURI.getPath(),false);
  ReplicatorConfiguration.Builder builder=new ReplicatorConfiguration.Builder(this.db,endpoint);
  builder.setReplicatorType(push && pull ? PUSH_AND_PULL : (push ? PUSH : PULL));
  builder.setContinuous(continuous);
  return builder;
}","protected ReplicatorConfiguration.Builder makeConfig(boolean push,boolean pull,boolean continuous,Database db,URI targetURI) throws URISyntaxException {
  URLEndpoint endpoint=new URLEndpoint(targetURI.getHost(),targetURI.getPort(),targetURI.getPath(),false);
  ReplicatorConfiguration.Builder builder=new ReplicatorConfiguration.Builder(db,endpoint);
  builder.setReplicatorType(push && pull ? PUSH_AND_PULL : (push ? PUSH : PULL));
  builder.setContinuous(continuous);
  return builder;
}",0.9949238578680204
160217,"/** 
 * in DatabaseInternal_Tests.m -(void) test18_FindMissingRevisions
 */
public void test18_FindMissingRevisions() throws CouchbaseLiteException {
  RevisionList revs=new RevisionList();
  assertEquals(0,database.getStore().findMissingRevisions(revs));
  Map<String,Object> prop1=new HashMap<String,Object>();
  prop1.put(""String_Node_Str"",""String_Node_Str"");
  prop1.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc1r1=putDoc(prop1);
  Map<String,Object> prop2=new HashMap<String,Object>();
  prop2.put(""String_Node_Str"",""String_Node_Str"");
  prop2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc2r1=putDoc(prop2);
  Map<String,Object> prop3=new HashMap<String,Object>();
  prop3.put(""String_Node_Str"",""String_Node_Str"");
  prop3.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc3r1=putDoc(prop3);
  Map<String,Object> prop4=new HashMap<String,Object>();
  prop4.put(""String_Node_Str"",""String_Node_Str"");
  prop4.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc4r1=putDoc(prop4);
  Map<String,Object> prop5=new HashMap<String,Object>();
  prop5.put(""String_Node_Str"",""String_Node_Str"");
  prop5.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc5r1=putDoc(prop5);
  Map<String,Object> prop1r2=new HashMap<String,Object>();
  prop1r2.put(""String_Node_Str"",""String_Node_Str"");
  prop1r2.put(""String_Node_Str"",doc1r1.getRevID());
  prop1r2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc1r2=putDoc(prop1r2);
  Map<String,Object> prop2r2=new HashMap<String,Object>();
  prop2r2.put(""String_Node_Str"",""String_Node_Str"");
  prop2r2.put(""String_Node_Str"",doc2r1.getRevID());
  prop2r2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc2r2=putDoc(prop2r2);
  Map<String,Object> prop1r3=new HashMap<String,Object>();
  prop1r3.put(""String_Node_Str"",""String_Node_Str"");
  prop1r3.put(""String_Node_Str"",doc1r2.getRevID());
  prop1r3.put(""String_Node_Str"",true);
  RevisionInternal doc1r3=putDoc(prop1r3);
  RevisionInternal revToFind1=new RevisionInternal(""String_Node_Str"",""String_Node_Str"",false);
  RevisionInternal revToFind2=new RevisionInternal(""String_Node_Str"",doc2r2.getRevID(),false);
  RevisionInternal revToFind3=new RevisionInternal(""String_Node_Str"",""String_Node_Str"",false);
  revs=new RevisionList();
  revs.add(revToFind1);
  revs.add(revToFind2);
  revs.add(revToFind3);
  assertEquals(1,database.getStore().findMissingRevisions(revs));
  assertEquals(2,revs.size());
  assertTrue(revs.contains(revToFind1));
  assertFalse(revs.contains(revToFind2));
  assertTrue(revs.contains(revToFind3));
  AtomicBoolean haveBodies=new AtomicBoolean();
  List<String> revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,0,haveBodies);
  assertEquals(2,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  assertTrue(revIDs.contains(doc1r1.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,1,haveBodies);
  assertEquals(1,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind3,0,haveBodies);
  assertNull(revIDs);
}","/** 
 * in DatabaseInternal_Tests.m -(void) test18_FindMissingRevisions
 */
public void test18_FindMissingRevisions() throws CouchbaseLiteException {
  RevisionList revs=new RevisionList();
  assertEquals(0,database.getStore().findMissingRevisions(revs));
  Map<String,Object> prop1=new HashMap<String,Object>();
  prop1.put(""String_Node_Str"",""String_Node_Str"");
  prop1.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc1r1=putDoc(prop1);
  Map<String,Object> prop2=new HashMap<String,Object>();
  prop2.put(""String_Node_Str"",""String_Node_Str"");
  prop2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc2r1=putDoc(prop2);
  Map<String,Object> prop3=new HashMap<String,Object>();
  prop3.put(""String_Node_Str"",""String_Node_Str"");
  prop3.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc3r1=putDoc(prop3);
  Map<String,Object> prop4=new HashMap<String,Object>();
  prop4.put(""String_Node_Str"",""String_Node_Str"");
  prop4.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc4r1=putDoc(prop4);
  Map<String,Object> prop5=new HashMap<String,Object>();
  prop5.put(""String_Node_Str"",""String_Node_Str"");
  prop5.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc5r1=putDoc(prop5);
  Map<String,Object> prop1r2=new HashMap<String,Object>();
  prop1r2.put(""String_Node_Str"",""String_Node_Str"");
  prop1r2.put(""String_Node_Str"",doc1r1.getRevID());
  prop1r2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc1r2=putDoc(prop1r2);
  Map<String,Object> prop2r2=new HashMap<String,Object>();
  prop2r2.put(""String_Node_Str"",""String_Node_Str"");
  prop2r2.put(""String_Node_Str"",doc2r1.getRevID());
  prop2r2.put(""String_Node_Str"",""String_Node_Str"");
  RevisionInternal doc2r2=putDoc(prop2r2);
  Map<String,Object> prop1r3=new HashMap<String,Object>();
  prop1r3.put(""String_Node_Str"",""String_Node_Str"");
  prop1r3.put(""String_Node_Str"",doc1r2.getRevID());
  prop1r3.put(""String_Node_Str"",true);
  RevisionInternal doc1r3=putDoc(prop1r3);
  RevisionInternal revToFind1=new RevisionInternal(""String_Node_Str"",""String_Node_Str"",false);
  RevisionInternal revToFind2=new RevisionInternal(""String_Node_Str"",doc2r2.getRevID(),false);
  RevisionInternal revToFind3=new RevisionInternal(""String_Node_Str"",""String_Node_Str"",false);
  revs=new RevisionList();
  revs.add(revToFind1);
  revs.add(revToFind2);
  revs.add(revToFind3);
  assertEquals(1,database.getStore().findMissingRevisions(revs));
  assertEquals(2,revs.size());
  assertTrue(revs.contains(revToFind1));
  assertFalse(revs.contains(revToFind2));
  assertTrue(revs.contains(revToFind3));
  AtomicBoolean haveBodies=new AtomicBoolean();
  List<String> revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,0,haveBodies,false);
  assertEquals(2,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  assertTrue(revIDs.contains(doc1r1.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,1,haveBodies,false);
  assertEquals(1,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind3,0,haveBodies,false);
  assertNull(revIDs);
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,0,haveBodies,true);
  assertEquals(2,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  assertTrue(revIDs.contains(doc1r1.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind1,1,haveBodies,true);
  assertEquals(1,revIDs.size());
  assertTrue(revIDs.contains(doc1r2.getRevID()));
  revIDs=database.getStore().getPossibleAncestorRevisionIDs(revToFind3,0,haveBodies,true);
  assertNull(revIDs);
}",0.9229873344009316
160218,"@Test public void testAddObjectsToExistingArray(){
  Array array=new Array();
  populateData(array);
  Document doc=createDocument(""String_Node_Str"");
  doc.set(""String_Node_Str"",array);
  doc=save(doc);
  array=doc.getArray(""String_Node_Str"");
  assertNotNull(array);
  assertEquals(12,array.count());
  populateData(array);
  assertEquals(24,array.count());
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(24,a.count());
      assertEquals(true,a.getObject(12 + 0));
      assertEquals(false,a.getObject(12 + 1));
      assertEquals(""String_Node_Str"",a.getObject(12 + 2));
      assertEquals(0,a.getObject(12 + 3));
      assertEquals(1,a.getObject(12 + 4));
      assertEquals(-1,a.getObject(12 + 5));
      assertEquals(1.1,a.getObject(12 + 6));
      assertEquals(kArrayTestDate,a.getObject(12 + 7));
      assertEquals(null,a.getObject(12 + 8));
      Dictionary subdict=(Dictionary)a.getObject(12 + 9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(12 + 10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(12 + 11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}","@Test public void testAddObjectsToExistingArray(){
  Array array=new Array();
  populateData(array);
  Document doc=createDocument(""String_Node_Str"");
  doc.set(""String_Node_Str"",array);
  doc=save(doc);
  array=doc.getArray(""String_Node_Str"");
  assertNotNull(array);
  assertEquals(12,array.count());
  populateData(array);
  assertEquals(24,array.count());
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(24,a.count());
      assertEquals(true,a.getObject(12 + 0));
      assertEquals(false,a.getObject(12 + 1));
      assertEquals(""String_Node_Str"",a.getObject(12 + 2));
      assertEquals(0,((Number)a.getObject(12 + 3)).intValue());
      assertEquals(1,((Number)a.getObject(12 + 4)).intValue());
      assertEquals(-1,((Number)a.getObject(12 + 5)).intValue());
      assertEquals(1.1,a.getObject(12 + 6));
      assertEquals(kArrayTestDate,a.getObject(12 + 7));
      assertEquals(null,a.getObject(12 + 8));
      Dictionary subdict=(Dictionary)a.getObject(12 + 9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(12 + 10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(12 + 11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}",0.9808801213960546
160219,"@Test public void testEnumeratingArray(){
  Array array=new Array();
  for (int i=0; i < 20; i++) {
    array.add(i);
  }
  List<Object> content=array.toList();
  List<Object> result=new ArrayList<>();
  int counter=0;
  for (  Object item : array) {
    assertNotNull(item);
    result.add(item);
    counter++;
  }
  assertEquals(content,result);
  assertEquals(array.count(),counter);
  array.remove(1);
  array.add(20);
  array.add(21);
  content=array.toList();
  result=new ArrayList<>();
  for (  Object item : array) {
    assertNotNull(item);
    result.add(item);
  }
  assertEquals(content,result);
  Document doc=createDocument(""String_Node_Str"");
  doc.set(""String_Node_Str"",array);
  final List<Object> c=content;
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array array){
      List<Object> r=new ArrayList<Object>();
      for (      Object item : array) {
        assertNotNull(item);
        r.add(item);
      }
      assertEquals(c,r);
    }
  }
);
}","@Test public void testEnumeratingArray(){
  Array array=new Array();
  for (int i=0; i < 20; i++) {
    array.add(i);
  }
  List<Object> content=array.toList();
  List<Object> result=new ArrayList<>();
  int counter=0;
  for (  Object item : array) {
    assertNotNull(item);
    result.add(item);
    counter++;
  }
  assertEquals(content,result);
  assertEquals(array.count(),counter);
  array.remove(1);
  array.add(20);
  array.add(21);
  content=array.toList();
  result=new ArrayList<>();
  for (  Object item : array) {
    assertNotNull(item);
    result.add(item);
  }
  assertEquals(content,result);
  Document doc=createDocument(""String_Node_Str"");
  doc.set(""String_Node_Str"",array);
  final List<Object> c=content;
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array array){
      List<Object> r=new ArrayList<Object>();
      for (      Object item : array) {
        assertNotNull(item);
        r.add(item);
      }
      assertEquals(c.toString(),r.toString());
    }
  }
);
}",0.9893617021276596
160220,"@Test public void testGetNumber(){
  Array array=new Array();
  populateData(array);
  assertEquals(12,array.count());
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertNull(a.getNumber(0));
      assertNull(a.getNumber(1));
      assertNull(a.getNumber(2));
      assertEquals(0,a.getNumber(3));
      assertEquals(1,a.getNumber(4));
      assertEquals(-1,a.getNumber(5));
      assertEquals(1.1,a.getNumber(6));
      assertNull(a.getNumber(7));
      assertNull(a.getNumber(8));
      assertNull(a.getNumber(9));
      assertNull(a.getNumber(10));
      assertNull(a.getNumber(11));
    }
  }
);
}","@Test public void testGetNumber(){
  Array array=new Array();
  populateData(array);
  assertEquals(12,array.count());
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertNull(a.getNumber(0));
      assertNull(a.getNumber(1));
      assertNull(a.getNumber(2));
      assertEquals(0,((Number)a.getNumber(3)).intValue());
      assertEquals(1,((Number)a.getNumber(4)).intValue());
      assertEquals(-1,((Number)a.getNumber(5)).intValue());
      assertEquals(1.1,a.getNumber(6));
      assertNull(a.getNumber(7));
      assertNull(a.getNumber(8));
      assertNull(a.getNumber(9));
      assertNull(a.getNumber(10));
      assertNull(a.getNumber(11));
    }
  }
);
}",0.9580838323353292
160221,"@Override public void validate(Array array){
  List<Object> r=new ArrayList<Object>();
  for (  Object item : array) {
    assertNotNull(item);
    r.add(item);
  }
  assertEquals(c,r);
}","@Override public void validate(Array array){
  List<Object> r=new ArrayList<Object>();
  for (  Object item : array) {
    assertNotNull(item);
    r.add(item);
  }
  assertEquals(c.toString(),r.toString());
}",0.9444444444444444
160222,"@Test public void testSetGetFloatNumbers(){
  Array array=new Array();
  array.add(1.00);
  array.add(1.49);
  array.add(1.50);
  array.add(1.51);
  array.add(1.99);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(1,a.getInt(0));
      assertEquals(1L,a.getLong(0));
      assertEquals(1.00F,a.getFloat(0),0.0F);
      assertEquals(1.00,a.getDouble(0),0.0);
      assertEquals(1.49,a.getObject(1));
      assertEquals(1.49,a.getNumber(1));
      assertEquals(1,a.getInt(1));
      assertEquals(1L,a.getLong(1));
      assertEquals(1.49F,a.getFloat(1),0.0F);
      assertEquals(1.49,a.getDouble(1),0.0);
      assertEquals(1,a.getInt(2));
      assertEquals(1L,a.getLong(2));
      assertEquals(1.50F,a.getFloat(2),0.0F);
      assertEquals(1.50,a.getDouble(2),0.0);
      assertEquals(1.51,a.getObject(3));
      assertEquals(1.51,a.getNumber(3));
      assertEquals(1,a.getInt(3));
      assertEquals(1L,a.getLong(3));
      assertEquals(1.51F,a.getFloat(3),0.0F);
      assertEquals(1.51,a.getDouble(3),0.0);
      assertEquals(1.99,a.getObject(4));
      assertEquals(1.99,a.getNumber(4));
      assertEquals(1,a.getInt(4));
      assertEquals(1L,a.getLong(4));
      assertEquals(1.99F,a.getFloat(4),0.0F);
      assertEquals(1.99,a.getDouble(4),0.0);
    }
  }
);
}","@Test public void testSetGetFloatNumbers(){
  Array array=new Array();
  array.add(1.00);
  array.add(1.49);
  array.add(1.50);
  array.add(1.51);
  array.add(1.99);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(1.00,((Number)a.getObject(0)).doubleValue(),0.0);
      assertEquals(1.00,a.getNumber(0).doubleValue(),0.0);
      assertEquals(1,a.getInt(0));
      assertEquals(1L,a.getLong(0));
      assertEquals(1.00F,a.getFloat(0),0.0F);
      assertEquals(1.00,a.getDouble(0),0.0);
      assertEquals(1.49,a.getObject(1));
      assertEquals(1.49,a.getNumber(1));
      assertEquals(1,a.getInt(1));
      assertEquals(1L,a.getLong(1));
      assertEquals(1.49F,a.getFloat(1),0.0F);
      assertEquals(1.49,a.getDouble(1),0.0);
      assertEquals(1.50,((Number)a.getObject(2)).doubleValue(),0.0);
      assertEquals(1.50,a.getNumber(2).doubleValue(),0.0);
      assertEquals(1,a.getInt(2));
      assertEquals(1L,a.getLong(2));
      assertEquals(1.50F,a.getFloat(2),0.0F);
      assertEquals(1.50,a.getDouble(2),0.0);
      assertEquals(1.51,a.getObject(3));
      assertEquals(1.51,a.getNumber(3));
      assertEquals(1,a.getInt(3));
      assertEquals(1L,a.getLong(3));
      assertEquals(1.51F,a.getFloat(3),0.0F);
      assertEquals(1.51,a.getDouble(3),0.0);
      assertEquals(1.99,a.getObject(4));
      assertEquals(1.99,a.getNumber(4));
      assertEquals(1,a.getInt(4));
      assertEquals(1L,a.getLong(4));
      assertEquals(1.99F,a.getFloat(4),0.0F);
      assertEquals(1.99,a.getDouble(4),0.0);
    }
  }
);
}",0.9161755075311068
160223,"@Test public void testAddObjects(){
  Array array=new Array();
  populateData(array);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(12,a.count());
      assertEquals(true,a.getObject(0));
      assertEquals(false,a.getObject(1));
      assertEquals(""String_Node_Str"",a.getObject(2));
      assertEquals(0,a.getObject(3));
      assertEquals(1,a.getObject(4));
      assertEquals(-1,a.getObject(5));
      assertEquals(1.1,a.getObject(6));
      assertEquals(kArrayTestDate,a.getObject(7));
      assertEquals(null,a.getObject(8));
      Dictionary subdict=(Dictionary)a.getObject(9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}","@Test public void testAddObjects(){
  Array array=new Array();
  populateData(array);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(12,a.count());
      assertEquals(true,a.getObject(0));
      assertEquals(false,a.getObject(1));
      assertEquals(""String_Node_Str"",a.getObject(2));
      assertEquals(0,((Number)a.getObject(3)).intValue());
      assertEquals(1,((Number)a.getObject(4)).intValue());
      assertEquals(-1,((Number)a.getObject(5)).intValue());
      assertEquals(1.1,a.getObject(6));
      assertEquals(kArrayTestDate,a.getObject(7));
      assertEquals(null,a.getObject(8));
      Dictionary subdict=(Dictionary)a.getObject(9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}",0.976897689768977
160224,"@Test public void testSetObject(){
  List<Object> data=arrayOfAllTypes();
  Array array=new Array();
  for (int i=0; i < data.size(); i++)   array.add(null);
  for (int i=0; i < data.size(); i++)   array.set(i,data.get(i));
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(12,a.count());
      assertEquals(true,a.getObject(0));
      assertEquals(false,a.getObject(1));
      assertEquals(""String_Node_Str"",a.getObject(2));
      assertEquals(0,a.getObject(3));
      assertEquals(1,a.getObject(4));
      assertEquals(-1,a.getObject(5));
      assertEquals(1.1,a.getObject(6));
      assertEquals(kArrayTestDate,a.getObject(7));
      assertEquals(null,a.getObject(8));
      Dictionary subdict=(Dictionary)a.getObject(9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}","@Test public void testSetObject(){
  List<Object> data=arrayOfAllTypes();
  Array array=new Array();
  for (int i=0; i < data.size(); i++)   array.add(null);
  for (int i=0; i < data.size(); i++)   array.set(i,data.get(i));
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(12,a.count());
      assertEquals(true,a.getObject(0));
      assertEquals(false,a.getObject(1));
      assertEquals(""String_Node_Str"",a.getObject(2));
      assertEquals(0,((Number)a.getObject(3)).intValue());
      assertEquals(1,((Number)a.getObject(4)).intValue());
      assertEquals(-1,((Number)a.getObject(5)).intValue());
      assertEquals(1.1,a.getObject(6));
      assertEquals(kArrayTestDate,a.getObject(7));
      assertEquals(null,a.getObject(8));
      Dictionary subdict=(Dictionary)a.getObject(9);
      Map<String,Object> expectedMap=new HashMap<>();
      expectedMap.put(""String_Node_Str"",""String_Node_Str"");
      assertEquals(expectedMap,subdict.toMap());
      Array subarray=(Array)a.getObject(10);
      List<Object> expected=new ArrayList<>();
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      expected.add(""String_Node_Str"");
      assertEquals(expected,subarray.toList());
      Blob blob=(Blob)a.getObject(11);
      assertTrue(Arrays.equals(kArrayTestBlob.getBytes(),blob.getContent()));
      assertEquals(kArrayTestBlob,new String(blob.getContent()));
    }
  }
);
}",0.9790209790209792
160225,"@Test public void testSetGetMinMaxNumbers(){
  Array array=new Array();
  array.add(Integer.MIN_VALUE);
  array.add(Integer.MAX_VALUE);
  array.add(Long.MIN_VALUE);
  array.add(Long.MAX_VALUE);
  array.add(Float.MIN_VALUE);
  array.add(Float.MAX_VALUE);
  array.add(Double.MIN_VALUE);
  array.add(Double.MAX_VALUE);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(Integer.MIN_VALUE,a.getNumber(0));
      assertEquals(Integer.MAX_VALUE,a.getNumber(1));
      assertEquals(Integer.MIN_VALUE,a.getObject(0));
      assertEquals(Integer.MAX_VALUE,a.getObject(1));
      assertEquals(Integer.MIN_VALUE,a.getInt(0));
      assertEquals(Integer.MAX_VALUE,a.getInt(1));
      assertEquals(Float.MIN_VALUE,a.getNumber(4));
      assertEquals(Float.MAX_VALUE,a.getNumber(5));
      assertEquals(Float.MIN_VALUE,a.getObject(4));
      assertEquals(Float.MAX_VALUE,a.getObject(5));
      assertEquals(Float.MIN_VALUE,a.getFloat(4),0.0f);
      assertEquals(Float.MAX_VALUE,a.getFloat(5),0.0f);
      assertEquals(Double.MIN_VALUE,a.getNumber(6));
      assertEquals(Double.MAX_VALUE,a.getNumber(7));
      assertEquals(Double.MIN_VALUE,a.getObject(6));
      assertEquals(Double.MAX_VALUE,a.getObject(7));
      assertEquals(Double.MIN_VALUE,a.getDouble(6),0.0f);
      assertEquals(Double.MAX_VALUE,a.getDouble(7),0.0f);
    }
  }
);
}","@Test public void testSetGetMinMaxNumbers(){
  Array array=new Array();
  array.add(Integer.MIN_VALUE);
  array.add(Integer.MAX_VALUE);
  array.add(Long.MIN_VALUE);
  array.add(Long.MAX_VALUE);
  array.add(Float.MIN_VALUE);
  array.add(Float.MAX_VALUE);
  array.add(Double.MIN_VALUE);
  array.add(Double.MAX_VALUE);
  Document doc=createDocument(""String_Node_Str"");
  save(doc,""String_Node_Str"",array,new Validator<Array>(){
    @Override public void validate(    Array a){
      assertEquals(Integer.MIN_VALUE,a.getNumber(0).intValue());
      assertEquals(Integer.MAX_VALUE,a.getNumber(1).intValue());
      assertEquals(Integer.MIN_VALUE,((Number)a.getObject(0)).intValue());
      assertEquals(Integer.MAX_VALUE,((Number)a.getObject(1)).intValue());
      assertEquals(Integer.MIN_VALUE,a.getInt(0));
      assertEquals(Integer.MAX_VALUE,a.getInt(1));
      assertEquals(Long.MIN_VALUE,a.getNumber(2));
      assertEquals(Long.MAX_VALUE,a.getNumber(3));
      assertEquals(Long.MIN_VALUE,a.getObject(2));
      assertEquals(Long.MAX_VALUE,a.getObject(3));
      assertEquals(Long.MIN_VALUE,a.getLong(2));
      assertEquals(Long.MAX_VALUE,a.getLong(3));
      assertEquals(Float.MIN_VALUE,a.getNumber(4));
      assertEquals(Float.MAX_VALUE,a.getNumber(5));
      assertEquals(Float.MIN_VALUE,a.getObject(4));
      assertEquals(Float.MAX_VALUE,a.getObject(5));
      assertEquals(Float.MIN_VALUE,a.getFloat(4),0.0f);
      assertEquals(Float.MAX_VALUE,a.getFloat(5),0.0f);
      assertEquals(Double.MIN_VALUE,a.getNumber(6));
      assertEquals(Double.MAX_VALUE,a.getNumber(7));
      assertEquals(Double.MIN_VALUE,a.getObject(6));
      assertEquals(Double.MAX_VALUE,a.getObject(7));
      assertEquals(Double.MIN_VALUE,a.getDouble(6),0.0f);
      assertEquals(Double.MAX_VALUE,a.getDouble(7),0.0f);
    }
  }
);
}",0.8637751985339035
160226,"protected void openDB(){
  assertNull(db);
  DatabaseConfiguration options=new DatabaseConfiguration();
  options.setDirectory(dir);
  db=new Database(kDatabaseName,options);
  assertNotNull(db);
}","protected void openDB(){
  assertNull(db);
  DatabaseConfiguration options=new DatabaseConfiguration(this.context);
  options.setDirectory(dir);
  db=new Database(kDatabaseName,options);
  assertNotNull(db);
}",0.8817733990147784
160227,"protected void openDB(ConflictResolver resolver){
  assertNull(db);
  DatabaseConfiguration options=new DatabaseConfiguration();
  options.setDirectory(dir);
  options.setConflictResolver(resolver);
  db=new Database(kDatabaseName,options);
  assertNotNull(db);
}","protected void openDB(ConflictResolver resolver){
  assertNull(db);
  DatabaseConfiguration options=new DatabaseConfiguration(this.context);
  options.setDirectory(dir);
  options.setConflictResolver(resolver);
  db=new Database(kDatabaseName,options);
  assertNotNull(db);
}",0.9368029739776952
160228,"/** 
 * Implementing for Iterable. Currently iterator() returns keys. Not Key,Value pair.
 * @return Iterator<String>
 */
public Iterator<String> iterator(){
  if (properties != null) {
    return properties.keySet().iterator();
  }
 else {
    return root == null ? null : root.iterator();
  }
}","/** 
 * Implementing for Iterable. Currently iterator() returns keys. Not Key,Value pair.
 * @return the iterator of type {@code String}.
 */
public Iterator<String> iterator(){
  if (properties != null) {
    return properties.keySet().iterator();
  }
 else {
    return root == null ? null : root.iterator();
  }
}",0.8758169934640523
160229,"/** 
 * Runs the query. The returning a result set that enumerates result rows one at a time. You can run the query any number of times, and you can even have multiple ResultSet active at once. <br/> The results come from a snapshot of the database taken at the moment the run() method is called, so they will not reflect any changes made to the database afterwards.
 * @return the ResultSet for the query result.
 * @throws CouchbaseLiteException if there is an error when running the query.
 */
public ResultSet run() throws CouchbaseLiteException {
  if (c4query == null)   check();
  try {
    C4QueryOptions options=new C4QueryOptions();
    C4QueryEnumerator c4enum=c4query.run(options,null);
    return new ResultSet(this,c4enum);
  }
 catch (  LiteCoreException e) {
    throw LiteCoreBridge.convertException(e);
  }
}","/** 
 * Runs the query. The returning a result set that enumerates result rows one at a time. You can run the query any number of times, and you can even have multiple ResultSet active at once. <p> The results come from a snapshot of the database taken at the moment the run() method is called, so they will not reflect any changes made to the database afterwards. </p>
 * @return the ResultSet for the query result.
 * @throws CouchbaseLiteException if there is an error when running the query.
 */
public ResultSet run() throws CouchbaseLiteException {
  if (c4query == null)   check();
  try {
    C4QueryOptions options=new C4QueryOptions();
    C4QueryEnumerator c4enum=c4query.run(options,null);
    return new ResultSet(this,c4enum);
  }
 catch (  LiteCoreException e) {
    throw LiteCoreBridge.convertException(e);
  }
}",0.9945619335347432
160230,"@Override public double getDouble(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof Number)     return ((Number)obj).doubleValue();
 else     return 0.0;
  }
 else   return root == null ? 0.0 : root.get(key).asDouble();
}","@Override public double getDouble(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof Number)     return ((Number)obj).doubleValue();
 else     return 0.0;
  }
 else {
    if (root == null)     return 0.0;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLNumber)       return flvalue.asDouble();
 else       return 0.0;
    }
  }
}",0.7211267605633803
160231,"@Override public List<Object> getArray(String key){
  if (properties != null)   return (List<Object>)properties.get(key);
 else   return root == null ? null : root.get(key).asArray();
}","@Override public List<Object> getArray(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof List<?>)     return (List<Object>)obj;
 else     return null;
  }
 else {
    if (root == null)     return null;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLArray)       return flvalue.asArray();
 else       return null;
    }
  }
}",0.4323432343234323
160232,"@Override public float getFloat(String key){
  if (properties != null)   return (float)properties.get(key);
 else   return root == null ? 0.0F : root.get(key).asFloat();
}","@Override public float getFloat(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof Number)     return ((Number)obj).floatValue();
 else     return 0.0F;
  }
 else {
    if (root == null)     return 0.0F;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLNumber)       return flvalue.asFloat();
 else       return 0.0F;
    }
  }
}",0.3602693602693603
160233,"@Override public boolean getBoolean(String key){
  if (properties != null)   return (boolean)properties.get(key);
 else   return root == null ? false : root.get(key).asBool();
}","@Override public boolean getBoolean(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof Boolean)     return ((Boolean)obj).booleanValue();
 else     if (obj != null && obj instanceof String)     return Boolean.valueOf((String)obj);
 else     return false;
  }
 else {
    if (root == null)     return false;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLBoolean)       return flvalue.asBool();
 else       return false;
    }
  }
}",0.3181818181818182
160234,"@Override public Date getDate(String key){
  if (properties != null)   return DateUtils.fromJson((String)properties.get(key));
 else   return root == null ? null : DateUtils.fromJson(root.get(key).asString());
}","@Override public Date getDate(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof String)     return DateUtils.fromJson((String)obj);
 else     return null;
  }
 else {
    if (root == null)     return null;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLString)       return DateUtils.fromJson(flvalue.asString());
 else       return null;
    }
  }
}",0.4528875379939209
160235,"@Override public String getString(String key){
  if (properties != null)   return (String)properties.get(key);
 else   return root == null ? null : root.get(key).asString();
}","@Override public String getString(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof String)     return (String)obj;
 else     return null;
  }
 else {
    if (root == null)     return null;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLString)       return flvalue.asString();
 else       return null;
    }
  }
}",0.3754266211604095
160236,"@Override public int getInt(String key){
  if (properties != null)   return (int)properties.get(key);
 else   return root == null ? 0 : root.get(key).asInt();
}","@Override public int getInt(String key){
  if (properties != null) {
    Object obj=properties.get(key);
    if (obj != null && obj instanceof Number)     return ((Number)obj).intValue();
 else     return 0;
  }
 else {
    if (root == null)     return 0;
 else {
      FLValue flvalue=root.get(key);
      if (flvalue.getType() == kFLNumber)       return flvalue.asInt();
 else       return 0;
    }
  }
}",0.4063604240282685
160237,"public void testViewWithCompoundKeys() throws CouchbaseLiteException {
  View view=database.getView(""String_Node_Str"");
  if (view != null) {
    view.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        if (document.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(document.get(""String_Node_Str"")) && ""String_Node_Str"".equals(document.get(""String_Node_Str"")) && document.get(""String_Node_Str"") != null && document.get(""String_Node_Str"") != null && document.get(""String_Node_Str"") == null && document.get(""String_Node_Str"") != null) {
          HashMap<String,Object> value=new HashMap<String,Object>();
          value.put(""String_Node_Str"",document.get(""String_Node_Str""));
          emitter.emit(Arrays.asList(document.get(""String_Node_Str""),document.get(""String_Node_Str"")),null);
        }
      }
    }
,""String_Node_Str"");
  }
  database.runInTransaction(new TransactionalTask(){
    @Override public boolean run(){
      try {
        for (int i=0; i < 500; i++) {
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",new Date());
          props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",i));
          props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",i));
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          Document doc=database.createDocument();
          doc.putProperties(props);
        }
        Map<String,Object> props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        Document doc=database.createDocument();
        doc.putProperties(props);
        props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        doc=database.createDocument();
        doc.putProperties(props);
        props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        doc=database.createDocument();
        doc.putProperties(props);
      }
 catch (      CouchbaseLiteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
      return true;
    }
  }
);
  for (int i=0; i < 2; i++) {
    String deviceIMEI=""String_Node_Str"";
    Query orderedQuery=view.createQuery();
    orderedQuery.setStartKey(Arrays.asList(deviceIMEI,null));
    orderedQuery.setEndKey(Arrays.asList(deviceIMEI,new HashMap<String,Object>()));
    Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
    QueryEnumerator results=orderedQuery.run();
    int counter=0;
    for (Iterator<QueryRow> it=results; it.hasNext(); ) {
      QueryRow row=it.next();
      Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",counter,row.getDocumentId(),""String_Node_Str""));
      counter++;
    }
    assertEquals(500,counter);
    Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
  }
}","public void testViewWithCompoundKeys() throws CouchbaseLiteException {
  View view=database.getView(""String_Node_Str"");
  if (view != null) {
    view.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        if (document.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(document.get(""String_Node_Str"")) && ""String_Node_Str"".equals(document.get(""String_Node_Str"")) && document.get(""String_Node_Str"") != null && document.get(""String_Node_Str"") != null && document.get(""String_Node_Str"") == null && document.get(""String_Node_Str"") != null) {
          HashMap<String,Object> value=new HashMap<String,Object>();
          value.put(""String_Node_Str"",document.get(""String_Node_Str""));
          emitter.emit(Arrays.asList(document.get(""String_Node_Str""),document.get(""String_Node_Str"")),null);
        }
      }
    }
,""String_Node_Str"");
  }
  final int num_docs=200;
  database.runInTransaction(new TransactionalTask(){
    @Override public boolean run(){
      try {
        for (int i=0; i < num_docs; i++) {
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",new Date());
          props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",i));
          props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",i));
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          props.put(""String_Node_Str"",""String_Node_Str"");
          Document doc=database.createDocument();
          doc.putProperties(props);
        }
        Map<String,Object> props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        Document doc=database.createDocument();
        doc.putProperties(props);
        props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        doc=database.createDocument();
        doc.putProperties(props);
        props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",new Date());
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",1));
        props.put(""String_Node_Str"",""String_Node_Str"");
        props.put(""String_Node_Str"",""String_Node_Str"");
        doc=database.createDocument();
        doc.putProperties(props);
      }
 catch (      CouchbaseLiteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
      return true;
    }
  }
);
  for (int i=0; i < 2; i++) {
    String deviceIMEI=""String_Node_Str"";
    Query orderedQuery=view.createQuery();
    orderedQuery.setStartKey(Arrays.asList(deviceIMEI,null));
    orderedQuery.setEndKey(Arrays.asList(deviceIMEI,new HashMap<String,Object>()));
    Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
    QueryEnumerator results=orderedQuery.run();
    int counter=0;
    for (Iterator<QueryRow> it=results; it.hasNext(); ) {
      QueryRow row=it.next();
      Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",counter,row.getDocumentId(),""String_Node_Str""));
      counter++;
    }
    assertEquals(num_docs,counter);
    Log.v(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
  }
}",0.9939194324803649
160238,"public void _testMultipleLiveQueries(String prefix){
  final int batch_size=500;
  final int n_batches=5;
  LiveQuery lvu=null;
  LiveQuery lvu2=null;
  try {
    View vu=database.getView(prefix + ""String_Node_Str"");
    vu.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",document.get(""String_Node_Str""));
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    Query qvu=vu.createQuery();
    lvu=qvu.toLiveQuery();
    List<Object> keys=new ArrayList<Object>();
    Map<String,Object> key=new HashMap<String,Object>();
    key.put(""String_Node_Str"",batch_size - 1);
    keys.add(key);
    lvu.setKeys(keys);
    final CountDownLatch latch=new CountDownLatch(1);
    lvu.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
        assertNull(event.getError());
        QueryEnumerator rows=event.getRows();
        assertNotNull(rows);
        Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",rows.getCount(),rows.getSequenceNumber()));
        while (rows.hasNext()) {
          QueryRow row=rows.next();
          String str=row.getDocument().getProperties().toString();
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",str));
        }
        if (event.getRows().getSequenceNumber() >= batch_size * n_batches) {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
          latch.countDown();
        }
 else {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
        }
      }
    }
);
    lvu.start();
    View vu2=database.getView(prefix + ""String_Node_Str"");
    vu2.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",""String_Node_Str"");
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    lvu2=vu2.createQuery().toLiveQuery();
    lvu2.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
      }
    }
);
    lvu2.start();
    for (int i=0; i < n_batches; i++) {
      Log.w(TAG,""String_Node_Str"");
      createDocuments(database,batch_size);
    }
    Log.w(TAG,""String_Node_Str"");
    try {
      assertTrue(latch.await(60,TimeUnit.SECONDS));
    }
 catch (    InterruptedException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    if (lvu2 != null)     lvu2.stop();
    if (lvu != null)     lvu.stop();
  }
}","public void _testMultipleLiveQueries(String prefix){
  final int batch_size=50;
  final int n_batches=4;
  LiveQuery lvu=null;
  LiveQuery lvu2=null;
  try {
    View vu=database.getView(prefix + ""String_Node_Str"");
    vu.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",document.get(""String_Node_Str""));
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    Query qvu=vu.createQuery();
    lvu=qvu.toLiveQuery();
    List<Object> keys=new ArrayList<Object>();
    Map<String,Object> key=new HashMap<String,Object>();
    key.put(""String_Node_Str"",batch_size - 1);
    keys.add(key);
    lvu.setKeys(keys);
    final CountDownLatch latch=new CountDownLatch(1);
    lvu.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
        assertNull(event.getError());
        QueryEnumerator rows=event.getRows();
        assertNotNull(rows);
        Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",rows.getCount(),rows.getSequenceNumber()));
        while (rows.hasNext()) {
          QueryRow row=rows.next();
          String str=row.getDocument().getProperties().toString();
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",str));
        }
        if (event.getRows().getSequenceNumber() >= batch_size * n_batches) {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
          latch.countDown();
        }
 else {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
        }
      }
    }
);
    lvu.start();
    View vu2=database.getView(prefix + ""String_Node_Str"");
    vu2.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",""String_Node_Str"");
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    lvu2=vu2.createQuery().toLiveQuery();
    lvu2.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
      }
    }
);
    lvu2.start();
    for (int i=0; i < n_batches; i++) {
      Log.w(TAG,""String_Node_Str"");
      createDocuments(database,batch_size);
    }
    Log.w(TAG,""String_Node_Str"");
    try {
      assertTrue(latch.await(60,TimeUnit.SECONDS));
    }
 catch (    InterruptedException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    if (lvu2 != null)     lvu2.stop();
    if (lvu != null)     lvu.stop();
  }
}",0.999442689949842
160239,"/** 
 * Reproduce a severe issue where the pusher stops working because it's remoteRequestExecutor is full of tasks which are all blocked trying to add more tasks to the queue.
 */
public void testRetryQueueDeadlock() throws Exception {
  com.couchbase.lite.replicator.RemoteRequestRetry.RETRY_DELAY_MS=5;
  PersistentCookieJar cookieStore=database.getPersistentCookieStore();
  CouchbaseLiteHttpClientFactory factory=new CouchbaseLiteHttpClientFactory(cookieStore);
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  try {
    MockResponse response=new MockResponse().setResponseCode(503);
    WrappedSmartMockResponse wrapped=new WrappedSmartMockResponse(response);
    wrapped.setDelayMs(5);
    wrapped.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,wrapped);
    server.start();
    URL url=new URL(String.format(Locale.ENGLISH,""String_Node_Str"",server.url(""String_Node_Str"").url(),""String_Node_Str""));
    Map<String,Object> requestBody=new HashMap<String,Object>();
    requestBody.put(""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> requestHeaders=new HashMap<String,Object>();
    int numRequests=10;
    final CountDownLatch received503Error=new CountDownLatch(numRequests);
    RemoteRequestCompletion completionBlock=new RemoteRequestCompletion(){
      @Override public void onCompletion(      Response httpResponse,      Object result,      Throwable e){
        if (e instanceof RemoteRequestResponseException) {
          RemoteRequestResponseException htre=(RemoteRequestResponseException)e;
          if (htre.getCode() == 503) {
            received503Error.countDown();
          }
        }
      }
    }
;
    ScheduledExecutorService requestExecutorService=Executors.newScheduledThreadPool(5);
    ScheduledExecutorService workExecutorService=Executors.newSingleThreadScheduledExecutor();
    List<Future> requestFutures=new ArrayList<Future>();
    for (int i=0; i < numRequests; i++) {
      RemoteRequestRetry request=new RemoteRequestRetry(RemoteRequestRetry.RemoteRequestType.REMOTE_REQUEST,requestExecutorService,workExecutorService,factory,""String_Node_Str"",url,true,true,requestBody,null,database,requestHeaders,completionBlock);
      Future future=request.submit();
      requestFutures.add(future);
    }
    for (    Future future : requestFutures)     future.get();
    boolean success=received503Error.await(120,TimeUnit.SECONDS);
    assertTrue(success);
    Utils.shutdownAndAwaitTermination(requestExecutorService);
    Utils.shutdownAndAwaitTermination(workExecutorService);
  }
  finally {
    assertTrue(MockHelper.shutdown(server,dispatcher));
  }
}","/** 
 * Reproduce a severe issue where the pusher stops working because it's remoteRequestExecutor is full of tasks which are all blocked trying to add more tasks to the queue.
 */
public void testRetryQueueDeadlock() throws Exception {
  int ORG_RETRY_DELAY_MS=com.couchbase.lite.replicator.RemoteRequestRetry.RETRY_DELAY_MS;
  try {
    com.couchbase.lite.replicator.RemoteRequestRetry.RETRY_DELAY_MS=5;
    PersistentCookieJar cookieStore=database.getPersistentCookieStore();
    CouchbaseLiteHttpClientFactory factory=new CouchbaseLiteHttpClientFactory(cookieStore);
    MockDispatcher dispatcher=new MockDispatcher();
    MockWebServer server=MockHelper.getMockWebServer(dispatcher);
    dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
    try {
      int numRequests=10;
      for (int i=0; i < numRequests * 5; i++) {
        MockResponse response=new MockResponse().setResponseCode(503);
        WrappedSmartMockResponse wrapped=new WrappedSmartMockResponse(response);
        wrapped.setDelayMs(5);
        dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,wrapped);
      }
      server.start();
      URL url=new URL(String.format(Locale.ENGLISH,""String_Node_Str"",server.url(""String_Node_Str"").url(),""String_Node_Str""));
      Map<String,Object> requestBody=new HashMap<String,Object>();
      requestBody.put(""String_Node_Str"",""String_Node_Str"");
      Map<String,Object> requestHeaders=new HashMap<String,Object>();
      final CountDownLatch received503Error=new CountDownLatch(numRequests);
      RemoteRequestCompletion completionBlock=new RemoteRequestCompletion(){
        @Override public void onCompletion(        Response httpResponse,        Object result,        Throwable e){
          if (e instanceof RemoteRequestResponseException) {
            RemoteRequestResponseException htre=(RemoteRequestResponseException)e;
            if (htre.getCode() == 503) {
              received503Error.countDown();
            }
          }
        }
      }
;
      ScheduledExecutorService requestExecutorService=Executors.newScheduledThreadPool(5);
      ScheduledExecutorService workExecutorService=Executors.newSingleThreadScheduledExecutor();
      List<Future> requestFutures=new ArrayList<Future>();
      for (int i=0; i < numRequests; i++) {
        RemoteRequestRetry request=new RemoteRequestRetry(RemoteRequestRetry.RemoteRequestType.REMOTE_REQUEST,requestExecutorService,workExecutorService,factory,""String_Node_Str"",url,true,true,requestBody,null,database,requestHeaders,completionBlock);
        Future future=request.submit();
        requestFutures.add(future);
      }
      for (      Future future : requestFutures)       future.get();
      boolean success=received503Error.await(120,TimeUnit.SECONDS);
      assertTrue(success);
      Utils.shutdownAndAwaitTermination(requestExecutorService);
      Utils.shutdownAndAwaitTermination(workExecutorService);
    }
  finally {
      assertTrue(MockHelper.shutdown(server,dispatcher));
    }
  }
  finally {
    com.couchbase.lite.replicator.RemoteRequestRetry.RETRY_DELAY_MS=ORG_RETRY_DELAY_MS;
  }
}",0.9096170212765956
160240,"public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  char[] chars=new char[(int)(2.1 * 1024 * 1024)];
  Arrays.fill(chars,'a');
  String str=new String(chars);
  props.put(""String_Node_Str"",str);
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),str);
}","public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  final String content;
{
    char[] chars=new char[2 * 1024 * 1024 + 10 * 1024];
    Arrays.fill(chars,'a');
    content=new String(chars);
    chars=null;
  }
  props.put(""String_Node_Str"",content);
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),content);
}",0.9093904448105437
160241,"public void testAndroid2MLimit() throws Exception {
  char[] chars=new char[3 * 1024 * 1024];
  Arrays.fill(chars,'a');
  final String content=new String(chars);
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",content);
  Document doc=database.createDocument();
  assertNotNull(doc.putProperties(props));
  String docId=doc.getId();
  database.close();
  database=manager.getDatabase(DEFAULT_TEST_DB);
  doc=database.getDocument(docId);
  assertNotNull(doc);
  Map<String,Object> properties=doc.getProperties();
  assertNotNull(properties);
  assertEquals(content,properties.get(""String_Node_Str""));
}","public void testAndroid2MLimit() throws Exception {
  final String content;
{
    char[] chars=new char[2 * 1024 * 1024 + 10 * 1024];
    Arrays.fill(chars,'a');
    content=new String(chars);
    chars=null;
  }
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",content);
  Document doc=database.createDocument();
  assertNotNull(doc.putProperties(props));
  String docId=doc.getId();
  database.close();
  database=manager.getDatabase(DEFAULT_TEST_DB);
  doc=database.getDocument(docId);
  assertNotNull(doc);
  Map<String,Object> properties=doc.getProperties();
  assertNotNull(properties);
  assertEquals(content,properties.get(""String_Node_Str""));
}",0.9421487603305784
160242,"public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  char[] chars=new char[3 * 1024 * 1024];
  Arrays.fill(chars,'a');
  String str=new String(chars);
  props.put(""String_Node_Str"",str);
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),str);
}","public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  char[] chars=new char[(int)(2.1 * 1024 * 1024)];
  Arrays.fill(chars,'a');
  String str=new String(chars);
  props.put(""String_Node_Str"",str);
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),str);
}",0.9903930131004368
160243,"@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(Locale.ENGLISH,""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!responseQueue.isEmpty()) {
        SmartMockResponse smartMockResponse=null;
synchronized (lockResponseQueue) {
          smartMockResponse=responseQueue.take();
          if (smartMockResponse.isSticky()) {
            responseQueue.put(smartMockResponse);
          }
        }
        if (smartMockResponse.delayMs() > 0) {
          long delay=smartMockResponse.delayMs();
          while (delay > 0 && !shutdown) {
            Thread.sleep(100);
            delay-=100;
          }
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        addHeaders(mockResponse);
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
 else {
        MockResponse mockResponse=new MockResponse();
        mockResponse.setStatus(""String_Node_Str"");
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
    }
  }
  MockResponse mockResponse=new MockResponse();
  mockResponse.setStatus(""String_Node_Str"");
  recordedReponseMap.put(request,mockResponse);
  return mockResponse;
}","@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(Locale.ENGLISH,""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!isResponseQueueEmpty(responseQueue)) {
        SmartMockResponse smartMockResponse=null;
synchronized (lockResponseQueue) {
          smartMockResponse=responseQueue.take();
          if (smartMockResponse.isSticky()) {
            responseQueue.put(smartMockResponse);
          }
        }
        if (smartMockResponse.delayMs() > 0) {
          long delay=smartMockResponse.delayMs();
          while (delay > 0 && !shutdown) {
            Thread.sleep(100);
            delay-=100;
          }
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        addHeaders(mockResponse);
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
 else {
        MockResponse mockResponse=new MockResponse();
        mockResponse.setStatus(""String_Node_Str"");
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
    }
  }
  MockResponse mockResponse=new MockResponse();
  mockResponse.setStatus(""String_Node_Str"");
  recordedReponseMap.put(request,mockResponse);
  return mockResponse;
}",0.9936588459099556
160244,"public void setSticky(boolean isSticky){
  this.isSticky=isSticky;
}","public void setSticky(boolean sticky){
  this.sticky=sticky;
}",0.953846153846154
160245,"@Override public boolean isSticky(){
  return this.isSticky;
}","@Override public boolean isSticky(){
  return this.sticky;
}",0.9836065573770492
160246,"public MockResponse generateMockResponse(RecordedRequest request){
  try {
    MockResponse mockResponse=new MockResponse();
    mockResponse.setBody(""String_Node_Str"");
    mockResponse.setStatus(""String_Node_Str"");
    return mockResponse;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","public MockResponse generateMockResponse(RecordedRequest request){
  Map<String,Object> respDict=new HashMap<String,Object>();
  respDict.put(""String_Node_Str"",0);
  respDict.put(""String_Node_Str"",mockDocs.size());
  List<Object> rows=new ArrayList<Object>();
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    Map<String,Object> doc=new HashMap<String,Object>();
    doc.put(""String_Node_Str"",mockDoc.getDocId());
    doc.put(""String_Node_Str"",mockDoc.getDocId());
    Map<String,Object> value=new HashMap<String,Object>();
    value.put(""String_Node_Str"",mockDoc.getDocRev());
    doc.put(""String_Node_Str"",value);
    if (false) {
      doc.put(""String_Node_Str"",mockDoc.getJsonMap());
    }
    rows.add(doc);
  }
  respDict.put(""String_Node_Str"",rows);
  try {
    MockResponse mockResponse=new MockResponse();
    mockResponse.setBody(Manager.getObjectMapper().writeValueAsString(respDict));
    mockResponse.setStatus(""String_Node_Str"");
    return mockResponse;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}",0.4147204529370134
160247,"@Override public boolean isSticky(){
  return false;
}","@Override public boolean isSticky(){
  return sticky;
}",0.9174311926605504
160248,"protected void addMockDocuments(List<MockDocumentGet.MockDocument> mockDocs){
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    MockDocumentGet mockDocumentGet=new MockDocumentGet(mockDoc);
    dispatcher.enqueueResponse(mockDoc.getDocPathRegex(),mockDocumentGet.generateMockResponse());
  }
}","protected void addMockDocuments(List<MockDocumentGet.MockDocument> mockDocs){
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    MockDocumentGet mockDocumentGet=new MockDocumentGet(mockDoc);
    dispatcher.enqueueResponse(mockDoc.getDocPathRegex(),mockDocumentGet.generateMockResponse());
  }
  MockDocumentAllDocs allDocs=new MockDocumentAllDocs(mockDocs);
  allDocs.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_ALL_DOCS,allDocs);
}",0.7912371134020618
160249,"public void setSticky(boolean isSticky){
  this.isSticky=isSticky;
}","public void setSticky(boolean sticky){
  this.sticky=sticky;
}",0.953846153846154
160250,"@Override public boolean isSticky(){
  return this.isSticky;
}","@Override public boolean isSticky(){
  return this.sticky;
}",0.9836065573770492
160251,"public void failingTestDocumentPropertiesAreImmutable() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map map=(Map)Manager.getObjectMapper().readValue(jsonString,Object.class);
  Document doc=createDocumentWithProperties(database,map);
  boolean firstLevelImmutable=false;
  Map<String,Object> props=doc.getProperties();
  try {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    firstLevelImmutable=true;
  }
  assertTrue(firstLevelImmutable);
  boolean secondLevelImmutable=false;
  Map wikiProps=(Map)props.get(""String_Node_Str"");
  try {
    wikiProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    secondLevelImmutable=true;
  }
  assertTrue(secondLevelImmutable);
  boolean thirdLevelImmutable=false;
  Map evolutionProps=(Map)wikiProps.get(""String_Node_Str"");
  try {
    evolutionProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    thirdLevelImmutable=true;
  }
  assertTrue(thirdLevelImmutable);
}","/** 
 * Note: If nested dictionary or array is immutable, user needs to deep copy which is not convenient. For Java, returning Map object is user friendly. We will not fix this issue.
 */
public void failingTestDocumentPropertiesAreImmutable() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map map=(Map)Manager.getObjectMapper().readValue(jsonString,Object.class);
  Document doc=createDocumentWithProperties(database,map);
  boolean firstLevelImmutable=false;
  Map<String,Object> props=doc.getProperties();
  try {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    firstLevelImmutable=true;
  }
  assertTrue(firstLevelImmutable);
  boolean secondLevelImmutable=false;
  Map wikiProps=(Map)props.get(""String_Node_Str"");
  try {
    wikiProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    secondLevelImmutable=true;
  }
  assertTrue(secondLevelImmutable);
  boolean thirdLevelImmutable=false;
  Map evolutionProps=(Map)wikiProps.get(""String_Node_Str"");
  try {
    evolutionProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    thirdLevelImmutable=true;
  }
  assertTrue(thirdLevelImmutable);
}",0.9335219236209336
160252,"@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(Locale.ENGLISH,""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!responseQueue.isEmpty()) {
        SmartMockResponse smartMockResponse=null;
synchronized (lockResponseQueue) {
          smartMockResponse=responseQueue.take();
          if (smartMockResponse.isSticky()) {
            responseQueue.put(smartMockResponse);
          }
        }
        if (smartMockResponse.delayMs() > 0) {
          long delay=smartMockResponse.delayMs();
          while (delay > 0 && !shutdown) {
            Thread.sleep(100);
            delay-=100;
          }
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        addHeaders(mockResponse);
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
 else {
        MockResponse mockResponse=new MockResponse();
        mockResponse.setStatus(""String_Node_Str"");
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
    }
  }
  MockResponse mockResponse=new MockResponse();
  mockResponse.setStatus(""String_Node_Str"");
  recordedReponseMap.put(request,mockResponse);
  return mockResponse;
}","@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(Locale.ENGLISH,""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!isResponseQueueEmpty(responseQueue)) {
        SmartMockResponse smartMockResponse=null;
synchronized (lockResponseQueue) {
          smartMockResponse=responseQueue.take();
          if (smartMockResponse.isSticky()) {
            responseQueue.put(smartMockResponse);
          }
        }
        if (smartMockResponse.delayMs() > 0) {
          long delay=smartMockResponse.delayMs();
          while (delay > 0 && !shutdown) {
            Thread.sleep(100);
            delay-=100;
          }
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        addHeaders(mockResponse);
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
 else {
        MockResponse mockResponse=new MockResponse();
        mockResponse.setStatus(""String_Node_Str"");
        recordedReponseMap.put(request,mockResponse);
        return mockResponse;
      }
    }
  }
  MockResponse mockResponse=new MockResponse();
  mockResponse.setStatus(""String_Node_Str"");
  recordedReponseMap.put(request,mockResponse);
  return mockResponse;
}",0.9936588459099556
160253,"public void failingTestProvidedMapChangesAreSafe() throws Exception {
  Map<String,Object> originalProps=new HashMap<String,Object>();
  Document doc=createDocumentWithProperties(database,originalProps);
  Map<String,Object> nestedProps=new HashMap<String,Object>();
  nestedProps.put(""String_Node_Str"",""String_Node_Str"");
  UnsavedRevision rev=doc.createRevision();
  rev.getProperties().put(""String_Node_Str"",nestedProps);
  rev.save();
  nestedProps.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",((Map)doc.getProperty(""String_Node_Str"")).get(""String_Node_Str""));
}","/** 
 * NOTE: ** Might Not Be Fixed  Immutability of nested dictionaries might cause performance issue. It is not sure if it worth to fix this.
 */
public void failingTestProvidedMapChangesAreSafe() throws Exception {
  Map<String,Object> originalProps=new HashMap<String,Object>();
  Document doc=createDocumentWithProperties(database,originalProps);
  Map<String,Object> nestedProps=new HashMap<String,Object>();
  nestedProps.put(""String_Node_Str"",""String_Node_Str"");
  UnsavedRevision rev=doc.createRevision();
  rev.getProperties().put(""String_Node_Str"",nestedProps);
  rev.save();
  nestedProps.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",((Map)doc.getProperty(""String_Node_Str"")).get(""String_Node_Str""));
}",0.8895522388059701
160254,"public void setSticky(boolean isSticky){
  this.isSticky=isSticky;
}","public void setSticky(boolean sticky){
  this.sticky=sticky;
}",0.953846153846154
160255,"@Override public boolean isSticky(){
  return this.isSticky;
}","@Override public boolean isSticky(){
  return this.sticky;
}",0.9836065573770492
160256,"public MockResponse generateMockResponse(RecordedRequest request){
  try {
    MockResponse mockResponse=new MockResponse();
    mockResponse.setBody(""String_Node_Str"");
    mockResponse.setStatus(""String_Node_Str"");
    return mockResponse;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","public MockResponse generateMockResponse(RecordedRequest request){
  Map<String,Object> respDict=new HashMap<String,Object>();
  respDict.put(""String_Node_Str"",0);
  respDict.put(""String_Node_Str"",mockDocs.size());
  List<Object> rows=new ArrayList<Object>();
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    Map<String,Object> doc=new HashMap<String,Object>();
    doc.put(""String_Node_Str"",mockDoc.getDocId());
    doc.put(""String_Node_Str"",mockDoc.getDocId());
    Map<String,Object> value=new HashMap<String,Object>();
    value.put(""String_Node_Str"",mockDoc.getDocRev());
    doc.put(""String_Node_Str"",value);
    if (false) {
      doc.put(""String_Node_Str"",mockDoc.getJsonMap());
    }
    rows.add(doc);
  }
  respDict.put(""String_Node_Str"",rows);
  try {
    MockResponse mockResponse=new MockResponse();
    mockResponse.setBody(Manager.getObjectMapper().writeValueAsString(respDict));
    mockResponse.setStatus(""String_Node_Str"");
    return mockResponse;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}",0.4147204529370134
160257,"@Override public boolean isSticky(){
  return false;
}","@Override public boolean isSticky(){
  return sticky;
}",0.9174311926605504
160258,"protected void addMockDocuments(List<MockDocumentGet.MockDocument> mockDocs){
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    MockDocumentGet mockDocumentGet=new MockDocumentGet(mockDoc);
    dispatcher.enqueueResponse(mockDoc.getDocPathRegex(),mockDocumentGet.generateMockResponse());
  }
}","protected void addMockDocuments(List<MockDocumentGet.MockDocument> mockDocs){
  for (  MockDocumentGet.MockDocument mockDoc : mockDocs) {
    MockDocumentGet mockDocumentGet=new MockDocumentGet(mockDoc);
    dispatcher.enqueueResponse(mockDoc.getDocPathRegex(),mockDocumentGet.generateMockResponse());
  }
  MockDocumentAllDocs allDocs=new MockDocumentAllDocs(mockDocs);
  allDocs.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_ALL_DOCS,allDocs);
}",0.7912371134020618
160259,"public void setSticky(boolean isSticky){
  this.isSticky=isSticky;
}","public void setSticky(boolean sticky){
  this.sticky=sticky;
}",0.953846153846154
160260,"@Override public boolean isSticky(){
  return this.isSticky;
}","@Override public boolean isSticky(){
  return this.sticky;
}",0.9836065573770492
160261,"public void testDeepCloneWithJsonParser() throws Exception {
  Map<String,Object> map1=new HashMap<String,Object>();
  Object[] objs={new String(""String_Node_Str""),new String(""String_Node_Str"")};
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<Object> list=new ArrayList<Object>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  int[] ints={1,2};
  map1.put(""String_Node_Str"",objs);
  map1.put(""String_Node_Str"",ints);
  map1.put(""String_Node_Str"",map);
  map1.put(""String_Node_Str"",list);
  Map<String,Object> deepMap1=DeepClone.deepClone(map1);
  ObjectMapper mapper=new ObjectMapper();
  String str1=mapper.writeValueAsString(map1);
  String str2=mapper.writeValueAsString(deepMap1);
  assertEquals(str1,str2);
  assertTrue(str1.equals(str2));
  ((Map)deepMap1.get(""String_Node_Str"")).put(""String_Node_Str"",""String_Node_Str"");
  str1=mapper.writeValueAsString(map1);
  str2=mapper.writeValueAsString(deepMap1);
  assertFalse(str1.equals(str2));
}","public void testDeepCloneWithJsonParser() throws Exception {
  Map<String,Object> map1=new HashMap<String,Object>();
  Object[] objs={new String(""String_Node_Str""),new String(""String_Node_Str"")};
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<Object> list=new ArrayList<Object>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  int[] ints={1,2};
  map1.put(""String_Node_Str"",objs);
  map1.put(""String_Node_Str"",ints);
  map1.put(""String_Node_Str"",map);
  map1.put(""String_Node_Str"",list);
  Map<String,Object> deepMap1=DeepClone.deepClone(map1);
  ObjectMapper mapper=new ObjectMapper();
  String str1=mapper.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map1);
  String str2=mapper.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(deepMap1);
  assertEquals(str1,str2);
  assertTrue(str1.equals(str2));
  ((Map)deepMap1.get(""String_Node_Str"")).put(""String_Node_Str"",""String_Node_Str"");
  str1=mapper.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map1);
  str2=mapper.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(deepMap1);
  assertFalse(str1.equals(str2));
}",0.9033391915641475
160262,"public boolean run(){
  try {
    Document doc=database.createDocument();
    String id=doc.getId();
    InputStream jsonStream=getAsset(""String_Node_Str"");
    Map<String,Object> docProperties=null;
    docProperties=Manager.getObjectMapper().readValue(jsonStream,Map.class);
    docProperties.put(""String_Node_Str"",0);
    doc.putProperties(docProperties);
    jsonStream.close();
    UnsavedRevision rev=null;
    for (int i=0; i < 20; i++) {
      InputStream attachmentStream1=getAsset(""String_Node_Str"");
      Log.e(Database.TAG,""String_Node_Str"" + i);
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 5,""String_Node_Str"",attachmentStream1);
      rev.save();
      attachmentStream1.close();
      InputStream attachmentStream2=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 5 + 1,""String_Node_Str"",attachmentStream2);
      rev.save();
      attachmentStream2.close();
      InputStream attachmentStream3=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 5 + 2,""String_Node_Str"",attachmentStream3);
      rev.save();
      attachmentStream3.close();
      InputStream attachmentStream4=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 5 + 3,""String_Node_Str"",attachmentStream4);
      rev.save();
      attachmentStream4.close();
      InputStream attachmentStream5=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 5 + 4,""String_Node_Str"",attachmentStream5);
      rev.save();
      attachmentStream5.close();
      Map<String,Object> curProperties;
      doc=database.getDocument(id);
      curProperties=doc.getProperties();
      docProperties=new HashMap<String,Object>();
      docProperties.putAll(curProperties);
      docProperties.put(""String_Node_Str"",(i + 1) * 5);
      doc.putProperties(docProperties);
    }
    Map<String,Object> curProperties;
    doc=database.getDocument(id);
    curProperties=doc.getProperties();
    assertEquals(22,curProperties.size());
    Map<String,Object> attachments=(Map<String,Object>)doc.getCurrentRevision().getProperty(""String_Node_Str"");
    assertNotNull(attachments);
    assertEquals(100,attachments.size());
  }
 catch (  Exception e) {
    Log.e(Database.TAG,""String_Node_Str"",e);
    return false;
  }
  return true;
}","public boolean run(){
  try {
    Document doc=database.createDocument();
    String id=doc.getId();
    InputStream jsonStream=getAsset(""String_Node_Str"");
    Map<String,Object> docProperties=null;
    docProperties=Manager.getObjectMapper().readValue(jsonStream,Map.class);
    docProperties.put(""String_Node_Str"",0);
    doc.putProperties(docProperties);
    jsonStream.close();
    UnsavedRevision rev=null;
    for (int i=0; i < 5; i++) {
      InputStream attachmentStream1=getAsset(""String_Node_Str"");
      Log.e(Database.TAG,""String_Node_Str"" + i);
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 3,""String_Node_Str"",attachmentStream1);
      rev.save();
      attachmentStream1.close();
      InputStream attachmentStream2=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 3 + 1,""String_Node_Str"",attachmentStream2);
      rev.save();
      attachmentStream2.close();
      InputStream attachmentStream3=getAsset(""String_Node_Str"");
      doc=database.getDocument(id);
      rev=doc.createRevision();
      rev.setAttachment(""String_Node_Str"" + i * 3 + 2,""String_Node_Str"",attachmentStream3);
      rev.save();
      attachmentStream3.close();
      Map<String,Object> curProperties;
      doc=database.getDocument(id);
      curProperties=doc.getProperties();
      docProperties=new HashMap<String,Object>();
      docProperties.putAll(curProperties);
      docProperties.put(""String_Node_Str"",(i + 1) * 3);
      doc.putProperties(docProperties);
    }
    Map<String,Object> curProperties;
    doc=database.getDocument(id);
    curProperties=doc.getProperties();
    assertEquals(22,curProperties.size());
    Map<String,Object> attachments=(Map<String,Object>)doc.getCurrentRevision().getProperty(""String_Node_Str"");
    assertNotNull(attachments);
    assertEquals(15,attachments.size());
  }
 catch (  Exception e) {
    Log.e(Database.TAG,""String_Node_Str"",e);
    return false;
  }
  return true;
}",0.879983036471586
160263,"/** 
 * attempt to reproduce - https://github.com/couchbase/couchbase-lite-android/issues/328 & - https://github.com/couchbase/couchbase-lite-android/issues/325
 */
public void testSetAttachmentsSequentiallyInTransaction() throws CouchbaseLiteException, IOException {
  boolean success=database.runInTransaction(new TransactionalTask(){
    public boolean run(){
      try {
        Document doc=database.createDocument();
        String id=doc.getId();
        InputStream jsonStream=getAsset(""String_Node_Str"");
        Map<String,Object> docProperties=null;
        docProperties=Manager.getObjectMapper().readValue(jsonStream,Map.class);
        docProperties.put(""String_Node_Str"",0);
        doc.putProperties(docProperties);
        jsonStream.close();
        UnsavedRevision rev=null;
        for (int i=0; i < 20; i++) {
          InputStream attachmentStream1=getAsset(""String_Node_Str"");
          Log.e(Database.TAG,""String_Node_Str"" + i);
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 5,""String_Node_Str"",attachmentStream1);
          rev.save();
          attachmentStream1.close();
          InputStream attachmentStream2=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 5 + 1,""String_Node_Str"",attachmentStream2);
          rev.save();
          attachmentStream2.close();
          InputStream attachmentStream3=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 5 + 2,""String_Node_Str"",attachmentStream3);
          rev.save();
          attachmentStream3.close();
          InputStream attachmentStream4=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 5 + 3,""String_Node_Str"",attachmentStream4);
          rev.save();
          attachmentStream4.close();
          InputStream attachmentStream5=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 5 + 4,""String_Node_Str"",attachmentStream5);
          rev.save();
          attachmentStream5.close();
          Map<String,Object> curProperties;
          doc=database.getDocument(id);
          curProperties=doc.getProperties();
          docProperties=new HashMap<String,Object>();
          docProperties.putAll(curProperties);
          docProperties.put(""String_Node_Str"",(i + 1) * 5);
          doc.putProperties(docProperties);
        }
        Map<String,Object> curProperties;
        doc=database.getDocument(id);
        curProperties=doc.getProperties();
        assertEquals(22,curProperties.size());
        Map<String,Object> attachments=(Map<String,Object>)doc.getCurrentRevision().getProperty(""String_Node_Str"");
        assertNotNull(attachments);
        assertEquals(100,attachments.size());
      }
 catch (      Exception e) {
        Log.e(Database.TAG,""String_Node_Str"",e);
        return false;
      }
      return true;
    }
  }
);
  assertTrue(""String_Node_Str"",success);
}","/** 
 * attempt to reproduce - https://github.com/couchbase/couchbase-lite-android/issues/328 & - https://github.com/couchbase/couchbase-lite-android/issues/325
 */
public void testSetAttachmentsSequentiallyInTransaction() throws CouchbaseLiteException, IOException {
  boolean success=database.runInTransaction(new TransactionalTask(){
    public boolean run(){
      try {
        Document doc=database.createDocument();
        String id=doc.getId();
        InputStream jsonStream=getAsset(""String_Node_Str"");
        Map<String,Object> docProperties=null;
        docProperties=Manager.getObjectMapper().readValue(jsonStream,Map.class);
        docProperties.put(""String_Node_Str"",0);
        doc.putProperties(docProperties);
        jsonStream.close();
        UnsavedRevision rev=null;
        for (int i=0; i < 5; i++) {
          InputStream attachmentStream1=getAsset(""String_Node_Str"");
          Log.e(Database.TAG,""String_Node_Str"" + i);
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 3,""String_Node_Str"",attachmentStream1);
          rev.save();
          attachmentStream1.close();
          InputStream attachmentStream2=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 3 + 1,""String_Node_Str"",attachmentStream2);
          rev.save();
          attachmentStream2.close();
          InputStream attachmentStream3=getAsset(""String_Node_Str"");
          doc=database.getDocument(id);
          rev=doc.createRevision();
          rev.setAttachment(""String_Node_Str"" + i * 3 + 2,""String_Node_Str"",attachmentStream3);
          rev.save();
          attachmentStream3.close();
          Map<String,Object> curProperties;
          doc=database.getDocument(id);
          curProperties=doc.getProperties();
          docProperties=new HashMap<String,Object>();
          docProperties.putAll(curProperties);
          docProperties.put(""String_Node_Str"",(i + 1) * 3);
          doc.putProperties(docProperties);
        }
        Map<String,Object> curProperties;
        doc=database.getDocument(id);
        curProperties=doc.getProperties();
        assertEquals(22,curProperties.size());
        Map<String,Object> attachments=(Map<String,Object>)doc.getCurrentRevision().getProperty(""String_Node_Str"");
        assertNotNull(attachments);
        assertEquals(15,attachments.size());
      }
 catch (      Exception e) {
        Log.e(Database.TAG,""String_Node_Str"",e);
        return false;
      }
      return true;
    }
  }
);
  assertTrue(""String_Node_Str"",success);
}",0.8970144246897015
160264,"public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  char[] chars=new char[2500000];
  Arrays.fill(chars,'a');
  props.put(""String_Node_Str"",new String(chars));
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),new String(chars));
}","public void testGetDocumentWithLargeJSON(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  char[] chars=new char[3 * 1024 * 10243];
  Arrays.fill(chars,'a');
  props.put(""String_Node_Str"",new String(chars));
  Document doc=createDocumentWithProperties(database,props);
  assertNotNull(doc);
  Document docFetched=database.getDocument(doc.getId());
  Map<String,Object> fetchedProps=docFetched.getCurrentRevision().getProperties();
  assertEquals(fetchedProps.get(""String_Node_Str""),new String(chars));
}",0.9830508474576272
160265,"public void testResolveConflictInChangeListener() throws Exception {
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  Document doc=database.createDocument();
  UnsavedRevision rev1=doc.createRevision();
  rev1.setProperties(properties);
  SavedRevision rev1Saved=rev1.save();
  UnsavedRevision rev2a=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2a.setUserProperties(properties);
  SavedRevision rev2aSaved=rev2a.save(true);
  UnsavedRevision rev2b=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2b.setUserProperties(properties);
  rev2b.save(true);
  final CountDown counter=new CountDown(2);
  database.addChangeListener(new Database.ChangeListener(){
    @Override public void changed(    Database.ChangeEvent event){
      Log.e(TAG,""String_Node_Str"",event);
      counter.countDown();
      try {
        List<DocumentChange> changes=event.getChanges();
        Log.e(TAG,""String_Node_Str"",changes.size());
        int conflictsInDocumentChange=0;
        for (        DocumentChange documentChange : changes) {
          Log.e(TAG,""String_Node_Str"",documentChange.isConflict());
          if (documentChange.isConflict()) {
            conflictsInDocumentChange++;
            Document document=database.getDocument(documentChange.getDocumentId());
            List<SavedRevision> conflictRevisions=document.getConflictingRevisions();
            if (conflictRevisions.size() > 1) {
              for (              SavedRevision conflictingRevision : conflictRevisions) {
                UnsavedRevision newRevision=conflictingRevision.createRevision();
                if (!conflictingRevision.equals(document.getCurrentRevision())) {
                  newRevision.setIsDeletion(true);
                }
                SavedRevision srev=newRevision.save(true);
                Log.e(TAG,""String_Node_Str"",srev);
              }
            }
          }
        }
        Log.e(TAG,""String_Node_Str"",conflictsInDocumentChange);
        if (counter.getCount() == 1)         assertEquals(1,conflictsInDocumentChange);
 else         if (counter.getCount() == 0)         assertEquals(2,conflictsInDocumentChange);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"",e);
      }
    }
  }
);
  UnsavedRevision rev2c=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2c.setUserProperties(properties);
  rev2c.save(true);
  assertEquals(0,counter.getCount());
}","public void testResolveConflictInChangeListener() throws Exception {
  Map<String,Object> properties=new TreeMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  Document doc=database.createDocument();
  UnsavedRevision rev1=doc.createRevision();
  rev1.setProperties(properties);
  SavedRevision rev1Saved=rev1.save();
  UnsavedRevision rev2a=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2a.setUserProperties(properties);
  SavedRevision rev2aSaved=rev2a.save(true);
  UnsavedRevision rev2b=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2b.setUserProperties(properties);
  rev2b.save(true);
  final CountDown counter=new CountDown(2);
  database.addChangeListener(new Database.ChangeListener(){
    @Override public void changed(    Database.ChangeEvent event){
      Log.e(TAG,""String_Node_Str"",event);
      counter.countDown();
      try {
        List<DocumentChange> changes=event.getChanges();
        Log.e(TAG,""String_Node_Str"",changes.size());
        int conflictsInDocumentChange=0;
        for (        DocumentChange documentChange : changes) {
          Log.e(TAG,""String_Node_Str"",documentChange.isConflict());
          if (documentChange.isConflict()) {
            conflictsInDocumentChange++;
            Document document=database.getDocument(documentChange.getDocumentId());
            List<SavedRevision> conflictRevisions=document.getConflictingRevisions();
            if (conflictRevisions.size() > 1) {
              for (              SavedRevision conflictingRevision : conflictRevisions) {
                UnsavedRevision newRevision=conflictingRevision.createRevision();
                if (!conflictingRevision.equals(document.getCurrentRevision())) {
                  newRevision.setIsDeletion(true);
                }
                SavedRevision srev=newRevision.save(true);
                Log.e(TAG,""String_Node_Str"",srev);
              }
            }
          }
        }
        Log.e(TAG,""String_Node_Str"",conflictsInDocumentChange);
        if (counter.getCount() == 1)         assertEquals(1,conflictsInDocumentChange);
 else         if (counter.getCount() == 0)         assertEquals(2,conflictsInDocumentChange);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"",e);
      }
    }
  }
);
  UnsavedRevision rev2c=rev1Saved.createRevision();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  rev2c.setUserProperties(properties);
  rev2c.save(true);
  assertEquals(0,counter.getCount());
}",0.998447204968944
160266,"public void failingTestDocumentPropertiesAreImmutable() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map map=(Map)Manager.getObjectMapper().readValue(jsonString,Object.class);
  Document doc=createDocumentWithProperties(database,map);
  boolean firstLevelImmutable=false;
  Map<String,Object> props=doc.getProperties();
  try {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    firstLevelImmutable=true;
  }
  assertTrue(firstLevelImmutable);
  boolean secondLevelImmutable=false;
  Map wikiProps=(Map)props.get(""String_Node_Str"");
  try {
    wikiProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    secondLevelImmutable=true;
  }
  assertTrue(secondLevelImmutable);
  boolean thirdLevelImmutable=false;
  Map evolutionProps=(Map)wikiProps.get(""String_Node_Str"");
  try {
    evolutionProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    thirdLevelImmutable=true;
  }
  assertTrue(thirdLevelImmutable);
}","/** 
 * NOTE: ** Might Not Be Fixed  Immutability of nested dictionaries might cause performance issue. It is not sure if it worth to fix this.
 */
public void failingTestDocumentPropertiesAreImmutable() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map map=(Map)Manager.getObjectMapper().readValue(jsonString,Object.class);
  Document doc=createDocumentWithProperties(database,map);
  boolean firstLevelImmutable=false;
  Map<String,Object> props=doc.getProperties();
  try {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    firstLevelImmutable=true;
  }
  assertTrue(firstLevelImmutable);
  boolean secondLevelImmutable=false;
  Map wikiProps=(Map)props.get(""String_Node_Str"");
  try {
    wikiProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    secondLevelImmutable=true;
  }
  assertTrue(secondLevelImmutable);
  boolean thirdLevelImmutable=false;
  Map evolutionProps=(Map)wikiProps.get(""String_Node_Str"");
  try {
    evolutionProps.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    thirdLevelImmutable=true;
  }
  assertTrue(thirdLevelImmutable);
}",0.9469153515064562
160267,"@Override public void run(){
  try {
    if (num == Integer.MAX_VALUE)     queryAction2(expectCount,viewName2);
 else     queryAction(num,expectCount,viewName1);
  }
 catch (  CouchbaseLiteException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","@Override public void run(){
  try {
    assertTrue(latch.await(30,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    fail(e.toString());
  }
  db.close();
}",0.4976744186046511
160268,"public void testWinningRevIDOfDoc() throws Exception {
  if (!isSQLiteDB())   return;
  SQLiteStore store=(SQLiteStore)database.getStore();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",1337);
  Map<String,Object> properties2a=new HashMap<String,Object>();
  properties2a.put(""String_Node_Str"",""String_Node_Str"");
  properties2a.put(""String_Node_Str"",1338);
  Map<String,Object> properties2b=new HashMap<String,Object>();
  properties2b.put(""String_Node_Str"",""String_Node_Str"");
  properties2b.put(""String_Node_Str"",1339);
  AtomicBoolean outIsDeleted=new AtomicBoolean(false);
  AtomicBoolean outIsConflict=new AtomicBoolean(false);
  Document doc=database.createDocument();
  UnsavedRevision newRev1=doc.createRevision();
  newRev1.setUserProperties(properties);
  SavedRevision rev1=newRev1.save();
  long docNumericId=store.getDocNumericID(doc.getId());
  assertTrue(docNumericId != 0);
  assertEquals(rev1.getId(),store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict));
  assertFalse(outIsConflict.get());
  outIsDeleted.set(false);
  outIsConflict.set(false);
  UnsavedRevision newRev2a=rev1.createRevision();
  newRev2a.setUserProperties(properties2a);
  SavedRevision rev2a=newRev2a.save();
  assertEquals(rev2a.getId(),store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict));
  assertFalse(outIsConflict.get());
  outIsDeleted.set(false);
  outIsConflict.set(true);
  UnsavedRevision newRev2b=rev1.createRevision();
  newRev2b.setUserProperties(properties2b);
  SavedRevision rev2b=newRev2b.save(true);
  store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict);
  assertTrue(outIsConflict.get());
}","public void testWinningRevIDOfDoc() throws Exception {
  if (!isSQLiteDB())   return;
  Method m=database.getClass().getDeclaredMethod(""String_Node_Str"");
  m.setAccessible(true);
  SQLiteStore store=(SQLiteStore)m.invoke(database);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",1337);
  Map<String,Object> properties2a=new HashMap<String,Object>();
  properties2a.put(""String_Node_Str"",""String_Node_Str"");
  properties2a.put(""String_Node_Str"",1338);
  Map<String,Object> properties2b=new HashMap<String,Object>();
  properties2b.put(""String_Node_Str"",""String_Node_Str"");
  properties2b.put(""String_Node_Str"",1339);
  AtomicBoolean outIsDeleted=new AtomicBoolean(false);
  AtomicBoolean outIsConflict=new AtomicBoolean(false);
  Document doc=database.createDocument();
  UnsavedRevision newRev1=doc.createRevision();
  newRev1.setUserProperties(properties);
  SavedRevision rev1=newRev1.save();
  long docNumericId=store.getDocNumericID(doc.getId());
  assertTrue(docNumericId != 0);
  assertEquals(rev1.getId(),store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict));
  assertFalse(outIsConflict.get());
  outIsDeleted.set(false);
  outIsConflict.set(false);
  UnsavedRevision newRev2a=rev1.createRevision();
  newRev2a.setUserProperties(properties2a);
  SavedRevision rev2a=newRev2a.save();
  assertEquals(rev2a.getId(),store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict));
  assertFalse(outIsConflict.get());
  outIsDeleted.set(false);
  outIsConflict.set(true);
  UnsavedRevision newRev2b=rev1.createRevision();
  newRev2b.setUserProperties(properties2b);
  SavedRevision rev2b=newRev2b.save(true);
  store.winningRevIDOfDocNumericID(docNumericId,outIsDeleted,outIsConflict);
  assertTrue(outIsConflict.get());
}",0.968896229011836
160269,"public void testUpdateDocsAndReadRevHistory() throws Exception {
  if (!multithreadsTestsEnabled())   return;
  if (!isSQLiteDB())   return;
  Thread insertThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < 100; i++) {
        String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
        Document doc=database.getDocument(docID);
        Map<String,Object> props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",i);
        try {
          doc.putProperties(props);
        }
 catch (        CouchbaseLiteException e) {
          Log.e(TAG,""String_Node_Str"",e);
          fail(e.getMessage());
        }
      }
    }
  }
);
  insertThread.start();
  try {
    insertThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  Thread readThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int j=0; j < 20; j++) {
        for (int i=0; i < 100; i++) {
          String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
          Document doc=database.getDocument(docID);
          String revID=doc.getCurrentRevisionId();
          RevisionInternal rev=new RevisionInternal(doc.getId(),doc.getCurrentRevisionId(),false);
          List<RevisionInternal> revs=database.getRevisionHistory(rev);
          assertNotNull(revs);
        }
      }
    }
  }
);
  Thread updateThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < 100; i++) {
        String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
        Log.e(TAG,""String_Node_Str"",docID);
        for (int j=0; j < 20; j++) {
          Document doc=database.getDocument(docID);
          Map<String,Object> props=new HashMap<String,Object>();
          props.putAll(doc.getProperties());
          props.put(""String_Node_Str"",j);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            Log.e(TAG,""String_Node_Str"",e,Thread.currentThread().getName());
            fail(e.getMessage());
          }
        }
      }
    }
  }
);
  readThread.start();
  updateThread.start();
  try {
    readThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  try {
    updateThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","/** 
 * IMPORTANT: DON'T run this test with Genymotion emulator with Android 4.x or older. It caseus unknown crash. https://github.com/couchbase/couchbase-lite-java-core/issues/1437
 */
public void testUpdateDocsAndReadRevHistory() throws Exception {
  if (!multithreadsTestsEnabled())   return;
  Thread insertThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < 100; i++) {
        String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
        Document doc=database.getDocument(docID);
        Map<String,Object> props=new HashMap<String,Object>();
        props.put(""String_Node_Str"",i);
        try {
          doc.putProperties(props);
        }
 catch (        CouchbaseLiteException e) {
          Log.e(TAG,""String_Node_Str"",e);
          fail(e.getMessage());
        }
      }
    }
  }
);
  insertThread.start();
  try {
    insertThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  Thread readThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int j=0; j < 20; j++) {
        for (int i=0; i < 100; i++) {
          String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
          Document doc=database.getDocument(docID);
          String revID=doc.getCurrentRevisionId();
          RevisionInternal rev=new RevisionInternal(doc.getId(),doc.getCurrentRevisionId(),false);
          List<RevisionInternal> revs=database.getRevisionHistory(rev);
          assertNotNull(revs);
        }
      }
    }
  }
);
  Thread updateThread=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < 100; i++) {
        String docID=String.format(Locale.ENGLISH,""String_Node_Str"",i);
        Log.e(TAG,""String_Node_Str"",docID);
        for (int j=0; j < 20; j++) {
          Document doc=database.getDocument(docID);
          Map<String,Object> props=new HashMap<String,Object>();
          props.putAll(doc.getProperties());
          props.put(""String_Node_Str"",j);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            Log.e(TAG,""String_Node_Str"",e,Thread.currentThread().getName());
            fail(e.getMessage());
          }
        }
      }
    }
  }
);
  readThread.start();
  updateThread.start();
  try {
    readThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  try {
    updateThread.join();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.956294058408862
160270,"@Override protected void setUp() throws Exception {
  super.setUp();
  if (!syncgatewayTestsEnabled())   return;
}","@Override protected void setUp() throws Exception {
  if (!syncgatewayTestsEnabled())   return;
  super.setUp();
}",0.8508771929824561
160271,"/** 
 * https://github.com/couchbase/couchbase-lite-java-core/issues/696 in Unit-Tests/Replication_Tests.m - (void)test18_PendingDocumentIDs
 */
public void test18_PendingDocumentIDs() throws Exception {
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  server.setDispatcher(dispatcher);
  try {
    server.start();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    mockCheckpointPut.setDelayMs(50);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    MockRevsDiff mockRevsDiff=new MockRevsDiff();
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
    MockBulkDocs mockBulkDocs=new MockBulkDocs();
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
    Replication repl=database.createPushReplication(server.url(""String_Node_Str"").url());
    assertNotNull(repl.getPendingDocumentIDs());
    assertEquals(0,repl.getPendingDocumentIDs().size());
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        for (int i=1; i <= 10; i++) {
          Document doc=database.getDocument(String.format(Locale.ENGLISH,""String_Node_Str"",i));
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",i);
          props.put(""String_Node_Str"",false);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            fail(e.getMessage());
          }
        }
        return true;
      }
    }
));
    assertEquals(10,repl.getPendingDocumentIDs().size());
    assertTrue(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    runReplication(repl);
    assertNotNull(repl.getPendingDocumentIDs());
    assertEquals(0,repl.getPendingDocumentIDs().size());
    assertFalse(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        for (int i=11; i <= 20; i++) {
          Document doc=database.getDocument(String.format(Locale.ENGLISH,""String_Node_Str"",i));
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",i);
          props.put(""String_Node_Str"",false);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            fail(e.getMessage());
          }
        }
        return true;
      }
    }
));
    repl=database.createPushReplication(server.url(""String_Node_Str"").url());
    assertNotNull(repl.getPendingDocumentIDs());
    assertEquals(10,repl.getPendingDocumentIDs().size());
    assertTrue(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    assertFalse(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    repl=database.createPullReplication(server.url(""String_Node_Str"").url());
    assertNull(repl.getPendingDocumentIDs());
    runReplication(repl);
    assertNull(repl.getPendingDocumentIDs());
  }
  finally {
    assertTrue(MockHelper.shutdown(server,dispatcher));
  }
}","/** 
 * https://github.com/couchbase/couchbase-lite-java-core/issues/696 https://github.com/couchbase/couchbase-lite-java-core/issues/1396 in Unit-Tests/Replication_Tests.m - (void)test18_PendingDocumentIDs
 */
public void test18_PendingDocumentIDs() throws Exception {
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  server.setDispatcher(dispatcher);
  try {
    server.start();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    mockCheckpointPut.setDelayMs(50);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    MockRevsDiff mockRevsDiff=new MockRevsDiff();
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
    MockBulkDocs mockBulkDocs=new MockBulkDocs();
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
    Replication repl=database.createPushReplication(server.url(""String_Node_Str"").url());
    assertNull(repl.getPendingDocumentIDs());
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        for (int i=1; i <= 10; i++) {
          Document doc=database.getDocument(String.format(Locale.ENGLISH,""String_Node_Str"",i));
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",i);
          props.put(""String_Node_Str"",false);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            fail(e.getMessage());
          }
        }
        return true;
      }
    }
));
    assertEquals(10,repl.getPendingDocumentIDs().size());
    assertTrue(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    runReplication(repl);
    assertNull(repl.getPendingDocumentIDs());
    assertFalse(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        for (int i=11; i <= 20; i++) {
          Document doc=database.getDocument(String.format(Locale.ENGLISH,""String_Node_Str"",i));
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",i);
          props.put(""String_Node_Str"",false);
          try {
            doc.putProperties(props);
          }
 catch (          CouchbaseLiteException e) {
            fail(e.getMessage());
          }
        }
        return true;
      }
    }
));
    assertTrue(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    assertEquals(10,repl.getPendingDocumentIDs().size());
    repl=database.createPushReplication(server.url(""String_Node_Str"").url());
    assertNotNull(repl.getPendingDocumentIDs());
    assertEquals(10,repl.getPendingDocumentIDs().size());
    assertTrue(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    assertFalse(repl.isDocumentPending(database.getDocument(""String_Node_Str"")));
    repl=database.createPullReplication(server.url(""String_Node_Str"").url());
    assertNull(repl.getPendingDocumentIDs());
    runReplication(repl);
    assertNull(repl.getPendingDocumentIDs());
  }
  finally {
    assertTrue(MockHelper.shutdown(server,dispatcher));
  }
}",0.9240221789300164
160272,"public void testAsCanonicalJSON(){
  Map<String,Object> src=new HashMap<String,Object>();
  src.put(""String_Node_Str"",""String_Node_Str"");
  src.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> nest=new HashMap<String,Object>();
  nest.put(""String_Node_Str"",""String_Node_Str"");
  nest.put(""String_Node_Str"",""String_Node_Str"");
  src.put(""String_Node_Str"",nest);
  String json=new String(RevisionUtils.asCanonicalJSON(src));
  assertEquals(""String_Node_Str"",json);
  Log.e(TAG,""String_Node_Str"",json);
}","public void testAsCanonicalJSON(){
  Map<String,Object> src=new HashMap<String,Object>();
  src.put(""String_Node_Str"",""String_Node_Str"");
  src.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> nest=new HashMap<String,Object>();
  nest.put(""String_Node_Str"",""String_Node_Str"");
  nest.put(""String_Node_Str"",""String_Node_Str"");
  nest.put(""String_Node_Str"",""String_Node_Str"");
  nest.put(""String_Node_Str"",""String_Node_Str"");
  nest.put(""String_Node_Str"",""String_Node_Str"");
  src.put(""String_Node_Str"",nest);
  List<Object> list=new ArrayList<Object>();
  list.add(""String_Node_Str"");
  Map<String,Object> mapInList=new HashMap<String,Object>();
  mapInList.put(""String_Node_Str"",""String_Node_Str"");
  mapInList.put(""String_Node_Str"",""String_Node_Str"");
  list.add(mapInList);
  list.add(""String_Node_Str"");
  src.put(""String_Node_Str"",list);
  String json=new String(RevisionUtils.asCanonicalJSON(src));
  assertEquals(""String_Node_Str"",json);
  Log.i(TAG,""String_Node_Str"",json);
}",0.6432825943084051
160273,"@Override protected void setUp() throws Exception {
  super.setUp();
  if (!syncgatewayTestsEnabled())   return;
}","@Override protected void setUp() throws Exception {
  if (!syncgatewayTestsEnabled())   return;
  super.setUp();
}",0.8508771929824561
160274,"public void testResolveConflict() throws CouchbaseLiteException, Exception {
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",""String_Node_Str"");
  final Document doc=database.getDocument(""String_Node_Str"");
  UnsavedRevision newRev1=doc.createRevision();
  newRev1.setUserProperties(properties);
  SavedRevision rev1=newRev1.save();
  Map<String,Object> props1=new HashMap<String,Object>();
  props1.put(""String_Node_Str"",""String_Node_Str"");
  SavedRevision rev2a=createRevisionWithProps(rev1,props1,false);
  Map<String,Object> props2=new HashMap<String,Object>();
  props2.put(""String_Node_Str"",""String_Node_Str"");
  SavedRevision rev2b=createRevisionWithProps(rev1,props2,true);
  final List<SavedRevision> conflicts=doc.getConflictingRevisions();
  if (conflicts.size() > 1) {
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        try {
          Map<String,Object> mergedProps=new HashMap<String,Object>(conflicts.get(0).getUserProperties());
          mergedProps.put(""String_Node_Str"",""String_Node_Str"");
          SavedRevision current=doc.getCurrentRevision();
          for (          SavedRevision rev : conflicts) {
            UnsavedRevision newRev=rev.createRevision();
            if (rev.getId().equals(current.getId())) {
              newRev.setProperties(mergedProps);
            }
 else {
              newRev.setIsDeletion(true);
            }
            newRev.save(true);
          }
        }
 catch (        CouchbaseLiteException e) {
          return false;
        }
        return true;
      }
    }
));
  }
  assertEquals(1,doc.getConflictingRevisions().size());
  assertEquals(""String_Node_Str"",doc.getProperties().get(""String_Node_Str""));
}","public void testResolveConflict() throws Exception {
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",""String_Node_Str"");
  final Document doc=database.getDocument(""String_Node_Str"");
  UnsavedRevision newRev1=doc.createRevision();
  newRev1.setUserProperties(properties);
  SavedRevision rev1=newRev1.save();
  Map<String,Object> props1=new HashMap<String,Object>();
  props1.put(""String_Node_Str"",""String_Node_Str"");
  SavedRevision rev2a=createRevisionWithProps(rev1,props1,false);
  Map<String,Object> props2=new HashMap<String,Object>();
  props2.put(""String_Node_Str"",""String_Node_Str"");
  SavedRevision rev2b=createRevisionWithProps(rev1,props2,true);
  Map<String,Object> props3=new HashMap<String,Object>();
  props3.put(""String_Node_Str"",""String_Node_Str"");
  SavedRevision rev2c=createRevisionWithProps(rev1,props3,true);
  final List<SavedRevision> conflicts=doc.getConflictingRevisions();
  if (conflicts.size() > 1) {
    assertTrue(database.runInTransaction(new TransactionalTask(){
      @Override public boolean run(){
        try {
          Map<String,Object> mergedProps=new HashMap<String,Object>(conflicts.get(0).getUserProperties());
          mergedProps.put(""String_Node_Str"",""String_Node_Str"");
          SavedRevision current=doc.getCurrentRevision();
          for (          SavedRevision rev : conflicts) {
            UnsavedRevision newRev=rev.createRevision();
            if (rev.getId().equals(current.getId())) {
              newRev.setProperties(mergedProps);
            }
 else {
              newRev.setIsDeletion(true);
            }
            newRev.save(true);
          }
        }
 catch (        CouchbaseLiteException e) {
          return false;
        }
        return true;
      }
    }
));
  }
  assertEquals(1,doc.getConflictingRevisions().size());
  assertEquals(""String_Node_Str"",doc.getProperties().get(""String_Node_Str""));
}",0.8248823836905385
160275,"@Override public void changed(Document.ChangeEvent event){
  DocumentChange docChange=event.getChange();
  String msg=""String_Node_Str"";
  msg=String.format(msg,docChange.getAddedRevision(),docChange.isConflict());
  Log.d(TAG,msg);
  documentChanged.countDown();
}","@Override public void changed(Database.ChangeEvent event){
  Log.e(TAG,""String_Node_Str"",event);
  counter.countDown();
  try {
    List<DocumentChange> changes=event.getChanges();
    Log.e(TAG,""String_Node_Str"",changes.size());
    int conflictsInDocumentChange=0;
    for (    DocumentChange documentChange : changes) {
      Log.e(TAG,""String_Node_Str"",documentChange.isConflict());
      if (documentChange.isConflict()) {
        conflictsInDocumentChange++;
        Document document=database.getDocument(documentChange.getDocumentId());
        List<SavedRevision> conflictRevisions=document.getConflictingRevisions();
        if (conflictRevisions.size() > 1) {
          for (          SavedRevision conflictingRevision : conflictRevisions) {
            UnsavedRevision newRevision=conflictingRevision.createRevision();
            if (!conflictingRevision.equals(document.getCurrentRevision())) {
              newRevision.setIsDeletion(true);
            }
            SavedRevision srev=newRevision.save(true);
            Log.e(TAG,""String_Node_Str"",srev);
          }
        }
      }
    }
    Log.e(TAG,""String_Node_Str"",conflictsInDocumentChange);
    if (counter.getCount() == 1)     assertEquals(1,conflictsInDocumentChange);
 else     if (counter.getCount() == 0)     assertEquals(2,conflictsInDocumentChange);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.0934691431995206
160276,"protected void stopDatabase(){
  if (database != null) {
    database.close();
  }
}","protected void stopDatabase(){
  if (database != null) {
    if (!database.close()) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}",0.7741935483870968
160277,"/** 
 * From https://github.com/couchbase/couchbase-lite-android/issues/969#issuecomment-244562943 Adapted from testParallelViewQueries Tests for https://github.com/couchbase/couchbase-lite-android/issues/969
 */
public void testMultipleLiveQueries(){
  final int batch_size=500;
  final int n_batches=5;
  LiveQuery lvu=null;
  LiveQuery lvu2=null;
  try {
    View vu=database.getView(""String_Node_Str"");
    vu.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",document.get(""String_Node_Str""));
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    Query qvu=vu.createQuery();
    lvu=qvu.toLiveQuery();
    List<Object> keys=new ArrayList<Object>();
    Map<String,Object> key=new HashMap<String,Object>();
    key.put(""String_Node_Str"",batch_size - 1);
    keys.add(key);
    lvu.setKeys(keys);
    final CountDownLatch latch=new CountDownLatch(1);
    lvu.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
        assertNull(event.getError());
        QueryEnumerator rows=event.getRows();
        assertNotNull(rows);
        Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",rows.getCount(),rows.getSequenceNumber()));
        while (rows.hasNext()) {
          QueryRow row=rows.next();
          String str=row.getDocument().getProperties().toString();
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str"",str));
        }
        if (event.getRows().getSequenceNumber() >= batch_size * n_batches) {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
          latch.countDown();
        }
 else {
          Log.w(TAG,String.format(Locale.ENGLISH,""String_Node_Str""));
        }
      }
    }
);
    lvu.start();
    View vu2=database.getView(""String_Node_Str"");
    vu2.setMap(new Mapper(){
      @Override public void map(      Map<String,Object> document,      Emitter emitter){
        Map<String,Object> key=new HashMap<String,Object>();
        key.put(""String_Node_Str"",""String_Node_Str"");
        emitter.emit(key,null);
      }
    }
,""String_Node_Str"");
    lvu2=vu2.createQuery().toLiveQuery();
    lvu2.addChangeListener(new LiveQuery.ChangeListener(){
      @Override public void changed(      LiveQuery.ChangeEvent event){
      }
    }
);
    lvu2.start();
    for (int i=0; i < n_batches; i++) {
      Log.w(TAG,""String_Node_Str"");
      createDocuments(database,batch_size);
    }
    Log.w(TAG,""String_Node_Str"");
    try {
      assertTrue(latch.await(60,TimeUnit.SECONDS));
    }
 catch (    InterruptedException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    if (lvu2 != null)     lvu2.stop();
    if (lvu != null)     lvu.stop();
  }
}","/** 
 * From https://github.com/couchbase/couchbase-lite-android/issues/969#issuecomment-244562943 Adapted from testParallelViewQueries Tests for https://github.com/couchbase/couchbase-lite-android/issues/969
 */
public void testMultipleLiveQueries(){
  _testMultipleLiveQueries(""String_Node_Str"");
}",0.1796407185628742
160278,"@Override public void deleteCookie(String name){
}","@Override public void deleteCookie(URL url){
}",0.8333333333333334
160279,"protected Document createDocWithProperties(Map<String,Object> properties1) throws CouchbaseLiteException {
  Document doc1=database.createDocument();
  UnsavedRevision revUnsaved=doc1.createRevision();
  revUnsaved.setUserProperties(properties1);
  SavedRevision rev=revUnsaved.save();
  assertNotNull(rev);
  return doc1;
}","protected Document createDocWithProperties(Map<String,Object> props,Database db) throws CouchbaseLiteException {
  Document doc=db.createDocument();
  UnsavedRevision revUnsaved=doc.createRevision();
  revUnsaved.setUserProperties(props);
  SavedRevision rev=revUnsaved.save();
  assertNotNull(rev);
  return doc;
}",0.9389671361502347
160280,"/** 
 * Error after close DB client https://github.com/couchbase/couchbase-lite-java/issues/52
 */
public void testClose() throws Exception {
  Log.d(Log.TAG,""String_Node_Str"");
  boolean success=false;
  MockDispatcher dispatcher=new MockDispatcher();
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockWebServer server=new MockWebServer();
  server.setDispatcher(dispatcher);
  try {
    server.play();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    Replication pull=database.createPullReplication(server.getUrl(""String_Node_Str""));
    pull.setContinuous(true);
    final CountDownLatch pullIdleState=new CountDownLatch(1);
    ReplicationIdleObserver pullIdleObserver=new ReplicationIdleObserver(pullIdleState);
    pull.addChangeListener(pullIdleObserver);
    pull.start();
    Replication push=database.createPullReplication(server.getUrl(""String_Node_Str""));
    push.setContinuous(true);
    final CountDownLatch pushIdleState=new CountDownLatch(1);
    ReplicationIdleObserver pushIdleObserver=new ReplicationIdleObserver(pushIdleState);
    push.addChangeListener(pushIdleObserver);
    push.start();
    success=pullIdleState.await(30,TimeUnit.SECONDS);
    assertTrue(success);
    pull.removeChangeListener(pullIdleObserver);
    success=pushIdleState.await(30,TimeUnit.SECONDS);
    assertTrue(success);
    push.removeChangeListener(pushIdleObserver);
    final CountDownLatch pullStoppedState=new CountDownLatch(1);
    ReplicationFinishedObserver pullStoppedObserver=new ReplicationFinishedObserver(pullStoppedState);
    pull.addChangeListener(pullStoppedObserver);
    final CountDownLatch pushStoppedState=new CountDownLatch(1);
    ReplicationFinishedObserver pushStoppedObserver=new ReplicationFinishedObserver(pushStoppedState);
    push.addChangeListener(pushStoppedObserver);
    manager.close();
    assertEquals(0,pullStoppedState.getCount());
    assertEquals(0,pushStoppedState.getCount());
    pull.removeChangeListener(pullStoppedObserver);
    push.removeChangeListener(pushStoppedObserver);
    try {
      Thread.sleep(3 * 1000);
    }
 catch (    Exception e) {
    }
    Set<Thread> threadSet=Thread.getAllStackTraces().keySet();
    for (    Thread t : threadSet) {
      if (t.isAlive()) {
        assertEquals(-1,t.getName().indexOf(""String_Node_Str""));
        assertEquals(-1,t.getName().indexOf(""String_Node_Str""));
      }
    }
  }
  finally {
    server.shutdown();
  }
  Log.d(Log.TAG,""String_Node_Str"");
}","/** 
 * Error after close DB client https://github.com/couchbase/couchbase-lite-java/issues/52
 */
public void testClose() throws Exception {
  Log.d(Log.TAG,""String_Node_Str"");
  MockWebServer server=new MockWebServer();
  try {
    MockDispatcher dispatcher=new MockDispatcher();
    dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
    server.setDispatcher(dispatcher);
    server.play();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    Replication pull=database.createPullReplication(server.getUrl(""String_Node_Str""));
    pull.setContinuous(true);
    final CountDownLatch pullIdleState=new CountDownLatch(1);
    ReplicationIdleObserver pullIdleObserver=new ReplicationIdleObserver(pullIdleState);
    pull.addChangeListener(pullIdleObserver);
    pull.start();
    Replication push=database.createPullReplication(server.getUrl(""String_Node_Str""));
    push.setContinuous(true);
    final CountDownLatch pushIdleState=new CountDownLatch(1);
    ReplicationIdleObserver pushIdleObserver=new ReplicationIdleObserver(pushIdleState);
    push.addChangeListener(pushIdleObserver);
    push.start();
    assertTrue(pullIdleState.await(30,TimeUnit.SECONDS));
    assertTrue(pushIdleState.await(30,TimeUnit.SECONDS));
    pull.removeChangeListener(pullIdleObserver);
    push.removeChangeListener(pushIdleObserver);
    final CountDownLatch pullStoppedState=new CountDownLatch(1);
    ReplicationFinishedObserver pullStoppedObserver=new ReplicationFinishedObserver(pullStoppedState);
    pull.addChangeListener(pullStoppedObserver);
    final CountDownLatch pushStoppedState=new CountDownLatch(1);
    ReplicationFinishedObserver pushStoppedObserver=new ReplicationFinishedObserver(pushStoppedState);
    push.addChangeListener(pushStoppedObserver);
    manager.close();
    assertTrue(pullStoppedState.await(10,TimeUnit.SECONDS));
    assertTrue(pushStoppedState.await(10,TimeUnit.SECONDS));
    pull.removeChangeListener(pullStoppedObserver);
    push.removeChangeListener(pushStoppedObserver);
    try {
      Thread.sleep(3 * 1000);
    }
 catch (    Exception e) {
    }
    Set<Thread> threadSet=Thread.getAllStackTraces().keySet();
    for (    Thread t : threadSet) {
      if (t.isAlive()) {
        assertEquals(-1,t.getName().indexOf(""String_Node_Str""));
        assertEquals(-1,t.getName().indexOf(""String_Node_Str""));
      }
    }
  }
  finally {
    server.shutdown();
  }
  Log.d(Log.TAG,""String_Node_Str"");
}",0.7179980750721848
160281,"private void putReplicationOnline(Replication replication) throws InterruptedException {
  Log.d(Log.TAG,""String_Node_Str"",replication);
  final CountDownLatch wentOnline=new CountDownLatch(1);
  Replication.ChangeListener changeListener=new ReplicationActiveObserver(wentOnline);
  replication.addChangeListener(changeListener);
  replication.goOnline();
  boolean succeeded=wentOnline.await(30,TimeUnit.SECONDS);
  assertTrue(succeeded);
  replication.removeChangeListener(changeListener);
  Log.d(Log.TAG,""String_Node_Str"",replication);
}","private void putReplicationOnline(Replication replication) throws InterruptedException {
  Log.d(Log.TAG,""String_Node_Str"",replication);
  final CountDownLatch wentOnline=new CountDownLatch(1);
  Replication.ChangeListener changeListener=new ReplicationRunningObserver(wentOnline);
  replication.addChangeListener(changeListener);
  replication.goOnline();
  boolean succeeded=wentOnline.await(30,TimeUnit.SECONDS);
  assertTrue(succeeded);
  replication.removeChangeListener(changeListener);
  Log.d(Log.TAG,""String_Node_Str"",replication);
}",0.9879963065558632
160282,"public void testGetUserAgent(){
  String userAgent=manager.getUserAgent();
  assertTrue(userAgent.indexOf(Manager.PRODUCT_NAME + ""String_Node_Str"" + Version.SYNC_PROTOCOL_VERSION) != -1);
}","public void testGetUserAgent(){
  String userAgent=Manager.getUserAgent();
  assertTrue(userAgent.indexOf(Manager.PRODUCT_NAME + ""String_Node_Str"" + Version.SYNC_PROTOCOL_VERSION) != -1);
}",0.9947089947089948
160283,"public void failingTestChangeTrackerContinuous() throws Throwable {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(1);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public String getUserAgent(){
      return manager.getUserAgent();
    }
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      return new DefaultHttpClient();
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,ChangeTracker.ChangeTrackerMode.Continuous,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","public void failingTestChangeTrackerContinuous() throws Throwable {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(1);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      return new DefaultHttpClient();
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,ChangeTracker.ChangeTrackerMode.Continuous,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9704383282364932
160284,"private void testChangeTrackerBackoff(final CustomizableMockHttpClient mockHttpClient) throws Throwable {
  URL testURL=getReplicationURL();
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public String getUserAgent(){
      return manager.getUserAgent();
    }
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      Log.v(TAG,""String_Node_Str"" + seq.toString());
    }
    @Override public HttpClient getHttpClient(){
      return mockHttpClient;
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,ChangeTracker.ChangeTrackerMode.LongPoll,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  Thread.sleep(5 * 1000);
  assertTrue(mockHttpClient.getCapturedRequests().size() < 25);
  mockHttpClient.clearResponders();
  mockHttpClient.addResponderReturnEmptyChangesFeed();
  Thread.sleep(3 * 1000);
  int before=mockHttpClient.getCapturedRequests().size();
  Thread.sleep(2 * 1000);
  int after=mockHttpClient.getCapturedRequests().size();
  assertTrue(changeTracker.backoff.getNumAttempts() == 0);
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","private void testChangeTrackerBackoff(final CustomizableMockHttpClient mockHttpClient) throws Throwable {
  URL testURL=getReplicationURL();
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      Log.v(TAG,""String_Node_Str"" + seq.toString());
    }
    @Override public HttpClient getHttpClient(){
      return mockHttpClient;
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,ChangeTracker.ChangeTrackerMode.LongPoll,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  Thread.sleep(5 * 1000);
  assertTrue(mockHttpClient.getCapturedRequests().size() < 25);
  mockHttpClient.clearResponders();
  mockHttpClient.addResponderReturnEmptyChangesFeed();
  Thread.sleep(3 * 1000);
  int before=mockHttpClient.getCapturedRequests().size();
  Thread.sleep(2 * 1000);
  int after=mockHttpClient.getCapturedRequests().size();
  assertTrue(changeTracker.backoff.getNumAttempts() == 0);
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9751641450185556
160285,"public void changeTrackerTestWithMode(ChangeTracker.ChangeTrackerMode mode,final boolean useMockReplicator,final boolean checkLastException) throws Throwable {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(1);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public String getUserAgent(){
      return manager.getUserAgent();
    }
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      if (useMockReplicator) {
        assertEquals(""String_Node_Str"",seq.toString());
      }
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      if (useMockReplicator) {
        CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
        mockHttpClient.setResponder(""String_Node_Str"",new CustomizableMockHttpClient.Responder(){
          @Override public HttpResponse execute(          HttpUriRequest httpUriRequest) throws IOException {
            String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
            return CustomizableMockHttpClient.generateHttpResponseObject(json);
          }
        }
);
        return mockHttpClient;
      }
 else {
        return new DefaultHttpClient();
      }
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,mode,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (checkLastException) {
    if (changeTracker.getLastError() != null) {
      Log.e(TAG,changeTracker.getLastError().toString());
      assertFalse(changeTracker.getLastError() instanceof NullPointerException);
    }
  }
}","public void changeTrackerTestWithMode(ChangeTracker.ChangeTrackerMode mode,final boolean useMockReplicator,final boolean checkLastException) throws Throwable {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(1);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      if (useMockReplicator) {
        assertEquals(""String_Node_Str"",seq.toString());
      }
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      if (useMockReplicator) {
        CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
        mockHttpClient.setResponder(""String_Node_Str"",new CustomizableMockHttpClient.Responder(){
          @Override public HttpResponse execute(          HttpUriRequest httpUriRequest) throws IOException {
            String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
            return CustomizableMockHttpClient.generateHttpResponseObject(json);
          }
        }
);
        return mockHttpClient;
      }
 else {
        return new DefaultHttpClient();
      }
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,mode,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(300,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (checkLastException) {
    if (changeTracker.getLastError() != null) {
      Log.e(TAG,changeTracker.getLastError().toString());
      assertFalse(changeTracker.getLastError() instanceof NullPointerException);
    }
  }
}",0.9819763828464884
160286,"private void runChangeTrackerTransientError(ChangeTracker.ChangeTrackerMode mode,final int errorCode,final String statusMessage,int numExpectedChangeCallbacks) throws Exception {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(numExpectedChangeCallbacks);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public String getUserAgent(){
      return manager.getUserAgent();
    }
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
      CustomizableMockHttpClient.Responder sentinal=defaultChangesResponder();
      Queue<CustomizableMockHttpClient.Responder> responders=new LinkedList<CustomizableMockHttpClient.Responder>();
      responders.add(defaultChangesResponder());
      responders.add(CustomizableMockHttpClient.transientErrorResponder(errorCode,statusMessage));
      ResponderChain responderChain=new ResponderChain(responders,sentinal);
      mockHttpClient.setResponder(""String_Node_Str"",responderChain);
      return mockHttpClient;
    }
    private CustomizableMockHttpClient.Responder defaultChangesResponder(){
      return new CustomizableMockHttpClient.Responder(){
        @Override public HttpResponse execute(        HttpUriRequest httpUriRequest) throws IOException {
          String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          return CustomizableMockHttpClient.generateHttpResponseObject(json);
        }
      }
;
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,mode,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(30,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(30,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","private void runChangeTrackerTransientError(ChangeTracker.ChangeTrackerMode mode,final int errorCode,final String statusMessage,int numExpectedChangeCallbacks) throws Exception {
  final CountDownLatch changeTrackerFinishedSignal=new CountDownLatch(1);
  final CountDownLatch changeReceivedSignal=new CountDownLatch(numExpectedChangeCallbacks);
  URL testURL=getReplicationURL();
  ChangeTrackerClient client=new ChangeTrackerClient(){
    @Override public void changeTrackerStopped(    ChangeTracker tracker){
      changeTrackerFinishedSignal.countDown();
    }
    @Override public void changeTrackerFinished(    ChangeTracker tracker){
    }
    @Override public void changeTrackerCaughtUp(){
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      changeReceivedSignal.countDown();
    }
    @Override public HttpClient getHttpClient(){
      CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
      CustomizableMockHttpClient.Responder sentinal=defaultChangesResponder();
      Queue<CustomizableMockHttpClient.Responder> responders=new LinkedList<CustomizableMockHttpClient.Responder>();
      responders.add(defaultChangesResponder());
      responders.add(CustomizableMockHttpClient.transientErrorResponder(errorCode,statusMessage));
      ResponderChain responderChain=new ResponderChain(responders,sentinal);
      mockHttpClient.setResponder(""String_Node_Str"",responderChain);
      return mockHttpClient;
    }
    private CustomizableMockHttpClient.Responder defaultChangesResponder(){
      return new CustomizableMockHttpClient.Responder(){
        @Override public HttpResponse execute(        HttpUriRequest httpUriRequest) throws IOException {
          String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          return CustomizableMockHttpClient.generateHttpResponseObject(json);
        }
      }
;
    }
  }
;
  final ChangeTracker changeTracker=new ChangeTracker(testURL,mode,false,0,client);
  changeTracker.setUsePOST(isTestingAgainstSyncGateway());
  changeTracker.start();
  try {
    boolean success=changeReceivedSignal.await(30,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  changeTracker.stop();
  try {
    boolean success=changeTrackerFinishedSignal.await(30,TimeUnit.SECONDS);
    assertTrue(success);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9826451226810292
160287,"@Override public long insertOrThrow(String table,String nullColumnHack,ContentValues values) throws SQLException {
  try {
    return database.insertOrThrow(table,nullColumnHack,toContentValues(values));
  }
 catch (  com.couchbase.lite.database.SQLException e) {
    throw new SQLException(e);
  }
}","@Override public long insertOrThrow(String table,String nullColumnHack,ContentValues values) throws SQLException {
  try {
    return database.insertOrThrow(table,nullColumnHack,toContentValues(values));
  }
 catch (  com.couchbase.lite.database.SQLException e) {
    if (e instanceof com.couchbase.lite.database.sqlite.exception.SQLiteConstraintException)     throw new SQLException(SQLException.SQLITE_CONSTRAINT,e);
 else     throw new SQLException(e);
  }
}",0.7279894875164258
160288,"@Override public long insertOrThrow(String table,String nullColumnHack,ContentValues values) throws SQLException {
  try {
    return database.insertOrThrow(table,nullColumnHack,AndroidSQLiteHelper.toAndroidContentValues(values));
  }
 catch (  android.database.SQLException e) {
    throw new SQLException(e);
  }
}","@Override public long insertOrThrow(String table,String nullColumnHack,ContentValues values) throws SQLException {
  try {
    return database.insertOrThrow(table,nullColumnHack,AndroidSQLiteHelper.toAndroidContentValues(values));
  }
 catch (  android.database.SQLException e) {
    if (e instanceof android.database.sqlite.SQLiteConstraintException)     throw new SQLException(SQLException.SQLITE_CONSTRAINT,e);
 else     throw new SQLException(e);
  }
}",0.7590673575129534
160289,"public void testChangeNotification() throws CouchbaseLiteException {
  Database.ChangeListener changeListener=new Database.ChangeListener(){
    @Override public void changed(    Database.ChangeEvent event){
      changeNotifications++;
    }
  }
;
  database.addChangeListener(changeListener);
  Map<String,Object> documentProperties=new HashMap<String,Object>();
  documentProperties.put(""String_Node_Str"",1);
  documentProperties.put(""String_Node_Str"",false);
  documentProperties.put(""String_Node_Str"",""String_Node_Str"");
  Body body=new Body(documentProperties);
  RevisionInternal rev1=new RevisionInternal(body);
  Status status=new Status();
  rev1=database.putRevision(rev1,null,false,status);
  assertEquals(1,changeNotifications);
}","public void testChangeNotification() throws CouchbaseLiteException {
  changeNotifications=0;
  Database.ChangeListener changeListener=new Database.ChangeListener(){
    @Override public void changed(    Database.ChangeEvent event){
      changeNotifications++;
    }
  }
;
  database.addChangeListener(changeListener);
  Map<String,Object> documentProperties=new HashMap<String,Object>();
  documentProperties.put(""String_Node_Str"",1);
  documentProperties.put(""String_Node_Str"",false);
  documentProperties.put(""String_Node_Str"",""String_Node_Str"");
  Body body=new Body(documentProperties);
  RevisionInternal rev1=new RevisionInternal(body);
  Status status=new Status();
  rev1=database.putRevision(rev1,null,false,status);
  assertEquals(1,changeNotifications);
}",0.9834546657842488
160290,"/** 
 * Test case that makes sure STOPPED notification is sent only once with continuous pull replication https://github.com/couchbase/couchbase-lite-android/issues/442
 */
public void testContinuousPullReplicationSendStoppedOnce() throws Exception {
  Log.d(TAG,""String_Node_Str"");
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,mockChangesFeed.generateMockResponse());
  server.play();
  Replication pullReplication=database.createPullReplication(server.getUrl(""String_Node_Str""));
  pullReplication.setContinuous(true);
  final CountDownLatch enteredIdleState=new CountDownLatch(1);
  final CountDownLatch enteredStoppedState=new CountDownLatch(2);
  pullReplication.addChangeListener(new Replication.ChangeListener(){
    @Override public void changed(    Replication.ChangeEvent event){
      if (event.getSource().getStatus() == Replication.ReplicationStatus.REPLICATION_IDLE) {
        Log.d(TAG,""String_Node_Str"");
        enteredIdleState.countDown();
      }
 else       if (event.getSource().getStatus() == Replication.ReplicationStatus.REPLICATION_STOPPED) {
        Log.d(TAG,""String_Node_Str"");
        enteredStoppedState.countDown();
      }
    }
  }
);
  pullReplication.start();
  boolean success=enteredIdleState.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  stopReplication(pullReplication);
  Log.d(TAG,""String_Node_Str"");
  success=enteredStoppedState.await(Replication.DEFAULT_MAX_TIMEOUT_FOR_SHUTDOWN + 30,TimeUnit.SECONDS);
  assertEquals(1,enteredStoppedState.getCount());
  assertFalse(success);
  Log.d(TAG,""String_Node_Str"");
  server.shutdown();
  Log.d(TAG,""String_Node_Str"");
}","/** 
 * Test case that makes sure STOPPED notification is sent only once with continuous pull replication https://github.com/couchbase/couchbase-lite-android/issues/442
 */
public void testContinuousPullReplicationSendStoppedOnce() throws Exception {
  Log.d(TAG,""String_Node_Str"");
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,mockChangesFeed.generateMockResponse());
  server.play();
  Replication pullReplication=database.createPullReplication(server.getUrl(""String_Node_Str""));
  pullReplication.setContinuous(true);
  final CountDownLatch enteredIdleState=new CountDownLatch(1);
  final CountDownLatch enteredStoppedState=new CountDownLatch(2);
  pullReplication.addChangeListener(new Replication.ChangeListener(){
    @Override public void changed(    Replication.ChangeEvent event){
      if (event.getSource().getStatus() == Replication.ReplicationStatus.REPLICATION_IDLE) {
        Log.d(TAG,""String_Node_Str"");
        enteredIdleState.countDown();
      }
 else       if (event.getSource().getStatus() == Replication.ReplicationStatus.REPLICATION_STOPPED) {
        Log.d(TAG,""String_Node_Str"");
        enteredStoppedState.countDown();
      }
    }
  }
);
  pullReplication.start();
  boolean success=enteredIdleState.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  stopReplication(pullReplication);
  Log.d(TAG,""String_Node_Str"");
  success=enteredStoppedState.await(30,TimeUnit.SECONDS);
  assertEquals(1,enteredStoppedState.getCount());
  assertFalse(success);
  Log.d(TAG,""String_Node_Str"");
  server.shutdown();
  Log.d(TAG,""String_Node_Str"");
}",0.9883749690823646
160291,"/** 
 * https://github.com/couchbase/couchbase-lite-java-core/issues/358
 * @related : https://github.com/couchbase/couchbase-lite-java-core/issues/55 related: testContinuousPushReplicationGoesIdle() <p/> test steps: - start replicator - make sure replicator becomes idle state - add N docs - when callback state == idle - assert that mock has received N docs
 */
public void testContinuousPushReplicationGoesIdleTwice() throws Exception {
  final int EXPECTED_REQUEST_COUNT=4;
  assertEquals(0,database.getLastSequenceNumber());
  MockDispatcher dispatcher=new MockDispatcher();
  final MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  mockCheckpointPut.setDelayMs(500);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockRevsDiff mockRevsDiff=new MockRevsDiff();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
  MockBulkDocs mockBulkDocs=new MockBulkDocs();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
  server.play();
  Replication replication=database.createPushReplication(server.getUrl(""String_Node_Str""));
  replication.setContinuous(true);
  CountDownLatch replicationIdle=new CountDownLatch(1);
  ReplicationIdleObserver idleObserver=new ReplicationIdleObserver(replicationIdle);
  replication.addChangeListener(idleObserver);
  replication.start();
  boolean success=replicationIdle.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  replication.removeChangeListener(idleObserver);
  RecordedRequest request1=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(request1);
  dispatcher.takeRecordedResponseBlocking(request1);
  assertEquals(1,server.getRequestCount());
class ReplicationTransitionToIdleObserver implements Replication.ChangeListener {
    private CountDownLatch doneSignal;
    private CountDownLatch checkSignal;
    public ReplicationTransitionToIdleObserver(    CountDownLatch doneSignal,    CountDownLatch checkSignal){
      this.doneSignal=doneSignal;
      this.checkSignal=checkSignal;
    }
    public void changed(    Replication.ChangeEvent event){
      Log.w(Log.TAG_SYNC,""String_Node_Str"" + event.toString());
      if (event.getTransition() != null) {
        if (event.getTransition().getSource() != event.getTransition().getDestination() && event.getTransition().getDestination() == ReplicationState.IDLE) {
          Log.w(Log.TAG_SYNC,""String_Node_Str"");
          Log.w(Log.TAG_SYNC,""String_Node_Str"" + server.getRequestCount());
          this.doneSignal.countDown();
          if (EXPECTED_REQUEST_COUNT == server.getRequestCount() || EXPECTED_REQUEST_COUNT - 1 == server.getRequestCount()) {
            this.checkSignal.countDown();
          }
        }
      }
    }
  }
  CountDownLatch checkStateToIdle=new CountDownLatch(1);
  CountDownLatch checkRequestCount=new CountDownLatch(1);
  ReplicationTransitionToIdleObserver replicationTransitionToIdleObserver=new ReplicationTransitionToIdleObserver(checkStateToIdle,checkRequestCount);
  replication.addChangeListener(replicationTransitionToIdleObserver);
  Log.w(Log.TAG_SYNC,""String_Node_Str"");
  for (int i=1; i <= 1; i++) {
    Map<String,Object> properties1=new HashMap<String,Object>();
    properties1.put(""String_Node_Str"" + String.valueOf(i),""String_Node_Str"" + String.valueOf(i));
    final Document doc=createDocWithProperties(properties1);
  }
  success=checkStateToIdle.await(20,TimeUnit.SECONDS);
  assertTrue(success);
  success=checkRequestCount.await(20,TimeUnit.SECONDS);
  assertTrue(success);
  RecordedRequest request3=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
  assertNotNull(request3);
  dispatcher.takeRecordedResponseBlocking(request3);
  RecordedRequest request4=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(request4);
  dispatcher.takeRecordedResponseBlocking(request4);
  Log.w(Log.TAG_SYNC,""String_Node_Str"" + server.getRequestCount());
  assertEquals(EXPECTED_REQUEST_COUNT,server.getRequestCount());
  replication.removeChangeListener(replicationTransitionToIdleObserver);
  stopReplication(replication);
}","/** 
 * https://github.com/couchbase/couchbase-lite-java-core/issues/358
 * @related : https://github.com/couchbase/couchbase-lite-java-core/issues/55 related: testContinuousPushReplicationGoesIdle() <p/> test steps: - start replicator - make sure replicator becomes idle state - add N docs - when callback state == idle - assert that mock has received N docs
 */
public void testContinuousPushReplicationGoesIdleTwice() throws Exception {
  final int EXPECTED_REQUEST_COUNT=4;
  assertEquals(0,database.getLastSequenceNumber());
  MockDispatcher dispatcher=new MockDispatcher();
  final MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  mockCheckpointPut.setDelayMs(500);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockRevsDiff mockRevsDiff=new MockRevsDiff();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
  MockBulkDocs mockBulkDocs=new MockBulkDocs();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
  server.play();
  Replication replication=database.createPushReplication(server.getUrl(""String_Node_Str""));
  replication.setContinuous(true);
  CountDownLatch replicationIdle=new CountDownLatch(1);
  ReplicationIdleObserver idleObserver=new ReplicationIdleObserver(replicationIdle);
  replication.addChangeListener(idleObserver);
  replication.start();
  boolean success=replicationIdle.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  replication.removeChangeListener(idleObserver);
  RecordedRequest request1=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(request1);
  dispatcher.takeRecordedResponseBlocking(request1);
  assertEquals(1,server.getRequestCount());
class ReplicationTransitionToIdleObserver implements Replication.ChangeListener {
    private CountDownLatch doneSignal;
    private CountDownLatch checkSignal;
    public ReplicationTransitionToIdleObserver(    CountDownLatch doneSignal,    CountDownLatch checkSignal){
      this.doneSignal=doneSignal;
      this.checkSignal=checkSignal;
    }
    public void changed(    Replication.ChangeEvent event){
      Log.w(Log.TAG_SYNC,""String_Node_Str"" + event.toString());
      if (event.getTransition() != null) {
        if (event.getTransition().getSource() != event.getTransition().getDestination() && event.getTransition().getDestination() == ReplicationState.IDLE) {
          Log.w(Log.TAG_SYNC,""String_Node_Str"");
          Log.w(Log.TAG_SYNC,""String_Node_Str"" + server.getRequestCount());
          this.doneSignal.countDown();
          if (EXPECTED_REQUEST_COUNT == server.getRequestCount() || EXPECTED_REQUEST_COUNT - 1 == server.getRequestCount()) {
            this.checkSignal.countDown();
          }
        }
      }
    }
  }
  CountDownLatch checkStateToIdle=new CountDownLatch(1);
  CountDownLatch checkRequestCount=new CountDownLatch(1);
  ReplicationTransitionToIdleObserver replicationTransitionToIdleObserver=new ReplicationTransitionToIdleObserver(checkStateToIdle,checkRequestCount);
  replication.addChangeListener(replicationTransitionToIdleObserver);
  Log.w(Log.TAG_SYNC,""String_Node_Str"");
  for (int i=1; i <= 1; i++) {
    Map<String,Object> properties1=new HashMap<String,Object>();
    properties1.put(""String_Node_Str"" + String.valueOf(i),""String_Node_Str"" + String.valueOf(i));
    final Document doc=createDocWithProperties(properties1);
  }
  success=checkStateToIdle.await(20,TimeUnit.SECONDS);
  assertTrue(success);
  success=checkRequestCount.await(20,TimeUnit.SECONDS);
  assertTrue(success);
  RecordedRequest request3=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
  assertNotNull(request3);
  dispatcher.takeRecordedResponseBlocking(request3);
  Log.w(Log.TAG_SYNC,""String_Node_Str"" + server.getRequestCount());
  assertTrue(EXPECTED_REQUEST_COUNT == server.getRequestCount() || EXPECTED_REQUEST_COUNT - 1 == server.getRequestCount());
  replication.removeChangeListener(replicationTransitionToIdleObserver);
  stopReplication(replication);
}",0.9710656316160904
160292,"/** 
 * Test goOffline() method in the context of a continuous pusher. - 1. Add a local document - 2. Kick off continuous push replication - 3. Wait for document to be pushed - 4. Call goOffline() - 6. Call goOnline() - 5. Add a 2nd local document - 7. Wait for 2nd document to be pushed
 * @throws Exception
 */
public void testGoOfflinePusher() throws Exception {
  int previous=RemoteRequestRetry.RETRY_DELAY_MS;
  RemoteRequestRetry.RETRY_DELAY_MS=5;
  try {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    Document doc1=createDocumentWithProperties(database,properties);
    MockDispatcher dispatcher=new MockDispatcher();
    MockWebServer server=new MockWebServer();
    server.setDispatcher(dispatcher);
    server.play();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    MockRevsDiff mockRevsDiff=new MockRevsDiff();
    mockRevsDiff.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
    MockBulkDocs mockBulkDocs=new MockBulkDocs();
    mockBulkDocs.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
    Replication replicator=database.createPushReplication(server.getUrl(""String_Node_Str""));
    replicator.setContinuous(true);
    CountDownLatch replicationIdleSignal=new CountDownLatch(1);
    ReplicationIdleObserver replicationIdleObserver=new ReplicationIdleObserver(replicationIdleSignal);
    replicator.addChangeListener(replicationIdleObserver);
    replicator.start();
    boolean successful=replicationIdleSignal.await(30,TimeUnit.SECONDS);
    assertTrue(successful);
    boolean foundCheckpointPut=false;
    String expectedLastSequence=""String_Node_Str"";
    while (!foundCheckpointPut) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
      if (request.getMethod().equals(""String_Node_Str"")) {
        foundCheckpointPut=true;
        Assert.assertTrue(request.getUtf8Body().indexOf(expectedLastSequence) != -1);
        dispatcher.takeRecordedResponseBlocking(request);
      }
    }
    RecordedRequest bulkDocsRequest1=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(bulkDocsRequest1);
    assertBulkDocJsonContainsDoc(bulkDocsRequest1,doc1);
    putReplicationOffline(replicator);
    dispatcher.clearQueuedResponse(MockHelper.PATH_REGEX_CHECKPOINT);
    dispatcher.clearQueuedResponse(MockHelper.PATH_REGEX_REVS_DIFF);
    dispatcher.clearQueuedResponse(MockHelper.PATH_REGEX_BULK_DOCS);
    properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    Document doc2=createDocumentWithProperties(database,properties);
    try {
      Thread.sleep(5000 * 5);
    }
 catch (    Exception ex) {
    }
    RecordedRequest checkpointRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHECKPOINT);
    assertNull(checkpointRequest);
    RecordedRequest revsDiffRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_REVS_DIFF);
    assertNull(revsDiffRequest);
    RecordedRequest bulkDocsRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNull(bulkDocsRequest);
    putReplicationOnline(replicator);
    foundCheckpointPut=false;
    expectedLastSequence=""String_Node_Str"";
    while (!foundCheckpointPut) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
      if (request.getMethod().equals(""String_Node_Str"")) {
        foundCheckpointPut=true;
        Assert.assertTrue(request.getUtf8Body().indexOf(expectedLastSequence) != -1);
        dispatcher.takeRecordedResponseBlocking(request);
      }
    }
    RecordedRequest bulkDocsRequest2=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(bulkDocsRequest2);
    assertBulkDocJsonContainsDoc(bulkDocsRequest2,doc2);
    stopReplication(replicator);
    server.shutdown();
  }
  finally {
    RemoteRequestRetry.RETRY_DELAY_MS=previous;
  }
}","/** 
 * Test goOffline() method in the context of a continuous pusher. - 1. Add a local document - 2. Kick off continuous push replication - 3. Wait for document to be pushed - 4. Call goOffline() - 6. Call goOnline() - 5. Add a 2nd local document - 7. Wait for 2nd document to be pushed
 * @throws Exception
 */
public void testGoOfflinePusher() throws Exception {
  int previous=RemoteRequestRetry.RETRY_DELAY_MS;
  RemoteRequestRetry.RETRY_DELAY_MS=5;
  try {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    Document doc1=createDocumentWithProperties(database,properties);
    MockDispatcher dispatcher=new MockDispatcher();
    MockWebServer server=new MockWebServer();
    server.setDispatcher(dispatcher);
    server.play();
    MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
    mockCheckpointPut.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
    MockRevsDiff mockRevsDiff=new MockRevsDiff();
    mockRevsDiff.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
    MockBulkDocs mockBulkDocs=new MockBulkDocs();
    mockBulkDocs.setSticky(true);
    dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
    Replication replicator=database.createPushReplication(server.getUrl(""String_Node_Str""));
    replicator.setContinuous(true);
    CountDownLatch replicationIdleSignal=new CountDownLatch(1);
    ReplicationIdleObserver replicationIdleObserver=new ReplicationIdleObserver(replicationIdleSignal);
    replicator.addChangeListener(replicationIdleObserver);
    replicator.start();
    boolean successful=replicationIdleSignal.await(30,TimeUnit.SECONDS);
    assertTrue(successful);
    boolean foundCheckpointPut=false;
    String expectedLastSequence=""String_Node_Str"";
    while (!foundCheckpointPut) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
      if (request.getMethod().equals(""String_Node_Str"")) {
        foundCheckpointPut=true;
        Assert.assertTrue(request.getUtf8Body().indexOf(expectedLastSequence) != -1);
        dispatcher.takeRecordedResponseBlocking(request);
      }
    }
    RecordedRequest bulkDocsRequest1=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(bulkDocsRequest1);
    assertBulkDocJsonContainsDoc(bulkDocsRequest1,doc1);
    putReplicationOffline(replicator);
    properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    Document doc2=createDocumentWithProperties(database,properties);
    try {
      Thread.sleep(1000 * 3);
    }
 catch (    Exception ex) {
    }
    RecordedRequest bulkDocsRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNull(bulkDocsRequest);
    putReplicationOnline(replicator);
    foundCheckpointPut=false;
    expectedLastSequence=""String_Node_Str"";
    while (!foundCheckpointPut) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_CHECKPOINT);
      if (request.getMethod().equals(""String_Node_Str"")) {
        foundCheckpointPut=true;
        Assert.assertTrue(request.getUtf8Body().indexOf(expectedLastSequence) != -1);
        dispatcher.takeRecordedResponseBlocking(request);
      }
    }
    RecordedRequest bulkDocsRequest2=dispatcher.takeRequest(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(bulkDocsRequest2);
    assertBulkDocJsonContainsDoc(bulkDocsRequest2,doc2);
    stopReplication(replicator);
    server.shutdown();
  }
  finally {
    RemoteRequestRetry.RETRY_DELAY_MS=previous;
  }
}",0.7145596318547872
160293,"public double runOne(final int numberOfDocuments,final int sizeOfDocuments) throws Exception {
  String[] bigObj=new String[sizeOfDocuments];
  for (int i=0; i < sizeOfDocuments; i++) {
    bigObj[i]=_propertyValue;
  }
  final Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",bigObj);
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  for (int i=0; i < numberOfDocuments; i++) {
    String docId=String.format(""String_Node_Str"",i,docIdTimestamp);
    try {
      addDocWithId(docId,props,""String_Node_Str"",false);
    }
 catch (    IOException ioex) {
      Log.v(""String_Node_Str"",TAG + ""String_Node_Str"",ioex);
      fail();
    }
  }
  URL remote=getReplicationURL();
  final Replication replPush=database.createPushReplication(remote);
  replPush.setContinuous(false);
  if (!isSyncGateway(remote)) {
    replPush.setCreateTarget(true);
    Assert.assertTrue(replPush.shouldCreateTarget());
  }
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPush);
  runReplication(replPush);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPush);
  long startMillis=System.currentTimeMillis();
  final Replication replPull=(Replication)database.createPullReplication(remote);
  replPull.setContinuous(false);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPull);
  runReplication(replPull);
  double executionTime=Long.valueOf(System.currentTimeMillis() - startMillis);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + executionTime+ ""String_Node_Str""+ numberOfDocuments+ ""String_Node_Str""+ sizeOfDocuments);
  assertNotNull(database);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPull);
  return executionTime;
}","public double runOne(final int numberOfDocuments,final int sizeOfDocuments) throws Exception {
  char[] array=new char[sizeOfDocuments];
  Arrays.fill(array,'*');
  String body=new String(array);
  final Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",body);
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  for (int i=0; i < numberOfDocuments; i++) {
    String docId=String.format(""String_Node_Str"",i,docIdTimestamp);
    try {
      addDocWithId(docId,props,null,false);
    }
 catch (    IOException ioex) {
      Log.v(""String_Node_Str"",TAG + ""String_Node_Str"",ioex);
      fail();
    }
  }
  URL remote=getReplicationURL();
  final Replication replPush=database.createPushReplication(remote);
  replPush.setContinuous(false);
  if (!isSyncGateway(remote)) {
    replPush.setCreateTarget(true);
    Assert.assertTrue(replPush.shouldCreateTarget());
  }
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPush);
  runReplication(replPush);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPush);
  Database database2=ensureEmptyDatabase(""String_Node_Str"");
  long startMillis=System.currentTimeMillis();
  final Replication replPull=database2.createPullReplication(remote);
  replPull.setContinuous(false);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPull);
  runReplication(replPull);
  double executionTime=Long.valueOf(System.currentTimeMillis() - startMillis);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + executionTime+ ""String_Node_Str""+ numberOfDocuments+ ""String_Node_Str""+ sizeOfDocuments);
  assertNotNull(database2);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + replPull);
  return executionTime;
}",0.9140005870267096
160294,"public double runOne(final int numberOfDocuments,final int sizeOfDocuments) throws Exception {
  String[] bigObj=new String[sizeOfDocuments];
  for (int i=0; i < sizeOfDocuments; i++) {
    bigObj[i]=_propertyValue;
  }
  final Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",bigObj);
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  for (int i=0; i < numberOfDocuments; i++) {
    String docId=String.format(""String_Node_Str"",i,docIdTimestamp);
    try {
      addDocWithId(docId,props,""String_Node_Str"",false);
    }
 catch (    IOException ioex) {
      Log.v(""String_Node_Str"",TAG + ""String_Node_Str"",ioex);
      fail();
    }
  }
  URL remote=getReplicationURL();
  long startMillis=System.currentTimeMillis();
  final Replication repl=database.createPushReplication(remote);
  repl.setContinuous(false);
  if (!isSyncGateway(remote)) {
    repl.setCreateTarget(true);
    Assert.assertTrue(repl.shouldCreateTarget());
  }
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + repl);
  runReplication(repl);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + repl);
  double executionTime=Long.valueOf(System.currentTimeMillis() - startMillis);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + executionTime+ ""String_Node_Str""+ numberOfDocuments+ ""String_Node_Str""+ sizeOfDocuments);
  return executionTime;
}","public double runOne(final int numberOfDocuments,final int sizeOfDocuments) throws Exception {
  char[] array=new char[sizeOfDocuments];
  Arrays.fill(array,'*');
  String body=new String(array);
  final Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",body);
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  for (int i=0; i < numberOfDocuments; i++) {
    String docId=String.format(""String_Node_Str"",i,docIdTimestamp);
    try {
      addDocWithId(docId,props,null,false);
    }
 catch (    IOException ioex) {
      Log.v(""String_Node_Str"",TAG + ""String_Node_Str"",ioex);
      fail();
    }
  }
  URL remote=getReplicationURL();
  long startMillis=System.currentTimeMillis();
  final Replication repl=database.createPushReplication(remote);
  repl.setContinuous(false);
  if (!isSyncGateway(remote)) {
    repl.setCreateTarget(true);
    Assert.assertTrue(repl.shouldCreateTarget());
  }
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + repl);
  runReplication(repl);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + repl);
  double executionTime=Long.valueOf(System.currentTimeMillis() - startMillis);
  Log.v(""String_Node_Str"",TAG + ""String_Node_Str"" + executionTime+ ""String_Node_Str""+ numberOfDocuments+ ""String_Node_Str""+ sizeOfDocuments);
  return executionTime;
}",0.8504983388704319
160295,"/** 
 * Make sure that if a continuous push gets an error pushing a doc, it will keep retrying it rather than giving up right away.
 * @throws Exception
 */
public void testContinuousPushRetryBehavior() throws Exception {
  RemoteRequestRetry.RETRY_DELAY_MS=5;
  ReplicationInternal.RETRY_DELAY_SECONDS=1;
  ReplicationInternal.MAX_RETRIES=3;
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  mockCheckpointPut.setDelayMs(500);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockRevsDiff mockRevsDiff=new MockRevsDiff();
  mockRevsDiff.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
  MockResponse mockResponse=new MockResponse().setResponseCode(503);
  WrappedSmartMockResponse mockBulkDocs=new WrappedSmartMockResponse(mockResponse,false);
  mockBulkDocs.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
  server.play();
  Replication replication=database.createPushReplication(server.getUrl(""String_Node_Str""));
  replication.setContinuous(true);
  CountDownLatch replicationIdle=new CountDownLatch(1);
  ReplicationIdleObserver idleObserver=new ReplicationIdleObserver(replicationIdle);
  replication.addChangeListener(idleObserver);
  replication.start();
  boolean success=replicationIdle.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  replication.removeChangeListener(idleObserver);
  Document doc1=createDocumentForPushReplication(""String_Node_Str"",null,null);
  int numAttempts=RemoteRequestRetry.MAX_RETRIES + 1;
  for (int i=0; i < numAttempts; i++) {
    RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(request);
    dispatcher.takeRecordedResponseBlocking(request);
  }
  for (int j=0; j < RemoteRequestRetry.MAX_RETRIES; j++) {
    for (int i=0; i < numAttempts; i++) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
      assertNotNull(request);
      dispatcher.takeRecordedResponseBlocking(request);
    }
  }
  stopReplication(replication);
  server.shutdown();
}","/** 
 * Make sure that if a continuous push gets an error pushing a doc, it will keep retrying it rather than giving up right away.
 * @throws Exception
 */
public void testContinuousPushRetryBehavior() throws Exception {
  RemoteRequestRetry.RETRY_DELAY_MS=5;
  ReplicationInternal.RETRY_DELAY_SECONDS=1;
  ReplicationInternal.MAX_RETRIES=3;
  MockDispatcher dispatcher=new MockDispatcher();
  MockWebServer server=MockHelper.getMockWebServer(dispatcher);
  dispatcher.setServerType(MockDispatcher.ServerType.SYNC_GW);
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  mockCheckpointPut.setSticky(true);
  mockCheckpointPut.setDelayMs(500);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  MockRevsDiff mockRevsDiff=new MockRevsDiff();
  mockRevsDiff.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_REVS_DIFF,mockRevsDiff);
  MockResponse mockResponse=new MockResponse().setResponseCode(503);
  WrappedSmartMockResponse mockBulkDocs=new WrappedSmartMockResponse(mockResponse,false);
  mockBulkDocs.setSticky(true);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_BULK_DOCS,mockBulkDocs);
  server.play();
  Replication replication=database.createPushReplication(server.getUrl(""String_Node_Str""));
  replication.setContinuous(true);
  CountDownLatch replicationIdle=new CountDownLatch(1);
  ReplicationIdleObserver idleObserver=new ReplicationIdleObserver(replicationIdle);
  replication.addChangeListener(idleObserver);
  replication.start();
  boolean success=replicationIdle.await(30,TimeUnit.SECONDS);
  assertTrue(success);
  replication.removeChangeListener(idleObserver);
  Document doc1=createDocumentForPushReplication(""String_Node_Str"",null,null);
  int numAttempts=RemoteRequestRetry.MAX_RETRIES + 1;
  for (int i=0; i < numAttempts; i++) {
    RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
    assertNotNull(request);
    dispatcher.takeRecordedResponseBlocking(request);
  }
  for (int j=0; j < ReplicationInternal.MAX_RETRIES; j++) {
    for (int i=0; i < numAttempts; i++) {
      RecordedRequest request=dispatcher.takeRequestBlocking(MockHelper.PATH_REGEX_BULK_DOCS);
      assertNotNull(request);
      dispatcher.takeRecordedResponseBlocking(request);
    }
  }
  stopReplication(replication);
  server.shutdown();
}",0.9929802169751116
160296,"public double runOne(int numberOfDocuments,int sizeOfDocuments) throws CouchbaseLiteException {
  return 0;
}","public double runOne(int numberOfDocuments,int sizeOfDocuments) throws Exception {
  return 0;
}",0.9365853658536586
160297,"@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  System.out.println(String.format(""String_Node_Str"",request));
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!responseQueue.isEmpty()) {
        SmartMockResponse smartMockResponse=responseQueue.take();
        if (smartMockResponse.delayMs() > 0) {
          System.out.println(String.format(""String_Node_Str"",smartMockResponse.delayMs()));
          Thread.sleep(smartMockResponse.delayMs());
          System.out.println(""String_Node_Str"");
        }
        if (smartMockResponse.isSticky()) {
          responseQueue.put(smartMockResponse);
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        System.out.println(String.format(""String_Node_Str"",mockResponse.getBody()));
        addHeaders(mockResponse);
        return mockResponse;
      }
 else {
        return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_ACCEPTABLE);
      }
    }
  }
  return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_ACCEPTABLE);
}","@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
  System.out.println(String.format(""String_Node_Str"",request));
  for (  String pathRegex : queueMap.keySet()) {
    if (regexMatches(pathRegex,request.getPath())) {
      recordRequest(pathRegex,request);
      BlockingQueue<SmartMockResponse> responseQueue=queueMap.get(pathRegex);
      if (responseQueue == null) {
        String msg=String.format(""String_Node_Str"",pathRegex);
        throw new RuntimeException(msg);
      }
      if (!responseQueue.isEmpty()) {
        SmartMockResponse smartMockResponse=responseQueue.take();
        if (smartMockResponse.isSticky()) {
          responseQueue.put(smartMockResponse);
        }
        if (smartMockResponse.delayMs() > 0) {
          System.out.println(String.format(""String_Node_Str"",smartMockResponse.delayMs()));
          Thread.sleep(smartMockResponse.delayMs());
          System.out.println(""String_Node_Str"");
        }
        MockResponse mockResponse=smartMockResponse.generateMockResponse(request);
        System.out.println(String.format(""String_Node_Str"",mockResponse.getBody()));
        addHeaders(mockResponse);
        return mockResponse;
      }
 else {
        return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_ACCEPTABLE);
      }
    }
  }
  return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_ACCEPTABLE);
}",0.9282700421940928
160298,"public MockDocumentGet(MockDocument mockDocument){
  this();
  this.docId=mockDocument.getDocId();
  this.rev=mockDocument.getDocRev();
  this.jsonMap=mockDocument.getJsonMap();
  this.revHistoryMap=new HashMap<String,Object>();
}","public MockDocumentGet(MockDocument mockDocument){
  this();
  this.docId=mockDocument.getDocId();
  this.rev=mockDocument.getDocRev();
  this.jsonMap=mockDocument.getJsonMap();
}",0.8753056234718827
160299,"/** 
 * Do a pull replication TODO - instead calling server.takeRequest, call dispatcher.takeRequest and pass a path regex
 * @param shutdownMockWebserver - should this test shutdown the mockwebserverwhen done?  if another test wants to pick up where this left off, you should pass false.
 * @param serverType - should the mock return the Sync Gateway server type inthe ""Server"" HTTP Header?  this changes the behavior of the replicator to use bulk_get and POST reqeusts for _changes feeds.
 * @param addAttachments - should the mock sync gateway return docs with attachments?
 * @return a map that contains the mockwebserver (key=""server"") and the mock dispatcher(key=""dispatcher"")
 */
public Map<String,Object> mockSinglePull(boolean shutdownMockWebserver,MockDispatcher.ServerType serverType,boolean addAttachments) throws Exception {
  String doc1Id=""String_Node_Str"";
  String doc1Rev=""String_Node_Str"";
  String doc2Id=""String_Node_Str"";
  String doc2Rev=""String_Node_Str"";
  String doc1AttachName=""String_Node_Str"";
  String doc2AttachName=""String_Node_Str"";
  int doc1Seq=1;
  int doc2Seq=2;
  MockWebServer server=MockHelper.getMockWebServer();
  MockDispatcher dispatcher=new MockDispatcher();
  dispatcher.setServerType(serverType);
  server.setDispatcher(dispatcher);
  MockResponse fakeCheckpointResponse=new MockResponse();
  MockHelper.set404NotFoundJson(fakeCheckpointResponse);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,fakeCheckpointResponse);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  MockChangedDoc mockChangedDoc1=new MockChangedDoc().setSeq(doc1Seq).setDocId(doc1Id).setChangedRevIds(Arrays.asList(doc1Rev));
  mockChangesFeed.add(mockChangedDoc1);
  MockChangedDoc mockChangedDoc2=new MockChangedDoc().setSeq(doc2Seq).setDocId(doc2Id).setChangedRevIds(Arrays.asList(doc2Rev));
  mockChangesFeed.add(mockChangedDoc2);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,mockChangesFeed.generateMockResponse());
  Map<String,Object> doc1JsonMap=MockHelper.generateRandomJsonMap();
  MockDocumentGet mockDocumentGet=new MockDocumentGet().setDocId(doc1Id).setRev(doc1Rev).setJsonMap(doc1JsonMap);
  if (addAttachments) {
    mockDocumentGet.addAttachmentFilename(doc1AttachName);
  }
  dispatcher.enqueueResponse(""String_Node_Str"",mockDocumentGet.generateMockResponse());
  Map<String,Object> doc2JsonMap=MockHelper.generateRandomJsonMap();
  mockDocumentGet=new MockDocumentGet().setDocId(doc2Id).setRev(doc2Rev).setJsonMap(doc2JsonMap);
  if (addAttachments) {
    mockDocumentGet.addAttachmentFilename(doc2AttachName);
  }
  dispatcher.enqueueResponse(""String_Node_Str"",mockDocumentGet.generateMockResponse());
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  server.play();
  Replication pullReplication=doPullReplication(server.getUrl(""String_Node_Str""));
  assertNotNull(database);
  Document doc1=database.getDocument(doc1Id);
  assertNotNull(doc1);
  assertNotNull(doc1.getCurrentRevisionId());
  assertTrue(doc1.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertNotNull(doc1.getProperties());
  assertEquals(doc1JsonMap,doc1.getUserProperties());
  Document doc2=database.getDocument(doc2Id);
  assertNotNull(doc2);
  assertNotNull(doc2.getCurrentRevisionId());
  assertNotNull(doc2.getProperties());
  assertTrue(doc2.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertEquals(doc2JsonMap,doc2.getUserProperties());
  if (addAttachments) {
    attachmentAsserts(doc1AttachName,doc1);
    attachmentAsserts(doc2AttachName,doc2);
  }
  RecordedRequest getCheckpointRequest=server.takeRequest();
  assertTrue(getCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(getCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  RecordedRequest getChangesFeedRequest=server.takeRequest();
  if (serverType == MockDispatcher.ServerType.SYNC_GW) {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
 else {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
  assertTrue(getChangesFeedRequest.getPath().matches(MockHelper.PATH_REGEX_CHANGES));
  RecordedRequest doc1Request=server.takeRequest();
  assertTrue(doc1Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc1Request.getPath().matches(""String_Node_Str""));
  RecordedRequest doc2Request=server.takeRequest();
  assertTrue(doc2Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc2Request.getPath().matches(""String_Node_Str""));
  RecordedRequest putCheckpointRequest=server.takeRequest();
  assertTrue(putCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(putCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  putCheckpointRequest=server.takeRequest();
  assertTrue(putCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(putCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  if (shutdownMockWebserver) {
    server.shutdown();
  }
  Map<String,Object> returnVal=new HashMap<String,Object>();
  returnVal.put(""String_Node_Str"",server);
  returnVal.put(""String_Node_Str"",dispatcher);
  return returnVal;
}","/** 
 * Do a pull replication TODO - instead calling server.takeRequest, call dispatcher.takeRequest and pass a path regex
 * @param shutdownMockWebserver - should this test shutdown the mockwebserverwhen done?  if another test wants to pick up where this left off, you should pass false.
 * @param serverType - should the mock return the Sync Gateway server type inthe ""Server"" HTTP Header?  this changes the behavior of the replicator to use bulk_get and POST reqeusts for _changes feeds.
 * @param addAttachments - should the mock sync gateway return docs with attachments?
 * @return a map that contains the mockwebserver (key=""server"") and the mock dispatcher(key=""dispatcher"")
 */
public Map<String,Object> mockSinglePull(boolean shutdownMockWebserver,MockDispatcher.ServerType serverType,boolean addAttachments) throws Exception {
  String doc1Id=""String_Node_Str"";
  String doc1Rev=""String_Node_Str"";
  String doc2Id=""String_Node_Str"";
  String doc2Rev=""String_Node_Str"";
  String doc1AttachName=""String_Node_Str"";
  String doc2AttachName=""String_Node_Str"";
  int doc1Seq=1;
  int doc2Seq=2;
  MockWebServer server=MockHelper.getMockWebServer();
  MockDispatcher dispatcher=new MockDispatcher();
  dispatcher.setServerType(serverType);
  server.setDispatcher(dispatcher);
  MockResponse fakeCheckpointResponse=new MockResponse();
  MockHelper.set404NotFoundJson(fakeCheckpointResponse);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,fakeCheckpointResponse);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  MockChangedDoc mockChangedDoc1=new MockChangedDoc().setSeq(doc1Seq).setDocId(doc1Id).setChangedRevIds(Arrays.asList(doc1Rev));
  mockChangesFeed.add(mockChangedDoc1);
  MockChangedDoc mockChangedDoc2=new MockChangedDoc().setSeq(doc2Seq).setDocId(doc2Id).setChangedRevIds(Arrays.asList(doc2Rev));
  mockChangesFeed.add(mockChangedDoc2);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,mockChangesFeed.generateMockResponse());
  Map<String,Object> doc1JsonMap=MockHelper.generateRandomJsonMap();
  MockDocumentGet mockDocumentGet=new MockDocumentGet().setDocId(doc1Id).setRev(doc1Rev).setJsonMap(doc1JsonMap);
  if (addAttachments) {
    mockDocumentGet.addAttachmentFilename(doc1AttachName);
  }
  String doc1PathRegex=""String_Node_Str"";
  dispatcher.enqueueResponse(doc1PathRegex,mockDocumentGet.generateMockResponse());
  Map<String,Object> doc2JsonMap=MockHelper.generateRandomJsonMap();
  mockDocumentGet=new MockDocumentGet().setDocId(doc2Id).setRev(doc2Rev).setJsonMap(doc2JsonMap);
  if (addAttachments) {
    mockDocumentGet.addAttachmentFilename(doc2AttachName);
  }
  String doc2PathRegex=""String_Node_Str"";
  dispatcher.enqueueResponse(doc2PathRegex,mockDocumentGet.generateMockResponse());
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  server.play();
  Replication pullReplication=doPullReplication(server.getUrl(""String_Node_Str""));
  assertNotNull(database);
  Document doc1=database.getDocument(doc1Id);
  assertNotNull(doc1);
  assertNotNull(doc1.getCurrentRevisionId());
  assertTrue(doc1.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertNotNull(doc1.getProperties());
  assertEquals(doc1JsonMap,doc1.getUserProperties());
  Document doc2=database.getDocument(doc2Id);
  assertNotNull(doc2);
  assertNotNull(doc2.getCurrentRevisionId());
  assertNotNull(doc2.getProperties());
  assertTrue(doc2.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertEquals(doc2JsonMap,doc2.getUserProperties());
  if (addAttachments) {
    attachmentAsserts(doc1AttachName,doc1);
    attachmentAsserts(doc2AttachName,doc2);
  }
  RecordedRequest getCheckpointRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHECKPOINT);
  assertTrue(getCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(getCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  RecordedRequest getChangesFeedRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHANGES);
  if (serverType == MockDispatcher.ServerType.SYNC_GW) {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
 else {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
  assertTrue(getChangesFeedRequest.getPath().matches(MockHelper.PATH_REGEX_CHANGES));
  RecordedRequest doc1Request=dispatcher.takeRequest(doc1PathRegex);
  assertTrue(doc1Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc1Request.getPath().matches(doc1PathRegex));
  RecordedRequest doc2Request=dispatcher.takeRequest(doc2PathRegex);
  assertTrue(doc2Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc2Request.getPath().matches(doc2PathRegex));
  RecordedRequest putCheckpointRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(putCheckpointRequest);
  assertTrue(putCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(putCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  if (shutdownMockWebserver) {
    server.shutdown();
  }
  Map<String,Object> returnVal=new HashMap<String,Object>();
  returnVal.put(""String_Node_Str"",server);
  returnVal.put(""String_Node_Str"",dispatcher);
  return returnVal;
}",0.7918107880714219
160300,"/** 
 * Simulate the following: - Add a few docs and do a pull replication - One doc on sync gateway is now updated - Do a second pull replication - Assert we get the updated doc and save it locally
 */
public Map<String,Object> mockMultiplePull(boolean shutdownMockWebserver,MockDispatcher.ServerType serverType) throws Exception {
  String doc1Id=""String_Node_Str"";
  boolean addAttachments=false;
  Map<String,Object> serverAndDispatcher=mockSinglePull(false,serverType,addAttachments);
  MockWebServer server=(MockWebServer)serverAndDispatcher.get(""String_Node_Str"");
  MockDispatcher dispatcher=(MockDispatcher)serverAndDispatcher.get(""String_Node_Str"");
  String doc1Rev=""String_Node_Str"";
  int doc1Seq=3;
  String checkpointRev=""String_Node_Str"";
  String checkpointLastSequence=""String_Node_Str"";
  MockCheckpointGet mockCheckpointGet=new MockCheckpointGet();
  mockCheckpointGet.setOk(""String_Node_Str"");
  mockCheckpointGet.setRev(checkpointRev);
  mockCheckpointGet.setLastSequence(checkpointLastSequence);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointGet);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  MockChangedDoc mockChangedDoc1=new MockChangedDoc().setSeq(doc1Seq).setDocId(doc1Id).setChangedRevIds(Arrays.asList(doc1Rev));
  mockChangesFeed.add(mockChangedDoc1);
  MockResponse fakeChangesResponse=mockChangesFeed.generateMockResponse();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,fakeChangesResponse);
  Map<String,Object> doc1JsonMap=MockHelper.generateRandomJsonMap();
  MockDocumentGet mockDocumentGet=new MockDocumentGet().setDocId(doc1Id).setRev(doc1Rev).setJsonMap(doc1JsonMap);
  dispatcher.enqueueResponse(""String_Node_Str"",mockDocumentGet.generateMockResponse());
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  doPullReplication(server.getUrl(""String_Node_Str""));
  assertNotNull(database);
  Document doc1=database.getDocument(doc1Id);
  assertNotNull(doc1);
  assertNotNull(doc1.getCurrentRevisionId());
  assertTrue(doc1.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertEquals(doc1JsonMap,doc1.getUserProperties());
  RecordedRequest getCheckpointRequest=server.takeRequest();
  assertTrue(getCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(getCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  RecordedRequest getChangesFeedRequest=server.takeRequest();
  if (serverType == MockDispatcher.ServerType.SYNC_GW) {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
 else {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
  assertTrue(getChangesFeedRequest.getPath().matches(MockHelper.PATH_REGEX_CHANGES));
  Log.d(TAG,""String_Node_Str"",getChangesFeedRequest.getPath());
  RecordedRequest doc1Request=server.takeRequest();
  assertTrue(doc1Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc1Request.getPath().matches(""String_Node_Str""));
  RecordedRequest putCheckpointRequest=server.takeRequest();
  assertTrue(putCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(putCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  String utf8Body=putCheckpointRequest.getUtf8Body();
  Map<String,Object> checkpointJson=Manager.getObjectMapper().readValue(utf8Body,Map.class);
  assertEquals(""String_Node_Str"",checkpointJson.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",checkpointJson.get(""String_Node_Str""));
  if (shutdownMockWebserver) {
    server.shutdown();
  }
  Map<String,Object> returnVal=new HashMap<String,Object>();
  returnVal.put(""String_Node_Str"",server);
  returnVal.put(""String_Node_Str"",dispatcher);
  return returnVal;
}","/** 
 * Simulate the following: - Add a few docs and do a pull replication - One doc on sync gateway is now updated - Do a second pull replication - Assert we get the updated doc and save it locally
 */
public Map<String,Object> mockMultiplePull(boolean shutdownMockWebserver,MockDispatcher.ServerType serverType) throws Exception {
  String doc1Id=""String_Node_Str"";
  boolean addAttachments=false;
  Map<String,Object> serverAndDispatcher=mockSinglePull(false,serverType,addAttachments);
  MockWebServer server=(MockWebServer)serverAndDispatcher.get(""String_Node_Str"");
  MockDispatcher dispatcher=(MockDispatcher)serverAndDispatcher.get(""String_Node_Str"");
  dispatcher.reset();
  String doc1Rev=""String_Node_Str"";
  int doc1Seq=3;
  String checkpointRev=""String_Node_Str"";
  String checkpointLastSequence=""String_Node_Str"";
  MockCheckpointGet mockCheckpointGet=new MockCheckpointGet();
  mockCheckpointGet.setOk(""String_Node_Str"");
  mockCheckpointGet.setRev(checkpointRev);
  mockCheckpointGet.setLastSequence(checkpointLastSequence);
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointGet);
  MockChangesFeed mockChangesFeed=new MockChangesFeed();
  MockChangedDoc mockChangedDoc1=new MockChangedDoc().setSeq(doc1Seq).setDocId(doc1Id).setChangedRevIds(Arrays.asList(doc1Rev));
  mockChangesFeed.add(mockChangedDoc1);
  MockResponse fakeChangesResponse=mockChangesFeed.generateMockResponse();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHANGES,fakeChangesResponse);
  Map<String,Object> doc1JsonMap=MockHelper.generateRandomJsonMap();
  MockDocumentGet mockDocumentGet=new MockDocumentGet().setDocId(doc1Id).setRev(doc1Rev).setJsonMap(doc1JsonMap);
  String doc1PathRegex=""String_Node_Str"";
  dispatcher.enqueueResponse(doc1PathRegex,mockDocumentGet.generateMockResponse());
  MockCheckpointPut mockCheckpointPut=new MockCheckpointPut();
  dispatcher.enqueueResponse(MockHelper.PATH_REGEX_CHECKPOINT,mockCheckpointPut);
  doPullReplication(server.getUrl(""String_Node_Str""));
  assertNotNull(database);
  Document doc1=database.getDocument(doc1Id);
  assertNotNull(doc1);
  assertNotNull(doc1.getCurrentRevisionId());
  assertTrue(doc1.getCurrentRevisionId().startsWith(""String_Node_Str""));
  assertEquals(doc1JsonMap,doc1.getUserProperties());
  RecordedRequest getCheckpointRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(getCheckpointRequest);
  assertTrue(getCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(getCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  RecordedRequest getChangesFeedRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHANGES);
  if (serverType == MockDispatcher.ServerType.SYNC_GW) {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
 else {
    assertTrue(getChangesFeedRequest.getMethod().equals(""String_Node_Str""));
  }
  assertTrue(getChangesFeedRequest.getPath().matches(MockHelper.PATH_REGEX_CHANGES));
  Log.d(TAG,""String_Node_Str"",getChangesFeedRequest.getPath());
  RecordedRequest doc1Request=dispatcher.takeRequest(doc1PathRegex);
  assertTrue(doc1Request.getMethod().equals(""String_Node_Str""));
  assertTrue(doc1Request.getPath().matches(""String_Node_Str""));
  Thread.sleep(2000);
  RecordedRequest putCheckpointRequest=dispatcher.takeRequest(MockHelper.PATH_REGEX_CHECKPOINT);
  assertNotNull(putCheckpointRequest);
  assertTrue(putCheckpointRequest.getMethod().equals(""String_Node_Str""));
  assertTrue(putCheckpointRequest.getPath().matches(MockHelper.PATH_REGEX_CHECKPOINT));
  String utf8Body=putCheckpointRequest.getUtf8Body();
  Map<String,Object> checkpointJson=Manager.getObjectMapper().readValue(utf8Body,Map.class);
  assertEquals(""String_Node_Str"",checkpointJson.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",checkpointJson.get(""String_Node_Str""));
  if (shutdownMockWebserver) {
    server.shutdown();
  }
  Map<String,Object> returnVal=new HashMap<String,Object>();
  returnVal.put(""String_Node_Str"",server);
  returnVal.put(""String_Node_Str"",dispatcher);
  return returnVal;
}",0.7938274728054642
160301,"private boolean isSyncGateway(URL remote){
  return (remote.getPort() == 4984 || remote.getPort() == 4984);
}","private boolean isSyncGateway(URL remote){
  return (remote.getPort() == 4984 || remote.getPort() == 80);
}",0.9814814814814816
160302,"public List<HttpRequest> getCapturedRequests(){
  List<HttpRequest> snapshot=new ArrayList<HttpRequest>();
  snapshot.addAll(capturedRequests);
  return snapshot;
}","public List<HttpRequest> getCapturedRequests(){
  return capturedRequests;
}",0.6
160303,"public void testOnlineOfflinePusher() throws Exception {
  URL remote=getReplicationURL();
  final CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
  mockHttpClient.addResponderFakeLocalDocumentUpdate404();
  mockHttpClient.addResponderRevDiffsSmartResponder();
  HttpClientFactory mockHttpClientFactory=mockFactoryFactory(mockHttpClient);
  manager.setDefaultHttpClientFactory(mockHttpClientFactory);
  Replication pusher=database.createPushReplication(remote);
  pusher.setContinuous(true);
  pusher.start();
  for (int i=0; i < 5; i++) {
    Log.d(Database.TAG,""String_Node_Str"" + i);
    putReplicationOffline(pusher);
    String docFieldName=""String_Node_Str"" + i;
    String docFieldVal=""String_Node_Str"" + i;
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(docFieldName,docFieldVal);
    createDocumentWithProperties(database,properties);
    final CountDownLatch gotBulkDocsRequest=new CountDownLatch(1);
    CustomizableMockHttpClient.ResponseListener bulkDocsListener=new CustomizableMockHttpClient.ResponseListener(){
      @Override public void responseSent(      HttpUriRequest httpUriRequest,      HttpResponse response){
        if (httpUriRequest.getURI().getPath().endsWith(""String_Node_Str"")) {
          gotBulkDocsRequest.countDown();
        }
      }
    }
;
    mockHttpClient.addResponseListener(bulkDocsListener);
    putReplicationOnline(pusher);
    boolean succeeded=gotBulkDocsRequest.await(30,TimeUnit.SECONDS);
    assertTrue(succeeded);
    mockHttpClient.removeResponseListener(bulkDocsListener);
    boolean foundExpectedDoc=false;
    List<HttpRequest> capturedRequests=mockHttpClient.getCapturedRequests();
    for (    HttpRequest capturedRequest : capturedRequests) {
      Log.d(Database.TAG,""String_Node_Str"" + capturedRequest);
      if (capturedRequest instanceof HttpPost) {
        HttpPost capturedPostRequest=(HttpPost)capturedRequest;
        if (capturedPostRequest.getURI().getPath().endsWith(""String_Node_Str"")) {
          ArrayList docs=extractDocsFromBulkDocsPost(capturedRequest);
          if (docs.size() != 1) {
            Log.d(Database.TAG,""String_Node_Str"");
          }
          assertEquals(1,docs.size());
          Map<String,Object> doc=(Map)docs.get(0);
          assertEquals(docFieldVal,doc.get(docFieldName));
          foundExpectedDoc=true;
        }
      }
    }
    assertTrue(foundExpectedDoc);
    mockHttpClient.clearCapturedRequests();
  }
}","public void testOnlineOfflinePusher() throws Exception {
  URL remote=getReplicationURL();
  final CustomizableMockHttpClient mockHttpClient=new CustomizableMockHttpClient();
  mockHttpClient.addResponderFakeLocalDocumentUpdate404();
  mockHttpClient.addResponderRevDiffsSmartResponder();
  HttpClientFactory mockHttpClientFactory=mockFactoryFactory(mockHttpClient);
  manager.setDefaultHttpClientFactory(mockHttpClientFactory);
  Replication pusher=database.createPushReplication(remote);
  pusher.setContinuous(true);
  pusher.start();
  for (int i=0; i < 5; i++) {
    Log.d(Database.TAG,""String_Node_Str"" + i);
    putReplicationOffline(pusher);
    String docFieldName=""String_Node_Str"" + i;
    String docFieldVal=""String_Node_Str"" + i;
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(docFieldName,docFieldVal);
    createDocumentWithProperties(database,properties);
    final CountDownLatch gotBulkDocsRequest=new CountDownLatch(1);
    CustomizableMockHttpClient.ResponseListener bulkDocsListener=new CustomizableMockHttpClient.ResponseListener(){
      @Override public void responseSent(      HttpUriRequest httpUriRequest,      HttpResponse response){
        if (httpUriRequest.getURI().getPath().endsWith(""String_Node_Str"")) {
          gotBulkDocsRequest.countDown();
        }
      }
    }
;
    mockHttpClient.addResponseListener(bulkDocsListener);
    putReplicationOnline(pusher);
    boolean succeeded=gotBulkDocsRequest.await(30,TimeUnit.SECONDS);
    assertTrue(succeeded);
    mockHttpClient.removeResponseListener(bulkDocsListener);
    boolean foundExpectedDoc=false;
    List<HttpRequest> capturedRequests=mockHttpClient.getCapturedRequests();
    for (    HttpRequest capturedRequest : capturedRequests) {
      Log.d(Database.TAG,""String_Node_Str"" + capturedRequest);
      if (capturedRequest instanceof HttpPost) {
        HttpPost capturedPostRequest=(HttpPost)capturedRequest;
        if (capturedPostRequest.getURI().getPath().endsWith(""String_Node_Str"")) {
          ArrayList docs=CustomizableMockHttpClient.extractDocsFromBulkDocsPost(capturedRequest);
          if (docs.size() != 1) {
            Log.d(Database.TAG,""String_Node_Str"");
          }
          assertEquals(1,docs.size());
          Map<String,Object> doc=(Map)docs.get(0);
          assertEquals(docFieldVal,doc.get(docFieldName));
          foundExpectedDoc=true;
        }
      }
    }
    assertTrue(foundExpectedDoc);
    mockHttpClient.clearCapturedRequests();
  }
}",0.9945924294011615
160304,"public void testReplicatorErrorStatus() throws Exception {
  Map<String,Object> facebookTokenInfo=new HashMap<String,Object>();
  facebookTokenInfo.put(""String_Node_Str"",""String_Node_Str"");
  facebookTokenInfo.put(""String_Node_Str"",getReplicationURL().toExternalForm());
  facebookTokenInfo.put(""String_Node_Str"",""String_Node_Str"");
  String destUrl=String.format(""String_Node_Str"",DEFAULT_TEST_DB);
  Map<String,Object> result=(Map<String,Object>)sendBody(""String_Node_Str"",destUrl,facebookTokenInfo,Status.OK,null);
  Log.v(TAG,String.format(""String_Node_Str"",result));
  Map<String,Object> properties=getPullReplicationParsedJson();
  Replication replicator=manager.getReplicator(properties);
  replicator.start();
  boolean foundError=false;
  for (int i=0; i < 10; i++) {
    Thread.sleep(5 * 1000);
    ArrayList<Object> activeTasks=(ArrayList<Object>)send(""String_Node_Str"",""String_Node_Str"",Status.OK,null);
    Log.d(TAG,""String_Node_Str"" + activeTasks);
    Map<String,Object> activeTaskReplication=(Map<String,Object>)activeTasks.get(0);
    foundError=(activeTaskReplication.get(""String_Node_Str"") != null);
    if (foundError == true) {
      break;
    }
  }
  assertTrue(foundError);
}","public void testReplicatorErrorStatus() throws Exception {
  Map<String,Object> facebookTokenInfo=new HashMap<String,Object>();
  facebookTokenInfo.put(""String_Node_Str"",""String_Node_Str"");
  facebookTokenInfo.put(""String_Node_Str"",getReplicationURL().toExternalForm());
  facebookTokenInfo.put(""String_Node_Str"",""String_Node_Str"");
  String destUrl=String.format(""String_Node_Str"",DEFAULT_TEST_DB);
  Map<String,Object> result=(Map<String,Object>)sendBody(""String_Node_Str"",destUrl,facebookTokenInfo,Status.OK,null);
  Log.v(TAG,String.format(""String_Node_Str"",result));
  Map<String,Object> properties=getPullReplicationParsedJson();
  Replication replicator=manager.getReplicator(properties);
  runReplication(replicator);
  assertNotNull(replicator.getLastError());
  assertTrue(replicator.getLastError() instanceof HttpResponseException);
  assertEquals(401,((HttpResponseException)replicator.getLastError()).getStatusCode());
}",0.6591654946085326
160305,"@SuppressWarnings(""String_Node_Str"") public void testPutLargeAttachment() throws Exception {
  String testAttachmentName=""String_Node_Str"";
  BlobStore attachments=database.getAttachments();
  attachments.deleteBlobs();
  Assert.assertEquals(0,attachments.count());
  Status status=new Status();
  Map<String,Object> rev1Properties=new HashMap<String,Object>();
  rev1Properties.put(""String_Node_Str"",1);
  rev1Properties.put(""String_Node_Str"",false);
  RevisionInternal rev1=database.putRevision(new RevisionInternal(rev1Properties,database),null,false,status);
  Assert.assertEquals(Status.CREATED,status.getCode());
  StringBuffer largeAttachment=new StringBuffer();
  for (int i=0; i < Database.kBigAttachmentLength; i++) {
    largeAttachment.append(""String_Node_Str"");
  }
  byte[] attach1=largeAttachment.toString().getBytes();
  database.insertAttachmentForSequenceWithNameAndType(new ByteArrayInputStream(attach1),rev1.getSequence(),testAttachmentName,""String_Node_Str"",rev1.getGeneration());
  Attachment attachment=database.getAttachmentForSequence(rev1.getSequence(),testAttachmentName);
  Assert.assertEquals(""String_Node_Str"",attachment.getContentType());
  byte[] data=IOUtils.toByteArray(attachment.getContent());
  Assert.assertTrue(Arrays.equals(attach1,data));
  EnumSet<Database.TDContentOptions> contentOptions=EnumSet.of(Database.TDContentOptions.TDIncludeAttachments,Database.TDContentOptions.TDBigAttachmentsFollow);
  Map<String,Object> attachmentDictForSequence=database.getAttachmentsDictForSequenceWithContent(rev1.getSequence(),contentOptions);
  Map<String,Object> innerDict=(Map<String,Object>)attachmentDictForSequence.get(testAttachmentName);
  if (!innerDict.containsKey(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (((Boolean)innerDict.get(""String_Node_Str"")).booleanValue() == false) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (!innerDict.containsKey(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  RevisionInternal rev1WithAttachments=database.getDocumentWithIDAndRev(rev1.getDocId(),rev1.getRevId(),contentOptions);
  Map<String,Object> rev1PropertiesPrime=rev1WithAttachments.getProperties();
  rev1PropertiesPrime.put(""String_Node_Str"",2);
  RevisionInternal newRev=new RevisionInternal(rev1PropertiesPrime,database);
  RevisionInternal rev2=database.putRevision(newRev,rev1WithAttachments.getRevId(),false,status);
  Assert.assertEquals(Status.CREATED,status.getCode());
  Map<String,Object> rev2Attachment=(Map<String,Object>)rev2.getProperties().get(""String_Node_Str"");
  Map<String,Object> attachMeta=(Map<String,Object>)rev2Attachment.get(testAttachmentName);
  assertFalse(attachMeta.containsKey(testAttachmentName));
}","@SuppressWarnings(""String_Node_Str"") public void testPutLargeAttachment() throws Exception {
  String testAttachmentName=""String_Node_Str"";
  BlobStore attachments=database.getAttachments();
  attachments.deleteBlobs();
  Assert.assertEquals(0,attachments.count());
  Status status=new Status();
  Map<String,Object> rev1Properties=new HashMap<String,Object>();
  rev1Properties.put(""String_Node_Str"",1);
  rev1Properties.put(""String_Node_Str"",false);
  RevisionInternal rev1=database.putRevision(new RevisionInternal(rev1Properties,database),null,false,status);
  Assert.assertEquals(Status.CREATED,status.getCode());
  StringBuffer largeAttachment=new StringBuffer();
  for (int i=0; i < Database.kBigAttachmentLength; i++) {
    largeAttachment.append(""String_Node_Str"");
  }
  byte[] attach1=largeAttachment.toString().getBytes();
  database.insertAttachmentForSequenceWithNameAndType(new ByteArrayInputStream(attach1),rev1.getSequence(),testAttachmentName,""String_Node_Str"",rev1.getGeneration());
  Attachment attachment=database.getAttachmentForSequence(rev1.getSequence(),testAttachmentName);
  Assert.assertEquals(""String_Node_Str"",attachment.getContentType());
  byte[] data=IOUtils.toByteArray(attachment.getContent());
  Assert.assertTrue(Arrays.equals(attach1,data));
  EnumSet<Database.TDContentOptions> contentOptions=EnumSet.of(Database.TDContentOptions.TDIncludeAttachments,Database.TDContentOptions.TDBigAttachmentsFollow);
  Map<String,Object> attachmentDictForSequence=database.getAttachmentsDictForSequenceWithContent(rev1.getSequence(),contentOptions);
  Map<String,Object> innerDict=(Map<String,Object>)attachmentDictForSequence.get(testAttachmentName);
  if (!innerDict.containsKey(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (((Boolean)innerDict.get(""String_Node_Str"")).booleanValue() == false) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (!innerDict.containsKey(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  RevisionInternal rev1WithAttachments=database.getDocumentWithIDAndRev(rev1.getDocId(),rev1.getRevId(),contentOptions);
  Map<String,Object> rev1WithAttachmentsProperties=rev1WithAttachments.getProperties();
  Map<String,Object> rev2Properties=new HashMap<String,Object>();
  rev2Properties.put(""String_Node_Str"",rev1WithAttachmentsProperties.get(""String_Node_Str""));
  rev2Properties.put(""String_Node_Str"",2);
  RevisionInternal newRev=new RevisionInternal(rev2Properties,database);
  RevisionInternal rev2=database.putRevision(newRev,rev1WithAttachments.getRevId(),false,status);
  Assert.assertEquals(Status.CREATED,status.getCode());
  database.copyAttachmentNamedFromSequenceToSequence(testAttachmentName,rev1WithAttachments.getSequence(),rev2.getSequence());
  Attachment rev2FetchedAttachment=database.getAttachmentForSequence(rev2.getSequence(),testAttachmentName);
  Assert.assertEquals(attachment.getLength(),rev2FetchedAttachment.getLength());
  Assert.assertEquals(attachment.getMetadata(),rev2FetchedAttachment.getMetadata());
  Assert.assertEquals(attachment.getContentType(),rev2FetchedAttachment.getContentType());
  Map<String,Object> rev3Properties=new HashMap<String,Object>();
  rev3Properties.put(""String_Node_Str"",rev2.getProperties().get(""String_Node_Str""));
  rev3Properties.put(""String_Node_Str"",3);
  rev3Properties.put(""String_Node_Str"",false);
  RevisionInternal rev3=new RevisionInternal(rev3Properties,database);
  rev3=database.putRevision(rev3,rev2.getRevId(),false,status);
  Assert.assertEquals(Status.CREATED,status.getCode());
  byte[] attach3=""String_Node_Str"".getBytes();
  database.insertAttachmentForSequenceWithNameAndType(new ByteArrayInputStream(attach3),rev3.getSequence(),testAttachmentName,""String_Node_Str"",rev3.getGeneration());
  Attachment rev3FetchedAttachment=database.getAttachmentForSequence(rev3.getSequence(),testAttachmentName);
  data=IOUtils.toByteArray(rev3FetchedAttachment.getContent());
  Assert.assertTrue(Arrays.equals(attach3,data));
  Assert.assertEquals(""String_Node_Str"",rev3FetchedAttachment.getContentType());
  Set<BlobKey> blobKeys=database.getAttachments().allKeys();
  Assert.assertEquals(2,blobKeys.size());
  database.compact();
  blobKeys=database.getAttachments().allKeys();
  Assert.assertEquals(1,blobKeys.size());
}",0.7137199434229137
160306,"public void testConflict() throws Exception {
  Map<String,Object> prop=new HashMap<String,Object>();
  prop.put(""String_Node_Str"",""String_Node_Str"");
  Database db=startDatabase();
  Document doc=createDocumentWithProperties(db,prop);
  SavedRevision rev1=doc.getCurrentRevision();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.putAll(doc.getProperties());
  properties.put(""String_Node_Str"",2);
  SavedRevision rev2a=doc.putProperties(properties);
  properties=new HashMap<String,Object>();
  properties.putAll(rev1.getProperties());
  properties.put(""String_Node_Str"",3);
  UnsavedRevision newRev=rev1.createRevision();
  newRev.setProperties(properties);
  SavedRevision rev2b=newRev.saveAllowingConflict();
  assertNotNull(""String_Node_Str"",rev2b);
  List<SavedRevision> confRevs=new ArrayList<SavedRevision>();
  confRevs.add(rev2b);
  confRevs.add(rev2a);
  assertEquals(doc.getConflictingRevisions(),confRevs);
  assertEquals(doc.getLeafRevisions(),confRevs);
  SavedRevision defaultRev, otherRev;
  if (rev2a.getId().compareTo(rev2b.getId()) > 0) {
    defaultRev=rev2a;
    otherRev=rev2b;
  }
 else {
    defaultRev=rev2b;
    otherRev=rev2a;
  }
  assertEquals(doc.getCurrentRevision(),defaultRev);
  Query query=db.createAllDocumentsQuery();
  query.setAllDocsMode(Query.AllDocsMode.SHOW_CONFLICTS);
  QueryEnumerator rows=query.run();
  assertEquals(rows.getCount(),1);
  QueryRow row=rows.getRow(0);
  List<SavedRevision> revs=row.getConflictingRevisions();
  assertEquals(revs.size(),2);
  assertEquals(revs.get(0),defaultRev);
  assertEquals(revs.get(1),otherRev);
}","public void testConflict() throws Exception {
  Map<String,Object> prop=new HashMap<String,Object>();
  prop.put(""String_Node_Str"",""String_Node_Str"");
  Database db=startDatabase();
  Document doc=createDocumentWithProperties(db,prop);
  SavedRevision rev1=doc.getCurrentRevision();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.putAll(doc.getProperties());
  properties.put(""String_Node_Str"",2);
  SavedRevision rev2a=doc.putProperties(properties);
  properties=new HashMap<String,Object>();
  properties.putAll(rev1.getProperties());
  properties.put(""String_Node_Str"",3);
  UnsavedRevision newRev=rev1.createRevision();
  newRev.setProperties(properties);
  SavedRevision rev2b=newRev.saveAllowingConflict();
  assertNotNull(""String_Node_Str"",rev2b);
  List<SavedRevision> confRevs=new ArrayList<SavedRevision>();
  confRevs.add(rev2b);
  confRevs.add(rev2a);
  assertEquals(doc.getConflictingRevisions(),confRevs);
  assertEquals(doc.getLeafRevisions(),confRevs);
  SavedRevision defaultRev, otherRev;
  Log.d(TAG,String.format(""String_Node_Str"",rev2a.getId(),rev2b.getId()));
  if (rev2a.getId().compareTo(rev2b.getId()) > 0) {
    Log.d(TAG,""String_Node_Str"");
    defaultRev=rev2a;
    otherRev=rev2b;
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    defaultRev=rev2b;
    otherRev=rev2a;
  }
  Log.d(TAG,""String_Node_Str"" + doc.getCurrentRevision().getId());
  assertEquals(doc.getCurrentRevision(),defaultRev);
  Query query=db.createAllDocumentsQuery();
  query.setAllDocsMode(Query.AllDocsMode.SHOW_CONFLICTS);
  QueryEnumerator rows=query.run();
  assertEquals(rows.getCount(),1);
  QueryRow row=rows.getRow(0);
  List<SavedRevision> revs=row.getConflictingRevisions();
  assertEquals(revs.size(),2);
  assertEquals(revs.get(0),defaultRev);
  assertEquals(revs.get(1),otherRev);
}",0.9027373325567852
160307,"static Document createDocumentWithProperties(Database db,Map<String,Object> properties){
  Document doc=db.createDocument();
  Assert.assertNotNull(doc);
  Assert.assertNull(doc.getCurrentRevisionId());
  Assert.assertNull(doc.getCurrentRevision());
  Assert.assertNotNull(""String_Node_Str"",doc.getId());
  try {
    doc.putProperties(properties);
  }
 catch (  Exception e) {
    assertTrue(""String_Node_Str"" + db.getName() + ""String_Node_Str""+ properties.toString(),false);
  }
  Assert.assertNotNull(doc.getId());
  Assert.assertNotNull(doc.getCurrentRevisionId());
  Assert.assertNotNull(doc.getUserProperties());
  Assert.assertEquals(db.getDocument(doc.getId()),doc);
  return doc;
}","static Document createDocumentWithProperties(Database db,Map<String,Object> properties){
  Document doc=db.createDocument();
  Assert.assertNotNull(doc);
  Assert.assertNull(doc.getCurrentRevisionId());
  Assert.assertNull(doc.getCurrentRevision());
  Assert.assertNotNull(""String_Node_Str"",doc.getId());
  try {
    doc.putProperties(properties);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
    assertTrue(""String_Node_Str"" + db.getName() + ""String_Node_Str""+ properties.toString(),false);
  }
  Assert.assertNotNull(doc.getId());
  Assert.assertNotNull(doc.getCurrentRevisionId());
  Assert.assertNotNull(doc.getUserProperties());
  Assert.assertEquals(db.getDocument(doc.getId()),doc);
  return doc;
}",0.9745403111739744
160308,"@Override public void changed(Database.ChangeEvent event){
  List<DocumentChange> changes=event.getChanges();
  for (  DocumentChange change : changes) {
    RevisionInternal rev=change.getRevisionInternal();
    assertNotNull(rev);
    assertNotNull(rev.getDocId());
    assertNotNull(rev.getRevId());
    assertEquals(rev.getDocId(),rev.getProperties().get(""String_Node_Str""));
    assertEquals(rev.getRevId(),rev.getProperties().get(""String_Node_Str""));
  }
}","@Override public void changed(Database.ChangeEvent event){
  List<DocumentChange> changes=event.getChanges();
  for (  DocumentChange change : changes) {
    RevisionInternal rev=change.getAddedRevision();
    assertNotNull(rev);
    assertNotNull(rev.getDocId());
    assertNotNull(rev.getRevId());
    assertEquals(rev.getDocId(),rev.getProperties().get(""String_Node_Str""));
    assertEquals(rev.getRevId(),rev.getProperties().get(""String_Node_Str""));
  }
}",0.985884907709012
160309,"public void testAllDocsQuery() throws CBLiteException {
  List<CBLRevisionInternal> docs=putDocs(database);
  List<CBLQueryRow> expectedRow=new ArrayList<CBLQueryRow>();
  for (  CBLRevisionInternal rev : docs) {
    Map<String,Object> value=new HashMap<String,Object>();
    value.put(""String_Node_Str"",rev.getRevId());
    CBLQueryRow queryRow=new CBLQueryRow(rev.getDocId(),0,rev.getDocId(),value,null);
    expectedRow.add(queryRow);
  }
  CBLQueryOptions options=new CBLQueryOptions();
  Map<String,Object> query=database.getAllDocs(options);
  List<CBLQueryRow> expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(2));
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedRows.add(expectedRow.get(1));
  expectedRows.add(expectedRow.get(4));
  Map<String,Object> expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,query);
  options=new CBLQueryOptions();
  options.setStartKey(""String_Node_Str"");
  options.setEndKey(""String_Node_Str"");
  query=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedRows.add(expectedRow.get(1));
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,query);
  options.setInclusiveEnd(false);
  query=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,query);
  options=new CBLQueryOptions();
  query=database.getAllDocs(options);
  expectedQueryResult=createExpectedQueryResult(new ArrayList<CBLQueryRow>(),0);
  Assert.assertEquals(expectedQueryResult,query);
  options=new CBLQueryOptions();
  List<Object> docIds=new ArrayList<Object>();
  CBLQueryRow expected2=expectedRow.get(2);
  docIds.add(expected2.getDocument().getId());
  options.setKeys(docIds);
  query=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expected2);
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,query);
}","public void testAllDocsQuery() throws CBLiteException {
  List<CBLRevisionInternal> docs=putDocs(database);
  List<CBLQueryRow> expectedRow=new ArrayList<CBLQueryRow>();
  for (  CBLRevisionInternal rev : docs) {
    Map<String,Object> value=new HashMap<String,Object>();
    value.put(""String_Node_Str"",rev.getRevId());
    CBLQueryRow queryRow=new CBLQueryRow(rev.getDocId(),0,rev.getDocId(),value,null);
    expectedRow.add(queryRow);
  }
  CBLQueryOptions options=new CBLQueryOptions();
  Map<String,Object> allDocs=database.getAllDocs(options);
  List<CBLQueryRow> expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(2));
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedRows.add(expectedRow.get(1));
  expectedRows.add(expectedRow.get(4));
  Map<String,Object> expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,allDocs);
  options=new CBLQueryOptions();
  options.setStartKey(""String_Node_Str"");
  options.setEndKey(""String_Node_Str"");
  allDocs=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedRows.add(expectedRow.get(1));
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,allDocs);
  options.setInclusiveEnd(false);
  allDocs=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expectedRow.get(0));
  expectedRows.add(expectedRow.get(3));
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,allDocs);
  options=new CBLQueryOptions();
  allDocs=database.getAllDocs(options);
  expectedQueryResult=createExpectedQueryResult(new ArrayList<CBLQueryRow>(),0);
  Assert.assertEquals(expectedQueryResult,allDocs);
  options=new CBLQueryOptions();
  List<Object> docIds=new ArrayList<Object>();
  CBLQueryRow expected2=expectedRow.get(2);
  docIds.add(expected2.getDocument().getId());
  options.setKeys(docIds);
  allDocs=database.getAllDocs(options);
  expectedRows=new ArrayList<CBLQueryRow>();
  expectedRows.add(expected2);
  expectedQueryResult=createExpectedQueryResult(expectedRows,0);
  Assert.assertEquals(expectedQueryResult,allDocs);
}",0.9742489270386266
160310,"public void testViewIndex() throws CBLiteException {
  Map<String,Object> dict1=new HashMap<String,Object>();
  dict1.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dict2=new HashMap<String,Object>();
  dict2.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dict3=new HashMap<String,Object>();
  dict3.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dictX=new HashMap<String,Object>();
  dictX.put(""String_Node_Str"",""String_Node_Str"");
  CBLRevisionInternal rev1=putDoc(database,dict1);
  CBLRevisionInternal rev2=putDoc(database,dict2);
  CBLRevisionInternal rev3=putDoc(database,dict3);
  putDoc(database,dictX);
  CBLView view=createView(database);
  Assert.assertEquals(1,view.getViewId());
  Assert.assertTrue(view.isStale());
  CBLStatus updated=view.updateIndex();
  Assert.assertEquals(CBLStatus.OK,updated.getCode());
  List<Map<String,Object>> dumpResult=view.dump();
  Log.v(TAG,""String_Node_Str"" + dumpResult);
  Assert.assertEquals(3,dumpResult.size());
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(1,dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(2,dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertEquals(3,dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertFalse(view.isStale());
  updated=view.updateIndex();
  Assert.assertEquals(CBLStatus.NOT_MODIFIED,updated.getCode());
  CBLRevisionInternal threeUpdated=new CBLRevisionInternal(rev3.getDocId(),rev3.getRevId(),false,database);
  Map<String,Object> newdict3=new HashMap<String,Object>();
  newdict3.put(""String_Node_Str"",""String_Node_Str"");
  threeUpdated.setProperties(newdict3);
  CBLStatus status=new CBLStatus();
  rev3=database.putRevision(threeUpdated,rev3.getRevId(),false,status);
  Assert.assertTrue(status.isSuccessful());
  Map<String,Object> dict4=new HashMap<String,Object>();
  dict4.put(""String_Node_Str"",""String_Node_Str"");
  CBLRevisionInternal rev4=putDoc(database,dict4);
  CBLRevisionInternal twoDeleted=new CBLRevisionInternal(rev2.getDocId(),rev2.getRevId(),true,database);
  database.putRevision(twoDeleted,rev2.getRevId(),false,status);
  Assert.assertTrue(status.isSuccessful());
  Assert.assertTrue(view.isStale());
  updated=view.updateIndex();
  Assert.assertEquals(CBLStatus.OK,updated.getCode());
  dumpResult=view.dump();
  Log.v(TAG,""String_Node_Str"" + dumpResult);
  Assert.assertEquals(3,dumpResult.size());
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(1,dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(5,dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertEquals(6,dumpResult.get(1).get(""String_Node_Str""));
  List<CBLQueryRow> rows=view.queryWithOptions(null);
  Assert.assertEquals(3,rows.size());
  Assert.assertEquals(""String_Node_Str"",rows.get(2).getKey());
  Assert.assertEquals(rev1.getDocId(),rows.get(2).getDocumentId());
  Assert.assertEquals(""String_Node_Str"",rows.get(0).getKey());
  Assert.assertEquals(rev3.getDocId(),rows.get(0).getDocumentId());
  Assert.assertEquals(""String_Node_Str"",rows.get(1).getKey());
  Assert.assertEquals(rev4.getDocId(),rows.get(1).getDocumentId());
  view.removeIndex();
}","public void testViewIndex() throws CBLiteException {
  Map<String,Object> dict1=new HashMap<String,Object>();
  dict1.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dict2=new HashMap<String,Object>();
  dict2.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dict3=new HashMap<String,Object>();
  dict3.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> dictX=new HashMap<String,Object>();
  dictX.put(""String_Node_Str"",""String_Node_Str"");
  CBLRevisionInternal rev1=putDoc(database,dict1);
  CBLRevisionInternal rev2=putDoc(database,dict2);
  CBLRevisionInternal rev3=putDoc(database,dict3);
  putDoc(database,dictX);
  CBLView view=createView(database);
  Assert.assertEquals(1,view.getViewId());
  Assert.assertTrue(view.isStale());
  CBLStatus updated=view.updateIndex();
  Assert.assertEquals(CBLStatus.OK,updated.getCode());
  List<Map<String,Object>> dumpResult=view.dump();
  Log.v(TAG,""String_Node_Str"" + dumpResult);
  Assert.assertEquals(3,dumpResult.size());
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(1,dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(2,dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertEquals(3,dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertFalse(view.isStale());
  boolean gotNotModfiedException=false;
  try {
    updated=view.updateIndex();
  }
 catch (  CBLiteException e) {
    if (e.getCBLStatus().getCode() == CBLStatus.NOT_MODIFIED) {
      gotNotModfiedException=true;
    }
  }
  Assert.assertTrue(gotNotModfiedException);
  CBLRevisionInternal threeUpdated=new CBLRevisionInternal(rev3.getDocId(),rev3.getRevId(),false,database);
  Map<String,Object> newdict3=new HashMap<String,Object>();
  newdict3.put(""String_Node_Str"",""String_Node_Str"");
  threeUpdated.setProperties(newdict3);
  CBLStatus status=new CBLStatus();
  rev3=database.putRevision(threeUpdated,rev3.getRevId(),false,status);
  Assert.assertTrue(status.isSuccessful());
  Map<String,Object> dict4=new HashMap<String,Object>();
  dict4.put(""String_Node_Str"",""String_Node_Str"");
  CBLRevisionInternal rev4=putDoc(database,dict4);
  CBLRevisionInternal twoDeleted=new CBLRevisionInternal(rev2.getDocId(),rev2.getRevId(),true,database);
  database.putRevision(twoDeleted,rev2.getRevId(),false,status);
  Assert.assertTrue(status.isSuccessful());
  Assert.assertTrue(view.isStale());
  updated=view.updateIndex();
  Assert.assertEquals(CBLStatus.OK,updated.getCode());
  dumpResult=view.dump();
  Log.v(TAG,""String_Node_Str"" + dumpResult);
  Assert.assertEquals(3,dumpResult.size());
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(1,dumpResult.get(2).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(5,dumpResult.get(0).get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",dumpResult.get(1).get(""String_Node_Str""));
  Assert.assertEquals(6,dumpResult.get(1).get(""String_Node_Str""));
  List<CBLQueryRow> rows=view.queryWithOptions(null);
  Assert.assertEquals(3,rows.size());
  Assert.assertEquals(""String_Node_Str"",rows.get(2).getKey());
  Assert.assertEquals(rev1.getDocId(),rows.get(2).getDocumentId());
  Assert.assertEquals(""String_Node_Str"",rows.get(0).getKey());
  Assert.assertEquals(rev3.getDocId(),rows.get(0).getDocumentId());
  Assert.assertEquals(""String_Node_Str"",rows.get(1).getKey());
  Assert.assertEquals(rev4.getDocId(),rows.get(1).getDocumentId());
  view.removeIndex();
}",0.9642271982523212
160311,"public void testPusherDeletedDoc() throws Throwable {
  CountDownLatch replicationDoneSignal=new CountDownLatch(1);
  URL remote=getReplicationURL();
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  Map<String,Object> documentProperties=new HashMap<String,Object>();
  final String doc1Id=String.format(""String_Node_Str"",docIdTimestamp);
  documentProperties.put(""String_Node_Str"",doc1Id);
  documentProperties.put(""String_Node_Str"",1);
  documentProperties.put(""String_Node_Str"",false);
  CBLBody body=new CBLBody(documentProperties);
  CBLRevision rev1=new CBLRevision(body,database);
  CBLStatus status=new CBLStatus();
  rev1=database.putRevision(rev1,null,false,status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  documentProperties.put(""String_Node_Str"",rev1.getRevId());
  documentProperties.put(""String_Node_Str"",true);
  documentProperties.put(""String_Node_Str"",true);
  @SuppressWarnings(""String_Node_Str"") CBLRevision rev2=database.putRevision(new CBLRevision(documentProperties,database),rev1.getRevId(),false,status);
  Assert.assertTrue(status.getCode() >= 200 && status.getCode() < 300);
  final CBLReplicator repl=database.getReplicator(remote,true,false,server.getWorkExecutor());
  ((CBLPusher)repl).setCreateTarget(true);
  AsyncTask replicationTask=new AsyncTask<Object,Object,Object>(){
    @Override protected Object doInBackground(    Object... aParams){
      repl.start();
      Assert.assertTrue(repl.isRunning());
      return null;
    }
  }
;
  replicationTask.execute();
  ReplicationObserver replicationObserver=new ReplicationObserver(replicationDoneSignal);
  repl.addObserver(replicationObserver);
  Log.d(TAG,""String_Node_Str"");
  try {
    replicationDoneSignal.await();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  URL replicationUrlTrailing=new URL(String.format(""String_Node_Str"",remote.toExternalForm()));
  final URL pathToDoc=new URL(replicationUrlTrailing,doc1Id);
  Log.d(TAG,""String_Node_Str"" + pathToDoc);
  final CountDownLatch httpRequestDoneSignal=new CountDownLatch(1);
  AsyncTask getDocTask=new AsyncTask<Object,Object,Object>(){
    @Override protected Object doInBackground(    Object... aParams){
      org.apache.http.client.HttpClient httpclient=new DefaultHttpClient();
      HttpResponse response;
      String responseString=null;
      try {
        response=httpclient.execute(new HttpGet(pathToDoc.toExternalForm()));
        StatusLine statusLine=response.getStatusLine();
        return statusLine;
      }
 catch (      ClientProtocolException e) {
        Assert.assertNull(""String_Node_Str"" + e.getLocalizedMessage(),e);
      }
catch (      IOException e) {
        Assert.assertNull(""String_Node_Str"" + e.getLocalizedMessage(),e);
      }
      httpRequestDoneSignal.countDown();
      return null;
    }
    @Override protected void onPostExecute(    Object o){
      StatusLine statusLine=(StatusLine)o;
      Assert.assertEquals(HttpStatus.SC_NOT_FOUND,statusLine.getStatusCode());
    }
  }
;
  getDocTask.execute();
  Log.d(TAG,""String_Node_Str"");
  try {
    httpRequestDoneSignal.await();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Log.d(TAG,""String_Node_Str"");
}","public void testPusherDeletedDoc() throws Throwable {
  CountDownLatch replicationDoneSignal=new CountDownLatch(1);
  URL remote=getReplicationURL();
  String docIdTimestamp=Long.toString(System.currentTimeMillis());
  Map<String,Object> documentProperties=new HashMap<String,Object>();
  final String doc1Id=String.format(""String_Node_Str"",docIdTimestamp);
  documentProperties.put(""String_Node_Str"",doc1Id);
  documentProperties.put(""String_Node_Str"",1);
  documentProperties.put(""String_Node_Str"",false);
  CBLBody body=new CBLBody(documentProperties);
  CBLRevision rev1=new CBLRevision(body,database);
  CBLStatus status=new CBLStatus();
  rev1=database.putRevision(rev1,null,false,status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  documentProperties.put(""String_Node_Str"",rev1.getRevId());
  documentProperties.put(""String_Node_Str"",true);
  documentProperties.put(""String_Node_Str"",true);
  @SuppressWarnings(""String_Node_Str"") CBLRevision rev2=database.putRevision(new CBLRevision(documentProperties,database),rev1.getRevId(),false,status);
  Assert.assertTrue(status.getCode() >= 200 && status.getCode() < 300);
  final CBLReplicator repl=database.getReplicator(remote,true,false,server.getWorkExecutor());
  ((CBLPusher)repl).setCreateTarget(true);
  AsyncTask replicationTask=new AsyncTask<Object,Object,Object>(){
    @Override protected Object doInBackground(    Object... aParams){
      repl.start();
      Assert.assertTrue(repl.isRunning());
      return null;
    }
  }
;
  replicationTask.execute();
  ReplicationObserver replicationObserver=new ReplicationObserver(replicationDoneSignal);
  repl.addObserver(replicationObserver);
  Log.d(TAG,""String_Node_Str"");
  try {
    replicationDoneSignal.await();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  URL replicationUrlTrailing=new URL(String.format(""String_Node_Str"",remote.toExternalForm()));
  final URL pathToDoc=new URL(replicationUrlTrailing,doc1Id);
  Log.d(TAG,""String_Node_Str"" + pathToDoc);
  final CountDownLatch httpRequestDoneSignal=new CountDownLatch(1);
  AsyncTask getDocTask=new AsyncTask<Object,Object,Object>(){
    @Override protected Object doInBackground(    Object... aParams){
      org.apache.http.client.HttpClient httpclient=new DefaultHttpClient();
      HttpResponse response;
      String responseString=null;
      try {
        response=httpclient.execute(new HttpGet(pathToDoc.toExternalForm()));
        StatusLine statusLine=response.getStatusLine();
        Log.d(TAG,""String_Node_Str"" + statusLine);
        return statusLine;
      }
 catch (      ClientProtocolException e) {
        Assert.assertNull(""String_Node_Str"" + e.getLocalizedMessage(),e);
      }
catch (      IOException e) {
        Assert.assertNull(""String_Node_Str"" + e.getLocalizedMessage(),e);
      }
 finally {
        httpRequestDoneSignal.countDown();
      }
      return null;
    }
    @Override protected void onPostExecute(    Object o){
      Log.d(TAG,""String_Node_Str"" + o);
      StatusLine statusLine=(StatusLine)o;
      Assert.assertEquals(HttpStatus.SC_NOT_FOUND,statusLine.getStatusCode());
    }
  }
;
  getDocTask.execute();
  Log.d(TAG,""String_Node_Str"");
  try {
    httpRequestDoneSignal.await();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Log.d(TAG,""String_Node_Str"");
}",0.9833134684147796
160312,"@Override protected void onPostExecute(Object o){
  StatusLine statusLine=(StatusLine)o;
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,statusLine.getStatusCode());
}","@Override protected void onPostExecute(Object o){
  Log.d(TAG,""String_Node_Str"" + o);
  StatusLine statusLine=(StatusLine)o;
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,statusLine.getStatusCode());
}",0.9016393442622952
160313,"@SuppressWarnings(""String_Node_Str"") public void testPutAttachment(){
  CBLBlobStore attachments=database.getAttachments();
  byte[] attach1=""String_Node_Str"".getBytes();
  String base64=Base64.encodeBytes(attach1);
  Map<String,Object> attachment=new HashMap<String,Object>();
  attachment.put(""String_Node_Str"",""String_Node_Str"");
  attachment.put(""String_Node_Str"",base64);
  Map<String,Object> attachmentDict=new HashMap<String,Object>();
  attachmentDict.put(""String_Node_Str"",attachment);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",1);
  properties.put(""String_Node_Str"",false);
  properties.put(""String_Node_Str"",attachmentDict);
  CBLStatus status=new CBLStatus();
  CBLRevision rev1=database.putRevision(new CBLRevision(properties,database),null,false,status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  Assert.assertEquals(1,attachments.count());
  CBLRevision gotRev1=database.getDocumentWithIDAndRev(rev1.getDocId(),rev1.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  Map<String,Object> gotAttachmentDict=(Map<String,Object>)gotRev1.getProperties().get(""String_Node_Str"");
  Map<String,Object> innerDict=new HashMap<String,Object>();
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",27);
  innerDict.put(""String_Node_Str"",true);
  innerDict.put(""String_Node_Str"",1);
  Map<String,Object> expectAttachmentDict=new HashMap<String,Object>();
  expectAttachmentDict.put(""String_Node_Str"",innerDict);
  Assert.assertEquals(expectAttachmentDict,gotAttachmentDict);
  byte[] attachv2=""String_Node_Str"".getBytes();
  database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),null,status);
  Assert.assertEquals(CBLStatus.CONFLICT,status.getCode());
  database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),""String_Node_Str"",status);
  Assert.assertEquals(CBLStatus.CONFLICT,status.getCode());
  CBLRevision rev2=database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),rev1.getRevId(),status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  Assert.assertEquals(rev1.getDocId(),rev2.getDocId());
  Assert.assertEquals(2,rev2.getGeneration());
  CBLRevision gotRev2=database.getDocumentWithIDAndRev(rev2.getDocId(),rev2.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  attachmentDict=(Map<String,Object>)gotRev2.getProperties().get(""String_Node_Str"");
  innerDict=new HashMap<String,Object>();
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",23);
  innerDict.put(""String_Node_Str"",true);
  innerDict.put(""String_Node_Str"",2);
  expectAttachmentDict.put(""String_Node_Str"",innerDict);
  Assert.assertEquals(expectAttachmentDict,attachmentDict);
  database.updateAttachment(""String_Node_Str"",null,null,rev2.getDocId(),rev2.getRevId(),status);
  Assert.assertEquals(CBLStatus.NOT_FOUND,status.getCode());
  database.updateAttachment(""String_Node_Str"",null,null,""String_Node_Str"",""String_Node_Str"",status);
  Assert.assertEquals(CBLStatus.NOT_FOUND,status.getCode());
  CBLRevision rev3=database.updateAttachment(""String_Node_Str"",null,null,rev2.getDocId(),rev2.getRevId(),status);
  Assert.assertEquals(CBLStatus.OK,status.getCode());
  Assert.assertEquals(rev2.getDocId(),rev3.getDocId());
  Assert.assertEquals(3,rev3.getGeneration());
  CBLRevision gotRev3=database.getDocumentWithIDAndRev(rev3.getDocId(),rev3.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  attachmentDict=(Map<String,Object>)gotRev3.getProperties().get(""String_Node_Str"");
  Assert.assertNull(attachmentDict);
  database.close();
}","@SuppressWarnings(""String_Node_Str"") public void testPutAttachment(){
  CBLBlobStore attachments=database.getAttachments();
  attachments.deleteBlobs();
  Assert.assertEquals(0,attachments.count());
  byte[] attach1=""String_Node_Str"".getBytes();
  String base64=Base64.encodeBytes(attach1);
  Map<String,Object> attachment=new HashMap<String,Object>();
  attachment.put(""String_Node_Str"",""String_Node_Str"");
  attachment.put(""String_Node_Str"",base64);
  Map<String,Object> attachmentDict=new HashMap<String,Object>();
  attachmentDict.put(""String_Node_Str"",attachment);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",1);
  properties.put(""String_Node_Str"",false);
  properties.put(""String_Node_Str"",attachmentDict);
  CBLStatus status=new CBLStatus();
  CBLRevision rev1=database.putRevision(new CBLRevision(properties,database),null,false,status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  Assert.assertEquals(1,attachments.count());
  CBLRevision gotRev1=database.getDocumentWithIDAndRev(rev1.getDocId(),rev1.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  Map<String,Object> gotAttachmentDict=(Map<String,Object>)gotRev1.getProperties().get(""String_Node_Str"");
  Map<String,Object> innerDict=new HashMap<String,Object>();
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",27);
  innerDict.put(""String_Node_Str"",true);
  innerDict.put(""String_Node_Str"",1);
  Map<String,Object> expectAttachmentDict=new HashMap<String,Object>();
  expectAttachmentDict.put(""String_Node_Str"",innerDict);
  Assert.assertEquals(expectAttachmentDict,gotAttachmentDict);
  byte[] attachv2=""String_Node_Str"".getBytes();
  database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),null,status);
  Assert.assertEquals(CBLStatus.CONFLICT,status.getCode());
  database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),""String_Node_Str"",status);
  Assert.assertEquals(CBLStatus.CONFLICT,status.getCode());
  CBLRevision rev2=database.updateAttachment(""String_Node_Str"",new ByteArrayInputStream(attachv2),""String_Node_Str"",rev1.getDocId(),rev1.getRevId(),status);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  Assert.assertEquals(rev1.getDocId(),rev2.getDocId());
  Assert.assertEquals(2,rev2.getGeneration());
  CBLRevision gotRev2=database.getDocumentWithIDAndRev(rev2.getDocId(),rev2.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  attachmentDict=(Map<String,Object>)gotRev2.getProperties().get(""String_Node_Str"");
  innerDict=new HashMap<String,Object>();
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",""String_Node_Str"");
  innerDict.put(""String_Node_Str"",23);
  innerDict.put(""String_Node_Str"",true);
  innerDict.put(""String_Node_Str"",2);
  expectAttachmentDict.put(""String_Node_Str"",innerDict);
  Assert.assertEquals(expectAttachmentDict,attachmentDict);
  database.updateAttachment(""String_Node_Str"",null,null,rev2.getDocId(),rev2.getRevId(),status);
  Assert.assertEquals(CBLStatus.NOT_FOUND,status.getCode());
  database.updateAttachment(""String_Node_Str"",null,null,""String_Node_Str"",""String_Node_Str"",status);
  Assert.assertEquals(CBLStatus.NOT_FOUND,status.getCode());
  CBLRevision rev3=database.updateAttachment(""String_Node_Str"",null,null,rev2.getDocId(),rev2.getRevId(),status);
  Assert.assertEquals(CBLStatus.OK,status.getCode());
  Assert.assertEquals(rev2.getDocId(),rev3.getDocId());
  Assert.assertEquals(3,rev3.getGeneration());
  CBLRevision gotRev3=database.getDocumentWithIDAndRev(rev3.getDocId(),rev3.getRevId(),EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  attachmentDict=(Map<String,Object>)gotRev3.getProperties().get(""String_Node_Str"");
  Assert.assertNull(attachmentDict);
  database.close();
}",0.9904689287075868
160314,"public void testChangeTrackerLongPoll() throws Throwable {
}","public void testChangeTrackerLongPoll() throws Throwable {
  URL testURL=getReplicationURL();
  CBLChangeTrackerClient client=new CBLChangeTrackerClient(){
    @Override public void changeTrackerStopped(    CBLChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      Log.v(TAG,""String_Node_Str"" + seq.toString());
    }
    @Override public HttpClient getHttpClient(){
      return new DefaultHttpClient();
    }
  }
;
  final CBLChangeTracker changeTracker=new CBLChangeTracker(testURL,TDChangeTrackerMode.LongPoll,0,client,null);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      changeTracker.start();
    }
  }
);
  Thread.sleep(10 * 1000);
}",0.1363636363636363
160315,"public void testChangeTrackerContinuous() throws Throwable {
}","public void testChangeTrackerContinuous() throws Throwable {
  URL testURL=getReplicationURL();
  CBLChangeTrackerClient client=new CBLChangeTrackerClient(){
    @Override public void changeTrackerStopped(    CBLChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      Log.v(TAG,""String_Node_Str"" + seq.toString());
    }
    @Override public HttpClient getHttpClient(){
      return new DefaultHttpClient();
    }
  }
;
  final CBLChangeTracker changeTracker=new CBLChangeTracker(testURL,TDChangeTrackerMode.Continuous,0,client,null);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      changeTracker.start();
    }
  }
);
  Thread.sleep(10 * 1000);
}",0.1399548532731377
160316,"public void testChangeTracker() throws Throwable {
}","public void testChangeTracker() throws Throwable {
  URL testURL=getReplicationURL();
  CBLChangeTrackerClient client=new CBLChangeTrackerClient(){
    @Override public void changeTrackerStopped(    CBLChangeTracker tracker){
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void changeTrackerReceivedChange(    Map<String,Object> change){
      Object seq=change.get(""String_Node_Str"");
      Log.v(TAG,""String_Node_Str"" + seq.toString());
    }
    @Override public HttpClient getHttpClient(){
      return new DefaultHttpClient();
    }
  }
;
  final CBLChangeTracker changeTracker=new CBLChangeTracker(testURL,TDChangeTrackerMode.OneShot,0,client,null);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      changeTracker.start();
    }
  }
);
  while (changeTracker.isRunning()) {
    Thread.sleep(1000);
  }
}",0.1152993348115299
160317,"public void testChangeTrackerWithFilterURL() throws Throwable {
}","public void testChangeTrackerWithFilterURL() throws Throwable {
  URL testURL=getReplicationURL();
  CBLChangeTracker changeTracker=new CBLChangeTracker(testURL,TDChangeTrackerMode.Continuous,0,null,null);
  changeTracker.setFilterName(""String_Node_Str"");
  Map<String,Object> filterMap=new HashMap<String,Object>();
  filterMap.put(""String_Node_Str"",""String_Node_Str"");
  changeTracker.setFilterParams(filterMap);
  Assert.assertEquals(""String_Node_Str"",changeTracker.getChangesFeedPath());
}",0.2329749103942652
160318,"public void testStreamAttachmentBlobStoreWriter(){
  try {
    CBLBlobStore attachments=database.getAttachments();
    CBLBlobStoreWriter blobWriter=new CBLBlobStoreWriter(attachments);
    String testBlob=""String_Node_Str"";
    blobWriter.appendData(new String(testBlob).getBytes());
    blobWriter.finish();
    String sha1Base64Digest=""String_Node_Str"";
    Assert.assertEquals(blobWriter.sHA1DigestString(),sha1Base64Digest);
    Assert.assertEquals(blobWriter.mD5DigestString(),""String_Node_Str"");
    blobWriter.install();
    CBLBlobKey blobKey=new CBLBlobKey(sha1Base64Digest);
    byte[] blob=attachments.blobForKey(blobKey);
    Assert.assertTrue(Arrays.equals(testBlob.getBytes(Charset.forName(""String_Node_Str"")),blob));
  }
 catch (  IOException e) {
    Assert.assertTrue(e.getMessage(),false);
  }
}","public void testStreamAttachmentBlobStoreWriter(){
  CBLBlobStore attachments=database.getAttachments();
  CBLBlobStoreWriter blobWriter=new CBLBlobStoreWriter(attachments);
  String testBlob=""String_Node_Str"";
  blobWriter.appendData(new String(testBlob).getBytes());
  blobWriter.finish();
  String sha1Base64Digest=""String_Node_Str"";
  Assert.assertEquals(blobWriter.sHA1DigestString(),sha1Base64Digest);
  Assert.assertEquals(blobWriter.mD5DigestString(),""String_Node_Str"");
  blobWriter.install();
  CBLBlobKey blobKey=new CBLBlobKey(sha1Base64Digest);
  byte[] blob=attachments.blobForKey(blobKey);
  Assert.assertTrue(Arrays.equals(testBlob.getBytes(Charset.forName(""String_Node_Str"")),blob));
}",0.8970976253298153
160319,"public void testForceInsertEmptyHistory(){
  List<String> revHistory=null;
  CBLRevision rev=new CBLRevision(""String_Node_Str"",""String_Node_Str"",false);
  CBLStatus status=database.forceInsert(rev,revHistory,null);
  Assert.assertEquals(201,status.getCode());
}","public void testForceInsertEmptyHistory(){
  List<String> revHistory=null;
  CBLRevision rev=new CBLRevision(""String_Node_Str"",""String_Node_Str"",false);
  Map<String,Object> revProperties=new HashMap<String,Object>();
  revProperties.put(""String_Node_Str"",rev.getDocId());
  revProperties.put(""String_Node_Str"",rev.getRevId());
  revProperties.put(""String_Node_Str"",""String_Node_Str"");
  rev.setProperties(revProperties);
  CBLStatus status=database.forceInsert(rev,revHistory,null);
  Assert.assertEquals(201,status.getCode());
}",0.6599241466498104
160320,"public void testRevTree(){
}","public void testRevTree(){
  CBLRevision rev=new CBLRevision(""String_Node_Str"",""String_Node_Str"",false,database);
  Map<String,Object> revProperties=new HashMap<String,Object>();
  revProperties.put(""String_Node_Str"",rev.getDocId());
  revProperties.put(""String_Node_Str"",rev.getRevId());
  revProperties.put(""String_Node_Str"",""String_Node_Str"");
  rev.setProperties(revProperties);
  List<String> revHistory=new ArrayList<String>();
  revHistory.add(rev.getRevId());
  revHistory.add(""String_Node_Str"");
  revHistory.add(""String_Node_Str"");
  revHistory.add(""String_Node_Str"");
  CBLStatus status=database.forceInsert(rev,revHistory,null);
  Assert.assertEquals(201,status.getCode());
  Assert.assertEquals(1,database.getDocumentCount());
  verifyHistory(database,rev,revHistory);
  CBLRevision conflict=new CBLRevision(""String_Node_Str"",""String_Node_Str"",false,database);
  Map<String,Object> conflictProperties=new HashMap<String,Object>();
  conflictProperties.put(""String_Node_Str"",conflict.getDocId());
  conflictProperties.put(""String_Node_Str"",conflict.getRevId());
  conflictProperties.put(""String_Node_Str"",""String_Node_Str"");
  conflict.setProperties(conflictProperties);
  List<String> conflictHistory=new ArrayList<String>();
  conflictHistory.add(conflict.getRevId());
  conflictHistory.add(""String_Node_Str"");
  conflictHistory.add(""String_Node_Str"");
  conflictHistory.add(""String_Node_Str"");
  conflictHistory.add(""String_Node_Str"");
  status=database.forceInsert(conflict,conflictHistory,null);
  Assert.assertEquals(201,status.getCode());
  Assert.assertEquals(1,database.getDocumentCount());
  verifyHistory(database,conflict,conflictHistory);
  CBLRevision other=new CBLRevision(""String_Node_Str"",""String_Node_Str"",false,database);
  Map<String,Object> otherProperties=new HashMap<String,Object>();
  otherProperties.put(""String_Node_Str"",""String_Node_Str"");
  other.setProperties(otherProperties);
  List<String> otherHistory=new ArrayList<String>();
  otherHistory.add(other.getRevId());
  status=database.forceInsert(other,otherHistory,null);
  Assert.assertEquals(CBLStatus.CREATED,status.getCode());
  CBLRevision rev2=database.getDocumentWithIDAndRev(rev.getDocId(),""String_Node_Str"",EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  Assert.assertEquals(rev.getDocId(),rev2.getDocId());
  Assert.assertEquals(""String_Node_Str"",rev2.getRevId());
  Assert.assertEquals(8,database.getLastSequence());
  CBLRevision current=database.getDocumentWithIDAndRev(rev.getDocId(),null,EnumSet.noneOf(CBLDatabase.TDContentOptions.class));
  Assert.assertEquals(conflict,current);
  CBLChangesOptions options=new CBLChangesOptions();
  CBLRevisionList changes=database.changesSince(0,options,null);
  CBLRevisionList expectedChanges=new CBLRevisionList();
  expectedChanges.add(conflict);
  expectedChanges.add(other);
  Assert.assertEquals(changes,expectedChanges);
  options.setIncludeConflicts(true);
  changes=database.changesSince(0,options,null);
  expectedChanges=new CBLRevisionList();
  expectedChanges.add(rev);
  expectedChanges.add(conflict);
  expectedChanges.add(other);
  Assert.assertEquals(changes,expectedChanges);
}",0.0176100628930817
160321,"public IsAProviderDecider(Set<String> qualifierAnnotations,List<PsiType> typeParameters){
  this.qualifierAnnotations=qualifierAnnotations;
  this.typeParameters=typeParameters;
}","public IsAProviderDecider(PsiElement element){
  this.qualifierAnnotations=PsiConsultantImpl.getQualifierAnnotations(element);
  this.typeParameters=PsiConsultantImpl.getTypeParameters(element);
}",0.6666666666666666
160322,"public ConstructorParameterInjectDecider(PsiParameter psiParameter){
  super(PsiConsultantImpl.getQualifierAnnotations(psiParameter),PsiConsultantImpl.getTypeParameters(psiParameter));
}","public ConstructorParameterInjectDecider(PsiParameter psiParameter){
  super(psiParameter);
}",0.6666666666666666
160323,"public FieldInjectDecider(PsiField psiField){
  super(PsiConsultantImpl.getQualifierAnnotations(psiField),PsiConsultantImpl.getTypeParameters(psiField));
}","public FieldInjectDecider(PsiField psiField){
  super(psiField);
}",0.5972850678733032
160324,"/** 
 * Check the element. If the element is a PsiMethod, than we want to know if it's a Constructor annotated w/ @Inject. If element is a field, than we only want to see if it is annotated with @Inject.
 * @return a {@link com.intellij.codeInsight.daemon.GutterIconNavigationHandler} for theappropriate type, or null if we don't care about it.
 */
@Nullable @Override public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element){
  if (element instanceof PsiMethod) {
    PsiMethod methodElement=(PsiMethod)element;
    if (methodElement.isConstructor() && PsiConsultantImpl.hasAnnotation(element,CLASS_INJECT)) {
      PsiIdentifier nameIdentifier=methodElement.getNameIdentifier();
      if (nameIdentifier != null) {
        return new LineMarkerInfo<PsiElement>(element,nameIdentifier.getTextRange(),ICON,UPDATE_ALL,null,new ConstructorInjectToProvidesHandler(),LEFT);
      }
    }
  }
 else   if (element instanceof PsiField) {
    PsiField fieldElement=(PsiField)element;
    PsiTypeElement typeElement=fieldElement.getTypeElement();
    if (PsiConsultantImpl.hasAnnotation(element,CLASS_INJECT) && typeElement != null) {
      return new LineMarkerInfo<PsiElement>(element,typeElement.getTextRange(),ICON,UPDATE_ALL,null,new FieldInjectToProvidesHandler(),LEFT);
    }
  }
  return null;
}","/** 
 * Check the element. If the element is a PsiMethod, than we want to know if it's a Constructor annotated w/ @Inject. If element is a field, than we only want to see if it is annotated with @Inject.
 * @return a {@link com.intellij.codeInsight.daemon.GutterIconNavigationHandler} for theappropriate type, or null if we don't care about it.
 */
@Nullable @Override public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element){
  if (element instanceof PsiMethod) {
    PsiMethod methodElement=(PsiMethod)element;
    if (methodElement.isConstructor() && PsiConsultantImpl.hasAnnotation(element,CLASS_INJECT) && methodElement.getParameterList().getParametersCount() > 0) {
      PsiIdentifier nameIdentifier=methodElement.getNameIdentifier();
      if (nameIdentifier != null) {
        return new LineMarkerInfo<PsiElement>(element,nameIdentifier.getTextRange(),ICON,UPDATE_ALL,null,new ConstructorInjectToProvidesHandler(),LEFT);
      }
    }
    if (!methodElement.isConstructor() && PsiConsultantImpl.hasAnnotation(element,CLASS_PROVIDES) && methodElement.getParameterList().getParametersCount() > 0) {
      PsiIdentifier nameIdentifier=methodElement.getNameIdentifier();
      if (nameIdentifier != null) {
        return new LineMarkerInfo<PsiElement>(element,nameIdentifier.getTextRange(),ICON,UPDATE_ALL,null,new ConstructorInjectToProvidesHandler(),LEFT);
      }
    }
  }
 else   if (element instanceof PsiField) {
    PsiField fieldElement=(PsiField)element;
    PsiTypeElement typeElement=fieldElement.getTypeElement();
    if (PsiConsultantImpl.hasAnnotation(element,CLASS_INJECT) && typeElement != null) {
      return new LineMarkerInfo<PsiElement>(element,typeElement.getTextRange(),ICON,UPDATE_ALL,null,new FieldInjectToProvidesHandler(),LEFT);
    }
  }
  return null;
}",0.7108974358974359
160325,"@Override public void navigate(final MouseEvent mouseEvent,PsiElement psiElement){
  if (!(psiElement instanceof PsiMethod)) {
    throw new IllegalStateException(""String_Node_Str"" + psiElement);
  }
  PsiMethod psiMethod=(PsiMethod)psiElement;
  if (!psiMethod.isConstructor()) {
    throw new IllegalStateException(""String_Node_Str"" + psiElement);
  }
  PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
  if (parameters.length == 1) {
    showUsages(mouseEvent,parameters[0]);
  }
 else {
    new PickTypeAction().startPickTypes(new RelativePoint(mouseEvent),parameters,new PickTypeAction.Callback(){
      @Override public void onParameterChosen(      PsiParameter selected){
        showUsages(mouseEvent,selected);
      }
    }
);
  }
}","@Override public void navigate(final MouseEvent mouseEvent,PsiElement psiElement){
  if (!(psiElement instanceof PsiMethod)) {
    throw new IllegalStateException(""String_Node_Str"" + psiElement);
  }
  PsiMethod psiMethod=(PsiMethod)psiElement;
  PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
  if (parameters.length == 1) {
    showUsages(mouseEvent,parameters[0]);
  }
 else {
    new PickTypeAction().startPickTypes(new RelativePoint(mouseEvent),parameters,new PickTypeAction.Callback(){
      @Override public void onParameterChosen(      PsiParameter selected){
        showUsages(mouseEvent,selected);
      }
    }
);
  }
}",0.9232934553131598
160326,"private void showUsages(MouseEvent mouseEvent,PsiParameter psiParameter){
  new ShowUsagesAction(new Decider.ConstructorParameterInjectDecider(psiParameter)).startFindUsages(PsiConsultantImpl.checkForLazyOrProvider(psiParameter),new RelativePoint(mouseEvent),PsiUtilBase.findEditor(psiParameter),MAX_USAGES);
}","private void showUsages(MouseEvent mouseEvent,PsiParameter psiParameter){
  if (navigateToConstructorIfProvider(psiParameter)) {
    return;
  }
  new ShowUsagesAction(new Decider.ConstructorParameterInjectDecider(psiParameter)).startFindUsages(PsiConsultantImpl.checkForLazyOrProvider(psiParameter),new RelativePoint(mouseEvent),PsiUtilBase.findEditor(psiParameter),MAX_USAGES);
}",0.8972503617945007
160327,"@Override @Nullable protected PsiElement getPsiElementForHint(Object selectedValue){
  if (selectedValue instanceof UsageNode) {
    final Usage usage=((UsageNode)selectedValue).getUsage();
    if (usage instanceof UsageInfo2UsageAdapter) {
      final PsiElement element=((UsageInfo2UsageAdapter)usage).getElement();
      if (element != null) {
        final PsiElement view=UsageToPsiElementProvider.findAppropriateParentFrom(element);
        return view == null ? element : view;
      }
    }
  }
  return null;
}","@Nullable protected PsiElement getPsiElementForHint(Object selectedValue){
  if (selectedValue instanceof UsageNode) {
    final Usage usage=((UsageNode)selectedValue).getUsage();
    if (usage instanceof UsageInfo2UsageAdapter) {
      final PsiElement element=((UsageInfo2UsageAdapter)usage).getElement();
      if (element != null) {
        final PsiElement view=UsageToPsiElementProvider.findAppropriateParentFrom(element);
        return view == null ? element : view;
      }
    }
  }
  return null;
}",0.990272373540856
160328,"private void initIndirectSubClasses(EClass eClass){
  HashSet<EClass> set=new HashSet<EClass>();
  indirectSubClasses.put(eClass,set);
  set.add(eClass);
  for (  EClassifier eClassifier : eClass.getEPackage().getEClassifiers()) {
    if (eClassifier instanceof EClass) {
      EClass e=(EClass)eClassifier;
      if (eClass.isSuperTypeOf(e)) {
        set.add(e);
      }
    }
  }
}","private Set<EClass> initIndirectSubClasses(EClass eClass){
  HashSet<EClass> set=new HashSet<EClass>();
  indirectSubClasses.put(eClass,set);
  set.add(eClass);
  for (  EClassifier eClassifier : eClass.getEPackage().getEClassifiers()) {
    if (eClassifier instanceof EClass) {
      EClass e=(EClass)eClassifier;
      if (eClass.isSuperTypeOf(e)) {
        set.add(e);
      }
    }
  }
  return set;
}",0.9632446134347274
160329,"public Set<EClass> getSubClasses(EClass eClass){
  return indirectSubClasses.get(eClass);
}","public Set<EClass> getSubClasses(EClass eClass){
  Set<EClass> set=indirectSubClasses.get(eClass);
  if (set == null) {
    return initIndirectSubClasses(eClass);
  }
  return set;
}",0.6373626373626373
160330,"public QueryOidsAndTypesStackFrame(QueryObjectProvider queryObjectProvider,EClass eClass,QueryPart queryPart,QueryContext reusable,List<Long> oids) throws BimserverLockConflictException, BimserverDatabaseException, QueryException {
  super(reusable,queryObjectProvider,queryPart);
  this.eClass=eClass;
  String tableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName();
  if (getReusable().getOidCounters() != null) {
    if (!getReusable().getOidCounters().containsKey(eClass)) {
      return;
    }
    long startOid=getReusable().getOidCounters().get(eClass) + 1;
    oidIterator=oids.iterator();
    long firstOid=oidIterator.next();
    if (firstOid >= startOid) {
      startOid=firstOid;
    }
 else {
    }
    ByteBuffer tmp=ByteBuffer.allocate(12);
    tmp.putInt(getReusable().getPid());
    tmp.putLong(startOid);
    typeRecordIterator=queryObjectProvider.getDatabaseSession().getKeyValueStore().getRecordIterator(tableName,BinUtils.intToByteArray(getReusable().getPid()),tmp.array(),queryObjectProvider.getDatabaseSession());
    record=typeRecordIterator.next();
  }
 else {
    oidIterator=oids.iterator();
    typeRecordIterator=queryObjectProvider.getDatabaseSession().getKeyValueStore().getRecordIterator(tableName,BinUtils.intToByteArray(getReusable().getPid()),BinUtils.intToByteArray(getReusable().getPid()),queryObjectProvider.getDatabaseSession());
    record=typeRecordIterator.next();
  }
}","public QueryOidsAndTypesStackFrame(QueryObjectProvider queryObjectProvider,EClass eClass,QueryPart queryPart,QueryContext reusable,List<Long> oids) throws BimserverLockConflictException, BimserverDatabaseException, QueryException {
  super(reusable,queryObjectProvider,queryPart);
  this.eClass=eClass;
  String tableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName();
  if (getReusable().getOidCounters() != null) {
    if (!getReusable().getOidCounters().containsKey(eClass)) {
      return;
    }
    long startOid=getReusable().getOidCounters().get(eClass);
    oidIterator=oids.iterator();
    long firstOid=oidIterator.next();
    if (firstOid >= startOid) {
      startOid=firstOid;
    }
 else {
    }
    ByteBuffer tmp=ByteBuffer.allocate(12);
    tmp.putInt(getReusable().getPid());
    tmp.putLong(startOid);
    typeRecordIterator=queryObjectProvider.getDatabaseSession().getKeyValueStore().getRecordIterator(tableName,BinUtils.intToByteArray(getReusable().getPid()),tmp.array(),queryObjectProvider.getDatabaseSession());
    record=typeRecordIterator.next();
  }
 else {
    oidIterator=oids.iterator();
    typeRecordIterator=queryObjectProvider.getDatabaseSession().getKeyValueStore().getRecordIterator(tableName,BinUtils.intToByteArray(getReusable().getPid()),BinUtils.intToByteArray(getReusable().getPid()),queryObjectProvider.getDatabaseSession());
    record=typeRecordIterator.next();
  }
}",0.998608211551844
160331,"@Override public boolean process() throws BimserverDatabaseException, QueryException {
  if (typeIterator == null) {
    return true;
  }
  if (typeIterator.hasNext()) {
    EClass eClass=typeIterator.next();
    if (oids != null) {
      List<Long> oids2=oids.get(eClass);
      if (oids2.size() == 1 && oids2.get(0) == 91638728554L) {
        System.out.println();
      }
      if (oids2 != null) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,oids2));
      }
    }
 else     if (guids != null) {
      queryObjectProvider.push(new QueryGuidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,guids));
    }
 else     if (names != null) {
      queryObjectProvider.push(new QueryNamesAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,names));
    }
 else     if (properties != null) {
      queryObjectProvider.push(new QueryPropertiesAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,properties));
    }
 else     if (classifications != null) {
      queryObjectProvider.push(new QueryClassificationsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,classifications));
    }
 else     if (inBoundingBox != null) {
      queryObjectProvider.push(new QueryBoundingBoxStackFrame(queryObjectProvider,eClass,partialQuery,reusable,inBoundingBox));
    }
 else     if (tiles != null) {
      List<Long> oids=new ArrayList<>();
      List<Long> oidsFiltered=new ArrayList<>();
      QueryPart filteredQueryPart=createFilteredQueryPart(partialQuery);
      Set<Node<GeometryObject>> nodes=(Set<Node<GeometryObject>>)tiles.getNodes();
      for (      Node<GeometryObject> node : nodes) {
        float last=0;
        for (        ObjectWrapper<GeometryObject> objectWrapper : node.getValues()) {
          last=objectWrapper.getV().getDensity();
          GeometryObject geometryObject=objectWrapper.getV();
          if (geometryObject.getRoid() == reusable.getRoid()) {
            long objectId=geometryObject.getOid();
            if (eClass.isSuperTypeOf(queryObjectProvider.getDatabaseSession().getEClassForOid(objectId))) {
              if (tiles.getMinimumReuseThreshold() != -1 && tiles.getMinimumReuseThreshold() <= geometryObject.getSaveableTriangles()) {
                oidsFiltered.add(objectId);
              }
 else {
                oids.add(objectId);
              }
            }
          }
        }
      }
      if (!oids.isEmpty()) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,oids));
      }
      if (!oidsFiltered.isEmpty()) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,filteredQueryPart,reusable,oidsFiltered));
      }
    }
 else {
      queryObjectProvider.push(new QueryTypeStackFrame(queryObjectProvider,eClass,reusable,partialQuery));
    }
    return false;
  }
  return true;
}","@Override public boolean process() throws BimserverDatabaseException, QueryException {
  if (typeIterator == null) {
    return true;
  }
  if (typeIterator.hasNext()) {
    EClass eClass=typeIterator.next();
    if (oids != null) {
      List<Long> oids2=oids.get(eClass);
      if (oids2 != null) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,oids2));
      }
    }
 else     if (guids != null) {
      queryObjectProvider.push(new QueryGuidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,guids));
    }
 else     if (names != null) {
      queryObjectProvider.push(new QueryNamesAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,names));
    }
 else     if (properties != null) {
      queryObjectProvider.push(new QueryPropertiesAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,properties));
    }
 else     if (classifications != null) {
      queryObjectProvider.push(new QueryClassificationsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,classifications));
    }
 else     if (inBoundingBox != null) {
      queryObjectProvider.push(new QueryBoundingBoxStackFrame(queryObjectProvider,eClass,partialQuery,reusable,inBoundingBox));
    }
 else     if (tiles != null) {
      List<Long> oids=new ArrayList<>();
      List<Long> oidsFiltered=new ArrayList<>();
      QueryPart filteredQueryPart=createFilteredQueryPart(partialQuery);
      Set<Node<GeometryObject>> nodes=(Set<Node<GeometryObject>>)tiles.getNodes();
      for (      Node<GeometryObject> node : nodes) {
        float last=0;
        for (        ObjectWrapper<GeometryObject> objectWrapper : node.getValues()) {
          last=objectWrapper.getV().getDensity();
          GeometryObject geometryObject=objectWrapper.getV();
          if (geometryObject.getRoid() == reusable.getRoid()) {
            long objectId=geometryObject.getOid();
            if (eClass.isSuperTypeOf(queryObjectProvider.getDatabaseSession().getEClassForOid(objectId))) {
              if (tiles.getMinimumReuseThreshold() != -1 && tiles.getMinimumReuseThreshold() <= geometryObject.getSaveableTriangles()) {
                oidsFiltered.add(objectId);
              }
 else {
                oids.add(objectId);
              }
            }
          }
        }
      }
      if (!oids.isEmpty()) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,partialQuery,reusable,oids));
      }
      if (!oidsFiltered.isEmpty()) {
        queryObjectProvider.push(new QueryOidsAndTypesStackFrame(queryObjectProvider,eClass,filteredQueryPart,reusable,oidsFiltered));
      }
    }
 else {
      queryObjectProvider.push(new QueryTypeStackFrame(queryObjectProvider,eClass,reusable,partialQuery));
    }
    return false;
  }
  return true;
}",0.9827202737382378
160332,"@SuppressWarnings(""String_Node_Str"") private Object readList(IdEObject idEObject,EClass originalQueryClass,ByteBuffer buffer,IfcModelInterface model,QueryInterface query,TodoList todoList,EStructuralFeature feature) throws BimserverDatabaseException {
  if (feature.getEType() instanceof EEnum) {
  }
 else   if (feature.getEType() instanceof EClass) {
    if (buffer.capacity() == 1 && buffer.get(0) == -1) {
      buffer.position(buffer.position() + 1);
    }
 else {
      int listSize=buffer.getInt();
      AbstractEList<Object> list=(AbstractEList<Object>)idEObject.eGet(feature);
      for (int i=0; i < listSize; i++) {
        if (feature.getEAnnotation(""String_Node_Str"") != null) {
          IdEObjectImpl newObject=createInternal((EClass)feature.getEType(),query);
          Object result=readList(newObject,originalQueryClass,buffer,model,query,todoList,newObject.eClass().getEStructuralFeature(""String_Node_Str""));
          if (result != null) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(""String_Node_Str""),result);
          }
          list.addUnique(newObject);
        }
 else {
          IdEObject referencedObject=null;
          buffer.order(ByteOrder.LITTLE_ENDIAN);
          short cid=buffer.getShort();
          buffer.order(ByteOrder.BIG_ENDIAN);
          if (cid == -1) {
          }
 else           if (cid < 0) {
            EClass referenceClass=database.getEClassForCid((short)(-cid));
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + (-cid));
            }
            if (feature.isMany()) {
              referencedObject=readEmbeddedValue(feature,buffer,referenceClass,query);
            }
 else {
              referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
            }
          }
 else           if (cid > 0) {
            EClass referenceClass=database.getEClassForCid(cid);
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + cid);
            }
            buffer.position(buffer.position() - 2);
            referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
          }
          if (referencedObject != null) {
            if (!feature.getEType().isInstance(referencedObject)) {
              throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getEType().getName()+ ""String_Node_Str""+ feature.getName());
            }
            if (feature.isUnique()) {
              list.add(referencedObject);
            }
 else {
              list.addUnique(referencedObject);
            }
          }
        }
      }
    }
  }
 else   if (feature.getEType() instanceof EDataType) {
    int listSize=buffer.getInt();
    BasicEList<Object> list=new BasicEList<Object>(listSize);
    for (int i=0; i < listSize; i++) {
      Object reference=readPrimitiveValue(feature.getEType(),buffer,query);
      if (reference != null) {
        list.addUnique(reference);
      }
    }
    return list;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") private Object readList(IdEObject idEObject,EClass originalQueryClass,ByteBuffer buffer,IfcModelInterface model,QueryInterface query,TodoList todoList,EStructuralFeature feature) throws BimserverDatabaseException {
  if (feature.getEType() instanceof EEnum) {
  }
 else   if (feature.getEType() instanceof EClass) {
    if (buffer.capacity() == 1 && buffer.get(0) == -1) {
      buffer.position(buffer.position() + 1);
    }
 else {
      int listSize=buffer.getInt();
      BasicEList<Object> list=(BasicEList<Object>)idEObject.eGet(feature);
      list.grow(listSize);
      for (int i=0; i < listSize; i++) {
        if (feature.getEAnnotation(""String_Node_Str"") != null) {
          IdEObjectImpl newObject=createInternal((EClass)feature.getEType(),query);
          Object result=readList(newObject,originalQueryClass,buffer,model,query,todoList,newObject.eClass().getEStructuralFeature(""String_Node_Str""));
          if (result != null) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(""String_Node_Str""),result);
          }
          list.addUnique(newObject);
        }
 else {
          IdEObject referencedObject=null;
          buffer.order(ByteOrder.LITTLE_ENDIAN);
          short cid=buffer.getShort();
          buffer.order(ByteOrder.BIG_ENDIAN);
          if (cid == -1) {
          }
 else           if (cid < 0) {
            EClass referenceClass=database.getEClassForCid((short)(-cid));
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + (-cid));
            }
            if (feature.isMany()) {
              referencedObject=readEmbeddedValue(feature,buffer,referenceClass,query);
            }
 else {
              referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
            }
          }
 else           if (cid > 0) {
            EClass referenceClass=database.getEClassForCid(cid);
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + cid);
            }
            buffer.position(buffer.position() - 2);
            referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
          }
          if (referencedObject != null) {
            if (!feature.getEType().isInstance(referencedObject)) {
              throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getEType().getName()+ ""String_Node_Str""+ feature.getName());
            }
            if (feature.isUnique()) {
              list.add(referencedObject);
            }
 else {
              list.addUnique(referencedObject);
            }
          }
        }
      }
    }
  }
 else   if (feature.getEType() instanceof EDataType) {
    int listSize=buffer.getInt();
    BasicEList<Object> list=new BasicEList<Object>(listSize);
    for (int i=0; i < listSize; i++) {
      Object reference=readPrimitiveValue(feature.getEType(),buffer,query);
      if (reference != null) {
        list.addUnique(reference);
      }
    }
    return list;
  }
  return null;
}",0.9916258492652869
160333,"@Override public void align4() throws IOException {
  int extra=4 - (growingByteBuffer.position() % 4);
  if (extra > 0 && extra != 8) {
    growingByteBuffer.ensureExtraCapacity(extra);
    dataOutputStream.write(new byte[extra]);
  }
}","@Override public void align4() throws IOException {
  int extra=4 - (growingByteBuffer.position() % 4);
  if (extra > 0 && extra != 4) {
    growingByteBuffer.ensureExtraCapacity(extra);
    dataOutputStream.write(new byte[extra]);
  }
}",0.9957805907172996
160334,"@Override public void align4() throws IOException {
  int extra=4 - (bytesWritten % 4);
  if (extra > 0 && extra != 8) {
    write(new byte[extra]);
  }
}","@Override public void align4() throws IOException {
  int extra=4 - (bytesWritten % 4);
  if (extra > 0 && extra != 4) {
    write(new byte[extra]);
  }
}",0.9935064935064936
160335,"@Override public Long addNewServiceToProject(Long poid,SNewService sService,SAction sAction) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    Action action=null;
    if (sAction instanceof SCheckinRevision) {
      action=(Action)session.create(StorePackage.eINSTANCE.getCheckinRevision());
    }
 else     if (sAction instanceof SStoreExtendedData) {
      action=(Action)session.create(StorePackage.eINSTANCE.getStoreExtendedData());
    }
    getBimServer().getSConverter().convertFromSObject(sAction,action,session);
    NewService service=(NewService)session.create(StorePackage.eINSTANCE.getNewService());
    getBimServer().getSConverter().convertFromSObject(sService,service,session);
    AddNewServiceToProjectDatabaseAction dbAction=new AddNewServiceToProjectDatabaseAction(session,getInternalAccessMethod(),poid,service,action,getAuthorization());
    return session.executeAndCommitAction(dbAction);
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addNewServiceToProject(Long poid,SNewService sService,SAction sAction) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    NewService service=(NewService)session.create(StorePackage.eINSTANCE.getNewService());
    getBimServer().getSConverter().convertFromSObject(sService,service,session);
    AddNewServiceToProjectDatabaseAction dbAction=new AddNewServiceToProjectDatabaseAction(session,getInternalAccessMethod(),poid,service,service.getAction(),getAuthorization());
    return session.executeAndCommitAction(dbAction);
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.6226012793176973
160336,"@Override public void triggerRevisionService(Long roid,Long soid) throws ServerException, UserException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    Revision revision=(Revision)session.get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    if (revision == null) {
      throw new UserException(""String_Node_Str"" + roid);
    }
    NewService newService=session.get(StorePackage.eINSTANCE.getNewService(),soid,OldQuery.getDefault());
    if (revision.getServicesLinked().contains(newService)) {
      return;
    }
    String url=newService.getResourceUrl();
    SerializerPluginConfiguration serializer=newService.getSerializer();
    PackageMetaData pmd=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
    Query query=DefaultQueries.all(pmd);
    Long topicId=download(Collections.singleton(roid),new JsonQueryObjectModelConverter(pmd).toJson(query).toString(),serializer.getOid(),false);
    CloseableHttpClient httpclient=HttpClients.createDefault();
    HttpPost httpPost=new HttpPost(url);
    LongAction<?> longAction=getBimServer().getLongActionManager().getLongAction(topicId);
    if (longAction == null) {
      throw new UserException(""String_Node_Str"" + topicId);
    }
    SCheckoutResult result;
    if (longAction instanceof LongStreamingDownloadAction) {
      LongStreamingDownloadAction longStreamingDownloadAction=(LongStreamingDownloadAction)longAction;
      if (longStreamingDownloadAction.getErrors().isEmpty()) {
        try {
          result=longStreamingDownloadAction.getCheckoutResult();
        }
 catch (        SerializerException e) {
          throw new UserException(e);
        }
      }
 else {
        LOGGER.error(longStreamingDownloadAction.getErrors().get(0));
        throw new ServerException(longStreamingDownloadAction.getErrors().get(0));
      }
    }
 else {
      LongDownloadOrCheckoutAction longDownloadAction=(LongDownloadOrCheckoutAction)longAction;
      try {
        longDownloadAction.waitForCompletion();
        if (longDownloadAction.getErrors().isEmpty()) {
          result=longDownloadAction.getCheckoutResult();
        }
 else {
          LOGGER.error(longDownloadAction.getErrors().get(0));
          throw new ServerException(longDownloadAction.getErrors().get(0));
        }
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new ServerException(e);
      }
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    LOGGER.info(""String_Node_Str"");
    DataSource datasource=result.getFile().getDataSource();
    if (datasource instanceof ExtendedDataSource) {
      ((ExtendedDataSource)datasource).writeToOutputStream(baos,null);
    }
    LOGGER.info(""String_Node_Str"");
    if (newService.getAccessToken() != null) {
      httpPost.setHeader(""String_Node_Str"",""String_Node_Str"" + newService.getAccessToken());
    }
    httpPost.setHeader(""String_Node_Str"",newService.getInput());
    httpPost.setHeader(""String_Node_Str"",newService.getOutput());
    httpPost.setEntity(new ByteArrayEntity(baos.toByteArray()));
    CloseableHttpResponse response=httpclient.execute(httpPost);
    LOGGER.info(response.getStatusLine().toString());
    if (response.getStatusLine().getStatusCode() == 401) {
      throw new UserException(""String_Node_Str"");
    }
 else     if (response.getStatusLine().getStatusCode() == 200) {
      Header[] headers=response.getHeaders(""String_Node_Str"");
      String filename=""String_Node_Str"";
      if (headers.length > 0) {
        String contentDisposition=headers[0].getValue();
        int indexOf=contentDisposition.indexOf(""String_Node_Str"") + 10;
        filename=contentDisposition.substring(indexOf,contentDisposition.indexOf(""String_Node_Str"",indexOf + 1));
      }
      Header dataTitleHeader=response.getFirstHeader(""String_Node_Str"");
      String dataTitle=newService.getName() + ""String_Node_Str"";
      if (dataTitleHeader != null) {
        dataTitle=dataTitleHeader.getValue();
      }
      byte[] responseBytes=ByteStreams.toByteArray(response.getEntity().getContent());
      LOGGER.info(new String(responseBytes,Charsets.UTF_8));
      Action action=newService.getAction();
      if (action instanceof StoreExtendedData) {
        SFile file=new SFile();
        file.setData(responseBytes);
        file.setFilename(filename);
        file.setSize(responseBytes.length);
        file.setMime(response.getHeaders(""String_Node_Str"")[0].getValue());
        Long fileId=uploadFile(file);
        SExtendedData extendedData=new SExtendedData();
        extendedData.setAdded(new Date());
        extendedData.setRevisionId(roid);
        extendedData.setTitle(dataTitle);
        extendedData.setSize(responseBytes.length);
        extendedData.setFileId(fileId);
        extendedData.setSchemaId(getExtendedDataSchemaByName(newService.getOutput()).getOid());
        addExtendedDataToRevision(roid,extendedData);
      }
 else       if (action instanceof CheckinRevision) {
        CheckinRevision checkinRevision=(CheckinRevision)action;
        Project targetProject=checkinRevision.getProject();
        String extension=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
        SDeserializerPluginConfiguration deserializer=getSuggestedDeserializerForExtension(extension,targetProject.getOid());
        Long checkingTopicId=initiateCheckin(targetProject.getOid(),deserializer.getOid());
        checkinInitiatedInternal(checkingTopicId,targetProject.getOid(),dataTitle,deserializer.getOid(),(long)responseBytes.length,filename,new DataHandler(new ByteArrayDataSource(responseBytes,""String_Node_Str"")),false,true,newService.getOid());
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + response.getStatusLine());
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void triggerRevisionService(Long roid,Long soid) throws ServerException, UserException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    Revision revision=(Revision)session.get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    if (revision == null) {
      throw new UserException(""String_Node_Str"" + roid);
    }
    NewService newService=session.get(StorePackage.eINSTANCE.getNewService(),soid,OldQuery.getDefault());
    if (revision.getServicesLinked().contains(newService)) {
      return;
    }
    String url=newService.getResourceUrl();
    SerializerPluginConfiguration serializer=newService.getSerializer();
    PackageMetaData pmd=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
    Query query=DefaultQueries.all(pmd);
    Long topicId=download(Collections.singleton(roid),new JsonQueryObjectModelConverter(pmd).toJson(query).toString(),serializer.getOid(),false);
    CloseableHttpClient httpclient=HttpClients.createDefault();
    HttpPost httpPost=new HttpPost(url);
    LongAction<?> longAction=getBimServer().getLongActionManager().getLongAction(topicId);
    if (longAction == null) {
      throw new UserException(""String_Node_Str"" + topicId);
    }
    SCheckoutResult result;
    if (longAction instanceof LongStreamingDownloadAction) {
      LongStreamingDownloadAction longStreamingDownloadAction=(LongStreamingDownloadAction)longAction;
      if (longStreamingDownloadAction.getErrors().isEmpty()) {
        try {
          result=longStreamingDownloadAction.getCheckoutResult();
        }
 catch (        SerializerException e) {
          throw new UserException(e);
        }
      }
 else {
        LOGGER.error(longStreamingDownloadAction.getErrors().get(0));
        throw new ServerException(longStreamingDownloadAction.getErrors().get(0));
      }
    }
 else {
      LongDownloadOrCheckoutAction longDownloadAction=(LongDownloadOrCheckoutAction)longAction;
      try {
        longDownloadAction.waitForCompletion();
        if (longDownloadAction.getErrors().isEmpty()) {
          result=longDownloadAction.getCheckoutResult();
        }
 else {
          LOGGER.error(longDownloadAction.getErrors().get(0));
          throw new ServerException(longDownloadAction.getErrors().get(0));
        }
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new ServerException(e);
      }
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    LOGGER.info(""String_Node_Str"");
    DataSource datasource=result.getFile().getDataSource();
    if (datasource instanceof ExtendedDataSource) {
      ((ExtendedDataSource)datasource).writeToOutputStream(baos,null);
    }
    LOGGER.info(""String_Node_Str"");
    if (newService.getAccessToken() != null) {
      httpPost.setHeader(""String_Node_Str"",""String_Node_Str"" + newService.getAccessToken());
    }
    httpPost.setHeader(""String_Node_Str"",newService.getInput());
    httpPost.setHeader(""String_Node_Str"",newService.getOutput());
    httpPost.setEntity(new ByteArrayEntity(baos.toByteArray()));
    CloseableHttpResponse response=httpclient.execute(httpPost);
    LOGGER.info(response.getStatusLine().toString());
    if (response.getStatusLine().getStatusCode() == 401) {
      throw new UserException(""String_Node_Str"");
    }
 else     if (response.getStatusLine().getStatusCode() == 200) {
      Header[] headers=response.getHeaders(""String_Node_Str"");
      String filename=""String_Node_Str"";
      if (headers.length > 0) {
        String contentDisposition=headers[0].getValue();
        int indexOf=contentDisposition.indexOf(""String_Node_Str"") + 10;
        filename=contentDisposition.substring(indexOf,contentDisposition.indexOf(""String_Node_Str"",indexOf + 1));
      }
      Header dataTitleHeader=response.getFirstHeader(""String_Node_Str"");
      String dataTitle=newService.getName() + ""String_Node_Str"";
      if (dataTitleHeader != null) {
        dataTitle=dataTitleHeader.getValue();
      }
      byte[] responseBytes=ByteStreams.toByteArray(response.getEntity().getContent());
      Action action=newService.getAction();
      if (action instanceof StoreExtendedData) {
        SFile file=new SFile();
        file.setData(responseBytes);
        file.setFilename(filename);
        file.setSize(responseBytes.length);
        file.setMime(response.getHeaders(""String_Node_Str"")[0].getValue());
        Long fileId=uploadFile(file);
        SExtendedData extendedData=new SExtendedData();
        extendedData.setAdded(new Date());
        extendedData.setRevisionId(roid);
        extendedData.setTitle(dataTitle);
        extendedData.setSize(responseBytes.length);
        extendedData.setFileId(fileId);
        extendedData.setSchemaId(getExtendedDataSchemaByName(newService.getOutput()).getOid());
        addExtendedDataToRevision(roid,extendedData);
      }
 else       if (action instanceof CheckinRevision) {
        CheckinRevision checkinRevision=(CheckinRevision)action;
        Project targetProject=checkinRevision.getProject();
        String extension=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
        SDeserializerPluginConfiguration deserializer=getSuggestedDeserializerForExtension(extension,targetProject.getOid());
        Long checkingTopicId=initiateCheckin(targetProject.getOid(),deserializer.getOid());
        checkinInitiatedInternal(checkingTopicId,targetProject.getOid(),dataTitle,deserializer.getOid(),(long)responseBytes.length,filename,new DataHandler(new ByteArrayDataSource(responseBytes,""String_Node_Str"")),false,true,newService.getOid());
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + response.getStatusLine());
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9948256849605563
160337,"@Override public void writeUTF(String str) throws IOException {
  outputStream.write(str.getBytes(Charsets.UTF_8));
}","@Override public void writeUTF(String str) throws IOException {
  new DataOutputStream(outputStream).writeUTF(str);
}",0.7863247863247863
160338,"public GenerateGeometryResult(){
  min=new double[3];
  max=new double[3];
}","public GenerateGeometryResult(){
  min=new double[]{Double.MAX_VALUE,Double.MAX_VALUE,Double.MAX_VALUE};
  max=new double[]{-Double.MAX_VALUE,-Double.MAX_VALUE,-Double.MAX_VALUE};
}",0.5758754863813229
160339,"private void fixInverses(PackageMetaData packageMetaData,long newRoid,Map<Long,HashMapVirtualObject> cache,HashMapVirtualObject next,EReference eReference,long refOid) throws JsonParseException, JsonMappingException, IOException, QueryException, BimserverDatabaseException {
  HashMapVirtualObject referencedObject=cache.get(refOid);
  if (referencedObject == null) {
    referencedObject=getByOid(packageMetaData,getDatabaseSession(),newRoid,refOid);
    cache.put(refOid,referencedObject);
  }
  EReference oppositeReference=packageMetaData.getInverseOrOpposite(referencedObject.eClass(),eReference);
  if (oppositeReference == null) {
    if (eReference.getName().equals(""String_Node_Str"") && referencedObject.eClass().getName().equals(""String_Node_Str"")) {
    }
 else {
      LOGGER.error(""String_Node_Str"" + eReference.getName() + ""String_Node_Str"");
    }
  }
 else {
    if (oppositeReference.isMany()) {
      Object existingList=referencedObject.eGet(oppositeReference);
      if (existingList != null) {
        int currentSize=((List<?>)existingList).size();
        referencedObject.setListItemReference(oppositeReference,currentSize,next.eClass(),next.getOid(),0);
      }
 else {
        referencedObject.setListItemReference(oppositeReference,0,next.eClass(),next.getOid(),0);
      }
    }
 else {
      referencedObject.setReference(oppositeReference,next.getOid(),0);
    }
  }
}","private void fixInverses(PackageMetaData packageMetaData,long newRoid,Map<Long,HashMapVirtualObject> cache,HashMapVirtualObject next,EReference eReference,long refOid) throws JsonParseException, JsonMappingException, IOException, QueryException, BimserverDatabaseException {
  HashMapVirtualObject referencedObject=cache.get(refOid);
  if (referencedObject == null) {
    referencedObject=getByOid(packageMetaData,getDatabaseSession(),newRoid,refOid);
    cache.put(refOid,referencedObject);
  }
  EReference oppositeReference=packageMetaData.getInverseOrOpposite(referencedObject.eClass(),eReference);
  if (oppositeReference == null) {
    if (eReference.getName().equals(""String_Node_Str"") && referencedObject.eClass().getName().equals(""String_Node_Str"")) {
    }
 else {
    }
  }
 else {
    if (oppositeReference.isMany()) {
      Object existingList=referencedObject.eGet(oppositeReference);
      if (existingList != null) {
        int currentSize=((List<?>)existingList).size();
        referencedObject.setListItemReference(oppositeReference,currentSize,next.eClass(),next.getOid(),0);
      }
 else {
        referencedObject.setListItemReference(oppositeReference,0,next.eClass(),next.getOid(),0);
      }
    }
 else {
      referencedObject.setReference(oppositeReference,next.getOid(),0);
    }
  }
}",0.969786293294031
160340,"private void processDownload(Long download) throws UserException, ServerException, PublicInterfaceNotFoundException, IfcModelInterfaceException, IOException {
  InputStream downloadData=bimServerClient.getDownloadData(download,getJsonSerializerOid());
  try {
    new SharedJsonDeserializer(true).read(downloadData,this,false);
  }
 catch (  DeserializeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (downloadData != null) {
      downloadData.close();
    }
  }
}","private void processDownload(Long download) throws UserException, ServerException, PublicInterfaceNotFoundException, IfcModelInterfaceException, IOException {
  InputStream downloadData=bimServerClient.getDownloadData(download,getJsonSerializerOid());
  if (downloadData == null) {
    throw new IfcModelInterfaceException(""String_Node_Str"");
  }
  try {
    new SharedJsonDeserializer(true).read(downloadData,this,false);
  }
 catch (  DeserializeException e) {
    throw new IfcModelInterfaceException(e);
  }
 finally {
    if (downloadData != null) {
      downloadData.close();
    }
  }
}",0.6807727690892365
160341,"public IfcModelInterfaceException(String message){
  super(message);
}","public IfcModelInterfaceException(Exception e){
  super(e);
}",0.8396946564885496
160342,"private Object readPrimitive(JsonReader jsonReader,EStructuralFeature eStructuralFeature) throws IOException {
  EClassifier eClassifier=eStructuralFeature.getEType();
  if (eClassifier == EcorePackage.eINSTANCE.getEString()) {
    return jsonReader.nextString();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEDouble()) {
    return jsonReader.nextDouble();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEBoolean()) {
    return jsonReader.nextBoolean();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEInt()) {
    return jsonReader.nextInt();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEIntegerObject()) {
    return jsonReader.nextInt();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEByteArray()) {
    return Base64.decodeBase64(jsonReader.nextString());
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEDate()) {
    long timestamp=jsonReader.nextLong();
    return new Date(timestamp);
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEFloat()) {
    return (float)jsonReader.nextDouble();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEEnum()) {
    EEnum eEnum=(EEnum)eStructuralFeature.getEType();
    return eEnum.getEEnumLiteral(jsonReader.nextString()).getInstance();
  }
 else   if (eClassifier instanceof EClass) {
    if (eStructuralFeature.getEType().getName().equals(""String_Node_Str"")) {
      IfcGloballyUniqueId ifcGloballyUniqueId=Ifc2x3tc1Factory.eINSTANCE.createIfcGloballyUniqueId();
      ifcGloballyUniqueId.setWrappedValue(jsonReader.nextString());
      return ifcGloballyUniqueId;
    }
 else {
      throw new RuntimeException();
    }
  }
 else   if (eClassifier instanceof EEnum) {
    EEnum eEnum=(EEnum)eStructuralFeature.getEType();
    if (jsonReader.peek() == JsonToken.BOOLEAN) {
      return eEnum.getEEnumLiteral(jsonReader.nextBoolean() ? ""String_Node_Str"" : ""String_Node_Str"").getInstance();
    }
 else {
      return eEnum.getEEnumLiteral(jsonReader.nextString()).getInstance();
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + eStructuralFeature.getEType().getName());
  }
}","private Object readPrimitive(JsonReader jsonReader,EStructuralFeature eStructuralFeature) throws IOException {
  EClassifier eClassifier=eStructuralFeature.getEType();
  if (eClassifier == EcorePackage.eINSTANCE.getEString()) {
    return jsonReader.nextString();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEDouble()) {
    return jsonReader.nextDouble();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEBoolean()) {
    return jsonReader.nextBoolean();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEInt()) {
    return jsonReader.nextInt();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getELong()) {
    return jsonReader.nextLong();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEIntegerObject()) {
    return jsonReader.nextInt();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEByteArray()) {
    return Base64.decodeBase64(jsonReader.nextString());
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEDate()) {
    long timestamp=jsonReader.nextLong();
    return new Date(timestamp);
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEFloat()) {
    return (float)jsonReader.nextDouble();
  }
 else   if (eClassifier == EcorePackage.eINSTANCE.getEEnum()) {
    EEnum eEnum=(EEnum)eStructuralFeature.getEType();
    return eEnum.getEEnumLiteral(jsonReader.nextString()).getInstance();
  }
 else   if (eClassifier instanceof EClass) {
    if (eStructuralFeature.getEType().getName().equals(""String_Node_Str"")) {
      IfcGloballyUniqueId ifcGloballyUniqueId=Ifc2x3tc1Factory.eINSTANCE.createIfcGloballyUniqueId();
      ifcGloballyUniqueId.setWrappedValue(jsonReader.nextString());
      return ifcGloballyUniqueId;
    }
 else {
      throw new RuntimeException();
    }
  }
 else   if (eClassifier instanceof EEnum) {
    EEnum eEnum=(EEnum)eStructuralFeature.getEType();
    if (jsonReader.peek() == JsonToken.BOOLEAN) {
      return eEnum.getEEnumLiteral(jsonReader.nextBoolean() ? ""String_Node_Str"" : ""String_Node_Str"").getInstance();
    }
 else {
      return eEnum.getEEnumLiteral(jsonReader.nextString()).getInstance();
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + eStructuralFeature.getEType().getName());
  }
}",0.9765732659623336
160343,"@Override public InputStream getInputStream() throws IOException {
  return null;
}","@Override public InputStream getInputStream() throws IOException {
  return serializer.getInputStream();
}",0.8571428571428571
160344,"private static void setup(){
  Path home=Paths.get(""String_Node_Str"" + new Random().nextInt(1000000000));
  if (Files.exists(home)) {
    try {
      PathUtils.removeDirectoryWithContent(home);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(home);
  config.setStartEmbeddedWebServer(true);
  config.setPort(7010);
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""String_Node_Str"")));
  config.setClassPath(System.getProperty(""String_Node_Str""));
  bimServer=new BimServer(config);
  try {
    bimServer.setEmbeddedWebServer(new EmbeddedWebServer(bimServer,Paths.get(""String_Node_Str""),false));
    bimServer.start();
    BimServerClientInterface client=bimServer.getBimServerClientFactory().create();
    client.getAdminInterface().setup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    client.disconnect();
    client=bimServer.getBimServerClientFactory().create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
    client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
    client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
    client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
    client.disconnect();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","private static void setup(){
  Path home=Paths.get(""String_Node_Str"" + new Random().nextInt(1000000000));
  if (Files.exists(home)) {
    try {
      PathUtils.removeDirectoryWithContent(home);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(home);
  config.setStartEmbeddedWebServer(true);
  config.setPort(7010);
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""String_Node_Str"")));
  config.setClassPath(System.getProperty(""String_Node_Str""));
  bimServer=new BimServer(config);
  try {
    bimServer.setEmbeddedWebServer(new EmbeddedWebServer(bimServer,Paths.get(""String_Node_Str""),false));
    bimServer.start();
    BimServerClientInterface client=bimServer.getBimServerClientFactory().create();
    client.getAdminInterface().setup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    client.disconnect();
    client=bimServer.getBimServerClientFactory().create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
    String pluginsString=System.getProperty(""String_Node_Str"");
    if (pluginsString != null) {
      String[] plugins=pluginsString.split(""String_Node_Str"");
      Path[] paths=new Path[plugins.length];
      int i=0;
      for (      String p : plugins) {
        paths[i++]=Paths.get(p);
      }
      LocalDevPluginLoader.loadPlugins(bimServer.getPluginManager(),paths);
    }
 else {
      client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
      client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
      client.getPluginInterface().installPluginBundle(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
    }
    client.disconnect();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.8888888888888888
160345,"public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  productRepresentationClass=packageMetaData.getEClass(""String_Node_Str"");
  representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    RenderEnginePool renderEnginePool=bimServer.getRenderEnginePools().getRenderEnginePool(packageMetaData.getSchema(),defaultRenderEngine.getPluginDescriptor().getPluginClassName(),new PluginConfiguration(defaultRenderEngine.getSettings()));
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(10000000));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query2=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart2=query2.createQueryPart();
        queryPart2.addType(eClass,false);
        Include include=queryPart2.createInclude();
        include.addType(eClass,false);
        include.addFieldDirect(""String_Node_Str"");
        QueryObjectProvider queryObjectProvider2=new QueryObjectProvider(databaseSession,bimServer,query2,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider2.next();
        while (next != null) {
          if (next.eClass() == eClass) {
            HashMapVirtualObject representation=next.getDirectFeature(representationFeature);
            if (representation != null) {
              List<Long> representations=(List<Long>)representation.get(""String_Node_Str"");
              if (!representations.isEmpty()) {
                Query query=new Query(""String_Node_Str"",packageMetaData);
                QueryPart queryPart=query.createQueryPart();
                queryPart.addType(eClass,false);
                int x=0;
                queryPart.addOid(next.getOid());
                while (next != null && x < 10) {
                  next=queryObjectProvider2.next();
                  if (next != null) {
                    if (next.eClass() == eClass) {
                      representation=next.getDirectFeature(representationFeature);
                      if (representation != null) {
                        representations=(List<Long>)representation.get(""String_Node_Str"");
                        if (!representations.isEmpty()) {
                          queryPart.addOid(next.getOid());
                          x++;
                        }
                      }
                    }
                  }
                }
                JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
                String queryNameSpace=""String_Node_Str"";
                if (packageMetaData.getSchema() == Schema.IFC4) {
                  queryNameSpace=""String_Node_Str"";
                }
                if (eClass.getName().equals(""String_Node_Str"")) {
                  queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                }
 else {
                  queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                }
                queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                Include representationInclude=jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str"");
                queryPart.addInclude(representationInclude);
                Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str"");
                queryPart.addInclude(objectPlacement);
                if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
                  Include ifcWall=queryPart.createInclude();
                  ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
                  ifcWall.addField(""String_Node_Str"");
                  Include hasOpenings=ifcWall.createInclude();
                  hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
                  hasOpenings.addField(""String_Node_Str"");
                  hasOpenings.addInclude(representationInclude);
                  hasOpenings.addInclude(objectPlacement);
                }
                QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
                Runner runner=new Runner(eClass,renderEnginePool,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,renderEngineFilter,generateGeometryResult,queryContext,query);
                executor.submit(runner);
                jobsTotal.incrementAndGet();
              }
            }
          }
          next=queryObjectProvider2.next();
        }
      }
    }
    allJobsPushed=true;
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}","public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  productRepresentationClass=packageMetaData.getEClass(""String_Node_Str"");
  representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    RenderEnginePool renderEnginePool=bimServer.getRenderEnginePools().getRenderEnginePool(packageMetaData.getSchema(),defaultRenderEngine.getPluginDescriptor().getPluginClassName(),new PluginConfiguration(defaultRenderEngine.getSettings()));
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(10000000));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query2=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart2=query2.createQueryPart();
        queryPart2.addType(eClass,false);
        Include include=queryPart2.createInclude();
        include.addType(eClass,false);
        include.addFieldDirect(""String_Node_Str"");
        QueryObjectProvider queryObjectProvider2=new QueryObjectProvider(databaseSession,bimServer,query2,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider2.next();
        while (next != null) {
          if (next.eClass() == eClass) {
            HashMapVirtualObject representation=next.getDirectFeature(representationFeature);
            if (representation != null) {
              List<Long> representations=(List<Long>)representation.get(""String_Node_Str"");
              if (representations != null && !representations.isEmpty()) {
                Query query=new Query(""String_Node_Str"",packageMetaData);
                QueryPart queryPart=query.createQueryPart();
                queryPart.addType(eClass,false);
                int x=0;
                queryPart.addOid(next.getOid());
                while (next != null && x < 10) {
                  next=queryObjectProvider2.next();
                  if (next != null) {
                    if (next.eClass() == eClass) {
                      representation=next.getDirectFeature(representationFeature);
                      if (representation != null) {
                        representations=(List<Long>)representation.get(""String_Node_Str"");
                        if (!representations.isEmpty()) {
                          queryPart.addOid(next.getOid());
                          x++;
                        }
                      }
                    }
                  }
                }
                JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
                String queryNameSpace=""String_Node_Str"";
                if (packageMetaData.getSchema() == Schema.IFC4) {
                  queryNameSpace=""String_Node_Str"";
                }
                if (eClass.getName().equals(""String_Node_Str"")) {
                  queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                }
 else {
                  queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                }
                queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str""));
                Include representationInclude=jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str"");
                queryPart.addInclude(representationInclude);
                Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(queryNameSpace + ""String_Node_Str"");
                queryPart.addInclude(objectPlacement);
                if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
                  Include ifcWall=queryPart.createInclude();
                  ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
                  ifcWall.addField(""String_Node_Str"");
                  Include hasOpenings=ifcWall.createInclude();
                  hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
                  hasOpenings.addField(""String_Node_Str"");
                  hasOpenings.addInclude(representationInclude);
                  hasOpenings.addInclude(objectPlacement);
                }
                QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
                Runner runner=new Runner(eClass,renderEnginePool,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,renderEngineFilter,generateGeometryResult,queryContext,query);
                executor.submit(runner);
                jobsTotal.incrementAndGet();
              }
            }
          }
          next=queryObjectProvider2.next();
        }
      }
    }
    allJobsPushed=true;
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}",0.9982363315696648
160346,"@SuppressWarnings(""String_Node_Str"") @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<String> projectNames=new ArrayList<>();
  setProgress(""String_Node_Str"",-1);
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    projectNames.add(revision.getProject().getName() + ""String_Node_Str"" + revision.getId());
  }
  String name=Joiner.on(""String_Node_Str"").join(projectNames);
  PackageMetaData lastPackageMetaData=null;
  Project lastProject=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    lastProject=revision.getProject();
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
    lastPackageMetaData=packageMetaData;
    JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
    ObjectNode queryObject;
    try {
      queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
      Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
      pidRoidMap.put(revision.getProject().getId(),roid);
      IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
      ifcModelSet.add(ifcModel);
      QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      HashMapVirtualObject next=queryObjectProvider.next();
      while (next != null) {
        IdEObject newObject=packageMetaData.create(next.eClass());
        IdEObjectImpl idEObjectImpl=(IdEObjectImpl)newObject;
        idEObjectImpl.setPid(revision.getProject().getId());
        idEObjectImpl.setOid(next.getOid());
        for (        EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
          newObject.eSet(eAttribute,next.eGet(eAttribute));
        }
        ifcModel.add(next.getOid(),newObject);
        next=queryObjectProvider.next();
      }
      queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      next=queryObjectProvider.next();
      while (next != null) {
        IdEObject idEObject=ifcModel.get(next.getOid());
        if (idEObject.eClass() != next.eClass()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        for (        EReference eReference : idEObject.eClass().getEAllReferences()) {
          if (eReference.isMany()) {
            List<Long> refOids=(List<Long>)next.eGet(eReference);
            List<IdEObject> list=(List<IdEObject>)idEObject.eGet(eReference);
            if (refOids != null) {
              for (              Long refOid : refOids) {
                IdEObject ref=ifcModel.get(refOid);
                if (ref != null) {
                  list.add(ref);
                }
              }
            }
          }
 else {
            Object r=next.eGet(eReference);
            if (r instanceof Long) {
              long refOid=(Long)r;
              idEObject.eSet(eReference,ifcModel.get(refOid));
            }
 else             if (r instanceof HashMapWrappedVirtualObject) {
              HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)r;
              IdEObject embeddedObject=ifcModel.create(hashMapWrappedVirtualObject.eClass());
              idEObject.eSet(eReference,embeddedObject);
              for (              EAttribute eAttribute : hashMapWrappedVirtualObject.eClass().getEAllAttributes()) {
                embeddedObject.eSet(eAttribute,hashMapWrappedVirtualObject.eGet(eAttribute));
              }
            }
          }
        }
        next=queryObjectProvider.next();
      }
      ifcModel.getModelMetaData().setName(name);
      ifcModel.getModelMetaData().setRevisionId(1);
      if (getAuthorization().getUoid() != -1) {
        ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
      }
      ifcModel.getModelMetaData().setDate(new Date());
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
catch (    IfcModelInterfaceException e) {
      e.printStackTrace();
    }
catch (    QueryException e) {
      e.printStackTrace();
    }
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,0,getDatabaseSession());
  if (ifcModelSet.size() > 1) {
    setProgress(""String_Node_Str"",-1);
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(lastProject,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  ifcModel.getModelMetaData().setName(name);
  if (getAuthorization().getUoid() != -1) {
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  }
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<String> projectNames=new ArrayList<>();
  setProgress(""String_Node_Str"",-1);
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    projectNames.add(revision.getProject().getName() + ""String_Node_Str"" + revision.getId());
  }
  String name=Joiner.on(""String_Node_Str"").join(projectNames);
  PackageMetaData lastPackageMetaData=null;
  Project lastProject=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    lastProject=revision.getProject();
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
    lastPackageMetaData=packageMetaData;
    JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
    ObjectNode queryObject;
    try {
      queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
      Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
      pidRoidMap.put(revision.getProject().getId(),roid);
      IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
      ifcModelSet.add(ifcModel);
      QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      HashMapVirtualObject next=queryObjectProvider.next();
      while (next != null) {
        IdEObject newObject=packageMetaData.create(next.eClass());
        IdEObjectImpl idEObjectImpl=(IdEObjectImpl)newObject;
        idEObjectImpl.setPid(revision.getProject().getId());
        idEObjectImpl.setOid(next.getOid());
        for (        EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
          Object value=next.eGet(eAttribute);
          if (eAttribute.isMany()) {
            List<?> list=(List<?>)value;
            if (list != null) {
              AbstractEList targetList=(AbstractEList)newObject.eGet(eAttribute);
              for (              Object item : list) {
                targetList.addUnique(item);
              }
            }
          }
 else {
            if (value != null || eAttribute.isUnsettable()) {
              newObject.eSet(eAttribute,value);
            }
          }
        }
        ifcModel.add(next.getOid(),newObject);
        next=queryObjectProvider.next();
      }
      queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      next=queryObjectProvider.next();
      while (next != null) {
        IdEObject idEObject=ifcModel.get(next.getOid());
        if (idEObject.eClass() != next.eClass()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        for (        EReference eReference : idEObject.eClass().getEAllReferences()) {
          if (eReference.isMany()) {
            List refOids=(List)next.eGet(eReference);
            AbstractEList<IdEObject> list=(AbstractEList<IdEObject>)idEObject.eGet(eReference);
            if (refOids != null) {
              for (              Object refOid : refOids) {
                if (refOid instanceof Long) {
                  IdEObject ref=ifcModel.get((long)refOid);
                  if (ref != null) {
                    list.addUnique(ref);
                  }
                }
 else                 if (refOid instanceof HashMapWrappedVirtualObject) {
                }
              }
            }
          }
 else {
            Object r=next.eGet(eReference);
            if (r instanceof Long) {
              long refOid=(Long)r;
              idEObject.eSet(eReference,ifcModel.get(refOid));
            }
 else             if (r instanceof HashMapWrappedVirtualObject) {
              HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)r;
              IdEObject embeddedObject=ifcModel.create(hashMapWrappedVirtualObject.eClass());
              idEObject.eSet(eReference,embeddedObject);
              for (              EAttribute eAttribute : hashMapWrappedVirtualObject.eClass().getEAllAttributes()) {
                embeddedObject.eSet(eAttribute,hashMapWrappedVirtualObject.eGet(eAttribute));
              }
            }
          }
        }
        next=queryObjectProvider.next();
      }
      ifcModel.getModelMetaData().setName(name);
      ifcModel.getModelMetaData().setRevisionId(1);
      if (getAuthorization().getUoid() != -1) {
        ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
      }
      ifcModel.getModelMetaData().setDate(new Date());
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
catch (    IfcModelInterfaceException e) {
      e.printStackTrace();
    }
catch (    QueryException e) {
      e.printStackTrace();
    }
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,0,getDatabaseSession());
  if (ifcModelSet.size() > 1) {
    setProgress(""String_Node_Str"",-1);
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(lastProject,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  ifcModel.getModelMetaData().setName(name);
  if (getAuthorization().getUoid() != -1) {
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  }
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}",0.9260557210443316
160347,"public long register(EndPoint endPoint){
  long id=idCounter.incrementAndGet();
  endPoints.put(id,endPoint);
  return id;
}","public long register(EndPoint endPoint){
  long id=idCounter.incrementAndGet();
  endPoints.forcePut(id,endPoint);
  return id;
}",0.9723320158102768
160348,"public void ensureExtraCapacity(int nrExtraBytes){
  if (byteBuffer.capacity() <= byteBuffer.position() + nrExtraBytes) {
    ByteBuffer oldBuffer=byteBuffer;
    byteBuffer=ByteBuffer.allocate(oldBuffer.position() * 2);
    int oldPos=oldBuffer.position();
    oldBuffer.position(0);
    byteBuffer.put(oldBuffer.array(),0,oldPos);
  }
}","public void ensureExtraCapacity(int nrExtraBytes){
  if (byteBuffer.capacity() <= byteBuffer.position() + nrExtraBytes) {
    ByteBuffer oldBuffer=byteBuffer;
    byteBuffer=ByteBuffer.allocate(Math.max(oldBuffer.position() * 2,byteBuffer.position() + nrExtraBytes));
    int oldPos=oldBuffer.position();
    oldBuffer.position(0);
    byteBuffer.put(oldBuffer.array(),0,oldPos);
    byteBuffer.position(oldPos);
  }
}",0.8941798941798942
160349,"@SuppressWarnings(""String_Node_Str"") @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<String> projectNames=new ArrayList<>();
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    projectNames.add(revision.getProject().getName() + ""String_Node_Str"" + revision.getId());
  }
  String name=Joiner.on(""String_Node_Str"").join(projectNames);
  long roid=roids.iterator().next();
  Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
  PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
  JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
  ObjectNode queryObject;
  try {
    queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
    Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
    Map<Integer,Long> pidRoidMap=new HashMap<>();
    pidRoidMap.put(revision.getProject().getId(),roid);
    IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
    QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    HashMapVirtualObject next=queryObjectProvider.next();
    while (next != null) {
      IdEObject newObject=packageMetaData.create(next.eClass());
      IdEObjectImpl idEObjectImpl=(IdEObjectImpl)newObject;
      idEObjectImpl.setPid(revision.getProject().getId());
      idEObjectImpl.setOid(next.getOid());
      for (      EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
        newObject.eSet(eAttribute,next.eGet(eAttribute));
      }
      ifcModel.add(next.getOid(),newObject);
      next=queryObjectProvider.next();
    }
    queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    next=queryObjectProvider.next();
    while (next != null) {
      IdEObject idEObject=ifcModel.get(next.getOid());
      if (idEObject.eClass() != next.eClass()) {
        throw new RuntimeException(""String_Node_Str"");
      }
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          List<Long> refOids=(List<Long>)next.eGet(eReference);
          List<IdEObject> list=(List<IdEObject>)idEObject.eGet(eReference);
          if (refOids != null) {
            for (            Long refOid : refOids) {
              IdEObject ref=ifcModel.get(refOid);
              if (ref != null) {
                list.add(ref);
              }
            }
          }
        }
 else {
          Object r=next.eGet(eReference);
          if (r instanceof Long) {
            long refOid=(Long)r;
            idEObject.eSet(eReference,ifcModel.get(refOid));
          }
 else           if (r instanceof HashMapWrappedVirtualObject) {
            HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)r;
            IdEObject embeddedObject=ifcModel.create(hashMapWrappedVirtualObject.eClass());
            idEObject.eSet(eReference,embeddedObject);
            for (            EAttribute eAttribute : hashMapWrappedVirtualObject.eClass().getEAllAttributes()) {
              embeddedObject.eSet(eAttribute,hashMapWrappedVirtualObject.eGet(eAttribute));
            }
          }
        }
      }
      next=queryObjectProvider.next();
    }
    ifcModel.getModelMetaData().setName(name);
    ifcModel.getModelMetaData().setRevisionId(1);
    if (getAuthorization().getUoid() != -1) {
      ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    }
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  IfcModelInterfaceException e) {
    e.printStackTrace();
  }
catch (  QueryException e) {
    e.printStackTrace();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<String> projectNames=new ArrayList<>();
  setProgress(""String_Node_Str"",-1);
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    projectNames.add(revision.getProject().getName() + ""String_Node_Str"" + revision.getId());
  }
  String name=Joiner.on(""String_Node_Str"").join(projectNames);
  PackageMetaData lastPackageMetaData=null;
  Project lastProject=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    lastProject=revision.getProject();
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
    lastPackageMetaData=packageMetaData;
    JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
    ObjectNode queryObject;
    try {
      queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
      Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
      pidRoidMap.put(revision.getProject().getId(),roid);
      IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
      ifcModelSet.add(ifcModel);
      QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      HashMapVirtualObject next=queryObjectProvider.next();
      while (next != null) {
        IdEObject newObject=packageMetaData.create(next.eClass());
        IdEObjectImpl idEObjectImpl=(IdEObjectImpl)newObject;
        idEObjectImpl.setPid(revision.getProject().getId());
        idEObjectImpl.setOid(next.getOid());
        for (        EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
          newObject.eSet(eAttribute,next.eGet(eAttribute));
        }
        ifcModel.add(next.getOid(),newObject);
        next=queryObjectProvider.next();
      }
      queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,Collections.singleton(roid),packageMetaData);
      next=queryObjectProvider.next();
      while (next != null) {
        IdEObject idEObject=ifcModel.get(next.getOid());
        if (idEObject.eClass() != next.eClass()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        for (        EReference eReference : idEObject.eClass().getEAllReferences()) {
          if (eReference.isMany()) {
            List<Long> refOids=(List<Long>)next.eGet(eReference);
            List<IdEObject> list=(List<IdEObject>)idEObject.eGet(eReference);
            if (refOids != null) {
              for (              Long refOid : refOids) {
                IdEObject ref=ifcModel.get(refOid);
                if (ref != null) {
                  list.add(ref);
                }
              }
            }
          }
 else {
            Object r=next.eGet(eReference);
            if (r instanceof Long) {
              long refOid=(Long)r;
              idEObject.eSet(eReference,ifcModel.get(refOid));
            }
 else             if (r instanceof HashMapWrappedVirtualObject) {
              HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)r;
              IdEObject embeddedObject=ifcModel.create(hashMapWrappedVirtualObject.eClass());
              idEObject.eSet(eReference,embeddedObject);
              for (              EAttribute eAttribute : hashMapWrappedVirtualObject.eClass().getEAllAttributes()) {
                embeddedObject.eSet(eAttribute,hashMapWrappedVirtualObject.eGet(eAttribute));
              }
            }
          }
        }
        next=queryObjectProvider.next();
      }
      ifcModel.getModelMetaData().setName(name);
      ifcModel.getModelMetaData().setRevisionId(1);
      if (getAuthorization().getUoid() != -1) {
        ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
      }
      ifcModel.getModelMetaData().setDate(new Date());
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
catch (    IfcModelInterfaceException e) {
      e.printStackTrace();
    }
catch (    QueryException e) {
      e.printStackTrace();
    }
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,0,getDatabaseSession());
  if (ifcModelSet.size() > 1) {
    setProgress(""String_Node_Str"",-1);
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(lastProject,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  ifcModel.getModelMetaData().setName(name);
  if (getAuthorization().getUoid() != -1) {
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  }
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}",0.3082256539552474
160350,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@SuppressWarnings(""String_Node_Str"") public PluginBundleVersion getInstalledVersion(){
  return (PluginBundleVersion)eGet(StorePackage.Literals.PLUGIN_BUNDLE__INSTALLED_VERSION,true);
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public PluginBundleVersion getInstalledVersion(){
  return (PluginBundleVersion)eGet(StorePackage.Literals.PLUGIN_BUNDLE__INSTALLED_VERSION,true);
}",0.9224318658280922
160351,"public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(""String_Node_Str"",10000);
  props.put(""String_Node_Str"",10000);
  props.put(""String_Node_Str"",10000);
  props.put(smtpProps,serverSettings.getSmtpPort());
  if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
  Session mailSession=Session.getInstance(props);
  Transport transport=null;
  try {
    if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
      transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + serverSettings.getSmtpProtocol());
    }
    transport.connect(serverSettings.getSmtpServer(),serverSettings.getSmtpUsername(),serverSettings.getSmtpPassword());
    Message message=new MimeMessage(mailSession);
    message.setSubject(subject);
    message.setRecipients(to,addressTo);
    message.setContent(body,contentType);
    message.setFrom(from);
    transport.sendMessage(message,addressTo);
  }
 catch (  MessagingException e) {
    LOGGER.error(""String_Node_Str"" + body + ""String_Node_Str""+ e.getMessage());
  }
}","public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(""String_Node_Str"",10000);
  props.put(""String_Node_Str"",10000);
  props.put(""String_Node_Str"",10000);
  props.put(smtpProps,serverSettings.getSmtpPort());
  if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
  Session mailSession=Session.getInstance(props);
  Transport transport=null;
  try {
    if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
      transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + serverSettings.getSmtpProtocol());
    }
    transport.connect(serverSettings.getSmtpServer(),serverSettings.getSmtpPort(),serverSettings.getSmtpUsername(),serverSettings.getSmtpPassword());
    Message message=new MimeMessage(mailSession);
    message.setSubject(subject);
    message.setRecipients(to,addressTo);
    message.setContent(body,contentType);
    message.setFrom(from);
    transport.sendMessage(message,addressTo);
  }
 catch (  MessagingException e) {
    LOGGER.error(""String_Node_Str"" + body + ""String_Node_Str""+ e.getMessage());
  }
}",0.9920526171553852
160352,"private Type cloneAndAdd(DatabaseSession session,Type input) throws BimserverDatabaseException {
  if (input instanceof BooleanType) {
    BooleanType booleanType=session.create(BooleanType.class);
    booleanType.setValue(((BooleanType)input).isValue());
    session.store(booleanType);
    return booleanType;
  }
 else   if (input instanceof StringType) {
    StringType stringType=session.create(StringType.class);
    stringType.setValue(((StringType)input).getValue());
    session.store(stringType);
    return stringType;
  }
 else   if (input instanceof DoubleType) {
    DoubleType doubleType=session.create(DoubleType.class);
    doubleType.setValue(((DoubleType)input).getValue());
    session.store(doubleType);
    return doubleType;
  }
 else   if (input instanceof LongType) {
    LongType longType=session.create(LongType.class);
    longType.setValue(((LongType)input).getValue());
    session.store(longType);
    return longType;
  }
  return null;
}","public Type cloneAndAdd(DatabaseSession session,Type input) throws BimserverDatabaseException {
  if (input instanceof BooleanType) {
    BooleanType booleanType=session.create(BooleanType.class);
    booleanType.setValue(((BooleanType)input).isValue());
    session.store(booleanType);
    return booleanType;
  }
 else   if (input instanceof StringType) {
    StringType stringType=session.create(StringType.class);
    stringType.setValue(((StringType)input).getValue());
    session.store(stringType);
    return stringType;
  }
 else   if (input instanceof DoubleType) {
    DoubleType doubleType=session.create(DoubleType.class);
    doubleType.setValue(((DoubleType)input).getValue());
    session.store(doubleType);
    return doubleType;
  }
 else   if (input instanceof LongType) {
    LongType longType=session.create(LongType.class);
    longType.setValue(((LongType)input).getValue());
    session.store(longType);
    return longType;
  }
  return null;
}",0.9943269726663228
160353,"public void start() throws DatabaseInitException, BimserverDatabaseException, PluginException, DatabaseRestartRequiredException, ServerException {
  try {
    LOGGER.debug(""String_Node_Str"");
    SVersion localVersion=versionChecker.getLocalVersion();
    if (localVersion != null) {
      LOGGER.info(""String_Node_Str"" + localVersion.getFullString());
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    try {
      pluginManager.setPluginChangeListener(new PluginChangeListener(){
        @Override public void pluginStateChanged(        PluginContext pluginContext,        boolean enabled){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_PluginClassName(),new StringLiteral(pluginContext.getPlugin().getClass().getName()));
          DatabaseSession session=bimDatabase.createSession();
          try {
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              PluginDescriptor pluginConfiguration=pluginsFound.values().iterator().next();
              pluginConfiguration.setEnabled(pluginContext.isEnabled());
              session.store(pluginConfiguration);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            session.close();
          }
        }
        @Override public long pluginBundleUpdated(        PluginBundle pluginBundle){
          SPluginBundleVersion sPluginBundleVersion=pluginBundle.getPluginBundleVersion();
          try (DatabaseSession session=bimDatabase.createSession()){
            PluginBundleVersion current=null;
            IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
            for (            PluginBundleVersion pbv : allOfType.getAll(PluginBundleVersion.class)) {
              if (pbv.getGroupId().equals(pluginBundle.getPluginBundleVersion().getGroupId()) && pbv.getArtifactId().equals(pluginBundle.getPluginBundleVersion().getArtifactId())) {
                current=pbv;
              }
            }
            if (current != null) {
              current.setDescription(sPluginBundleVersion.getArtifactId());
              current.setIcon(sPluginBundleVersion.getIcon());
              current.setMismatch(sPluginBundleVersion.isMismatch());
              current.setRepository(sPluginBundleVersion.getRepository());
              current.setType(getSConverter().convertFromSObject(sPluginBundleVersion.getType()));
              current.setVersion(sPluginBundleVersion.getVersion());
              current.setOrganization(sPluginBundleVersion.getOrganization());
              current.setName(sPluginBundleVersion.getName());
              session.store(current);
              session.commit();
            }
            return current.getOid();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
          return -1;
        }
        @Override public void pluginUpdated(        long pluginBundleVersionId,        PluginContext newPluginContext,        SPluginInformation sPluginInformation) throws BimserverDatabaseException {
          try (DatabaseSession session=bimDatabase.createSession()){
            Plugin plugin=newPluginContext.getPlugin();
            Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(newPluginContext.getIdentifier()));
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            for (            PluginDescriptor pluginDescriptor : pluginsFound.values()) {
              pluginDescriptor.setIdentifier(newPluginContext.getIdentifier());
              pluginDescriptor.setPluginClassName(plugin.getClass().getName());
              pluginDescriptor.setDescription(newPluginContext.getDescription());
              pluginDescriptor.setName(sPluginInformation.getName());
              pluginDescriptor.setLocation(newPluginContext.getLocation().toString());
              pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
              pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
              pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
              PluginBundleVersion value=session.get(pluginBundleVersionId,OldQuery.getDefault());
              pluginDescriptor.setPluginBundleVersion(value);
              session.store(pluginDescriptor);
              if (sPluginInformation.isInstallForAllUsers()) {
                IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
                for (                User user : allOfType.getAll(User.class)) {
                  if (user.getState() == ObjectState.ACTIVE) {
                    updateUserPlugin(session,user,pluginDescriptor,newPluginContext);
                  }
                }
              }
              if (newPluginContext.getPlugin() instanceof WebModulePlugin) {
                ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
                WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),newPluginContext.getIdentifier());
                if (webPluginConfiguration == null) {
                  webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
                  serverSettings.getWebModules().add(webPluginConfiguration);
                  genericPluginConversion(newPluginContext,session,webPluginConfiguration,pluginDescriptor);
                  String contextPath=""String_Node_Str"";
                  for (                  Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
                    if (parameter.getName().equals(""String_Node_Str"")) {
                      contextPath=((StringType)parameter.getValue()).getValue();
                    }
                  }
                  String identifier=webPluginConfiguration.getPluginDescriptor().getIdentifier();
                  webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(identifier,true));
                }
              }
            }
            try {
              session.commit();
            }
 catch (            ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
         }
        @Override public void pluginInstalled(        long pluginBundleVersionId,        PluginContext pluginContext,        SPluginInformation sPluginInformation) throws BimserverDatabaseException {
          try (DatabaseSession session=bimDatabase.createSession()){
            Plugin plugin=pluginContext.getPlugin();
            PluginDescriptor pluginDescriptor=session.create(PluginDescriptor.class);
            pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
            pluginDescriptor.setPluginClassName(plugin.getClass().getName());
            pluginDescriptor.setDescription(pluginContext.getDescription());
            pluginDescriptor.setName(sPluginInformation.getName());
            pluginDescriptor.setLocation(pluginContext.getLocation().toString());
            pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
            pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
            pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
            pluginDescriptor.setPluginBundleVersion(session.get(pluginBundleVersionId,OldQuery.getDefault()));
            if (sPluginInformation.isInstallForAllUsers()) {
              IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
              for (              User user : allOfType.getAll(User.class)) {
                if (user.getState() == ObjectState.ACTIVE) {
                  updateUserPlugin(session,user,pluginDescriptor,pluginContext);
                }
              }
            }
            if (pluginContext.getPlugin() instanceof WebModulePlugin) {
              ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
              WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),pluginContext.getIdentifier());
              if (webPluginConfiguration == null) {
                webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
                serverSettings.getWebModules().add(webPluginConfiguration);
                genericPluginConversion(pluginContext,session,webPluginConfiguration,pluginDescriptor);
                session.store(serverSettings);
              }
              String contextPath=""String_Node_Str"";
              for (              Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
                if (parameter.getName().equals(""String_Node_Str"")) {
                  contextPath=((StringType)parameter.getValue()).getValue();
                }
              }
              webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(pluginContext.getIdentifier(),true));
            }
            try {
              session.commit();
            }
 catch (            ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
         }
        @Override public void pluginUninstalled(        PluginContext pluginContext){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
          DatabaseSession session=bimDatabase.createSession();
          try {
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              PluginDescriptor pluginDescriptor=pluginsFound.values().iterator().next();
              for (              PluginConfiguration pluginConfiguration : pluginDescriptor.getConfigurations()) {
                pluginConfiguration.remove();
              }
              pluginDescriptor.remove();
              session.store(pluginDescriptor);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            session.close();
          }
        }
        @Override public long pluginBundleInstalled(        PluginBundle pluginBundle){
          try (DatabaseSession session=bimDatabase.createSession()){
            PluginBundleVersion current=null;
            IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
            for (            PluginBundleVersion pbv : allOfType.getAll(PluginBundleVersion.class)) {
              if (pbv.getGroupId().equals(pluginBundle.getPluginBundleVersion().getGroupId()) && pbv.getArtifactId().equals(pluginBundle.getPluginBundleVersion().getArtifactId())) {
                current=pbv;
              }
            }
            PluginBundleVersion pluginBundleVersion=null;
            if (current != null) {
              pluginBundleVersion=current;
              session.store(pluginBundleVersion);
            }
 else {
              pluginBundleVersion=session.create(PluginBundleVersion.class);
            }
            SPluginBundleVersion sPluginBundleVersion=pluginBundle.getPluginBundleVersion();
            pluginBundleVersion.setArtifactId(sPluginBundleVersion.getArtifactId());
            pluginBundleVersion.setDescription(sPluginBundleVersion.getArtifactId());
            pluginBundleVersion.setGroupId(sPluginBundleVersion.getGroupId());
            pluginBundleVersion.setIcon(sPluginBundleVersion.getIcon());
            pluginBundleVersion.setMismatch(sPluginBundleVersion.isMismatch());
            pluginBundleVersion.setRepository(sPluginBundleVersion.getRepository());
            pluginBundleVersion.setType(getSConverter().convertFromSObject(sPluginBundleVersion.getType()));
            pluginBundleVersion.setVersion(sPluginBundleVersion.getVersion());
            pluginBundleVersion.setOrganization(sPluginBundleVersion.getOrganization());
            pluginBundleVersion.setName(sPluginBundleVersion.getName());
            session.commit();
            return pluginBundleVersion.getOid();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
          return -1;
        }
        @Override public void pluginBundleUninstalled(        PluginBundle pluginBundle){
          try (DatabaseSession session=bimDatabase.createSession()){
          }
         }
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    try {
      metaDataManager.init();
      pluginManager.initAllLoadedPlugins();
    }
 catch (    PluginException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    serverStartTime=new GregorianCalendar();
    longActionManager=new LongActionManager();
    Set<EPackage> packages=new LinkedHashSet<>();
    packages.add(Ifc2x3tc1Package.eINSTANCE);
    packages.add(Ifc4Package.eINSTANCE);
    templateEngine=new TemplateEngine();
    URL emailTemplates=config.getResourceFetcher().getResource(""String_Node_Str"");
    if (emailTemplates != null) {
      templateEngine.init(emailTemplates);
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    Path databaseDir=config.getHomeDir().resolve(""String_Node_Str"");
    BerkeleyKeyValueStore keyValueStore=new BerkeleyKeyValueStore(databaseDir);
    schemaConverterManager.registerConverter(new Ifc2x3tc1ToIfc4SchemaConverterFactory());
    schemaConverterManager.registerConverter(new Ifc4ToIfc2x3tc1SchemaConverterFactory());
    metricsRegistry=new MetricsRegistry();
    Path mavenPath=config.getHomeDir().resolve(""String_Node_Str"");
    if (!Files.exists(mavenPath)) {
      Files.createDirectories(mavenPath);
    }
    mavenPluginRepository=new MavenPluginRepository(mavenPath,""String_Node_Str"");
    OldQuery.setPackageMetaDataForDefaultQuery(metaDataManager.getPackageMetaData(""String_Node_Str""));
    bimDatabase=new Database(this,packages,keyValueStore,metaDataManager);
    try {
      bimDatabase.init();
    }
 catch (    DatabaseRestartRequiredException e) {
      bimDatabase.close();
      keyValueStore=new BerkeleyKeyValueStore(databaseDir);
      bimDatabase=new Database(this,packages,keyValueStore,metaDataManager);
      try {
        bimDatabase.init();
      }
 catch (      InconsistentModelsException e1) {
        LOGGER.error(""String_Node_Str"",e);
        serverInfoManager.setServerState(ServerState.FATAL_ERROR);
        serverInfoManager.setErrorMessage(""String_Node_Str"");
      }
    }
catch (    InconsistentModelsException e) {
      LOGGER.error(""String_Node_Str"",e);
      serverInfoManager.setServerState(ServerState.FATAL_ERROR);
      serverInfoManager.setErrorMessage(""String_Node_Str"");
    }
    DatabaseSession encsession=bimDatabase.createSession();
    try {
      byte[] encryptionkeyBytes=null;
      if (!bimDatabase.getRegistry().has(ENCRYPTIONKEY,encsession)) {
        encryptionkeyBytes=new byte[16];
        new SecureRandom().nextBytes(encryptionkeyBytes);
        bimDatabase.getRegistry().save(ENCRYPTIONKEY,encryptionkeyBytes,encsession);
        encsession.commit();
      }
 else {
        encryptionkeyBytes=bimDatabase.getRegistry().readByteArray(ENCRYPTIONKEY,encsession);
      }
      encryptionkey=new SecretKeySpec(encryptionkeyBytes,""String_Node_Str"");
    }
  finally {
      encsession.close();
    }
    protocolBuffersMetaData=new ProtocolBuffersMetaData();
    protocolBuffersMetaData.load(servicesMap,ProtocolBuffersBimServerClientFactory.class);
    serverInfoManager.init(this);
    webModuleManager=new WebModuleManager(this);
    jsonHandler=new JsonHandler(this);
    serializerFactory=new SerializerFactory();
    serverSettingsCache=new ServerSettingsCache(bimDatabase);
    serverInfoManager.update();
    renderEnginePools=new RenderEnginePools(this);
    if (serverInfoManager.getServerState() == ServerState.MIGRATION_REQUIRED) {
      serverInfoManager.registerStateChangeListener(new StateChangeListener(){
        @Override public void stateChanged(        ServerState oldState,        ServerState newState){
          if (oldState == ServerState.MIGRATION_REQUIRED && newState == ServerState.RUNNING) {
            try {
              initDatabaseDependantItems();
            }
 catch (            BimserverDatabaseException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
 else {
      initDatabaseDependantItems();
    }
    mailSystem=new MailSystem(this);
    diskCacheManager=new DiskCacheManager(this,config.getHomeDir().resolve(""String_Node_Str""));
    newDiskCacheManager=new NewDiskCacheManager(this,config.getHomeDir().resolve(""String_Node_Str""));
    mergerFactory=new MergerFactory(this);
    FileBasedReflectorFactoryBuilder factoryBuilder=new FileBasedReflectorFactoryBuilder();
    reflectorFactory=factoryBuilder.newReflectorFactory();
    if (reflectorFactory == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    servicesMap.setReflectorFactory(reflectorFactory);
    bimScheduler=new JobScheduler(this);
    bimScheduler.start();
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer.start();
    }
    if (config.isStartCommandLine()) {
      commandLine=new CommandLine(this);
      commandLine.start();
    }
    try (DatabaseSession session=bimDatabase.createSession()){
      IfcModelInterface pluginBundleVersions=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
      for (      PluginBundleVersion pluginBundleVersion : pluginBundleVersions.getAll(PluginBundleVersion.class)) {
        if (pluginBundleVersion.getType() == PluginBundleType.MAVEN) {
          PluginBundleVersionIdentifier pluginBundleVersionIdentifier=new PluginBundleVersionIdentifier(pluginBundleVersion.getGroupId(),pluginBundleVersion.getArtifactId(),pluginBundleVersion.getVersion());
          IfcModelInterface pluginDescriptors=session.getAllOfType(StorePackage.eINSTANCE.getPluginDescriptor(),OldQuery.getDefault());
          List<SPluginInformation> plugins=new ArrayList<>();
          for (          PluginDescriptor pluginDescriptor : pluginDescriptors.getAll(PluginDescriptor.class)) {
            if (pluginDescriptor.getPluginBundleVersion() == pluginBundleVersion && pluginDescriptor.getEnabled()) {
              SPluginInformation sPluginInformation=new SPluginInformation();
              sPluginInformation.setEnabled(true);
              sPluginInformation.setDescription(pluginDescriptor.getDescription());
              sPluginInformation.setIdentifier(pluginDescriptor.getIdentifier());
              sPluginInformation.setInstallForAllUsers(pluginDescriptor.isInstallForNewUsers());
              sPluginInformation.setInstallForNewUsers(pluginDescriptor.isInstallForNewUsers());
              sPluginInformation.setName(pluginDescriptor.getName());
              sPluginInformation.setType(pluginManager.getPluginTypeFromClass(pluginDescriptor.getPluginClassName()));
              plugins.add(sPluginInformation);
            }
          }
          pluginManager.loadFromPluginDir(pluginBundleVersionIdentifier,getSConverter().convertToSObject(pluginBundleVersion),plugins,serverSettingsCache.getServerSettings().isPluginStrictVersionChecking());
        }
      }
    }
   }
 catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}","public void start() throws DatabaseInitException, BimserverDatabaseException, PluginException, DatabaseRestartRequiredException, ServerException {
  try {
    LOGGER.debug(""String_Node_Str"");
    SVersion localVersion=versionChecker.getLocalVersion();
    if (localVersion != null) {
      LOGGER.info(""String_Node_Str"" + localVersion.getFullString());
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    try {
      pluginManager.setPluginChangeListener(new PluginChangeListener(){
        @Override public void pluginStateChanged(        PluginContext pluginContext,        boolean enabled){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_PluginClassName(),new StringLiteral(pluginContext.getPlugin().getClass().getName()));
          DatabaseSession session=bimDatabase.createSession();
          try {
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              PluginDescriptor pluginConfiguration=pluginsFound.values().iterator().next();
              pluginConfiguration.setEnabled(pluginContext.isEnabled());
              session.store(pluginConfiguration);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            session.close();
          }
        }
        @Override public long pluginBundleUpdated(        PluginBundle pluginBundle){
          SPluginBundleVersion sPluginBundleVersion=pluginBundle.getPluginBundleVersion();
          try (DatabaseSession session=bimDatabase.createSession()){
            PluginBundleVersion current=null;
            IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
            for (            PluginBundleVersion pbv : allOfType.getAll(PluginBundleVersion.class)) {
              if (pbv.getGroupId().equals(pluginBundle.getPluginBundleVersion().getGroupId()) && pbv.getArtifactId().equals(pluginBundle.getPluginBundleVersion().getArtifactId())) {
                current=pbv;
              }
            }
            if (current != null) {
              current.setDescription(sPluginBundleVersion.getArtifactId());
              current.setIcon(sPluginBundleVersion.getIcon());
              current.setMismatch(sPluginBundleVersion.isMismatch());
              current.setRepository(sPluginBundleVersion.getRepository());
              current.setType(getSConverter().convertFromSObject(sPluginBundleVersion.getType()));
              current.setVersion(sPluginBundleVersion.getVersion());
              current.setOrganization(sPluginBundleVersion.getOrganization());
              current.setName(sPluginBundleVersion.getName());
              session.store(current);
              session.commit();
            }
            return current.getOid();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
          return -1;
        }
        @Override public void pluginUpdated(        long pluginBundleVersionId,        PluginContext newPluginContext,        SPluginInformation sPluginInformation) throws BimserverDatabaseException {
          try (DatabaseSession session=bimDatabase.createSession()){
            Plugin plugin=newPluginContext.getPlugin();
            Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(newPluginContext.getIdentifier()));
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            for (            PluginDescriptor pluginDescriptor : pluginsFound.values()) {
              pluginDescriptor.setIdentifier(newPluginContext.getIdentifier());
              pluginDescriptor.setPluginClassName(plugin.getClass().getName());
              pluginDescriptor.setDescription(newPluginContext.getDescription());
              pluginDescriptor.setName(sPluginInformation.getName());
              pluginDescriptor.setLocation(newPluginContext.getLocation().toString());
              pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
              pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
              pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
              PluginBundleVersion value=session.get(pluginBundleVersionId,OldQuery.getDefault());
              pluginDescriptor.setPluginBundleVersion(value);
              session.store(pluginDescriptor);
              if (sPluginInformation.isInstallForAllUsers()) {
                IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
                for (                User user : allOfType.getAll(User.class)) {
                  if (user.getState() == ObjectState.ACTIVE) {
                    updateUserPlugin(session,user,pluginDescriptor,newPluginContext);
                  }
                }
              }
              if (newPluginContext.getPlugin() instanceof WebModulePlugin) {
                ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
                WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),newPluginContext.getIdentifier());
                if (webPluginConfiguration == null) {
                  webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
                  serverSettings.getWebModules().add(webPluginConfiguration);
                  genericPluginConversion(newPluginContext,session,webPluginConfiguration,pluginDescriptor);
                  String contextPath=""String_Node_Str"";
                  for (                  Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
                    if (parameter.getName().equals(""String_Node_Str"")) {
                      contextPath=((StringType)parameter.getValue()).getValue();
                    }
                  }
                  String identifier=webPluginConfiguration.getPluginDescriptor().getIdentifier();
                  webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(identifier,true));
                }
              }
            }
            try {
              session.commit();
            }
 catch (            ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
         }
        @Override public void pluginInstalled(        long pluginBundleVersionId,        PluginContext pluginContext,        SPluginInformation sPluginInformation) throws BimserverDatabaseException {
          try (DatabaseSession session=bimDatabase.createSession()){
            Plugin plugin=pluginContext.getPlugin();
            Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            PluginDescriptor pluginDescriptor=null;
            if (pluginsFound.size() > 0) {
              pluginDescriptor=pluginsFound.values().iterator().next();
            }
 else {
              pluginDescriptor=session.create(PluginDescriptor.class);
            }
            pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
            pluginDescriptor.setPluginClassName(plugin.getClass().getName());
            pluginDescriptor.setDescription(pluginContext.getDescription());
            pluginDescriptor.setName(sPluginInformation.getName());
            pluginDescriptor.setLocation(pluginContext.getLocation().toString());
            pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
            pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
            pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
            pluginDescriptor.setPluginBundleVersion(session.get(pluginBundleVersionId,OldQuery.getDefault()));
            if (sPluginInformation.isInstallForAllUsers()) {
              IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
              for (              User user : allOfType.getAll(User.class)) {
                if (user.getState() == ObjectState.ACTIVE) {
                  updateUserPlugin(session,user,pluginDescriptor,pluginContext);
                }
              }
            }
            if (pluginContext.getPlugin() instanceof WebModulePlugin) {
              ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
              WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),pluginContext.getIdentifier());
              if (webPluginConfiguration == null) {
                webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
                serverSettings.getWebModules().add(webPluginConfiguration);
                genericPluginConversion(pluginContext,session,webPluginConfiguration,pluginDescriptor);
                session.store(serverSettings);
              }
              String contextPath=""String_Node_Str"";
              for (              Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
                if (parameter.getName().equals(""String_Node_Str"")) {
                  contextPath=((StringType)parameter.getValue()).getValue();
                }
              }
              webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(pluginContext.getIdentifier(),true));
            }
            try {
              session.commit();
            }
 catch (            ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
         }
        @Override public void pluginUninstalled(        PluginContext pluginContext){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
          DatabaseSession session=bimDatabase.createSession();
          try {
            Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              PluginDescriptor pluginDescriptor=pluginsFound.values().iterator().next();
              for (              PluginConfiguration pluginConfiguration : pluginDescriptor.getConfigurations()) {
                pluginConfiguration.remove();
              }
              pluginDescriptor.remove();
              session.store(pluginDescriptor);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            session.close();
          }
        }
        @Override public long pluginBundleInstalled(        PluginBundle pluginBundle){
          try (DatabaseSession session=bimDatabase.createSession()){
            PluginBundleVersion current=null;
            IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
            for (            PluginBundleVersion pbv : allOfType.getAll(PluginBundleVersion.class)) {
              if (pbv.getGroupId().equals(pluginBundle.getPluginBundleVersion().getGroupId()) && pbv.getArtifactId().equals(pluginBundle.getPluginBundleVersion().getArtifactId())) {
                current=pbv;
              }
            }
            PluginBundleVersion pluginBundleVersion=null;
            if (current != null) {
              pluginBundleVersion=current;
              session.store(pluginBundleVersion);
            }
 else {
              pluginBundleVersion=session.create(PluginBundleVersion.class);
            }
            SPluginBundleVersion sPluginBundleVersion=pluginBundle.getPluginBundleVersion();
            pluginBundleVersion.setArtifactId(sPluginBundleVersion.getArtifactId());
            pluginBundleVersion.setDescription(sPluginBundleVersion.getArtifactId());
            pluginBundleVersion.setGroupId(sPluginBundleVersion.getGroupId());
            pluginBundleVersion.setIcon(sPluginBundleVersion.getIcon());
            pluginBundleVersion.setMismatch(sPluginBundleVersion.isMismatch());
            pluginBundleVersion.setRepository(sPluginBundleVersion.getRepository());
            pluginBundleVersion.setType(getSConverter().convertFromSObject(sPluginBundleVersion.getType()));
            pluginBundleVersion.setVersion(sPluginBundleVersion.getVersion());
            pluginBundleVersion.setOrganization(sPluginBundleVersion.getOrganization());
            pluginBundleVersion.setName(sPluginBundleVersion.getName());
            session.commit();
            return pluginBundleVersion.getOid();
          }
 catch (          BimserverDatabaseException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          ServiceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
          return -1;
        }
        @Override public void pluginBundleUninstalled(        PluginBundle pluginBundle){
          try (DatabaseSession session=bimDatabase.createSession()){
          }
         }
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    try {
      metaDataManager.init();
      pluginManager.initAllLoadedPlugins();
    }
 catch (    PluginException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    serverStartTime=new GregorianCalendar();
    longActionManager=new LongActionManager();
    Set<EPackage> packages=new LinkedHashSet<>();
    packages.add(Ifc2x3tc1Package.eINSTANCE);
    packages.add(Ifc4Package.eINSTANCE);
    templateEngine=new TemplateEngine();
    URL emailTemplates=config.getResourceFetcher().getResource(""String_Node_Str"");
    if (emailTemplates != null) {
      templateEngine.init(emailTemplates);
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    Path databaseDir=config.getHomeDir().resolve(""String_Node_Str"");
    BerkeleyKeyValueStore keyValueStore=new BerkeleyKeyValueStore(databaseDir);
    schemaConverterManager.registerConverter(new Ifc2x3tc1ToIfc4SchemaConverterFactory());
    schemaConverterManager.registerConverter(new Ifc4ToIfc2x3tc1SchemaConverterFactory());
    metricsRegistry=new MetricsRegistry();
    Path mavenPath=config.getHomeDir().resolve(""String_Node_Str"");
    if (!Files.exists(mavenPath)) {
      Files.createDirectories(mavenPath);
    }
    mavenPluginRepository=new MavenPluginRepository(mavenPath,""String_Node_Str"");
    OldQuery.setPackageMetaDataForDefaultQuery(metaDataManager.getPackageMetaData(""String_Node_Str""));
    bimDatabase=new Database(this,packages,keyValueStore,metaDataManager);
    try {
      bimDatabase.init();
    }
 catch (    DatabaseRestartRequiredException e) {
      bimDatabase.close();
      keyValueStore=new BerkeleyKeyValueStore(databaseDir);
      bimDatabase=new Database(this,packages,keyValueStore,metaDataManager);
      try {
        bimDatabase.init();
      }
 catch (      InconsistentModelsException e1) {
        LOGGER.error(""String_Node_Str"",e);
        serverInfoManager.setServerState(ServerState.FATAL_ERROR);
        serverInfoManager.setErrorMessage(""String_Node_Str"");
      }
    }
catch (    InconsistentModelsException e) {
      LOGGER.error(""String_Node_Str"",e);
      serverInfoManager.setServerState(ServerState.FATAL_ERROR);
      serverInfoManager.setErrorMessage(""String_Node_Str"");
    }
    DatabaseSession encsession=bimDatabase.createSession();
    try {
      byte[] encryptionkeyBytes=null;
      if (!bimDatabase.getRegistry().has(ENCRYPTIONKEY,encsession)) {
        encryptionkeyBytes=new byte[16];
        new SecureRandom().nextBytes(encryptionkeyBytes);
        bimDatabase.getRegistry().save(ENCRYPTIONKEY,encryptionkeyBytes,encsession);
        encsession.commit();
      }
 else {
        encryptionkeyBytes=bimDatabase.getRegistry().readByteArray(ENCRYPTIONKEY,encsession);
      }
      encryptionkey=new SecretKeySpec(encryptionkeyBytes,""String_Node_Str"");
    }
  finally {
      encsession.close();
    }
    protocolBuffersMetaData=new ProtocolBuffersMetaData();
    protocolBuffersMetaData.load(servicesMap,ProtocolBuffersBimServerClientFactory.class);
    serverInfoManager.init(this);
    webModuleManager=new WebModuleManager(this);
    jsonHandler=new JsonHandler(this);
    serializerFactory=new SerializerFactory();
    serverSettingsCache=new ServerSettingsCache(bimDatabase);
    serverInfoManager.update();
    renderEnginePools=new RenderEnginePools(this);
    if (serverInfoManager.getServerState() == ServerState.MIGRATION_REQUIRED) {
      serverInfoManager.registerStateChangeListener(new StateChangeListener(){
        @Override public void stateChanged(        ServerState oldState,        ServerState newState){
          if (oldState == ServerState.MIGRATION_REQUIRED && newState == ServerState.RUNNING) {
            try {
              initDatabaseDependantItems();
            }
 catch (            BimserverDatabaseException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
 else {
      initDatabaseDependantItems();
    }
    mailSystem=new MailSystem(this);
    diskCacheManager=new DiskCacheManager(this,config.getHomeDir().resolve(""String_Node_Str""));
    newDiskCacheManager=new NewDiskCacheManager(this,config.getHomeDir().resolve(""String_Node_Str""));
    mergerFactory=new MergerFactory(this);
    FileBasedReflectorFactoryBuilder factoryBuilder=new FileBasedReflectorFactoryBuilder();
    reflectorFactory=factoryBuilder.newReflectorFactory();
    if (reflectorFactory == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    servicesMap.setReflectorFactory(reflectorFactory);
    bimScheduler=new JobScheduler(this);
    bimScheduler.start();
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer.start();
    }
    if (config.isStartCommandLine()) {
      commandLine=new CommandLine(this);
      commandLine.start();
    }
    try (DatabaseSession session=bimDatabase.createSession()){
      IfcModelInterface pluginBundleVersions=session.getAllOfType(StorePackage.eINSTANCE.getPluginBundleVersion(),OldQuery.getDefault());
      for (      PluginBundleVersion pluginBundleVersion : pluginBundleVersions.getAll(PluginBundleVersion.class)) {
        if (pluginBundleVersion.getType() == PluginBundleType.MAVEN) {
          PluginBundleVersionIdentifier pluginBundleVersionIdentifier=new PluginBundleVersionIdentifier(pluginBundleVersion.getGroupId(),pluginBundleVersion.getArtifactId(),pluginBundleVersion.getVersion());
          IfcModelInterface pluginDescriptors=session.getAllOfType(StorePackage.eINSTANCE.getPluginDescriptor(),OldQuery.getDefault());
          List<SPluginInformation> plugins=new ArrayList<>();
          for (          PluginDescriptor pluginDescriptor : pluginDescriptors.getAll(PluginDescriptor.class)) {
            if (pluginDescriptor.getPluginBundleVersion() == pluginBundleVersion && pluginDescriptor.getEnabled()) {
              SPluginInformation sPluginInformation=new SPluginInformation();
              sPluginInformation.setEnabled(true);
              sPluginInformation.setDescription(pluginDescriptor.getDescription());
              sPluginInformation.setIdentifier(pluginDescriptor.getIdentifier());
              sPluginInformation.setInstallForAllUsers(pluginDescriptor.isInstallForNewUsers());
              sPluginInformation.setInstallForNewUsers(pluginDescriptor.isInstallForNewUsers());
              sPluginInformation.setName(pluginDescriptor.getName());
              sPluginInformation.setType(pluginManager.getPluginTypeFromClass(pluginDescriptor.getPluginClassName()));
              plugins.add(sPluginInformation);
            }
          }
          pluginManager.loadFromPluginDir(pluginBundleVersionIdentifier,getSConverter().convertToSObject(pluginBundleVersion),plugins,serverSettingsCache.getServerSettings().isPluginStrictVersionChecking());
        }
      }
    }
   }
 catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}",0.9881922110847672
160354,"@Override public void pluginInstalled(long pluginBundleVersionId,PluginContext pluginContext,SPluginInformation sPluginInformation) throws BimserverDatabaseException {
  try (DatabaseSession session=bimDatabase.createSession()){
    Plugin plugin=pluginContext.getPlugin();
    PluginDescriptor pluginDescriptor=session.create(PluginDescriptor.class);
    pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
    pluginDescriptor.setPluginClassName(plugin.getClass().getName());
    pluginDescriptor.setDescription(pluginContext.getDescription());
    pluginDescriptor.setName(sPluginInformation.getName());
    pluginDescriptor.setLocation(pluginContext.getLocation().toString());
    pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
    pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
    pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
    pluginDescriptor.setPluginBundleVersion(session.get(pluginBundleVersionId,OldQuery.getDefault()));
    if (sPluginInformation.isInstallForAllUsers()) {
      IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
      for (      User user : allOfType.getAll(User.class)) {
        if (user.getState() == ObjectState.ACTIVE) {
          updateUserPlugin(session,user,pluginDescriptor,pluginContext);
        }
      }
    }
    if (pluginContext.getPlugin() instanceof WebModulePlugin) {
      ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),pluginContext.getIdentifier());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        genericPluginConversion(pluginContext,session,webPluginConfiguration,pluginDescriptor);
        session.store(serverSettings);
      }
      String contextPath=""String_Node_Str"";
      for (      Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
        if (parameter.getName().equals(""String_Node_Str"")) {
          contextPath=((StringType)parameter.getValue()).getValue();
        }
      }
      webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(pluginContext.getIdentifier(),true));
    }
    try {
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 }","@Override public void pluginInstalled(long pluginBundleVersionId,PluginContext pluginContext,SPluginInformation sPluginInformation) throws BimserverDatabaseException {
  try (DatabaseSession session=bimDatabase.createSession()){
    Plugin plugin=pluginContext.getPlugin();
    Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
    Map<Long,PluginDescriptor> pluginsFound=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
    PluginDescriptor pluginDescriptor=null;
    if (pluginsFound.size() > 0) {
      pluginDescriptor=pluginsFound.values().iterator().next();
    }
 else {
      pluginDescriptor=session.create(PluginDescriptor.class);
    }
    pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
    pluginDescriptor.setPluginClassName(plugin.getClass().getName());
    pluginDescriptor.setDescription(pluginContext.getDescription());
    pluginDescriptor.setName(sPluginInformation.getName());
    pluginDescriptor.setLocation(pluginContext.getLocation().toString());
    pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
    pluginDescriptor.setEnabled(sPluginInformation.isEnabled());
    pluginDescriptor.setInstallForNewUsers(sPluginInformation.isInstallForNewUsers());
    pluginDescriptor.setPluginBundleVersion(session.get(pluginBundleVersionId,OldQuery.getDefault()));
    if (sPluginInformation.isInstallForAllUsers()) {
      IfcModelInterface allOfType=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
      for (      User user : allOfType.getAll(User.class)) {
        if (user.getState() == ObjectState.ACTIVE) {
          updateUserPlugin(session,user,pluginDescriptor,pluginContext);
        }
      }
    }
    if (pluginContext.getPlugin() instanceof WebModulePlugin) {
      ServerSettings serverSettings=getServerSettingsCache().getServerSettings();
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),pluginContext.getIdentifier());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        genericPluginConversion(pluginContext,session,webPluginConfiguration,pluginDescriptor);
        session.store(serverSettings);
      }
      String contextPath=""String_Node_Str"";
      for (      Parameter parameter : webPluginConfiguration.getSettings().getParameters()) {
        if (parameter.getName().equals(""String_Node_Str"")) {
          contextPath=((StringType)parameter.getValue()).getValue();
        }
      }
      webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(pluginContext.getIdentifier(),true));
    }
    try {
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 }",0.9195609141623178
160355,"private ObjectType convertSettings(DatabaseSession session,Plugin plugin) throws BimserverDatabaseException {
  ObjectType settings=session.create(ObjectType.class);
  ObjectDefinition settingsDefinition=plugin.getSettingsDefinition();
  if (plugin.getSettingsDefinition() != null) {
    for (    ParameterDefinition parameterDefinition : settingsDefinition.getParameters()) {
      Parameter parameter=session.create(Parameter.class);
      parameter.setName(parameterDefinition.getName());
      parameter.setIdentifier(parameterDefinition.getIdentifier());
      if (parameterDefinition.getDefaultValue() != null) {
        Type value=cloneAndAdd(session,parameterDefinition.getDefaultValue());
        parameter.setValue(value);
      }
      settings.getParameters().add(parameter);
    }
  }
  return settings;
}","public ObjectType convertSettings(DatabaseSession session,Plugin plugin) throws BimserverDatabaseException {
  ObjectType settings=session.create(ObjectType.class);
  ObjectDefinition settingsDefinition=plugin.getSettingsDefinition();
  if (plugin.getSettingsDefinition() != null) {
    for (    ParameterDefinition parameterDefinition : settingsDefinition.getParameters()) {
      Parameter parameter=session.create(Parameter.class);
      parameter.setName(parameterDefinition.getName());
      parameter.setIdentifier(parameterDefinition.getIdentifier());
      if (parameterDefinition.getDefaultValue() != null) {
        Type value=cloneAndAdd(session,parameterDefinition.getDefaultValue());
        parameter.setValue(value);
      }
      settings.getParameters().add(parameter);
    }
  }
  return settings;
}",0.9932721712538226
160356,"private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
        throw new UserException(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
 else   if (parameters.length > 0) {
    throw new UserException(""String_Node_Str"" + parameters.length + ""String_Node_Str"");
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  String oldThreadName=Thread.currentThread().getName();
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  try {
    Recording recording=bimServer.getMetricsRegistry().startRecording(sService,method);
    Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
    recording.finish();
    if (writer != null) {
      if (result == null) {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        writer.beginObject();
        writer.endObject();
        writer.endObject();
      }
 else {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        converter.toJson(result,writer);
        writer.endObject();
      }
    }
    long e=System.nanoTime();
    LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setName(oldThreadName);
  }
}","private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  if (!request.has(""String_Node_Str"")) {
    throw new UserException(""String_Node_Str"");
  }
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
        throw new UserException(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
 else   if (parameters.length > 0) {
    throw new UserException(""String_Node_Str"" + parameters.length + ""String_Node_Str"");
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  String oldThreadName=Thread.currentThread().getName();
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  try {
    Recording recording=bimServer.getMetricsRegistry().startRecording(sService,method);
    Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
    recording.finish();
    if (writer != null) {
      if (result == null) {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        writer.beginObject();
        writer.endObject();
        writer.endObject();
      }
 else {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        converter.toJson(result,writer);
        writer.endObject();
      }
    }
    long e=System.nanoTime();
    LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setName(oldThreadName);
  }
}",0.9848212828464176
160357,"public AddInternalServiceDatabaseAction(DatabaseSession databaseSession,AccessMethod accessMethod,Authorization authorization,InternalServicePluginConfiguration eService){
  super(databaseSession,accessMethod,eService);
  this.authorization=authorization;
}","public AddInternalServiceDatabaseAction(BimServer bimServer,DatabaseSession databaseSession,AccessMethod accessMethod,Authorization authorization,InternalServicePluginConfiguration eService){
  super(databaseSession,accessMethod,eService);
  this.bimServer=bimServer;
  this.authorization=authorization;
}",0.9145907473309608
160358,"@Override public Long execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),authorization.getUoid(),OldQuery.getDefault());
  user.getUserSettings().getServices().add(getIdEObject());
  getDatabaseSession().store(user.getUserSettings());
  return super.execute();
}","@Override public Long execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),authorization.getUoid(),OldQuery.getDefault());
  InternalServicePluginConfiguration idEObject=getIdEObject();
  idEObject.setUserSettings(user.getUserSettings());
  Plugin plugin=bimServer.getPluginManager().getPlugin(idEObject.getPluginDescriptor().getIdentifier(),true);
  ObjectType settings=bimServer.convertSettings(getDatabaseSession(),plugin);
  user.getUserSettings().getServices().add(idEObject);
  idEObject.setSettings(settings);
  getDatabaseSession().store(user.getUserSettings());
  return super.execute();
}",0.6229205175600739
160359,"@Override public Void execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  PluginConfiguration pluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getPluginConfiguration(),oid,OldQuery.getDefault());
  UserSettings settings=(UserSettings)pluginConfiguration.eGet(pluginConfiguration.eClass().getEStructuralFeature(""String_Node_Str""));
  settings.getSerializers().remove(pluginConfiguration);
  getDatabaseSession().store(settings);
  pluginConfiguration.remove();
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Void execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  PluginConfiguration pluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getPluginConfiguration(),oid,OldQuery.getDefault());
  UserSettings settings=(UserSettings)pluginConfiguration.eGet(pluginConfiguration.eClass().getEStructuralFeature(""String_Node_Str""));
  if (settings == null) {
    throw new UserException(""String_Node_Str"");
  }
  for (  EReference eReference : settings.eClass().getEAllReferences()) {
    if (eReference.getEType() == pluginConfiguration.eClass() && eReference.isMany()) {
      List list=(List)settings.eGet(eReference);
      list.remove(pluginConfiguration);
    }
  }
  getDatabaseSession().store(settings);
  pluginConfiguration.remove();
  return null;
}",0.741777466759972
160360,"@Override public void addRenderEngine(SRenderEnginePluginConfiguration renderEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    RenderEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(renderEngine,session);
    session.executeAndCommitAction(new AddRenderEngineDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addRenderEngine(SRenderEnginePluginConfiguration renderEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    RenderEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(renderEngine,session);
    return session.executeAndCommitAction(new AddRenderEngineDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9813874788494078
160361,"@Override public void setPluginSettings(Long poid,SObjectType settings) throws ServerException, UserException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ObjectType convertedSettings=getBimServer().getSConverter().convertFromSObject(settings,session);
    SetPluginSettingsDatabaseAction action=new SetPluginSettingsDatabaseAction(session,getInternalAccessMethod(),poid,convertedSettings);
    session.executeAndCommitAction(action);
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
  session=getBimServer().getDatabase().createSession();
  try {
    PluginConfiguration pluginConfiguration=session.get(StorePackage.eINSTANCE.getPluginConfiguration(),poid,OldQuery.getDefault());
    ServicePlugin servicePlugin=getBimServer().getPluginManager().getServicePlugin(pluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
    SInternalServicePluginConfiguration sInternalService=(SInternalServicePluginConfiguration)getBimServer().getSConverter().convertToSObject(pluginConfiguration);
    servicePlugin.unregister(sInternalService);
    servicePlugin.register(getAuthorization().getUoid(),sInternalService,new org.bimserver.plugins.PluginConfiguration(settings));
  }
 catch (  BimserverDatabaseException e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void setPluginSettings(Long poid,SObjectType settings) throws ServerException, UserException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ObjectType convertedSettings=getBimServer().getSConverter().convertFromSObject(settings,session);
    SetPluginSettingsDatabaseAction action=new SetPluginSettingsDatabaseAction(session,getInternalAccessMethod(),poid,convertedSettings);
    session.executeAndCommitAction(action);
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
  session=getBimServer().getDatabase().createSession();
  try {
    PluginConfiguration pluginConfiguration=session.get(StorePackage.eINSTANCE.getPluginConfiguration(),poid,OldQuery.getDefault());
    if (pluginConfiguration instanceof InternalServicePluginConfiguration) {
      ServicePlugin servicePlugin=getBimServer().getPluginManager().getServicePlugin(pluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
      SInternalServicePluginConfiguration sInternalService=(SInternalServicePluginConfiguration)getBimServer().getSConverter().convertToSObject(pluginConfiguration);
      servicePlugin.unregister(sInternalService);
      servicePlugin.register(getAuthorization().getUoid(),sInternalService,new org.bimserver.plugins.PluginConfiguration(settings));
    }
  }
 catch (  BimserverDatabaseException e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9679238632358124
160362,"@Override public void addSerializer(SSerializerPluginConfiguration serializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(serializer,session);
    session.executeAndCommitAction(new AddSerializerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addSerializer(SSerializerPluginConfiguration serializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(serializer,session);
    return session.executeAndCommitAction(new AddSerializerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9810017271157168
160363,"@Override public SInternalServicePluginConfiguration getInternalServiceById(Long oid) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SInternalServicePluginConfiguration convertToSObject=getBimServer().getSConverter().convertToSObject(session.executeAndCommitAction(new GetByIdDatabaseAction<InternalServicePluginConfiguration>(session,getInternalAccessMethod(),oid,StorePackage.eINSTANCE.getInternalServicePluginConfiguration())));
    return convertToSObject;
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public SInternalServicePluginConfiguration getInternalServiceById(Long oid) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    InternalServicePluginConfiguration internalPlugin=session.executeAndCommitAction(new GetByIdDatabaseAction<InternalServicePluginConfiguration>(session,getInternalAccessMethod(),oid,StorePackage.eINSTANCE.getInternalServicePluginConfiguration()));
    if (internalPlugin == null) {
      throw new UserException(""String_Node_Str"" + oid);
    }
    SInternalServicePluginConfiguration convertToSObject=getBimServer().getSConverter().convertToSObject(internalPlugin);
    return convertToSObject;
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.7986928104575164
160364,"@Override public List<SPluginDescriptor> getAllServicePluginDescriptors() throws ServerException, UserException {
  requireRealUserAuthentication();
  return getBimServer().getSerializerFactory().getAllServicePluginDescriptors();
}","@Override public List<SPluginDescriptor> getAllServicePluginDescriptors() throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    return session.executeAndCommitAction(new GetAllPluginDescriptorsDatabaseAction(session,getInternalAccessMethod(),getBimServer(),ServicePlugin.class.getName()));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.5281980742778541
160365,"@Override public void addModelCompare(SModelComparePluginConfiguration modelCompare) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelComparePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelCompare,session);
    session.executeAndCommitAction(new AddModelCompareDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addModelCompare(SModelComparePluginConfiguration modelCompare) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelComparePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelCompare,session);
    return session.executeAndCommitAction(new AddModelCompareDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9813874788494078
160366,"@Override public void addObjectIDM(SObjectIDMPluginConfiguration objectIDM) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    session.executeAndCommitAction(new AddObjectIDMDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),getBimServer().getSConverter().convertFromSObject(objectIDM,session)));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addObjectIDM(SObjectIDMPluginConfiguration objectIDM) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    return session.executeAndCommitAction(new AddObjectIDMDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),getBimServer().getSConverter().convertFromSObject(objectIDM,session)));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9789674952198852
160367,"@Override public void addDeserializer(SDeserializerPluginConfiguration deserializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    DeserializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(deserializer,session);
    session.executeAndCommitAction(new AddDeserializerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addDeserializer(SDeserializerPluginConfiguration deserializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    DeserializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(deserializer,session);
    return session.executeAndCommitAction(new AddDeserializerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9813874788494078
160368,"@Override public void addQueryEngine(SQueryEnginePluginConfiguration queryEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    QueryEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(queryEngine,session);
    session.executeAndCommitAction(new AddQueryEngineDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addQueryEngine(SQueryEnginePluginConfiguration queryEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    QueryEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(queryEngine,session);
    return session.executeAndCommitAction(new AddQueryEngineDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9811965811965812
160369,"@Override public void addInternalService(SInternalServicePluginConfiguration internalService) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    session.executeAndCommitAction(new AddInternalServiceDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),getBimServer().getSConverter().convertFromSObject(internalService,session)));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addInternalService(SInternalServicePluginConfiguration internalService) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    return session.executeAndCommitAction(new AddInternalServiceDatabaseAction(getBimServer(),session,getInternalAccessMethod(),getAuthorization(),getBimServer().getSConverter().convertFromSObject(internalService,session)));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9669937555753793
160370,"@Override public void addModelMerger(SModelMergerPluginConfiguration modelMerger) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelMergerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelMerger,session);
    session.executeAndCommitAction(new AddModelMergerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long addModelMerger(SModelMergerPluginConfiguration modelMerger) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelMergerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelMerger,session);
    return session.executeAndCommitAction(new AddModelMergerDatabaseAction(session,getInternalAccessMethod(),getAuthorization(),convert));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9811965811965812
160371,"protected HashMapVirtualObject convertByteArrayToObject(EClass eClass,long oid,ByteBuffer buffer,int rid) throws BimserverDatabaseException {
  try {
    HashMapVirtualObject idEObject=new HashMapVirtualObject(reusable,eClass);
    idEObject.setOid(oid);
    int unsettedLength=getPackageMetaData().getUnsettedLength(eClass);
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      try {
        if (getPackageMetaData().useForDatabaseStorage(eClass,feature)) {
          boolean isUnsetted=(unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0;
          if (isUnsetted) {
            if (feature.isUnsettable()) {
              idEObject.eUnset(feature);
            }
 else             if (feature.isMany()) {
            }
 else             if (feature.getDefaultValue() != null) {
              idEObject.setAttribute(feature,feature.getDefaultValue());
            }
          }
 else {
            Object newValue=null;
            if (feature.isMany()) {
              newValue=readList(idEObject,buffer,feature);
            }
 else {
              if (feature.getEType() instanceof EEnum) {
                int enumOrdinal=buffer.getInt();
                if (enumOrdinal == -1) {
                  newValue=null;
                }
 else {
                  EClassifier eType=feature.getEType();
                  EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
                  if (enumLiteral != null) {
                    newValue=enumLiteral.getInstance();
                  }
                }
              }
 else               if (feature.getEType() instanceof EClass) {
                buffer.order(ByteOrder.LITTLE_ENDIAN);
                short cid=buffer.getShort();
                buffer.order(ByteOrder.BIG_ENDIAN);
                if (cid == -1) {
                }
 else                 if (cid < 0) {
                  EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass((short)(-cid));
                  if (feature.getEAnnotation(""String_Node_Str"") != null) {
                    newValue=readEmbeddedValue(feature,buffer,referenceClass);
                  }
 else {
                    newValue=readWrappedValue(feature,buffer,referenceClass);
                  }
                }
 else                 if (cid > 0) {
                  EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass(cid);
                  if (referenceClass == null) {
                    throw new BimserverDatabaseException(""String_Node_Str"" + cid);
                  }
                  buffer.position(buffer.position() - 2);
                  newValue=readReference(buffer,feature,referenceClass);
                  if ((Long)newValue != -1) {
                    if (queryObjectProvider.hasReadOrIsGoingToRead(((Long)newValue)) || queryObjectProvider.hasReadOrIsGoingToRead(referenceClass)) {
                      idEObject.addUseForSerialization(feature);
                    }
                  }
                }
              }
 else               if (feature.getEType() instanceof EDataType) {
                newValue=readPrimitiveValue(feature.getEType(),buffer);
              }
              if (newValue != null) {
                idEObject.setAttribute(feature,newValue);
              }
            }
          }
          fieldCounter++;
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName(),e);
      }
catch (      BufferUnderflowException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName(),e);
      }
catch (      BufferOverflowException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName(),e);
      }
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
}","protected HashMapVirtualObject convertByteArrayToObject(EClass eClass,long oid,ByteBuffer buffer,int rid) throws BimserverDatabaseException {
  try {
    HashMapVirtualObject idEObject=new HashMapVirtualObject(reusable,eClass);
    idEObject.setOid(oid);
    int unsettedLength=getPackageMetaData().getUnsettedLength(eClass);
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    if (eClass.getName().equals(""String_Node_Str"") && buffer.capacity() == 27) {
      System.out.println();
    }
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      try {
        if (getPackageMetaData().useForDatabaseStorage(eClass,feature)) {
          boolean isUnsetted=(unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0;
          if (isUnsetted) {
            if (feature.isUnsettable()) {
              idEObject.eUnset(feature);
            }
 else             if (feature.isMany()) {
            }
 else             if (feature.getDefaultValue() != null) {
              idEObject.setAttribute(feature,feature.getDefaultValue());
            }
          }
 else {
            Object newValue=null;
            if (feature.isMany()) {
              newValue=readList(idEObject,buffer,feature);
            }
 else {
              if (feature.getEType() instanceof EEnum) {
                int enumOrdinal=buffer.getInt();
                if (enumOrdinal == -1) {
                  newValue=null;
                }
 else {
                  EClassifier eType=feature.getEType();
                  EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
                  if (enumLiteral != null) {
                    newValue=enumLiteral.getInstance();
                  }
                }
              }
 else               if (feature.getEType() instanceof EClass) {
                buffer.order(ByteOrder.LITTLE_ENDIAN);
                short cid=buffer.getShort();
                buffer.order(ByteOrder.BIG_ENDIAN);
                if (cid == -1) {
                }
 else                 if (cid < 0) {
                  EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass((short)(-cid));
                  if (feature.getEAnnotation(""String_Node_Str"") != null) {
                    newValue=readEmbeddedValue(feature,buffer,referenceClass);
                  }
 else {
                    newValue=readWrappedValue(feature,buffer,referenceClass);
                  }
                }
 else                 if (cid > 0) {
                  EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass(cid);
                  if (referenceClass == null) {
                    throw new BimserverDatabaseException(""String_Node_Str"" + cid);
                  }
                  buffer.position(buffer.position() - 2);
                  newValue=readReference(buffer,feature,referenceClass);
                  if ((Long)newValue != -1) {
                    if (queryObjectProvider.hasReadOrIsGoingToRead(((Long)newValue)) || queryObjectProvider.hasReadOrIsGoingToRead(referenceClass)) {
                      idEObject.addUseForSerialization(feature);
                    }
                  }
                }
              }
 else               if (feature.getEType() instanceof EDataType) {
                newValue=readPrimitiveValue(feature.getEType(),buffer);
              }
              if (newValue != null) {
                idEObject.setAttribute(feature,newValue);
              }
            }
          }
          fieldCounter++;
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName(),e);
      }
catch (      BufferUnderflowException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName()+ ""String_Node_Str""+ buffer.capacity(),e);
      }
catch (      BufferOverflowException e) {
        throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName() + ""String_Node_Str""+ feature.getName(),e);
      }
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
}",0.9825362401552334
160372,"private Object readList(HashMapVirtualObject idEObject,ByteBuffer buffer,EStructuralFeature feature) throws BimserverDatabaseException {
  if (feature.getEType() instanceof EEnum) {
  }
 else   if (feature.getEType() instanceof EClass) {
    if (buffer.capacity() == 1 && buffer.get(0) == -1) {
      buffer.position(buffer.position() + 1);
    }
 else {
      int listSize=buffer.getInt();
      for (int i=0; i < listSize; i++) {
        if (feature.getEAnnotation(""String_Node_Str"") != null) {
          HashMapVirtualObject newObject=new HashMapVirtualObject(reusable,(EClass)feature.getEType());
          Object result=readList(newObject,buffer,newObject.eClass().getEStructuralFeature(""String_Node_Str""));
          if (result != null) {
            newObject.setAttribute(newObject.eClass().getEStructuralFeature(""String_Node_Str""),result);
          }
          idEObject.setListItem(feature,i,newObject);
        }
 else {
          buffer.order(ByteOrder.LITTLE_ENDIAN);
          short cid=buffer.getShort();
          buffer.order(ByteOrder.BIG_ENDIAN);
          if (cid == -1) {
          }
 else           if (cid < 0) {
            EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass((short)(-cid));
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + (-cid));
            }
            idEObject.setListItem(feature,i,readWrappedValue(feature,buffer,referenceClass));
          }
 else           if (cid > 0) {
            EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass(cid);
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + cid);
            }
            buffer.position(buffer.position() - 2);
            long rf=readReference(buffer,feature,referenceClass);
            idEObject.setListItemReference(feature,i,referenceClass,rf,-1);
            if (rf != -1) {
              if (queryObjectProvider.hasReadOrIsGoingToRead((rf)) || queryObjectProvider.hasReadOrIsGoingToRead(referenceClass)) {
                idEObject.addUseForSerialization(feature,i);
              }
            }
          }
        }
      }
    }
  }
 else   if (feature.getEType() instanceof EDataType) {
    int listSize=buffer.getInt();
    for (int i=0; i < listSize; i++) {
      Object reference=readPrimitiveValue(feature.getEType(),buffer);
      if (reference != null) {
        idEObject.setListItem(feature,i,reference);
      }
    }
  }
  return null;
}","private Object readList(HashMapVirtualObject idEObject,ByteBuffer buffer,EStructuralFeature feature) throws BimserverDatabaseException {
  if (feature.getEType() instanceof EEnum) {
  }
 else   if (feature.getEType() instanceof EClass) {
    if (buffer.capacity() == 1 && buffer.get(0) == -1) {
      buffer.position(buffer.position() + 1);
    }
 else {
      if (buffer.position() + 4 > buffer.capacity()) {
        System.out.println();
      }
      int listSize=buffer.getInt();
      for (int i=0; i < listSize; i++) {
        if (feature.getEAnnotation(""String_Node_Str"") != null) {
          HashMapVirtualObject newObject=new HashMapVirtualObject(reusable,(EClass)feature.getEType());
          Object result=readList(newObject,buffer,newObject.eClass().getEStructuralFeature(""String_Node_Str""));
          if (result != null) {
            newObject.setAttribute(newObject.eClass().getEStructuralFeature(""String_Node_Str""),result);
          }
          idEObject.setListItem(feature,i,newObject);
        }
 else {
          buffer.order(ByteOrder.LITTLE_ENDIAN);
          short cid=buffer.getShort();
          buffer.order(ByteOrder.BIG_ENDIAN);
          if (cid == -1) {
          }
 else           if (cid < 0) {
            EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass((short)(-cid));
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + (-cid));
            }
            idEObject.setListItem(feature,i,readWrappedValue(feature,buffer,referenceClass));
          }
 else           if (cid > 0) {
            EClass referenceClass=queryObjectProvider.getDatabaseSession().getEClass(cid);
            if (referenceClass == null) {
              throw new BimserverDatabaseException(""String_Node_Str"" + cid);
            }
            buffer.position(buffer.position() - 2);
            long rf=readReference(buffer,feature,referenceClass);
            idEObject.setListItemReference(feature,i,referenceClass,rf,-1);
            if (rf != -1) {
              if (queryObjectProvider.hasReadOrIsGoingToRead((rf)) || queryObjectProvider.hasReadOrIsGoingToRead(referenceClass)) {
                idEObject.addUseForSerialization(feature,i);
              }
            }
          }
        }
      }
    }
  }
 else   if (feature.getEType() instanceof EDataType) {
    int listSize=buffer.getInt();
    for (int i=0; i < listSize; i++) {
      Object reference=readPrimitiveValue(feature.getEType(),buffer);
      if (reference != null) {
        idEObject.setListItem(feature,i,reference);
      }
    }
  }
  return null;
}",0.9819872167344568
160373,"@Override protected URL findResource(String name){
  for (  PublicFindClassClassLoader jarClassLoader : jarClassLoaders) {
    URL resource=jarClassLoader.findResource(name);
    if (resource != null) {
      return resource;
    }
  }
  return null;
}","@Override public URL findResource(String name){
  for (  PublicFindClassClassLoader jarClassLoader : jarClassLoaders) {
    URL resource=jarClassLoader.findResource(name);
    if (resource != null) {
      return resource;
    }
  }
  return null;
}",0.9740518962075848
160374,"@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  for (  PublicFindClassClassLoader jarClassLoader : jarClassLoaders) {
    try {
      Class<?> findClass=jarClassLoader.findClass(name);
      if (findClass != null) {
        return findClass;
      }
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}","@Override public Class<?> findClass(String name) throws ClassNotFoundException {
  for (  PublicFindClassClassLoader jarClassLoader : jarClassLoaders) {
    try {
      Class<?> findClass=jarClassLoader.findClass(name);
      if (findClass != null) {
        return findClass;
      }
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}",0.9831387808041504
160375,"public ByteBuffer write() throws BimserverDatabaseException {
  EClass eClass=getDatabaseInterface().getEClassForOid(getOid());
  if (!eClass.isSuperTypeOf(eClass())) {
    throw new BimserverDatabaseException(""String_Node_Str"" + getOid() + ""String_Node_Str""+ eClass().getName()+ ""String_Node_Str""+ eClass.getName());
  }
  int nrFeatures=getPackageMetaData().getNrDatabaseFeatures(eClass);
  if (featureCounter > nrFeatures) {
    throw new BimserverDatabaseException(""String_Node_Str"" + this.eClass.getName() + ""String_Node_Str""+ featureCounter+ ""String_Node_Str""+ nrFeatures);
  }
 else   if (featureCounter < nrFeatures) {
    throw new BimserverDatabaseException(""String_Node_Str"" + this.eClass.getName() + ""String_Node_Str""+ featureCounter+ ""String_Node_Str""+ nrFeatures);
  }
  return buffer;
}","public ByteBuffer write() throws BimserverDatabaseException {
  EClass eClass=getDatabaseInterface().getEClassForOid(getOid());
  if (!eClass.isSuperTypeOf(eClass())) {
    throw new BimserverDatabaseException(""String_Node_Str"" + getOid() + ""String_Node_Str""+ eClass().getName()+ ""String_Node_Str""+ eClass.getName());
  }
  int nrFeatures=getPackageMetaData().getNrDatabaseFeatures(eClass);
  if (featureCounter > nrFeatures) {
    throw new BimserverDatabaseException(""String_Node_Str"" + this.eClass.getName() + ""String_Node_Str""+ featureCounter+ ""String_Node_Str""+ nrFeatures);
  }
 else   if (featureCounter < nrFeatures) {
    throw new BimserverDatabaseException(""String_Node_Str"" + this.eClass.getName() + ""String_Node_Str""+ featureCounter+ ""String_Node_Str""+ nrFeatures);
  }
  if (eClass.getName().equals(""String_Node_Str"") && buffer.position() == 27) {
    System.out.println();
  }
  return buffer;
}",0.9292811221507892
160376,"public void eUnset(EStructuralFeature feature) throws BimserverDatabaseException {
  if (feature.isUnsettable()) {
    int pos=featureCounter / 8;
    byte b=buffer.get(pos);
    b|=(1 << (featureCounter % 8));
    buffer.put(pos,b);
  }
 else {
    if (feature instanceof EReference) {
      ensureCapacity(buffer.position(),2);
      buffer.order(ByteOrder.LITTLE_ENDIAN);
      buffer.putShort((short)-1);
      buffer.order(ByteOrder.BIG_ENDIAN);
    }
 else     if (feature.getEType() instanceof EEnum) {
      writeEnum(feature,null);
    }
 else {
      writePrimitiveValue(feature,null);
    }
  }
  incrementFeatureCounter(feature);
}","public void eUnset(EStructuralFeature feature) throws BimserverDatabaseException {
  if (useUnsetBit(feature)) {
    int pos=featureCounter / 8;
    byte b=buffer.get(pos);
    b|=(1 << (featureCounter % 8));
    buffer.put(pos,b);
  }
 else {
    if (feature instanceof EReference) {
      if (feature.isMany()) {
        ensureCapacity(buffer.position(),4);
        buffer.putInt(0);
      }
 else {
        ensureCapacity(buffer.position(),2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putShort((short)-1);
        buffer.order(ByteOrder.BIG_ENDIAN);
      }
    }
 else     if (feature.getEType() instanceof EEnum) {
      writeEnum(feature,null);
    }
 else {
      writePrimitiveValue(feature,null);
    }
  }
  incrementFeatureCounter(feature);
}",0.884968242766408
160377,"@SuppressWarnings(""String_Node_Str"") @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  long roid=roids.iterator().next();
  Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
  PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
  JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
  ObjectNode queryObject;
  try {
    queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
    Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
    IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,null,getDatabaseSession());
    QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    HashMapVirtualObject next=queryObjectProvider.next();
    while (next != null) {
      IdEObject newObject=packageMetaData.create(next.eClass());
      for (      EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
        newObject.eSet(eAttribute,next.eGet(eAttribute));
      }
      ifcModel.add(next.getOid(),newObject);
      next=queryObjectProvider.next();
    }
    queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    next=queryObjectProvider.next();
    while (next != null) {
      IdEObject idEObject=ifcModel.get(next.getOid());
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          List<Long> refOids=(List<Long>)next.eGet(eReference);
          List<IdEObject> list=(List<IdEObject>)idEObject.eGet(eReference);
          if (refOids != null) {
            for (            Long refOid : refOids) {
              IdEObject ref=ifcModel.get(refOid);
              if (ref != null) {
                list.add(ref);
              }
            }
          }
        }
 else {
          long refOid=(long)next.eGet(eReference);
          idEObject.eSet(eReference,ifcModel.get(refOid));
        }
      }
      next=queryObjectProvider.next();
    }
    String name=""String_Node_Str"";
    ifcModel.getModelMetaData().setName(name);
    ifcModel.getModelMetaData().setRevisionId(1);
    if (getAuthorization().getUoid() != -1) {
      ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    }
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  IfcModelInterfaceException e) {
    e.printStackTrace();
  }
catch (  QueryException e) {
    e.printStackTrace();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<String> projectNames=new ArrayList<>();
  for (  long roid : roids) {
    Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
    projectNames.add(revision.getProject().getName() + ""String_Node_Str"" + revision.getId());
  }
  String name=Joiner.on(""String_Node_Str"").join(projectNames);
  long roid=roids.iterator().next();
  Revision revision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,OldQuery.getDefault());
  PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(revision.getProject().getSchema());
  JsonQueryObjectModelConverter converter=new JsonQueryObjectModelConverter(packageMetaData);
  ObjectNode queryObject;
  try {
    queryObject=new ObjectMapper().readValue(json,ObjectNode.class);
    Query query=converter.parseJson(""String_Node_Str"",(ObjectNode)queryObject);
    IfcModelInterface ifcModel=new ServerIfcModel(packageMetaData,null,getDatabaseSession());
    QueryObjectProvider queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    HashMapVirtualObject next=queryObjectProvider.next();
    while (next != null) {
      IdEObject newObject=packageMetaData.create(next.eClass());
      for (      EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
        newObject.eSet(eAttribute,next.eGet(eAttribute));
      }
      ifcModel.add(next.getOid(),newObject);
      next=queryObjectProvider.next();
    }
    queryObjectProvider=new QueryObjectProvider(getDatabaseSession(),getBimServer(),query,roids,packageMetaData);
    next=queryObjectProvider.next();
    while (next != null) {
      IdEObject idEObject=ifcModel.get(next.getOid());
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          List<Long> refOids=(List<Long>)next.eGet(eReference);
          List<IdEObject> list=(List<IdEObject>)idEObject.eGet(eReference);
          if (refOids != null) {
            for (            Long refOid : refOids) {
              IdEObject ref=ifcModel.get(refOid);
              if (ref != null) {
                list.add(ref);
              }
            }
          }
        }
 else {
          long refOid=(long)next.eGet(eReference);
          idEObject.eSet(eReference,ifcModel.get(refOid));
        }
      }
      next=queryObjectProvider.next();
    }
    ifcModel.getModelMetaData().setName(name);
    ifcModel.getModelMetaData().setRevisionId(1);
    if (getAuthorization().getUoid() != -1) {
      ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    }
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  IfcModelInterfaceException e) {
    e.printStackTrace();
  }
catch (  QueryException e) {
    e.printStackTrace();
  }
  return null;
}",0.9240040174087714
160378,"public SGeometryData convertToSObject(GeometryData input){
  if (input == null) {
    return null;
  }
  SGeometryData result=new SGeometryData();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setIndices(input.getIndices());
  result.setVertices(input.getVertices());
  result.setNormals(input.getNormals());
  result.setMaterials(input.getMaterials());
  result.setMaterialIndices(input.getMaterialIndices());
  return result;
}","public SPluginInformation convertToSObject(PluginInformation input){
  if (input == null) {
    return null;
  }
  SPluginInformation result=new SPluginInformation();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setName(input.getName());
  result.setType(SPluginType.values()[input.getType().ordinal()]);
  result.setDescription(input.getDescription());
  result.setEnabled(input.isEnabled());
  result.setIdentifier(input.getIdentifier());
  result.setInstallForAllUsers(input.isInstallForAllUsers());
  result.setInstallForNewUsers(input.isInstallForNewUsers());
  return result;
}",0.2128851540616246
160379,"public GeometryData convertFromSObject(SGeometryData input,GeometryData result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setIndices(input.getIndices());
  result.setVertices(input.getVertices());
  result.setNormals(input.getNormals());
  result.setMaterials(input.getMaterials());
  result.setMaterialIndices(input.getMaterialIndices());
  return result;
}","public PluginInformation convertFromSObject(SPluginInformation input,PluginInformation result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setName(input.getName());
  result.setType(PluginType.values()[input.getType().ordinal()]);
  result.setDescription(input.getDescription());
  result.setEnabled(input.isEnabled());
  result.setIdentifier(input.getIdentifier());
  result.setInstallForAllUsers(input.isInstallForAllUsers());
  result.setInstallForNewUsers(input.isInstallForNewUsers());
  return result;
}",0.3773584905660377
160380,"public void start(){
  try {
    LOGGER.info(""String_Node_Str"");
    BimServerClientFactory factory=new JsonBimServerClientFactory(bimServer.getMetaDataManager(),address);
    remoteClient=factory.create(new UsernamePasswordAuthenticationInfo(username,password));
    final BimDatabase database=bimServer.getDatabase();
    DatabaseSession databaseSession=database.createSession();
    try {
      LOGGER.info(""String_Node_Str"");
      for (      SUser user : remoteClient.getServiceInterface().getAllUsers()) {
        createUser(databaseSession,user.getOid());
      }
      LOGGER.info(""String_Node_Str"");
      for (      SProject project : remoteClient.getBimsie1ServiceInterface().getAllProjects(false,false)) {
        createProject(databaseSession,project.getOid());
      }
      LOGGER.info(""String_Node_Str"");
      databaseSession.commit();
    }
 catch (    BimserverDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      databaseSession.close();
    }
    final BimServerClientInterface client=bimServer.getBimServerClientFactory().create(new UsernamePasswordAuthenticationInfo(username,password));
    Path incoming=Paths.get(path);
    final Map<GregorianCalendar,Key> comments=new TreeMap<>();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    for (    SProject project : remoteClient.getBimsie1ServiceInterface().getAllProjects(false,false)) {
      for (      SRevision revision : remoteClient.getBimsie1ServiceInterface().getAllRevisionsOfProject(project.getOid())) {
        GregorianCalendar gregorianCalendar=new GregorianCalendar();
        gregorianCalendar.setTime(revision.getDate());
        if (!revision.getComment().startsWith(""String_Node_Str"")) {
          User user=users.get(revision.getUserId());
          Path userFolder=incoming.resolve(user.getUsername());
          boolean found=false;
          for (          Path file : PathUtils.list(userFolder)) {
            if (file.getFileName().toString().endsWith(revision.getComment())) {
              String dateStr=file.getFileName().toString().substring(0,19);
              Date parse=dateFormat.parse(dateStr);
              GregorianCalendar fileDate=new GregorianCalendar();
              fileDate.setTime(parse);
              long millisDiff=Math.abs(fileDate.getTimeInMillis() - revision.getDate().getTime());
              if (millisDiff > 1000 * 60 * 120) {
                continue;
              }
              if (revision.getOid() == project.getLastRevisionId()) {
                comments.put(gregorianCalendar,new Key(file,project.getOid(),revision.getComment(),revision.getDate(),revision.getUserId()));
              }
              found=true;
              break;
            }
          }
          if (!found) {
            LOGGER.info(""String_Node_Str"" + revision.getComment());
          }
        }
      }
    }
    ExecutorService executorService=new ThreadPoolExecutor(1,1,1,TimeUnit.DAYS,new ArrayBlockingQueue<Runnable>(1000));
    for (    final GregorianCalendar gregorianCalendar : comments.keySet()) {
      executorService.submit(new Runnable(){
        @Override public void run(){
          Key key=comments.get(gregorianCalendar);
          LOGGER.info(""String_Node_Str"" + key.file.getFileName().toString() + ""String_Node_Str""+ Formatters.bytesToString(key.file.toFile().length()));
          Project sProject=projects.get(key.poid);
          try {
            SDeserializerPluginConfiguration desserializer=client.getBimsie1ServiceInterface().getSuggestedDeserializerForExtension(""String_Node_Str"",sProject.getOid());
            client.checkin(sProject.getOid(),key.comment,desserializer.getOid(),false,true,key.file);
            SProject updatedProject=client.getBimsie1ServiceInterface().getProjectByPoid(sProject.getOid());
            DatabaseSession databaseSession=database.createSession();
            try {
              LOGGER.info(""String_Node_Str"");
              Project project=databaseSession.get(updatedProject.getOid(),OldQuery.getDefault());
              Revision revision=project.getLastRevision();
              User user=(User)databaseSession.get(users.get(key.userId).getOid(),OldQuery.getDefault());
              for (              Revision otherRevision : revision.getConcreteRevisions().get(0).getRevisions()) {
                otherRevision.load();
                otherRevision.setDate(key.date);
                otherRevision.setComment(otherRevision.getComment().replace(""String_Node_Str"",user.getName()));
                databaseSession.store(otherRevision);
              }
              DateFormat m=new SimpleDateFormat(""String_Node_Str"");
              LOGGER.info(""String_Node_Str"" + m.format(key.date));
              revision.setUser(user);
              revision.setDate(key.date);
              databaseSession.store(revision);
              databaseSession.commit();
            }
 catch (            BimserverDatabaseException|ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
 finally {
              databaseSession.close();
            }
          }
 catch (          IOException|UserException|ServerException|PublicInterfaceNotFoundException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
);
    }
    executorService.shutdown();
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  PublicInterfaceNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ParseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void start(){
  try {
    LOGGER.info(""String_Node_Str"");
    BimServerClientFactory factory=new JsonBimServerClientFactory(bimServer.getMetaDataManager(),address);
    remoteClient=factory.create(new UsernamePasswordAuthenticationInfo(username,password));
    final BimDatabase database=bimServer.getDatabase();
    DatabaseSession databaseSession=database.createSession();
    try {
      LOGGER.info(""String_Node_Str"");
      for (      SUser user : remoteClient.getServiceInterface().getAllUsers()) {
        createUser(databaseSession,user.getOid());
      }
      LOGGER.info(""String_Node_Str"");
      for (      SProject project : remoteClient.getBimsie1ServiceInterface().getAllProjects(false,false)) {
        createProject(databaseSession,project.getOid());
      }
      LOGGER.info(""String_Node_Str"");
      databaseSession.commit();
    }
 catch (    BimserverDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      databaseSession.close();
    }
    final BimServerClientInterface client=bimServer.getBimServerClientFactory().create(new UsernamePasswordAuthenticationInfo(username,password));
    Path incoming=Paths.get(path);
    final Map<GregorianCalendar,Key> comments=new TreeMap<>();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    for (    SProject project : remoteClient.getBimsie1ServiceInterface().getAllProjects(false,false)) {
      for (      SRevision revision : remoteClient.getBimsie1ServiceInterface().getAllRevisionsOfProject(project.getOid())) {
        GregorianCalendar gregorianCalendar=new GregorianCalendar();
        gregorianCalendar.setTime(revision.getDate());
        if (!revision.getComment().startsWith(""String_Node_Str"")) {
          User user=users.get(revision.getUserId());
          Path userFolder=incoming.resolve(user.getUsername());
          boolean found=false;
          for (          Path file : PathUtils.list(userFolder)) {
            if (file.getFileName().toString().endsWith(revision.getComment())) {
              String dateStr=file.getFileName().toString().substring(0,19);
              Date parse=dateFormat.parse(dateStr);
              GregorianCalendar fileDate=new GregorianCalendar();
              fileDate.setTime(parse);
              long millisDiff=Math.abs(fileDate.getTimeInMillis() - revision.getDate().getTime());
              if (millisDiff > 1000 * 60 * 120) {
                continue;
              }
              if (revision.getOid() == project.getLastRevisionId()) {
                comments.put(gregorianCalendar,new Key(file,project.getOid(),revision.getComment(),revision.getDate(),revision.getUserId()));
              }
              found=true;
              break;
            }
          }
          if (!found) {
            LOGGER.info(""String_Node_Str"" + revision.getComment());
          }
        }
      }
    }
    ExecutorService executorService=new ThreadPoolExecutor(1,1,1,TimeUnit.DAYS,new ArrayBlockingQueue<Runnable>(1000));
    for (    final GregorianCalendar gregorianCalendar : comments.keySet()) {
      executorService.submit(new Runnable(){
        @Override public void run(){
          Key key=comments.get(gregorianCalendar);
          LOGGER.info(""String_Node_Str"" + key.file.getFileName().toString() + ""String_Node_Str""+ Formatters.bytesToString(key.file.toFile().length()));
          Project sProject=projects.get(key.poid);
          try {
            SDeserializerPluginConfiguration desserializer=client.getBimsie1ServiceInterface().getSuggestedDeserializerForExtension(""String_Node_Str"",sProject.getOid());
            client.checkin(sProject.getOid(),key.comment,desserializer.getOid(),false,true,key.file);
            SProject updatedProject=client.getBimsie1ServiceInterface().getProjectByPoid(sProject.getOid());
            DatabaseSession databaseSession=database.createSession();
            try {
              LOGGER.info(""String_Node_Str"");
              Project project=databaseSession.get(updatedProject.getOid(),OldQuery.getDefault());
              Revision revision=project.getLastRevision();
              User user=(User)databaseSession.get(users.get(key.userId).getOid(),OldQuery.getDefault());
              for (              Revision otherRevision : revision.getConcreteRevisions().get(0).getRevisions()) {
                otherRevision.load();
                otherRevision.setDate(key.date);
                otherRevision.setComment(otherRevision.getComment().replace(""String_Node_Str"",user.getName()));
                databaseSession.store(otherRevision);
              }
              DateFormat m=new SimpleDateFormat(""String_Node_Str"");
              LOGGER.info(""String_Node_Str"" + m.format(key.date));
              revision.setUser(user);
              revision.setDate(key.date);
              databaseSession.store(revision);
              databaseSession.commit();
            }
 catch (            BimserverDatabaseException|ServiceException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
 finally {
              databaseSession.close();
            }
          }
 catch (          IOException|UserException|ServerException|PublicInterfaceNotFoundException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
);
    }
    executorService.shutdown();
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  PublicInterfaceNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ParseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimServerClientException e1) {
    LOGGER.error(""String_Node_Str"",e1);
  }
}",0.9927209705372616
160381,"public static final BimServerClientInterface setupProtocolBuffers(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    BimServerClientFactory factory=new ProtocolBuffersBimServerClientFactory(address,8000,8000,null,metaDataManager);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","public static final BimServerClientInterface setupProtocolBuffers(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    BimServerClientFactory factory=new ProtocolBuffersBimServerClientFactory(address,8000,8000,null,metaDataManager);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimServerClientException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9372900335946248
160382,"public static final BimServerClientInterface setupSoap(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    BimServerClientFactory factory=new SoapBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","public static final BimServerClientInterface setupSoap(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    BimServerClientFactory factory=new SoapBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimServerClientException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9345794392523364
160383,"/** 
 * @param address
 * @return
 */
public static final BimServerClientInterface setupJson(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    if (!Files.isDirectory(home)) {
      Files.createDirectory(home);
    }
    Path tmp=home.resolve(""String_Node_Str"");
    if (!Files.isDirectory(tmp)) {
      Files.createDirectory(tmp);
    }
    MavenPluginRepository mavenPluginRepository=new MavenPluginRepository(home.resolve(""String_Node_Str""));
    PluginManager pluginManager=new PluginManager(tmp,home.resolve(""String_Node_Str""),mavenPluginRepository,System.getProperty(""String_Node_Str""),null,null,null);
    pluginManager.loadAllPluginsFromEclipseWorkspace(Paths.get(""String_Node_Str""),true);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    metaDataManager.init();
    pluginManager.initAllLoadedPlugins();
    BimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","/** 
 * @param address
 * @return
 */
public static final BimServerClientInterface setupJson(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    if (!Files.isDirectory(home)) {
      Files.createDirectory(home);
    }
    Path tmp=home.resolve(""String_Node_Str"");
    if (!Files.isDirectory(tmp)) {
      Files.createDirectory(tmp);
    }
    MavenPluginRepository mavenPluginRepository=new MavenPluginRepository(home.resolve(""String_Node_Str""));
    PluginManager pluginManager=new PluginManager(tmp,home.resolve(""String_Node_Str""),mavenPluginRepository,System.getProperty(""String_Node_Str""),null,null,null);
    pluginManager.loadAllPluginsFromEclipseWorkspace(Paths.get(""String_Node_Str""),true);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    metaDataManager.init();
    pluginManager.initAllLoadedPlugins();
    BimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimServerClientException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9617747440273038
160384,"public Runner(EClass eClass,RenderEnginePool renderEnginePool,DatabaseSession databaseSession,RenderEngineSettings renderEngineSettings,ObjectProvider objectProvider,StreamingSerializerPlugin ifcSerializerPlugin,RenderEngineFilter renderEngineFilter,GenerateGeometryResult generateGeometryResult,QueryContext queryContext){
  this.eClass=eClass;
  this.renderEnginePool=renderEnginePool;
  this.databaseSession=databaseSession;
  this.renderEngineSettings=renderEngineSettings;
  this.objectProvider=objectProvider;
  this.ifcSerializerPlugin=ifcSerializerPlugin;
  this.renderEngineFilter=renderEngineFilter;
  this.generateGeometryResult=generateGeometryResult;
  this.queryContext=queryContext;
}","public Runner(EClass eClass,RenderEnginePool renderEnginePool,DatabaseSession databaseSession,RenderEngineSettings renderEngineSettings,ObjectProvider objectProvider,StreamingSerializerPlugin ifcSerializerPlugin,RenderEngineFilter renderEngineFilter,GenerateGeometryResult generateGeometryResult,QueryContext queryContext,Query originalQuery){
  this.eClass=eClass;
  this.renderEnginePool=renderEnginePool;
  this.databaseSession=databaseSession;
  this.renderEngineSettings=renderEngineSettings;
  this.objectProvider=objectProvider;
  this.ifcSerializerPlugin=ifcSerializerPlugin;
  this.renderEngineFilter=renderEngineFilter;
  this.generateGeometryResult=generateGeometryResult;
  this.queryContext=queryContext;
  this.originalQuery=originalQuery;
}",0.9614855570839064
160385,"@Override public void run(){
  try {
    HashMapVirtualObject next;
    next=objectProvider.next();
    Query query=new Query(""String_Node_Str"",packageMetaData);
    QueryPart queryPart=query.createQueryPart();
    while (next != null) {
      queryPart.addOid(next.getOid());
      next=objectProvider.next();
    }
    objectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
  }
 catch (  BimserverDatabaseException|IOException|QueryException e1) {
    e1.printStackTrace();
  }
  StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePool.borrowObject();
    final Set<HashMapVirtualObject> oids=new HashSet<>();
    ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
      @Override public void newObject(      HashMapVirtualObject next){
        if (eClass.isSuperTypeOf(next.eClass())) {
          oids.add(next);
        }
      }
    }
);
    ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      String basefilenamename=""String_Node_Str"";
      if (eClass != null) {
        basefilenamename=eClass.getName();
      }
      File file=new File(basefilenamename + ""String_Node_Str"");
      int i=0;
      while (file.exists()) {
        file=new File(basefilenamename + ""String_Node_Str"" + i+ ""String_Node_Str"");
        i++;
      }
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      try {
        renderEngineModel.generateGeneralGeometry();
      }
 catch (      RenderEngineException e) {
        if (e.getCause() instanceof java.io.EOFException) {
          if (oids.isEmpty() || eClass.getName().equals(""String_Node_Str"")) {
          }
 else {
            LOGGER.error(""String_Node_Str"" + eClass.getName(),e);
          }
        }
      }
      OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
      Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
      for (      HashMapVirtualObject ifcProduct : oids) {
        Integer expressId=oidToEid.get(ifcProduct.getOid());
        if (ifcProduct.eGet(representationFeature) != null) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry != null && geometry.getNrIndices() > 0) {
              VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
              WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
              VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              calculateObb(geometryInfo,tranformationMatrix,geometry.getIndices(),geometry.getVertices(),generateGeometryResult);
              geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
              long size=getSize(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash),0);
                  bytesSaved.addAndGet(size);
                }
 else {
                  hashes.put(hash,geometryData.getOid());
                  geometryData.save();
                }
              }
 else {
                geometryData.save();
              }
              geometryInfo.save();
              totalBytes.addAndGet(size);
              ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
              ifcProduct.saveOverwrite();
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=eClass.getName().equals(""String_Node_Str"");
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
      if (renderEngine != null) {
        renderEnginePool.returnObject(renderEngine);
      }
      jobsDone.incrementAndGet();
      updateProgress();
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    HashMapVirtualObject next;
    next=objectProvider.next();
    Query query=new Query(""String_Node_Str"",packageMetaData);
    QueryPart queryPart=query.createQueryPart();
    while (next != null) {
      queryPart.addOid(next.getOid());
      next=objectProvider.next();
    }
    objectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
    StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
    RenderEngine renderEngine=null;
    byte[] bytes=null;
    try {
      renderEngine=renderEnginePool.borrowObject();
      final Set<HashMapVirtualObject> oids=new HashSet<>();
      ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
        @Override public void newObject(        HashMapVirtualObject next){
          if (eClass.isSuperTypeOf(next.eClass())) {
            oids.add(next);
          }
        }
      }
);
      ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(ifcSerializer.getInputStream(),baos);
      bytes=baos.toByteArray();
      InputStream in=new ByteArrayInputStream(bytes);
      RenderEngineModel renderEngineModel=renderEngine.openModel(in);
      try {
        if (!oids.isEmpty()) {
          renderEngineModel.setSettings(renderEngineSettings);
          renderEngineModel.setFilter(renderEngineFilter);
          try {
            renderEngineModel.generateGeneralGeometry();
          }
 catch (          RenderEngineException e) {
            if (e.getCause() instanceof java.io.EOFException) {
              if (oids.isEmpty() || eClass.getName().equals(""String_Node_Str"")) {
              }
 else {
                LOGGER.error(""String_Node_Str"" + eClass.getName(),e);
              }
            }
          }
          OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
          Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
          for (          HashMapVirtualObject ifcProduct : oids) {
            Integer expressId=oidToEid.get(ifcProduct.getOid());
            if (ifcProduct.eGet(representationFeature) != null) {
              try {
                RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
                RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
                boolean translate=true;
                if (geometry != null && geometry.getNrIndices() > 0) {
                  VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
                  WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
                  WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
                  minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
                  minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
                  minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
                  maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
                  maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
                  maxBounds.set(""String_Node_Str"",-Double.POSITIVE_INFINITY);
                  geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
                  geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
                  VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
                  geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
                  if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                    boolean hasMaterial=false;
                    float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                    for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                      int c=geometry.getMaterialIndices()[i];
                      for (int j=0; j < 3; ++j) {
                        int k=geometry.getIndices()[i * 3 + j];
                        if (c > -1) {
                          hasMaterial=true;
                          for (int l=0; l < 4; ++l) {
                            vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                          }
                        }
                      }
                    }
                    if (hasMaterial) {
                      geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                    }
                  }
                  double[] tranformationMatrix=new double[16];
                  if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                    tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                  }
 else {
                    Matrix.setIdentityM(tranformationMatrix,0);
                  }
                  for (int i=0; i < geometry.getIndices().length; i++) {
                    processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
                  }
                  calculateObb(geometryInfo,tranformationMatrix,geometry.getIndices(),geometry.getVertices(),generateGeometryResult);
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
                  long size=getSize(geometryData);
                  setTransformationMatrix(geometryInfo,tranformationMatrix);
                  if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                    int hash=hash(geometryData);
                    if (hashes.containsKey(hash)) {
                      geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash),0);
                      bytesSaved.addAndGet(size);
                    }
 else {
                      hashes.put(hash,geometryData.getOid());
                      geometryData.save();
                    }
                  }
 else {
                    geometryData.save();
                  }
                  geometryInfo.save();
                  totalBytes.addAndGet(size);
                  ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
                  ifcProduct.saveOverwrite();
                }
              }
 catch (              EntityNotFoundException e) {
                boolean ignoreNotFound=eClass.getName().equals(""String_Node_Str"");
                if (!ignoreNotFound) {
                  LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
                }
              }
catch (              BimserverDatabaseException|RenderEngineException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
            }
          }
        }
      }
  finally {
        in.close();
        renderEngineModel.close();
        if (renderEngine != null) {
          renderEnginePool.returnObject(renderEngine);
        }
        jobsDone.incrementAndGet();
        updateProgress();
      }
    }
 catch (    Exception e) {
      boolean debug=true;
      if (debug) {
        String basefilenamename=""String_Node_Str"";
        if (eClass != null) {
          basefilenamename=eClass.getName();
        }
        File file=new File(basefilenamename + ""String_Node_Str"");
        int i=0;
        while (file.exists()) {
          file=new File(basefilenamename + ""String_Node_Str"" + i+ ""String_Node_Str"");
          i++;
        }
        FileOutputStream fos=new FileOutputStream(file);
        IOUtils.copy(new ByteArrayInputStream(bytes),fos);
        fos.close();
      }
      LOGGER.error(""String_Node_Str"" + originalQuery,e);
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + originalQuery,e);
  }
}",0.8390288804510413
160386,"public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    RenderEnginePool renderEnginePool=bimServer.getRenderEnginePools().getRenderEnginePool(packageMetaData.getSchema(),defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(10000000));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query2=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart2=query2.createQueryPart();
        queryPart2.addType(eClass,false);
        QueryObjectProvider queryObjectProvider2=new QueryObjectProvider(databaseSession,bimServer,query2,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider2.next();
        while (next != null) {
          if (next.eClass() == eClass) {
            Query query=new Query(""String_Node_Str"",packageMetaData);
            QueryPart queryPart=query.createQueryPart();
            queryPart.addType(eClass,false);
            int x=0;
            queryPart.addOid(next.getOid());
            while (next != null && x < 99) {
              next=queryObjectProvider2.next();
              if (next != null) {
                if (next.eClass() == eClass) {
                  x++;
                  queryPart.addOid(next.getOid());
                }
              }
            }
            JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
            queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
            queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
            Include representation=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
            queryPart.addInclude(representation);
            Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
            queryPart.addInclude(objectPlacement);
            if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
              Include ifcWall=queryPart.createInclude();
              ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
              ifcWall.addField(""String_Node_Str"");
              Include hasOpenings=ifcWall.createInclude();
              hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
              hasOpenings.addField(""String_Node_Str"");
              hasOpenings.addInclude(representation);
              hasOpenings.addInclude(objectPlacement);
            }
            QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
            Runner runner=new Runner(eClass,renderEnginePool,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,renderEngineFilter,generateGeometryResult,queryContext);
            executor.submit(runner);
            jobsTotal.incrementAndGet();
          }
          next=queryObjectProvider2.next();
        }
      }
    }
    allJobsPushed=true;
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}","public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    RenderEnginePool renderEnginePool=bimServer.getRenderEnginePools().getRenderEnginePool(packageMetaData.getSchema(),defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(10000000));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query2=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart2=query2.createQueryPart();
        queryPart2.addType(eClass,false);
        QueryObjectProvider queryObjectProvider2=new QueryObjectProvider(databaseSession,bimServer,query2,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider2.next();
        while (next != null) {
          if (next.eClass() == eClass) {
            Query query=new Query(""String_Node_Str"",packageMetaData);
            QueryPart queryPart=query.createQueryPart();
            queryPart.addType(eClass,false);
            int x=0;
            queryPart.addOid(next.getOid());
            while (next != null && x < 99) {
              next=queryObjectProvider2.next();
              if (next != null) {
                if (next.eClass() == eClass) {
                  x++;
                  queryPart.addOid(next.getOid());
                }
              }
            }
            JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
            queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
            queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
            Include representation=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
            queryPart.addInclude(representation);
            Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
            queryPart.addInclude(objectPlacement);
            if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
              Include ifcWall=queryPart.createInclude();
              ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
              ifcWall.addField(""String_Node_Str"");
              Include hasOpenings=ifcWall.createInclude();
              hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
              hasOpenings.addField(""String_Node_Str"");
              hasOpenings.addInclude(representation);
              hasOpenings.addInclude(objectPlacement);
            }
            QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
            Runner runner=new Runner(eClass,renderEnginePool,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,renderEngineFilter,generateGeometryResult,queryContext,query);
            executor.submit(runner);
            jobsTotal.incrementAndGet();
          }
          next=queryObjectProvider2.next();
        }
      }
    }
    allJobsPushed=true;
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}",0.999486125385406
160387,"public static void main(String[] args){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    JsonBimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,args[0]);
    BimServerClient client=factory.create(new UsernamePasswordAuthenticationInfo(args[1],args[2]));
    client.getServiceInterface().importData(args[3],args[1],args[2],args[4]);
  }
 catch (  PluginException e) {
    e.printStackTrace();
  }
catch (  ServiceException e) {
    e.printStackTrace();
  }
catch (  ChannelConnectionException e) {
    e.printStackTrace();
  }
catch (  PublicInterfaceNotFoundException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    Path home=Paths.get(""String_Node_Str"");
    Path tmp=home.resolve(""String_Node_Str"");
    PluginManager pluginManager=LocalDevPluginLoader.createPluginManager(home);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    JsonBimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,args[0]);
    BimServerClient client=factory.create(new UsernamePasswordAuthenticationInfo(args[1],args[2]));
    client.getServiceInterface().importData(args[3],args[1],args[2],args[4]);
  }
 catch (  PluginException e) {
    e.printStackTrace();
  }
catch (  ServiceException e) {
    e.printStackTrace();
  }
catch (  ChannelConnectionException e) {
    e.printStackTrace();
  }
catch (  PublicInterfaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  BimServerClientException e) {
    e.printStackTrace();
  }
}",0.962800875273523
160388,"public SPluginBundle processPluginLocation(PluginLocation<?> pluginLocation,boolean strictVersionChecking,DefaultArtifactVersion bimserverVersion){
  if (pluginLocation instanceof MavenPluginLocation) {
    return processMavenPluginLocation((MavenPluginLocation)pluginLocation,strictVersionChecking,bimserverVersion);
  }
 else   if (pluginLocation instanceof GitHubPluginLocation) {
    return processGitHubPluginLocation((GitHubPluginLocation)pluginLocation,strictVersionChecking,bimserverVersion);
  }
  return null;
}","public SPluginBundle processPluginLocation(PluginLocation<?> pluginLocation,boolean strictVersionChecking,DefaultArtifactVersion bimserverVersion){
  if (pluginLocation instanceof MavenPluginLocation) {
    return processMavenPluginLocation((MavenPluginLocation)pluginLocation,strictVersionChecking,bimserverVersion);
  }
  return null;
}",0.7590221187427241
160389,"@Override public HashMapVirtualObject next() throws BimserverDatabaseException {
  if (start == -1) {
    start=System.nanoTime();
  }
  try {
    while (!stack.isEmpty()) {
      if (stack.size() > 10000) {
        dumpEndQuery();
        throw new BimserverDatabaseException(""String_Node_Str"");
      }
      StackFrame stackFrame=stack.peek();
      if (stackFrame.isDone()) {
        stack.pop();
        continue;
      }
      stackFramesProcessed++;
      if (stackFramesProcessed > 10000000) {
        dumpEndQuery();
        throw new BimserverDatabaseException(""String_Node_Str"");
      }
      boolean done=stackFrame.process();
      stackFrame.setDone(done);
      if (stackFrame instanceof ObjectProvidingStackFrame) {
        HashMapVirtualObject currentObject=((ObjectProvidingStackFrame)stackFrame).getCurrentObject();
        if (currentObject != null) {
          if (!oidsRead.contains(currentObject.getOid())) {
            oidsRead.add(currentObject.getOid());
            return currentObject;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new BimserverDatabaseException(e);
  }
  dumpEndQuery();
  return null;
}","@Override public HashMapVirtualObject next() throws BimserverDatabaseException {
  if (start == -1) {
    start=System.nanoTime();
  }
  try {
    while (!stack.isEmpty()) {
      if (stack.size() > MAX_STACK_SIZE) {
        dumpEndQuery();
        throw new BimserverDatabaseException(""String_Node_Str"");
      }
      StackFrame stackFrame=stack.peek();
      if (stackFrame.isDone()) {
        stack.pop();
        continue;
      }
      stackFramesProcessed++;
      if (stackFramesProcessed > MAX_STACK_FRAMES_PROCESSED) {
        dumpEndQuery();
        throw new BimserverDatabaseException(""String_Node_Str"" + MAX_STACK_FRAMES_PROCESSED + ""String_Node_Str"");
      }
      boolean done=stackFrame.process();
      stackFrame.setDone(done);
      if (stackFrame instanceof ObjectProvidingStackFrame) {
        HashMapVirtualObject currentObject=((ObjectProvidingStackFrame)stackFrame).getCurrentObject();
        if (currentObject != null) {
          if (currentObject.eClass().getName().equals(""String_Node_Str"")) {
          }
          if (!oidsRead.contains(currentObject.getOid())) {
            oidsRead.add(currentObject.getOid());
            return currentObject;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new BimserverDatabaseException(e);
  }
  dumpEndQuery();
  return null;
}",0.9238171611868484
160390,"public void updateUserSettings(DatabaseSession session,User user) throws BimserverLockConflictException, BimserverDatabaseException {
  UserSettings userSettings=user.getUserSettings();
  if (userSettings == null) {
    userSettings=session.create(UserSettings.class);
    user.setUserSettings(userSettings);
    session.store(user);
  }
  for (  Entry<PluginContext,Plugin> pluginEntry : pluginManager.getAllPlugins(true).entrySet()) {
    if (pluginEntry.getValue() instanceof WebModulePlugin || pluginEntry.getValue() instanceof ModelCheckerPlugin) {
      continue;
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(session,pluginEntry.getKey().getIdentifier());
    if (pluginDescriptor == null) {
      throw new BimserverDatabaseException(""String_Node_Str"" + pluginEntry.getKey().getIdentifier());
    }
    updateUserPlugin(session,user,pluginDescriptor,pluginEntry.getKey());
  }
  session.store(userSettings);
}","public void updateUserSettings(DatabaseSession session,User user) throws BimserverLockConflictException, BimserverDatabaseException {
  UserSettings userSettings=user.getUserSettings();
  if (userSettings == null) {
    userSettings=session.create(UserSettings.class);
    user.setUserSettings(userSettings);
    session.store(user);
  }
  for (  Entry<PluginContext,Plugin> pluginEntry : pluginManager.getAllPlugins(true).entrySet()) {
    if (pluginEntry.getValue() instanceof WebModulePlugin || pluginEntry.getValue() instanceof ModelCheckerPlugin) {
      continue;
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(session,pluginEntry.getKey().getIdentifier());
    if (pluginDescriptor == null) {
      LOGGER.error(""String_Node_Str"" + pluginEntry.getKey().getIdentifier());
    }
 else {
      updateUserPlugin(session,user,pluginDescriptor,pluginEntry.getKey());
    }
  }
  session.store(userSettings);
}",0.966702470461869
160391,"public void updateUserPlugin(DatabaseSession session,User user,PluginDescriptor pluginDescriptor,PluginContext pluginContext) throws BimserverDatabaseException {
  if (pluginDescriptor.isInstallForNewUsers()) {
    UserSettings userSettings=user.getUserSettings();
    if (userSettings == null) {
      userSettings=session.create(UserSettings.class);
      user.setUserSettings(userSettings);
      session.store(user);
    }
    Class<?> pluginInterface=getPluginInterface(pluginContext.getPlugin().getClass());
    String pluginInterfaceName=pluginInterface.getSimpleName();
    if (pluginInterfaceName.endsWith(""String_Node_Str"")) {
      pluginInterfaceName=pluginInterfaceName.substring(0,pluginInterfaceName.length() - 6);
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      return;
    }
    EClass userSettingsClass=StorePackage.eINSTANCE.getUserSettings();
    String listRefName=StringUtils.firstLowerCase(pluginInterfaceName) + ""String_Node_Str"";
    EReference listReference=(EReference)userSettingsClass.getEStructuralFeature(listRefName);
    if (listReference == null) {
      LOGGER.warn(listRefName + ""String_Node_Str"");
      return;
    }
    EReference defaultReference=(EReference)userSettingsClass.getEStructuralFeature(""String_Node_Str"" + pluginInterfaceName);
    EClass pluginConfigurationClass=(EClass)listReference.getEType();
    List<PluginConfiguration> list=(List<PluginConfiguration>)userSettings.eGet(listReference);
    PluginConfiguration pluginConfiguration=find(list,pluginContext.getIdentifier());
    if (pluginConfiguration == null) {
      pluginConfiguration=(PluginConfiguration)session.create(pluginConfigurationClass);
      list.add(pluginConfiguration);
      genericPluginConversion(pluginContext,session,pluginConfiguration,pluginDescriptor);
    }
    if (defaultReference != null) {
      if (userSettings.eGet(defaultReference) == null && !list.isEmpty()) {
        userSettings.eSet(defaultReference,list.get(0));
      }
    }
    session.store(userSettings);
  }
}","public void updateUserPlugin(DatabaseSession session,User user,PluginDescriptor pluginDescriptor,PluginContext pluginContext) throws BimserverDatabaseException {
  if (pluginDescriptor.isInstallForNewUsers()) {
    UserSettings userSettings=user.getUserSettings();
    if (userSettings == null) {
      userSettings=session.create(UserSettings.class);
      user.setUserSettings(userSettings);
      session.store(user);
    }
    Class<?> pluginInterface=getPluginInterface(pluginContext.getPlugin().getClass());
    String originalPluginInterfaceName=pluginInterface.getSimpleName();
    String pluginInterfaceName=pluginInterface.getSimpleName();
    if (pluginInterfaceName.endsWith(""String_Node_Str"")) {
      pluginInterfaceName=pluginInterfaceName.substring(0,pluginInterfaceName.length() - 6);
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      return;
    }
    EClass userSettingsClass=StorePackage.eINSTANCE.getUserSettings();
    String listRefName=StringUtils.firstLowerCase(pluginInterfaceName) + ""String_Node_Str"";
    EReference listReference=(EReference)userSettingsClass.getEStructuralFeature(listRefName);
    if (listReference == null) {
      LOGGER.warn(listRefName + ""String_Node_Str"");
      return;
    }
    EReference defaultReference=(EReference)userSettingsClass.getEStructuralFeature(""String_Node_Str"" + pluginInterfaceName);
    EClass pluginConfigurationClass=(EClass)listReference.getEType();
    List<PluginConfiguration> list=(List<PluginConfiguration>)userSettings.eGet(listReference);
    PluginConfiguration pluginConfiguration=find(list,pluginContext.getIdentifier());
    if (pluginConfiguration == null) {
      pluginConfiguration=(PluginConfiguration)session.create(pluginConfigurationClass);
      if (pluginConfiguration instanceof SerializerPluginConfiguration) {
        boolean streaming=originalPluginInterfaceName.equals(""String_Node_Str"") || originalPluginInterfaceName.equals(""String_Node_Str"");
        ((SerializerPluginConfiguration)pluginConfiguration).setStreaming(streaming);
      }
      list.add(pluginConfiguration);
      genericPluginConversion(pluginContext,session,pluginConfiguration,pluginDescriptor);
    }
    if (defaultReference != null) {
      if (userSettings.eGet(defaultReference) == null && !list.isEmpty()) {
        userSettings.eSet(defaultReference,list.get(0));
      }
    }
    session.store(userSettings);
  }
}",0.9269988412514484
160392,"private void initDatabaseDependantItems() throws BimserverDatabaseException {
  serverSettingsCache.init();
  notificationsManager.init();
  getSerializerFactory().init(pluginManager,bimDatabase,this);
  try {
    DatabaseSession session=bimDatabase.createSession();
    try {
      updatePlugins(session);
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
    session=bimDatabase.createSession();
    createDatabaseObjects(session);
    ServerSettings serverSettings=serverSettingsCache.getServerSettings();
    for (    Entry<PluginContext,WebModulePlugin> entry : pluginManager.getAllWebPlugins(true).entrySet()) {
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),entry.getKey().getIdentifier());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        PluginDescriptor pluginDescriptor=getPluginDescriptor(session,entry.getKey().getIdentifier());
        if (pluginDescriptor == null) {
          throw new BimserverDatabaseException(""String_Node_Str"" + entry.getKey().getIdentifier());
        }
        genericPluginConversion(entry.getKey(),session,webPluginConfiguration,pluginDescriptor);
      }
 else {
        if (webPluginConfiguration == serverSettings.getWebModule()) {
          setDefaultWebModule(entry.getValue());
        }
      }
    }
    session.store(serverSettings);
    Condition condition=new AttributeCondition(StorePackage.eINSTANCE.getUser_Username(),new StringLiteral(""String_Node_Str""));
    User systemUser=session.querySingle(condition,User.class,OldQuery.getDefault());
    ServerStarted serverStarted=session.create(ServerStarted.class);
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(systemUser);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimserverLockConflictException e) {
      throw new BimserverDatabaseException(e);
    }
catch (    ServiceException e) {
      throw new BimserverDatabaseException(e);
    }
 finally {
      session.close();
    }
    webModules=new HashMap<String,WebModulePlugin>();
    DatabaseSession ses=bimDatabase.createSession();
    try {
      List<WebModulePluginConfiguration> webModuleConfigurations=serverSettingsCache.getServerSettings().getWebModules();
      for (      WebModulePluginConfiguration webModulePluginConfiguration : webModuleConfigurations) {
        String contextPath=""String_Node_Str"";
        for (        Parameter parameter : webModulePluginConfiguration.getSettings().getParameters()) {
          if (parameter.getName().equals(""String_Node_Str"")) {
            contextPath=((StringType)parameter.getValue()).getValue();
          }
        }
        String identifier=webModulePluginConfiguration.getPluginDescriptor().getIdentifier();
        webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(identifier,true));
      }
    }
  finally {
      ses.close();
    }
    Integer protocolBuffersPort=getServerSettingsCache().getServerSettings().getProtocolBuffersPort();
    if (protocolBuffersPort >= 1 && protocolBuffersPort <= 65535) {
      try {
        protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactory,servicesMap,protocolBuffersPort);
        protocolBuffersServer.start();
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    bimServerClientFactory=new DirectBimServerClientFactory<ServiceInterface>(serverSettingsCache.getServerSettings().getSiteAddress(),serviceFactory,servicesMap,pluginManager,metaDataManager);
    pluginManager.setBimServerClientFactory(bimServerClientFactory);
  }
 catch (  BimserverLockConflictException e) {
    throw new BimserverDatabaseException(e);
  }
catch (  PluginException e) {
    throw new BimserverDatabaseException(e);
  }
}","private void initDatabaseDependantItems() throws BimserverDatabaseException {
  serverSettingsCache.init();
  notificationsManager.init();
  getSerializerFactory().init(pluginManager,bimDatabase,this);
  try {
    DatabaseSession session=bimDatabase.createSession();
    try {
      updatePlugins(session);
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
    session=bimDatabase.createSession();
    ServerSettings serverSettings=serverSettingsCache.getServerSettings();
    for (    Entry<PluginContext,WebModulePlugin> entry : pluginManager.getAllWebPlugins(true).entrySet()) {
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),entry.getKey().getIdentifier());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        PluginDescriptor pluginDescriptor=getPluginDescriptor(session,entry.getKey().getIdentifier());
        if (pluginDescriptor == null) {
          throw new BimserverDatabaseException(""String_Node_Str"" + entry.getKey().getIdentifier());
        }
        genericPluginConversion(entry.getKey(),session,webPluginConfiguration,pluginDescriptor);
      }
 else {
        if (webPluginConfiguration == serverSettings.getWebModule()) {
          setDefaultWebModule(entry.getValue());
        }
      }
    }
    session.store(serverSettings);
    Condition condition=new AttributeCondition(StorePackage.eINSTANCE.getUser_Username(),new StringLiteral(""String_Node_Str""));
    User systemUser=session.querySingle(condition,User.class,OldQuery.getDefault());
    ServerStarted serverStarted=session.create(ServerStarted.class);
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(systemUser);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimserverLockConflictException e) {
      throw new BimserverDatabaseException(e);
    }
catch (    ServiceException e) {
      throw new BimserverDatabaseException(e);
    }
 finally {
      session.close();
    }
    webModules=new HashMap<String,WebModulePlugin>();
    DatabaseSession ses=bimDatabase.createSession();
    try {
      List<WebModulePluginConfiguration> webModuleConfigurations=serverSettingsCache.getServerSettings().getWebModules();
      for (      WebModulePluginConfiguration webModulePluginConfiguration : webModuleConfigurations) {
        String contextPath=""String_Node_Str"";
        for (        Parameter parameter : webModulePluginConfiguration.getSettings().getParameters()) {
          if (parameter.getName().equals(""String_Node_Str"")) {
            contextPath=((StringType)parameter.getValue()).getValue();
          }
        }
        String identifier=webModulePluginConfiguration.getPluginDescriptor().getIdentifier();
        webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(identifier,true));
      }
    }
  finally {
      ses.close();
    }
    Integer protocolBuffersPort=getServerSettingsCache().getServerSettings().getProtocolBuffersPort();
    if (protocolBuffersPort >= 1 && protocolBuffersPort <= 65535) {
      try {
        protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactory,servicesMap,protocolBuffersPort);
        protocolBuffersServer.start();
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    bimServerClientFactory=new DirectBimServerClientFactory<ServiceInterface>(serverSettingsCache.getServerSettings().getSiteAddress(),serviceFactory,servicesMap,pluginManager,metaDataManager);
    pluginManager.setBimServerClientFactory(bimServerClientFactory);
  }
 catch (  BimserverLockConflictException e) {
    throw new BimserverDatabaseException(e);
  }
}",0.9857337799280488
160393,"private void updatePlugins(DatabaseSession session) throws BimserverDatabaseException {
  Map<PluginContext,Plugin> allPlugins=pluginManager.getAllPlugins(false);
  for (  PluginContext pluginContext : allPlugins.keySet()) {
    Plugin plugin=pluginContext.getPlugin();
    System.out.println(pluginContext.getIdentifier());
    Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
    Map<Long,PluginDescriptor> results=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
    if (results.size() == 0) {
      PluginDescriptor pluginDescriptor=session.create(PluginDescriptor.class);
      pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
      pluginDescriptor.setPluginClassName(plugin.getClass().getName());
      pluginDescriptor.setSimpleName(plugin.getClass().getSimpleName());
      pluginDescriptor.setDescription(pluginContext.getDescription() + ""String_Node_Str"" + pluginContext.getVersion());
      pluginDescriptor.setLocation(pluginContext.getLocation().toString());
      pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
      pluginDescriptor.setEnabled(true);
    }
 else     if (results.size() == 1) {
      PluginDescriptor pluginDescriptor=results.values().iterator().next();
      pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
      pluginDescriptor.setPluginClassName(plugin.getClass().getName());
      pluginDescriptor.setSimpleName(plugin.getClass().getSimpleName());
      pluginDescriptor.setDescription(pluginContext.getDescription() + ""String_Node_Str"" + pluginContext.getVersion());
      pluginDescriptor.setLocation(pluginContext.getLocation().toString());
      pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
      session.store(pluginDescriptor);
      pluginManager.getPluginContext(plugin).setEnabled(pluginDescriptor.getEnabled(),false);
    }
 else {
      LOGGER.error(""String_Node_Str"" + plugin.getClass().getName());
    }
  }
}","private void updatePlugins(DatabaseSession session) throws BimserverDatabaseException {
  Map<PluginContext,Plugin> allPlugins=pluginManager.getAllPlugins(false);
  for (  PluginContext pluginContext : allPlugins.keySet()) {
    Plugin plugin=pluginContext.getPlugin();
    Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPluginDescriptor_Identifier(),new StringLiteral(pluginContext.getIdentifier()));
    Map<Long,PluginDescriptor> results=session.query(pluginCondition,PluginDescriptor.class,OldQuery.getDefault());
    if (results.size() == 0) {
      PluginDescriptor pluginDescriptor=session.create(PluginDescriptor.class);
      pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
      pluginDescriptor.setPluginClassName(plugin.getClass().getName());
      pluginDescriptor.setSimpleName(plugin.getClass().getSimpleName());
      pluginDescriptor.setDescription(pluginContext.getDescription() + ""String_Node_Str"" + pluginContext.getVersion());
      pluginDescriptor.setLocation(pluginContext.getLocation().toString());
      pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
      pluginDescriptor.setEnabled(true);
    }
 else     if (results.size() == 1) {
      PluginDescriptor pluginDescriptor=results.values().iterator().next();
      pluginDescriptor.setIdentifier(pluginContext.getIdentifier());
      pluginDescriptor.setPluginClassName(plugin.getClass().getName());
      pluginDescriptor.setSimpleName(plugin.getClass().getSimpleName());
      pluginDescriptor.setDescription(pluginContext.getDescription() + ""String_Node_Str"" + pluginContext.getVersion());
      pluginDescriptor.setLocation(pluginContext.getLocation().toString());
      pluginDescriptor.setPluginInterfaceClassName(getPluginInterface(plugin.getClass()).getName());
      session.store(pluginDescriptor);
      pluginManager.getPluginContext(plugin).setEnabled(pluginDescriptor.getEnabled(),false);
    }
 else {
      LOGGER.error(""String_Node_Str"" + plugin.getClass().getName());
    }
  }
}",0.9868641031764986
160394,"@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),model.getPackageMetaData(),true);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (pool != null && renderEngine != null) {
      pool.release(renderEngine);
    }
  }
}","@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),model.getPackageMetaData(),true);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (pool != null && renderEngine != null) {
      pool.release(renderEngine);
    }
  }
}",0.9995987848913852
160395,"public void start(int id,String address,int port,int pbport,Path[] pluginDirectories){
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(Paths.get(""String_Node_Str"" + (id == -1 ? ""String_Node_Str"" : id)));
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""String_Node_Str"")));
  config.setStartEmbeddedWebServer(true);
  config.setClassPath(System.getProperty(""String_Node_Str""));
  config.setLocalDev(true);
  config.setPort(port);
  config.setStartCommandLine(true);
  bimServer=new BimServer(config);
  bimServer.getVersionChecker().getLocalVersion().setDate(new Date());
  try {
    if (pluginDirectories == null || pluginDirectories.length == 0) {
      LOGGER.warn(""String_Node_Str"");
    }
    LocalDevPluginLoader.loadPlugins(bimServer.getPluginManager(),pluginDirectories);
    bimServer.start();
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void start(int id,String address,int port,int pbport,Path[] pluginDirectories){
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(Paths.get(""String_Node_Str"" + (id == -1 ? ""String_Node_Str"" : id)));
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""String_Node_Str"")));
  config.setStartEmbeddedWebServer(true);
  config.setClassPath(System.getProperty(""String_Node_Str""));
  config.setLocalDev(true);
  config.setPort(port);
  config.setStartCommandLine(true);
  bimServer=new BimServer(config);
  bimServer.getVersionChecker().getLocalVersion().setDate(new Date());
  try {
    if (pluginDirectories == null || pluginDirectories.length == 0) {
      LOGGER.warn(""String_Node_Str"");
    }
    bimServer.start();
    LocalDevPluginLoader.loadPlugins(bimServer.getPluginManager(),pluginDirectories);
    if (bimServer.getServerInfo().getServerState() == ServerState.NOT_SETUP) {
      AdminInterface adminInterface=bimServer.getServiceFactory().get(new SystemAuthorization(1,TimeUnit.HOURS),AccessMethod.INTERNAL).get(AdminInterface.class);
      adminInterface.setup(""String_Node_Str"" + port,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      SettingsInterface settingsInterface=bimServer.getServiceFactory().get(new SystemAuthorization(1,TimeUnit.HOURS),AccessMethod.INTERNAL).get(SettingsInterface.class);
      settingsInterface.setCacheOutputFiles(false);
      settingsInterface.setPluginStrictVersionChecking(false);
    }
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.7914947635671216
160396,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  String projectName=""String_Node_Str"";
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    for (    ConcreteRevision subRevision : revision.getConcreteRevisions()) {
      incrSize+=subRevision.getSize();
    }
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  PluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getPluginConfiguration(),serializerOid,OldQuery.getDefault());
  PackageMetaData lastPackageMetaData=null;
  IfcHeader ifcHeader=null;
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    project=revision.getProject();
    pidRoidMap.put(project.getId(),roid);
    if (getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      for (      ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
        ifcHeader=concreteRevision.getIfcHeader();
        PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
        lastPackageMetaData=packageMetaData;
        IfcModel subModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
        int highestStopId=findHighestStopRid(project,concreteRevision);
        OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),revision.getOid(),objectIDM,Deep.YES,highestStopId);
        subModel.addChangeListener(new IfcModelChangeListener(){
          @Override public void objectAdded(){
            total.incrementAndGet();
            if (totalSize == 0) {
              setProgress(""String_Node_Str"",0);
            }
 else {
              setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
            }
          }
        }
);
        query.updateOidCounters(concreteRevision,getDatabaseSession());
        getDatabaseSession().getMap(subModel,query);
        projectName+=concreteRevision.getProject().getName() + ""String_Node_Str"";
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        try {
          checkGeometry(serializerPluginConfiguration,getBimServer().getPluginManager(),subModel,project,concreteRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
        ifcModelSet.add(subModel);
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + project.getOid());
    }
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,getDatabaseSession());
  try {
    ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  if (ifcHeader != null) {
    ifcHeader.load();
    ifcModel.getModelMetaData().setIfcHeader(ifcHeader);
  }
  if (projectName.endsWith(""String_Node_Str"")) {
    projectName=projectName.substring(0,projectName.length() - 1);
  }
  ifcModel.getModelMetaData().setName(projectName);
  return ifcModel;
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  String projectName=""String_Node_Str"";
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    for (    ConcreteRevision subRevision : revision.getConcreteRevisions()) {
      incrSize+=subRevision.getSize();
    }
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  PluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getPluginConfiguration(),serializerOid,OldQuery.getDefault());
  PackageMetaData lastPackageMetaData=null;
  IfcHeader ifcHeader=null;
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    project=revision.getProject();
    pidRoidMap.put(project.getId(),roid);
    if (getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      for (      ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
        ifcHeader=concreteRevision.getIfcHeader();
        PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
        lastPackageMetaData=packageMetaData;
        IfcModel subModel=new ServerIfcModel(packageMetaData,pidRoidMap,getDatabaseSession());
        int highestStopId=findHighestStopRid(project,concreteRevision);
        OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),revision.getOid(),objectIDM,Deep.YES,highestStopId);
        subModel.addChangeListener(new IfcModelChangeListener(){
          @Override public void objectAdded(){
            total.incrementAndGet();
            if (totalSize == 0) {
              setProgress(""String_Node_Str"",0);
            }
 else {
              setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
            }
          }
        }
);
        query.updateOidCounters(concreteRevision,getDatabaseSession());
        getDatabaseSession().getMap(subModel,query);
        projectName+=concreteRevision.getProject().getName() + ""String_Node_Str"";
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        try {
          checkGeometry(serializerPluginConfiguration,getBimServer().getPluginManager(),subModel,project,concreteRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
        ifcModelSet.add(subModel);
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + project.getOid());
    }
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,getDatabaseSession());
  if (ifcModelSet.size() == 1) {
    ifcModel=ifcModelSet.iterator().next();
  }
 else {
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
  if (ifcHeader != null) {
    ifcHeader.load();
    ifcModel.getModelMetaData().setIfcHeader(ifcHeader);
  }
  if (projectName.endsWith(""String_Node_Str"")) {
    projectName=projectName.substring(0,projectName.length() - 1);
  }
  ifcModel.getModelMetaData().setName(projectName);
  return ifcModel;
}",0.9853044086773968
160397,"@Override public DataObject execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision virtualRevision=getRevisionByRoid(roid);
  EObject eObject=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  PackageMetaData lastPackageMetaData=null;
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  pidRoidMap.put(virtualRevision.getProject().getId(),virtualRevision.getOid());
  for (  ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
    lastPackageMetaData=packageMetaData;
    IfcModel subModel=new BasicIfcModel(packageMetaData,pidRoidMap);
    int highestStopId=findHighestStopRid(concreteRevision.getProject(),concreteRevision);
    OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),virtualRevision.getOid(),null,Deep.NO,highestStopId);
    eObject=getDatabaseSession().get(null,oid,subModel,query);
    subModel.getModelMetaData().setDate(concreteRevision.getDate());
    ifcModelSet.add(subModel);
    if (eObject != null) {
      break;
    }
  }
  IfcModelInterface ifcModel=new BasicIfcModel(lastPackageMetaData,pidRoidMap);
  try {
    ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(virtualRevision.getProject(),ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  if (eObject == null) {
    throw new UserException(""String_Node_Str"");
  }
  DataObject dataObject=null;
  if (eObject instanceof IfcRoot) {
    IfcRoot ifcRoot=(IfcRoot)eObject;
    String guid=ifcRoot.getGlobalId() != null ? ifcRoot.getGlobalId() : ""String_Node_Str"";
    String name=ifcRoot.getName() != null ? ifcRoot.getName() : ""String_Node_Str"";
    dataObject=StoreFactory.eINSTANCE.createDataObject();
    dataObject.setType(eObject.eClass().getName());
    ((IdEObjectImpl)dataObject).setOid(oid);
    dataObject.setGuid(guid);
    dataObject.setName(name);
  }
 else {
    dataObject=StoreFactory.eINSTANCE.createDataObject();
    dataObject.setType(eObject.eClass().getName());
    ((IdEObjectImpl)dataObject).setOid(oid);
    dataObject.setName(""String_Node_Str"");
    dataObject.setGuid(""String_Node_Str"");
  }
  fillDataObject(ifcModel.getObjects(),eObject,dataObject);
  return dataObject;
}","@Override public DataObject execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision virtualRevision=getRevisionByRoid(roid);
  EObject eObject=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  PackageMetaData lastPackageMetaData=null;
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  pidRoidMap.put(virtualRevision.getProject().getId(),virtualRevision.getOid());
  for (  ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
    lastPackageMetaData=packageMetaData;
    IfcModel subModel=new BasicIfcModel(packageMetaData,pidRoidMap);
    int highestStopId=findHighestStopRid(concreteRevision.getProject(),concreteRevision);
    OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),virtualRevision.getOid(),null,Deep.NO,highestStopId);
    eObject=getDatabaseSession().get(null,oid,subModel,query);
    subModel.getModelMetaData().setDate(concreteRevision.getDate());
    ifcModelSet.add(subModel);
    if (eObject != null) {
      break;
    }
  }
  IfcModelInterface ifcModel=new BasicIfcModel(lastPackageMetaData,pidRoidMap);
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(virtualRevision.getProject(),ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  if (eObject == null) {
    throw new UserException(""String_Node_Str"");
  }
  DataObject dataObject=null;
  if (eObject instanceof IfcRoot) {
    IfcRoot ifcRoot=(IfcRoot)eObject;
    String guid=ifcRoot.getGlobalId() != null ? ifcRoot.getGlobalId() : ""String_Node_Str"";
    String name=ifcRoot.getName() != null ? ifcRoot.getName() : ""String_Node_Str"";
    dataObject=StoreFactory.eINSTANCE.createDataObject();
    dataObject.setType(eObject.eClass().getName());
    ((IdEObjectImpl)dataObject).setOid(oid);
    dataObject.setGuid(guid);
    dataObject.setName(name);
  }
 else {
    dataObject=StoreFactory.eINSTANCE.createDataObject();
    dataObject.setType(eObject.eClass().getName());
    ((IdEObjectImpl)dataObject).setOid(oid);
    dataObject.setName(""String_Node_Str"");
    dataObject.setGuid(""String_Node_Str"");
  }
  fillDataObject(ifcModel.getObjects(),eObject,dataObject);
  return dataObject;
}",0.9796557120500784
160398,"@Override public List<DataObject> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=getDatabaseSession().getEClassForName(packageName,className);
  Revision virtualRevision=getRevisionByRoid(roid);
  if (virtualRevision == null) {
    throw new UserException(""String_Node_Str"" + roid + ""String_Node_Str"");
  }
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  pidRoidMap.put(virtualRevision.getProject().getId(),virtualRevision.getOid());
  PackageMetaData lastPackageMetaData=null;
  Project project=virtualRevision.getProject();
  for (  ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
    int highestStopId=findHighestStopRid(project,concreteRevision);
    OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),-1,null,Deep.NO,highestStopId);
    lastPackageMetaData=packageMetaData;
    IfcModelInterface subModel=getDatabaseSession().getAllOfType(packageMetaData.getEPackage().getName(),className,query);
    subModel.getModelMetaData().setDate(concreteRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,getDatabaseSession());
  try {
    ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  List<DataObject> dataObjects=new ArrayList<DataObject>();
  for (  Long oid : ifcModel.keySet()) {
    EObject eObject=ifcModel.get(oid);
    if (eClass.isInstance(eObject)) {
      DataObject dataObject=StoreFactory.eINSTANCE.createDataObject();
      if (eObject instanceof IfcRoot) {
        IfcRoot ifcRoot=(IfcRoot)eObject;
        String guid=ifcRoot.getGlobalId() != null ? ifcRoot.getGlobalId() : ""String_Node_Str"";
        String name=ifcRoot.getName() != null ? ifcRoot.getName() : ""String_Node_Str"";
        dataObject=StoreFactory.eINSTANCE.createDataObject();
        dataObject.setType(eObject.eClass().getName());
        ((IdEObjectImpl)dataObject).setOid(oid);
        dataObject.setGuid(guid);
        dataObject.setName(name);
      }
 else {
        dataObject=StoreFactory.eINSTANCE.createDataObject();
        dataObject.setType(eObject.eClass().getName());
        ((IdEObjectImpl)dataObject).setOid(oid);
        dataObject.setGuid(""String_Node_Str"");
        dataObject.setName(""String_Node_Str"");
      }
      if (!flat) {
        GetDataObjectByOidDatabaseAction.fillDataObject(ifcModel.getObjects(),eObject,dataObject);
      }
      dataObjects.add(dataObject);
    }
  }
  return dataObjects;
}","@Override public List<DataObject> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=getDatabaseSession().getEClassForName(packageName,className);
  Revision virtualRevision=getRevisionByRoid(roid);
  if (virtualRevision == null) {
    throw new UserException(""String_Node_Str"" + roid + ""String_Node_Str"");
  }
  Map<Integer,Long> pidRoidMap=new HashMap<>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  pidRoidMap.put(virtualRevision.getProject().getId(),virtualRevision.getOid());
  PackageMetaData lastPackageMetaData=null;
  Project project=virtualRevision.getProject();
  for (  ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getPackageMetaData(concreteRevision.getProject().getSchema());
    int highestStopId=findHighestStopRid(project,concreteRevision);
    OldQuery query=new OldQuery(packageMetaData,concreteRevision.getProject().getId(),concreteRevision.getId(),-1,null,Deep.NO,highestStopId);
    lastPackageMetaData=packageMetaData;
    IfcModelInterface subModel=getDatabaseSession().getAllOfType(packageMetaData.getEPackage().getName(),className,query);
    subModel.getModelMetaData().setDate(concreteRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface ifcModel=new ServerIfcModel(lastPackageMetaData,pidRoidMap,getDatabaseSession());
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(getBimServer().getMetaDataManager(),ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  List<DataObject> dataObjects=new ArrayList<DataObject>();
  for (  Long oid : ifcModel.keySet()) {
    EObject eObject=ifcModel.get(oid);
    if (eClass.isInstance(eObject)) {
      DataObject dataObject=StoreFactory.eINSTANCE.createDataObject();
      if (eObject instanceof IfcRoot) {
        IfcRoot ifcRoot=(IfcRoot)eObject;
        String guid=ifcRoot.getGlobalId() != null ? ifcRoot.getGlobalId() : ""String_Node_Str"";
        String name=ifcRoot.getName() != null ? ifcRoot.getName() : ""String_Node_Str"";
        dataObject=StoreFactory.eINSTANCE.createDataObject();
        dataObject.setType(eObject.eClass().getName());
        ((IdEObjectImpl)dataObject).setOid(oid);
        dataObject.setGuid(guid);
        dataObject.setName(name);
      }
 else {
        dataObject=StoreFactory.eINSTANCE.createDataObject();
        dataObject.setType(eObject.eClass().getName());
        ((IdEObjectImpl)dataObject).setOid(oid);
        dataObject.setGuid(""String_Node_Str"");
        dataObject.setName(""String_Node_Str"");
      }
      if (!flat) {
        GetDataObjectByOidDatabaseAction.fillDataObject(ifcModel.getObjects(),eObject,dataObject);
      }
      dataObjects.add(dataObject);
    }
  }
  return dataObjects;
}",0.9826435246995996
160399,"public PluginManager(Path tempDir,Path pluginsDir,Path mavenDir,String baseClassPath,ServiceFactory serviceFactory,NotificationsManagerInterface notificationsManagerInterface,SServicesMap servicesMap){
  LOGGER.debug(""String_Node_Str"");
  this.mavenDir=mavenDir;
  this.pluginsDir=pluginsDir;
  this.tempDir=tempDir;
  this.baseClassPath=baseClassPath;
  this.serviceFactory=serviceFactory;
  this.notificationsManagerInterface=notificationsManagerInterface;
  this.servicesMap=servicesMap;
  if (pluginsDir != null) {
    if (!Files.isDirectory(pluginsDir)) {
      try {
        Files.createDirectories(pluginsDir);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 else {
      try {
        for (        Path file : PathUtils.list(pluginsDir)) {
          try {
            PluginBundleVersionIdentifier pluginBundleVersionIdentifier=PluginBundleVersionIdentifier.fromFileName(file.getFileName().toString());
            loadPluginsFromJar(pluginBundleVersionIdentifier,file,extractPluginBundleFromJar(file),extractPluginBundleVersionFromJar(file));
            LOGGER.info(""String_Node_Str"" + pluginBundleVersionIdentifier.getHumanReadable());
          }
 catch (          PluginException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}","public PluginManager(Path tempDir,Path pluginsDir,Path mavenDir,String baseClassPath,ServiceFactory serviceFactory,NotificationsManagerInterface notificationsManagerInterface,SServicesMap servicesMap){
  LOGGER.debug(""String_Node_Str"");
  this.mavenDir=mavenDir;
  this.pluginsDir=pluginsDir;
  this.tempDir=tempDir;
  this.baseClassPath=baseClassPath;
  this.serviceFactory=serviceFactory;
  this.notificationsManagerInterface=notificationsManagerInterface;
  this.servicesMap=servicesMap;
}",0.5192612137203166
160400,"private void processPluginDescriptor(PluginDescriptor pluginDescriptor,List<SPluginInformation> list){
  for (  AbstractPlugin pluginImplementation : pluginDescriptor.getPlugins()) {
    if (pluginImplementation instanceof JavaPlugin) {
      JavaPlugin javaPlugin=(JavaPlugin)pluginImplementation;
      SPluginInformation sPluginInformation=new SPluginInformation();
      sPluginInformation.setName(javaPlugin.getImplementationClass());
      sPluginInformation.setDescription(javaPlugin.getDescription());
      sPluginInformation.setIdentifier(javaPlugin.getImplementationClass());
      sPluginInformation.setType(getPluginTypeFromClass(javaPlugin.getInterfaceClass()));
      list.add(sPluginInformation);
    }
 else     if (pluginImplementation instanceof org.bimserver.plugins.WebModulePlugin) {
      org.bimserver.plugins.WebModulePlugin webModulePlugin=(org.bimserver.plugins.WebModulePlugin)pluginImplementation;
      SPluginInformation sPluginInformation=new SPluginInformation();
      sPluginInformation.setIdentifier(webModulePlugin.getIdentifier());
      sPluginInformation.setName(webModulePlugin.getIdentifier());
      sPluginInformation.setDescription(webModulePlugin.getDescription());
      sPluginInformation.setType(SPluginType.WEB_MODULE);
      list.add(sPluginInformation);
    }
  }
}","private void processPluginDescriptor(PluginDescriptor pluginDescriptor,List<SPluginInformation> list){
  for (  AbstractPlugin pluginImplementation : pluginDescriptor.getPlugins()) {
    if (pluginImplementation instanceof JavaPlugin) {
      JavaPlugin javaPlugin=(JavaPlugin)pluginImplementation;
      SPluginInformation sPluginInformation=new SPluginInformation();
      sPluginInformation.setName(javaPlugin.getImplementationClass());
      sPluginInformation.setDescription(javaPlugin.getDescription());
      sPluginInformation.setEnabled(true);
      sPluginInformation.setIdentifier(javaPlugin.getImplementationClass());
      sPluginInformation.setType(getPluginTypeFromClass(javaPlugin.getInterfaceClass()));
      list.add(sPluginInformation);
    }
 else     if (pluginImplementation instanceof org.bimserver.plugins.WebModulePlugin) {
      org.bimserver.plugins.WebModulePlugin webModulePlugin=(org.bimserver.plugins.WebModulePlugin)pluginImplementation;
      SPluginInformation sPluginInformation=new SPluginInformation();
      sPluginInformation.setIdentifier(webModulePlugin.getIdentifier());
      sPluginInformation.setName(webModulePlugin.getIdentifier());
      sPluginInformation.setDescription(webModulePlugin.getDescription());
      sPluginInformation.setType(SPluginType.WEB_MODULE);
      sPluginInformation.setEnabled(true);
      list.add(sPluginInformation);
    }
  }
}",0.9683823529411764
160401,"public PluginDescriptor getPluginDescriptor(InputStream inputStream) throws JAXBException {
  JAXBContext jaxbContext=JAXBContext.newInstance(PluginDescriptor.class);
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  PluginDescriptor pluginDescriptor=(PluginDescriptor)unmarshaller.unmarshal(inputStream);
  return pluginDescriptor;
}","public PluginDescriptor getPluginDescriptor(byte[] bytes) throws JAXBException, IOException {
  return getPluginDescriptor(new ByteArrayInputStream(bytes));
}",0.4387351778656126
160402,"public PluginBundle loadPluginsFromEclipseProject(Path projectRoot) throws PluginException {
  try {
    if (!Files.isDirectory(projectRoot)) {
      throw new PluginException(""String_Node_Str"" + projectRoot.toString());
    }
    final Path pluginFolder=projectRoot.resolve(""String_Node_Str"");
    if (!Files.isDirectory(pluginFolder)) {
      throw new PluginException(""String_Node_Str"" + projectRoot.toString());
    }
    Path pluginFile=pluginFolder.resolve(""String_Node_Str"");
    if (!Files.exists(pluginFile)) {
      throw new PluginException(""String_Node_Str"" + pluginFolder.toString());
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(Files.newInputStream(pluginFile));
    Path pomFile=projectRoot.resolve(""String_Node_Str"");
    Path packageFile=projectRoot.resolve(""String_Node_Str"");
    return loadJavaProject(projectRoot,pomFile,pluginFolder,pluginDescriptor);
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
catch (  XmlPullParserException e) {
    throw new PluginException(e);
  }
}","public PluginBundle loadPluginsFromEclipseProject(Path projectRoot) throws PluginException {
  try {
    if (!Files.isDirectory(projectRoot)) {
      throw new PluginException(""String_Node_Str"" + projectRoot.toString());
    }
    final Path pluginFolder=projectRoot.resolve(""String_Node_Str"");
    if (!Files.isDirectory(pluginFolder)) {
      throw new PluginException(""String_Node_Str"" + projectRoot.toString());
    }
    Path pluginFile=pluginFolder.resolve(""String_Node_Str"");
    if (!Files.exists(pluginFile)) {
      throw new PluginException(""String_Node_Str"" + pluginFolder.toString());
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(Files.newInputStream(pluginFile));
    Path pomFile=projectRoot.resolve(""String_Node_Str"");
    PluginBundle pluginBundle=loadJavaProject(projectRoot,pomFile,pluginFolder,pluginDescriptor);
    List<SPluginInformation> plugins=new ArrayList<>();
    processPluginDescriptor(pluginDescriptor,plugins);
    for (    SPluginInformation sPluginInformation : plugins) {
      if (sPluginInformation.isEnabled()) {
        sPluginInformation.setInstallForAllUsers(true);
        sPluginInformation.setInstallForNewUsers(true);
        PluginContext pluginContext=pluginBundle.getPluginContext(sPluginInformation.getIdentifier());
        if (pluginContext == null) {
          throw new PluginException(""String_Node_Str"" + sPluginInformation.getIdentifier());
        }
        pluginContext.getPlugin().init(this);
      }
    }
    try {
      long pluginBundleVersionId=pluginChangeListener.pluginBundleInstalled(pluginBundle);
      for (      SPluginInformation sPluginInformation : plugins) {
        if (sPluginInformation.isEnabled()) {
          PluginContext pluginContext=pluginBundle.getPluginContext(sPluginInformation.getIdentifier());
          pluginChangeListener.pluginInstalled(pluginBundleVersionId,pluginContext,sPluginInformation);
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new PluginException(e);
    }
    return pluginBundle;
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
catch (  XmlPullParserException e) {
    throw new PluginException(e);
  }
}",0.6045853382394566
160403,"public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  stringBuffer.append(TEXT_2);
  stringBuffer.append(TEXT_3);
  stringBuffer.append(Licenser.getCommentedLicenseText(new File(""String_Node_Str"")));
  stringBuffer.append(TEXT_4);
  try {
    Object[] argumentsArray=(Object[])argument;
    MetaDataManager metaDataManager=(MetaDataManager)argumentsArray[0];
    @SuppressWarnings(""String_Node_Str"") Set<EPackage> ePackages=(Set<EPackage>)argumentsArray[1];
    for (    EPackage ePackage : ePackages) {
      for (      EClassifier eClassifier : ePackage.getEClassifiers()) {
        if (eClassifier instanceof EClass) {
          EClass eClass=(EClass)eClassifier;
          stringBuffer.append(TEXT_5);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_6);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_7);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_8);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_9);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_10);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_11);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_12);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_13);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_14);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_15);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_16);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_17);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_18);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_19);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_20);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_21);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_22);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_23);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_24);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_25);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_26);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_27);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_28);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_29);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_30);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_31);
          if (metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass) != null && !metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
            for (            EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
              stringBuffer.append(TEXT_32);
              stringBuffer.append(metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? ""String_Node_Str"" : ""String_Node_Str"");
              stringBuffer.append(TEXT_33);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_34);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_35);
            }
          }
          stringBuffer.append(TEXT_36);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_37);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_38);
          if (eClass.getEAnnotation(""String_Node_Str"") == null) {
            stringBuffer.append(TEXT_39);
          }
          for (          EAttribute eAttribute : eClass.getEAllAttributes()) {
            if (eAttribute.getEType() instanceof EEnum) {
              stringBuffer.append(TEXT_40);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_41);
              stringBuffer.append(eAttribute.getEType().getName());
              stringBuffer.append(TEXT_42);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_43);
            }
 else {
              if (eAttribute.isMany()) {
                stringBuffer.append(TEXT_44);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_45);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_46);
              }
 else {
                stringBuffer.append(TEXT_47);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_48);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_49);
              }
            }
          }
          for (          EReference eReference : eClass.getEAllReferences()) {
            if (eReference.isMany()) {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_50);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_51);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_52);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_53);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_54);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_55);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_56);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_57);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_58);
              }
 else {
                stringBuffer.append(TEXT_59);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_60);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_61);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_62);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_63);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_64);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_65);
              }
            }
 else {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_66);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_67);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_68);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_69);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_70);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_71);
              }
 else {
                stringBuffer.append(TEXT_72);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_73);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_74);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_75);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_76);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_77);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_78);
              }
            }
          }
          stringBuffer.append(TEXT_79);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_80);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_81);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_82);
          stringBuffer.append(StringUtils.firstUpperCase(eClass.getEPackage().getName()));
          stringBuffer.append(TEXT_83);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_84);
          if (eClass.getEAnnotation(""String_Node_Str"") == null) {
            stringBuffer.append(TEXT_85);
          }
          stringBuffer.append(TEXT_86);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_87);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_88);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_89);
          if (!metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
            for (            EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
              stringBuffer.append(TEXT_90);
              stringBuffer.append(metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? ""String_Node_Str"" : ""String_Node_Str"");
              stringBuffer.append(TEXT_91);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_92);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_93);
            }
          }
          for (          EAttribute eAttribute : eClass.getEAllAttributes()) {
            if (eAttribute.getEType() instanceof EEnum) {
              stringBuffer.append(TEXT_94);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_95);
              stringBuffer.append(eAttribute.getEType().getName());
              stringBuffer.append(TEXT_96);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_97);
            }
 else {
              if (eAttribute.isMany()) {
                stringBuffer.append(TEXT_98);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_99);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_100);
              }
 else {
                stringBuffer.append(TEXT_101);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_102);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_103);
              }
            }
          }
          for (          EReference eReference : eClass.getEAllReferences()) {
            if (eReference.isMany()) {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_104);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_105);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_106);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_107);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_108);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_109);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_110);
              }
 else {
                stringBuffer.append(TEXT_111);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_112);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_113);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_114);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_115);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_116);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_117);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName()));
                stringBuffer.append(TEXT_118);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_119);
              }
            }
 else {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_120);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_121);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_122);
              }
 else {
                stringBuffer.append(TEXT_123);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_124);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_125);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName()));
                stringBuffer.append(TEXT_126);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_127);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_128);
              }
            }
          }
          stringBuffer.append(TEXT_129);
        }
 else         if (eClassifier instanceof EEnum) {
          EEnum eEnum=(EEnum)eClassifier;
          stringBuffer.append(TEXT_130);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_131);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_132);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_133);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_134);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_135);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_136);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  stringBuffer.append(TEXT_137);
  return stringBuffer.toString();
}","public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  stringBuffer.append(TEXT_2);
  stringBuffer.append(TEXT_3);
  stringBuffer.append(Licenser.getCommentedLicenseText(new File(""String_Node_Str"")));
  stringBuffer.append(TEXT_4);
  try {
    Object[] argumentsArray=(Object[])argument;
    MetaDataManager metaDataManager=(MetaDataManager)argumentsArray[0];
    @SuppressWarnings(""String_Node_Str"") Set<EPackage> ePackages=(Set<EPackage>)argumentsArray[1];
    for (    EPackage ePackage : ePackages) {
      for (      EClassifier eClassifier : ePackage.getEClassifiers()) {
        if (eClassifier instanceof EClass) {
          EClass eClass=(EClass)eClassifier;
          stringBuffer.append(TEXT_5);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_6);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_7);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_8);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_9);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_10);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_11);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_12);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_13);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_14);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_15);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_16);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_17);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_18);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_19);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_20);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_21);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_22);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_23);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_24);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_25);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_26);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_27);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_28);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_29);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_30);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_31);
          if (metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass) != null && !metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
            for (            EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
              stringBuffer.append(TEXT_32);
              stringBuffer.append(metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? ""String_Node_Str"" : ""String_Node_Str"");
              stringBuffer.append(TEXT_33);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_34);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_35);
            }
          }
          stringBuffer.append(TEXT_36);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_37);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_38);
          if (eClass.getEAnnotation(""String_Node_Str"") == null) {
            stringBuffer.append(TEXT_39);
          }
          for (          EAttribute eAttribute : eClass.getEAllAttributes()) {
            if (eAttribute.getEType() instanceof EEnum) {
              stringBuffer.append(TEXT_40);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_41);
              stringBuffer.append(eAttribute.getEType().getName());
              stringBuffer.append(TEXT_42);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_43);
            }
 else {
              if (eAttribute.isMany()) {
                stringBuffer.append(TEXT_44);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_45);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_46);
              }
 else {
                stringBuffer.append(TEXT_47);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_48);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_49);
              }
            }
          }
          for (          EReference eReference : eClass.getEAllReferences()) {
            if (eReference.isMany()) {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_50);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_51);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_52);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_53);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_54);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_55);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_56);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_57);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_58);
              }
 else {
                stringBuffer.append(TEXT_59);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_60);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_61);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_62);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_63);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_64);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_65);
              }
            }
 else {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_66);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_67);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_68);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_69);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_70);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_71);
              }
 else {
                stringBuffer.append(TEXT_72);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_73);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_74);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_75);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_76);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_77);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_78);
              }
            }
          }
          stringBuffer.append(TEXT_79);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_80);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_81);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_82);
          stringBuffer.append(StringUtils.firstUpperCase(eClass.getEPackage().getName()));
          stringBuffer.append(TEXT_83);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_84);
          if (eClass.getEAnnotation(""String_Node_Str"") == null) {
            stringBuffer.append(TEXT_85);
          }
          stringBuffer.append(TEXT_86);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_87);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_88);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_89);
          stringBuffer.append(StringUtils.firstUpperCase(eClass.getEPackage().getName()));
          stringBuffer.append(TEXT_90);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_91);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_92);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_93);
          stringBuffer.append(eClass.getName());
          stringBuffer.append(TEXT_94);
          if (!metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
            for (            EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
              stringBuffer.append(TEXT_95);
              stringBuffer.append(metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? ""String_Node_Str"" : ""String_Node_Str"");
              stringBuffer.append(TEXT_96);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_97);
              stringBuffer.append(subClass.getName());
              stringBuffer.append(TEXT_98);
            }
          }
          for (          EAttribute eAttribute : eClass.getEAllAttributes()) {
            if (eAttribute.getEType() instanceof EEnum) {
              stringBuffer.append(TEXT_99);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_100);
              stringBuffer.append(eAttribute.getEType().getName());
              stringBuffer.append(TEXT_101);
              stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
              stringBuffer.append(TEXT_102);
            }
 else {
              if (eAttribute.isMany()) {
                stringBuffer.append(TEXT_103);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_104);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_105);
              }
 else {
                stringBuffer.append(TEXT_106);
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_107);
                stringBuffer.append(eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? ""String_Node_Str"" : ""String_Node_Str"");
                stringBuffer.append(StringUtils.firstUpperCase(eAttribute.getName()));
                stringBuffer.append(TEXT_108);
              }
            }
          }
          for (          EReference eReference : eClass.getEAllReferences()) {
            if (eReference.isMany()) {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_109);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_110);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_111);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_112);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_113);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_114);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_115);
              }
 else {
                stringBuffer.append(TEXT_116);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_117);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_118);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_119);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_120);
                stringBuffer.append(eReference.getName());
                stringBuffer.append(TEXT_121);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_122);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName()));
                stringBuffer.append(TEXT_123);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_124);
              }
            }
 else {
              if (eReference.getEAnnotation(""String_Node_Str"") != null) {
                stringBuffer.append(TEXT_125);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_126);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_127);
              }
 else {
                stringBuffer.append(TEXT_128);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_129);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_130);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName()));
                stringBuffer.append(TEXT_131);
                stringBuffer.append(eReference.getEType().getName());
                stringBuffer.append(TEXT_132);
                stringBuffer.append(StringUtils.firstUpperCase(eReference.getName()));
                stringBuffer.append(TEXT_133);
              }
            }
          }
          stringBuffer.append(TEXT_134);
        }
 else         if (eClassifier instanceof EEnum) {
          EEnum eEnum=(EEnum)eClassifier;
          stringBuffer.append(TEXT_135);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_136);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_137);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_138);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_139);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_140);
          stringBuffer.append(eEnum.getName());
          stringBuffer.append(TEXT_141);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  stringBuffer.append(TEXT_142);
  return stringBuffer.toString();
}",0.8639740566037736
160404,"@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),true);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      ifcSerializer.writeToOutputStream(fos,null);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=new SerializerInputstream(ifcSerializer);
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (pool != null && renderEngine != null) {
      pool.release(renderEngine);
    }
  }
}","@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),true);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      ifcSerializer.writeToOutputStream(fos,null);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=new SerializerInputstream(ifcSerializer);
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (pool != null && renderEngine != null) {
      pool.release(renderEngine);
    }
  }
}",0.9995977704993392
160405,"public void update(){
  try {
    serverInfo.setVersion(bimServer.getSConverter().convertFromSObject(bimServer.getVersionChecker().getLocalVersion(),null));
  }
 catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  if (bimServer.getDatabase().getMigrator().migrationRequired()) {
    setServerState(ServerState.MIGRATION_REQUIRED);
    if (bimServer.getConfig().isAutoMigrate()) {
      try {
        bimServer.getDatabase().getMigrator().migrate();
        setServerState(ServerState.RUNNING);
      }
 catch (      MigrationException|InconsistentModelsException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else   if (bimServer.getDatabase().getMigrator().migrationImpossible()) {
    setServerState(ServerState.MIGRATION_IMPOSSIBLE);
  }
 else {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      boolean adminFound=false;
      ServerSettings settings=bimServer.getServerSettingsCache().getServerSettings();
      IfcModelInterface users=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
      for (      IdEObject idEObject : users.getValues()) {
        if (idEObject instanceof User) {
          User user=(User)idEObject;
          if (user.getUserType() == UserType.ADMIN) {
            adminFound=true;
            break;
          }
        }
      }
      if (settings.getSiteAddress().isEmpty() || !adminFound) {
        setServerState(ServerState.NOT_SETUP);
      }
 else {
        setServerState(ServerState.RUNNING);
      }
    }
 catch (    BimserverDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
  }
}","public void update(){
  try {
    serverInfo.setVersion(bimServer.getSConverter().convertFromSObject(bimServer.getVersionChecker().getLocalVersion()));
  }
 catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  if (bimServer.getDatabase().getMigrator().migrationRequired()) {
    setServerState(ServerState.MIGRATION_REQUIRED);
    if (bimServer.getConfig().isAutoMigrate()) {
      try {
        bimServer.getDatabase().getMigrator().migrate();
        setServerState(ServerState.RUNNING);
      }
 catch (      MigrationException|InconsistentModelsException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else   if (bimServer.getDatabase().getMigrator().migrationImpossible()) {
    setServerState(ServerState.MIGRATION_IMPOSSIBLE);
  }
 else {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      boolean adminFound=false;
      ServerSettings settings=bimServer.getServerSettingsCache().getServerSettings();
      IfcModelInterface users=session.getAllOfType(StorePackage.eINSTANCE.getUser(),OldQuery.getDefault());
      for (      IdEObject idEObject : users.getValues()) {
        if (idEObject instanceof User) {
          User user=(User)idEObject;
          if (user.getUserType() == UserType.ADMIN) {
            adminFound=true;
            break;
          }
        }
      }
      if (settings.getSiteAddress().isEmpty() || !adminFound) {
        setServerState(ServerState.NOT_SETUP);
      }
 else {
        setServerState(ServerState.RUNNING);
      }
    }
 catch (    BimserverDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
  }
}",0.9985281130409184
160406,"public void init() throws DatabaseInitException, DatabaseRestartRequiredException, InconsistentModelsException {
  DatabaseSession databaseSession=createSession();
  try {
    if (getKeyValueStore().isNew()) {
      keyValueStore.createTable(CLASS_LOOKUP_TABLE,null,false);
      keyValueStore.createTable(Database.STORE_PROJECT_NAME,null,false);
      keyValueStore.createTable(Registry.REGISTRY_TABLE,null,false);
      setDatabaseVersion(-1,databaseSession);
      created=new Date();
      registry.save(DATE_CREATED,created,databaseSession);
    }
 else {
      keyValueStore.openTable(CLASS_LOOKUP_TABLE);
      keyValueStore.openTable(Database.STORE_PROJECT_NAME);
      keyValueStore.openTable(Registry.REGISTRY_TABLE);
      created=registry.readDate(DATE_CREATED,databaseSession);
      if (created == null) {
        created=new Date();
        registry.save(DATE_CREATED,created,databaseSession);
      }
    }
    databaseSchemaVersion=registry.readInt(SCHEMA_VERSION,databaseSession,-1);
    migrator=new Migrator(this);
    if (getKeyValueStore().isNew()) {
      try {
        migrator.migrate(databaseSession);
      }
 catch (      MigrationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      registry.save(""String_Node_Str"",true,databaseSession);
      databaseSession.commit();
      databaseSession.close();
      throw new DatabaseRestartRequiredException();
    }
 else     if (registry.readBoolean(""String_Node_Str"",true,databaseSession)) {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
      ServerSettings settings=createDefaultSettings(databaseSession);
      databaseSession.store(settings);
      new CreateBaseProjectDatabaseAction(databaseSession,AccessMethod.INTERNAL).execute();
      AddUserDatabaseAction addUserDatabaseAction=new AddUserDatabaseAction(bimServer,databaseSession,AccessMethod.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UserType.SYSTEM,new SystemAuthorization(1,TimeUnit.HOURS),false,null);
      addUserDatabaseAction.setCreateSystemUser();
      User systemUser=addUserDatabaseAction.execute();
      systemUser.setCreatedBy(systemUser);
      databaseSession.store(systemUser);
      DatabaseCreated databaseCreated=databaseSession.create(DatabaseCreated.class);
      databaseCreated.setAccessMethod(AccessMethod.INTERNAL);
      databaseCreated.setExecutor(systemUser);
      databaseCreated.setDate(new Date());
      databaseCreated.setPath(getKeyValueStore().getLocation());
      databaseCreated.setVersion(databaseSchemaVersion);
      databaseSession.store(databaseCreated);
      registry.save(""String_Node_Str"",false,databaseSession);
    }
 else {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
    }
    for (    EClass eClass : classifiers.keyBSet()) {
      if (eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE) {
        realClasses.add(eClass.getName());
      }
    }
    databaseSession.commit();
  }
 catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  DatabaseRestartRequiredException e) {
    throw e;
  }
catch (  Exception e) {
    throw new DatabaseInitException(e);
  }
 finally {
    databaseSession.close();
  }
}","public void init() throws DatabaseInitException, DatabaseRestartRequiredException, InconsistentModelsException {
  DatabaseSession databaseSession=createSession();
  try {
    if (getKeyValueStore().isNew()) {
      keyValueStore.createTable(CLASS_LOOKUP_TABLE,null,false);
      keyValueStore.createTable(Database.STORE_PROJECT_NAME,null,false);
      keyValueStore.createTable(Registry.REGISTRY_TABLE,null,false);
      setDatabaseVersion(-1,databaseSession);
      created=new Date();
      registry.save(DATE_CREATED,created,databaseSession);
    }
 else {
      keyValueStore.openTable(CLASS_LOOKUP_TABLE,false);
      keyValueStore.openTable(Database.STORE_PROJECT_NAME,false);
      keyValueStore.openTable(Registry.REGISTRY_TABLE,false);
      created=registry.readDate(DATE_CREATED,databaseSession);
      if (created == null) {
        created=new Date();
        registry.save(DATE_CREATED,created,databaseSession);
      }
    }
    databaseSchemaVersion=registry.readInt(SCHEMA_VERSION,databaseSession,-1);
    migrator=new Migrator(this);
    if (getKeyValueStore().isNew()) {
      try {
        migrator.migrate(databaseSession);
      }
 catch (      MigrationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      registry.save(""String_Node_Str"",true,databaseSession);
      databaseSession.commit();
      databaseSession.close();
      throw new DatabaseRestartRequiredException();
    }
 else     if (registry.readBoolean(""String_Node_Str"",true,databaseSession)) {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
      ServerSettings settings=createDefaultSettings(databaseSession);
      databaseSession.store(settings);
      new CreateBaseProjectDatabaseAction(databaseSession,AccessMethod.INTERNAL).execute();
      AddUserDatabaseAction addUserDatabaseAction=new AddUserDatabaseAction(bimServer,databaseSession,AccessMethod.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UserType.SYSTEM,new SystemAuthorization(1,TimeUnit.HOURS),false,null);
      addUserDatabaseAction.setCreateSystemUser();
      User systemUser=addUserDatabaseAction.execute();
      systemUser.setCreatedBy(systemUser);
      databaseSession.store(systemUser);
      DatabaseCreated databaseCreated=databaseSession.create(DatabaseCreated.class);
      databaseCreated.setAccessMethod(AccessMethod.INTERNAL);
      databaseCreated.setExecutor(systemUser);
      databaseCreated.setDate(new Date());
      databaseCreated.setPath(getKeyValueStore().getLocation());
      databaseCreated.setVersion(databaseSchemaVersion);
      databaseSession.store(databaseCreated);
      registry.save(""String_Node_Str"",false,databaseSession);
    }
 else {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
    }
    for (    EClass eClass : classifiers.keyBSet()) {
      if (eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE) {
        realClasses.add(eClass.getName());
      }
    }
    databaseSession.commit();
  }
 catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  DatabaseRestartRequiredException e) {
    throw e;
  }
catch (  Exception e) {
    throw new DatabaseInitException(e);
  }
 finally {
    databaseSession.close();
  }
}",0.9974358974358974
160407,"public void initInternalStructure(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  RecordIterator recordIterator=keyValueStore.getRecordIterator(CLASS_LOOKUP_TABLE,databaseSession);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      String packageAndClassName=BinUtils.byteArrayToString(record.getValue());
      String packageName=packageAndClassName.substring(0,packageAndClassName.indexOf(""String_Node_Str""));
      String className=packageAndClassName.substring(packageAndClassName.indexOf(""String_Node_Str"") + 1);
      EClass eClass=(EClass)getEClassifier(packageName,className);
      keyValueStore.openTable(packageAndClassName);
      for (      EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
        if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
          String indexTableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName()+ ""String_Node_Str""+ eStructuralFeature.getName();
          try {
            keyValueStore.openIndexTable(indexTableName);
          }
 catch (          DatabaseNotFoundException e) {
          }
        }
      }
      Short cid=BinUtils.byteArrayToShort(record.getKey());
      classifiers.put(cid,eClass);
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
}","public void initInternalStructure(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  RecordIterator recordIterator=keyValueStore.getRecordIterator(CLASS_LOOKUP_TABLE,databaseSession);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      String packageAndClassName=BinUtils.byteArrayToString(record.getValue());
      String packageName=packageAndClassName.substring(0,packageAndClassName.indexOf(""String_Node_Str""));
      String className=packageAndClassName.substring(packageAndClassName.indexOf(""String_Node_Str"") + 1);
      EClass eClass=(EClass)getEClassifier(packageName,className);
      boolean transactional=!(eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE);
      keyValueStore.openTable(packageAndClassName,transactional);
      for (      EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
        if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
          String indexTableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName()+ ""String_Node_Str""+ eStructuralFeature.getName();
          try {
            keyValueStore.openIndexTable(indexTableName,transactional);
          }
 catch (          DatabaseNotFoundException e) {
          }
        }
      }
      Short cid=BinUtils.byteArrayToShort(record.getKey());
      classifiers.put(cid,eClass);
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
}",0.9459093982420554
160408,"public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimserverDatabaseException, UserException, ServerException {
  checkOpen();
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      if (objectsToCommit.size() > 0 || objectsToDelete.size() > 0) {
        commit(progressHandler);
      }
      return result;
    }
 catch (    BimserverConcurrentModificationDatabaseException e) {
      if (progressHandler != null) {
        progressHandler.retry(i + 1);
      }
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
      if (DEVELOPER_DEBUG) {
        LockConflictException lockException=e.getLockException();
        if (lockException instanceof TransactionTimeoutException) {
        }
 else         if (lockException instanceof LockTimeoutException) {
        }
        LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"",lockException);
        long[] ownerTxnIds=e.getLockException().getOwnerTxnIds();
        for (        long txnid : ownerTxnIds) {
          DatabaseSession databaseSession=database.getDatabaseSession(txnid);
          if (databaseSession != null) {
            LOGGER.info(""String_Node_Str"" + databaseSession);
            StackTraceElement[] stackTraceElements=databaseSession.getStackTrace();
            for (            StackTraceElement stackTraceElement : stackTraceElements) {
              LOGGER.info(""String_Node_Str"" + stackTraceElement);
            }
          }
        }
      }
    }
catch (    UncheckedBimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverDatabaseException e) {
      throw e;
    }
catch (    ServiceException e) {
      if (e instanceof UserException) {
        throw ((UserException)e);
      }
 else       if (e instanceof ServerException) {
        throw ((ServerException)e);
      }
 else {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimserverDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}","public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimserverDatabaseException, UserException, ServerException {
  checkOpen();
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      if (objectsToCommit.size() > 0 || objectsToDelete.size() > 0) {
        commit(progressHandler);
      }
      return result;
    }
 catch (    BimserverConcurrentModificationDatabaseException e) {
      if (progressHandler != null) {
        progressHandler.retry(i + 1);
      }
      if (bimTransaction != null) {
        bimTransaction.rollback();
      }
      objectCache.clear();
      objectsToCommit.clear();
      if (bimTransaction != null) {
        bimTransaction=database.getKeyValueStore().startTransaction();
      }
    }
catch (    BimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
      if (DEVELOPER_DEBUG) {
        LockConflictException lockException=e.getLockException();
        if (lockException instanceof TransactionTimeoutException) {
        }
 else         if (lockException instanceof LockTimeoutException) {
        }
        LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"",lockException);
        long[] ownerTxnIds=e.getLockException().getOwnerTxnIds();
        for (        long txnid : ownerTxnIds) {
          DatabaseSession databaseSession=database.getDatabaseSession(txnid);
          if (databaseSession != null) {
            LOGGER.info(""String_Node_Str"" + databaseSession);
            StackTraceElement[] stackTraceElements=databaseSession.getStackTrace();
            for (            StackTraceElement stackTraceElement : stackTraceElements) {
              LOGGER.info(""String_Node_Str"" + stackTraceElement);
            }
          }
        }
      }
    }
catch (    UncheckedBimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverDatabaseException e) {
      throw e;
    }
catch (    ServiceException e) {
      if (e instanceof UserException) {
        throw ((UserException)e);
      }
 else       if (e instanceof ServerException) {
        throw ((ServerException)e);
      }
 else {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimserverDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}",0.984011122697254
160409,void openIndexTable(String indexTableName) throws BimserverDatabaseException ;,"void openIndexTable(String indexTableName,boolean transactional) throws BimserverDatabaseException ;",0.8764044943820225
160410,boolean openTable(String tableName) throws BimserverDatabaseException ;,"boolean openTable(String tableName,boolean transactional) throws BimserverDatabaseException ;",0.8658536585365854
160411,"public void openIndexTable(String tableName) throws BimserverDatabaseException {
  if (tables.containsKey(tableName)) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  DatabaseConfig databaseConfig=new DatabaseConfig();
  databaseConfig.setAllowCreate(false);
  databaseConfig.setDeferredWrite(defer);
  databaseConfig.setTransactional(useTransactions);
  databaseConfig.setSortedDuplicates(true);
  Database database=environment.openDatabase(null,tableName,databaseConfig);
  if (database == null) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  tables.put(tableName,database);
}","public void openIndexTable(String tableName,boolean transactional) throws BimserverDatabaseException {
  if (tables.containsKey(tableName)) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  DatabaseConfig databaseConfig=new DatabaseConfig();
  databaseConfig.setAllowCreate(false);
  databaseConfig.setDeferredWrite(!(transactional && useTransactions));
  databaseConfig.setTransactional(transactional && useTransactions);
  databaseConfig.setSortedDuplicates(true);
  Database database=environment.openDatabase(null,tableName,databaseConfig);
  if (database == null) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  tables.put(tableName,database);
}",0.9450243562978428
160412,"public boolean openTable(String tableName) throws BimserverDatabaseException {
  if (tables.containsKey(tableName)) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  DatabaseConfig databaseConfig=new DatabaseConfig();
  databaseConfig.setAllowCreate(false);
  databaseConfig.setDeferredWrite(defer);
  databaseConfig.setTransactional(useTransactions);
  databaseConfig.setSortedDuplicates(false);
  Database database=environment.openDatabase(null,tableName,databaseConfig);
  if (database == null) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  tables.put(tableName,database);
  return true;
}","public boolean openTable(String tableName,boolean transactional) throws BimserverDatabaseException {
  if (tables.containsKey(tableName)) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  DatabaseConfig databaseConfig=new DatabaseConfig();
  databaseConfig.setAllowCreate(false);
  databaseConfig.setDeferredWrite(!(transactional && useTransactions));
  databaseConfig.setTransactional(transactional && useTransactions);
  databaseConfig.setSortedDuplicates(false);
  Database database=environment.openDatabase(null,tableName,databaseConfig);
  if (database == null) {
    throw new BimserverDatabaseException(""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  tables.put(tableName,database);
  return true;
}",0.946075085324232
160413,"@Override public void storeNoOverwrite(String tableName,byte[] key,byte[] value,int index,int length,DatabaseSession databaseSession) throws BimserverDatabaseException, BimserverLockConflictException, BimserverConcurrentModificationDatabaseException {
  DatabaseEntry dbKey=new DatabaseEntry(key);
  DatabaseEntry dbValue=new DatabaseEntry(value,index,length);
  try {
    Database database=getDatabase(tableName);
    OperationStatus putNoOverwrite=database.putNoOverwrite(getTransaction(databaseSession),dbKey,dbValue);
    if (putNoOverwrite == OperationStatus.KEYEXIST) {
      ByteBuffer keyBuffer=ByteBuffer.wrap(key);
      if (key.length == 16) {
        int pid=keyBuffer.getInt();
        long oid=keyBuffer.getLong();
        int rid=-keyBuffer.getInt();
        throw new BimserverConcurrentModificationDatabaseException(""String_Node_Str"" + pid + ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
      }
 else {
        throw new BimserverConcurrentModificationDatabaseException(""String_Node_Str"");
      }
    }
  }
 catch (  LockConflictException e) {
    throw new BimserverLockConflictException(e);
  }
catch (  DatabaseException e) {
    throw new BimserverDatabaseException(""String_Node_Str"",e);
  }
}","@Override public void storeNoOverwrite(String tableName,byte[] key,byte[] value,int index,int length,DatabaseSession databaseSession) throws BimserverDatabaseException, BimserverLockConflictException, BimserverConcurrentModificationDatabaseException {
  DatabaseEntry dbKey=new DatabaseEntry(key);
  DatabaseEntry dbValue=new DatabaseEntry(value,index,length);
  try {
    Database database=getDatabase(tableName);
    OperationStatus putNoOverwrite=database.putNoOverwrite(database.getConfig().getTransactional() ? getTransaction(databaseSession) : null,dbKey,dbValue);
    if (putNoOverwrite == OperationStatus.KEYEXIST) {
      ByteBuffer keyBuffer=ByteBuffer.wrap(key);
      if (key.length == 16) {
        int pid=keyBuffer.getInt();
        long oid=keyBuffer.getLong();
        int rid=-keyBuffer.getInt();
        throw new BimserverConcurrentModificationDatabaseException(""String_Node_Str"" + pid + ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
      }
 else {
        throw new BimserverConcurrentModificationDatabaseException(""String_Node_Str"");
      }
    }
  }
 catch (  LockConflictException e) {
    throw new BimserverLockConflictException(e);
  }
catch (  DatabaseException e) {
    throw new BimserverDatabaseException(""String_Node_Str"",e);
  }
}",0.9666264575794128
160414,"@Override public SearchingRecordIterator getRecordIterator(String tableName,byte[] mustStartWith,byte[] startSearchingAt,DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  Cursor cursor=null;
  try {
    cursor=getDatabase(tableName).openCursor(getTransaction(databaseSession),cursorConfig);
    BerkeleySearchingRecordIterator berkeleySearchingRecordIterator=new BerkeleySearchingRecordIterator(cursor,this,cursorCounter.incrementAndGet(),mustStartWith,startSearchingAt);
    if (MONITOR_CURSOR_STACK_TRACES) {
      openCursors.put(berkeleySearchingRecordIterator.getCursorId(),new Exception().getStackTrace());
    }
    return berkeleySearchingRecordIterator;
  }
 catch (  BimserverLockConflictException e) {
    if (cursor != null) {
      try {
        cursor.close();
        throw e;
      }
 catch (      DatabaseException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
catch (  DatabaseException e1) {
    LOGGER.error(""String_Node_Str"",e1);
  }
  return null;
}","@Override public SearchingRecordIterator getRecordIterator(String tableName,byte[] mustStartWith,byte[] startSearchingAt,DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  Cursor cursor=null;
  try {
    Database database=getDatabase(tableName);
    cursor=database.openCursor(database.getConfig().getTransactional() ? getTransaction(databaseSession) : null,cursorConfig);
    BerkeleySearchingRecordIterator berkeleySearchingRecordIterator=new BerkeleySearchingRecordIterator(cursor,this,cursorCounter.incrementAndGet(),mustStartWith,startSearchingAt);
    if (MONITOR_CURSOR_STACK_TRACES) {
      openCursors.put(berkeleySearchingRecordIterator.getCursorId(),new Exception().getStackTrace());
    }
    return berkeleySearchingRecordIterator;
  }
 catch (  BimserverLockConflictException e) {
    if (cursor != null) {
      try {
        cursor.close();
        throw e;
      }
 catch (      DatabaseException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
catch (  DatabaseException e1) {
    LOGGER.error(""String_Node_Str"",e1);
  }
  return null;
}",0.941555453290382
160415,"@Override public void updateQueryEngine(SQueryEnginePluginConfiguration queryEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    QueryEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(queryEngine,session);
    session.executeAndCommitAction(new UpdateQueryEngineDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateQueryEngine(SQueryEnginePluginConfiguration queryEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    QueryEnginePluginConfiguration convert=session.get(queryEngine.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(queryEngine,convert,session);
    session.executeAndCommitAction(new UpdateQueryEngineDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9424520433694744
160416,"@Override public void updateModelCompare(SModelComparePluginConfiguration modelCompare) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelComparePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelCompare,session);
    session.executeAndCommitAction(new UpdateModelCompareDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateModelCompare(SModelComparePluginConfiguration modelCompare) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelComparePluginConfiguration convert=session.get(modelCompare.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(modelCompare,convert,session);
    session.executeAndCommitAction(new UpdateModelCompareDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9422442244224424
160417,"@Override public void updateModelMerger(SModelMergerPluginConfiguration modelMerger) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelMergerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(modelMerger,session);
    session.executeAndCommitAction(new UpdateModelMergerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateModelMerger(SModelMergerPluginConfiguration modelMerger) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    ModelMergerPluginConfiguration convert=session.get(modelMerger.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(modelMerger,convert,session);
    session.executeAndCommitAction(new UpdateModelMergerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9424520433694744
160418,"@Override public void updateInternalService(SInternalServicePluginConfiguration internalService) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    InternalServicePluginConfiguration convertFromSObject=getBimServer().getSConverter().convertFromSObject(internalService,session);
    session.executeAndCommitAction(new UpdateDatabaseAction<InternalServicePluginConfiguration>(session,getInternalAccessMethod(),convertFromSObject));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateInternalService(SInternalServicePluginConfiguration internalService) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    InternalServicePluginConfiguration convertFromSObject=session.get(internalService.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(internalService,convertFromSObject,session);
    session.executeAndCommitAction(new UpdateDatabaseAction<InternalServicePluginConfiguration>(session,getInternalAccessMethod(),convertFromSObject));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.7299703264094956
160419,"@Override public void updateDeserializer(SDeserializerPluginConfiguration deserializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    DeserializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(deserializer,session);
    session.executeAndCommitAction(new UpdateDeserializerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateDeserializer(SDeserializerPluginConfiguration deserializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    DeserializerPluginConfiguration convert=session.get(deserializer.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(deserializer,convert,session);
    session.executeAndCommitAction(new UpdateDeserializerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9422442244224424
160420,"@Override public void updateObjectIDM(SObjectIDMPluginConfiguration objectIDM) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    session.executeAndCommitAction(new UpdateObjectIDMDatabaseAction(session,getInternalAccessMethod(),getBimServer().getSConverter().convertFromSObject(objectIDM,session)));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateObjectIDM(SObjectIDMPluginConfiguration objectIDM) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    session.executeAndCommitAction(new UpdateObjectIDMDatabaseAction(session,getInternalAccessMethod(),getBimServer().getSConverter().convertFromSObject(objectIDM,session.get(objectIDM.getOid(),OldQuery.getDefault()),session)));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9490566037735848
160421,"@Override public void updateSerializer(SSerializerPluginConfiguration serializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(serializer,session);
    session.executeAndCommitAction(new UpdateSerializerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateSerializer(SSerializerPluginConfiguration serializer) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration convert=session.get(serializer.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(serializer,convert,session);
    session.executeAndCommitAction(new UpdateSerializerDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9426644182124788
160422,"@Override public void updateRenderEngine(SRenderEnginePluginConfiguration renderEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    RenderEnginePluginConfiguration convert=getBimServer().getSConverter().convertFromSObject(renderEngine,session);
    session.executeAndCommitAction(new UpdateRenderEngineDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateRenderEngine(SRenderEnginePluginConfiguration renderEngine) throws ServerException, UserException {
  requireRealUserAuthentication();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    RenderEnginePluginConfiguration convert=session.get(renderEngine.getOid(),OldQuery.getDefault());
    getBimServer().getSConverter().convertFromSObject(renderEngine,convert,session);
    session.executeAndCommitAction(new UpdateRenderEngineDatabaseAction(session,getInternalAccessMethod(),convert));
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.9422442244224424
160423,"/** 
 * @param address
 * @return
 */
public static final BimServerClientInterface setupJson(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    if (!Files.isDirectory(home)) {
      Files.createDirectory(home);
    }
    Path tmp=home.resolve(""String_Node_Str"");
    MavenPluginRepository mavenPluginRepository=new MavenPluginRepository(home.resolve(""String_Node_Str""));
    PluginManager pluginManager=new PluginManager(tmp,home.resolve(""String_Node_Str""),mavenPluginRepository,System.getProperty(""String_Node_Str""),null,null,null);
    pluginManager.loadAllPluginsFromEclipseWorkspace(Paths.get(""String_Node_Str""),true);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    metaDataManager.init();
    pluginManager.initAllLoadedPlugins();
    BimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","/** 
 * @param address
 * @return
 */
public static final BimServerClientInterface setupJson(String address){
  try {
    Path home=Paths.get(""String_Node_Str"");
    if (!Files.isDirectory(home)) {
      Files.createDirectory(home);
    }
    Path tmp=home.resolve(""String_Node_Str"");
    if (!Files.isDirectory(tmp)) {
      Files.createDirectory(tmp);
    }
    MavenPluginRepository mavenPluginRepository=new MavenPluginRepository(home.resolve(""String_Node_Str""));
    PluginManager pluginManager=new PluginManager(tmp,home.resolve(""String_Node_Str""),mavenPluginRepository,System.getProperty(""String_Node_Str""),null,null,null);
    pluginManager.loadAllPluginsFromEclipseWorkspace(Paths.get(""String_Node_Str""),true);
    MetaDataManager metaDataManager=new MetaDataManager(tmp);
    pluginManager.setMetaDataManager(metaDataManager);
    metaDataManager.init();
    pluginManager.initAllLoadedPlugins();
    BimServerClientFactory factory=new JsonBimServerClientFactory(metaDataManager,address);
    return factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9729534799855752
160424,"@Override public void run(){
  StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  try (RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),queryContext.getPackageMetaData().getSchema().getEPackageName())){
    renderEngine.init();
    final Set<HashMapVirtualObject> oids=new HashSet<>();
    ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
      @Override public void newObject(      HashMapVirtualObject next){
        if (eClass.isSuperTypeOf(next.eClass())) {
          oids.add(next);
        }
      }
    }
);
    ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
      Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
      for (      HashMapVirtualObject ifcProduct : oids) {
        Integer expressId=oidToEid.get(ifcProduct.getOid());
        if (ifcProduct.eGet(representationFeature) != null) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
              WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
              VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
              long size=getSize(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash).getOid(),0);
                  bytesSaved.addAndGet(size);
                }
 else {
                  hashes.put(hash,geometryData);
                  geometryData.save();
                }
              }
 else {
                geometryData.save();
              }
              geometryInfo.save();
              totalBytes.addAndGet(size);
              ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
              ifcProduct.saveOverwrite();
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=false;
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
      jobsDone.incrementAndGet();
      updateProgress();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  try (RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),queryContext.getPackageMetaData().getSchema().getEPackageName())){
    renderEngine.init();
    final Set<HashMapVirtualObject> oids=new HashSet<>();
    ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
      @Override public void newObject(      HashMapVirtualObject next){
        if (eClass.isSuperTypeOf(next.eClass())) {
          oids.add(next);
        }
      }
    }
);
    ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      try {
        renderEngineModel.generateGeneralGeometry();
      }
 catch (      RenderEngineException e) {
        if (e.getCause() instanceof java.io.EOFException) {
          if (oids.isEmpty()) {
          }
 else {
            LOGGER.error(""String_Node_Str"" + eClass.getName(),e);
          }
        }
      }
      OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
      Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
      for (      HashMapVirtualObject ifcProduct : oids) {
        Integer expressId=oidToEid.get(ifcProduct.getOid());
        if (ifcProduct.eGet(representationFeature) != null) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
              WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Double.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Double.NEGATIVE_INFINITY);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
              VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
              long size=getSize(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash).getOid(),0);
                  bytesSaved.addAndGet(size);
                }
 else {
                  hashes.put(hash,geometryData);
                  geometryData.save();
                }
              }
 else {
                geometryData.save();
              }
              geometryInfo.save();
              totalBytes.addAndGet(size);
              ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
              ifcProduct.saveOverwrite();
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=false;
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
      jobsDone.incrementAndGet();
      updateProgress();
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9746172968729556
160425,"private void processExtends(VirtualObject geometryInfo,double[] transformationMatrix,float[] vertices,int index,GenerateGeometryResult generateGeometryResult) throws BimserverDatabaseException {
  double x=vertices[index];
  double y=vertices[index + 1];
  double z=vertices[index + 2];
  double[] result=new double[4];
  Matrix.multiplyMV(result,0,transformationMatrix,0,new double[]{x,y,z,1},0);
  x=result[0];
  y=result[1];
  z=result[2];
  HashMapWrappedVirtualObject minBounds=(HashMapWrappedVirtualObject)geometryInfo.eGet(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds());
  HashMapWrappedVirtualObject maxBounds=(HashMapWrappedVirtualObject)geometryInfo.eGet(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds());
  minBounds.set(""String_Node_Str"",Math.min(x,(float)minBounds.eGet(""String_Node_Str"")));
  minBounds.set(""String_Node_Str"",Math.min(y,(float)minBounds.eGet(""String_Node_Str"")));
  minBounds.set(""String_Node_Str"",Math.min(z,(float)minBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(x,(float)maxBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(y,(float)maxBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(z,(float)maxBounds.eGet(""String_Node_Str"")));
  generateGeometryResult.getMinBounds().setX(Math.min(x,generateGeometryResult.getMinBounds().getX()));
  generateGeometryResult.getMinBounds().setY(Math.min(y,generateGeometryResult.getMinBounds().getY()));
  generateGeometryResult.getMinBounds().setZ(Math.min(z,generateGeometryResult.getMinBounds().getZ()));
  generateGeometryResult.getMaxBounds().setX(Math.max(x,generateGeometryResult.getMaxBounds().getX()));
  generateGeometryResult.getMaxBounds().setY(Math.max(y,generateGeometryResult.getMaxBounds().getY()));
  generateGeometryResult.getMaxBounds().setZ(Math.max(z,generateGeometryResult.getMaxBounds().getZ()));
}","private void processExtends(VirtualObject geometryInfo,double[] transformationMatrix,float[] vertices,int index,GenerateGeometryResult generateGeometryResult) throws BimserverDatabaseException {
  double x=vertices[index];
  double y=vertices[index + 1];
  double z=vertices[index + 2];
  double[] result=new double[4];
  Matrix.multiplyMV(result,0,transformationMatrix,0,new double[]{x,y,z,1},0);
  x=result[0];
  y=result[1];
  z=result[2];
  HashMapWrappedVirtualObject minBounds=(HashMapWrappedVirtualObject)geometryInfo.eGet(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds());
  HashMapWrappedVirtualObject maxBounds=(HashMapWrappedVirtualObject)geometryInfo.eGet(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds());
  minBounds.set(""String_Node_Str"",Math.min(x,(double)minBounds.eGet(""String_Node_Str"")));
  minBounds.set(""String_Node_Str"",Math.min(y,(double)minBounds.eGet(""String_Node_Str"")));
  minBounds.set(""String_Node_Str"",Math.min(z,(double)minBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(x,(double)maxBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(y,(double)maxBounds.eGet(""String_Node_Str"")));
  maxBounds.set(""String_Node_Str"",Math.max(z,(double)maxBounds.eGet(""String_Node_Str"")));
  generateGeometryResult.getMinBounds().setX(Math.min(x,generateGeometryResult.getMinBounds().getX()));
  generateGeometryResult.getMinBounds().setY(Math.min(y,generateGeometryResult.getMinBounds().getY()));
  generateGeometryResult.getMinBounds().setZ(Math.min(z,generateGeometryResult.getMinBounds().getZ()));
  generateGeometryResult.getMaxBounds().setX(Math.max(x,generateGeometryResult.getMaxBounds().getX()));
  generateGeometryResult.getMaxBounds().setY(Math.max(y,generateGeometryResult.getMaxBounds().getY()));
  generateGeometryResult.getMaxBounds().setZ(Math.max(z,generateGeometryResult.getMaxBounds().getZ()));
}",0.982548915917504
160426,"private void setTransformationMatrix(VirtualObject geometryInfo,double[] transformationMatrix) throws BimserverDatabaseException {
  ByteBuffer byteBuffer=ByteBuffer.allocate(16 * 4);
  byteBuffer.order(ByteOrder.nativeOrder());
  DoubleBuffer asDoubleBuffer=byteBuffer.asDoubleBuffer();
  for (  double f : transformationMatrix) {
    asDoubleBuffer.put(f);
  }
  geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_Transformation(),byteBuffer.array());
}","private void setTransformationMatrix(VirtualObject geometryInfo,double[] transformationMatrix) throws BimserverDatabaseException {
  ByteBuffer byteBuffer=ByteBuffer.allocate(16 * 8);
  byteBuffer.order(ByteOrder.nativeOrder());
  DoubleBuffer asDoubleBuffer=byteBuffer.asDoubleBuffer();
  for (  double d : transformationMatrix) {
    asDoubleBuffer.put(d);
  }
  geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_Transformation(),byteBuffer.array());
}",0.9936440677966102
160427,"public Short getCidOfEClass(EClass eClass){
  return classifiers.getA(eClass);
}","public Short getCidOfEClass(EClass eClass){
  return eClassToCid.get(eClass);
}",0.9182389937106918
160428,"public void initCounters(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  for (  EClass eClass : classifiers.keyBSet()) {
    RecordIterator iterator=keyValueStore.getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),databaseSession);
    try {
      Record record=iterator.last();
      initCounter(eClass);
      if (record != null) {
        ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
        int pid=buffer.getInt();
        long oid=buffer.getLong();
        if (oid > oidCounters.get(eClass).get()) {
          oidCounters.put(eClass,new AtomicLong(oid));
        }
        if (pid > pidCounter.get()) {
          pidCounter.set(pid);
        }
      }
    }
  finally {
      iterator.close();
    }
  }
}","public void initCounters(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  for (  EClass eClass : eClassToCid.keySet()) {
    RecordIterator iterator=keyValueStore.getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),databaseSession);
    try {
      Record record=iterator.last();
      initCounter(eClass);
      if (record != null) {
        ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
        int pid=buffer.getInt();
        long oid=buffer.getLong();
        if (oid > oidCounters.get(eClass).get()) {
          oidCounters.put(eClass,new AtomicLong(oid));
        }
        if (pid > pidCounter.get()) {
          pidCounter.set(pid);
        }
      }
    }
  finally {
      iterator.close();
    }
  }
}",0.9857936998147004
160429,"public Database(BimServer bimServer,Set<? extends EPackage> emfPackages,KeyValueStore keyValueStore,MetaDataManager metaDataManager) throws DatabaseInitException {
  this.bimServer=bimServer;
  this.keyValueStore=keyValueStore;
  this.metaDataManager=metaDataManager;
  this.emfPackages.put(StorePackage.eINSTANCE.getName(),StorePackage.eINSTANCE);
  this.emfPackages.put(LogPackage.eINSTANCE.getName(),LogPackage.eINSTANCE);
  this.emfPackages.put(GeometryPackage.eINSTANCE.getName(),GeometryPackage.eINSTANCE);
  for (  EPackage ePackage : emfPackages) {
    this.emfPackages.put(ePackage.getName(),ePackage);
  }
  this.registry=new Registry(keyValueStore);
}","public Database(BimServer bimServer,Set<? extends EPackage> emfPackages,KeyValueStore keyValueStore,MetaDataManager metaDataManager) throws DatabaseInitException {
  this.cidToEclass=new EClass[10000];
  this.bimServer=bimServer;
  this.keyValueStore=keyValueStore;
  this.metaDataManager=metaDataManager;
  this.emfPackages.put(StorePackage.eINSTANCE.getName(),StorePackage.eINSTANCE);
  this.emfPackages.put(LogPackage.eINSTANCE.getName(),LogPackage.eINSTANCE);
  this.emfPackages.put(GeometryPackage.eINSTANCE.getName(),GeometryPackage.eINSTANCE);
  for (  EPackage ePackage : emfPackages) {
    this.emfPackages.put(ePackage.getName(),ePackage);
  }
  this.registry=new Registry(keyValueStore);
}",0.972099853157122
160430,"public Set<EClass> getClasses(){
  return classifiers.keyBSet();
}","public Set<EClass> getClasses(){
  return eClassToCid.keySet();
}",0.900763358778626
160431,"public void init() throws DatabaseInitException, DatabaseRestartRequiredException, InconsistentModelsException {
  DatabaseSession databaseSession=createSession();
  try {
    if (getKeyValueStore().isNew()) {
      keyValueStore.createTable(CLASS_LOOKUP_TABLE,null,false);
      keyValueStore.createTable(Database.STORE_PROJECT_NAME,null,false);
      keyValueStore.createTable(Registry.REGISTRY_TABLE,null,false);
      setDatabaseVersion(-1,databaseSession);
      created=new Date();
      registry.save(DATE_CREATED,created,databaseSession);
    }
 else {
      keyValueStore.openTable(CLASS_LOOKUP_TABLE,false);
      keyValueStore.openTable(Database.STORE_PROJECT_NAME,false);
      keyValueStore.openTable(Registry.REGISTRY_TABLE,false);
      created=registry.readDate(DATE_CREATED,databaseSession);
      if (created == null) {
        created=new Date();
        registry.save(DATE_CREATED,created,databaseSession);
      }
    }
    databaseSchemaVersion=registry.readInt(SCHEMA_VERSION,databaseSession,-1);
    migrator=new Migrator(this);
    if (getKeyValueStore().isNew()) {
      try {
        migrator.migrate(databaseSession);
      }
 catch (      MigrationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      registry.save(""String_Node_Str"",true,databaseSession);
      databaseSession.commit();
      databaseSession.close();
      throw new DatabaseRestartRequiredException();
    }
 else     if (registry.readBoolean(""String_Node_Str"",true,databaseSession)) {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
      ServerSettings settings=createDefaultSettings(databaseSession);
      databaseSession.store(settings);
      new CreateBaseProjectDatabaseAction(databaseSession,AccessMethod.INTERNAL).execute();
      AddUserDatabaseAction addUserDatabaseAction=new AddUserDatabaseAction(bimServer,databaseSession,AccessMethod.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UserType.SYSTEM,new SystemAuthorization(1,TimeUnit.HOURS),false,null);
      addUserDatabaseAction.setCreateSystemUser();
      User systemUser=addUserDatabaseAction.execute();
      systemUser.setCreatedBy(systemUser);
      databaseSession.store(systemUser);
      DatabaseCreated databaseCreated=databaseSession.create(DatabaseCreated.class);
      databaseCreated.setAccessMethod(AccessMethod.INTERNAL);
      databaseCreated.setExecutor(systemUser);
      databaseCreated.setDate(new Date());
      databaseCreated.setPath(getKeyValueStore().getLocation());
      databaseCreated.setVersion(databaseSchemaVersion);
      databaseSession.store(databaseCreated);
      registry.save(""String_Node_Str"",false,databaseSession);
    }
 else {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
    }
    for (    EClass eClass : classifiers.keyBSet()) {
      if (eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE) {
        realClasses.add(eClass.getName());
      }
    }
    databaseSession.commit();
  }
 catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  DatabaseRestartRequiredException e) {
    throw e;
  }
catch (  Exception e) {
    throw new DatabaseInitException(e);
  }
 finally {
    databaseSession.close();
  }
}","public void init() throws DatabaseInitException, DatabaseRestartRequiredException, InconsistentModelsException {
  DatabaseSession databaseSession=createSession();
  try {
    if (getKeyValueStore().isNew()) {
      keyValueStore.createTable(CLASS_LOOKUP_TABLE,null,false);
      keyValueStore.createTable(Database.STORE_PROJECT_NAME,null,false);
      keyValueStore.createTable(Registry.REGISTRY_TABLE,null,false);
      setDatabaseVersion(-1,databaseSession);
      created=new Date();
      registry.save(DATE_CREATED,created,databaseSession);
    }
 else {
      keyValueStore.openTable(CLASS_LOOKUP_TABLE,false);
      keyValueStore.openTable(Database.STORE_PROJECT_NAME,false);
      keyValueStore.openTable(Registry.REGISTRY_TABLE,false);
      created=registry.readDate(DATE_CREATED,databaseSession);
      if (created == null) {
        created=new Date();
        registry.save(DATE_CREATED,created,databaseSession);
      }
    }
    databaseSchemaVersion=registry.readInt(SCHEMA_VERSION,databaseSession,-1);
    migrator=new Migrator(this);
    if (getKeyValueStore().isNew()) {
      try {
        migrator.migrate(databaseSession);
      }
 catch (      MigrationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      registry.save(""String_Node_Str"",true,databaseSession);
      databaseSession.commit();
      databaseSession.close();
      throw new DatabaseRestartRequiredException();
    }
 else     if (registry.readBoolean(""String_Node_Str"",true,databaseSession)) {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
      ServerSettings settings=createDefaultSettings(databaseSession);
      databaseSession.store(settings);
      new CreateBaseProjectDatabaseAction(databaseSession,AccessMethod.INTERNAL).execute();
      AddUserDatabaseAction addUserDatabaseAction=new AddUserDatabaseAction(bimServer,databaseSession,AccessMethod.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UserType.SYSTEM,new SystemAuthorization(1,TimeUnit.HOURS),false,null);
      addUserDatabaseAction.setCreateSystemUser();
      User systemUser=addUserDatabaseAction.execute();
      systemUser.setCreatedBy(systemUser);
      databaseSession.store(systemUser);
      DatabaseCreated databaseCreated=databaseSession.create(DatabaseCreated.class);
      databaseCreated.setAccessMethod(AccessMethod.INTERNAL);
      databaseCreated.setExecutor(systemUser);
      databaseCreated.setDate(new Date());
      databaseCreated.setPath(getKeyValueStore().getLocation());
      databaseCreated.setVersion(databaseSchemaVersion);
      databaseSession.store(databaseCreated);
      registry.save(""String_Node_Str"",false,databaseSession);
    }
 else {
      initInternalStructure(databaseSession);
      initCounters(databaseSession);
    }
    for (    EClass eClass : cidToEclass) {
      if (eClass != null) {
        if (eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE) {
          realClasses.add(eClass.getName());
        }
      }
    }
    databaseSession.commit();
  }
 catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
    close();
    throw new DatabaseInitException(e.getMessage());
  }
catch (  DatabaseRestartRequiredException e) {
    throw e;
  }
catch (  Exception e) {
    throw new DatabaseInitException(e);
  }
 finally {
    databaseSession.close();
  }
}",0.9903818953323904
160432,"public void initInternalStructure(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  RecordIterator recordIterator=keyValueStore.getRecordIterator(CLASS_LOOKUP_TABLE,databaseSession);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      String packageAndClassName=BinUtils.byteArrayToString(record.getValue());
      String packageName=packageAndClassName.substring(0,packageAndClassName.indexOf(""String_Node_Str""));
      String className=packageAndClassName.substring(packageAndClassName.indexOf(""String_Node_Str"") + 1);
      EClass eClass=(EClass)getEClassifier(packageName,className);
      boolean transactional=!(eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE);
      keyValueStore.openTable(packageAndClassName,transactional);
      for (      EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
        if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
          String indexTableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName()+ ""String_Node_Str""+ eStructuralFeature.getName();
          try {
            keyValueStore.openIndexTable(indexTableName,transactional);
          }
 catch (          DatabaseNotFoundException e) {
          }
        }
      }
      Short cid=BinUtils.byteArrayToShort(record.getKey());
      classifiers.put(cid,eClass);
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
}","public void initInternalStructure(DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  RecordIterator recordIterator=keyValueStore.getRecordIterator(CLASS_LOOKUP_TABLE,databaseSession);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      String packageAndClassName=BinUtils.byteArrayToString(record.getValue());
      String packageName=packageAndClassName.substring(0,packageAndClassName.indexOf(""String_Node_Str""));
      String className=packageAndClassName.substring(packageAndClassName.indexOf(""String_Node_Str"") + 1);
      EClass eClass=(EClass)getEClassifier(packageName,className);
      boolean transactional=!(eClass.getEPackage() == Ifc2x3tc1Package.eINSTANCE || eClass.getEPackage() == Ifc4Package.eINSTANCE);
      keyValueStore.openTable(packageAndClassName,transactional);
      for (      EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
        if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
          String indexTableName=eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName()+ ""String_Node_Str""+ eStructuralFeature.getName();
          try {
            keyValueStore.openIndexTable(indexTableName,transactional);
          }
 catch (          DatabaseNotFoundException e) {
          }
        }
      }
      Short cid=BinUtils.byteArrayToShort(record.getKey());
      cidToEclass[cid]=eClass;
      eClassToCid.put(eClass,cid);
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
}",0.9209272785011114
160433,"public EClass getEClassForCid(short cid){
  return classifiers.getB(cid);
}","public EClass getEClassForCid(short cid){
  return cidToEclass[cid];
}",0.8551724137931035
160434,"public void updateUserPlugin(DatabaseSession session,User user,PluginDescriptor pluginDescriptor,PluginContext pluginContext) throws BimserverDatabaseException {
  if (pluginDescriptor.isInstallForNewUsers()) {
    UserSettings userSettings=user.getUserSettings();
    if (userSettings == null) {
      userSettings=session.create(UserSettings.class);
      user.setUserSettings(userSettings);
      session.store(user);
    }
    Class<?> pluginInterface=getPluginInterface(pluginContext.getPlugin().getClass());
    String pluginInterfaceName=pluginInterface.getSimpleName();
    if (pluginInterfaceName.endsWith(""String_Node_Str"")) {
      pluginInterfaceName=pluginInterfaceName.substring(0,pluginInterfaceName.length() - 6);
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      return;
    }
    EClass userSettingsClass=StorePackage.eINSTANCE.getUserSettings();
    String listRefName=StringUtils.firstLowerCase(pluginInterfaceName) + ""String_Node_Str"";
    EReference listReference=(EReference)userSettingsClass.getEStructuralFeature(listRefName);
    if (listReference == null) {
      LOGGER.warn(listRefName + ""String_Node_Str"");
    }
    EReference defaultReference=(EReference)userSettingsClass.getEStructuralFeature(""String_Node_Str"" + pluginInterfaceName);
    EClass pluginConfigurationClass=(EClass)listReference.getEType();
    List<PluginConfiguration> list=(List<PluginConfiguration>)userSettings.eGet(listReference);
    PluginConfiguration pluginConfiguration=find(list,pluginContext.getPlugin().getClass().getName());
    if (pluginConfiguration == null) {
      pluginConfiguration=(PluginConfiguration)session.create(pluginConfigurationClass);
      list.add(pluginConfiguration);
      genericPluginConversion(pluginContext,session,pluginConfiguration,pluginDescriptor);
    }
    if (defaultReference != null) {
      if (userSettings.eGet(defaultReference) == null && !list.isEmpty()) {
        userSettings.eSet(defaultReference,list.get(0));
      }
    }
    session.store(userSettings);
  }
}","public void updateUserPlugin(DatabaseSession session,User user,PluginDescriptor pluginDescriptor,PluginContext pluginContext) throws BimserverDatabaseException {
  if (pluginDescriptor.isInstallForNewUsers()) {
    UserSettings userSettings=user.getUserSettings();
    if (userSettings == null) {
      userSettings=session.create(UserSettings.class);
      user.setUserSettings(userSettings);
      session.store(user);
    }
    Class<?> pluginInterface=getPluginInterface(pluginContext.getPlugin().getClass());
    String pluginInterfaceName=pluginInterface.getSimpleName();
    if (pluginInterfaceName.endsWith(""String_Node_Str"")) {
      pluginInterfaceName=pluginInterfaceName.substring(0,pluginInterfaceName.length() - 6);
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"")) {
      pluginInterfaceName=""String_Node_Str"";
    }
    if (pluginInterfaceName.equals(""String_Node_Str"") || pluginInterfaceName.equals(""String_Node_Str"")) {
      return;
    }
    EClass userSettingsClass=StorePackage.eINSTANCE.getUserSettings();
    String listRefName=StringUtils.firstLowerCase(pluginInterfaceName) + ""String_Node_Str"";
    EReference listReference=(EReference)userSettingsClass.getEStructuralFeature(listRefName);
    if (listReference == null) {
      LOGGER.warn(listRefName + ""String_Node_Str"");
      return;
    }
    EReference defaultReference=(EReference)userSettingsClass.getEStructuralFeature(""String_Node_Str"" + pluginInterfaceName);
    EClass pluginConfigurationClass=(EClass)listReference.getEType();
    List<PluginConfiguration> list=(List<PluginConfiguration>)userSettings.eGet(listReference);
    PluginConfiguration pluginConfiguration=find(list,pluginContext.getPlugin().getClass().getName());
    if (pluginConfiguration == null) {
      pluginConfiguration=(PluginConfiguration)session.create(pluginConfigurationClass);
      list.add(pluginConfiguration);
      genericPluginConversion(pluginContext,session,pluginConfiguration,pluginDescriptor);
    }
    if (defaultReference != null) {
      if (userSettings.eGet(defaultReference) == null && !list.isEmpty()) {
        userSettings.eSet(defaultReference,list.get(0));
      }
    }
    session.store(userSettings);
  }
}",0.9970954356846472
160435,"@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),model.getPackageMetaData(),true);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    pool.release(renderEngine);
  }
}","@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEnginePool pool=null;
  RenderEngine renderEngine=null;
  try {
    pool=bimServer.getRenderEnginePools().getRenderEnginePool(model.getPackageMetaData().getSchema(),renderEnginePluginClassName);
    renderEngine=pool.request();
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),model.getPackageMetaData(),true);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          List<?> representations=(List<?>)representation.eGet(representationsFeature);
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryInfo(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()));
                databaseSession.store(geometryInfo,pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              try {
                double area=renderEngineInstance.getArea();
                geometryInfo.setArea(area);
                double volume=renderEngineInstance.getVolume();
                if (volume < 0d) {
                  volume=-volume;
                }
                geometryInfo.setVolume(volume);
              }
 catch (              UnsupportedOperationException e) {
              }
              GeometryData geometryData=null;
              if (store) {
                geometryData=model.createAndAdd(GeometryPackage.eINSTANCE.getGeometryData(),databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()));
                databaseSession.store(geometryData,pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              Matrix.setIdentityM(tranformationMatrix,0);
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=true;
            for (            Object rep : representations) {
              if (rep instanceof IfcShapeRepresentation) {
                IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)rep;
                if (!""String_Node_Str"".equals(ifcShapeRepresentation.getRepresentationType())) {
                  ignoreNotFound=false;
                }
              }
            }
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|IOException|InterruptedException|PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (pool != null && renderEngine != null) {
      pool.release(renderEngine);
    }
  }
}",0.9953996549741232
160436,"public Runner(EClass eClass,RenderEnginePlugin renderEnginePlugin,DatabaseSession databaseSession,RenderEngineSettings renderEngineSettings,ObjectProvider objectProvider,StreamingSerializerPlugin ifcSerializerPlugin,Map<IdEObject,IdEObject> bigMap,RenderEngineFilter renderEngineFilter,GenerateGeometryResult generateGeometryResult,QueryContext queryContext){
  this.eClass=eClass;
  this.renderEnginePlugin=renderEnginePlugin;
  this.renderEngineSettings=renderEngineSettings;
  this.objectProvider=objectProvider;
  this.ifcSerializerPlugin=ifcSerializerPlugin;
  this.bigMap=bigMap;
  this.renderEngineFilter=renderEngineFilter;
  this.generateGeometryResult=generateGeometryResult;
  this.queryContext=queryContext;
}","public Runner(EClass eClass,RenderEnginePlugin renderEnginePlugin,DatabaseSession databaseSession,RenderEngineSettings renderEngineSettings,ObjectProvider objectProvider,StreamingSerializerPlugin ifcSerializerPlugin,RenderEngineFilter renderEngineFilter,GenerateGeometryResult generateGeometryResult,QueryContext queryContext){
  this.eClass=eClass;
  this.renderEnginePlugin=renderEnginePlugin;
  this.renderEngineSettings=renderEngineSettings;
  this.objectProvider=objectProvider;
  this.ifcSerializerPlugin=ifcSerializerPlugin;
  this.renderEngineFilter=renderEngineFilter;
  this.generateGeometryResult=generateGeometryResult;
  this.queryContext=queryContext;
}",0.4452449567723343
160437,"@Override public void run(){
  StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),queryContext.getPackageMetaData().getSchema().getEPackageName());
  }
 catch (  RenderEngineException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    renderEngine.init();
    final Set<HashMapVirtualObject> oids=new HashSet<>();
    ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
      @Override public void newObject(      HashMapVirtualObject next){
        if (eClass.isSuperTypeOf(next.eClass())) {
          oids.add(next);
        }
      }
    }
);
    ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
      Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
      for (      HashMapVirtualObject ifcProduct : oids) {
        Integer expressId=oidToEid.get(ifcProduct.getOid());
        if (ifcProduct.eGet(representationFeature) != null) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
              WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
              VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
              long size=getSize(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash).getOid(),0);
                  bytesSaved.addAndGet(size);
                }
 else {
                  hashes.put(hash,geometryData);
                  geometryData.save();
                }
              }
 else {
                geometryData.save();
              }
              geometryInfo.save();
              totalBytes.addAndGet(size);
              if (bigMap == null) {
                ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
                ifcProduct.saveOverwrite();
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
              }
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=false;
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
      jobsDone.incrementAndGet();
      updateProgress();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    try {
      renderEngine.close();
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  StreamingSerializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  try (RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),queryContext.getPackageMetaData().getSchema().getEPackageName())){
    renderEngine.init();
    final Set<HashMapVirtualObject> oids=new HashSet<>();
    ObjectProviderProxy proxy=new ObjectProviderProxy(objectProvider,new ObjectListener(){
      @Override public void newObject(      HashMapVirtualObject next){
        if (eClass.isSuperTypeOf(next.eClass())) {
          oids.add(next);
        }
      }
    }
);
    ifcSerializer.init(proxy,null,null,bimServer.getPluginManager(),packageMetaData);
    boolean debug=true;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      OidConvertingSerializer oidConvertingSerializer=(OidConvertingSerializer)ifcSerializer;
      Map<Long,Integer> oidToEid=oidConvertingSerializer.getOidToEid();
      for (      HashMapVirtualObject ifcProduct : oids) {
        Integer expressId=oidToEid.get(ifcProduct.getOid());
        if (ifcProduct.eGet(representationFeature) != null) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(expressId);
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              VirtualObject geometryInfo=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryInfo());
              WrappedVirtualObject minBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              WrappedVirtualObject maxBounds=new HashMapWrappedVirtualObject(queryContext,GeometryPackage.eINSTANCE.getVector3f());
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              minBounds.set(""String_Node_Str"",Float.POSITIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              maxBounds.set(""String_Node_Str"",-Float.NEGATIVE_INFINITY);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MinBounds(),minBounds);
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_MaxBounds(),maxBounds);
              VirtualObject geometryData=new HashMapVirtualObject(queryContext,GeometryPackage.eINSTANCE.getGeometryData());
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Indices(),intArrayToByteArray(geometry.getIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Vertices(),floatArrayToByteArray(geometry.getVertices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_MaterialIndices(),intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Normals(),floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setAttribute(GeometryPackage.eINSTANCE.getGeometryInfo_PrimitiveCount(),geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setAttribute(GeometryPackage.eINSTANCE.getGeometryData_Materials(),floatArrayToByteArray(vertex_colors));
                }
              }
              double[] tranformationMatrix=new double[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3,generateGeometryResult);
              }
              geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),geometryData.getOid(),0);
              long size=getSize(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  geometryInfo.setReference(GeometryPackage.eINSTANCE.getGeometryInfo_Data(),hashes.get(hash).getOid(),0);
                  bytesSaved.addAndGet(size);
                }
 else {
                  hashes.put(hash,geometryData);
                  geometryData.save();
                }
              }
 else {
                geometryData.save();
              }
              geometryInfo.save();
              totalBytes.addAndGet(size);
              ifcProduct.setReference(geometryFeature,geometryInfo.getOid(),0);
              ifcProduct.saveOverwrite();
            }
          }
 catch (          EntityNotFoundException e) {
            boolean ignoreNotFound=false;
            if (!ignoreNotFound) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ (expressId)+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
      jobsDone.incrementAndGet();
      updateProgress();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.0729213555398366
160438,"public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=bimServer.getPluginManager().getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(queryContext.getOidCounters().size()));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart=query.createQueryPart();
        queryPart.addType(eClass,false);
        JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
        queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
        queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
        Include representation=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
        queryPart.addInclude(representation);
        Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
        queryPart.addInclude(objectPlacement);
        if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
          Include ifcWall=queryPart.createInclude();
          ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
          ifcWall.addField(""String_Node_Str"");
          Include hasOpenings=ifcWall.createInclude();
          hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
          hasOpenings.addField(""String_Node_Str"");
          hasOpenings.addInclude(representation);
          hasOpenings.addInclude(objectPlacement);
        }
        QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider.next();
        query=new Query(""String_Node_Str"",packageMetaData);
        queryPart=query.createQueryPart();
        while (next != null) {
          queryPart.addOid(next.getOid());
          next=queryObjectProvider.next();
        }
        queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
        Runner runner=new Runner(eClass,renderEnginePlugin,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,null,renderEngineFilter,generateGeometryResult,queryContext);
        executor.submit(runner);
        jobsTotal.incrementAndGet();
      }
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}","public GenerateGeometryResult generateGeometry(long uoid,final DatabaseSession databaseSession,QueryContext queryContext) throws BimserverDatabaseException, GeometryGeneratingException {
  GenerateGeometryResult generateGeometryResult=new GenerateGeometryResult();
  packageMetaData=queryContext.getPackageMetaData();
  productClass=packageMetaData.getEClass(""String_Node_Str"");
  geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (queryContext.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (queryContext.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final StreamingSerializerPlugin ifcSerializerPlugin=(StreamingSerializerPlugin)bimServer.getPluginManager().getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,org.bimserver.database.OldQuery.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=bimServer.getPluginManager().getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    final RenderEngineFilter renderEngineFilter=new RenderEngineFilter();
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(queryContext.getOidCounters().size()));
    for (    EClass eClass : queryContext.getOidCounters().keySet()) {
      if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
        Query query=new Query(""String_Node_Str"",packageMetaData);
        QueryPart queryPart=query.createQueryPart();
        queryPart.addType(eClass,false);
        JsonQueryObjectModelConverter jsonQueryObjectModelConverter=new JsonQueryObjectModelConverter(packageMetaData);
        queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
        queryPart.addInclude(jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str""));
        Include representation=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
        queryPart.addInclude(representation);
        Include objectPlacement=jsonQueryObjectModelConverter.getDefineFromFile(""String_Node_Str"");
        queryPart.addInclude(objectPlacement);
        if (packageMetaData.getEClass(""String_Node_Str"").isSuperTypeOf(eClass)) {
          Include ifcWall=queryPart.createInclude();
          ifcWall.addType(packageMetaData.getEClass(eClass.getName()),false);
          ifcWall.addField(""String_Node_Str"");
          Include hasOpenings=ifcWall.createInclude();
          hasOpenings.addType(packageMetaData.getEClass(""String_Node_Str""),false);
          hasOpenings.addField(""String_Node_Str"");
          hasOpenings.addInclude(representation);
          hasOpenings.addInclude(objectPlacement);
        }
        QueryObjectProvider queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
        HashMapVirtualObject next=queryObjectProvider.next();
        query=new Query(""String_Node_Str"",packageMetaData);
        queryPart=query.createQueryPart();
        while (next != null) {
          queryPart.addOid(next.getOid());
          next=queryObjectProvider.next();
        }
        queryObjectProvider=new QueryObjectProvider(databaseSession,bimServer,query,Collections.singleton(queryContext.getRoid()),packageMetaData);
        Runner runner=new Runner(eClass,renderEnginePlugin,databaseSession,settings,queryObjectProvider,ifcSerializerPlugin,renderEngineFilter,generateGeometryResult,queryContext);
        executor.submit(runner);
        jobsTotal.incrementAndGet();
      }
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str""+ ""String_Node_Str""+ Formatters.bytesToString(bytesSaved.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get())+ ""String_Node_Str""+ Formatters.bytesToString(totalBytes.get() - bytesSaved.get()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
  return generateGeometryResult;
}",0.999539467624574
160439,"@Override public void error(Exception error){
  LOGGER.error(""String_Node_Str"",error);
  errors.add(error.getMessage());
  stop=new GregorianCalendar();
  changeActionState(ActionState.AS_ERROR,error == null ? ""String_Node_Str"" : error.getMessage(),0);
}","@Override public void error(Exception error){
  if (error == null) {
    LOGGER.error(""String_Node_Str"");
    changeActionState(ActionState.AS_ERROR,""String_Node_Str"",0);
  }
 else {
    LOGGER.error(""String_Node_Str"",error);
    errors.add(error.getMessage());
    stop=new GregorianCalendar();
    changeActionState(ActionState.AS_ERROR,error == null ? ""String_Node_Str"" : error.getMessage(),0);
  }
}",0.7488584474885844
160440,"public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(smtpProps,serverSettings.getSmtpPort());
  if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
  Session mailSession=Session.getDefaultInstance(props);
  Transport transport=null;
  try {
    if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
      transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
    transport.connect(serverSettings.getSmtpServer(),serverSettings.getSmtpUsername(),serverSettings.getSmtpPassword());
    Message message=new MimeMessage(mailSession);
    message.setSubject(subject);
    message.setRecipients(to,addressTo);
    message.setContent(body,contentType);
    message.setFrom(from);
    transport.sendMessage(message,addressTo);
  }
 catch (  MessagingException e) {
    LOGGER.error(""String_Node_Str"" + body + ""String_Node_Str""+ e.getMessage());
  }
}","public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(smtpProps,serverSettings.getSmtpPort());
  if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
    props.put(""String_Node_Str"",""String_Node_Str"");
  }
  Session mailSession=Session.getDefaultInstance(props);
  Transport transport=null;
  try {
    if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
      transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.STARTTLS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + serverSettings.getSmtpProtocol());
    }
    transport.connect(serverSettings.getSmtpServer(),serverSettings.getSmtpUsername(),serverSettings.getSmtpPassword());
    Message message=new MimeMessage(mailSession);
    message.setSubject(subject);
    message.setRecipients(to,addressTo);
    message.setContent(body,contentType);
    message.setFrom(from);
    transport.sendMessage(message,addressTo);
  }
 catch (  MessagingException e) {
    LOGGER.error(""String_Node_Str"" + body + ""String_Node_Str""+ e.getMessage());
  }
}",0.9111253196930946
160441,"@Override public void unregisterInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor){
  internalServices.remove(serviceDescriptor.getIdentifier());
  internalRemoteServiceInterfaces.remove(serviceDescriptor.getIdentifier());
}","@Override public void unregisterInternalNewRevisionHandler(long uoid,ServiceDescriptor serviceDescriptor){
  Map<String,ServiceDescriptor> map=uoidToInternalServices.get(uoid);
  if (map != null) {
    map.remove(serviceDescriptor.getIdentifier());
  }
  internalRemoteServiceInterfaces.remove(serviceDescriptor.getIdentifier());
}",0.6584507042253521
160442,"public ServiceDescriptor getInternalService(Long uoid,String serviceIdentifier){
  for (  Entry<Long,Map<String,ServiceDescriptor>> entry : internalServices.entrySet()) {
    if (entry.getValue().containsKey(serviceIdentifier)) {
      return entry.getValue().get(serviceIdentifier);
    }
  }
  return null;
}","public ServiceDescriptor getInternalService(Long uoid,String serviceIdentifier){
  for (  Entry<Long,Map<String,ServiceDescriptor>> entry : uoidToInternalServices.entrySet()) {
    if (entry.getValue().containsKey(serviceIdentifier)) {
      return entry.getValue().get(serviceIdentifier);
    }
  }
  return null;
}",0.987220447284345
160443,"public Map<String,ServiceDescriptor> getInternalServices(long uoid){
  return internalServices.get(uoid);
}","public Map<String,ServiceDescriptor> getInternalServices(long uoid){
  return uoidToInternalServices.get(uoid);
}",0.9727272727272728
160444,"@Override public void register(long uoid,ServiceDescriptor serviceDescriptor,Bimsie1RemoteServiceInterface remoteServiceInterface){
  serviceDescriptor.setUrl(url);
  Map<String,ServiceDescriptor> map=internalServices.get(uoid);
  if (map == null) {
    map=new HashMap<String,ServiceDescriptor>();
    internalServices.put(uoid,map);
  }
  map.put(serviceDescriptor.getIdentifier(),serviceDescriptor);
  internalRemoteServiceInterfaces.put(serviceDescriptor.getIdentifier(),remoteServiceInterface);
}","@Override public void register(long uoid,ServiceDescriptor serviceDescriptor,Bimsie1RemoteServiceInterface remoteServiceInterface){
  serviceDescriptor.setUrl(url);
  Map<String,ServiceDescriptor> map=uoidToInternalServices.get(uoid);
  if (map == null) {
    map=new HashMap<String,ServiceDescriptor>();
    uoidToInternalServices.put(uoid,map);
  }
  map.put(serviceDescriptor.getIdentifier(),serviceDescriptor);
  internalRemoteServiceInterfaces.put(serviceDescriptor.getIdentifier(),remoteServiceInterface);
}",0.9842209072978304
160445,"protected synchronized void updateProgress(final LongActionState state){
  try {
    boolean sendMessage=lastSent == -1 || (System.nanoTime() - lastSent > RATE_LIMIT_NANO_SECONDS && state.getProgress() != lastProgress.getProgress());
    sendMessage|=state.getProgress() == 100;
    sendMessage|=state.getState() == ActionState.FINISHED;
    sendMessage|=state.getState() == ActionState.AS_ERROR;
    sendMessage|=lastProgress != null && lastProgress.getStage() != state.getStage();
    sendMessage|=lastProgress != null && !lastProgress.getTitle().equals(state.getTitle());
    if (sendMessage) {
      try {
        map(new Mapper(){
          @Override public void map(          EndPoint endPoint) throws UserException, ServerException, BimserverDatabaseException {
            try {
              endPoint.getNotificationInterface().progress(key.getId(),new SConverter().convertToSObject(state));
            }
 catch (            Exception e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      lastProgress=state;
      lastSent=System.nanoTime();
    }
 else {
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","protected synchronized void updateProgress(final LongActionState state){
  try {
    boolean sendMessage=lastSent == -1L || (System.nanoTime() - lastSent > RATE_LIMIT_NANO_SECONDS && state.getProgress().intValue() != lastProgress.getProgress().intValue());
    sendMessage|=state.getProgress() == 100;
    sendMessage|=state.getState() == ActionState.FINISHED;
    sendMessage|=state.getState() == ActionState.AS_ERROR;
    sendMessage|=lastProgress != null && lastProgress.getStage() != state.getStage();
    sendMessage|=lastProgress != null && !lastProgress.getTitle().equals(state.getTitle());
    if (sendMessage) {
      try {
        map(new Mapper(){
          @Override public void map(          EndPoint endPoint) throws UserException, ServerException, BimserverDatabaseException {
            try {
              endPoint.getNotificationInterface().progress(key.getId(),new SConverter().convertToSObject(state));
            }
 catch (            Exception e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      lastProgress=state;
      lastSent=System.nanoTime();
    }
 else {
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9910887253002711
160446,"private void addTwoDimensionalArray(String entityName,String attribName){
  EClassifier finalType=null;
  if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEDouble();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else {
    System.out.println(""String_Node_Str"" + entityName + ""String_Node_Str""+ attribName);
  }
  EClass containerClass=(EClass)schemaPack.getEClassifier(""String_Node_Str"" + finalType.getName());
  if (containerClass == null) {
    containerClass=EcoreFactory.eINSTANCE.createEClass();
    containerClass.setName(""String_Node_Str"" + finalType.getName());
    if (finalType.getEPackage() == EcorePackage.eINSTANCE) {
      EAttribute finalAttribute=EcoreFactory.eINSTANCE.createEAttribute();
      finalAttribute.setName(""String_Node_Str"");
      finalAttribute.setEType(finalType);
      finalAttribute.setUpperBound(-1);
      containerClass.getEAttributes().add(finalAttribute);
    }
 else {
      EReference finalReference=EcoreFactory.eINSTANCE.createEReference();
      finalReference.setName(""String_Node_Str"");
      finalReference.setEType(finalType);
      finalReference.setUpperBound(-1);
      containerClass.getEReferences().add(finalReference);
    }
    schemaPack.getEClassifiers().add(containerClass);
  }
  EReference eReference=EcoreFactory.eINSTANCE.createEReference();
  eReference.getEAnnotations().add(createTwoDimensionalArrayAnnotation());
  eReference.setName(attribName);
  eReference.setUpperBound(-1);
  eReference.setEType(containerClass);
  EClass cls=(EClass)schemaPack.getEClassifier(entityName);
  cls.getEStructuralFeatures().add(eReference);
}","private void addTwoDimensionalArray(String entityName,String attribName){
  EClassifier finalType=null;
  if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEDouble();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=schemaPack.getEClassifier(""String_Node_Str"");
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else   if (entityName.equals(""String_Node_Str"") && attribName.equals(""String_Node_Str"")) {
    finalType=EcorePackage.eINSTANCE.getEInt();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + entityName + ""String_Node_Str""+ attribName);
  }
  EClass containerClass=(EClass)schemaPack.getEClassifier(""String_Node_Str"" + finalType.getName());
  if (containerClass == null) {
    containerClass=EcoreFactory.eINSTANCE.createEClass();
    containerClass.setName(""String_Node_Str"" + finalType.getName());
    if (finalType.getEPackage() == EcorePackage.eINSTANCE) {
      EAttribute finalAttribute=EcoreFactory.eINSTANCE.createEAttribute();
      finalAttribute.setName(""String_Node_Str"");
      finalAttribute.setEType(finalType);
      finalAttribute.setUpperBound(-1);
      containerClass.getEAttributes().add(finalAttribute);
    }
 else {
      EReference finalReference=EcoreFactory.eINSTANCE.createEReference();
      finalReference.setName(""String_Node_Str"");
      finalReference.setEType(finalType);
      finalReference.setUpperBound(-1);
      containerClass.getEReferences().add(finalReference);
    }
    schemaPack.getEClassifiers().add(containerClass);
  }
  EReference eReference=EcoreFactory.eINSTANCE.createEReference();
  eReference.getEAnnotations().add(createTwoDimensionalArrayAnnotation());
  eReference.setName(attribName);
  eReference.setUpperBound(-1);
  eReference.setEType(containerClass);
  EClass cls=(EClass)schemaPack.getEClassifier(entityName);
  cls.getEStructuralFeatures().add(eReference);
}",0.9933355548150616
160447,"public VersionChecker(ResourceFetcher resourceFetcher){
  try {
    Path pom=resourceFetcher.getFile(""String_Node_Str"");
    MavenXpp3Reader mavenreader=new MavenXpp3Reader();
    if (Files.exists(pom)) {
      String version=null;
      if (pom != null) {
        Model model=mavenreader.read(new FileReader(pom.toFile()));
        version=model.getVersion();
      }
      if (version == null) {
        Path parentPom=resourceFetcher.getFile(""String_Node_Str"");
        if (parentPom != null) {
          Model parentModel=mavenreader.read(new FileReader(parentPom.toFile()));
          version=parentModel.getVersion();
        }
 else {
          LOGGER.error(""String_Node_Str"");
        }
      }
      DefaultArtifactVersion defaultArtifactVersion=new DefaultArtifactVersion(version);
      localVersion=new SVersion();
      localVersion.setMajor(defaultArtifactVersion.getMajorVersion());
      localVersion.setMinor(defaultArtifactVersion.getMinorVersion());
      localVersion.setRevision(defaultArtifactVersion.getIncrementalVersion());
      localVersion.setFullString(defaultArtifactVersion.toString());
    }
 else {
      LOGGER.warn(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
}","public VersionChecker(ResourceFetcher resourceFetcher) throws VersionCheckException {
  try {
    Path pom=resourceFetcher.getFile(""String_Node_Str"");
    if (pom == null) {
      throw new VersionCheckException(""String_Node_Str"");
    }
    MavenXpp3Reader mavenreader=new MavenXpp3Reader();
    if (Files.exists(pom)) {
      String version=null;
      if (pom != null) {
        Model model=mavenreader.read(new FileReader(pom.toFile()));
        version=model.getVersion();
      }
      if (version == null) {
        Path parentPom=resourceFetcher.getFile(""String_Node_Str"");
        if (parentPom != null) {
          Model parentModel=mavenreader.read(new FileReader(parentPom.toFile()));
          version=parentModel.getVersion();
        }
 else {
          LOGGER.error(""String_Node_Str"");
        }
      }
      DefaultArtifactVersion defaultArtifactVersion=new DefaultArtifactVersion(version);
      localVersion=new SVersion();
      localVersion.setMajor(defaultArtifactVersion.getMajorVersion());
      localVersion.setMinor(defaultArtifactVersion.getMinorVersion());
      localVersion.setRevision(defaultArtifactVersion.getIncrementalVersion());
      localVersion.setFullString(defaultArtifactVersion.toString());
    }
 else {
      LOGGER.warn(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new VersionCheckException(e);
  }
}",0.8979890310786106
160448,"private void writeObject(IdEObject object) throws IOException {
  if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
    print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
    print(""String_Node_Str"");
    print(""String_Node_Str"");
  }
 else {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
    print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
    print(""String_Node_Str"");
    for (    EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null | includeHidden)) {
        if (eStructuralFeature instanceof EReference) {
          Object value=object.eGet(eStructuralFeature);
          if (value != null) {
            if (eStructuralFeature.isMany()) {
              List<?> list=(List<?>)value;
              if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                print(""String_Node_Str"");
                int wrapped=0;
                int referred=0;
                for (                Object o : list) {
                  if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                    wrapped++;
                  }
 else {
                    referred++;
                  }
                }
                if (wrapped == 0 && referred != 0) {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
 else                 if (wrapped != 0 && referred == 0) {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
 else                 if (wrapped == 0 && referred == 0) {
                }
 else {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
                boolean f=true;
                for (                Object o : list) {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  IdEObject ref=(IdEObject)o;
                  EClass eClass=((IdEObject)o).eClass();
                  if (ref.getOid() < 0 || eClass.getEAnnotation(""String_Node_Str"") != null || eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
                    write(ref);
                  }
 else {
                    if (wrapped != 0 && referred != 0) {
                      print(""String_Node_Str"");
                      print(""String_Node_Str"");
                      print(""String_Node_Str"" + ref.getOid());
                      print(""String_Node_Str"");
                    }
 else {
                      print(""String_Node_Str"" + ref.getOid());
                    }
                  }
                }
                print(""String_Node_Str"");
              }
            }
 else {
              print(""String_Node_Str"");
              IdEObject ref=(IdEObject)value;
              if (ref instanceof IfcGloballyUniqueId) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                writePrimitive(eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
              }
 else               if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                write(ref);
              }
 else               if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                writeEmbedded(ref);
              }
 else {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
              }
            }
          }
        }
 else {
          Object value=object.eGet(eStructuralFeature);
          if (value != null) {
            if (eStructuralFeature.isMany()) {
              List<?> list=(List<?>)value;
              if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                print(""String_Node_Str"");
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                boolean f=true;
                for (                Object o : list) {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  writePrimitive(eStructuralFeature,o);
                }
                print(""String_Node_Str"");
              }
            }
 else {
              print(""String_Node_Str"");
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              writePrimitive(eStructuralFeature,value);
            }
          }
        }
      }
    }
    print(""String_Node_Str"");
  }
}","private void writeObject(IdEObject object) throws IOException {
  if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
    print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
    print(""String_Node_Str"");
    print(""String_Node_Str"");
  }
 else {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
    print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
    print(""String_Node_Str"");
    for (    EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null || includeHidden)) {
        if (eStructuralFeature instanceof EReference) {
          Object value=object.eGet(eStructuralFeature);
          if (value != null) {
            if (eStructuralFeature.isMany()) {
              List<?> list=(List<?>)value;
              if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                print(""String_Node_Str"");
                int wrapped=0;
                int referred=0;
                for (                Object o : list) {
                  if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                    wrapped++;
                  }
 else {
                    referred++;
                  }
                }
                if (wrapped == 0 && referred != 0) {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
 else                 if (wrapped != 0 && referred == 0) {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
 else                 if (wrapped == 0 && referred == 0) {
                }
 else {
                  print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                }
                boolean f=true;
                for (                Object o : list) {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  IdEObject ref=(IdEObject)o;
                  EClass eClass=((IdEObject)o).eClass();
                  if (ref.getOid() < 0 || eClass.getEAnnotation(""String_Node_Str"") != null || eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
                    write(ref);
                  }
 else {
                    if (wrapped != 0 && referred != 0) {
                      print(""String_Node_Str"");
                      print(""String_Node_Str"");
                      print(""String_Node_Str"" + ref.getOid());
                      print(""String_Node_Str"");
                    }
 else {
                      print(""String_Node_Str"" + ref.getOid());
                    }
                  }
                }
                print(""String_Node_Str"");
              }
            }
 else {
              print(""String_Node_Str"");
              IdEObject ref=(IdEObject)value;
              if (ref instanceof IfcGloballyUniqueId) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                writePrimitive(eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
              }
 else               if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                write(ref);
              }
 else               if (eStructuralFeature.getEAnnotation(""String_Node_Str"") != null) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                writeEmbedded(ref);
              }
 else {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
              }
            }
          }
        }
 else {
          Object value=object.eGet(eStructuralFeature);
          if (value != null) {
            if (eStructuralFeature.isMany()) {
              List<?> list=(List<?>)value;
              if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                print(""String_Node_Str"");
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                boolean f=true;
                for (                Object o : list) {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  writePrimitive(eStructuralFeature,o);
                }
                print(""String_Node_Str"");
              }
            }
 else {
              print(""String_Node_Str"");
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              writePrimitive(eStructuralFeature,value);
            }
          }
        }
      }
    }
    print(""String_Node_Str"");
  }
}",0.9999026763990267
160449,"private void writeObject(HashMapVirtualObject object) throws IOException {
  print(""String_Node_Str"");
  print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
  print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
  print(""String_Node_Str"");
  for (  EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
    if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null | includeHidden)) {
      if (eStructuralFeature instanceof EReference) {
        Object value=object.eGet(eStructuralFeature);
        if (value != null) {
          if (eStructuralFeature.isMany()) {
            List<?> list=(List<?>)value;
            if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
              print(""String_Node_Str"");
              int wrapped=0;
              int referred=0;
              for (              Object o : list) {
                if (o instanceof Long) {
                  referred++;
                }
 else                 if (o instanceof HashMapWrappedVirtualObject) {
                  wrapped++;
                }
              }
              if (wrapped == 0 && referred != 0) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
 else               if (wrapped != 0 && referred == 0) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
 else               if (wrapped == 0 && referred == 0) {
              }
 else {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
              boolean f=true;
              for (              Object o : list) {
                if (o == null) {
                  LOGGER.info(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str""+ object.getOid()+ ""String_Node_Str""+ eStructuralFeature.getName());
                }
 else {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  if (o instanceof Long) {
                    long ref=(Long)o;
                    if (wrapped != 0 && referred != 0) {
                      print(""String_Node_Str"");
                      print(""String_Node_Str"");
                      print(""String_Node_Str"" + ref);
                      print(""String_Node_Str"");
                    }
 else {
                      print(""String_Node_Str"" + ref);
                    }
                  }
 else                   if (o instanceof HashMapWrappedVirtualObject) {
                    write((HashMapWrappedVirtualObject)o);
                  }
 else {
                    LOGGER.info(""String_Node_Str"" + o);
                  }
                }
              }
              print(""String_Node_Str"");
            }
          }
 else {
            print(""String_Node_Str"");
            if (value instanceof Long) {
              long ref=(Long)value;
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref);
            }
 else             if (value instanceof HashMapWrappedVirtualObject) {
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)value;
              write(hashMapWrappedVirtualObject);
            }
 else {
            }
          }
        }
      }
 else {
        Object value=object.eGet(eStructuralFeature);
        if (value != null) {
          if (eStructuralFeature.isMany()) {
            List<?> list=(List<?>)value;
            if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
              print(""String_Node_Str"");
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              boolean f=true;
              for (              Object o : list) {
                if (!f) {
                  print(""String_Node_Str"");
                }
 else {
                  f=false;
                }
                writePrimitive(eStructuralFeature,o);
              }
              print(""String_Node_Str"");
            }
          }
 else {
            print(""String_Node_Str"");
            print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
            writePrimitive(eStructuralFeature,value);
          }
        }
      }
    }
  }
  print(""String_Node_Str"");
}","private void writeObject(HashMapVirtualObject object) throws IOException {
  print(""String_Node_Str"");
  print(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
  print(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
  print(""String_Node_Str"");
  for (  EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
    if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null || includeHidden)) {
      if (eStructuralFeature instanceof EReference) {
        Object value=object.eGet(eStructuralFeature);
        if (value != null) {
          if (eStructuralFeature.isMany()) {
            List<?> list=(List<?>)value;
            if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
              print(""String_Node_Str"");
              int wrapped=0;
              int referred=0;
              for (              Object o : list) {
                if (o instanceof Long) {
                  referred++;
                }
 else                 if (o instanceof HashMapWrappedVirtualObject) {
                  wrapped++;
                }
              }
              if (wrapped == 0 && referred != 0) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
 else               if (wrapped != 0 && referred == 0) {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
 else               if (wrapped == 0 && referred == 0) {
              }
 else {
                print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              }
              boolean f=true;
              for (              Object o : list) {
                if (o == null) {
                  LOGGER.info(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str""+ object.getOid()+ ""String_Node_Str""+ eStructuralFeature.getName());
                }
 else {
                  if (!f) {
                    print(""String_Node_Str"");
                  }
 else {
                    f=false;
                  }
                  if (o instanceof Long) {
                    long ref=(Long)o;
                    if (wrapped != 0 && referred != 0) {
                      print(""String_Node_Str"");
                      print(""String_Node_Str"");
                      print(""String_Node_Str"" + ref);
                      print(""String_Node_Str"");
                    }
 else {
                      print(""String_Node_Str"" + ref);
                    }
                  }
 else                   if (o instanceof HashMapWrappedVirtualObject) {
                    write((HashMapWrappedVirtualObject)o);
                  }
 else {
                    LOGGER.info(""String_Node_Str"" + o);
                  }
                }
              }
              print(""String_Node_Str"");
            }
          }
 else {
            print(""String_Node_Str"");
            if (value instanceof Long) {
              long ref=(Long)value;
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref);
            }
 else             if (value instanceof HashMapWrappedVirtualObject) {
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              HashMapWrappedVirtualObject hashMapWrappedVirtualObject=(HashMapWrappedVirtualObject)value;
              write(hashMapWrappedVirtualObject);
            }
 else {
            }
          }
        }
      }
 else {
        Object value=object.eGet(eStructuralFeature);
        if (value != null) {
          if (eStructuralFeature.isMany()) {
            List<?> list=(List<?>)value;
            if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
              print(""String_Node_Str"");
              print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
              boolean f=true;
              for (              Object o : list) {
                if (!f) {
                  print(""String_Node_Str"");
                }
 else {
                  f=false;
                }
                writePrimitive(eStructuralFeature,o);
              }
              print(""String_Node_Str"");
            }
          }
 else {
            print(""String_Node_Str"");
            print(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
            writePrimitive(eStructuralFeature,value);
          }
        }
      }
    }
  }
  print(""String_Node_Str"");
}",0.9998900978129464
160450,void unregisterNewRevisionHandler(ServiceDescriptor serviceDescriptor);,"void unregisterNewRevisionHandler(long uoid,ServiceDescriptor serviceDescriptor);",0.9342105263157896
160451,"protected void unregisterNewRevisionHandler(ServiceDescriptor serviceDescriptor){
  pluginManager.unregisterNewRevisionHandler(serviceDescriptor);
}","protected void unregisterNewRevisionHandler(long uoid,ServiceDescriptor serviceDescriptor){
  pluginManager.unregisterNewRevisionHandler(uoid,serviceDescriptor);
}",0.9517684887459807
160452,void unregisterInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor);,"void unregisterInternalNewRevisionHandler(long uoid,ServiceDescriptor serviceDescriptor);",0.9404761904761904
160453,"protected void processPossibleIncludes(EClass previousType,CanInclude canInclude) throws QueryException, BimserverDatabaseException {
  if (currentObject != null) {
    if (currentObject.eClass().getName().equals(""String_Node_Str""))     if (canInclude.hasIncludes()) {
      for (      Include include : canInclude.getIncludes()) {
        processPossibleInclude(canInclude,include);
      }
    }
 else     if (canInclude.isIncludeAllFields()) {
      for (      EReference eReference : currentObject.eClass().getEAllReferences()) {
        Include include=new Include(reusable.getPackageMetaData());
        include.addType(currentObject.eClass(),false);
        include.addField(eReference.getName());
        processPossibleInclude(canInclude,include);
      }
    }
    if (canInclude instanceof Include) {
      processPossibleInclude(null,(Include)canInclude);
    }
  }
}","protected void processPossibleIncludes(EClass previousType,CanInclude canInclude) throws QueryException, BimserverDatabaseException {
  if (currentObject != null) {
    if (canInclude.hasIncludes()) {
      for (      Include include : canInclude.getIncludes()) {
        processPossibleInclude(canInclude,include);
      }
    }
 else     if (canInclude.isIncludeAllFields()) {
      for (      EReference eReference : currentObject.eClass().getEAllReferences()) {
        Include include=new Include(reusable.getPackageMetaData());
        include.addType(currentObject.eClass(),false);
        include.addField(eReference.getName());
        processPossibleInclude(canInclude,include);
      }
    }
    if (canInclude instanceof Include) {
      processPossibleInclude(null,(Include)canInclude);
    }
  }
}",0.3124260355029585
160454,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Reference reAttach(IdEObject mainObject){
  AbstractEList list=(AbstractEList)getIdEObject().eGet(geteReference());
  int index=list.indexOf(getReferredObject());
  list.set(index,mainObject);
  while (list.contains(getReferredObject())) {
    list.remove(getReferredObject());
  }
  return new MultiReference(getIdEObject(),mainObject,geteReference());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Reference reAttach(IdEObject mainObject){
  AbstractEList list=(AbstractEList)getIdEObject().eGet(geteReference());
  int index=list.indexOf(getReferredObject());
  if (index != -1) {
    if (!list.contains(mainObject)) {
      list.set(index,mainObject);
    }
  }
  while (list.contains(getReferredObject())) {
    list.remove(getReferredObject());
  }
  return new MultiReference(getIdEObject(),mainObject,geteReference());
}",0.9215896885069818
160455,"private void removeReplaceLinks(IdEObject mainObject,IdEObject objectToRemove){
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Set<Reference> referencesTo=referenceCounter.getReferencesTo(objectToRemove);
  if (referencesTo != null) {
    Iterator<Reference> referenceIterator=referencesTo.iterator();
    Set<Reference> newReferences=new HashSet<Reference>();
    while (referenceIterator.hasNext()) {
      Reference reference=referenceIterator.next();
      newReferences.add(reference.reAttach(mainObject));
      referenceIterator.remove();
    }
    for (    Reference reference : newReferences) {
      referenceCounter.addReference(reference);
    }
  }
  referenceCounter.remove(objectToRemove);
  model.remove(objectToRemove);
}","private void removeReplaceLinks(IdEObject mainObject,IdEObject objectToRemove){
  LOGGER.info(""String_Node_Str"" + mainObject.eClass().getName());
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Set<Reference> referencesTo=referenceCounter.getReferencesTo(objectToRemove);
  if (referencesTo != null) {
    Iterator<Reference> referenceIterator=referencesTo.iterator();
    Set<Reference> newReferences=new HashSet<Reference>();
    while (referenceIterator.hasNext()) {
      Reference reference=referenceIterator.next();
      newReferences.add(reference.reAttach(mainObject));
      referenceIterator.remove();
    }
    for (    Reference reference : newReferences) {
      referenceCounter.addReference(reference);
    }
  }
  referenceCounter.remove(objectToRemove);
  model.remove(objectToRemove);
}",0.8626045400238949
160456,"public LongCheckinAction(BimServer bimServer,String username,String userUsername,Authorization authorization,CheckinDatabaseAction checkinDatabaseAction){
  super(bimServer,username,userUsername,authorization);
  this.checkinDatabaseAction=checkinDatabaseAction;
  this.fileName=checkinDatabaseAction.getFileName();
  setProgressTopic(bimServer.getNotificationsManager().createProgressOnProjectTopic(authorization.getUoid(),checkinDatabaseAction.getPoid(),SProgressTopicType.UPLOAD,""String_Node_Str""));
  checkinDatabaseAction.addProgressListener(this);
}","public LongCheckinAction(Long topicId,BimServer bimServer,String username,String userUsername,Authorization authorization,CheckinDatabaseAction checkinDatabaseAction){
  super(bimServer,username,userUsername,authorization);
  this.checkinDatabaseAction=checkinDatabaseAction;
  this.fileName=checkinDatabaseAction.getFileName();
  if (topicId == -1) {
    setProgressTopic(bimServer.getNotificationsManager().createProgressOnProjectTopic(authorization.getUoid(),checkinDatabaseAction.getPoid(),SProgressTopicType.UPLOAD,""String_Node_Str""));
  }
 else {
    setProgressTopic(bimServer.getNotificationsManager().getProgressTopic(topicId));
  }
  checkinDatabaseAction.addProgressListener(this);
}",0.88871096877502
160457,"public void onClose(){
  bimServer.getEndPointManager().unregister(this);
}","public void onClose(){
  LOGGER.info(""String_Node_Str"" + this.getEndPointId());
  bimServer.getEndPointManager().unregister(this);
}",0.7246376811594203
160458,"@Override public Long checkinFromUrl(Long poid,String comment,Long deserializerOid,String fileName,String urlString,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final DatabaseSession session=getBimServer().getDatabase().createSession();
  String username=""String_Node_Str"";
  String userUsername=""String_Node_Str"";
  try {
    User user=(User)session.get(StorePackage.eINSTANCE.getUser(),getAuthorization().getUoid(),Query.getDefault());
    username=user.getName();
    userUsername=user.getUsername();
    Path homeDirIncoming=getBimServer().getHomeDir().resolve(""String_Node_Str"");
    if (!Files.isDirectory(homeDirIncoming)) {
      Files.createDirectory(homeDirIncoming);
    }
    Path userDirIncoming=homeDirIncoming.resolve(userUsername);
    if (!Files.exists(userDirIncoming)) {
      Files.createDirectory(userDirIncoming);
    }
    URL url=new URL(urlString);
    URLConnection openConnection=url.openConnection();
    InputStream input=openConnection.getInputStream();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    if (fileName == null) {
      if (urlString.contains(""String_Node_Str"")) {
        fileName=urlString.substring(urlString.lastIndexOf(""String_Node_Str"") + 1);
      }
 else {
        fileName=urlString;
      }
      fileName=URLDecoder.decode(fileName,Charsets.UTF_8.name());
    }
 else {
      fileName=dateFormat.format(new Date()) + ""String_Node_Str"" + fileName;
    }
    Path file=userDirIncoming.resolve(fileName);
    DeserializerPluginConfiguration deserializerPluginConfiguration=session.get(StorePackage.eINSTANCE.getDeserializerPluginConfiguration(),deserializerOid,Query.getDefault());
    if (deserializerPluginConfiguration == null) {
      throw new UserException(""String_Node_Str"" + deserializerOid + ""String_Node_Str"");
    }
    OutputStream outputStream=Files.newOutputStream(file);
    InputStream inputStream=new MultiplexingInputStream(input,outputStream);
    DeserializerPlugin deserializerPlugin=(DeserializerPlugin)getBimServer().getPluginManager().getPlugin(deserializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
    ObjectType settings=deserializerPluginConfiguration.getSettings();
    Deserializer deserializer=deserializerPlugin.createDeserializer(new PluginConfiguration(settings));
    deserializer.init(getBimServer().getDatabase().getMetaDataManager().getPackageMetaData(""String_Node_Str""));
    IfcModelInterface model=deserializer.read(inputStream,fileName,0,null);
    CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),model,comment,fileName,merge);
    LongCheckinAction longAction=new LongCheckinAction(getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
    getBimServer().getLongActionManager().start(longAction);
    if (sync) {
      longAction.waitForCompletion();
    }
    return longAction.getProgressTopic().getKey().getId();
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long checkinFromUrl(Long poid,String comment,Long deserializerOid,String fileName,String urlString,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final DatabaseSession session=getBimServer().getDatabase().createSession();
  String username=""String_Node_Str"";
  String userUsername=""String_Node_Str"";
  try {
    User user=(User)session.get(StorePackage.eINSTANCE.getUser(),getAuthorization().getUoid(),Query.getDefault());
    username=user.getName();
    userUsername=user.getUsername();
    Path homeDirIncoming=getBimServer().getHomeDir().resolve(""String_Node_Str"");
    if (!Files.isDirectory(homeDirIncoming)) {
      Files.createDirectory(homeDirIncoming);
    }
    Path userDirIncoming=homeDirIncoming.resolve(userUsername);
    if (!Files.exists(userDirIncoming)) {
      Files.createDirectory(userDirIncoming);
    }
    URL url=new URL(urlString);
    URLConnection openConnection=url.openConnection();
    InputStream input=openConnection.getInputStream();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    if (fileName == null) {
      if (urlString.contains(""String_Node_Str"")) {
        fileName=urlString.substring(urlString.lastIndexOf(""String_Node_Str"") + 1);
      }
 else {
        fileName=urlString;
      }
      fileName=URLDecoder.decode(fileName,Charsets.UTF_8.name());
    }
 else {
      fileName=dateFormat.format(new Date()) + ""String_Node_Str"" + fileName;
    }
    Path file=userDirIncoming.resolve(fileName);
    DeserializerPluginConfiguration deserializerPluginConfiguration=session.get(StorePackage.eINSTANCE.getDeserializerPluginConfiguration(),deserializerOid,Query.getDefault());
    if (deserializerPluginConfiguration == null) {
      throw new UserException(""String_Node_Str"" + deserializerOid + ""String_Node_Str"");
    }
    OutputStream outputStream=Files.newOutputStream(file);
    InputStream inputStream=new MultiplexingInputStream(input,outputStream);
    DeserializerPlugin deserializerPlugin=(DeserializerPlugin)getBimServer().getPluginManager().getPlugin(deserializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
    ObjectType settings=deserializerPluginConfiguration.getSettings();
    Deserializer deserializer=deserializerPlugin.createDeserializer(new PluginConfiguration(settings));
    deserializer.init(getBimServer().getDatabase().getMetaDataManager().getPackageMetaData(""String_Node_Str""));
    IfcModelInterface model=deserializer.read(inputStream,fileName,0,null);
    CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),model,comment,fileName,merge);
    LongCheckinAction longAction=new LongCheckinAction(-1L,getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
    getBimServer().getLongActionManager().start(longAction);
    if (sync) {
      longAction.waitForCompletion();
    }
    return longAction.getProgressTopic().getKey().getId();
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}",0.9993817619783616
160459,"@Override public Long checkinInitiated(Long topicId,final Long poid,final String comment,Long deserializerOid,Long fileSize,String fileName,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final DatabaseSession session=getBimServer().getDatabase().createSession();
  String username=""String_Node_Str"";
  String userUsername=""String_Node_Str"";
  try {
    User user=(User)session.get(StorePackage.eINSTANCE.getUser(),getAuthorization().getUoid(),Query.getDefault());
    Project project=session.get(poid,Query.getDefault());
    if (project == null) {
      throw new UserException(""String_Node_Str"" + poid);
    }
    username=user.getName();
    userUsername=user.getUsername();
    Path homeDirIncoming=getBimServer().getHomeDir().resolve(""String_Node_Str"");
    if (!Files.isDirectory(homeDirIncoming)) {
      Files.createDirectory(homeDirIncoming);
    }
    Path userDirIncoming=homeDirIncoming.resolve(userUsername);
    if (!Files.exists(userDirIncoming)) {
      Files.createDirectories(userDirIncoming);
    }
    if (fileName.contains(""String_Node_Str"")) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (fileName.contains(""String_Node_Str"")) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    String cacheFileName=dateFormat.format(new Date()) + ""String_Node_Str"" + fileName;
    Path file=userDirIncoming.resolve(cacheFileName);
    DeserializerPluginConfiguration deserializerPluginConfiguration=session.get(StorePackage.eINSTANCE.getDeserializerPluginConfiguration(),deserializerOid,Query.getDefault());
    if (deserializerPluginConfiguration == null) {
      throw new UserException(""String_Node_Str"" + deserializerOid + ""String_Node_Str"");
    }
 else {
      Plugin plugin=getBimServer().getPluginManager().getPlugin(deserializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
      if (plugin != null) {
        if (plugin instanceof DeserializerPlugin) {
          DeserializerPlugin deserializerPlugin=(DeserializerPlugin)plugin;
          ObjectType settings=deserializerPluginConfiguration.getSettings();
          Deserializer deserializer=deserializerPlugin.createDeserializer(new PluginConfiguration(settings));
          OutputStream outputStream=Files.newOutputStream(file);
          InputStream inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),outputStream);
          deserializer.init(getBimServer().getDatabase().getMetaDataManager().getPackageMetaData(project.getSchema()));
          IfcModelInterface model=deserializer.read(inputStream,fileName,fileSize,null);
          CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),model,comment,fileName,merge);
          LongCheckinAction longAction=new LongCheckinAction(getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
          getBimServer().getLongActionManager().start(longAction);
          if (sync) {
            longAction.waitForCompletion();
          }
          return longAction.getProgressTopic().getKey().getId();
        }
 else         if (plugin instanceof StreamingDeserializerPlugin) {
          StreamingDeserializerPlugin streaminDeserializerPlugin=(StreamingDeserializerPlugin)plugin;
          ObjectType settings=deserializerPluginConfiguration.getSettings();
          StreamingDeserializer streamingDeserializer=streaminDeserializerPlugin.createDeserializer(new PluginConfiguration(settings));
          streamingDeserializer.init(getBimServer().getMetaDataManager().getPackageMetaData(""String_Node_Str""));
          OutputStream outputStream=Files.newOutputStream(file);
          InputStream inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),outputStream);
          StreamingCheckinDatabaseAction checkinDatabaseAction=new StreamingCheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),comment,fileName,inputStream,streamingDeserializer);
          LongStreamingCheckinAction longAction=new LongStreamingCheckinAction(topicId,getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
          getBimServer().getLongActionManager().start(longAction);
          if (sync) {
            longAction.waitForCompletion();
          }
          return longAction.getProgressTopic().getKey().getId();
        }
 else {
          throw new UserException(""String_Node_Str"" + deserializerOid);
        }
      }
 else {
        throw new UserException(""String_Node_Str"" + deserializerOid);
      }
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}","@Override public Long checkinInitiated(Long topicId,final Long poid,final String comment,Long deserializerOid,Long fileSize,String fileName,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final DatabaseSession session=getBimServer().getDatabase().createSession();
  String username=""String_Node_Str"";
  String userUsername=""String_Node_Str"";
  try {
    User user=(User)session.get(StorePackage.eINSTANCE.getUser(),getAuthorization().getUoid(),Query.getDefault());
    Project project=session.get(poid,Query.getDefault());
    if (project == null) {
      throw new UserException(""String_Node_Str"" + poid);
    }
    username=user.getName();
    userUsername=user.getUsername();
    Path homeDirIncoming=getBimServer().getHomeDir().resolve(""String_Node_Str"");
    if (!Files.isDirectory(homeDirIncoming)) {
      Files.createDirectory(homeDirIncoming);
    }
    Path userDirIncoming=homeDirIncoming.resolve(userUsername);
    if (!Files.exists(userDirIncoming)) {
      Files.createDirectories(userDirIncoming);
    }
    if (fileName.contains(""String_Node_Str"")) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (fileName.contains(""String_Node_Str"")) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    String cacheFileName=dateFormat.format(new Date()) + ""String_Node_Str"" + fileName;
    Path file=userDirIncoming.resolve(cacheFileName);
    DeserializerPluginConfiguration deserializerPluginConfiguration=session.get(StorePackage.eINSTANCE.getDeserializerPluginConfiguration(),deserializerOid,Query.getDefault());
    if (deserializerPluginConfiguration == null) {
      throw new UserException(""String_Node_Str"" + deserializerOid + ""String_Node_Str"");
    }
 else {
      Plugin plugin=getBimServer().getPluginManager().getPlugin(deserializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
      if (plugin != null) {
        if (plugin instanceof DeserializerPlugin) {
          DeserializerPlugin deserializerPlugin=(DeserializerPlugin)plugin;
          ObjectType settings=deserializerPluginConfiguration.getSettings();
          Deserializer deserializer=deserializerPlugin.createDeserializer(new PluginConfiguration(settings));
          OutputStream outputStream=Files.newOutputStream(file);
          InputStream inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),outputStream);
          deserializer.init(getBimServer().getDatabase().getMetaDataManager().getPackageMetaData(project.getSchema()));
          IfcModelInterface model=deserializer.read(inputStream,fileName,fileSize,null);
          CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),model,comment,fileName,merge);
          LongCheckinAction longAction=new LongCheckinAction(topicId,getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
          getBimServer().getLongActionManager().start(longAction);
          if (sync) {
            longAction.waitForCompletion();
          }
          return longAction.getProgressTopic().getKey().getId();
        }
 else         if (plugin instanceof StreamingDeserializerPlugin) {
          StreamingDeserializerPlugin streaminDeserializerPlugin=(StreamingDeserializerPlugin)plugin;
          ObjectType settings=deserializerPluginConfiguration.getSettings();
          StreamingDeserializer streamingDeserializer=streaminDeserializerPlugin.createDeserializer(new PluginConfiguration(settings));
          streamingDeserializer.init(getBimServer().getMetaDataManager().getPackageMetaData(""String_Node_Str""));
          OutputStream outputStream=Files.newOutputStream(file);
          InputStream inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),outputStream);
          StreamingCheckinDatabaseAction checkinDatabaseAction=new StreamingCheckinDatabaseAction(getBimServer(),null,getInternalAccessMethod(),poid,getAuthorization(),comment,fileName,inputStream,streamingDeserializer);
          LongStreamingCheckinAction longAction=new LongStreamingCheckinAction(topicId,getBimServer(),username,userUsername,getAuthorization(),checkinDatabaseAction);
          getBimServer().getLongActionManager().start(longAction);
          if (sync) {
            longAction.waitForCompletion();
          }
          return longAction.getProgressTopic().getKey().getId();
        }
 else {
          throw new UserException(""String_Node_Str"" + deserializerOid);
        }
      }
 else {
        throw new UserException(""String_Node_Str"" + deserializerOid);
      }
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}",0.9991969484039348
160460,"private Object convert(EClassifier classifier,String value) throws DeserializeException, MetaDataException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject newObject=(IdEObject)getPackageMetaData().create((EClass)classifier);
        Class<?> instanceClass=newObject.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),readString(value));
          }
 else           if (instanceClass.getSimpleName().equals(""String_Node_Str"")) {
            Object tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
        }
        return newObject;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}","private Object convert(EClassifier classifier,String value) throws DeserializeException, MetaDataException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject newObject=(IdEObject)getPackageMetaData().create((EClass)classifier);
        Class<?> instanceClass=newObject.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),readString(value));
          }
 else           if (instanceClass.getSimpleName().equals(""String_Node_Str"")) {
            Object tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"").getInstance();
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"").getInstance();
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"").getInstance();
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
 else {
            throw new DeserializeException(instanceClass.getSimpleName() + ""String_Node_Str"");
          }
        }
        return newObject;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}",0.97430862379316
160461,"private void parseJsonQuery(Query query,ObjectNode objectNode) throws QueryException {
  QueryPart queryPart=new QueryPart(packageMetaData);
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode typeNode=objectNode.get(""String_Node_Str"");
    if (typeNode.isTextual()) {
      String type=typeNode.asText();
      addType(objectNode,queryPart,type);
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode typesNode=objectNode.get(""String_Node_Str"");
    if (typesNode instanceof ArrayNode) {
      ArrayNode types=(ArrayNode)typesNode;
      for (int i=0; i < types.size(); i++) {
        JsonNode typeNode=types.get(i);
        if (typeNode.isTextual()) {
          String type=typeNode.asText();
          addType(objectNode,queryPart,type);
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"") && objectNode.get(""String_Node_Str"").asBoolean()) {
    queryPart.setIncludeAllFields(true);
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode oidNode=objectNode.get(""String_Node_Str"");
    if (oidNode.isNumber()) {
      queryPart.addOid(oidNode.asInt());
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode oidsNode=objectNode.get(""String_Node_Str"");
    if (oidsNode instanceof ArrayNode) {
      ArrayNode oids=(ArrayNode)oidsNode;
      for (int i=0; i < oids.size(); i++) {
        JsonNode oidNode=oids.get(i);
        if (oidNode.isNumber()) {
          queryPart.addOid(oidNode.asInt());
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode guidNode=objectNode.get(""String_Node_Str"");
    if (guidNode.isTextual()) {
      queryPart.addGuid(guidNode.asText());
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode guidsNode=objectNode.get(""String_Node_Str"");
    if (guidsNode instanceof ArrayNode) {
      ArrayNode guids=(ArrayNode)guidsNode;
      for (int i=0; i < guids.size(); i++) {
        JsonNode guidNode=guids.get(i);
        if (guidNode.isTextual()) {
          queryPart.addGuid(guidNode.asText());
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode propertiesNode=objectNode.get(""String_Node_Str"");
    if (propertiesNode instanceof ObjectNode) {
      ObjectNode properties=(ObjectNode)objectNode.get(""String_Node_Str"");
      Iterator<Entry<String,JsonNode>> fields=properties.fields();
      while (fields.hasNext()) {
        Entry<String,JsonNode> entry=fields.next();
        JsonNode value=entry.getValue();
        if (value.isValueNode()) {
          queryPart.addProperty(entry.getKey(),value.asBoolean());
        }
 else {
          throw new QueryException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode boundingBoxNode=objectNode.get(""String_Node_Str"");
    if (boundingBoxNode instanceof ObjectNode) {
      ObjectNode boundingBox=(ObjectNode)boundingBoxNode;
      double x=checkFloat(boundingBox,""String_Node_Str"");
      double y=checkFloat(boundingBox,""String_Node_Str"");
      double z=checkFloat(boundingBox,""String_Node_Str"");
      double width=checkFloat(boundingBox,""String_Node_Str"");
      double height=checkFloat(boundingBox,""String_Node_Str"");
      double depth=checkFloat(boundingBox,""String_Node_Str"");
      queryPart.setInBoundingBox(new InBoundingBox(x,y,z,width,height,depth));
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode includeNode=objectNode.get(""String_Node_Str"");
    processSubInclude(query,queryPart,includeNode);
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode includesNode=objectNode.get(""String_Node_Str"");
    if (includesNode instanceof ArrayNode) {
      ArrayNode includes=(ArrayNode)includesNode;
      for (int i=0; i < includes.size(); i++) {
        JsonNode include=includes.get(i);
        processSubInclude(query,queryPart,include);
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode fieldsNode=objectNode.get(""String_Node_Str"");
  }
  Iterator<String> fieldNames=objectNode.fieldNames();
  while (fieldNames.hasNext()) {
    String fieldName=fieldNames.next();
    if (fieldName.equals(""String_Node_Str"") || fieldName.equals(""String_Node_Str"") || fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")) {
    }
 else {
      throw new QueryException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    }
  }
  query.addQueryPart(queryPart);
}","private void parseJsonQuery(Query query,ObjectNode objectNode) throws QueryException {
  QueryPart queryPart=new QueryPart(packageMetaData);
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode typeNode=objectNode.get(""String_Node_Str"");
    if (typeNode.isTextual()) {
      String type=typeNode.asText();
      addType(objectNode,queryPart,type);
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode typesNode=objectNode.get(""String_Node_Str"");
    if (typesNode instanceof ArrayNode) {
      ArrayNode types=(ArrayNode)typesNode;
      for (int i=0; i < types.size(); i++) {
        JsonNode typeNode=types.get(i);
        if (typeNode.isTextual()) {
          String type=typeNode.asText();
          addType(objectNode,queryPart,type);
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"") && objectNode.get(""String_Node_Str"").asBoolean()) {
    queryPart.setIncludeAllFields(true);
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode oidNode=objectNode.get(""String_Node_Str"");
    if (oidNode.isNumber()) {
      queryPart.addOid(oidNode.asLong());
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode oidsNode=objectNode.get(""String_Node_Str"");
    if (oidsNode instanceof ArrayNode) {
      ArrayNode oids=(ArrayNode)oidsNode;
      for (int i=0; i < oids.size(); i++) {
        JsonNode oidNode=oids.get(i);
        if (oidNode.isNumber()) {
          queryPart.addOid(oidNode.asLong());
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode guidNode=objectNode.get(""String_Node_Str"");
    if (guidNode.isTextual()) {
      queryPart.addGuid(guidNode.asText());
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode guidsNode=objectNode.get(""String_Node_Str"");
    if (guidsNode instanceof ArrayNode) {
      ArrayNode guids=(ArrayNode)guidsNode;
      for (int i=0; i < guids.size(); i++) {
        JsonNode guidNode=guids.get(i);
        if (guidNode.isTextual()) {
          queryPart.addGuid(guidNode.asText());
        }
 else {
          throw new QueryException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode propertiesNode=objectNode.get(""String_Node_Str"");
    if (propertiesNode instanceof ObjectNode) {
      ObjectNode properties=(ObjectNode)objectNode.get(""String_Node_Str"");
      Iterator<Entry<String,JsonNode>> fields=properties.fields();
      while (fields.hasNext()) {
        Entry<String,JsonNode> entry=fields.next();
        JsonNode value=entry.getValue();
        if (value.isValueNode()) {
          queryPart.addProperty(entry.getKey(),value.asBoolean());
        }
 else {
          throw new QueryException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
        }
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode boundingBoxNode=objectNode.get(""String_Node_Str"");
    if (boundingBoxNode instanceof ObjectNode) {
      ObjectNode boundingBox=(ObjectNode)boundingBoxNode;
      double x=checkFloat(boundingBox,""String_Node_Str"");
      double y=checkFloat(boundingBox,""String_Node_Str"");
      double z=checkFloat(boundingBox,""String_Node_Str"");
      double width=checkFloat(boundingBox,""String_Node_Str"");
      double height=checkFloat(boundingBox,""String_Node_Str"");
      double depth=checkFloat(boundingBox,""String_Node_Str"");
      queryPart.setInBoundingBox(new InBoundingBox(x,y,z,width,height,depth));
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode includeNode=objectNode.get(""String_Node_Str"");
    processSubInclude(query,queryPart,includeNode);
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode includesNode=objectNode.get(""String_Node_Str"");
    if (includesNode instanceof ArrayNode) {
      ArrayNode includes=(ArrayNode)includesNode;
      for (int i=0; i < includes.size(); i++) {
        JsonNode include=includes.get(i);
        processSubInclude(query,queryPart,include);
      }
    }
 else {
      throw new QueryException(""String_Node_Str"");
    }
  }
  if (objectNode.has(""String_Node_Str"")) {
    JsonNode fieldsNode=objectNode.get(""String_Node_Str"");
  }
  Iterator<String> fieldNames=objectNode.fieldNames();
  while (fieldNames.hasNext()) {
    String fieldName=fieldNames.next();
    if (fieldName.equals(""String_Node_Str"") || fieldName.equals(""String_Node_Str"") || fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")|| fieldName.equals(""String_Node_Str"")) {
    }
 else {
      throw new QueryException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    }
  }
  query.addQueryPart(queryPart);
}",0.9987430418387502
160462,"public FollowReferenceStackFrame(QueryObjectProvider queryObjectProvider,Long oid,PackageMetaData packageMetaData,Reusable reusable,QueryInterface query,EClass previousType,QueryPart queryPart,Include include){
  super(packageMetaData,reusable,queryObjectProvider,query,queryPart);
  this.oid=oid;
  this.query=query;
  this.previousType=previousType;
  this.queryPart=queryPart;
  this.include=include;
}","public FollowReferenceStackFrame(QueryObjectProvider queryObjectProvider,Long oid,PackageMetaData packageMetaData,Reusable reusable,QueryInterface query,EClass previousType,QueryPart queryPart,Include include){
  super(packageMetaData,reusable,queryObjectProvider,query,queryPart);
  this.oid=oid;
  this.query=query;
  this.previousType=previousType;
  this.include=include;
}",0.9462915601023018
160463,"public QueryException(String message){
  super(message);
}","public QueryException(Exception e){
  super(e);
}",0.8037383177570093
160464,"private void processReference(long refOid){
  if (outputFilterCids == null || outputFilterCids.contains((short)refOid)) {
    if (!getQueryObjectProvider().hasRead(refOid)) {
      getQueryObjectProvider().push(new FollowReferenceStackFrame(getQueryObjectProvider(),refOid,getPackageMetaData(),getReusable(),getQuery(),currentObject.eClass(),getQueryPart(),include));
    }
  }
}","private void processReference(long refOid){
  if (outputFilterCids == null || outputFilterCids.contains((short)refOid)) {
    getQueryObjectProvider().push(new FollowReferenceStackFrame(getQueryObjectProvider(),refOid,getPackageMetaData(),getReusable(),getQuery(),currentObject.eClass(),getQueryPart(),include));
  }
}",0.6743185078909613
160465,"private void initHomeDir() throws IOException {
  String[] filesToCheck=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (!Files.exists(config.getHomeDir())) {
    Files.createDirectories(config.getHomeDir());
  }
  if (Files.exists(config.getHomeDir()) && Files.isDirectory(config.getHomeDir())) {
    for (    String fileToCheck : filesToCheck) {
      Path sourceFile=config.getResourceFetcher().getFile(fileToCheck);
      if (sourceFile != null && Files.exists(sourceFile)) {
        Path destFile=config.getHomeDir().resolve(fileToCheck);
        if (!Files.exists(destFile)) {
          if (Files.isDirectory(sourceFile)) {
            Files.createDirectories(destFile);
            for (            Path f : PathUtils.list(sourceFile)) {
              if (Files.isDirectory(f)) {
                Path destDir2=destFile.resolve(f.getFileName().toString());
                for (                Path x : PathUtils.list(f)) {
                  FileUtils.copyFile(x.toFile(),destDir2.resolve(x.getFileName().toString()).toFile());
                }
              }
 else               if (Files.isDirectory(f)) {
                FileUtils.copyFile(f.toFile(),destFile.resolve(f.getFileName().toString()).toFile());
              }
            }
          }
 else {
            FileUtils.copyFile(sourceFile.toFile(),destFile.toFile());
          }
        }
      }
    }
  }
}","private void initHomeDir() throws IOException {
  String[] filesToCheck=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (!Files.exists(config.getHomeDir())) {
    Files.createDirectories(config.getHomeDir());
  }
  if (Files.exists(config.getHomeDir()) && Files.isDirectory(config.getHomeDir())) {
    for (    String fileToCheck : filesToCheck) {
      Path sourceFile=config.getResourceFetcher().getFile(fileToCheck);
      if (sourceFile != null && Files.exists(sourceFile)) {
        Path destFile=config.getHomeDir().resolve(fileToCheck);
        if (!Files.exists(destFile)) {
          if (Files.isDirectory(sourceFile)) {
            Files.createDirectories(destFile);
            for (            Path f : PathUtils.list(sourceFile)) {
              if (Files.isDirectory(f)) {
                Path destDir2=destFile.resolve(f.getFileName().toString());
                for (                Path x : PathUtils.list(f)) {
                  FileUtils.copyFile(x.toFile(),destDir2.resolve(x.getFileName().toString()).toFile());
                }
              }
 else {
                FileUtils.copyFile(f.toFile(),destFile.resolve(f.getFileName().toString()).toFile());
              }
            }
          }
 else {
            FileUtils.copyFile(sourceFile.toFile(),destFile.toFile());
          }
        }
      }
    }
  }
}",0.9857549857549858
160466,"private Object convert(EClassifier classifier,String value) throws DeserializeException, MetaDataException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject newObject=(IdEObject)getPackageMetaData().create((EClass)classifier);
        Class<?> instanceClass=newObject.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),readString(value));
          }
 else           if (instanceClass.getName().equals(""String_Node_Str"")) {
            Object tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
        }
        return newObject;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}","private Object convert(EClassifier classifier,String value) throws DeserializeException, MetaDataException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject newObject=(IdEObject)getPackageMetaData().create((EClass)classifier);
        Class<?> instanceClass=newObject.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(lineNumber,value + ""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),readString(value));
          }
 else           if (instanceClass.getSimpleName().equals(""String_Node_Str"")) {
            Object tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=getPackageMetaData().getEEnumLiteral(""String_Node_Str"",""String_Node_Str"");
            }
            newObject.eSet(newObject.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
        }
        return newObject;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}",0.9989912575655684
160467,"public DiskCacheOutputStream(DiskCacheManager diskCacheManager,Path file,DownloadParameters downloadParameters) throws FileNotFoundException {
  super(file.resolve(""String_Node_Str""));
  this.tempFile=file.resolve(""String_Node_Str"");
  this.diskCacheManager=diskCacheManager;
  this.file=file;
  this.downloadParameters=downloadParameters;
}","public DiskCacheOutputStream(DiskCacheManager diskCacheManager,Path file,DownloadParameters downloadParameters) throws FileNotFoundException {
  super(file.getParent().resolve(file.getFileName().toString() + ""String_Node_Str""));
  this.tempFile=file.getParent().resolve(file.getFileName().toString() + ""String_Node_Str"");
  this.diskCacheManager=diskCacheManager;
  this.file=file;
  this.downloadParameters=downloadParameters;
}",0.8857142857142857
160468,"private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  String oldThreadName=Thread.currentThread().getName();
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  try {
    Recording recording=bimServer.getMetricsRegistry().startRecording(sService,method);
    Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
    recording.finish();
    if (writer != null) {
      if (result == null) {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        writer.beginObject();
        writer.endObject();
        writer.endObject();
      }
 else {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        converter.toJson(result,writer);
        writer.endObject();
      }
    }
    long e=System.nanoTime();
    LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setName(oldThreadName);
  }
}","private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
        throw new UserException(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  String oldThreadName=Thread.currentThread().getName();
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  try {
    Recording recording=bimServer.getMetricsRegistry().startRecording(sService,method);
    Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
    recording.finish();
    if (writer != null) {
      if (result == null) {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        writer.beginObject();
        writer.endObject();
        writer.endObject();
      }
 else {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        converter.toJson(result,writer);
        writer.endObject();
      }
    }
    long e=System.nanoTime();
    LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setName(oldThreadName);
  }
}",0.980225988700565
160469,"@Override public Revision execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision revision=getRevisionByRoid(roid);
  if (revision == null) {
    throw new UserException(""String_Node_Str"");
  }
  Project project=revision.getProject();
  User user=getUserByUoid(authorization.getUoid());
  if (authorization.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
    return revision;
  }
  throw new UserException(""String_Node_Str"");
}","@Override public Revision execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision revision=getRevisionByRoid(roid);
  if (revision == null) {
    throw new UserException(""String_Node_Str"");
  }
  Project project=revision.getProject();
  User user=getUserByUoid(authorization.getUoid());
  if (authorization.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
    return revision;
  }
  throw new UserException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
}",0.9608610567514676
160470,"@Override public void process() throws BimserverDatabaseException, UserException, ServerException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    Project project=session.get(StorePackage.eINSTANCE.getProject(),poid,Query.getDefault());
    if (project == null) {
      LOGGER.error(""String_Node_Str"" + poid + ""String_Node_Str"");
      return;
    }
    Revision revision=session.get(StorePackage.eINSTANCE.getRevision(),roid,Query.getDefault());
    if (project.isSendEmailOnNewRevision() && sendEmail) {
      sendEmail(session,project,revision);
    }
    for (    Service service : project.getServices()) {
      if (soid == -1 || service.getOid() == soid) {
        triggerNewRevision(session,getBimServer().getNotificationsManager(),getBimServer(),getBimServer().getNotificationsManager().getSiteAddress(),project,roid,Trigger.NEW_REVISION,service);
      }
    }
    if (soid == -1) {
      NewRevisionTopic newRevisionTopic=getBimServer().getNotificationsManager().getNewRevisionTopic();
      if (newRevisionTopic != null) {
        newRevisionTopic.process(session,poid,roid,this);
      }
      NewRevisionOnSpecificProjectTopic newRevisionOnSpecificProjectTopic=getBimServer().getNotificationsManager().getNewRevisionOnSpecificProjectTopic(new NewRevisionOnSpecificProjectTopicKey(poid));
      if (newRevisionOnSpecificProjectTopic != null) {
        newRevisionOnSpecificProjectTopic.process(session,poid,roid,this);
      }
    }
  }
  finally {
    session.close();
  }
}","@Override public void process() throws BimserverDatabaseException, UserException, ServerException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    Project project=session.get(StorePackage.eINSTANCE.getProject(),poid,Query.getDefault());
    if (project == null) {
      LOGGER.error(""String_Node_Str"" + poid + ""String_Node_Str"");
      return;
    }
    Revision revision=session.get(StorePackage.eINSTANCE.getRevision(),roid,Query.getDefault());
    if (revision == null) {
      LOGGER.error(""String_Node_Str"" + roid + ""String_Node_Str"");
      return;
    }
    if (project.isSendEmailOnNewRevision() && sendEmail) {
      sendEmail(session,project,revision);
    }
    for (    Service service : project.getServices()) {
      if (soid == -1 || service.getOid() == soid) {
        triggerNewRevision(session,getBimServer().getNotificationsManager(),getBimServer(),getBimServer().getNotificationsManager().getSiteAddress(),project,roid,Trigger.NEW_REVISION,service);
      }
    }
    if (soid == -1) {
      NewRevisionTopic newRevisionTopic=getBimServer().getNotificationsManager().getNewRevisionTopic();
      if (newRevisionTopic != null) {
        newRevisionTopic.process(session,poid,roid,this);
      }
      NewRevisionOnSpecificProjectTopic newRevisionOnSpecificProjectTopic=getBimServer().getNotificationsManager().getNewRevisionOnSpecificProjectTopic(new NewRevisionOnSpecificProjectTopicKey(poid));
      if (newRevisionOnSpecificProjectTopic != null) {
        newRevisionOnSpecificProjectTopic.process(session,poid,roid,this);
      }
    }
  }
  finally {
    session.close();
  }
}",0.9639468690702088
160471,"@Override public void registerProgressHandler(Long topicId,Long endPointId) throws UserException {
  EndPoint endPoint=getEndPoint(endPointId);
  if (endPoint == null) {
    throw new UserException(""String_Node_Str"" + endPointId + ""String_Node_Str"");
  }
  ProgressTopic progressTopic=getBimServer().getNotificationsManager().getProgressTopic(topicId);
  if (progressTopic == null) {
    throw new UserException(""String_Node_Str"" + topicId + ""String_Node_Str"");
  }
  try {
    progressTopic.register(endPoint);
    LongActionState lastProgress=progressTopic.getLastProgress();
    if (lastProgress != null && lastProgress.getState() == ActionState.FINISHED) {
      LoggerFactory.getLogger(Bimsie1NotificationRegistryInterface.class).debug(""String_Node_Str"" + progressTopic.getKey().getId());
    }
 else {
      LoggerFactory.getLogger(Bimsie1NotificationRegistryInterface.class).debug(""String_Node_Str"" + progressTopic.getKey().getId());
    }
  }
 catch (  TopicRegisterException e) {
    throw new UserException(e);
  }
}","@Override public void registerProgressHandler(Long topicId,Long endPointId) throws UserException {
  if (endPointId == null) {
    throw new UserException(""String_Node_Str"");
  }
  EndPoint endPoint=getEndPoint(endPointId);
  if (endPoint == null) {
    throw new UserException(""String_Node_Str"" + endPointId + ""String_Node_Str"");
  }
  ProgressTopic progressTopic=getBimServer().getNotificationsManager().getProgressTopic(topicId);
  if (progressTopic == null) {
    throw new UserException(""String_Node_Str"" + topicId + ""String_Node_Str"");
  }
  try {
    progressTopic.register(endPoint);
    LongActionState lastProgress=progressTopic.getLastProgress();
    if (lastProgress != null && lastProgress.getState() == ActionState.FINISHED) {
      LoggerFactory.getLogger(Bimsie1NotificationRegistryInterface.class).debug(""String_Node_Str"" + progressTopic.getKey().getId());
    }
 else {
      LoggerFactory.getLogger(Bimsie1NotificationRegistryInterface.class).debug(""String_Node_Str"" + progressTopic.getKey().getId());
    }
  }
 catch (  TopicRegisterException e) {
    throw new UserException(e);
  }
}",0.9624765478424016
160472,"@Override public void registerChangeProgressOnProject(Long endPointId,Long poid) throws ServerException, UserException {
  ChangeProgressTopicOnProjectTopic changeProgressOnProjectTopic=getBimServer().getNotificationsManager().getChangeProgressOnProjectTopic(poid);
  EndPoint endPoint=getEndPoint(endPointId);
  try {
    changeProgressOnProjectTopic.register(endPoint);
  }
 catch (  TopicRegisterException e) {
    handleException(e);
  }
}","@Override public void registerChangeProgressOnProject(Long endPointId,Long poid) throws ServerException, UserException {
  if (endPointId == null) {
    throw new UserException(""String_Node_Str"");
  }
  ChangeProgressTopicOnProjectTopic changeProgressOnProjectTopic=getBimServer().getNotificationsManager().getChangeProgressOnProjectTopic(poid);
  EndPoint endPoint=getEndPoint(endPointId);
  try {
    changeProgressOnProjectTopic.register(endPoint);
  }
 catch (  TopicRegisterException e) {
    handleException(e);
  }
}",0.917184265010352
160473,"public SExtendedDataSchema getExtendedDataSchemaByNamespace(String nameSpace) throws UserException, ServerException {
  requireAuthenticationAndRunningServer();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    return getBimServer().getSConverter().convertToSObject(session.executeAndCommitAction(new GetExtendedDataSchemaByNamespaceDatabaseAction(session,getInternalAccessMethod(),nameSpace)));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}","public SExtendedDataSchema getExtendedDataSchemaByNamespace(String nameSpace) throws UserException, ServerException {
  if (nameSpace == null) {
    throw new UserException(""String_Node_Str"");
  }
  requireAuthenticationAndRunningServer();
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    return getBimServer().getSConverter().convertToSObject(session.executeAndCommitAction(new GetExtendedDataSchemaByNamespaceDatabaseAction(session,getInternalAccessMethod(),nameSpace)));
  }
 catch (  Exception e) {
    return handleException(e);
  }
 finally {
    session.close();
  }
}",0.9307624890446976
160474,"@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),model.getPackageMetaData().getSchema().getEPackageName());
  }
 catch (  RenderEngineException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),null,model.getPackageMetaData(),true);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=packageMetaData.create(GeometryInfo.class);
                model.add(oidCounter.incrementAndGet(),geometryInfo);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,oidCounter,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,oidCounter,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              GeometryData geometryData=null;
              if (store) {
                geometryData=packageMetaData.create(GeometryData.class);
                model.add(oidCounter.incrementAndGet(),geometryData);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              float[] tranformationMatrix=new float[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    try {
      renderEngine.close();
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),model.getPackageMetaData().getSchema().getEPackageName());
  }
 catch (  RenderEngineException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    renderEngine.init();
    ifcSerializer.init(targetModel,null,bimServer.getPluginManager(),null,model.getPackageMetaData(),true);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File((eClass == null ? ""String_Node_Str"" : eClass.getName()) + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(renderEngineSettings);
      renderEngineModel.setFilter(renderEngineFilter);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=null;
      if (eClass == null) {
        allWithSubTypes=targetModel.getAllWithSubTypes(packageMetaData.getEClass(""String_Node_Str""));
      }
 else {
        allWithSubTypes=targetModel.getAll(eClass);
      }
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            boolean translate=true;
            if (geometry == null || geometry.getIndices().length == 0) {
              renderEngineModel.setFilter(renderEngineFilterTransformed);
              geometry=renderEngineInstance.generateGeometry();
              if (geometry != null) {
                translate=false;
              }
              renderEngineModel.setFilter(renderEngineFilter);
            }
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=packageMetaData.create(GeometryInfo.class);
                model.add(databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryInfo()),geometryInfo);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(packageMetaData,model,oidCounter,Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(packageMetaData,model,oidCounter,Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              GeometryData geometryData=null;
              if (store) {
                geometryData=packageMetaData.create(GeometryData.class);
                model.add(databaseSession.newOid(GeometryPackage.eINSTANCE.getGeometryData()),geometryData);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              geometryInfo.setPrimitiveCount(geometry.getIndices().length / 3);
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              float[] tranformationMatrix=new float[16];
              if (translate && renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
              }
              geometryInfo.setData(geometryData);
              long length=(geometryData.getIndices() != null ? geometryData.getIndices().length : 0) + (geometryData.getVertices() != null ? geometryData.getVertices().length : 0) + (geometryData.getNormals() != null ? geometryData.getNormals().length : 0)+ (geometryData.getMaterials() != null ? geometryData.getMaterials().length : 0)+ (geometryData.getMaterialIndices() != null ? geometryData.getMaterialIndices().length : 0);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                  bytesSaved.addAndGet(length);
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              totalBytes.addAndGet(length);
              if (bigMap == null) {
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
 else {
                bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                }
              }
            }
          }
 catch (          EntityNotFoundException e) {
            LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          IfcModelInterfaceException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      in.close();
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    try {
      renderEngine.close();
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9775557861961598
160475,"public DatabaseSession(Database database,BimTransaction bimTransaction){
  this.database=database;
  this.bimTransaction=bimTransaction;
  this.stackTrace=Thread.currentThread().getStackTrace();
  if (DEVELOPER_DEBUG) {
    LOGGER.info(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
  }
}","public DatabaseSession(Database database,BimTransaction bimTransaction){
  this.database=database;
  this.bimTransaction=bimTransaction;
  if (DEVELOPER_DEBUG) {
    this.stackTrace=Thread.currentThread().getStackTrace();
    LOGGER.info(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
  }
  for (  EClass eClass : database.getClasses()) {
    startOids.put(eClass,getCounter(eClass));
  }
}",0.6867816091954023
160476,"public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimserverDatabaseException, UserException, ServerException {
  checkOpen();
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      if (objectsToCommit.size() > 0 || objectsToDelete.size() > 0) {
        commit(progressHandler);
      }
      return result;
    }
 catch (    BimserverConcurrentModificationDatabaseException e) {
      if (progressHandler != null) {
        progressHandler.retry(i + 1);
      }
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverLockConflictException e) {
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
      if (DEVELOPER_DEBUG) {
        LockConflictException lockException=e.getLockException();
        if (lockException instanceof TransactionTimeoutException) {
        }
 else         if (lockException instanceof LockTimeoutException) {
        }
        LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"",lockException);
        long[] ownerTxnIds=e.getLockException().getOwnerTxnIds();
        for (        long txnid : ownerTxnIds) {
          DatabaseSession databaseSession=database.getDatabaseSession(txnid);
          if (databaseSession != null) {
            LOGGER.info(""String_Node_Str"" + databaseSession);
            StackTraceElement[] stackTraceElements=databaseSession.getStackTrace();
            for (            StackTraceElement stackTraceElement : stackTraceElements) {
              LOGGER.info(""String_Node_Str"" + stackTraceElement);
            }
          }
        }
      }
    }
catch (    UncheckedBimserverLockConflictException e) {
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverDatabaseException e) {
      throw e;
    }
catch (    ServiceException e) {
      if (e instanceof UserException) {
        throw ((UserException)e);
      }
 else       if (e instanceof ServerException) {
        throw ((ServerException)e);
      }
 else {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimserverDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}","public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimserverDatabaseException, UserException, ServerException {
  checkOpen();
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      if (objectsToCommit.size() > 0 || objectsToDelete.size() > 0) {
        commit(progressHandler);
      }
      return result;
    }
 catch (    BimserverConcurrentModificationDatabaseException e) {
      if (progressHandler != null) {
        progressHandler.retry(i + 1);
      }
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
      if (DEVELOPER_DEBUG) {
        LockConflictException lockException=e.getLockException();
        if (lockException instanceof TransactionTimeoutException) {
        }
 else         if (lockException instanceof LockTimeoutException) {
        }
        LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"",lockException);
        long[] ownerTxnIds=e.getLockException().getOwnerTxnIds();
        for (        long txnid : ownerTxnIds) {
          DatabaseSession databaseSession=database.getDatabaseSession(txnid);
          if (databaseSession != null) {
            LOGGER.info(""String_Node_Str"" + databaseSession);
            StackTraceElement[] stackTraceElements=databaseSession.getStackTrace();
            for (            StackTraceElement stackTraceElement : stackTraceElements) {
              LOGGER.info(""String_Node_Str"" + stackTraceElement);
            }
          }
        }
      }
    }
catch (    UncheckedBimserverLockConflictException e) {
      LOGGER.info(""String_Node_Str"");
      bimTransaction.rollback();
      objectCache.clear();
      objectsToCommit.clear();
      bimTransaction=database.getKeyValueStore().startTransaction();
    }
catch (    BimserverDatabaseException e) {
      throw e;
    }
catch (    ServiceException e) {
      if (e instanceof UserException) {
        throw ((UserException)e);
      }
 else       if (e instanceof ServerException) {
        throw ((ServerException)e);
      }
 else {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimserverDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}",0.4794128177586824
160477,"public Long newOid(EClass eClass){
  return database.newOid(eClass);
}","public Long newOid(EClass eClass){
  long newOid=database.newOid(eClass);
  return newOid;
}",0.7901234567901234
160478,"public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(smtpProps,serverSettings.getSmtpPort());
  Session mailSession=Session.getDefaultInstance(props);
  Transport transport=null;
  if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
    transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    transport.connect(serverSettings.getSmtpServer(),null,null);
  }
 else   if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
    transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
    String username=serverSettings.getSmtpUsername();
    String password=serverSettings.getSmtpPassword();
    try {
      transport.connect(serverSettings.getSmtpServer(),username,password);
    }
 catch (    MessagingException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  Message message=new MimeMessage(mailSession);
  message.setSubject(subject);
  message.setRecipients(to,addressTo);
  message.setContent(body,contentType);
  message.setFrom(from);
  transport.sendMessage(message,addressTo);
}","public void send() throws MessagingException {
  Properties props=new Properties();
  ServerSettings serverSettings=bimServer.getServerSettingsCache().getServerSettings();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String smtpProps=serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS ? ""String_Node_Str"" : ""String_Node_Str"";
  props.put(smtpProps,serverSettings.getSmtpPort());
  Session mailSession=Session.getDefaultInstance(props);
  Transport transport=null;
  try {
    if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTP) {
      transport=new SMTPTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
      transport.connect(serverSettings.getSmtpServer(),null,null);
    }
 else     if (serverSettings.getSmtpProtocol() == SmtpProtocol.SMTPS) {
      transport=new SMTPSSLTransport(mailSession,new URLName(serverSettings.getSmtpServer()));
      String username=serverSettings.getSmtpUsername();
      String password=serverSettings.getSmtpPassword();
      try {
        transport.connect(serverSettings.getSmtpServer(),username,password);
      }
 catch (      MessagingException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    Message message=new MimeMessage(mailSession);
    message.setSubject(subject);
    message.setRecipients(to,addressTo);
    message.setContent(body,contentType);
    message.setFrom(from);
    transport.sendMessage(message,addressTo);
  }
 catch (  MessagingException e) {
    LOGGER.error(""String_Node_Str"");
  }
}",0.9551616266944736
160479,"private boolean processLine(String line) throws DeserializeException, MetaDataException {
switch (mode) {
case HEADER:
    if (line.length() > 0) {
      if (line.endsWith(""String_Node_Str"")) {
        processHeader(line);
      }
 else {
        return false;
      }
    }
  if (line.equals(""String_Node_Str"")) {
    mode=Mode.DATA;
  }
break;
case DATA:
if (line.equals(""String_Node_Str"")) {
mode=Mode.FOOTER;
}
 else {
if (line.length() > 0 && line.charAt(0) == '#') {
  while (line.endsWith(""String_Node_Str"")) {
    line=line.substring(0,line.lastIndexOf(""String_Node_Str"")).trim();
  }
  if (line.endsWith(""String_Node_Str"")) {
    processRecord(line);
  }
 else {
    return false;
  }
}
}
break;
case FOOTER:
if (line.equals(""String_Node_Str"")) {
mode=Mode.DONE;
}
break;
case DONE:
}
return true;
}","private boolean processLine(String line) throws DeserializeException, MetaDataException {
switch (mode) {
case HEADER:
    if (line.length() > 0) {
      if (line.endsWith(""String_Node_Str"")) {
        processHeader(line);
      }
 else {
        return false;
      }
    }
  if (line.equals(""String_Node_Str"")) {
    mode=Mode.DATA;
  }
break;
case DATA:
if (line.equals(""String_Node_Str"")) {
mode=Mode.FOOTER;
}
 else {
if (line.length() > 0 && line.charAt(0) == '#') {
  while (line.endsWith(""String_Node_Str"")) {
    line=line.substring(0,line.lastIndexOf(""String_Node_Str"")).trim();
  }
  if (line.endsWith(""String_Node_Str"")) {
    processRecord(line);
  }
 else {
    return false;
  }
}
}
break;
case FOOTER:
for (IdEObject idEObject : getModel().getValues()) {
if (idEObject.getOid() != -1) {
System.out.println(idEObject);
}
}
if (line.equals(""String_Node_Str"")) {
mode=Mode.DONE;
}
break;
case DONE:
}
return true;
}",0.9308755760368664
160480,"private void write(IdEObject object) throws SerializerException, IOException {
  if (object instanceof IfcRepresentation) {
    System.out.println();
  }
  EClass eClass=object.eClass();
  if (eClass.getEAnnotation(""String_Node_Str"") != null) {
    return;
  }
  print(DASH);
  int convertedKey=getExpressId(object);
  if (convertedKey == -1) {
    throw new SerializerException(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
  }
  print(String.valueOf(convertedKey));
  print(""String_Node_Str"");
  String upperCase=getPackageMetaData().getUpperCase(eClass);
  if (upperCase == null) {
    throw new SerializerException(""String_Node_Str"" + eClass.getName());
  }
  print(upperCase);
  print(OPEN_PAREN);
  boolean isFirst=true;
  EntityDefinition entityBN=getSchemaDefinition().getEntityBN(object.eClass().getName());
  for (  EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
    if (feature.getEAnnotation(""String_Node_Str"") == null && (entityBN != null && (!entityBN.isDerived(feature.getName()) || entityBN.isDerivedOverride(feature.getName())))) {
      EClassifier type=feature.getEType();
      if (type instanceof EEnum) {
        if (!isFirst) {
          print(COMMA);
        }
        writeEnum(object,feature);
        isFirst=false;
      }
 else       if (type instanceof EClass) {
        if (!getPackageMetaData().isInverse(feature)) {
          if (!isFirst) {
            print(COMMA);
          }
          writeEClass(object,feature);
          isFirst=false;
        }
      }
 else       if (type instanceof EDataType) {
        if (!isFirst) {
          print(COMMA);
        }
        writeEDataType(object,entityBN,feature);
        isFirst=false;
      }
    }
  }
  println(PAREN_CLOSE_SEMICOLON);
}","private void write(IdEObject object) throws SerializerException, IOException {
  EClass eClass=object.eClass();
  if (eClass.getEAnnotation(""String_Node_Str"") != null) {
    return;
  }
  print(DASH);
  int convertedKey=getExpressId(object);
  if (convertedKey == -1) {
    throw new SerializerException(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
  }
  print(String.valueOf(convertedKey));
  print(""String_Node_Str"");
  String upperCase=getPackageMetaData().getUpperCase(eClass);
  if (upperCase == null) {
    throw new SerializerException(""String_Node_Str"" + eClass.getName());
  }
  print(upperCase);
  print(OPEN_PAREN);
  boolean isFirst=true;
  EntityDefinition entityBN=getSchemaDefinition().getEntityBN(object.eClass().getName());
  for (  EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
    if (feature.getEAnnotation(""String_Node_Str"") == null && (entityBN != null && (!entityBN.isDerived(feature.getName()) || entityBN.isDerivedOverride(feature.getName())))) {
      EClassifier type=feature.getEType();
      if (type instanceof EEnum) {
        if (!isFirst) {
          print(COMMA);
        }
        writeEnum(object,feature);
        isFirst=false;
      }
 else       if (type instanceof EClass) {
        if (!getPackageMetaData().isInverse(feature)) {
          if (!isFirst) {
            print(COMMA);
          }
          writeEClass(object,feature);
          isFirst=false;
        }
      }
 else       if (type instanceof EDataType) {
        if (!isFirst) {
          print(COMMA);
        }
        writeEDataType(object,entityBN,feature);
        isFirst=false;
      }
    }
  }
  println(PAREN_CLOSE_SEMICOLON);
}",0.9782923299565848
160481,"public void generateGeometry(long uoid,final PluginManager pluginManager,final DatabaseSession databaseSession,IfcModelInterface model,final int pid,final int rid,final boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final SerializerPlugin ifcSerializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    final EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EClass productRepresentationClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
    Set<EClass> classes=new HashSet<>();
    for (    IfcProduct object : model.getAllWithSubTypes(IfcProduct.class)) {
      IfcProductRepresentation representation=object.getRepresentation();
      if (representation != null && representation.getRepresentations().size() > 0) {
        classes.add(object.eClass());
      }
    }
    if (classes.size() == 0) {
      return;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    classes.remove(Ifc2x3tc1Package.eINSTANCE.getIfcAnnotation());
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    LOGGER.debug(""String_Node_Str"" + maxSimultanousThreads + ""String_Node_Str"");
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(classes.size()));
    final Map<IdEObject,IdEObject> bigMap=new HashMap<IdEObject,IdEObject>();
    HideAllInversesObjectIDM idm=new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str"").getSchemaDefinition());
    for (    final EClass eClass : classes) {
      if (eClass.getName().equals(""String_Node_Str"")) {
        continue;
      }
      final BasicIfcModel targetModel=new BasicIfcModel(pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),null);
      ModelHelper modelHelper=new ModelHelper(targetModel);
      modelHelper.setObjectIDM(idm);
      IfcProject newProject=null;
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcProject.class)) {
        newProject=(IfcProject)modelHelper.copy(idEObject,false,skipRepresentation);
        bigMap.put(newProject,idEObject);
      }
      for (      IdEObject idEObject : model.getAll(eClass)) {
        IfcProduct ifcProduct=(IfcProduct)idEObject;
        IdEObject newObject=modelHelper.copy(idEObject,false,createObjectIdm(ifcProduct.eClass()));
        copyDecomposes(ifcProduct,modelHelper);
        bigMap.put(newObject,idEObject);
        if (eClass.getName().equals(""String_Node_Str"")) {
          IfcWallStandardCase ifcWallStandardCase=(IfcWallStandardCase)idEObject;
          for (          IfcRelVoidsElement ifcRelVoidsElement : ifcWallStandardCase.getHasOpenings()) {
            bigMap.put(modelHelper.copy(ifcRelVoidsElement,false),ifcRelVoidsElement);
            IfcFeatureElementSubtraction relatedOpeningElement=ifcRelVoidsElement.getRelatedOpeningElement();
            if (relatedOpeningElement != null) {
              bigMap.put(modelHelper.copy(relatedOpeningElement,false),relatedOpeningElement);
            }
          }
        }
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnit.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnitAssignment.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      executor.submit(new Runnable(){
        @Override public void run(){
          targetModel.generateMinimalExpressIds();
          Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
          RenderEngine renderEngine=null;
          try {
            renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
          }
 catch (          RenderEngineException e2) {
            e2.printStackTrace();
          }
          try {
            renderEngine.init();
            ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
            RenderEngineModel renderEngineModel=renderEngine.openModel(ifcSerializer.getInputStream());
            try {
              renderEngineModel.setSettings(settings);
              renderEngineModel.generateGeneralGeometry();
              List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
              for (              IdEObject ifcProduct : allWithSubTypes) {
                IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
                if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
                  try {
                    RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
                    RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
                    if (geometry != null && geometry.getNrIndices() > 0) {
                      GeometryInfo geometryInfo=null;
                      if (store) {
                        geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                      }
 else {
                        geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                      }
                      geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                      geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                      GeometryData geometryData=null;
                      if (store) {
                        geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                      }
 else {
                        geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                      }
                      geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                      geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                      geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                      geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                      if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                        boolean hasMaterial=false;
                        float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                        for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                          int c=geometry.getMaterialIndices()[i];
                          for (int j=0; j < 3; ++j) {
                            int k=geometry.getIndices()[i * 3 + j];
                            if (c > -1) {
                              hasMaterial=true;
                              for (int l=0; l < 4; ++l) {
                                vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                              }
                            }
                          }
                        }
                        if (hasMaterial) {
                          geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                        }
                      }
                      float[] tranformationMatrix=new float[16];
                      if (renderEngineInstance.getTransformationMatrix() != null) {
                        tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                        tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                      }
 else {
                        Matrix.setIdentityM(tranformationMatrix,0);
                      }
                      for (int i=0; i < geometry.getIndices().length; i++) {
                        processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                      }
                      geometryInfo.setData(geometryData);
                      setTransformationMatrix(geometryInfo,tranformationMatrix);
                      if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                        int hash=hash(geometryData);
                        if (hashes.containsKey(hash)) {
                          databaseSession.removeFromCommit(geometryData);
                          geometryInfo.setData(hashes.get(hash));
                        }
 else {
                          hashes.put(hash,geometryData);
                        }
                      }
                      bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                      ifcProduct.eSet(geometryFeature,geometryInfo);
                      if (store) {
                        databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                      }
                    }
                  }
 catch (                  BimserverDatabaseException|RenderEngineException e) {
                    if (!(ifcProduct instanceof IfcAnnotation)) {
                      LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
                    }
                  }
                }
              }
            }
  finally {
              renderEngineModel.close();
            }
          }
 catch (          SerializerException|RenderEngineException|IOException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            try {
              renderEngine.close();
            }
 catch (            RenderEngineException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}","public void generateGeometry(long uoid,final PluginManager pluginManager,final DatabaseSession databaseSession,IfcModelInterface model,final int pid,final int rid,final boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final SerializerPlugin ifcSerializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    final EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EClass productRepresentationClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
    Set<EClass> classes=new HashSet<>();
    for (    IfcProduct object : model.getAllWithSubTypes(IfcProduct.class)) {
      IfcProductRepresentation representation=object.getRepresentation();
      if (representation != null && representation.getRepresentations().size() > 0) {
        classes.add(object.eClass());
      }
    }
    if (classes.size() == 0) {
      return;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    classes.remove(Ifc2x3tc1Package.eINSTANCE.getIfcAnnotation());
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    LOGGER.debug(""String_Node_Str"" + maxSimultanousThreads + ""String_Node_Str"");
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(classes.size()));
    oidCounter=model.getHighestOid() + 1;
    final Map<IdEObject,IdEObject> bigMap=new HashMap<IdEObject,IdEObject>();
    HideAllInversesObjectIDM idm=new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str"").getSchemaDefinition());
    for (    final EClass eClass : classes) {
      if (eClass.getName().equals(""String_Node_Str"")) {
        continue;
      }
      final BasicIfcModel targetModel=new BasicIfcModel(pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),null);
      ModelHelper modelHelper=new ModelHelper(targetModel);
      modelHelper.setObjectIDM(idm);
      IfcProject newProject=null;
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcProject.class)) {
        newProject=(IfcProject)modelHelper.copy(idEObject,false,skipRepresentation);
        bigMap.put(newProject,idEObject);
      }
      for (      IdEObject idEObject : model.getAll(eClass)) {
        IfcProduct ifcProduct=(IfcProduct)idEObject;
        IdEObject newObject=modelHelper.copy(idEObject,false,createObjectIdm(ifcProduct.eClass()));
        copyDecomposes(ifcProduct,modelHelper);
        bigMap.put(newObject,idEObject);
        if (eClass.getName().equals(""String_Node_Str"")) {
          IfcWallStandardCase ifcWallStandardCase=(IfcWallStandardCase)idEObject;
          for (          IfcRelVoidsElement ifcRelVoidsElement : ifcWallStandardCase.getHasOpenings()) {
            bigMap.put(modelHelper.copy(ifcRelVoidsElement,false),ifcRelVoidsElement);
            IfcFeatureElementSubtraction relatedOpeningElement=ifcRelVoidsElement.getRelatedOpeningElement();
            if (relatedOpeningElement != null) {
              bigMap.put(modelHelper.copy(relatedOpeningElement,false),relatedOpeningElement);
            }
          }
        }
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnit.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnitAssignment.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      executor.submit(new Runnable(){
        @Override public void run(){
          targetModel.generateMinimalExpressIds();
          Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
          RenderEngine renderEngine=null;
          try {
            renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
          }
 catch (          RenderEngineException e2) {
            e2.printStackTrace();
          }
          try {
            renderEngine.init();
            ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
            RenderEngineModel renderEngineModel=renderEngine.openModel(ifcSerializer.getInputStream());
            try {
              renderEngineModel.setSettings(settings);
              renderEngineModel.generateGeneralGeometry();
              List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
              for (              IdEObject ifcProduct : allWithSubTypes) {
                IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
                if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
                  try {
                    RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
                    RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
                    if (geometry != null && geometry.getNrIndices() > 0) {
                      GeometryInfo geometryInfo=null;
                      if (store) {
                        geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                      }
 else {
                        geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                      }
                      geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                      geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                      GeometryData geometryData=null;
                      if (store) {
                        geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                      }
 else {
                        geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                      }
                      geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                      geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                      geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                      geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                      if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                        boolean hasMaterial=false;
                        float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                        for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                          int c=geometry.getMaterialIndices()[i];
                          for (int j=0; j < 3; ++j) {
                            int k=geometry.getIndices()[i * 3 + j];
                            if (c > -1) {
                              hasMaterial=true;
                              for (int l=0; l < 4; ++l) {
                                vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                              }
                            }
                          }
                        }
                        if (hasMaterial) {
                          geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                        }
                      }
                      float[] tranformationMatrix=new float[16];
                      if (renderEngineInstance.getTransformationMatrix() != null) {
                        tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                        tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                      }
 else {
                        Matrix.setIdentityM(tranformationMatrix,0);
                      }
                      for (int i=0; i < geometry.getIndices().length; i++) {
                        processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                      }
                      geometryInfo.setData(geometryData);
                      setTransformationMatrix(geometryInfo,tranformationMatrix);
                      if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                        int hash=hash(geometryData);
                        if (hashes.containsKey(hash)) {
                          databaseSession.removeFromCommit(geometryData);
                          geometryInfo.setData(hashes.get(hash));
                        }
 else {
                          hashes.put(hash,geometryData);
                        }
                      }
                      bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                      ifcProduct.eSet(geometryFeature,geometryInfo);
                      if (store) {
                        databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                      }
                    }
                  }
 catch (                  BimserverDatabaseException|RenderEngineException e) {
                    if (!(ifcProduct instanceof IfcAnnotation)) {
                      LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
                    }
                  }
                }
              }
            }
  finally {
              renderEngineModel.close();
            }
          }
 catch (          SerializerException|RenderEngineException|IOException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            try {
              renderEngine.close();
            }
 catch (            RenderEngineException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}",0.9982919886132574
160482,"public static void main(String[] args){
  generateIfc4();
}","public static void main(String[] args){
  generateIfc2x3tc1();
  generateIfc4();
}",0.8368794326241135
160483,"public <T extends IdEObject>Map<Long,T> query(IfcModelInterface model,Condition condition,Class<T> clazz,QueryInterface query) throws BimserverDatabaseException {
  Map<Long,T> map=new HashMap<Long,T>();
  Set<EClass> eClasses=new HashSet<EClass>();
  condition.getEClassRequirements(eClasses);
  TodoList todoList=new TodoList();
  for (  EClass eClass : eClasses) {
    getMap(eClass,model,query,todoList);
    for (    Long oid : model.keySet()) {
      IdEObject object=model.get(oid);
      if (clazz.isInstance(object)) {
        if (condition.matches(object)) {
          map.put(oid,clazz.cast(object));
        }
      }
    }
  }
  processTodoList(model,todoList,query);
  return map;
}","public <T extends IdEObject>Map<Long,T> query(IfcModelInterface model,Condition condition,Class<T> clazz,QueryInterface query) throws BimserverDatabaseException {
  Map<Long,T> map=new HashMap<Long,T>();
  Set<EClass> eClasses=new HashSet<EClass>();
  condition.getEClassRequirements(eClasses);
  for (  EClass eClass : eClasses) {
    TodoList todoList=new TodoList();
    getMap(eClass,model,query,todoList);
    processTodoList(model,todoList,query);
    List<IdEObject> list=new ArrayList<IdEObject>(model.getValues());
    for (    IdEObject object : list) {
      if (clazz.isInstance(object)) {
        if (condition.matches(object)) {
          map.put(object.getOid(),clazz.cast(object));
        }
      }
    }
  }
  return map;
}",0.7807933194154488
160484,"private int getPrimitiveSize(EDataType eDataType,Object val){
  if (eDataType == ECORE_PACKAGE.getEInt() || eDataType == ECORE_PACKAGE.getEIntegerObject()) {
    return 4;
  }
 else   if (eDataType == ECORE_PACKAGE.getEFloat() || eDataType == ECORE_PACKAGE.getEFloatObject()) {
    return 4;
  }
 else   if (eDataType == ECORE_PACKAGE.getEBoolean() || eDataType == ECORE_PACKAGE.getEBooleanObject()) {
    return 1;
  }
 else   if (eDataType == ECORE_PACKAGE.getEDate()) {
    return 8;
  }
 else   if (eDataType == ECORE_PACKAGE.getELong() || eDataType == ECORE_PACKAGE.getELongObject()) {
    return 8;
  }
 else   if (eDataType == ECORE_PACKAGE.getEDouble() || eDataType == ECORE_PACKAGE.getEDoubleObject()) {
    return 8;
  }
 else   if (eDataType == ECORE_PACKAGE.getEString()) {
    if (val != null) {
      return 4 + ((String)val).getBytes(Charsets.UTF_8).length;
    }
    return 4;
  }
 else   if (eDataType == ECORE_PACKAGE.getEByteArray()) {
    if (val != null) {
      return 4 + ((byte[])val).length;
    }
    return 4;
  }
 else   if (eDataType instanceof EEnum) {
    return 4;
  }
  throw new RuntimeException(""String_Node_Str"" + eDataType);
}","private int getPrimitiveSize(EDataType eDataType,Object val){
  if (eDataType == EcorePackage.eINSTANCE.getEInt() || eDataType == EcorePackage.eINSTANCE.getEIntegerObject()) {
    return 4;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEFloat() || eDataType == EcorePackage.eINSTANCE.getEFloatObject()) {
    return 4;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEBoolean() || eDataType == EcorePackage.eINSTANCE.getEBooleanObject()) {
    return 1;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEDate()) {
    return 8;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getELong() || eDataType == EcorePackage.eINSTANCE.getELongObject()) {
    return 8;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEDouble() || eDataType == EcorePackage.eINSTANCE.getEDoubleObject()) {
    return 8;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEString()) {
    if (val != null) {
      return 4 + ((String)val).getBytes(Charsets.UTF_8).length;
    }
    return 4;
  }
 else   if (eDataType == EcorePackage.eINSTANCE.getEByteArray()) {
    if (val != null) {
      return 4 + ((byte[])val).length;
    }
    return 4;
  }
 else   if (eDataType instanceof EEnum) {
    return 4;
  }
  throw new RuntimeException(""String_Node_Str"" + eDataType);
}",0.8350388866148178
160485,"private Object readPrimitiveValue(EClassifier classifier,ByteBuffer buffer,QueryInterface query){
  if (classifier == ECORE_PACKAGE.getEString()) {
    int length=buffer.getInt();
    if (length != -1) {
      return BinUtils.readString(buffer,length);
    }
 else {
      return null;
    }
  }
 else   if (classifier == ECORE_PACKAGE.getEInt() || classifier == ECORE_PACKAGE.getEIntegerObject()) {
    return buffer.getInt();
  }
 else   if (classifier == ECORE_PACKAGE.getELong() || classifier == ECORE_PACKAGE.getELongObject()) {
    return buffer.getLong();
  }
 else   if (classifier == ECORE_PACKAGE.getEFloat() || classifier == ECORE_PACKAGE.getEFloatObject()) {
    return buffer.getFloat();
  }
 else   if (classifier == ECORE_PACKAGE.getEDouble() || classifier == ECORE_PACKAGE.getEDoubleObject()) {
    return buffer.getDouble();
  }
 else   if (classifier == ECORE_PACKAGE.getEBoolean() || classifier == ECORE_PACKAGE.getEBooleanObject()) {
    return buffer.get() == 1;
  }
 else   if (classifier == ECORE_PACKAGE.getEDate()) {
    long val=buffer.getLong();
    if (val == -1L) {
      return null;
    }
    return new Date(val);
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEByteArray()) {
    int size=buffer.getInt();
    byte[] result=new byte[size];
    buffer.get(result);
    return result;
  }
 else   if (classifier.getName().equals(""String_Node_Str"")) {
    int ordinal=buffer.getInt();
    EEnum tristateEnum=query.getPackageMetaData().getEEnum(""String_Node_Str"");
    return tristateEnum.getEEnumLiteral(ordinal).getInstance();
  }
 else   if (classifier instanceof EEnum) {
    int ordinal=buffer.getInt();
    EEnum eEnum=(EEnum)classifier;
    return eEnum.getEEnumLiteral(ordinal).getInstance();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + classifier.getName());
  }
}","private Object readPrimitiveValue(EClassifier classifier,ByteBuffer buffer,QueryInterface query){
  if (classifier == EcorePackage.eINSTANCE.getEString()) {
    int length=buffer.getInt();
    if (length != -1) {
      return BinUtils.readString(buffer,length);
    }
 else {
      return null;
    }
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEInt() || classifier == EcorePackage.eINSTANCE.getEIntegerObject()) {
    return buffer.getInt();
  }
 else   if (classifier == EcorePackage.eINSTANCE.getELong() || classifier == EcorePackage.eINSTANCE.getELongObject()) {
    return buffer.getLong();
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEFloat() || classifier == EcorePackage.eINSTANCE.getEFloatObject()) {
    return buffer.getFloat();
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEDouble() || classifier == EcorePackage.eINSTANCE.getEDoubleObject()) {
    return buffer.getDouble();
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEBoolean() || classifier == EcorePackage.eINSTANCE.getEBooleanObject()) {
    return buffer.get() == 1;
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEDate()) {
    long val=buffer.getLong();
    if (val == -1L) {
      return null;
    }
    return new Date(val);
  }
 else   if (classifier == EcorePackage.eINSTANCE.getEByteArray()) {
    int size=buffer.getInt();
    byte[] result=new byte[size];
    buffer.get(result);
    return result;
  }
 else   if (classifier.getName().equals(""String_Node_Str"")) {
    int ordinal=buffer.getInt();
    EEnum tristateEnum=query.getPackageMetaData().getEEnum(""String_Node_Str"");
    return tristateEnum.getEEnumLiteral(ordinal).getInstance();
  }
 else   if (classifier instanceof EEnum) {
    int ordinal=buffer.getInt();
    EEnum eEnum=(EEnum)classifier;
    return eEnum.getEEnumLiteral(ordinal).getInstance();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + classifier.getName());
  }
}",0.6916135881104034
160486,"private void writePrimitiveValue(EStructuralFeature feature,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  EClassifier type=feature.getEType();
  if (type == ECORE_PACKAGE.getEString()) {
    if (value == null) {
      buffer.putInt(-1);
    }
 else {
      String stringValue=(String)value;
      byte[] bytes=stringValue.getBytes(Charsets.UTF_8);
      if (bytes.length > Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str"");
      }
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else   if (type == ECORE_PACKAGE.getEInt() || type == ECORE_PACKAGE.getEIntegerObject()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      buffer.putInt((Integer)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDouble() || type == ECORE_PACKAGE.getEDoubleObject()) {
    if (value == null) {
      buffer.putDouble(0D);
    }
 else {
      buffer.putDouble((Double)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEFloat() || type == ECORE_PACKAGE.getEFloatObject()) {
    if (value == null) {
      buffer.putFloat(0F);
    }
 else {
      buffer.putFloat((Float)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getELong() || type == ECORE_PACKAGE.getELongObject()) {
    if (value == null) {
      buffer.putLong(0L);
    }
 else {
      buffer.putLong((Long)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEBoolean() || type == ECORE_PACKAGE.getEBooleanObject()) {
    if (value == null) {
      buffer.put((byte)0);
    }
 else {
      buffer.put(((Boolean)value) ? (byte)1 : (byte)0);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDate()) {
    if (value == null) {
      buffer.putLong(-1L);
    }
 else {
      buffer.putLong(((Date)value).getTime());
    }
  }
 else   if (type.getName().equals(""String_Node_Str"")) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (value instanceof Enumerator) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (type == EcorePackage.eINSTANCE.getEByteArray()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      byte[] bytes=(byte[])value;
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type.getName());
  }
}","private void writePrimitiveValue(EStructuralFeature feature,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  EClassifier type=feature.getEType();
  if (type == EcorePackage.eINSTANCE.getEString()) {
    if (value == null) {
      buffer.putInt(-1);
    }
 else {
      String stringValue=(String)value;
      byte[] bytes=stringValue.getBytes(Charsets.UTF_8);
      if (bytes.length > Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str"");
      }
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getEInt() || type == EcorePackage.eINSTANCE.getEIntegerObject()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      buffer.putInt((Integer)value);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getEDouble() || type == EcorePackage.eINSTANCE.getEDoubleObject()) {
    if (value == null) {
      buffer.putDouble(0D);
    }
 else {
      buffer.putDouble((Double)value);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getEFloat() || type == EcorePackage.eINSTANCE.getEFloatObject()) {
    if (value == null) {
      buffer.putFloat(0F);
    }
 else {
      buffer.putFloat((Float)value);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getELong() || type == EcorePackage.eINSTANCE.getELongObject()) {
    if (value == null) {
      buffer.putLong(0L);
    }
 else {
      buffer.putLong((Long)value);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getEBoolean() || type == EcorePackage.eINSTANCE.getEBooleanObject()) {
    if (value == null) {
      buffer.put((byte)0);
    }
 else {
      buffer.put(((Boolean)value) ? (byte)1 : (byte)0);
    }
  }
 else   if (type == EcorePackage.eINSTANCE.getEDate()) {
    if (value == null) {
      buffer.putLong(-1L);
    }
 else {
      buffer.putLong(((Date)value).getTime());
    }
  }
 else   if (type.getName().equals(""String_Node_Str"")) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (value instanceof Enumerator) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (type == EcorePackage.eINSTANCE.getEByteArray()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      byte[] bytes=(byte[])value;
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type.getName());
  }
}",0.7967611336032389
160487,"@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
  }
 catch (  RenderEngineException e2) {
    e2.printStackTrace();
  }
  try {
    renderEngine.init();
    ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
    RenderEngineModel renderEngineModel=renderEngine.openModel(ifcSerializer.getInputStream());
    try {
      renderEngineModel.setSettings(settings);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              GeometryData geometryData=null;
              if (store) {
                geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              float[] tranformationMatrix=new float[16];
              if (renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
              }
              geometryInfo.setData(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
              ifcProduct.eSet(geometryFeature,geometryInfo);
              if (store) {
                databaseSession.store(bigMap.get(ifcProduct),pid,rid);
              }
            }
          }
 catch (          BimserverDatabaseException|RenderEngineException e) {
            if (!(ifcProduct instanceof IfcAnnotation)) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
        }
      }
    }
  finally {
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    try {
      renderEngine.close();
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  targetModel.generateMinimalExpressIds();
  Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
  RenderEngine renderEngine=null;
  try {
    renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
  }
 catch (  RenderEngineException e2) {
    e2.printStackTrace();
  }
  try {
    renderEngine.init();
    ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
    boolean debug=false;
    InputStream in=null;
    if (debug) {
      File file=new File(eClass.getName() + ""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(file);
      IOUtils.copy(ifcSerializer.getInputStream(),fos);
      fos.close();
      in=new FileInputStream(file);
    }
 else {
      in=ifcSerializer.getInputStream();
    }
    RenderEngineModel renderEngineModel=renderEngine.openModel(in);
    try {
      renderEngineModel.setSettings(settings);
      renderEngineModel.generateGeneralGeometry();
      List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
      for (      IdEObject ifcProduct : allWithSubTypes) {
        IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
        if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
          try {
            RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
            RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
            if (geometry != null && geometry.getNrIndices() > 0) {
              GeometryInfo geometryInfo=null;
              if (store) {
                geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
              }
 else {
                geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
              }
              geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
              geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
              GeometryData geometryData=null;
              if (store) {
                geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
              }
 else {
                geometryData=GeometryFactory.eINSTANCE.createGeometryData();
              }
              geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
              geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
              geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
              geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
              if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                boolean hasMaterial=false;
                float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                  int c=geometry.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=geometry.getIndices()[i * 3 + j];
                    if (c > -1) {
                      hasMaterial=true;
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                      }
                    }
                  }
                }
                if (hasMaterial) {
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
              }
              float[] tranformationMatrix=new float[16];
              if (renderEngineInstance.getTransformationMatrix() != null) {
                tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
              }
 else {
                Matrix.setIdentityM(tranformationMatrix,0);
              }
              for (int i=0; i < geometry.getIndices().length; i++) {
                processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
              }
              geometryInfo.setData(geometryData);
              setTransformationMatrix(geometryInfo,tranformationMatrix);
              if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                int hash=hash(geometryData);
                if (hashes.containsKey(hash)) {
                  databaseSession.removeFromCommit(geometryData);
                  geometryInfo.setData(hashes.get(hash));
                }
 else {
                  hashes.put(hash,geometryData);
                }
              }
              bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
              ifcProduct.eSet(geometryFeature,geometryInfo);
              if (store) {
                databaseSession.store(bigMap.get(ifcProduct),pid,rid);
              }
            }
          }
 catch (          EntityNotFoundException e) {
            if (!(ifcProduct instanceof IfcAnnotation)) {
              LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
            }
          }
catch (          BimserverDatabaseException|RenderEngineException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
  finally {
      renderEngineModel.close();
    }
  }
 catch (  SerializerException|RenderEngineException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    try {
      renderEngine.close();
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9195582224541264
160488,"public void generateGeometry(long uoid,final PluginManager pluginManager,final DatabaseSession databaseSession,IfcModelInterface model,final int pid,final int rid,final boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final SerializerPlugin ifcSerializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    final EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EClass productRepresentationClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
    Set<EClass> classes=new HashSet<>();
    for (    IfcProduct object : model.getAllWithSubTypes(IfcProduct.class)) {
      IfcProductRepresentation representation=object.getRepresentation();
      if (representation != null && representation.getRepresentations().size() > 0) {
        classes.add(object.eClass());
      }
    }
    if (classes.size() == 0) {
      return;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    classes.remove(Ifc2x3tc1Package.eINSTANCE.getIfcAnnotation());
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    LOGGER.debug(""String_Node_Str"" + maxSimultanousThreads + ""String_Node_Str"");
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(classes.size()));
    oidCounter=model.getHighestOid() + 1;
    final Map<IdEObject,IdEObject> bigMap=new HashMap<IdEObject,IdEObject>();
    HideAllInversesObjectIDM idm=new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str"").getSchemaDefinition());
    for (    final EClass eClass : classes) {
      if (eClass.getName().equals(""String_Node_Str"")) {
        continue;
      }
      final BasicIfcModel targetModel=new BasicIfcModel(pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),null);
      ModelHelper modelHelper=new ModelHelper(targetModel);
      modelHelper.setObjectIDM(idm);
      IfcProject newProject=null;
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcProject.class)) {
        newProject=(IfcProject)modelHelper.copy(idEObject,false,skipRepresentation);
        bigMap.put(newProject,idEObject);
      }
      for (      IdEObject idEObject : model.getAll(eClass)) {
        IfcProduct ifcProduct=(IfcProduct)idEObject;
        IdEObject newObject=modelHelper.copy(idEObject,false,createObjectIdm(ifcProduct.eClass()));
        copyDecomposes(ifcProduct,modelHelper);
        bigMap.put(newObject,idEObject);
        if (eClass.getName().equals(""String_Node_Str"")) {
          IfcWallStandardCase ifcWallStandardCase=(IfcWallStandardCase)idEObject;
          for (          IfcRelVoidsElement ifcRelVoidsElement : ifcWallStandardCase.getHasOpenings()) {
            bigMap.put(modelHelper.copy(ifcRelVoidsElement,false),ifcRelVoidsElement);
            IfcFeatureElementSubtraction relatedOpeningElement=ifcRelVoidsElement.getRelatedOpeningElement();
            if (relatedOpeningElement != null) {
              bigMap.put(modelHelper.copy(relatedOpeningElement,false),relatedOpeningElement);
            }
          }
        }
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnit.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnitAssignment.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      executor.submit(new Runnable(){
        @Override public void run(){
          targetModel.generateMinimalExpressIds();
          Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
          RenderEngine renderEngine=null;
          try {
            renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
          }
 catch (          RenderEngineException e2) {
            e2.printStackTrace();
          }
          try {
            renderEngine.init();
            ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
            RenderEngineModel renderEngineModel=renderEngine.openModel(ifcSerializer.getInputStream());
            try {
              renderEngineModel.setSettings(settings);
              renderEngineModel.generateGeneralGeometry();
              List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
              for (              IdEObject ifcProduct : allWithSubTypes) {
                IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
                if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
                  try {
                    RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
                    RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
                    if (geometry != null && geometry.getNrIndices() > 0) {
                      GeometryInfo geometryInfo=null;
                      if (store) {
                        geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                      }
 else {
                        geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                      }
                      geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                      geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                      GeometryData geometryData=null;
                      if (store) {
                        geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                      }
 else {
                        geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                      }
                      geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                      geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                      geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                      geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                      if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                        boolean hasMaterial=false;
                        float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                        for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                          int c=geometry.getMaterialIndices()[i];
                          for (int j=0; j < 3; ++j) {
                            int k=geometry.getIndices()[i * 3 + j];
                            if (c > -1) {
                              hasMaterial=true;
                              for (int l=0; l < 4; ++l) {
                                vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                              }
                            }
                          }
                        }
                        if (hasMaterial) {
                          geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                        }
                      }
                      float[] tranformationMatrix=new float[16];
                      if (renderEngineInstance.getTransformationMatrix() != null) {
                        tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                        tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                      }
 else {
                        Matrix.setIdentityM(tranformationMatrix,0);
                      }
                      for (int i=0; i < geometry.getIndices().length; i++) {
                        processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                      }
                      geometryInfo.setData(geometryData);
                      setTransformationMatrix(geometryInfo,tranformationMatrix);
                      if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                        int hash=hash(geometryData);
                        if (hashes.containsKey(hash)) {
                          databaseSession.removeFromCommit(geometryData);
                          geometryInfo.setData(hashes.get(hash));
                        }
 else {
                          hashes.put(hash,geometryData);
                        }
                      }
                      bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                      ifcProduct.eSet(geometryFeature,geometryInfo);
                      if (store) {
                        databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                      }
                    }
                  }
 catch (                  BimserverDatabaseException|RenderEngineException e) {
                    if (!(ifcProduct instanceof IfcAnnotation)) {
                      LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
                    }
                  }
                }
              }
            }
  finally {
              renderEngineModel.close();
            }
          }
 catch (          SerializerException|RenderEngineException|IOException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            try {
              renderEngine.close();
            }
 catch (            RenderEngineException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}","public void generateGeometry(long uoid,final PluginManager pluginManager,final DatabaseSession databaseSession,IfcModelInterface model,final int pid,final int rid,final boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  long start=System.nanoTime();
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  try {
    final SerializerPlugin ifcSerializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
    if (ifcSerializerPlugin == null) {
      throw new UserException(""String_Node_Str"");
    }
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    final RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    final EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EClass productRepresentationClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
    final EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
    final EStructuralFeature representationsFeature=productRepresentationClass.getEStructuralFeature(""String_Node_Str"");
    Set<EClass> classes=new HashSet<>();
    for (    IfcProduct object : model.getAllWithSubTypes(IfcProduct.class)) {
      IfcProductRepresentation representation=object.getRepresentation();
      if (representation != null && representation.getRepresentations().size() > 0) {
        classes.add(object.eClass());
      }
    }
    if (classes.size() == 0) {
      return;
    }
    final RenderEngineSettings settings=new RenderEngineSettings();
    settings.setPrecision(Precision.SINGLE);
    settings.setIndexFormat(IndexFormat.AUTO_DETECT);
    settings.setGenerateNormals(true);
    settings.setGenerateTriangles(true);
    settings.setGenerateWireFrame(false);
    classes.remove(Ifc2x3tc1Package.eINSTANCE.getIfcAnnotation());
    int maxSimultanousThreads=Math.min(bimServer.getServerSettingsCache().getServerSettings().getRenderEngineProcesses(),Runtime.getRuntime().availableProcessors());
    if (maxSimultanousThreads < 1) {
      maxSimultanousThreads=1;
    }
    LOGGER.debug(""String_Node_Str"" + maxSimultanousThreads + ""String_Node_Str"");
    ThreadPoolExecutor executor=new ThreadPoolExecutor(maxSimultanousThreads,maxSimultanousThreads,24,TimeUnit.HOURS,new ArrayBlockingQueue<Runnable>(classes.size()));
    oidCounter=model.getHighestOid() + 1;
    final Map<IdEObject,IdEObject> bigMap=new HashMap<IdEObject,IdEObject>();
    HideAllInversesObjectIDM idm=new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str"").getSchemaDefinition());
    for (    final EClass eClass : classes) {
      if (eClass.getName().equals(""String_Node_Str"")) {
        continue;
      }
      final BasicIfcModel targetModel=new BasicIfcModel(pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),null);
      ModelHelper modelHelper=new ModelHelper(targetModel);
      modelHelper.setObjectIDM(idm);
      IfcProject newProject=null;
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcProject.class)) {
        newProject=(IfcProject)modelHelper.copy(idEObject,false,skipRepresentation);
        bigMap.put(newProject,idEObject);
      }
      for (      IdEObject idEObject : model.getAll(eClass)) {
        IfcProduct ifcProduct=(IfcProduct)idEObject;
        IdEObject newObject=modelHelper.copy(idEObject,false,createObjectIdm(ifcProduct.eClass()));
        copyDecomposes(ifcProduct,modelHelper);
        bigMap.put(newObject,idEObject);
        if (eClass.getName().equals(""String_Node_Str"")) {
          IfcWallStandardCase ifcWallStandardCase=(IfcWallStandardCase)idEObject;
          for (          IfcRelVoidsElement ifcRelVoidsElement : ifcWallStandardCase.getHasOpenings()) {
            bigMap.put(modelHelper.copy(ifcRelVoidsElement,false),ifcRelVoidsElement);
            IfcFeatureElementSubtraction relatedOpeningElement=ifcRelVoidsElement.getRelatedOpeningElement();
            if (relatedOpeningElement != null) {
              bigMap.put(modelHelper.copy(relatedOpeningElement,false),relatedOpeningElement);
            }
          }
        }
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnit.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      for (      IdEObject idEObject : model.getAllWithSubTypes(IfcUnitAssignment.class)) {
        bigMap.put(modelHelper.copy(idEObject,false,skipRepresentation),idEObject);
      }
      executor.submit(new Runnable(){
        @Override public void run(){
          targetModel.generateMinimalExpressIds();
          Serializer ifcSerializer=ifcSerializerPlugin.createSerializer(new PluginConfiguration());
          RenderEngine renderEngine=null;
          try {
            renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),""String_Node_Str"");
          }
 catch (          RenderEngineException e2) {
            e2.printStackTrace();
          }
          try {
            renderEngine.init();
            ifcSerializer.init(targetModel,null,pluginManager,null,pluginManager.getMetaDataManager().getPackageMetaData(""String_Node_Str""),true);
            boolean debug=false;
            InputStream in=null;
            if (debug) {
              File file=new File(eClass.getName() + ""String_Node_Str"");
              FileOutputStream fos=new FileOutputStream(file);
              IOUtils.copy(ifcSerializer.getInputStream(),fos);
              fos.close();
              in=new FileInputStream(file);
            }
 else {
              in=ifcSerializer.getInputStream();
            }
            RenderEngineModel renderEngineModel=renderEngine.openModel(in);
            try {
              renderEngineModel.setSettings(settings);
              renderEngineModel.generateGeneralGeometry();
              List<IdEObject> allWithSubTypes=targetModel.getAll(eClass);
              for (              IdEObject ifcProduct : allWithSubTypes) {
                IdEObject representation=(IdEObject)ifcProduct.eGet(representationFeature);
                if (representation != null && ((List<?>)representation.eGet(representationsFeature)).size() > 0) {
                  try {
                    RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
                    RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
                    if (geometry != null && geometry.getNrIndices() > 0) {
                      GeometryInfo geometryInfo=null;
                      if (store) {
                        geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                      }
 else {
                        geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                      }
                      geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                      geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                      GeometryData geometryData=null;
                      if (store) {
                        geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                      }
 else {
                        geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                      }
                      geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                      geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                      geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                      geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                      if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                        boolean hasMaterial=false;
                        float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                        for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                          int c=geometry.getMaterialIndices()[i];
                          for (int j=0; j < 3; ++j) {
                            int k=geometry.getIndices()[i * 3 + j];
                            if (c > -1) {
                              hasMaterial=true;
                              for (int l=0; l < 4; ++l) {
                                vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                              }
                            }
                          }
                        }
                        if (hasMaterial) {
                          geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                        }
                      }
                      float[] tranformationMatrix=new float[16];
                      if (renderEngineInstance.getTransformationMatrix() != null) {
                        tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                        tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                      }
 else {
                        Matrix.setIdentityM(tranformationMatrix,0);
                      }
                      for (int i=0; i < geometry.getIndices().length; i++) {
                        processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                      }
                      geometryInfo.setData(geometryData);
                      setTransformationMatrix(geometryInfo,tranformationMatrix);
                      if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                        int hash=hash(geometryData);
                        if (hashes.containsKey(hash)) {
                          databaseSession.removeFromCommit(geometryData);
                          geometryInfo.setData(hashes.get(hash));
                        }
 else {
                          hashes.put(hash,geometryData);
                        }
                      }
                      bigMap.get(ifcProduct).eSet(geometryFeature,geometryInfo);
                      ifcProduct.eSet(geometryFeature,geometryInfo);
                      if (store) {
                        databaseSession.store(bigMap.get(ifcProduct),pid,rid);
                      }
                    }
                  }
 catch (                  EntityNotFoundException e) {
                    if (!(ifcProduct instanceof IfcAnnotation)) {
                      LOGGER.info(""String_Node_Str"" + ifcProduct.eClass().getName() + ""String_Node_Str""+ ifcProduct.getExpressId()+ ""String_Node_Str""+ ifcProduct.getOid());
                    }
                  }
catch (                  BimserverDatabaseException|RenderEngineException e) {
                    LOGGER.error(""String_Node_Str"",e);
                  }
                }
              }
            }
  finally {
              renderEngineModel.close();
            }
          }
 catch (          SerializerException|RenderEngineException|IOException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
 finally {
            try {
              renderEngine.close();
            }
 catch (            RenderEngineException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
    executor.shutdown();
    executor.awaitTermination(24,TimeUnit.HOURS);
    long end=System.nanoTime();
    LOGGER.info(""String_Node_Str"" + ((end - start) / 1000000) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}",0.9728742205806424
160489,"private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
  if (writer != null) {
    if (result == null) {
      writer.beginObject();
      writer.name(""String_Node_Str"");
      writer.beginObject();
      writer.endObject();
      writer.endObject();
    }
 else {
      writer.beginObject();
      writer.name(""String_Node_Str"");
      converter.toJson(result,writer);
      writer.endObject();
    }
  }
  long e=System.nanoTime();
  LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
}","private void processSingleRequest(JsonObject request,String jsonToken,HttpServletRequest httpRequest,JsonWriter writer) throws Exception {
  long s=System.nanoTime();
  String interfaceName=request.get(""String_Node_Str"").getAsString();
  String methodName=request.get(""String_Node_Str"").getAsString();
  SService sService=bimServer.getServicesMap().getByName(interfaceName);
  if (sService == null) {
    sService=bimServer.getServicesMap().getBySimpleName(interfaceName);
  }
  if (sService == null) {
    throw new UserException(""String_Node_Str"" + interfaceName);
  }
  SMethod method=sService.getSMethod(methodName);
  if (method == null) {
    SMethod alternative=bimServer.getServicesMap().findMethod(methodName);
    if (alternative == null) {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName);
    }
 else {
      throw new UserException(""String_Node_Str"" + methodName + ""String_Node_Str""+ interfaceName+ ""String_Node_Str""+ alternative.getService().getSimpleName()+ ""String_Node_Str"");
    }
  }
  KeyValuePair[] parameters=new KeyValuePair[method.getParameters().size()];
  if (request.has(""String_Node_Str"")) {
    JsonObject parametersJson=request.getAsJsonObject(""String_Node_Str"");
    for (int i=0; i < method.getParameters().size(); i++) {
      SParameter parameter=method.getParameter(i);
      if (parametersJson.has(parameter.getName())) {
        parameters[i]=new KeyValuePair(parameter.getName(),converter.fromJson(parameter.getType(),parameter.getGenericType(),parametersJson.get(parameter.getName())));
      }
 else {
        LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ parameter.getName());
      }
    }
  }
  PublicInterface service=getServiceInterface(httpRequest,bimServer,sService.getInterfaceClass(),methodName,jsonToken);
  String oldThreadName=Thread.currentThread().getName();
  Thread.currentThread().setName(interfaceName + ""String_Node_Str"" + methodName);
  try {
    Object result=method.invoke(sService.getInterfaceClass(),service,parameters);
    if (writer != null) {
      if (result == null) {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        writer.beginObject();
        writer.endObject();
        writer.endObject();
      }
 else {
        writer.beginObject();
        writer.name(""String_Node_Str"");
        converter.toJson(result,writer);
        writer.endObject();
      }
    }
    long e=System.nanoTime();
    LOGGER.debug(interfaceName + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ ((e - s) / 1000000)+ ""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setName(oldThreadName);
  }
}",0.9670414889492052
160490,"public SRemoteServiceCalled convertToSObject(RemoteServiceCalled input){
  if (input == null) {
    return null;
  }
  SRemoteServiceCalled result=new SRemoteServiceCalled();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(SNotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  Service serviceVal=input.getService();
  result.setServiceId(serviceVal == null ? -1 : serviceVal.getOid());
  return result;
}","public SMessagingSerializerPluginConfiguration convertToSObject(MessagingSerializerPluginConfiguration input){
  if (input == null) {
    return null;
  }
  SMessagingSerializerPluginConfiguration result=new SMessagingSerializerPluginConfiguration();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setName(input.getName());
  result.setEnabled(input.getEnabled());
  result.setDescription(input.getDescription());
  PluginDescriptor pluginDescriptorVal=input.getPluginDescriptor();
  result.setPluginDescriptorId(pluginDescriptorVal == null ? -1 : pluginDescriptorVal.getOid());
  ObjectType settingsVal=input.getSettings();
  result.setSettingsId(settingsVal == null ? -1 : settingsVal.getOid());
  UserSettings userSettingsVal=input.getUserSettings();
  result.setUserSettingsId(userSettingsVal == null ? -1 : userSettingsVal.getOid());
  return result;
}",0.2135150482680295
160491,"public RemoteServiceCalled convertFromSObject(SRemoteServiceCalled input,RemoteServiceCalled result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(NotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),Query.getDefault()));
  result.setService((Service)session.get(StorePackage.eINSTANCE.getService(),input.getServiceId(),Query.getDefault()));
  return result;
}","public MessagingSerializerPluginConfiguration convertFromSObject(SMessagingSerializerPluginConfiguration input,MessagingSerializerPluginConfiguration result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setName(input.getName());
  result.setEnabled(input.getEnabled());
  result.setDescription(input.getDescription());
  result.setPluginDescriptor((PluginDescriptor)session.get(StorePackage.eINSTANCE.getPluginDescriptor(),input.getPluginDescriptorId(),Query.getDefault()));
  result.setSettings((ObjectType)session.get(StorePackage.eINSTANCE.getObjectType(),input.getSettingsId(),Query.getDefault()));
  result.setUserSettings((UserSettings)session.get(StorePackage.eINSTANCE.getUserSettings(),input.getUserSettingsId(),Query.getDefault()));
  return result;
}",0.4776652769505658
160492,"public static void main(String[] args){
  generateIfc2x3tc1();
  generateIfc4();
}","public static void main(String[] args){
  generateIfc4();
}",0.8368794326241135
160493,"private void initDatabaseDependantItems() throws BimserverDatabaseException {
  serverSettingsCache.init();
  notificationsManager.init();
  getSerializerFactory().init(pluginManager,bimDatabase,this);
  getDeserializerFactory().init(pluginManager,bimDatabase);
  try {
    DatabaseSession session=bimDatabase.createSession();
    try {
      updatePlugins(session);
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
    session=bimDatabase.createSession();
    createDatabaseObjects(session);
    ServerSettings serverSettings=serverSettingsCache.getServerSettings();
    for (    WebModulePlugin webModulePlugin : pluginManager.getAllWebPlugins(true)) {
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),webModulePlugin.getClass().getName());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        genericPluginConversion(session,webModulePlugin,webPluginConfiguration,getPluginDescriptor(session,webModulePlugin.getClass().getName()));
      }
      if (webPluginConfiguration == serverSettings.getWebModule()) {
        setDefaultWebModule(webModulePlugin);
      }
 else {
        if (webModulePlugin.getClass().getName().equals(""String_Node_Str"")) {
          serverSettings.setWebModule(webPluginConfiguration);
          setDefaultWebModule(webModulePlugin);
        }
        if (webModulePlugin.getClass().getName().equals(""String_Node_Str"")) {
          serverSettings.setWebModule(webPluginConfiguration);
          setDefaultWebModule(webModulePlugin);
        }
      }
    }
    session.store(serverSettings);
    Condition condition=new AttributeCondition(StorePackage.eINSTANCE.getUser_Username(),new StringLiteral(""String_Node_Str""));
    User systemUser=session.querySingle(condition,User.class,Query.getDefault());
    ServerStarted serverStarted=session.create(ServerStarted.class);
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(systemUser);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimserverLockConflictException e) {
      throw new BimserverDatabaseException(e);
    }
catch (    ServiceException e) {
      throw new BimserverDatabaseException(e);
    }
 finally {
      session.close();
    }
    webModules=new HashMap<String,WebModulePlugin>();
    DatabaseSession ses=bimDatabase.createSession();
    try {
      List<WebModulePluginConfiguration> webModuleConfigurations=serverSettingsCache.getServerSettings().getWebModules();
      for (      WebModulePluginConfiguration webModulePluginConfiguration : webModuleConfigurations) {
        String contextPath=""String_Node_Str"";
        for (        Parameter parameter : webModulePluginConfiguration.getSettings().getParameters()) {
          if (parameter.getName().equals(""String_Node_Str"")) {
            contextPath=((StringType)parameter.getValue()).getValue();
          }
        }
        webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(webModulePluginConfiguration.getPluginDescriptor().getPluginClassName(),true));
      }
      if (serverSettingsCache.getServerSettings().getWebModule() != null) {
        defaultWebModule=(WebModulePlugin)pluginManager.getPlugin(serverSettingsCache.getServerSettings().getWebModule().getPluginDescriptor().getPluginClassName(),true);
      }
    }
  finally {
      ses.close();
    }
    Integer protocolBuffersPort=getServerSettingsCache().getServerSettings().getProtocolBuffersPort();
    if (protocolBuffersPort >= 1 && protocolBuffersPort <= 65535) {
      try {
        protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactory,servicesMap,protocolBuffersPort);
        protocolBuffersServer.start();
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    bimServerClientFactory=new DirectBimServerClientFactory<ServiceInterface>(serverSettingsCache.getServerSettings().getSiteAddress(),serviceFactory,servicesMap,pluginManager,metaDataManager);
    pluginManager.setBimServerClientFactory(bimServerClientFactory);
  }
 catch (  BimserverLockConflictException e) {
    throw new BimserverDatabaseException(e);
  }
catch (  PluginException e) {
    throw new BimserverDatabaseException(e);
  }
}","private void initDatabaseDependantItems() throws BimserverDatabaseException {
  serverSettingsCache.init();
  notificationsManager.init();
  getSerializerFactory().init(pluginManager,bimDatabase,this);
  getDeserializerFactory().init(pluginManager,bimDatabase);
  try {
    DatabaseSession session=bimDatabase.createSession();
    try {
      updatePlugins(session);
      session.commit();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
    session=bimDatabase.createSession();
    createDatabaseObjects(session);
    ServerSettings serverSettings=serverSettingsCache.getServerSettings();
    for (    WebModulePlugin webModulePlugin : pluginManager.getAllWebPlugins(true)) {
      WebModulePluginConfiguration webPluginConfiguration=find(serverSettings.getWebModules(),webModulePlugin.getClass().getName());
      if (webPluginConfiguration == null) {
        webPluginConfiguration=session.create(WebModulePluginConfiguration.class);
        serverSettings.getWebModules().add(webPluginConfiguration);
        genericPluginConversion(session,webModulePlugin,webPluginConfiguration,getPluginDescriptor(session,webModulePlugin.getClass().getName()));
      }
      if (serverSettings.getWebModule() == null) {
        if (webModulePlugin.getClass().getName().equals(""String_Node_Str"")) {
          serverSettings.setWebModule(webPluginConfiguration);
          setDefaultWebModule(webModulePlugin);
        }
        if (webModulePlugin.getClass().getName().equals(""String_Node_Str"")) {
          serverSettings.setWebModule(webPluginConfiguration);
          setDefaultWebModule(webModulePlugin);
        }
      }
 else {
        if (webPluginConfiguration == serverSettings.getWebModule()) {
          setDefaultWebModule(webModulePlugin);
        }
      }
    }
    session.store(serverSettings);
    Condition condition=new AttributeCondition(StorePackage.eINSTANCE.getUser_Username(),new StringLiteral(""String_Node_Str""));
    User systemUser=session.querySingle(condition,User.class,Query.getDefault());
    ServerStarted serverStarted=session.create(ServerStarted.class);
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(systemUser);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimserverLockConflictException e) {
      throw new BimserverDatabaseException(e);
    }
catch (    ServiceException e) {
      throw new BimserverDatabaseException(e);
    }
 finally {
      session.close();
    }
    webModules=new HashMap<String,WebModulePlugin>();
    DatabaseSession ses=bimDatabase.createSession();
    try {
      List<WebModulePluginConfiguration> webModuleConfigurations=serverSettingsCache.getServerSettings().getWebModules();
      for (      WebModulePluginConfiguration webModulePluginConfiguration : webModuleConfigurations) {
        String contextPath=""String_Node_Str"";
        for (        Parameter parameter : webModulePluginConfiguration.getSettings().getParameters()) {
          if (parameter.getName().equals(""String_Node_Str"")) {
            contextPath=((StringType)parameter.getValue()).getValue();
          }
        }
        webModules.put(contextPath,(WebModulePlugin)pluginManager.getPlugin(webModulePluginConfiguration.getPluginDescriptor().getPluginClassName(),true));
      }
      if (serverSettingsCache.getServerSettings().getWebModule() != null) {
        defaultWebModule=(WebModulePlugin)pluginManager.getPlugin(serverSettingsCache.getServerSettings().getWebModule().getPluginDescriptor().getPluginClassName(),true);
      }
    }
  finally {
      ses.close();
    }
    Integer protocolBuffersPort=getServerSettingsCache().getServerSettings().getProtocolBuffersPort();
    if (protocolBuffersPort >= 1 && protocolBuffersPort <= 65535) {
      try {
        protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactory,servicesMap,protocolBuffersPort);
        protocolBuffersServer.start();
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    bimServerClientFactory=new DirectBimServerClientFactory<ServiceInterface>(serverSettingsCache.getServerSettings().getSiteAddress(),serviceFactory,servicesMap,pluginManager,metaDataManager);
    pluginManager.setBimServerClientFactory(bimServerClientFactory);
  }
 catch (  BimserverLockConflictException e) {
    throw new BimserverDatabaseException(e);
  }
catch (  PluginException e) {
    throw new BimserverDatabaseException(e);
  }
}",0.967953625724598
160494,"@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (request.getHeader(""String_Node_Str"") != null && (getBimServer().getServerInfo().getServerState() != ServerState.MIGRATION_REQUIRED && !getBimServer().getServerSettingsCache().isHostAllowed(request.getHeader(""String_Node_Str"")))) {
    response.setStatus(403);
    return;
  }
  response.setHeader(""String_Node_Str"",request.getHeader(""String_Node_Str""));
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    return;
  }
  response.setCharacterEncoding(""String_Node_Str"");
  try {
    ServletInputStream inputStream=request.getInputStream();
    byte[] bytes=IOUtils.toByteArray(inputStream);
    JsonReader jsonReader=new JsonReader(new InputStreamReader(new ByteArrayInputStream(bytes)));
    JsonParser parser=new JsonParser();
    JsonElement parse=parser.parse(jsonReader);
    if (parse instanceof JsonObject) {
      JsonObject jsonRequest=(JsonObject)parse;
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      getBimServer().getJsonHandler().execute(jsonRequest,request,response.getWriter());
    }
 else {
      LOGGER.error(""String_Node_Str"" + new String(bytes,Charsets.UTF_8));
      response.setStatus(500);
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    response.setStatus(500);
  }
}","@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (request.getHeader(""String_Node_Str"") != null && (getBimServer().getServerInfo().getServerState() != ServerState.MIGRATION_REQUIRED && !getBimServer().getServerSettingsCache().isHostAllowed(request.getHeader(""String_Node_Str"")))) {
    response.setStatus(403);
    return;
  }
  response.setHeader(""String_Node_Str"",request.getHeader(""String_Node_Str""));
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    return;
  }
  response.setCharacterEncoding(""String_Node_Str"");
  try {
    ServletInputStream inputStream=request.getInputStream();
    byte[] bytes=IOUtils.toByteArray(inputStream);
    JsonReader jsonReader=new JsonReader(new InputStreamReader(new ByteArrayInputStream(bytes),Charsets.UTF_8));
    JsonParser parser=new JsonParser();
    JsonElement parse=parser.parse(jsonReader);
    if (parse instanceof JsonObject) {
      JsonObject jsonRequest=(JsonObject)parse;
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      getBimServer().getJsonHandler().execute(jsonRequest,request,response.getWriter());
    }
 else {
      LOGGER.error(""String_Node_Str"" + new String(bytes,Charsets.UTF_8));
      response.setStatus(500);
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    response.setStatus(500);
  }
}",0.9948612538540595
160495,"private void setContentType(HttpServletResponse response,String requestUri){
  if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
}","private void setContentType(HttpServletResponse response,String requestUri){
  if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else   if (requestUri.endsWith(""String_Node_Str"")) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    response.setContentType(""String_Node_Str"");
  }
}",0.9429657794676806
160496,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
    BimDatabaseAction<IfcModelInterface> action=new DownloadDatabaseAction(getBimServer(),session,AccessMethod.INTERNAL,roid,-1,serializerPluginConfiguration.getOid(),getAuthorization(),null);
    IfcModelInterface ifcModel=session.executeAndCommitAction(action);
    QueryEnginePluginConfiguration queryEngineObject=session.get(StorePackage.eINSTANCE.getQueryEnginePluginConfiguration(),qeid,Query.getDefault());
    if (queryEngineObject != null) {
      QueryEnginePlugin queryEnginePlugin=getBimServer().getPluginManager().getQueryEngine(queryEngineObject.getPluginDescriptor().getPluginClassName(),true);
      if (queryEnginePlugin != null) {
        org.bimserver.plugins.queryengine.QueryEngine queryEngine=queryEnginePlugin.getQueryEngine(new PluginConfiguration(queryEngineObject.getSettings()));
        IfcModelInterface result=new IfcModel(null,null);
        IfcModelInterface finalResult=queryEngine.query(ifcModel,code,new Reporter(){
          @Override public void error(          Exception error){
          }
          @Override public void warning(          String warning){
          }
          @Override public void info(          String info){
          }
        }
,new ModelHelper(objectIDM,result));
        return finalResult;
      }
 else {
        throw new UserException(""String_Node_Str"" + queryEngineObject.getPluginDescriptor().getPluginClassName());
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + qeid);
    }
  }
 catch (  BimserverDatabaseException e) {
    throw new UserException(e);
  }
catch (  QueryEngineException e) {
    throw new UserException(e);
  }
 finally {
    session.close();
  }
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  DatabaseSession session=getBimServer().getDatabase().createSession();
  try {
    SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
    BimDatabaseAction<IfcModelInterface> action=new DownloadDatabaseAction(getBimServer(),session,AccessMethod.INTERNAL,roid,-1,serializerPluginConfiguration.getOid(),getAuthorization(),null);
    IfcModelInterface ifcModel=session.executeAndCommitAction(action);
    QueryEnginePluginConfiguration queryEngineObject=session.get(StorePackage.eINSTANCE.getQueryEnginePluginConfiguration(),qeid,Query.getDefault());
    Revision revision=session.get(roid,Query.getDefault());
    PackageMetaData packageMetaData=getBimServer().getMetaDataManager().getEPackage(revision.getProject().getSchema());
    if (queryEngineObject != null) {
      QueryEnginePlugin queryEnginePlugin=getBimServer().getPluginManager().getQueryEngine(queryEngineObject.getPluginDescriptor().getPluginClassName(),true);
      if (queryEnginePlugin != null) {
        QueryEngine queryEngine=queryEnginePlugin.getQueryEngine(new PluginConfiguration(queryEngineObject.getSettings()));
        IfcModelInterface result=new IfcModel(packageMetaData,null);
        IfcModelInterface finalResult=queryEngine.query(ifcModel,code,new Reporter(){
          @Override public void error(          Exception error){
          }
          @Override public void warning(          String warning){
          }
          @Override public void info(          String info){
          }
        }
,new ModelHelper(objectIDM,result));
        return finalResult;
      }
 else {
        throw new UserException(""String_Node_Str"" + queryEngineObject.getPluginDescriptor().getPluginClassName());
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + qeid);
    }
  }
 catch (  BimserverDatabaseException e) {
    throw new UserException(e);
  }
catch (  QueryEngineException e) {
    throw new UserException(e);
  }
 finally {
    session.close();
  }
}",0.9457508731082654
160497,"public SRemoteServiceCalled convertToSObject(RemoteServiceCalled input){
  if (input == null) {
    return null;
  }
  SRemoteServiceCalled result=new SRemoteServiceCalled();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(SNotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  Service serviceVal=input.getService();
  result.setServiceId(serviceVal == null ? -1 : serviceVal.getOid());
  return result;
}","public SSmtpProtocol convertToSObject(SmtpProtocol input){
  return SSmtpProtocol.values()[input.ordinal()];
}",0.1805273833671399
160498,"public RemoteServiceCalled convertFromSObject(SRemoteServiceCalled input,RemoteServiceCalled result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(NotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),Query.getDefault()));
  result.setService((Service)session.get(StorePackage.eINSTANCE.getService(),input.getServiceId(),Query.getDefault()));
  return result;
}","public SmtpProtocol convertFromSObject(SSmtpProtocol input){
  return SmtpProtocol.values()[input.ordinal()];
}",0.1789802289281997
160499,"public void generateGeometry(long uoid,PluginManager pluginManager,DatabaseSession databaseSession,IfcModelInterface model,int pid,int rid,boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
  Serializer serializer=serializerPlugin.createSerializer(new PluginConfiguration());
  try {
    model.generateMinimalExpressIds();
    PackageMetaData packageMetaData=model.getPackageMetaData();
    serializer.init(model,null,pluginManager,null,packageMetaData,false);
    SerializerInputstream serializerInputstream=new SerializerInputstream((EmfSerializer)serializer);
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    try {
      RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),packageMetaData.getSchema().getEPackageName());
      renderEngine.init();
      try {
        RenderEngineModel renderEngineModel=renderEngine.openModel(serializerInputstream);
        RenderEngineSettings settings=new RenderEngineSettings();
        settings.setPrecision(Precision.SINGLE);
        settings.setIndexFormat(IndexFormat.AUTO_DETECT);
        settings.setGenerateNormals(true);
        settings.setGenerateTriangles(true);
        settings.setGenerateWireFrame(false);
        renderEngineModel.setSettings(settings);
        try {
          renderEngineModel.generateGeneralGeometry();
          EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
          List<IdEObject> products=model.getAllWithSubTypes(productClass);
          EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
          EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
          for (          IdEObject ifcProduct : products) {
            if (ifcProduct.eGet(representationFeature) != null) {
              RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
              RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
              if (geometry != null && geometry.getNrIndices() > 0) {
                GeometryInfo geometryInfo=null;
                if (store) {
                  geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                }
 else {
                  geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                }
                geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                GeometryData geometryData=null;
                if (store) {
                  geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                }
 else {
                  geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                }
                geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                  boolean hasMaterial=false;
                  float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                  for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                    int c=geometry.getMaterialIndices()[i];
                    for (int j=0; j < 3; ++j) {
                      int k=geometry.getIndices()[i * 3 + j];
                      if (c > -1) {
                        hasMaterial=true;
                        for (int l=0; l < 4; ++l) {
                          vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                        }
                      }
                    }
                  }
                  if (hasMaterial) {
                    geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                  }
                }
                float[] tranformationMatrix=new float[16];
                if (renderEngineInstance.getTransformationMatrix() != null) {
                  tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                  tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                }
 else {
                  Matrix.setIdentityM(tranformationMatrix,0);
                }
                for (int i=0; i < geometry.getIndices().length; i++) {
                  processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                }
                geometryInfo.setData(geometryData);
                setTransformationMatrix(geometryInfo,tranformationMatrix);
                if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                  int hash=hash(geometryData);
                  if (hashes.containsKey(hash)) {
                    databaseSession.removeFromCommit(geometryData);
                    geometryInfo.setData(hashes.get(hash));
                  }
 else {
                    hashes.put(hash,geometryData);
                  }
                }
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
            }
          }
        }
  finally {
          renderEngineModel.close();
        }
      }
  finally {
        renderEngine.close();
      }
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}","public void generateGeometry(long uoid,PluginManager pluginManager,DatabaseSession databaseSession,IfcModelInterface model,int pid,int rid,boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  String pluginName=""String_Node_Str"";
  if (model.getPackageMetaData().getSchema() == Schema.IFC4) {
    pluginName=""String_Node_Str"";
  }
 else   if (model.getPackageMetaData().getSchema() == Schema.IFC2X3TC1) {
    pluginName=""String_Node_Str"";
  }
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(pluginName,true);
  Serializer serializer=serializerPlugin.createSerializer(new PluginConfiguration());
  try {
    model.generateMinimalExpressIds();
    PackageMetaData packageMetaData=model.getPackageMetaData();
    serializer.init(model,null,pluginManager,null,packageMetaData,false);
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine == null) {
      throw new UserException(""String_Node_Str"");
    }
    RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
    if (renderEnginePlugin == null) {
      throw new UserException(""String_Node_Str"" + defaultRenderEngine.getPluginDescriptor().getPluginClassName());
    }
    SerializerInputstream serializerInputstream=new SerializerInputstream((EmfSerializer)serializer);
    try {
      RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration(),packageMetaData.getSchema().getEPackageName());
      renderEngine.init();
      try {
        RenderEngineModel renderEngineModel=renderEngine.openModel(serializerInputstream);
        RenderEngineSettings settings=new RenderEngineSettings();
        settings.setPrecision(Precision.SINGLE);
        settings.setIndexFormat(IndexFormat.AUTO_DETECT);
        settings.setGenerateNormals(true);
        settings.setGenerateTriangles(true);
        settings.setGenerateWireFrame(false);
        renderEngineModel.setSettings(settings);
        try {
          renderEngineModel.generateGeneralGeometry();
          EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
          List<IdEObject> products=model.getAllWithSubTypes(productClass);
          EStructuralFeature geometryFeature=productClass.getEStructuralFeature(""String_Node_Str"");
          EStructuralFeature representationFeature=productClass.getEStructuralFeature(""String_Node_Str"");
          for (          IdEObject ifcProduct : products) {
            if (ifcProduct.eGet(representationFeature) != null) {
              RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
              RenderEngineGeometry geometry=renderEngineInstance.generateGeometry();
              if (geometry != null && geometry.getNrIndices() > 0) {
                GeometryInfo geometryInfo=null;
                if (store) {
                  geometryInfo=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryInfo(),pid,rid);
                }
 else {
                  geometryInfo=GeometryFactory.eINSTANCE.createGeometryInfo();
                }
                geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                GeometryData geometryData=null;
                if (store) {
                  geometryData=databaseSession.create(GeometryPackage.eINSTANCE.getGeometryData(),pid,rid);
                }
 else {
                  geometryData=GeometryFactory.eINSTANCE.createGeometryData();
                }
                geometryData.setIndices(intArrayToByteArray(geometry.getIndices()));
                geometryData.setVertices(floatArrayToByteArray(geometry.getVertices()));
                geometryData.setMaterialIndices(intArrayToByteArray(geometry.getMaterialIndices()));
                geometryData.setNormals(floatArrayToByteArray(geometry.getNormals()));
                if (geometry.getMaterialIndices() != null && geometry.getMaterialIndices().length > 0) {
                  boolean hasMaterial=false;
                  float[] vertex_colors=new float[geometry.getVertices().length / 3 * 4];
                  for (int i=0; i < geometry.getMaterialIndices().length; ++i) {
                    int c=geometry.getMaterialIndices()[i];
                    for (int j=0; j < 3; ++j) {
                      int k=geometry.getIndices()[i * 3 + j];
                      if (c > -1) {
                        hasMaterial=true;
                        for (int l=0; l < 4; ++l) {
                          vertex_colors[4 * k + l]=geometry.getMaterials()[4 * c + l];
                        }
                      }
                    }
                  }
                  if (hasMaterial) {
                    geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                  }
                }
                float[] tranformationMatrix=new float[16];
                if (renderEngineInstance.getTransformationMatrix() != null) {
                  tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                  tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                }
 else {
                  Matrix.setIdentityM(tranformationMatrix,0);
                }
                for (int i=0; i < geometry.getIndices().length; i++) {
                  processExtends(geometryInfo,tranformationMatrix,geometry.getVertices(),geometry.getIndices()[i] * 3);
                }
                geometryInfo.setData(geometryData);
                setTransformationMatrix(geometryInfo,tranformationMatrix);
                if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                  int hash=hash(geometryData);
                  if (hashes.containsKey(hash)) {
                    databaseSession.removeFromCommit(geometryData);
                    geometryInfo.setData(hashes.get(hash));
                  }
 else {
                    hashes.put(hash,geometryData);
                  }
                }
                ifcProduct.eSet(geometryFeature,geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
            }
          }
        }
  finally {
          renderEngineModel.close();
        }
      }
  finally {
        renderEngine.close();
      }
    }
 catch (    RenderEngineException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}",0.9856540084388186
160500,"public SummaryMap(){
}","public SummaryMap(PackageMetaData packageMetaData,RevisionSummary revisionSummary){
  this.packageMetaData=packageMetaData;
  for (  RevisionSummaryContainer revisionSummaryContainer : revisionSummary.getList()) {
    for (    RevisionSummaryType revisionSummaryType : revisionSummaryContainer.getTypes()) {
      summaryMap.put((EClass)packageMetaData.getEPackage().getEClassifier(revisionSummaryType.getName()),revisionSummaryType.getCount());
    }
  }
}",0.0918580375782881
160501,"public RevisionSummary toRevisionSummary(DatabaseSession databaseSession) throws BimserverDatabaseException {
  RevisionSummary revisionSummary=databaseSession.create(RevisionSummary.class);
  RevisionSummaryContainer revisionSummaryContainerEntities=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerEntities.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerEntities);
  RevisionSummaryContainer revisionSummaryContainerRelations=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerRelations.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerRelations);
  RevisionSummaryContainer revisionSummaryContainerPrimitives=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerPrimitives.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerPrimitives);
  RevisionSummaryContainer revisionSummaryContainerOther=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerOther.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerOther);
  for (  EClass eClass : summaryMap.keySet()) {
    RevisionSummaryContainer subMap=null;
    if (Ifc2x3tc1Package.eINSTANCE.getIfcObject().isSuperTypeOf(eClass)) {
      subMap=revisionSummaryContainerEntities;
    }
 else     if (Ifc2x3tc1Package.eINSTANCE.getIfcRelationship().isSuperTypeOf(eClass)) {
      subMap=revisionSummaryContainerRelations;
    }
 else     if (eClass.getEAnnotation(""String_Node_Str"") != null) {
      subMap=revisionSummaryContainerPrimitives;
    }
 else {
      subMap=revisionSummaryContainerOther;
    }
    RevisionSummaryType createRevisionSummaryType=databaseSession.create(RevisionSummaryType.class);
    createRevisionSummaryType.setCount(summaryMap.get(eClass));
    createRevisionSummaryType.setName(eClass.getName());
    subMap.getTypes().add(createRevisionSummaryType);
  }
  return revisionSummary;
}","public RevisionSummary toRevisionSummary(DatabaseSession databaseSession) throws BimserverDatabaseException {
  RevisionSummary revisionSummary=databaseSession.create(RevisionSummary.class);
  RevisionSummaryContainer revisionSummaryContainerEntities=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerEntities.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerEntities);
  RevisionSummaryContainer revisionSummaryContainerRelations=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerRelations.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerRelations);
  RevisionSummaryContainer revisionSummaryContainerPrimitives=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerPrimitives.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerPrimitives);
  RevisionSummaryContainer revisionSummaryContainerOther=databaseSession.create(RevisionSummaryContainer.class);
  revisionSummaryContainerOther.setName(""String_Node_Str"");
  revisionSummary.getList().add(revisionSummaryContainerOther);
  for (  EClass eClass : summaryMap.keySet()) {
    RevisionSummaryContainer subMap=null;
    if (((EClass)packageMetaData.getEPackage().getEClassifier(""String_Node_Str"")).isSuperTypeOf(eClass)) {
      subMap=revisionSummaryContainerEntities;
    }
 else     if (((EClass)packageMetaData.getEPackage().getEClassifier(""String_Node_Str"")).isSuperTypeOf(eClass)) {
      subMap=revisionSummaryContainerRelations;
    }
 else     if (eClass.getEAnnotation(""String_Node_Str"") != null) {
      subMap=revisionSummaryContainerPrimitives;
    }
 else {
      subMap=revisionSummaryContainerOther;
    }
    RevisionSummaryType createRevisionSummaryType=databaseSession.create(RevisionSummaryType.class);
    createRevisionSummaryType.setCount(summaryMap.get(eClass));
    createRevisionSummaryType.setName(eClass.getName());
    subMap.getTypes().add(createRevisionSummaryType);
  }
  return revisionSummary;
}",0.945827232796486
160502,"@Override public void execute(IfcModelInterface model,Project project,ConcreteRevision concreteRevision,DatabaseSession databaseSession,Map<Long,IdEObject> created,Map<Long,IdEObject> deleted) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(project.getId());
  eObject.setRid(concreteRevision.getId());
  eObject.setLoaded();
  databaseSession.store(eObject,project.getId(),concreteRevision.getId());
  created.put(oid,eObject);
}","@Override public void execute(IfcModelInterface model,Project project,ConcreteRevision concreteRevision,DatabaseSession databaseSession,Map<Long,IdEObject> created,Map<Long,IdEObject> deleted) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClass(project.getSchema(),type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(project.getId());
  eObject.setRid(concreteRevision.getId());
  eObject.setLoaded();
  databaseSession.store(eObject,project.getId(),concreteRevision.getId());
  created.put(oid,eObject);
}",0.9821073558648112
160503,"public EClass getEClassForName(String className){
  for (  EPackage ePackage : emfPackages.values()) {
    if (ePackage.getEClassifier(className) != null) {
      return (EClass)ePackage.getEClassifier(className);
    }
  }
  return null;
}","public EClass getEClassForName(String packageName,String className){
  EPackage ePackage=emfPackages.get(packageName);
  if (ePackage.getEClassifier(className) != null) {
    return (EClass)ePackage.getEClassifier(className);
  }
  return null;
}",0.7325102880658436
160504,"public EClass getEClassForName(String className){
  return database.getEClassForName(className);
}","public EClass getEClassForName(String packageName,String className){
  return database.getEClassForName(packageName,className);
}",0.8634361233480177
160505,"protected void checkGeometry(SerializerPluginConfiguration serializerPluginConfiguration,PluginManager pluginManager,IfcModelInterface model,Project project,ConcreteRevision concreteRevision,Revision revision) throws BimserverDatabaseException, GeometryGeneratingException {
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(serializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
  if (serializerPlugin.needsGeometry()) {
    if (!revision.isHasGeometry()) {
      setProgress(""String_Node_Str"",-1);
      new GeometryGenerator(bimServer).generateGeometry(authorization.getUoid(),pluginManager,getDatabaseSession(),model,project.getId(),concreteRevision.getId(),false,null);
    }
 else {
      List<IfcProduct> allWithSubTypes=model.getAllWithSubTypes(IfcProduct.class);
      int lastSize=-1;
      while (lastSize != allWithSubTypes.size()) {
        lastSize=allWithSubTypes.size();
        for (        IfcProduct ifcProduct : new ArrayList<>(allWithSubTypes)) {
          GeometryInfo geometryInfo=ifcProduct.getGeometry();
          if (geometryInfo != null) {
            geometryInfo.load();
            geometryInfo.getData().load();
            geometryInfo.getTransformation();
            geometryInfo.getMinBounds().load();
            geometryInfo.getMaxBounds().load();
          }
        }
        allWithSubTypes=model.getAllWithSubTypes(IfcProduct.class);
      }
    }
  }
}","protected void checkGeometry(SerializerPluginConfiguration serializerPluginConfiguration,PluginManager pluginManager,IfcModelInterface model,Project project,ConcreteRevision concreteRevision,Revision revision) throws BimserverDatabaseException, GeometryGeneratingException {
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(serializerPluginConfiguration.getPluginDescriptor().getPluginClassName(),true);
  if (serializerPlugin.needsGeometry()) {
    if (!revision.isHasGeometry()) {
      setProgress(""String_Node_Str"",-1);
      new GeometryGenerator(bimServer).generateGeometry(authorization.getUoid(),pluginManager,getDatabaseSession(),model,project.getId(),concreteRevision.getId(),false,null);
    }
 else {
      EClass productClass=model.getPackageMetaData().getEClass(""String_Node_Str"");
      List<IdEObject> allWithSubTypes=new ArrayList<>(model.getAllWithSubTypes(productClass));
      for (      IdEObject ifcProduct : allWithSubTypes) {
        ifcProduct.load();
        GeometryInfo geometryInfo=(GeometryInfo)ifcProduct.eGet(productClass.getEStructuralFeature(""String_Node_Str""));
        if (geometryInfo != null) {
          geometryInfo.load();
          geometryInfo.getData().load();
          geometryInfo.getTransformation();
          geometryInfo.getMinBounds().load();
          geometryInfo.getMaxBounds().load();
        }
      }
    }
  }
}",0.6413768879522305
160506,"private void processDefine(JsonObject query,JsonObject define,IfcModelInterface model,QueryInterface queryInterface,List<IdEObject> objects) throws BimserverDatabaseException, IfcModelInterfaceException {
  for (  IdEObject object : objects) {
    if (define.has(""String_Node_Str"")) {
      String fieldName=define.get(""String_Node_Str"").getAsString();
      EStructuralFeature eStructuralFeature=object.eClass().getEStructuralFeature(fieldName);
      if (eStructuralFeature == null) {
        return;
      }
      Object value=object.eGet(eStructuralFeature);
      if (eStructuralFeature.isMany()) {
        if (eStructuralFeature instanceof EReference) {
          List<?> list=((List<?>)value);
          for (          Object o : list) {
            if (!model.contains(((IdEObject)o).getOid())) {
              model.add(((IdEObject)o).getOid(),((IdEObject)o));
            }
            ((IdEObject)o).load();
            if (define.has(""String_Node_Str"")) {
              if (define.get(""String_Node_Str"").isJsonObject()) {
                processDefine(query,define.get(""String_Node_Str"").getAsJsonObject(),model,queryInterface,Collections.singletonList((IdEObject)o));
              }
 else               if (define.get(""String_Node_Str"").isJsonArray()) {
                processInclude(query,define,model,queryInterface,Collections.singletonList(((IdEObject)o)));
              }
 else {
                processSingleInclude(query,define.get(""String_Node_Str""),model,queryInterface,Collections.singletonList(((IdEObject)o)));
              }
            }
          }
        }
      }
 else {
        if (value != null && value instanceof IdEObject) {
          if (!model.contains(((IdEObject)value).getOid())) {
            model.add(((IdEObject)value).getOid(),((IdEObject)value));
          }
          ((IdEObject)value).load();
          if (define.has(""String_Node_Str"")) {
            processDefine(query,define,model,queryInterface,Collections.singletonList((IdEObject)value));
          }
        }
      }
    }
  }
}","private void processDefine(JsonObject query,JsonObject define,IfcModelInterface model,QueryInterface queryInterface,List<IdEObject> objects) throws BimserverDatabaseException, IfcModelInterfaceException {
  for (  IdEObject object : objects) {
    if (define.has(""String_Node_Str"")) {
      String fieldName=define.get(""String_Node_Str"").getAsString();
      EStructuralFeature eStructuralFeature=object.eClass().getEStructuralFeature(fieldName);
      if (eStructuralFeature == null) {
        return;
      }
      Object value=object.eGet(eStructuralFeature);
      if (eStructuralFeature.isMany()) {
        if (eStructuralFeature instanceof EReference) {
          List<?> list=((List<?>)value);
          for (          Object o : list) {
            if (o instanceof IfcClassificationReference) {
              System.out.println();
            }
            if (!model.contains(((IdEObject)o).getOid())) {
              model.add(((IdEObject)o).getOid(),((IdEObject)o));
            }
            ((IdEObject)o).load();
            if (define.has(""String_Node_Str"")) {
              if (define.get(""String_Node_Str"").isJsonObject()) {
                processDefine(query,define.get(""String_Node_Str"").getAsJsonObject(),model,queryInterface,Collections.singletonList((IdEObject)o));
              }
 else               if (define.get(""String_Node_Str"").isJsonArray()) {
                processInclude(query,define,model,queryInterface,Collections.singletonList(((IdEObject)o)));
              }
 else {
                processSingleInclude(query,define.get(""String_Node_Str""),model,queryInterface,Collections.singletonList(((IdEObject)o)));
              }
            }
          }
        }
      }
 else {
        if (value != null && value instanceof IdEObject) {
          if (!model.contains(((IdEObject)value).getOid())) {
            model.add(((IdEObject)value).getOid(),((IdEObject)value));
          }
          ((IdEObject)value).load();
          if (define.has(""String_Node_Str"")) {
            processDefine(query,define,model,queryInterface,Collections.singletonList((IdEObject)value));
          }
        }
      }
    }
  }
}",0.9740042928690676
160507,"public void onText(Reader reader){
  JsonReader jsonreader=new JsonReader(reader);
  JsonParser parser=new JsonParser();
  JsonObject request=(JsonObject)parser.parse(jsonreader);
  if (request.has(""String_Node_Str"")) {
  }
 else   if (request.has(""String_Node_Str"")) {
    if (request.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
      String token=request.get(""String_Node_Str"").getAsString();
      final int topicId=request.get(""String_Node_Str"").getAsInt();
      try {
        final ServiceMap serviceMap=bimServer.getServiceFactory().get(token,AccessMethod.INTERNAL);
        final long downloadId=request.get(""String_Node_Str"").getAsLong();
        new Thread(){
          @Override public void run(){
            try {
              final ProgressTopic progressTopic=bimServer.getNotificationsManager().getProgressTopic(topicId);
              LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(downloadId);
              MessagingSerializer messagingSerializer=longAction.getMessagingSerializer();
              long s=System.nanoTime();
              int messages=0;
              boolean writeMessage=true;
              do {
                ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
                DataOutputStream dataOutputStream=new DataOutputStream(byteArrayOutputStream);
                dataOutputStream.writeInt(topicId);
                writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
                if (byteArrayOutputStream.size() > 4) {
                  messages++;
                  streamingSocketInterface.send(byteArrayOutputStream.toByteArray(),0,byteArrayOutputStream.size());
                }
              }
 while (writeMessage);
              long e=System.nanoTime();
              System.out.println(((e - s) / 1000000) + ""String_Node_Str"" + messages);
            }
 catch (            IOException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
.start();
      }
 catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else   if (request.has(""String_Node_Str"")) {
    String token=request.get(""String_Node_Str"").getAsString();
    try {
      ServiceMap serviceMap=bimServer.getServiceFactory().get(token,AccessMethod.JSON);
      uoid=serviceMap.getBimServerAuthInterface().getLoggedInUser().getOid();
      this.endpointid=bimServer.getEndPointManager().register(this);
      JsonObject enpointMessage=new JsonObject();
      enpointMessage.add(""String_Node_Str"",new JsonPrimitive(endpointid));
      streamingSocketInterface.send(enpointMessage);
    }
 catch (    UserException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    ServerException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 else {
    bimServer.getJsonHandler().execute(request,null,new NullWriter());
  }
}","public void onText(Reader reader){
  JsonReader jsonreader=new JsonReader(reader);
  JsonParser parser=new JsonParser();
  JsonObject request=(JsonObject)parser.parse(jsonreader);
  if (request.has(""String_Node_Str"")) {
  }
 else   if (request.has(""String_Node_Str"")) {
    if (request.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
      String token=request.get(""String_Node_Str"").getAsString();
      final int topicId=request.get(""String_Node_Str"").getAsInt();
      try {
        final ServiceMap serviceMap=bimServer.getServiceFactory().get(token,AccessMethod.INTERNAL);
        final long downloadId=request.get(""String_Node_Str"").getAsLong();
        new Thread(){
          @Override public void run(){
            try {
              final ProgressTopic progressTopic=bimServer.getNotificationsManager().getProgressTopic(topicId);
              LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(downloadId);
              MessagingSerializer messagingSerializer=longAction.getMessagingSerializer();
              boolean writeMessage=true;
              do {
                ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
                DataOutputStream dataOutputStream=new DataOutputStream(byteArrayOutputStream);
                dataOutputStream.writeInt(topicId);
                dataOutputStream.writeInt(0);
                writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
                int messages=1;
                while (byteArrayOutputStream.size() < BUFFER_SIZE && writeMessage) {
                  messages++;
                  writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
                }
                byte[] byteArray=byteArrayOutputStream.toByteArray();
                ByteBuffer byteBuffer=ByteBuffer.wrap(byteArray);
                byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
                byteBuffer.putInt(4,messages);
                if (byteArrayOutputStream.size() > 8) {
                  streamingSocketInterface.sendBlocking(byteArray,0,byteArray.length);
                }
              }
 while (writeMessage);
            }
 catch (            IOException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
.start();
      }
 catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else   if (request.has(""String_Node_Str"")) {
    String token=request.get(""String_Node_Str"").getAsString();
    try {
      ServiceMap serviceMap=bimServer.getServiceFactory().get(token,AccessMethod.JSON);
      uoid=serviceMap.getBimServerAuthInterface().getLoggedInUser().getOid();
      this.endpointid=bimServer.getEndPointManager().register(this);
      JsonObject enpointMessage=new JsonObject();
      enpointMessage.add(""String_Node_Str"",new JsonPrimitive(endpointid));
      streamingSocketInterface.send(enpointMessage);
    }
 catch (    UserException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    ServerException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 else {
    bimServer.getJsonHandler().execute(request,null,new NullWriter());
  }
}",0.8731535003211304
160508,"@Override public void run(){
  try {
    final ProgressTopic progressTopic=bimServer.getNotificationsManager().getProgressTopic(topicId);
    LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(downloadId);
    MessagingSerializer messagingSerializer=longAction.getMessagingSerializer();
    long s=System.nanoTime();
    int messages=0;
    boolean writeMessage=true;
    do {
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      DataOutputStream dataOutputStream=new DataOutputStream(byteArrayOutputStream);
      dataOutputStream.writeInt(topicId);
      writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
      if (byteArrayOutputStream.size() > 4) {
        messages++;
        streamingSocketInterface.send(byteArrayOutputStream.toByteArray(),0,byteArrayOutputStream.size());
      }
    }
 while (writeMessage);
    long e=System.nanoTime();
    System.out.println(((e - s) / 1000000) + ""String_Node_Str"" + messages);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    final ProgressTopic progressTopic=bimServer.getNotificationsManager().getProgressTopic(topicId);
    LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(downloadId);
    MessagingSerializer messagingSerializer=longAction.getMessagingSerializer();
    boolean writeMessage=true;
    do {
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      DataOutputStream dataOutputStream=new DataOutputStream(byteArrayOutputStream);
      dataOutputStream.writeInt(topicId);
      dataOutputStream.writeInt(0);
      writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
      int messages=1;
      while (byteArrayOutputStream.size() < BUFFER_SIZE && writeMessage) {
        messages++;
        writeMessage=messagingSerializer.writeMessage(byteArrayOutputStream,null);
      }
      byte[] byteArray=byteArrayOutputStream.toByteArray();
      ByteBuffer byteBuffer=ByteBuffer.wrap(byteArray);
      byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
      byteBuffer.putInt(4,messages);
      if (byteArrayOutputStream.size() > 8) {
        streamingSocketInterface.sendBlocking(byteArray,0,byteArray.length);
      }
    }
 while (writeMessage);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.4665592264302981
160509,"@Override public void send(byte[] data,int start,int length){
  try {
    outbound.writeBinaryMessage(ByteBuffer.wrap(data,start,length));
    outbound.flush();
  }
 catch (  IOException e) {
  }
}","@Override public void send(byte[] data,int start,int length){
  try {
    outbound.writeBinaryMessage(ByteBuffer.wrap(data,start,length));
  }
 catch (  IOException e) {
  }
}",0.9408602150537636
160510,"@Override public void send(byte[] data,int start,int length){
  try {
    websocketSession.getAsyncRemote().sendBinary(ByteBuffer.wrap(data,start,length));
    websocketSession.getAsyncRemote().flushBatch();
  }
 catch (  IOException e) {
  }
}","@Override public void send(byte[] data,int start,int length){
  websocketSession.getAsyncRemote().sendBinary(ByteBuffer.wrap(data,start,length));
}",0.7519181585677749
160511,"private void writeList(EObject object,EStructuralFeature feature) throws SerializerException, IOException {
  List<?> list=(List<?>)object.eGet(feature);
  List<?> doubleStingList=null;
  if (feature.getEType() == EcorePackage.eINSTANCE.getEDouble() && model.isUseDoubleStrings()) {
    EStructuralFeature doubleStringFeature=feature.getEContainingClass().getEStructuralFeature(feature.getName() + ""String_Node_Str"");
    if (doubleStringFeature == null) {
      throw new SerializerException(""String_Node_Str"" + feature.getName() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    doubleStingList=(List<?>)object.eGet(doubleStringFeature);
  }
  if (list.isEmpty()) {
    if (!feature.isUnsettable()) {
      print(OPEN_CLOSE_PAREN);
    }
 else {
      print(""String_Node_Str"");
    }
  }
 else {
    print(OPEN_PAREN);
    boolean first=true;
    int index=0;
    for (    Object listObject : list) {
      if (!first) {
        print(COMMA);
      }
      if ((listObject instanceof IdEObject) && model.contains((IdEObject)listObject)) {
        IdEObject eObject=(IdEObject)listObject;
        print(DASH);
        print(String.valueOf(getExpressId(eObject)));
      }
 else {
        if (listObject == null) {
          print(DOLLAR);
        }
 else {
          if (listObject instanceof IdEObject && feature.getEType().getEAnnotation(""String_Node_Str"") != null) {
            IdEObject eObject=(IdEObject)listObject;
            Object realVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
            if (realVal instanceof Double) {
              Object stringVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
              if (stringVal != null && model.isUseDoubleStrings()) {
                print((String)stringVal);
              }
 else {
                print((String)realVal);
              }
            }
 else {
              writePrimitive(realVal);
            }
          }
 else           if (listObject instanceof EObject) {
            IdEObject eObject=(IdEObject)listObject;
            EClass class1=eObject.eClass();
            EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
            if (structuralFeature != null) {
              Object realVal=eObject.eGet(structuralFeature);
              print(upperCases.get(class1));
              print(OPEN_PAREN);
              if (realVal instanceof Double) {
                Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
                if (stringVal != null && model.isUseDoubleStrings()) {
                  print((String)stringVal);
                }
 else {
                  print((String)realVal);
                }
              }
 else {
                writePrimitive(realVal);
              }
              print(CLOSE_PAREN);
            }
 else {
              LOGGER.info(""String_Node_Str"" + object + ""String_Node_Str""+ feature.getName()+ ""String_Node_Str""+ eObject);
            }
          }
 else {
            if (doubleStingList != null) {
              if (index < doubleStingList.size()) {
                String val=(String)doubleStingList.get(index);
                if (val == null) {
                  writePrimitive(listObject);
                }
 else {
                  print((String)val);
                }
              }
 else {
                writePrimitive(listObject);
              }
            }
 else {
              writePrimitive(listObject);
            }
          }
        }
      }
      first=false;
      index++;
    }
    print(CLOSE_PAREN);
  }
}","private void writeList(EObject object,EStructuralFeature feature) throws SerializerException, IOException {
  List<?> list=(List<?>)object.eGet(feature);
  List<?> doubleStingList=null;
  if (feature.getEType() == EcorePackage.eINSTANCE.getEDouble() && model.isUseDoubleStrings()) {
    EStructuralFeature doubleStringFeature=feature.getEContainingClass().getEStructuralFeature(feature.getName() + ""String_Node_Str"");
    if (doubleStringFeature == null) {
      throw new SerializerException(""String_Node_Str"" + feature.getName() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    doubleStingList=(List<?>)object.eGet(doubleStringFeature);
  }
  if (list.isEmpty()) {
    if (!feature.isUnsettable()) {
      print(OPEN_CLOSE_PAREN);
    }
 else {
      print(""String_Node_Str"");
    }
  }
 else {
    print(OPEN_PAREN);
    boolean first=true;
    int index=0;
    for (    Object listObject : list) {
      if (!first) {
        print(COMMA);
      }
      if ((listObject instanceof IdEObject) && model.contains((IdEObject)listObject)) {
        IdEObject eObject=(IdEObject)listObject;
        print(DASH);
        print(String.valueOf(getExpressId(eObject)));
      }
 else {
        if (listObject == null) {
          print(DOLLAR);
        }
 else {
          if (listObject instanceof IdEObject && feature.getEType().getEAnnotation(""String_Node_Str"") != null) {
            IdEObject eObject=(IdEObject)listObject;
            Object realVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
            if (realVal instanceof Double) {
              Object stringVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
              if (stringVal != null && model.isUseDoubleStrings()) {
                print((String)stringVal);
              }
 else {
                print((String)realVal);
              }
            }
 else {
              writePrimitive(realVal);
            }
          }
 else           if (listObject instanceof EObject) {
            IdEObject eObject=(IdEObject)listObject;
            EClass class1=eObject.eClass();
            EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
            if (structuralFeature != null) {
              Object realVal=eObject.eGet(structuralFeature);
              print(upperCases.get(class1));
              print(OPEN_PAREN);
              if (realVal instanceof Double) {
                if (model.isUseDoubleStrings()) {
                  Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
                  if (stringVal != null) {
                    print((String)stringVal);
                  }
 else {
                    writePrimitive(realVal);
                  }
                }
              }
 else {
                writePrimitive(realVal);
              }
              print(CLOSE_PAREN);
            }
 else {
              LOGGER.info(""String_Node_Str"" + object + ""String_Node_Str""+ feature.getName()+ ""String_Node_Str""+ eObject);
            }
          }
 else {
            if (doubleStingList != null) {
              if (index < doubleStingList.size()) {
                String val=(String)doubleStingList.get(index);
                if (val == null) {
                  writePrimitive(listObject);
                }
 else {
                  print((String)val);
                }
              }
 else {
                writePrimitive(listObject);
              }
            }
 else {
              writePrimitive(listObject);
            }
          }
        }
      }
      first=false;
      index++;
    }
    print(CLOSE_PAREN);
  }
}",0.9599234030912324
160512,"public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor clashDetection=StoreFactory.eINSTANCE.createServiceDescriptor();
  clashDetection.setProviderName(""String_Node_Str"");
  clashDetection.setIdentifier(getClass().getName());
  clashDetection.setName(""String_Node_Str"");
  clashDetection.setDescription(""String_Node_Str"");
  clashDetection.setNotificationProtocol(AccessMethod.INTERNAL);
  clashDetection.setReadRevision(true);
  clashDetection.setWriteExtendedData(""String_Node_Str"");
  clashDetection.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(clashDetection,new NewRevisionHandler(){
    @SuppressWarnings(""String_Node_Str"") public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Bcf bcf=new Bcf();
      SSerializerPluginConfiguration sSerializer;
      try {
        sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
        long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
        SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
        try {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          DataSource dataSource=downloadData.getFile().getDataSource();
          if (dataSource instanceof ByteArrayDataSource) {
            org.apache.commons.io.IOUtils.copy(((ByteArrayDataSource)dataSource).getInputStream(),baos);
          }
 else {
            ((EmfSerializerDataSource)dataSource).getSerializer().writeToOutputStream(baos);
          }
          Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
          deserializer.init(getPluginManager().requireSchemaDefinition());
          IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
          List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
          IfcProject mainIfcProject=null;
          if (!ifcProjects.isEmpty()) {
            mainIfcProject=ifcProjects.get(0);
          }
          RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
          renderEngine.init();
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
          Set<RenderEngineClash> clashes=null;
          RenderEngineGeometry geometry=null;
          StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
          boolean renderImage=true;
          try {
            stillImageRenderer.init(model);
          }
 catch (          StillImageRendererException e) {
            renderImage=false;
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
        SFile file=new SFile();
        SExtendedData extendedData=new SExtendedData();
        extendedData.setTitle(""String_Node_Str"");
        file.setFilename(""String_Node_Str"");
        extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
        try {
          byte[] bytes=bcf.toBytes();
          file.setData(bytes);
          file.setMime(""String_Node_Str"");
          long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
          extendedData.setFileId(fileId);
          bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor clashDetection=StoreFactory.eINSTANCE.createServiceDescriptor();
  clashDetection.setProviderName(""String_Node_Str"");
  clashDetection.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  clashDetection.setName(""String_Node_Str"");
  clashDetection.setDescription(""String_Node_Str"");
  clashDetection.setNotificationProtocol(AccessMethod.INTERNAL);
  clashDetection.setReadRevision(true);
  clashDetection.setWriteExtendedData(""String_Node_Str"");
  clashDetection.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(clashDetection,new NewRevisionHandler(){
    @SuppressWarnings(""String_Node_Str"") public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Bcf bcf=new Bcf();
      SSerializerPluginConfiguration sSerializer;
      try {
        sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
        long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
        SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
        try {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          DataSource dataSource=downloadData.getFile().getDataSource();
          if (dataSource instanceof ByteArrayDataSource) {
            org.apache.commons.io.IOUtils.copy(((ByteArrayDataSource)dataSource).getInputStream(),baos);
          }
 else {
            ((EmfSerializerDataSource)dataSource).getSerializer().writeToOutputStream(baos);
          }
          Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
          deserializer.init(getPluginManager().requireSchemaDefinition());
          IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
          List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
          IfcProject mainIfcProject=null;
          if (!ifcProjects.isEmpty()) {
            mainIfcProject=ifcProjects.get(0);
          }
          RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
          renderEngine.init();
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
          Set<RenderEngineClash> clashes=null;
          RenderEngineGeometry geometry=null;
          StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
          boolean renderImage=true;
          try {
            stillImageRenderer.init(model);
          }
 catch (          StillImageRendererException e) {
            renderImage=false;
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
        SFile file=new SFile();
        SExtendedData extendedData=new SExtendedData();
        extendedData.setTitle(""String_Node_Str"");
        file.setFilename(""String_Node_Str"");
        extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
        try {
          byte[] bytes=bcf.toBytes();
          file.setData(bytes);
          file.setMime(""String_Node_Str"");
          long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
          extendedData.setFileId(fileId);
          bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9909251620506776
160513,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Date startDate=new Date();
      Long topicId=null;
      try {
        topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        SSerializerPluginConfiguration stepSerializerRemote=bimServerClientInterface.getBimsie1ServiceInterface().getSerializerByContentType(""String_Node_Str"");
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        bimServerClientInterface.download(roid,stepSerializerRemote.getOid(),outputStream);
        BimServerClientInterface localClient=getLocalBimServerClientInterface(new UserTokenAuthentication(userToken));
        PluginConfiguration pluginConfiguration=new org.bimserver.plugins.PluginConfiguration(settings);
        String localProjectName=pluginConfiguration.getString(""String_Node_Str"");
        List<SProject> projectsByName=localClient.getBimsie1ServiceInterface().getProjectsByName(localProjectName);
        if (projectsByName.isEmpty()) {
          throw new UserException(""String_Node_Str"" + localProjectName + ""String_Node_Str"");
        }
        SProject localProject=projectsByName.get(0);
        SDeserializerPluginConfiguration localDeserializer=localClient.getBimsie1ServiceInterface().getDeserializerByName(""String_Node_Str"");
        localClient.getBimsie1ServiceInterface().checkin(localProject.getOid(),""String_Node_Str"",localDeserializer.getOid(),(long)outputStream.size(),""String_Node_Str"",new DataHandler(new InputStreamDataSource(new ByteArrayInputStream(outputStream.toByteArray()))),true);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ChannelConnectionException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        SLongActionState state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        try {
          bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
          bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
        }
 catch (        PublicInterfaceNotFoundException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Date startDate=new Date();
      Long topicId=null;
      try {
        topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        SSerializerPluginConfiguration stepSerializerRemote=bimServerClientInterface.getBimsie1ServiceInterface().getSerializerByContentType(""String_Node_Str"");
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        bimServerClientInterface.download(roid,stepSerializerRemote.getOid(),outputStream);
        BimServerClientInterface localClient=getLocalBimServerClientInterface(new UserTokenAuthentication(userToken));
        PluginConfiguration pluginConfiguration=new org.bimserver.plugins.PluginConfiguration(settings);
        String localProjectName=pluginConfiguration.getString(""String_Node_Str"");
        List<SProject> projectsByName=localClient.getBimsie1ServiceInterface().getProjectsByName(localProjectName);
        if (projectsByName.isEmpty()) {
          throw new UserException(""String_Node_Str"" + localProjectName + ""String_Node_Str"");
        }
        SProject localProject=projectsByName.get(0);
        SDeserializerPluginConfiguration localDeserializer=localClient.getBimsie1ServiceInterface().getDeserializerByName(""String_Node_Str"");
        localClient.getBimsie1ServiceInterface().checkin(localProject.getOid(),""String_Node_Str"",localDeserializer.getOid(),(long)outputStream.size(),""String_Node_Str"",new DataHandler(new InputStreamDataSource(new ByteArrayInputStream(outputStream.toByteArray()))),true);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ChannelConnectionException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        SLongActionState state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        try {
          bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
          bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
        }
 catch (        PublicInterfaceNotFoundException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
);
}",0.9895366218236172
160514,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        for (int i=0; i < 100; i++) {
          SLongActionState state=new SLongActionState();
          state.setProgress(i);
          state.setTitle(""String_Node_Str"");
          state.setState(SActionState.STARTED);
          state.setStart(startDate);
          bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        SLongActionState state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        for (int i=0; i < 100; i++) {
          SLongActionState state=new SLongActionState();
          state.setProgress(i);
          state.setTitle(""String_Node_Str"");
          state.setState(SActionState.STARTED);
          state.setStart(startDate);
          bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        SLongActionState state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9819967266775778
160515,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        for (int i=0; i < 100; i++) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        for (int i=0; i < 100; i++) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9817578772802652
160516,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_EXTENDED_DATA);
  registerNewExtendedDataOnRevisionHandler(serviceDescriptor,new NewExtendedDataOnRevisionHandler(){
    @Override public void newExtendedDataOnRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    long edid,    String userToken,    long soid,    SObjectType settings){
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        for (int i=0; i < 100; i++) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServerException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_EXTENDED_DATA);
  registerNewExtendedDataOnRevisionHandler(serviceDescriptor,new NewExtendedDataOnRevisionHandler(){
    @Override public void newExtendedDataOnRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    long edid,    String userToken,    long soid,    SObjectType settings){
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        for (int i=0; i < 100; i++) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServerException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.983264507715714
160517,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setWriteRevision(true);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
        DeserializerPlugin deserializerPlugin=getPluginManager().getFirstDeserializer(""String_Node_Str"",true);
        Deserializer deserializer=deserializerPlugin.createDeserializer(null);
        deserializer.init(getPluginManager().requireSchemaDefinition());
        deserializer=deserializerPlugin.createDeserializer(null);
        deserializer.init(getPluginManager().requireSchemaDefinition());
        InputStream resourceAsInputStream=getPluginManager().getPluginContext(FurniturePlacerServicePlugin.this).getResourceAsInputStream(""String_Node_Str"");
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
        IOUtils.copy(resourceAsInputStream,byteArrayOutputStream);
        IfcModelInterface furnishingModel=deserializer.read(new ByteArrayInputStream(byteArrayOutputStream.toByteArray()),""String_Node_Str"",byteArrayOutputStream.size());
        IfcFurnishingElement picknick=(IfcFurnishingElement)furnishingModel.getByName(Ifc2x3tc1Package.eINSTANCE.getIfcFurnishingElement(),""String_Node_Str"");
        ModelHelper modelHelper=new ModelHelper(new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),getPluginManager().requireSchemaDefinition()),model);
        modelHelper.setTargetModel(model);
        modelHelper.setObjectFactory(model);
        IfcProductDefinitionShape representation=(IfcProductDefinitionShape)picknick.getRepresentation();
        IfcRepresentation surfaceModel=null;
        IfcRepresentation boundingBox=null;
        for (        IfcRepresentation ifcRepresentation : representation.getRepresentations()) {
          IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)ifcRepresentation;
          if (ifcShapeRepresentation.getRepresentationType().equals(""String_Node_Str"")) {
            surfaceModel=(IfcRepresentation)modelHelper.copy(ifcShapeRepresentation);
          }
 else           if (ifcShapeRepresentation.getRepresentationType().equals(""String_Node_Str"")) {
            boundingBox=(IfcRepresentation)modelHelper.copy(ifcShapeRepresentation);
          }
        }
        IfcOwnerHistory ownerHistory=null;
        List<IfcOwnerHistory> all=model.getAll(IfcOwnerHistory.class);
        if (all.size() > 0) {
          ownerHistory=all.get(0);
        }
        for (        IfcBuildingStorey ifcBuildingStorey : model.getAll(IfcBuildingStorey.class)) {
          for (          IfcRelDecomposes ifcRelDecomposes : ifcBuildingStorey.getIsDecomposedBy()) {
            for (            IfcObjectDefinition ifcObjectDefinition : ifcRelDecomposes.getRelatedObjects()) {
              if (ifcObjectDefinition instanceof IfcSpace) {
                IfcSpace ifcSpace=(IfcSpace)ifcObjectDefinition;
                IfcFurnishingElement newFurnishing=model.create(IfcFurnishingElement.class);
                IfcRelContainedInSpatialStructure containedInSpatialStructure2=model.create(IfcRelContainedInSpatialStructure.class);
                containedInSpatialStructure2.setRelatingStructure(ifcBuildingStorey);
                containedInSpatialStructure2.getRelatedElements().add(newFurnishing);
                newFurnishing.setName(""String_Node_Str"");
                newFurnishing.setGlobalId(""String_Node_Str"");
                newFurnishing.setOwnerHistory(ownerHistory);
                IfcProductDefinitionShape definitionShape=model.create(IfcProductDefinitionShape.class);
                newFurnishing.setRepresentation(definitionShape);
                definitionShape.getRepresentations().add(boundingBox);
                definitionShape.getRepresentations().add(surfaceModel);
                IfcLocalPlacement localPlacement=model.create(IfcLocalPlacement.class);
                localPlacement.setPlacementRelTo(ifcSpace.getObjectPlacement());
                IfcAxis2Placement3D axis2Placement3D=model.create(IfcAxis2Placement3D.class);
                localPlacement.setRelativePlacement(axis2Placement3D);
                IfcCartesianPoint pos=model.create(IfcCartesianPoint.class);
                pos.getCoordinates().add(-3d);
                pos.getCoordinates().add(+0.5d);
                pos.getCoordinates().add(0d);
                axis2Placement3D.setLocation(pos);
                newFurnishing.setObjectPlacement(localPlacement);
              }
            }
          }
        }
        model.commit(""String_Node_Str"");
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setWriteRevision(true);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
        DeserializerPlugin deserializerPlugin=getPluginManager().getFirstDeserializer(""String_Node_Str"",true);
        Deserializer deserializer=deserializerPlugin.createDeserializer(null);
        deserializer.init(getPluginManager().requireSchemaDefinition());
        deserializer=deserializerPlugin.createDeserializer(null);
        deserializer.init(getPluginManager().requireSchemaDefinition());
        InputStream resourceAsInputStream=getPluginManager().getPluginContext(FurniturePlacerServicePlugin.this).getResourceAsInputStream(""String_Node_Str"");
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
        IOUtils.copy(resourceAsInputStream,byteArrayOutputStream);
        IfcModelInterface furnishingModel=deserializer.read(new ByteArrayInputStream(byteArrayOutputStream.toByteArray()),""String_Node_Str"",byteArrayOutputStream.size());
        IfcFurnishingElement picknick=(IfcFurnishingElement)furnishingModel.getByName(Ifc2x3tc1Package.eINSTANCE.getIfcFurnishingElement(),""String_Node_Str"");
        ModelHelper modelHelper=new ModelHelper(new HideAllInversesObjectIDM(CollectionUtils.singleSet(Ifc2x3tc1Package.eINSTANCE),getPluginManager().requireSchemaDefinition()),model);
        modelHelper.setTargetModel(model);
        modelHelper.setObjectFactory(model);
        IfcProductDefinitionShape representation=(IfcProductDefinitionShape)picknick.getRepresentation();
        IfcRepresentation surfaceModel=null;
        IfcRepresentation boundingBox=null;
        for (        IfcRepresentation ifcRepresentation : representation.getRepresentations()) {
          IfcShapeRepresentation ifcShapeRepresentation=(IfcShapeRepresentation)ifcRepresentation;
          if (ifcShapeRepresentation.getRepresentationType().equals(""String_Node_Str"")) {
            surfaceModel=(IfcRepresentation)modelHelper.copy(ifcShapeRepresentation);
          }
 else           if (ifcShapeRepresentation.getRepresentationType().equals(""String_Node_Str"")) {
            boundingBox=(IfcRepresentation)modelHelper.copy(ifcShapeRepresentation);
          }
        }
        IfcOwnerHistory ownerHistory=null;
        List<IfcOwnerHistory> all=model.getAll(IfcOwnerHistory.class);
        if (all.size() > 0) {
          ownerHistory=all.get(0);
        }
        for (        IfcBuildingStorey ifcBuildingStorey : model.getAll(IfcBuildingStorey.class)) {
          for (          IfcRelDecomposes ifcRelDecomposes : ifcBuildingStorey.getIsDecomposedBy()) {
            for (            IfcObjectDefinition ifcObjectDefinition : ifcRelDecomposes.getRelatedObjects()) {
              if (ifcObjectDefinition instanceof IfcSpace) {
                IfcSpace ifcSpace=(IfcSpace)ifcObjectDefinition;
                IfcFurnishingElement newFurnishing=model.create(IfcFurnishingElement.class);
                IfcRelContainedInSpatialStructure containedInSpatialStructure2=model.create(IfcRelContainedInSpatialStructure.class);
                containedInSpatialStructure2.setRelatingStructure(ifcBuildingStorey);
                containedInSpatialStructure2.getRelatedElements().add(newFurnishing);
                newFurnishing.setName(""String_Node_Str"");
                newFurnishing.setGlobalId(""String_Node_Str"");
                newFurnishing.setOwnerHistory(ownerHistory);
                IfcProductDefinitionShape definitionShape=model.create(IfcProductDefinitionShape.class);
                newFurnishing.setRepresentation(definitionShape);
                definitionShape.getRepresentations().add(boundingBox);
                definitionShape.getRepresentations().add(surfaceModel);
                IfcLocalPlacement localPlacement=model.create(IfcLocalPlacement.class);
                localPlacement.setPlacementRelTo(ifcSpace.getObjectPlacement());
                IfcAxis2Placement3D axis2Placement3D=model.create(IfcAxis2Placement3D.class);
                localPlacement.setRelativePlacement(axis2Placement3D);
                IfcCartesianPoint pos=model.create(IfcCartesianPoint.class);
                pos.getCoordinates().add(-3d);
                pos.getCoordinates().add(+0.5d);
                pos.getCoordinates().add(0d);
                axis2Placement3D.setLocation(pos);
                newFurnishing.setObjectPlacement(localPlacement);
              }
            }
          }
        }
        model.commit(""String_Node_Str"");
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.994009180736015
160518,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setWriteRevision(true);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,false);
        Map<String,List<IfcRoot>> guids=new HashMap<String,List<IfcRoot>>();
        int fixed=0;
        for (        IfcRoot ifcRoot : model.getAllWithSubTypes(IfcRoot.class)) {
          if (ifcRoot.getGlobalId() != null) {
            if (!guids.containsKey(ifcRoot.getGlobalId())) {
              guids.put(ifcRoot.getGlobalId(),new ArrayList<IfcRoot>());
            }
            guids.get(ifcRoot.getGlobalId()).add(ifcRoot);
          }
        }
        for (        String guid : guids.keySet()) {
          List<IfcRoot> list=guids.get(guid);
          if (list.size() > 1) {
            int c=1;
            for (int i=1; i < list.size(); i++) {
              String newGuid=guid + ""String_Node_Str"" + c;
              while (guids.containsKey(newGuid)) {
                c++;
                newGuid=guid + ""String_Node_Str"" + c;
              }
              fixed++;
              list.get(i).setGlobalId(newGuid);
            }
          }
        }
        if (fixed > 0) {
          model.commit(""String_Node_Str"" + fixed + ""String_Node_Str"");
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LoggerFactory.getLogger(GuidFixerService.class).error(""String_Node_Str"",e);
      }
catch (      BimServerClientException e) {
        LoggerFactory.getLogger(GuidFixerService.class).error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setWriteRevision(true);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,false);
        Map<String,List<IfcRoot>> guids=new HashMap<String,List<IfcRoot>>();
        int fixed=0;
        for (        IfcRoot ifcRoot : model.getAllWithSubTypes(IfcRoot.class)) {
          if (ifcRoot.getGlobalId() != null) {
            if (!guids.containsKey(ifcRoot.getGlobalId())) {
              guids.put(ifcRoot.getGlobalId(),new ArrayList<IfcRoot>());
            }
            guids.get(ifcRoot.getGlobalId()).add(ifcRoot);
          }
        }
        for (        String guid : guids.keySet()) {
          List<IfcRoot> list=guids.get(guid);
          if (list.size() > 1) {
            int c=1;
            for (int i=1; i < list.size(); i++) {
              String newGuid=guid + ""String_Node_Str"" + c;
              while (guids.containsKey(newGuid)) {
                c++;
                newGuid=guid + ""String_Node_Str"" + c;
              }
              fixed++;
              list.get(i).setGlobalId(newGuid);
            }
          }
        }
        if (fixed > 0) {
          model.commit(""String_Node_Str"" + fixed + ""String_Node_Str"");
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LoggerFactory.getLogger(GuidFixerService.class).error(""String_Node_Str"",e);
      }
catch (      BimServerClientException e) {
        LoggerFactory.getLogger(GuidFixerService.class).error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.988108108108108
160519,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setWriteExtendedData(""String_Node_Str"");
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
        try {
          WorkbookSettings wbSettings=new WorkbookSettings();
          wbSettings.setLocale(new Locale(""String_Node_Str"",""String_Node_Str""));
          WritableWorkbook workbook=null;
          WritableFont times10pt=new WritableFont(WritableFont.ARIAL,10);
          times=new WritableCellFormat(times10pt);
          WritableFont times10ptbold=new WritableFont(WritableFont.ARIAL,10);
          times10ptbold.setBoldStyle(WritableFont.BOLD);
          timesbold=new WritableCellFormat(times10ptbold);
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
          workbook=Workbook.createWorkbook(byteArrayOutputStream,wbSettings);
          WritableSheet allSheet=workbook.createSheet(""String_Node_Str"",0);
          WritableSheet noFurnitureSheet=workbook.createSheet(""String_Node_Str"",1);
          WritableSheet noProxySheet=workbook.createSheet(""String_Node_Str"",2);
          createHeader(allSheet);
          createHeader(noFurnitureSheet);
          createHeader(noProxySheet);
          float scaleFactorToMeter=1;
          for (          IfcSIUnit ifcSIUnit : model.getAll(IfcSIUnit.class)) {
            if (ifcSIUnit.getUnitType() == IfcUnitEnum.LENGTHUNIT) {
              IfcSIUnitName ifcSiUnitName=ifcSIUnit.getName();
              if (IfcSIUnitName.METRE == ifcSiUnitName) {
                IfcSIPrefix lengthPrefix=ifcSIUnit.getPrefix();
                System.out.println(""String_Node_Str"" + lengthPrefix);
                if (lengthPrefix == IfcSIPrefix.DECA) {
                  scaleFactorToMeter=10f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.CENTI) {
                  scaleFactorToMeter=0.1f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.DECI) {
                  scaleFactorToMeter=0.01f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.MILLI) {
                  scaleFactorToMeter=0.001f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.NULL) {
                  scaleFactorToMeter=1;
                }
 else {
                  System.out.println(""String_Node_Str"" + lengthPrefix);
                }
              }
 else {
                System.out.println(""String_Node_Str"");
              }
            }
          }
          double cubicScaleFactor=Math.pow(scaleFactorToMeter,3);
          int totalNrTriangles=0;
          int totalNrTrianglesNoProxies=0;
          int totalNrTrianglesNoFurniture=0;
          int nrIfcProducts=0;
          int nrIfcProductsNoFurniture=0;
          int nrIfcProductsNoProxies=0;
          Bounds totalBounds=new Bounds();
          int totalUsedAttributes=0;
          int totalUsedAttributesNoFurniture=0;
          int totalUsedAttributesNoProxies=0;
          double totalSpaceM3=0;
          model.getAll(GeometryInfo.class);
          model.getAll(Vector3f.class);
          int nrSpaces=0;
          for (          IfcSpace ifcSpace : model.getAll(IfcSpace.class)) {
            if (ifcSpace.getGeometry() != null) {
              Vector3f minBounds=ifcSpace.getGeometry().getMinBounds();
              Vector3f maxBounds=ifcSpace.getGeometry().getMinBounds();
              double v=cubicScaleFactor * (maxBounds.getX() - minBounds.getX() * (maxBounds.getY() - minBounds.getY()) * (maxBounds.getZ() - minBounds.getZ()));
              totalSpaceM3+=v;
              nrSpaces++;
            }
          }
          for (          IfcProduct ifcProduct : model.getAllWithSubTypes(IfcProduct.class)) {
            if (ifcProduct.getGeometry() != null) {
              totalBounds.integrate(new Bounds(ifcProduct.getGeometry().getMinBounds(),ifcProduct.getGeometry().getMaxBounds()));
              totalNrTriangles+=ifcProduct.getGeometry().getPrimitiveCount();
              if (!(ifcProduct instanceof IfcFurnishingElement)) {
                totalNrTrianglesNoFurniture+=ifcProduct.getGeometry().getPrimitiveCount();
              }
              if (!(ifcProduct instanceof IfcProxy)) {
                totalNrTrianglesNoProxies+=ifcProduct.getGeometry().getPrimitiveCount();
              }
              int usedAttributes=0;
              for (              EAttribute eAttribute : ifcProduct.eClass().getEAllAttributes()) {
                Object val=ifcProduct.eGet(eAttribute);
                if (eAttribute.isMany()) {
                  List<?> list=(List<?>)val;
                  if (list.size() > 0) {
                    usedAttributes++;
                  }
                }
 else {
                  if (val != null) {
                    usedAttributes++;
                  }
                }
              }
              for (              IfcRelDefines ifcRelDefines : ifcProduct.getIsDefinedBy()) {
                if (ifcRelDefines instanceof IfcRelDefinesByProperties) {
                  IfcRelDefinesByProperties ifcRelDefinesByProperties=(IfcRelDefinesByProperties)ifcRelDefines;
                  IfcPropertySetDefinition propertySetDefinition=ifcRelDefinesByProperties.getRelatingPropertyDefinition();
                  if (propertySetDefinition instanceof IfcPropertySet) {
                    IfcPropertySet ifcPropertySet=(IfcPropertySet)propertySetDefinition;
                    usedAttributes+=ifcPropertySet.getHasProperties().size();
                  }
                }
              }
              totalUsedAttributes+=usedAttributes;
              nrIfcProducts++;
              if (!(ifcProduct instanceof IfcFurnishingElement)) {
                totalUsedAttributesNoFurniture+=usedAttributes;
                nrIfcProductsNoFurniture++;
              }
              if (!(ifcProduct instanceof IfcProxy)) {
                totalUsedAttributesNoProxies+=usedAttributes;
                nrIfcProductsNoProxies++;
              }
            }
          }
          writeRow(allSheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTriangles,nrIfcProducts,totalBounds,totalUsedAttributes,totalSpaceM3,nrSpaces);
          writeRow(noFurnitureSheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTrianglesNoFurniture,nrIfcProductsNoFurniture,totalBounds,totalUsedAttributesNoFurniture,totalSpaceM3,nrSpaces);
          writeRow(noProxySheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTrianglesNoProxies,nrIfcProductsNoProxies,totalBounds,totalUsedAttributesNoProxies,totalSpaceM3,nrSpaces);
          workbook.write();
          workbook.close();
          SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
          SFile file=new SFile();
          SExtendedData extendedData=new SExtendedData();
          extendedData.setTitle(""String_Node_Str"");
          file.setFilename(""String_Node_Str"");
          extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
          try {
            byte[] bytes=byteArrayOutputStream.toByteArray();
            file.setData(bytes);
            file.setMime(""String_Node_Str"");
            long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
            extendedData.setFileId(fileId);
            bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
          }
 catch (          Exception e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      BimServerClientException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setWriteExtendedData(""String_Node_Str"");
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
        try {
          WorkbookSettings wbSettings=new WorkbookSettings();
          wbSettings.setLocale(new Locale(""String_Node_Str"",""String_Node_Str""));
          WritableWorkbook workbook=null;
          WritableFont times10pt=new WritableFont(WritableFont.ARIAL,10);
          times=new WritableCellFormat(times10pt);
          WritableFont times10ptbold=new WritableFont(WritableFont.ARIAL,10);
          times10ptbold.setBoldStyle(WritableFont.BOLD);
          timesbold=new WritableCellFormat(times10ptbold);
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
          workbook=Workbook.createWorkbook(byteArrayOutputStream,wbSettings);
          WritableSheet allSheet=workbook.createSheet(""String_Node_Str"",0);
          WritableSheet noFurnitureSheet=workbook.createSheet(""String_Node_Str"",1);
          WritableSheet noProxySheet=workbook.createSheet(""String_Node_Str"",2);
          createHeader(allSheet);
          createHeader(noFurnitureSheet);
          createHeader(noProxySheet);
          float scaleFactorToMeter=1;
          for (          IfcSIUnit ifcSIUnit : model.getAll(IfcSIUnit.class)) {
            if (ifcSIUnit.getUnitType() == IfcUnitEnum.LENGTHUNIT) {
              IfcSIUnitName ifcSiUnitName=ifcSIUnit.getName();
              if (IfcSIUnitName.METRE == ifcSiUnitName) {
                IfcSIPrefix lengthPrefix=ifcSIUnit.getPrefix();
                System.out.println(""String_Node_Str"" + lengthPrefix);
                if (lengthPrefix == IfcSIPrefix.DECA) {
                  scaleFactorToMeter=10f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.CENTI) {
                  scaleFactorToMeter=0.1f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.DECI) {
                  scaleFactorToMeter=0.01f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.MILLI) {
                  scaleFactorToMeter=0.001f;
                }
 else                 if (lengthPrefix == IfcSIPrefix.NULL) {
                  scaleFactorToMeter=1;
                }
 else {
                  System.out.println(""String_Node_Str"" + lengthPrefix);
                }
              }
 else {
                System.out.println(""String_Node_Str"");
              }
            }
          }
          double cubicScaleFactor=Math.pow(scaleFactorToMeter,3);
          int totalNrTriangles=0;
          int totalNrTrianglesNoProxies=0;
          int totalNrTrianglesNoFurniture=0;
          int nrIfcProducts=0;
          int nrIfcProductsNoFurniture=0;
          int nrIfcProductsNoProxies=0;
          Bounds totalBounds=new Bounds();
          int totalUsedAttributes=0;
          int totalUsedAttributesNoFurniture=0;
          int totalUsedAttributesNoProxies=0;
          double totalSpaceM3=0;
          model.getAll(GeometryInfo.class);
          model.getAll(Vector3f.class);
          int nrSpaces=0;
          for (          IfcSpace ifcSpace : model.getAll(IfcSpace.class)) {
            if (ifcSpace.getGeometry() != null) {
              Vector3f minBounds=ifcSpace.getGeometry().getMinBounds();
              Vector3f maxBounds=ifcSpace.getGeometry().getMinBounds();
              double v=cubicScaleFactor * (maxBounds.getX() - minBounds.getX() * (maxBounds.getY() - minBounds.getY()) * (maxBounds.getZ() - minBounds.getZ()));
              totalSpaceM3+=v;
              nrSpaces++;
            }
          }
          for (          IfcProduct ifcProduct : model.getAllWithSubTypes(IfcProduct.class)) {
            if (ifcProduct.getGeometry() != null) {
              totalBounds.integrate(new Bounds(ifcProduct.getGeometry().getMinBounds(),ifcProduct.getGeometry().getMaxBounds()));
              totalNrTriangles+=ifcProduct.getGeometry().getPrimitiveCount();
              if (!(ifcProduct instanceof IfcFurnishingElement)) {
                totalNrTrianglesNoFurniture+=ifcProduct.getGeometry().getPrimitiveCount();
              }
              if (!(ifcProduct instanceof IfcProxy)) {
                totalNrTrianglesNoProxies+=ifcProduct.getGeometry().getPrimitiveCount();
              }
              int usedAttributes=0;
              for (              EAttribute eAttribute : ifcProduct.eClass().getEAllAttributes()) {
                Object val=ifcProduct.eGet(eAttribute);
                if (eAttribute.isMany()) {
                  List<?> list=(List<?>)val;
                  if (list.size() > 0) {
                    usedAttributes++;
                  }
                }
 else {
                  if (val != null) {
                    usedAttributes++;
                  }
                }
              }
              for (              IfcRelDefines ifcRelDefines : ifcProduct.getIsDefinedBy()) {
                if (ifcRelDefines instanceof IfcRelDefinesByProperties) {
                  IfcRelDefinesByProperties ifcRelDefinesByProperties=(IfcRelDefinesByProperties)ifcRelDefines;
                  IfcPropertySetDefinition propertySetDefinition=ifcRelDefinesByProperties.getRelatingPropertyDefinition();
                  if (propertySetDefinition instanceof IfcPropertySet) {
                    IfcPropertySet ifcPropertySet=(IfcPropertySet)propertySetDefinition;
                    usedAttributes+=ifcPropertySet.getHasProperties().size();
                  }
                }
              }
              totalUsedAttributes+=usedAttributes;
              nrIfcProducts++;
              if (!(ifcProduct instanceof IfcFurnishingElement)) {
                totalUsedAttributesNoFurniture+=usedAttributes;
                nrIfcProductsNoFurniture++;
              }
              if (!(ifcProduct instanceof IfcProxy)) {
                totalUsedAttributesNoProxies+=usedAttributes;
                nrIfcProductsNoProxies++;
              }
            }
          }
          writeRow(allSheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTriangles,nrIfcProducts,totalBounds,totalUsedAttributes,totalSpaceM3,nrSpaces);
          writeRow(noFurnitureSheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTrianglesNoFurniture,nrIfcProductsNoFurniture,totalBounds,totalUsedAttributesNoFurniture,totalSpaceM3,nrSpaces);
          writeRow(noProxySheet,2,""String_Node_Str"",cubicScaleFactor,totalNrTrianglesNoProxies,nrIfcProductsNoProxies,totalBounds,totalUsedAttributesNoProxies,totalSpaceM3,nrSpaces);
          workbook.write();
          workbook.close();
          SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
          SFile file=new SFile();
          SExtendedData extendedData=new SExtendedData();
          extendedData.setTitle(""String_Node_Str"");
          file.setFilename(""String_Node_Str"");
          extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
          try {
            byte[] bytes=byteArrayOutputStream.toByteArray();
            file.setData(bytes);
            file.setMime(""String_Node_Str"");
            long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
            extendedData.setFileId(fileId);
            bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
          }
 catch (          Exception e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      BimServerClientException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9959972968758124
160520,"@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(getClass().getName());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        try {
          IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
          for (          IfcSpace ifcSpace : model.getAllWithSubTypes(IfcSpace.class)) {
            bimServerClientInterface.getGeometry(roid,ifcSpace);
          }
        }
 catch (        BimServerClientException e) {
          e.printStackTrace();
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void register(SInternalServicePluginConfiguration internalServicePluginConfiguration,final PluginConfiguration pluginConfiguration){
  ServiceDescriptor serviceDescriptor=StoreFactory.eINSTANCE.createServiceDescriptor();
  serviceDescriptor.setProviderName(""String_Node_Str"");
  serviceDescriptor.setIdentifier(""String_Node_Str"" + internalServicePluginConfiguration.getOid());
  serviceDescriptor.setName(""String_Node_Str"");
  serviceDescriptor.setDescription(""String_Node_Str"");
  serviceDescriptor.setReadRevision(true);
  serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);
  serviceDescriptor.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(serviceDescriptor,new NewRevisionHandler(){
    @Override public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      try {
        Date startDate=new Date();
        Long topicId=bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE,poid,roid,""String_Node_Str"");
        SLongActionState state=new SLongActionState();
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.STARTED);
        state.setProgress(-1);
        state.setStart(startDate);
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        try {
          IfcModelInterface model=bimServerClientInterface.getModel(poid,roid,true);
          for (          IfcSpace ifcSpace : model.getAllWithSubTypes(IfcSpace.class)) {
            bimServerClientInterface.getGeometry(roid,ifcSpace);
          }
        }
 catch (        BimServerClientException e) {
          e.printStackTrace();
        }
        state=new SLongActionState();
        state.setProgress(100);
        state.setTitle(""String_Node_Str"");
        state.setState(SActionState.FINISHED);
        state.setStart(startDate);
        state.setEnd(new Date());
        bimServerClientInterface.getRegistry().updateProgressTopic(topicId,state);
        bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.983941605839416
160521,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  IfcModelSet ifcModelSet=new IfcModelSet();
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  String name=""String_Node_Str"";
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    name+=project.getName() + ""String_Node_Str"" + virtualRevision.getId()+ ""String_Node_Str"";
    try {
      getAuthorization().canDownload(roid);
    }
 catch (    UserException e) {
      if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
        throw new UserException(""String_Node_Str"");
      }
      if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
        throw new UserException(""String_Node_Str"");
      }
    }
    int size=0;
    JsonParser parser=new JsonParser();
    JsonElement query=parser.parse(json);
    for (    ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
      try {
        int highestStopId=findHighestStopRid(project,concreteRevision);
        IfcModelInterface subModel=new IfcModel();
        Query databaseQuery=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),null,Deep.NO,highestStopId);
        JsonObject queryObject=(JsonObject)query;
        JsonArray queries=queryObject.get(""String_Node_Str"").getAsJsonArray();
        for (        JsonElement queryElement : queries) {
          processQueryPart(queryObject,(JsonObject)queryElement,subModel,databaseQuery);
        }
        size+=subModel.size();
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        checkGeometry(serializerPluginConfiguration,getBimServer().getPluginManager(),subModel,project,concreteRevision,virtualRevision);
        ifcModelSet.add(subModel);
      }
 catch (      GeometryGeneratingException|IfcModelInterfaceException e) {
        throw new UserException(e);
      }
    }
    IfcModelInterface ifcModel=new IfcModel(size);
    if (ifcModelSet.size() > 1) {
      try {
        ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
      }
 catch (      MergeException e) {
        throw new UserException(e);
      }
    }
 else {
      ifcModel=ifcModelSet.iterator().next();
    }
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(virtualRevision) + 1);
    if (getAuthorization().getUoid() != -1) {
      ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    }
    ifcModel.getModelMetaData().setDate(virtualRevision.getDate());
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  if (name.endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.length() - 1);
  }
  ifcModel.getModelMetaData().setName(name);
  ifcModel.getModelMetaData().setRevisionId(1);
  if (getAuthorization().getUoid() != -1) {
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  }
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  IfcModelSet ifcModelSet=new IfcModelSet();
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  String name=""String_Node_Str"";
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    name+=project.getName() + ""String_Node_Str"" + virtualRevision.getId()+ ""String_Node_Str"";
    try {
      getAuthorization().canDownload(roid);
    }
 catch (    UserException e) {
      if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
        throw new UserException(""String_Node_Str"");
      }
      if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
        throw new UserException(""String_Node_Str"");
      }
    }
    int size=0;
    JsonParser parser=new JsonParser();
    JsonElement query=parser.parse(json);
    for (    ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
      try {
        int highestStopId=findHighestStopRid(project,concreteRevision);
        IfcModelInterface subModel=new IfcModel();
        Query databaseQuery=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),null,Deep.NO,highestStopId);
        JsonObject queryObject=(JsonObject)query;
        JsonArray queries=queryObject.get(""String_Node_Str"").getAsJsonArray();
        for (        JsonElement queryElement : queries) {
          processQueryPart(queryObject,(JsonObject)queryElement,subModel,databaseQuery);
        }
        size+=subModel.size();
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        subModel.fixInverseMismatches();
        checkGeometry(serializerPluginConfiguration,getBimServer().getPluginManager(),subModel,project,concreteRevision,virtualRevision);
        ifcModelSet.add(subModel);
      }
 catch (      GeometryGeneratingException|IfcModelInterfaceException e) {
        throw new UserException(e);
      }
    }
    IfcModelInterface ifcModel=new IfcModel(size);
    if (ifcModelSet.size() > 1) {
      try {
        ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
      }
 catch (      MergeException e) {
        throw new UserException(e);
      }
    }
 else {
      ifcModel=ifcModelSet.iterator().next();
    }
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(virtualRevision) + 1);
    if (getAuthorization().getUoid() != -1) {
      ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    }
    ifcModel.getModelMetaData().setDate(virtualRevision.getDate());
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=getBimServer().getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  if (name.endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.length() - 1);
  }
  ifcModel.getModelMetaData().setName(name);
  ifcModel.getModelMetaData().setRevisionId(1);
  if (getAuthorization().getUoid() != -1) {
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  }
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}",0.9947089947089948
160522,"@Override public void fixInverseMismatches(){
  for (  IfcRelContainedInSpatialStructure ifcRelContainedInSpatialStructure : getAll(IfcRelContainedInSpatialStructure.class)) {
    for (    IfcProduct ifcProduct : ifcRelContainedInSpatialStructure.getRelatedElements()) {
      if (ifcProduct instanceof IfcElement) {
        IfcElement ifcElement=(IfcElement)ifcProduct;
        ifcElement.getContainedInStructure().add(ifcRelContainedInSpatialStructure);
      }
    }
  }
}","@Override public void fixInverseMismatches(){
  for (  IfcRelContainedInSpatialStructure ifcRelContainedInSpatialStructure : getAll(IfcRelContainedInSpatialStructure.class)) {
    for (    IfcProduct ifcProduct : ifcRelContainedInSpatialStructure.getRelatedElements()) {
      if (ifcProduct instanceof IfcElement) {
        IfcElement ifcElement=(IfcElement)ifcProduct;
        ifcElement.getContainedInStructure().add(ifcRelContainedInSpatialStructure);
      }
 else       if (ifcProduct instanceof IfcAnnotation) {
        IfcAnnotation ifcAnnotation=(IfcAnnotation)ifcProduct;
        ifcAnnotation.getContainedInStructure().add(ifcRelContainedInSpatialStructure);
      }
 else       if (ifcProduct instanceof IfcGrid) {
        IfcGrid ifcGrid=(IfcGrid)ifcProduct;
        ifcGrid.getContainedInStructure().add(ifcRelContainedInSpatialStructure);
      }
    }
  }
  for (  IfcPresentationLayerAssignment ifcPresentationLayerAssignment : getAllWithSubTypes(IfcPresentationLayerAssignment.class)) {
    for (    IfcLayeredItem ifcLayeredItem : ifcPresentationLayerAssignment.getAssignedItems()) {
      if (ifcLayeredItem instanceof IfcRepresentation) {
        IfcRepresentation ifcRepresentation=(IfcRepresentation)ifcLayeredItem;
        ifcRepresentation.getLayerAssignments().add(ifcPresentationLayerAssignment);
      }
 else       if (ifcLayeredItem instanceof IfcRepresentationItem) {
        IfcRepresentationItem ifcRepresentationItem=(IfcRepresentationItem)ifcLayeredItem;
        ifcRepresentationItem.getLayerAssignments().add(ifcPresentationLayerAssignment);
      }
    }
  }
  for (  IfcRelAssociates ifcRelAssociates : getAllWithSubTypes(IfcRelAssociates.class)) {
    for (    IfcRoot ifcRoot : ifcRelAssociates.getRelatedObjects()) {
      if (ifcRoot instanceof IfcObjectDefinition) {
        ((IfcObjectDefinition)ifcRoot).getHasAssociations().add(ifcRelAssociates);
      }
 else       if (ifcRoot instanceof IfcPropertyDefinition) {
        ((IfcPropertyDefinition)ifcRoot).getHasAssociations().add(ifcRelAssociates);
      }
    }
  }
  for (  IfcTerminatorSymbol ifcTerminatorSymbol : getAllWithSubTypes(IfcTerminatorSymbol.class)) {
    IfcAnnotationCurveOccurrence ifcAnnotationCurveOccurrence=ifcTerminatorSymbol.getAnnotatedCurve();
    if (ifcAnnotationCurveOccurrence instanceof IfcDimensionCurve) {
      ((IfcDimensionCurve)ifcAnnotationCurveOccurrence).setItem(ifcTerminatorSymbol);
    }
  }
  for (  IfcRelReferencedInSpatialStructure ifcRelReferencedInSpatialStructure : getAllWithSubTypes(IfcRelReferencedInSpatialStructure.class)) {
    for (    IfcProduct ifcProduct : ifcRelReferencedInSpatialStructure.getRelatedElements()) {
      if (ifcProduct instanceof IfcElement) {
        ((IfcElement)ifcProduct).getReferencedInStructures().add(ifcRelReferencedInSpatialStructure);
      }
    }
  }
  for (  IfcProduct ifcProduct : getAllWithSubTypes(IfcProduct.class)) {
    IfcProductRepresentation ifcProductRepresentation=ifcProduct.getRepresentation();
    if (ifcProductRepresentation instanceof IfcProductDefinitionShape) {
      ((IfcProductDefinitionShape)ifcProductRepresentation).getShapeOfProduct().add(ifcProduct);
    }
  }
  for (  IfcRelConnectsStructuralActivity ifcRelConnectsStructuralActivity : getAllWithSubTypes(IfcRelConnectsStructuralActivity.class)) {
    IfcStructuralActivityAssignmentSelect ifcStructuralActivityAssignmentSelect=ifcRelConnectsStructuralActivity.getRelatingElement();
    if (ifcStructuralActivityAssignmentSelect instanceof IfcStructuralItem) {
      ((IfcStructuralItem)ifcStructuralActivityAssignmentSelect).getAssignedStructuralActivity().add(ifcRelConnectsStructuralActivity);
    }
  }
}",0.2287503009872381
160523,"@SuppressWarnings(""String_Node_Str"") private IdEObject copy(EClass originalEClass,IdEObject original) throws IfcModelInterfaceException {
  if (!((IdEObjectImpl)original).isLoadedOrLoading()) {
    return null;
  }
  if (converted.containsKey(original)) {
    return converted.get(original);
  }
  IdEObject newObject=(IdEObject)objectFactory.create(original.eClass());
  if (keepOriginalOids) {
    ((IdEObjectImpl)newObject).setOid(original.getOid());
  }
 else {
    if (newObject.getOid() == -1) {
      if (oidProvider != null) {
        ((IdEObjectImpl)newObject).setOid(oidProvider.newOid(newObject.eClass()));
      }
 else {
        ((IdEObjectImpl)newObject).setOid(original.getOid());
      }
    }
  }
  converted.put(original,newObject);
  if (newObject.eClass().getEAnnotation(""String_Node_Str"") == null) {
    targetModel.add(newObject.getOid(),newObject);
  }
  for (  EStructuralFeature eStructuralFeature : original.eClass().getEAllStructuralFeatures()) {
    if (objectIDM == null || objectIDM.shouldFollowReference(originalEClass,original.eClass(),eStructuralFeature)) {
      Object get=original.eGet(eStructuralFeature);
      if (eStructuralFeature instanceof EAttribute) {
        if (get instanceof Double) {
          EStructuralFeature doubleStringFeature=original.eClass().getEStructuralFeature(""String_Node_Str"");
          if (doubleStringFeature != null) {
            Object doubleString=original.eGet(doubleStringFeature);
            newObject.eSet(doubleStringFeature,doubleString);
          }
 else {
            newObject.eSet(eStructuralFeature,get);
          }
        }
 else {
          newObject.eSet(eStructuralFeature,get);
        }
      }
 else       if (eStructuralFeature instanceof EReference) {
        if (get == null) {
        }
 else {
          if (eStructuralFeature.isMany()) {
            EList<EObject> list=(EList<EObject>)get;
            AbstractEList<EObject> toList=(AbstractEList<EObject>)newObject.eGet(eStructuralFeature);
            for (            Object o : list) {
              if (converted.containsKey(o)) {
                toList.addUnique(converted.get(o));
              }
 else {
                IdEObject result=copy(originalEClass,(IdEObject)o);
                if (result != null) {
                  toList.addUnique(result);
                }
              }
            }
          }
 else {
            if (converted.containsKey(get)) {
              newObject.eSet(eStructuralFeature,converted.get(get));
            }
 else {
              newObject.eSet(eStructuralFeature,copy(originalEClass,(IdEObject)get));
            }
          }
        }
      }
    }
  }
  return newObject;
}","@SuppressWarnings(""String_Node_Str"") private IdEObject copy(EClass originalEClass,IdEObject original) throws IfcModelInterfaceException {
  if (!((IdEObjectImpl)original).isLoadedOrLoading()) {
    return null;
  }
  if (converted.containsKey(original)) {
    return converted.get(original);
  }
  IdEObject newObject=(IdEObject)objectFactory.create(original.eClass());
  if (keepOriginalOids) {
    ((IdEObjectImpl)newObject).setOid(original.getOid());
  }
 else {
    if (newObject.getOid() == -1) {
      if (oidProvider != null) {
        ((IdEObjectImpl)newObject).setOid(oidProvider.newOid(newObject.eClass()));
      }
 else {
        ((IdEObjectImpl)newObject).setOid(original.getOid());
      }
    }
  }
  converted.put(original,newObject);
  if (newObject.eClass().getEAnnotation(""String_Node_Str"") == null) {
    targetModel.add(newObject.getOid(),newObject);
  }
  if (inverseFixes.containsKey(original.getOid())) {
    InverseFix inverseFix=inverseFixes.get(original.getOid());
    inverseFix.apply(newObject);
  }
  for (  EStructuralFeature eStructuralFeature : original.eClass().getEAllStructuralFeatures()) {
    boolean canFollow=objectIDM == null || objectIDM.shouldFollowReference(originalEClass,original.eClass(),eStructuralFeature);
    Object get=original.eGet(eStructuralFeature);
    if (eStructuralFeature instanceof EAttribute) {
      if (get instanceof Double) {
        EStructuralFeature doubleStringFeature=original.eClass().getEStructuralFeature(""String_Node_Str"");
        if (doubleStringFeature != null) {
          Object doubleString=original.eGet(doubleStringFeature);
          newObject.eSet(doubleStringFeature,doubleString);
        }
 else {
          newObject.eSet(eStructuralFeature,get);
        }
      }
 else {
        newObject.eSet(eStructuralFeature,get);
      }
    }
 else     if (eStructuralFeature instanceof EReference) {
      if (get == null) {
      }
 else {
        if (eStructuralFeature.isMany()) {
          EList<EObject> list=(EList<EObject>)get;
          AbstractEList<EObject> toList=(AbstractEList<EObject>)newObject.eGet(eStructuralFeature);
          for (          Object o : list) {
            if (converted.containsKey(o)) {
              toList.addUnique(converted.get(o));
            }
 else {
              if (canFollow) {
                IdEObject result=copy(originalEClass,(IdEObject)o);
                if (result != null) {
                  toList.addUnique(result);
                }
              }
 else {
                if (eStructuralFeature.getName().equals(""String_Node_Str"")) {
                  inverseFixes.put(((IdEObject)o).getOid(),new InverseFix(Ifc2x3tc1Package.eINSTANCE.getIfcRelContainedInSpatialStructure_RelatedElements(),newObject));
                  System.out.println(""String_Node_Str"");
                }
              }
            }
          }
        }
 else {
          if (converted.containsKey(get)) {
            newObject.eSet(eStructuralFeature,converted.get(get));
          }
 else {
            if (canFollow) {
              newObject.eSet(eStructuralFeature,copy(originalEClass,(IdEObject)get));
            }
          }
        }
      }
    }
  }
  return newObject;
}",0.8410674825769165
160524,"private void writeEmbedded(EObject eObject) throws SerializerException, IOException {
  EClass class1=eObject.eClass();
  print(upperCases.get(class1));
  print(OPEN_PAREN);
  EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
  if (structuralFeature != null) {
    Object realVal=eObject.eGet(structuralFeature);
    if (structuralFeature.getEType() == ECORE_PACKAGE_INSTANCE.getEDouble()) {
      Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
      if (stringVal != null && model.isUseDoubleStrings()) {
        print((String)stringVal);
      }
 else {
        if (((Double)realVal).isInfinite() || (((Double)realVal).isNaN())) {
          LOGGER.info(""String_Node_Str"");
          print(""String_Node_Str"");
        }
 else {
          print((String)realVal);
        }
      }
    }
 else {
      writePrimitive(realVal);
    }
  }
  print(CLOSE_PAREN);
}","private void writeEmbedded(EObject eObject) throws SerializerException, IOException {
  EClass class1=eObject.eClass();
  print(upperCases.get(class1));
  print(OPEN_PAREN);
  EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
  if (structuralFeature != null) {
    Object realVal=eObject.eGet(structuralFeature);
    if (structuralFeature.getEType() == ECORE_PACKAGE_INSTANCE.getEDouble()) {
      Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
      if (stringVal != null && model.isUseDoubleStrings()) {
        print((String)stringVal);
      }
 else {
        if (((Double)realVal).isInfinite() || (((Double)realVal).isNaN())) {
          LOGGER.info(""String_Node_Str"");
          print(""String_Node_Str"");
        }
 else {
          print(((Double)realVal).toString());
        }
      }
    }
 else {
      writePrimitive(realVal);
    }
  }
  print(CLOSE_PAREN);
}",0.986985944820406
160525,"public static void main(String[] args) throws ParseException {
  try {
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readFileName(""String_Node_Str"");
  }
 catch (  TokenizeException e) {
    e.printStackTrace();
  }
  try {
    readFileName(""String_Node_Str"");
  }
 catch (  TokenizeException e) {
  }
}","public static void main(String[] args) throws ParseException {
  try {
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readDescription(""String_Node_Str"");
    readFileName(""String_Node_Str"");
    readFileName(""String_Node_Str"");
  }
 catch (  TokenizeException e) {
    e.printStackTrace();
  }
  try {
    readFileName(""String_Node_Str"");
  }
 catch (  TokenizeException e) {
  }
}",0.9761444229529336
160526,"public Tokenizer zoomIn(String startChar,String endChar) throws TokenizeException {
  String trimmed=toString().trim();
  if (!trimmed.startsWith(startChar)) {
    throw new TokenizeException(""String_Node_Str"" + startChar + ""String_Node_Str""+ input.substring(leftPositionInclude,rightPositionInclude));
  }
  int leftIndex=input.indexOf(startChar,leftPositionInclude);
  int rightIndex=-1;
  int depth=0;
  for (int i=leftIndex + 1; i <= rightPositionInclude; i++) {
    String c=input.substring(i,i + endChar.length());
    if (c.equals(endChar)) {
      if (depth == 0) {
        rightIndex=i;
        break;
      }
 else {
        depth--;
      }
    }
 else     if (c.equals(startChar)) {
      depth++;
    }
  }
  if (rightIndex == -1 || rightIndex < leftPositionInclude) {
    throw new TokenizeException(""String_Node_Str"" + endChar + ""String_Node_Str""+ input.substring(leftPositionInclude,rightPositionInclude));
  }
  zoomStack.push(new Pair(endChar,this.rightPositionInclude));
  this.leftPositionInclude=leftIndex + startChar.length();
  this.rightPositionInclude=rightIndex - endChar.length();
  return this;
}","public Tokenizer zoomIn(String startChar,String endChar) throws TokenizeException {
  String trimmed=toString().trim();
  if (!trimmed.startsWith(startChar)) {
    throw new TokenizeException(""String_Node_Str"" + startChar + ""String_Node_Str""+ input.substring(leftPositionInclude,rightPositionInclude));
  }
  String specialChar=""String_Node_Str"";
  int leftIndex=input.indexOf(startChar,leftPositionInclude);
  int rightIndex=-1;
  int depth=0;
  int altDepth=0;
  for (int i=leftIndex + 1; i <= rightPositionInclude; i++) {
    String c=input.substring(i,i + endChar.length());
    if (c.equals(endChar)) {
      if (depth == 0 && altDepth == 0) {
        rightIndex=i;
        break;
      }
 else {
        if (altDepth == 0) {
          depth--;
        }
      }
    }
 else     if (c.equals(specialChar)) {
      altDepth=1 - altDepth;
    }
 else     if (c.equals(startChar) && altDepth == 0) {
      depth++;
    }
  }
  if (rightIndex == -1 || rightIndex < leftPositionInclude) {
    throw new TokenizeException(""String_Node_Str"" + endChar + ""String_Node_Str""+ input.substring(leftPositionInclude,rightPositionInclude));
  }
  zoomStack.push(new Pair(endChar,this.rightPositionInclude));
  this.leftPositionInclude=leftIndex + startChar.length();
  this.rightPositionInclude=rightIndex - endChar.length();
  return this;
}",0.9124236252545824
160527,"public String readSingleQuoted() throws TokenizeException {
  String toString=toString();
  String trimmed=toString.trim();
  if (!trimmed.startsWith(""String_Node_Str"")) {
    throw new TokenizeException(""String_Node_Str"" + trimmed);
  }
  int add=toString.indexOf(""String_Node_Str"");
  int endIndex=trimmed.indexOf(""String_Node_Str"",1);
  while (trimmed.length() > endIndex + 1 && trimmed.charAt(endIndex + 1) == '\'') {
    endIndex=trimmed.indexOf(""String_Node_Str"",endIndex + 2);
  }
  if (endIndex == -1) {
    throw new TokenizeException(""String_Node_Str"" + trimmed);
  }
  this.leftPositionInclude+=endIndex + add + 1;
  return trimmed.substring(1,endIndex);
}","public String readSingleQuoted() throws TokenizeException {
  String toString=toString();
  String trimmed=toString.trim();
  if (!trimmed.startsWith(""String_Node_Str"")) {
    throw new TokenizeException(""String_Node_Str"" + trimmed);
  }
  int add=toString.indexOf(""String_Node_Str"");
  int endIndex=trimmed.indexOf(""String_Node_Str"",1);
  int lastEndIndex=-2;
  while (trimmed.length() > endIndex + 1 && trimmed.charAt(endIndex + 1) == '\'') {
    endIndex=trimmed.indexOf(""String_Node_Str"",endIndex + 2);
    if (lastEndIndex != -2 && lastEndIndex == endIndex) {
      throw new TokenizeException(""String_Node_Str"" + trimmed);
    }
    lastEndIndex=endIndex;
  }
  if (endIndex == -1) {
    throw new TokenizeException(""String_Node_Str"" + trimmed);
  }
  this.leftPositionInclude+=endIndex + add + 1;
  return trimmed.substring(1,endIndex);
}",0.8822751322751323
160528,"public void generateGeometry(long uoid,PluginManager pluginManager,DatabaseSession databaseSession,IfcModelInterface model,int pid,int rid,Revision revision,boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(""String_Node_Str"",true);
  Serializer serializer=serializerPlugin.createSerializer(new PluginConfiguration());
  try {
    model.generateMinimalExpressIds();
    serializer.init(model,null,pluginManager,null,false);
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    serializer.writeToOutputStream(outputStream);
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine != null) {
      RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
      try {
        RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration());
        renderEngine.init();
        try {
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(outputStream.toByteArray()),outputStream.size());
          RenderEngineSettings settings=new RenderEngineSettings();
          settings.setPrecision(Precision.SINGLE);
          settings.setIndexFormat(IndexFormat.AUTO_DETECT);
          settings.setGenerateNormals(true);
          settings.setGenerateTriangles(true);
          settings.setGenerateWireFrame(false);
          renderEngineModel.setSettings(settings);
          try {
            RenderEngineSurfaceProperties initializeModelling=renderEngineModel.initializeModelling();
            RenderEngineGeometry renderEngineGeometry=renderEngineModel.finalizeModelling(initializeModelling);
            List<IfcProduct> products=model.getAllWithSubTypes(IfcProduct.class);
            GeometrySimplifier geometrySimplifier=new GeometrySimplifier();
            for (            IfcProduct ifcProduct : products) {
              RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
              RenderEngineInstanceVisualisationProperties visualisationProperties=renderEngineInstance.getVisualisationProperties();
              if (visualisationProperties.getIndices() != null && visualisationProperties.getIndices().length > 0) {
                GeometryInfo geometryInfo=null;
                if (store) {
                  geometryInfo=databaseSession.create(Ifc2x3tc1Package.eINSTANCE.getGeometryInfo(),pid,rid);
                }
 else {
                  geometryInfo=Ifc2x3tc1Factory.eINSTANCE.createGeometryInfo();
                }
                geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                GeometryData geometryData=null;
                if (store) {
                  geometryData=databaseSession.create(Ifc2x3tc1Package.eINSTANCE.getGeometryData(),pid,rid);
                }
 else {
                  geometryData=Ifc2x3tc1Factory.eINSTANCE.createGeometryData();
                }
                geometryData.setIndices(intArrayToByteArray(visualisationProperties.getIndices()));
                geometryData.setVertices(floatArrayToByteArray(visualisationProperties.getVertices()));
                geometryData.setMaterialIndices(intArrayToByteArray(visualisationProperties.getMaterialIndices()));
                geometryData.setNormals(floatArrayToByteArray(visualisationProperties.getNormals()));
                float[] vertex_colors=new float[visualisationProperties.getVertices().length / 3 * 4];
                for (int i=0; i < visualisationProperties.getMaterialIndices().length; ++i) {
                  int c=visualisationProperties.getMaterialIndices()[i];
                  for (int j=0; j < 3; ++j) {
                    int k=visualisationProperties.getIndices()[i * 3 + j];
                    if (c > -1) {
                      for (int l=0; l < 4; ++l) {
                        vertex_colors[4 * k + l]=visualisationProperties.getMaterials()[4 * c + l];
                      }
                    }
 else {
                      vertex_colors[4 * k]=0;
                      vertex_colors[4 * k + 1]=1;
                      vertex_colors[4 * k + 2]=0;
                      vertex_colors[4 * k + 3]=1;
                    }
                  }
                }
                geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                for (int i=0; i < visualisationProperties.getIndices().length; i++) {
                  processExtends(geometryInfo,visualisationProperties.getVertices(),visualisationProperties.getIndices()[i] * 3);
                }
                geometryInfo.setData(geometryData);
                float[] tranformationMatrix=new float[16];
                if (renderEngineInstance.getTransformationMatrix() != null) {
                  tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                  tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                }
 else {
                  Matrix.setIdentityM(tranformationMatrix,0);
                }
                setTransformationMatrix(geometryInfo,tranformationMatrix);
                if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                  geometrySimplifier.add(ifcProduct,geometryData);
                }
                ifcProduct.setGeometry(geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
            }
            if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
              for (              IfcProduct ifcProduct : products) {
                if (ifcProduct.getGeometry() != null && ifcProduct.getGeometry().getData() != null) {
                  Set<GeometryData> matchingGeometryDatas=geometrySimplifier.getMatchingGeometry(ifcProduct,ifcProduct.getGeometry().getData());
                  for (                  GeometryData matchingGeometryData : matchingGeometryDatas) {
                    if (reuseGeometry(ifcProduct,ifcProduct.getGeometry(),ifcProduct.getGeometry().getData(),matchingGeometryData)) {
                      break;
                    }
                  }
                }
              }
            }
          }
  finally {
            renderEngineModel.close();
          }
        }
  finally {
          renderEngine.close();
        }
      }
 catch (      RenderEngineException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}","public void generateGeometry(long uoid,PluginManager pluginManager,DatabaseSession databaseSession,IfcModelInterface model,int pid,int rid,Revision revision,boolean store,GeometryCache geometryCache) throws BimserverDatabaseException, GeometryGeneratingException {
  if (geometryCache != null && !geometryCache.isEmpty()) {
    returnCachedData(model,geometryCache,databaseSession,pid,rid);
    return;
  }
  SerializerPlugin serializerPlugin=(SerializerPlugin)pluginManager.getPlugin(""String_Node_Str"",true);
  Serializer serializer=serializerPlugin.createSerializer(new PluginConfiguration());
  try {
    model.generateMinimalExpressIds();
    serializer.init(model,null,pluginManager,null,false);
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    serializer.writeToOutputStream(outputStream);
    User user=(User)databaseSession.get(uoid,Query.getDefault());
    UserSettings userSettings=user.getUserSettings();
    RenderEnginePluginConfiguration defaultRenderEngine=userSettings.getDefaultRenderEngine();
    if (defaultRenderEngine != null) {
      RenderEnginePlugin renderEnginePlugin=pluginManager.getRenderEngine(defaultRenderEngine.getPluginDescriptor().getPluginClassName(),true);
      try {
        RenderEngine renderEngine=renderEnginePlugin.createRenderEngine(new PluginConfiguration());
        renderEngine.init();
        try {
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(outputStream.toByteArray()),outputStream.size());
          RenderEngineSettings settings=new RenderEngineSettings();
          settings.setPrecision(Precision.SINGLE);
          settings.setIndexFormat(IndexFormat.AUTO_DETECT);
          settings.setGenerateNormals(true);
          settings.setGenerateTriangles(true);
          settings.setGenerateWireFrame(false);
          renderEngineModel.setSettings(settings);
          try {
            RenderEngineSurfaceProperties initializeModelling=renderEngineModel.initializeModelling();
            RenderEngineGeometry renderEngineGeometry=renderEngineModel.finalizeModelling(initializeModelling);
            List<IfcProduct> products=model.getAllWithSubTypes(IfcProduct.class);
            GeometrySimplifier geometrySimplifier=new GeometrySimplifier();
            for (            IfcProduct ifcProduct : products) {
              RenderEngineInstance renderEngineInstance=renderEngineModel.getInstanceFromExpressId(ifcProduct.getExpressId());
              RenderEngineInstanceVisualisationProperties visualisationProperties=renderEngineInstance.getVisualisationProperties();
              if (visualisationProperties.getIndices() != null && visualisationProperties.getIndices().length > 0) {
                GeometryInfo geometryInfo=null;
                if (store) {
                  geometryInfo=databaseSession.create(Ifc2x3tc1Package.eINSTANCE.getGeometryInfo(),pid,rid);
                }
 else {
                  geometryInfo=Ifc2x3tc1Factory.eINSTANCE.createGeometryInfo();
                }
                geometryInfo.setMinBounds(createVector3f(Float.POSITIVE_INFINITY,databaseSession,store,pid,rid));
                geometryInfo.setMaxBounds(createVector3f(Float.NEGATIVE_INFINITY,databaseSession,store,pid,rid));
                GeometryData geometryData=null;
                if (store) {
                  geometryData=databaseSession.create(Ifc2x3tc1Package.eINSTANCE.getGeometryData(),pid,rid);
                }
 else {
                  geometryData=Ifc2x3tc1Factory.eINSTANCE.createGeometryData();
                }
                geometryData.setIndices(intArrayToByteArray(visualisationProperties.getIndices()));
                geometryData.setVertices(floatArrayToByteArray(visualisationProperties.getVertices()));
                geometryData.setMaterialIndices(intArrayToByteArray(visualisationProperties.getMaterialIndices()));
                geometryData.setNormals(floatArrayToByteArray(visualisationProperties.getNormals()));
                if (visualisationProperties.getMaterialIndices() != null) {
                  float[] vertex_colors=new float[visualisationProperties.getVertices().length / 3 * 4];
                  for (int i=0; i < visualisationProperties.getMaterialIndices().length; ++i) {
                    int c=visualisationProperties.getMaterialIndices()[i];
                    for (int j=0; j < 3; ++j) {
                      int k=visualisationProperties.getIndices()[i * 3 + j];
                      if (c > -1) {
                        for (int l=0; l < 4; ++l) {
                          vertex_colors[4 * k + l]=visualisationProperties.getMaterials()[4 * c + l];
                        }
                      }
 else {
                        vertex_colors[4 * k]=0;
                        vertex_colors[4 * k + 1]=1;
                        vertex_colors[4 * k + 2]=0;
                        vertex_colors[4 * k + 3]=1;
                      }
                    }
                  }
                  geometryData.setMaterials(floatArrayToByteArray(vertex_colors));
                }
                for (int i=0; i < visualisationProperties.getIndices().length; i++) {
                  processExtends(geometryInfo,visualisationProperties.getVertices(),visualisationProperties.getIndices()[i] * 3);
                }
                geometryInfo.setData(geometryData);
                float[] tranformationMatrix=new float[16];
                if (renderEngineInstance.getTransformationMatrix() != null) {
                  tranformationMatrix=renderEngineInstance.getTransformationMatrix();
                  tranformationMatrix=Matrix.changeOrientation(tranformationMatrix);
                }
 else {
                  Matrix.setIdentityM(tranformationMatrix,0);
                }
                setTransformationMatrix(geometryInfo,tranformationMatrix);
                if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
                  geometrySimplifier.add(ifcProduct,geometryData);
                }
                ifcProduct.setGeometry(geometryInfo);
                if (store) {
                  databaseSession.store(ifcProduct,pid,rid);
                }
              }
            }
            if (bimServer.getServerSettingsCache().getServerSettings().isReuseGeometry()) {
              for (              IfcProduct ifcProduct : products) {
                if (ifcProduct.getGeometry() != null && ifcProduct.getGeometry().getData() != null) {
                  Set<GeometryData> matchingGeometryDatas=geometrySimplifier.getMatchingGeometry(ifcProduct,ifcProduct.getGeometry().getData());
                  for (                  GeometryData matchingGeometryData : matchingGeometryDatas) {
                    if (reuseGeometry(ifcProduct,ifcProduct.getGeometry(),ifcProduct.getGeometry().getData(),matchingGeometryData)) {
                      break;
                    }
                  }
                }
              }
            }
          }
  finally {
            renderEngineModel.close();
          }
        }
  finally {
          renderEngine.close();
        }
      }
 catch (      RenderEngineException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GeometryGeneratingException(e);
  }
}",0.9910873440285204
160529,"public static Authorization fromToken(SecretKeySpec key,String token) throws AuthenticationException {
  if (token == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    int hashSizeBytes=16;
    Cipher decodingCipher=Cipher.getInstance(""String_Node_Str"");
    decodingCipher.init(Cipher.DECRYPT_MODE,key);
    ByteBuffer buffer=ByteBuffer.wrap(decodingCipher.doFinal(Hex.decodeHex(token.toCharArray())));
    MessageDigest messageDigest=MessageDigest.getInstance(""String_Node_Str"");
    byte[] foundHash=new byte[hashSizeBytes];
    buffer.get(foundHash,0,hashSizeBytes);
    byte[] hashInput=new byte[buffer.capacity() - hashSizeBytes];
    buffer.get(hashInput);
    buffer.position(hashSizeBytes);
    byte[] calculatedHash=messageDigest.digest(hashInput);
    if (Arrays.equals(foundHash,calculatedHash)) {
      byte type=buffer.get();
      Authorization authorization=null;
      long expires=buffer.getLong();
      long uoid=buffer.getLong();
switch (type) {
case ExplicitRightsAuthorization.ID:
        authorization=ExplicitRightsAuthorization.fromBuffer(buffer);
      break;
case UserAuthorization.ID:
    authorization=UserAuthorization.fromBuffer(buffer);
  break;
case SystemAuthorization.ID:
authorization=SystemAuthorization.fromBuffer(buffer);
break;
case AnonymousAuthorization.ID:
authorization=AnonymousAuthorization.fromBuffer(buffer);
break;
case AdminAuthorization.ID:
authorization=AdminAuthorization.fromBuffer(buffer);
break;
default :
throw new AuthenticationException(""String_Node_Str"" + type);
}
authorization.setUoid(uoid);
authorization.setExpires(expires);
if (authorization.getExpires().getTimeInMillis() < new GregorianCalendar().getTimeInMillis()) {
throw new AuthenticationException(""String_Node_Str"");
}
return authorization;
}
 else {
throw new AuthenticationException(""String_Node_Str"");
}
}
 catch (GeneralSecurityException e) {
throw new AuthenticationException(""String_Node_Str"" + token + ""String_Node_Str"",e);
}
catch (DecoderException e) {
throw new AuthenticationException(e);
}
}","public static Authorization fromToken(SecretKeySpec key,String token) throws AuthenticationException {
  if (token == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    int hashSizeBytes=16;
    Cipher decodingCipher=Cipher.getInstance(""String_Node_Str"");
    decodingCipher.init(Cipher.DECRYPT_MODE,key);
    ByteBuffer buffer=ByteBuffer.wrap(decodingCipher.doFinal(Hex.decodeHex(token.toCharArray())));
    MessageDigest messageDigest=MessageDigest.getInstance(""String_Node_Str"");
    byte[] foundHash=new byte[hashSizeBytes];
    buffer.get(foundHash,0,hashSizeBytes);
    byte[] hashInput=new byte[buffer.capacity() - hashSizeBytes];
    buffer.get(hashInput);
    buffer.position(hashSizeBytes);
    byte[] calculatedHash=messageDigest.digest(hashInput);
    if (Arrays.equals(foundHash,calculatedHash)) {
      byte type=buffer.get();
      Authorization authorization=null;
      long expires=buffer.getLong();
      long uoid=buffer.getLong();
switch (type) {
case ExplicitRightsAuthorization.ID:
        authorization=ExplicitRightsAuthorization.fromBuffer(buffer);
      break;
case UserAuthorization.ID:
    authorization=UserAuthorization.fromBuffer(buffer);
  break;
case SystemAuthorization.ID:
authorization=SystemAuthorization.fromBuffer(buffer);
break;
case AnonymousAuthorization.ID:
authorization=AnonymousAuthorization.fromBuffer(buffer);
break;
case AdminAuthorization.ID:
authorization=AdminAuthorization.fromBuffer(buffer);
break;
default :
throw new AuthenticationException(""String_Node_Str"" + type);
}
authorization.setUoid(uoid);
authorization.setExpires(expires);
if (authorization.getExpires().getTimeInMillis() < new GregorianCalendar().getTimeInMillis()) {
throw new AuthenticationException(""String_Node_Str"");
}
return authorization;
}
 else {
throw new AuthenticationException(""String_Node_Str"");
}
}
 catch (GeneralSecurityException e) {
throw new AuthenticationException(""String_Node_Str"",e);
}
catch (DecoderException e) {
throw new AuthenticationException(e);
}
}",0.9931540342298288
160530,"public void newRevision(BimServerClientInterface bimServerClientInterface,long poid,long roid,String userToken,long soid,SObjectType settings) throws ServerException, UserException {
  Bcf bcf=new Bcf();
  SSerializerPluginConfiguration sSerializer;
  try {
    sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
    long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
    SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      ((EmfSerializerDataSource)downloadData.getFile().getDataSource()).getSerializer().writeToOutputStream(baos);
      Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
      deserializer.init(getPluginManager().requireSchemaDefinition());
      IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
      List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
      IfcProject mainIfcProject=null;
      if (!ifcProjects.isEmpty()) {
        mainIfcProject=ifcProjects.get(0);
      }
      RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
      renderEngine.init();
      RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
      Set<RenderEngineClash> clashes=renderEngineModel.findClashesWithEids(pluginConfiguration.getDouble(""String_Node_Str""));
      RenderEngineGeometry geometry=renderEngineModel.finalizeModelling(renderEngineModel.initializeModelling());
      StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
      boolean renderImage=true;
      try {
        stillImageRenderer.init(model);
      }
 catch (      StillImageRendererException e) {
        renderImage=false;
      }
      for (      RenderEngineClash clash : clashes) {
        RenderEngineInstanceVisualisationProperties vp=renderEngineModel.getInstanceFromExpressId((int)clash.getEid1()).getVisualisationProperties();
        float x=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        float y=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        float z=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        String guid1=((IfcRoot)model.get(clash.getEid1())).getGlobalId();
        String guid2=((IfcRoot)model.get(clash.getEid2())).getGlobalId();
        UUID topicUuid=UUID.randomUUID();
        Issue issue=new Issue(topicUuid);
        Markup markup=new Markup();
        Header header=new Header();
        File file=new File();
        file.setIfcProject(mainIfcProject.getGlobalId());
        file.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        file.setFilename(""String_Node_Str"");
        header.getFile().add(file);
        markup.setHeader(header);
        Topic topic=new Topic();
        topic.setGuid(topicUuid.toString());
        topic.setTitle(""String_Node_Str"");
        markup.setTopic(topic);
        VisualizationInfo visualizationInfo=new VisualizationInfo();
        Component component1=new Component();
        component1.setIfcGuid(guid1);
        component1.setOriginatingSystem(""String_Node_Str"");
        component1.setAuthoringToolId(""String_Node_Str"" + clash.getEid1());
        Component component2=new Component();
        component2.setIfcGuid(guid2);
        component2.setOriginatingSystem(""String_Node_Str"");
        component2.setAuthoringToolId(""String_Node_Str"" + clash.getEid2());
        VisualizationInfo.Components components=new VisualizationInfo.Components();
        visualizationInfo.setComponents(components);
        components.getComponent().add(component1);
        components.getComponent().add(component2);
        PerspectiveCamera perspectiveCamera=new PerspectiveCamera();
        perspectiveCamera.setFieldOfView(45.0);
        perspectiveCamera.setCameraUpVector(newDirection(0,0,1));
        perspectiveCamera.setCameraViewPoint(newPoint(x - 100,y,z));
        perspectiveCamera.setCameraDirection(newDirection(x,y,z));
        visualizationInfo.setPerspectiveCamera(perspectiveCamera);
        visualizationInfo.setLines(new VisualizationInfo.Lines());
        visualizationInfo.setClippingPlanes(new VisualizationInfo.ClippingPlanes());
        if (renderImage) {
          byte[] snapshot=stillImageRenderer.snapshot(new Vector3f(x - 100,y,z),new Vector3f(0,0,1),new Vector3f(x,y,z),500,500,null);
          issue.setImageData(snapshot);
        }
 else {
          ByteArrayOutputStream baos2=new ByteArrayOutputStream();
          ImageIO.write(new BufferedImage(100,100,BufferedImage.TYPE_INT_ARGB),""String_Node_Str"",baos2);
          issue.setImageData(baos2.toByteArray());
        }
        issue.setMarkup(markup);
        issue.setVisualizationInfo(visualizationInfo);
        bcf.addIssue(issue);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
    SFile file=new SFile();
    SExtendedData extendedData=new SExtendedData();
    extendedData.setTitle(""String_Node_Str"");
    file.setFilename(""String_Node_Str"");
    extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
    try {
      byte[] bytes=bcf.toBytes();
      file.setData(bytes);
      file.setMime(""String_Node_Str"");
      long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
      extendedData.setFileId(fileId);
      bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 catch (  PublicInterfaceNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void newRevision(BimServerClientInterface bimServerClientInterface,long poid,long roid,String userToken,long soid,SObjectType settings) throws ServerException, UserException {
  Bcf bcf=new Bcf();
  SSerializerPluginConfiguration sSerializer;
  try {
    sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
    long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
    SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      DataSource dataSource=downloadData.getFile().getDataSource();
      if (dataSource instanceof ByteArrayDataSource) {
        org.apache.commons.io.IOUtils.copy(((ByteArrayDataSource)dataSource).getInputStream(),baos);
      }
 else {
        ((EmfSerializerDataSource)dataSource).getSerializer().writeToOutputStream(baos);
      }
      Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
      deserializer.init(getPluginManager().requireSchemaDefinition());
      IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
      List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
      IfcProject mainIfcProject=null;
      if (!ifcProjects.isEmpty()) {
        mainIfcProject=ifcProjects.get(0);
      }
      RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
      renderEngine.init();
      RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
      Set<RenderEngineClash> clashes=renderEngineModel.findClashesWithEids(pluginConfiguration.getDouble(""String_Node_Str""));
      RenderEngineGeometry geometry=renderEngineModel.finalizeModelling(renderEngineModel.initializeModelling());
      StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
      boolean renderImage=true;
      try {
        stillImageRenderer.init(model);
      }
 catch (      StillImageRendererException e) {
        renderImage=false;
      }
      for (      RenderEngineClash clash : clashes) {
        RenderEngineInstanceVisualisationProperties vp=renderEngineModel.getInstanceFromExpressId((int)clash.getEid1()).getVisualisationProperties();
        float x=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        float y=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        float z=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
        String guid1=((IfcRoot)model.get(clash.getEid1())).getGlobalId();
        String guid2=((IfcRoot)model.get(clash.getEid2())).getGlobalId();
        UUID topicUuid=UUID.randomUUID();
        Issue issue=new Issue(topicUuid);
        Markup markup=new Markup();
        Header header=new Header();
        File file=new File();
        file.setIfcProject(mainIfcProject.getGlobalId());
        file.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        file.setFilename(""String_Node_Str"");
        header.getFile().add(file);
        markup.setHeader(header);
        Topic topic=new Topic();
        topic.setGuid(topicUuid.toString());
        topic.setTitle(""String_Node_Str"");
        markup.setTopic(topic);
        VisualizationInfo visualizationInfo=new VisualizationInfo();
        Component component1=new Component();
        component1.setIfcGuid(guid1);
        component1.setOriginatingSystem(""String_Node_Str"");
        component1.setAuthoringToolId(""String_Node_Str"" + clash.getEid1());
        Component component2=new Component();
        component2.setIfcGuid(guid2);
        component2.setOriginatingSystem(""String_Node_Str"");
        component2.setAuthoringToolId(""String_Node_Str"" + clash.getEid2());
        VisualizationInfo.Components components=new VisualizationInfo.Components();
        visualizationInfo.setComponents(components);
        components.getComponent().add(component1);
        components.getComponent().add(component2);
        PerspectiveCamera perspectiveCamera=new PerspectiveCamera();
        perspectiveCamera.setFieldOfView(45.0);
        perspectiveCamera.setCameraUpVector(newDirection(0,0,1));
        perspectiveCamera.setCameraViewPoint(newPoint(x - 100,y,z));
        perspectiveCamera.setCameraDirection(newDirection(x,y,z));
        visualizationInfo.setPerspectiveCamera(perspectiveCamera);
        visualizationInfo.setLines(new VisualizationInfo.Lines());
        visualizationInfo.setClippingPlanes(new VisualizationInfo.ClippingPlanes());
        if (renderImage) {
          byte[] snapshot=stillImageRenderer.snapshot(new Vector3f(x - 100,y,z),new Vector3f(0,0,1),new Vector3f(x,y,z),500,500,null);
          issue.setImageData(snapshot);
        }
 else {
          ByteArrayOutputStream baos2=new ByteArrayOutputStream();
          ImageIO.write(new BufferedImage(100,100,BufferedImage.TYPE_INT_ARGB),""String_Node_Str"",baos2);
          issue.setImageData(baos2.toByteArray());
        }
        issue.setMarkup(markup);
        issue.setVisualizationInfo(visualizationInfo);
        bcf.addIssue(issue);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
    SFile file=new SFile();
    SExtendedData extendedData=new SExtendedData();
    extendedData.setTitle(""String_Node_Str"");
    file.setFilename(""String_Node_Str"");
    extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
    try {
      byte[] bytes=bcf.toBytes();
      file.setData(bytes);
      file.setMime(""String_Node_Str"");
      long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
      extendedData.setFileId(fileId);
      bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 catch (  PublicInterfaceNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9736047066306248
160531,"public void register(final PluginConfiguration pluginConfiguration){
  ServiceDescriptor clashDetection=StoreFactory.eINSTANCE.createServiceDescriptor();
  clashDetection.setProviderName(""String_Node_Str"");
  clashDetection.setIdentifier(getClass().getName());
  clashDetection.setName(""String_Node_Str"");
  clashDetection.setDescription(""String_Node_Str"");
  clashDetection.setNotificationProtocol(AccessMethod.INTERNAL);
  clashDetection.setReadRevision(true);
  clashDetection.setWriteExtendedData(""String_Node_Str"");
  clashDetection.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(clashDetection,new NewRevisionHandler(){
    public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Bcf bcf=new Bcf();
      SSerializerPluginConfiguration sSerializer;
      try {
        sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
        long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
        SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
        try {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          ((EmfSerializerDataSource)downloadData.getFile().getDataSource()).getSerializer().writeToOutputStream(baos);
          Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
          deserializer.init(getPluginManager().requireSchemaDefinition());
          IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
          List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
          IfcProject mainIfcProject=null;
          if (!ifcProjects.isEmpty()) {
            mainIfcProject=ifcProjects.get(0);
          }
          RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
          renderEngine.init();
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
          Set<RenderEngineClash> clashes=renderEngineModel.findClashesWithEids(pluginConfiguration.getDouble(""String_Node_Str""));
          RenderEngineGeometry geometry=renderEngineModel.finalizeModelling(renderEngineModel.initializeModelling());
          StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
          boolean renderImage=true;
          try {
            stillImageRenderer.init(model);
          }
 catch (          StillImageRendererException e) {
            renderImage=false;
          }
          for (          RenderEngineClash clash : clashes) {
            RenderEngineInstanceVisualisationProperties vp=renderEngineModel.getInstanceFromExpressId((int)clash.getEid1()).getVisualisationProperties();
            float x=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            float y=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            float z=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            String guid1=((IfcRoot)model.get(clash.getEid1())).getGlobalId();
            String guid2=((IfcRoot)model.get(clash.getEid2())).getGlobalId();
            UUID topicUuid=UUID.randomUUID();
            Issue issue=new Issue(topicUuid);
            Markup markup=new Markup();
            Header header=new Header();
            File file=new File();
            file.setIfcProject(mainIfcProject.getGlobalId());
            file.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
            file.setFilename(""String_Node_Str"");
            header.getFile().add(file);
            markup.setHeader(header);
            Topic topic=new Topic();
            topic.setGuid(topicUuid.toString());
            topic.setTitle(""String_Node_Str"");
            markup.setTopic(topic);
            VisualizationInfo visualizationInfo=new VisualizationInfo();
            Component component1=new Component();
            component1.setIfcGuid(guid1);
            component1.setOriginatingSystem(""String_Node_Str"");
            component1.setAuthoringToolId(""String_Node_Str"" + clash.getEid1());
            Component component2=new Component();
            component2.setIfcGuid(guid2);
            component2.setOriginatingSystem(""String_Node_Str"");
            component2.setAuthoringToolId(""String_Node_Str"" + clash.getEid2());
            VisualizationInfo.Components components=new VisualizationInfo.Components();
            visualizationInfo.setComponents(components);
            components.getComponent().add(component1);
            components.getComponent().add(component2);
            PerspectiveCamera perspectiveCamera=new PerspectiveCamera();
            perspectiveCamera.setFieldOfView(45.0);
            perspectiveCamera.setCameraUpVector(newDirection(0,0,1));
            perspectiveCamera.setCameraViewPoint(newPoint(x - 100,y,z));
            perspectiveCamera.setCameraDirection(newDirection(x,y,z));
            visualizationInfo.setPerspectiveCamera(perspectiveCamera);
            visualizationInfo.setLines(new VisualizationInfo.Lines());
            visualizationInfo.setClippingPlanes(new VisualizationInfo.ClippingPlanes());
            if (renderImage) {
              byte[] snapshot=stillImageRenderer.snapshot(new Vector3f(x - 100,y,z),new Vector3f(0,0,1),new Vector3f(x,y,z),500,500,null);
              issue.setImageData(snapshot);
            }
 else {
              ByteArrayOutputStream baos2=new ByteArrayOutputStream();
              ImageIO.write(new BufferedImage(100,100,BufferedImage.TYPE_INT_ARGB),""String_Node_Str"",baos2);
              issue.setImageData(baos2.toByteArray());
            }
            issue.setMarkup(markup);
            issue.setVisualizationInfo(visualizationInfo);
            bcf.addIssue(issue);
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
        SFile file=new SFile();
        SExtendedData extendedData=new SExtendedData();
        extendedData.setTitle(""String_Node_Str"");
        file.setFilename(""String_Node_Str"");
        extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
        try {
          byte[] bytes=bcf.toBytes();
          file.setData(bytes);
          file.setMime(""String_Node_Str"");
          long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
          extendedData.setFileId(fileId);
          bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","public void register(final PluginConfiguration pluginConfiguration){
  ServiceDescriptor clashDetection=StoreFactory.eINSTANCE.createServiceDescriptor();
  clashDetection.setProviderName(""String_Node_Str"");
  clashDetection.setIdentifier(getClass().getName());
  clashDetection.setName(""String_Node_Str"");
  clashDetection.setDescription(""String_Node_Str"");
  clashDetection.setNotificationProtocol(AccessMethod.INTERNAL);
  clashDetection.setReadRevision(true);
  clashDetection.setWriteExtendedData(""String_Node_Str"");
  clashDetection.setTrigger(Trigger.NEW_REVISION);
  registerNewRevisionHandler(clashDetection,new NewRevisionHandler(){
    public void newRevision(    BimServerClientInterface bimServerClientInterface,    long poid,    long roid,    String userToken,    long soid,    SObjectType settings) throws ServerException, UserException {
      Bcf bcf=new Bcf();
      SSerializerPluginConfiguration sSerializer;
      try {
        sSerializer=bimServerClientInterface.getPluginInterface().getSerializerByPluginClassName(""String_Node_Str"");
        long download=bimServerClientInterface.getBimsie1ServiceInterface().download(roid,sSerializer.getOid(),true,true);
        SDownloadResult downloadData=bimServerClientInterface.getBimsie1ServiceInterface().getDownloadData(download);
        try {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          DataSource dataSource=downloadData.getFile().getDataSource();
          if (dataSource instanceof ByteArrayDataSource) {
            org.apache.commons.io.IOUtils.copy(((ByteArrayDataSource)dataSource).getInputStream(),baos);
          }
 else {
            ((EmfSerializerDataSource)dataSource).getSerializer().writeToOutputStream(baos);
          }
          Deserializer deserializer=getPluginManager().requireDeserializer(""String_Node_Str"").createDeserializer(new PluginConfiguration());
          deserializer.init(getPluginManager().requireSchemaDefinition());
          IfcModelInterface model=deserializer.read(new ByteArrayInputStream(baos.toByteArray()),""String_Node_Str"",baos.size());
          List<IfcProject> ifcProjects=model.getAll(IfcProject.class);
          IfcProject mainIfcProject=null;
          if (!ifcProjects.isEmpty()) {
            mainIfcProject=ifcProjects.get(0);
          }
          RenderEngine renderEngine=getPluginManager().requireRenderEngine().createRenderEngine(new PluginConfiguration());
          renderEngine.init();
          RenderEngineModel renderEngineModel=renderEngine.openModel(new ByteArrayInputStream(baos.toByteArray()),baos.size());
          Set<RenderEngineClash> clashes=renderEngineModel.findClashesWithEids(pluginConfiguration.getDouble(""String_Node_Str""));
          RenderEngineGeometry geometry=renderEngineModel.finalizeModelling(renderEngineModel.initializeModelling());
          StillImageRenderer stillImageRenderer=getPluginManager().getFirstStillImageRenderPlugin().create(new PluginConfiguration());
          boolean renderImage=true;
          try {
            stillImageRenderer.init(model);
          }
 catch (          StillImageRendererException e) {
            renderImage=false;
          }
          for (          RenderEngineClash clash : clashes) {
            RenderEngineInstanceVisualisationProperties vp=renderEngineModel.getInstanceFromExpressId((int)clash.getEid1()).getVisualisationProperties();
            float x=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            float y=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            float z=geometry.getVertex(geometry.getIndex(vp.getStartIndex()));
            String guid1=((IfcRoot)model.get(clash.getEid1())).getGlobalId();
            String guid2=((IfcRoot)model.get(clash.getEid2())).getGlobalId();
            UUID topicUuid=UUID.randomUUID();
            Issue issue=new Issue(topicUuid);
            Markup markup=new Markup();
            Header header=new Header();
            File file=new File();
            file.setIfcProject(mainIfcProject.getGlobalId());
            file.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
            file.setFilename(""String_Node_Str"");
            header.getFile().add(file);
            markup.setHeader(header);
            Topic topic=new Topic();
            topic.setGuid(topicUuid.toString());
            topic.setTitle(""String_Node_Str"");
            markup.setTopic(topic);
            VisualizationInfo visualizationInfo=new VisualizationInfo();
            Component component1=new Component();
            component1.setIfcGuid(guid1);
            component1.setOriginatingSystem(""String_Node_Str"");
            component1.setAuthoringToolId(""String_Node_Str"" + clash.getEid1());
            Component component2=new Component();
            component2.setIfcGuid(guid2);
            component2.setOriginatingSystem(""String_Node_Str"");
            component2.setAuthoringToolId(""String_Node_Str"" + clash.getEid2());
            VisualizationInfo.Components components=new VisualizationInfo.Components();
            visualizationInfo.setComponents(components);
            components.getComponent().add(component1);
            components.getComponent().add(component2);
            PerspectiveCamera perspectiveCamera=new PerspectiveCamera();
            perspectiveCamera.setFieldOfView(45.0);
            perspectiveCamera.setCameraUpVector(newDirection(0,0,1));
            perspectiveCamera.setCameraViewPoint(newPoint(x - 100,y,z));
            perspectiveCamera.setCameraDirection(newDirection(x,y,z));
            visualizationInfo.setPerspectiveCamera(perspectiveCamera);
            visualizationInfo.setLines(new VisualizationInfo.Lines());
            visualizationInfo.setClippingPlanes(new VisualizationInfo.ClippingPlanes());
            if (renderImage) {
              byte[] snapshot=stillImageRenderer.snapshot(new Vector3f(x - 100,y,z),new Vector3f(0,0,1),new Vector3f(x,y,z),500,500,null);
              issue.setImageData(snapshot);
            }
 else {
              ByteArrayOutputStream baos2=new ByteArrayOutputStream();
              ImageIO.write(new BufferedImage(100,100,BufferedImage.TYPE_INT_ARGB),""String_Node_Str"",baos2);
              issue.setImageData(baos2.toByteArray());
            }
            issue.setMarkup(markup);
            issue.setVisualizationInfo(visualizationInfo);
            bcf.addIssue(issue);
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        SExtendedDataSchema extendedDataSchemaByNamespace=bimServerClientInterface.getBimsie1ServiceInterface().getExtendedDataSchemaByNamespace(""String_Node_Str"");
        SFile file=new SFile();
        SExtendedData extendedData=new SExtendedData();
        extendedData.setTitle(""String_Node_Str"");
        file.setFilename(""String_Node_Str"");
        extendedData.setSchemaId(extendedDataSchemaByNamespace.getOid());
        try {
          byte[] bytes=bcf.toBytes();
          file.setData(bytes);
          file.setMime(""String_Node_Str"");
          long fileId=bimServerClientInterface.getServiceInterface().uploadFile(file);
          extendedData.setFileId(fileId);
          bimServerClientInterface.getBimsie1ServiceInterface().addExtendedDataToRevision(roid,extendedData);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9762867151711128
160532,"private P getBimServerClient(String serviceIdentifier,String profileIdentifier,String apiUrl,String token){
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  P p=new P();
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      long profileId=Long.parseLong(profileIdentifier);
      EClass eClassForOid=session.getEClassForOid(profileId);
      InternalServicePluginConfiguration internalServicePluginConfiguration=null;
      if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
        internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
      }
 else       if (eClassForOid == StorePackage.eINSTANCE.getService()) {
        Service service=session.get(profileId,Query.getDefault());
        internalServicePluginConfiguration=service.getInternalService();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
      final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
      BimServerClientInterface bimServerClient=null;
      if (apiUrl == null) {
        bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
      }
 else {
        bimServerClient=new JsonBimServerClientFactory(apiUrl).create(new TokenAuthentication(token));
      }
      p.client=bimServerClient;
      p.settings=settings;
      p.configurationId=finalInternalServicePluginConfiguration.getOid();
      return p;
    }
 catch (    BimserverDatabaseException e) {
      e.printStackTrace();
    }
catch (    ServiceException e) {
      e.printStackTrace();
    }
catch (    ChannelConnectionException e) {
      e.printStackTrace();
    }
 finally {
      session.close();
    }
  }
  finally {
  }
  return null;
}","private P getBimServerClient(String serviceIdentifier,String profileIdentifier,String apiUrl,String token){
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  P p=new P();
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      long profileId=Long.parseLong(profileIdentifier);
      EClass eClassForOid=session.getEClassForOid(profileId);
      InternalServicePluginConfiguration internalServicePluginConfiguration=null;
      if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
        internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
      }
 else       if (eClassForOid == StorePackage.eINSTANCE.getService()) {
        Service service=session.get(profileId,Query.getDefault());
        internalServicePluginConfiguration=service.getInternalService();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
      final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
      BimServerClientInterface bimServerClient=null;
      BimServerClientFactory factory=null;
      if (apiUrl == null) {
        factory=bimServer.getBimServerClientFactory();
      }
 else {
        if (factories.containsKey(apiUrl)) {
          factory=factories.get(apiUrl);
        }
 else {
          FileBasedReflectorFactoryBuilder reflectorBuilder=new FileBasedReflectorFactoryBuilder();
          ReflectorFactory reflectorFactory=reflectorBuilder.newReflectorFactory();
          factory=new JsonBimServerClientFactory(apiUrl,bimServer.getServicesMap(),new JsonSocketReflectorFactory(bimServer.getServicesMap()),reflectorFactory);
          factories.put(apiUrl,factory);
        }
      }
      bimServerClient=factory.create(new TokenAuthentication(token));
      p.client=bimServerClient;
      p.settings=settings;
      p.configurationId=finalInternalServicePluginConfiguration.getOid();
      return p;
    }
 catch (    BimserverDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    ChannelConnectionException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
 finally {
      session.close();
    }
  }
  finally {
  }
  return null;
}",0.8263928503517779
160533,"@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (request.getHeader(""String_Node_Str"") != null && (getBimServer().getServerInfo().getServerState() != ServerState.MIGRATION_REQUIRED && !getBimServer().getServerSettingsCache().isHostAllowed(request.getHeader(""String_Node_Str"")))) {
    response.setStatus(403);
    return;
  }
  response.setHeader(""String_Node_Str"",request.getHeader(""String_Node_Str""));
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    return;
  }
  handleRequest(request,response,getBimServer());
}","@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (request.getHeader(""String_Node_Str"") != null && (getBimServer().getServerInfo().getServerState() != ServerState.MIGRATION_REQUIRED && !getBimServer().getServerSettingsCache().isHostAllowed(request.getHeader(""String_Node_Str"")))) {
    response.setStatus(403);
    return;
  }
  response.setHeader(""String_Node_Str"",request.getHeader(""String_Node_Str""));
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    return;
  }
  response.setCharacterEncoding(""String_Node_Str"");
  try {
    ServletInputStream inputStream=request.getInputStream();
    byte[] bytes=IOUtils.toByteArray(inputStream);
    JsonReader jsonReader=new JsonReader(new InputStreamReader(new ByteArrayInputStream(bytes)));
    JsonParser parser=new JsonParser();
    JsonElement parse=parser.parse(jsonReader);
    if (parse instanceof JsonObject) {
      JsonObject jsonRequest=(JsonObject)parse;
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      getBimServer().getJsonHandler().execute(jsonRequest,request,response.getWriter());
    }
 else {
      LOGGER.error(""String_Node_Str"" + new String(bytes,Charsets.UTF_8));
      response.setStatus(500);
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    response.setStatus(500);
  }
}",0.6106153123532174
160534,"@Override public int compare(SPluginConfiguration o1,SPluginConfiguration o2){
  return o1.getName().compareTo(o2.getName());
}","@Override public int compare(SPluginConfiguration o1,SPluginConfiguration o2){
  if (o1.getName() == null && o2.getName() != null) {
    return 1;
  }
 else   if (o1.getName() != null && o2.getName() == null) {
    return -1;
  }
 else   if (o1.getName() == null && o2.getName() == null) {
    return 0;
  }
 else {
    return o1.getName().compareTo(o2.getName());
  }
}",0.5070422535211268
160535,"@Override public Object set(InternalEObject eObject,EStructuralFeature eFeature,int index,Object newValue){
  IdEObject idEObject=(IdEObject)eObject;
  if (index == NO_INDEX) {
    if (clientIfcModel.getModelState() != ModelState.LOADING) {
      try {
        if (newValue != EStructuralFeature.Internal.DynamicValueHolder.NIL) {
          Bimsie1LowLevelInterface lowLevelInterface=clientIfcModel.getBimServerClient().getBimsie1LowLevelInterface();
          if (eFeature.getName().equals(""String_Node_Str"")) {
            IdEObject parentObject=clientIfcModel.get(idEObject.getOid());
            int found=0;
            EReference foundReference=null;
            for (            EReference testReference : parentObject.eClass().getEAllReferences()) {
              if (((EClass)testReference.getEType()).isSuperTypeOf(idEObject.eClass())) {
                foundReference=testReference;
                found++;
                if (found > 1) {
                  throw new RuntimeException(""String_Node_Str"" + parentObject.eClass().getName() + ""String_Node_Str""+ idEObject.eClass().getName()+ ""String_Node_Str"");
                }
              }
            }
            if (eFeature.getEType() == EcorePackage.eINSTANCE.getEString()) {
              lowLevelInterface.setWrappedStringAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(String)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getELong() || eFeature.getEType() == EcorePackage.eINSTANCE.getELongObject()) {
              lowLevelInterface.setWrappedLongAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Long)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
              lowLevelInterface.setWrappedDoubleAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Double)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEBoolean() || eFeature.getEType() == EcorePackage.eINSTANCE.getEBooleanObject()) {
              lowLevelInterface.setWrappedBooleanAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Boolean)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEInt() || eFeature.getEType() == EcorePackage.eINSTANCE.getEIntegerObject()) {
              lowLevelInterface.setWrappedIntegerAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Integer)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
              throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
            }
          }
 else {
            if (eFeature.getEType() == EcorePackage.eINSTANCE.getEString()) {
              lowLevelInterface.setStringAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(String)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getELong() || eFeature.getEType() == EcorePackage.eINSTANCE.getELongObject()) {
              lowLevelInterface.setLongAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Long)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
              lowLevelInterface.setDoubleAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Double)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEBoolean() || eFeature.getEType() == EcorePackage.eINSTANCE.getEBooleanObject()) {
              lowLevelInterface.setBooleanAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Boolean)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEInt() || eFeature.getEType() == EcorePackage.eINSTANCE.getEIntegerObject()) {
              lowLevelInterface.setIntegerAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Integer)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
              lowLevelInterface.setByteArrayAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Byte[])newValue);
            }
 else             if (eFeature.getEType() instanceof EEnum) {
              lowLevelInterface.setEnumAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((Enum<?>)newValue).toString());
            }
 else             if (eFeature instanceof EReference) {
              if (newValue == null) {
                lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),-1L);
              }
 else {
                lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((IdEObject)newValue).getOid());
              }
            }
 else {
              throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
            }
          }
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else {
    if (clientIfcModel.getModelState() != ModelState.LOADING) {
      try {
        Bimsie1LowLevelInterface lowLevelInterface=clientIfcModel.getBimServerClient().getBimsie1LowLevelInterface();
        if (newValue instanceof String) {
          lowLevelInterface.setStringAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(String)newValue);
        }
 else         if (newValue instanceof Double) {
          lowLevelInterface.setDoubleAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Double)newValue);
        }
 else         if (newValue instanceof Boolean) {
          lowLevelInterface.setBooleanAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Boolean)newValue);
        }
 else         if (newValue instanceof Integer) {
          lowLevelInterface.setIntegerAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Integer)newValue);
        }
 else         if (newValue instanceof IdEObject) {
          lowLevelInterface.addReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((IdEObject)newValue).getOid());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
        }
      }
 catch (      ServerException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return super.set(eObject,eFeature,index,newValue);
}","@Override public Object set(InternalEObject eObject,EStructuralFeature eFeature,int index,Object newValue){
  IdEObject idEObject=(IdEObject)eObject;
  if (index == NO_INDEX) {
    if (clientIfcModel.getModelState() != ModelState.LOADING) {
      try {
        if (newValue != EStructuralFeature.Internal.DynamicValueHolder.NIL) {
          Bimsie1LowLevelInterface lowLevelInterface=clientIfcModel.getBimServerClient().getBimsie1LowLevelInterface();
          if (eFeature.getName().equals(""String_Node_Str"")) {
            EReference foundReference=null;
            if (clientIfcModel.contains(idEObject.getOid())) {
              IdEObject parentObject=clientIfcModel.get(idEObject.getOid());
              int found=0;
              foundReference=null;
              for (              EReference testReference : parentObject.eClass().getEAllReferences()) {
                if (((EClass)testReference.getEType()).isSuperTypeOf(idEObject.eClass())) {
                  foundReference=testReference;
                  found++;
                  if (found > 1) {
                    throw new RuntimeException(""String_Node_Str"" + parentObject.eClass().getName() + ""String_Node_Str""+ idEObject.eClass().getName()+ ""String_Node_Str"");
                  }
                }
              }
              if (eFeature.getEType() == EcorePackage.eINSTANCE.getEString()) {
                lowLevelInterface.setWrappedStringAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(String)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getELong() || eFeature.getEType() == EcorePackage.eINSTANCE.getELongObject()) {
                lowLevelInterface.setWrappedLongAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Long)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
                lowLevelInterface.setWrappedDoubleAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Double)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEBoolean() || eFeature.getEType() == EcorePackage.eINSTANCE.getEBooleanObject()) {
                lowLevelInterface.setWrappedBooleanAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Boolean)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEInt() || eFeature.getEType() == EcorePackage.eINSTANCE.getEIntegerObject()) {
                lowLevelInterface.setWrappedIntegerAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),foundReference.getName(),idEObject.eClass().getName(),(Integer)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
                throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
              }
            }
 else {
              if (eFeature.getEType() == EcorePackage.eINSTANCE.getEString()) {
                lowLevelInterface.setStringAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(String)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getELong() || eFeature.getEType() == EcorePackage.eINSTANCE.getELongObject()) {
                lowLevelInterface.setLongAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Long)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
                lowLevelInterface.setDoubleAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Double)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEBoolean() || eFeature.getEType() == EcorePackage.eINSTANCE.getEBooleanObject()) {
                lowLevelInterface.setBooleanAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Boolean)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEInt() || eFeature.getEType() == EcorePackage.eINSTANCE.getEIntegerObject()) {
                lowLevelInterface.setIntegerAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Integer)newValue);
              }
 else               if (eFeature.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
                lowLevelInterface.setByteArrayAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Byte[])newValue);
              }
 else               if (eFeature.getEType() instanceof EEnum) {
                lowLevelInterface.setEnumAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((Enum<?>)newValue).toString());
              }
 else               if (eFeature instanceof EReference) {
                if (newValue == null) {
                  lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),-1L);
                }
 else {
                  lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((IdEObject)newValue).getOid());
                }
              }
 else {
                throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
              }
            }
          }
 else {
            if (eFeature.getEType() == EcorePackage.eINSTANCE.getEString()) {
              lowLevelInterface.setStringAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(String)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getELong() || eFeature.getEType() == EcorePackage.eINSTANCE.getELongObject()) {
              lowLevelInterface.setLongAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Long)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
              lowLevelInterface.setDoubleAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Double)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEBoolean() || eFeature.getEType() == EcorePackage.eINSTANCE.getEBooleanObject()) {
              lowLevelInterface.setBooleanAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Boolean)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEInt() || eFeature.getEType() == EcorePackage.eINSTANCE.getEIntegerObject()) {
              lowLevelInterface.setIntegerAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Integer)newValue);
            }
 else             if (eFeature.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
              lowLevelInterface.setByteArrayAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),(Byte[])newValue);
            }
 else             if (eFeature.getEType() instanceof EEnum) {
              lowLevelInterface.setEnumAttribute(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((Enum<?>)newValue).toString());
            }
 else             if (eFeature instanceof EReference) {
              if (newValue == null) {
                lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),-1L);
              }
 else {
                lowLevelInterface.setReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((IdEObject)newValue).getOid());
              }
            }
 else {
              throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
            }
          }
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 else {
    if (clientIfcModel.getModelState() != ModelState.LOADING) {
      try {
        Bimsie1LowLevelInterface lowLevelInterface=clientIfcModel.getBimServerClient().getBimsie1LowLevelInterface();
        if (newValue instanceof String) {
          lowLevelInterface.setStringAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(String)newValue);
        }
 else         if (newValue instanceof Double) {
          lowLevelInterface.setDoubleAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Double)newValue);
        }
 else         if (newValue instanceof Boolean) {
          lowLevelInterface.setBooleanAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Boolean)newValue);
        }
 else         if (newValue instanceof Integer) {
          lowLevelInterface.setIntegerAttributeAtIndex(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),index,(Integer)newValue);
        }
 else         if (newValue instanceof IdEObject) {
          lowLevelInterface.addReference(clientIfcModel.getTransactionId(),idEObject.getOid(),eFeature.getName(),((IdEObject)newValue).getOid());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + eFeature.getEType().getName() + ""String_Node_Str""+ newValue);
        }
      }
 catch (      ServerException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      UserException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
catch (      PublicInterfaceNotFoundException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return super.set(eObject,eFeature,index,newValue);
}",0.6618124789963034
160536,"public void loadExplicit(long oid){
  try {
    IdEObjectImpl idEObjectImpl=(IdEObjectImpl)super.get(oid);
    if (!idEObjectImpl.isLoadedOrLoading()) {
      LOGGER.info(""String_Node_Str"" + oid);
      modelState=ModelState.LOADING;
      Long downloadByOids=bimServerClient.getBimsie1ServiceInterface().downloadByOids(Collections.singleton(roid),Collections.singleton(oid),getIfcSerializerOid(),true,false);
      processDownload(downloadByOids);
      modelState=ModelState.NONE;
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void loadExplicit(long oid){
  try {
    IdEObjectImpl idEObjectImpl=(IdEObjectImpl)super.get(oid);
    if (idEObjectImpl != null && !idEObjectImpl.isLoadedOrLoading()) {
      LOGGER.info(""String_Node_Str"" + oid);
      modelState=ModelState.LOADING;
      Long downloadByOids=bimServerClient.getBimsie1ServiceInterface().downloadByOids(Collections.singleton(roid),Collections.singleton(oid),getIfcSerializerOid(),true,false);
      processDownload(downloadByOids);
      modelState=ModelState.NONE;
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9782419495213228
160537,"private void start(){
  JsonBimServerClientFactory factory=new JsonBimServerClientFactory(""String_Node_Str"");
  try {
    BimServerClient client=factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
    long poid=131073;
    long roid=131075;
    ClientIfcModel model=client.getModel(poid,roid,true);
    for (    IfcPropertySingleValue prop : model.getAll(IfcPropertySingleValue.class)) {
      IfcValue value=((IfcPropertySingleValue)prop).getNominalValue();
      if (value instanceof IfcLabel) {
        System.out.println(prop.getOid() + ""String_Node_Str"" + ((IfcLabel)value).getWrappedValue());
        ((IfcLabel)value).setWrappedValue(((IfcLabel)value).getWrappedValue() + ""String_Node_Str"");
      }
    }
    model.commit(""String_Node_Str"");
  }
 catch (  ServiceException|ChannelConnectionException e) {
    e.printStackTrace();
  }
catch (  BimServerClientException e) {
    e.printStackTrace();
  }
catch (  PublicInterfaceNotFoundException e) {
    e.printStackTrace();
  }
}","private void start(){
  JsonBimServerClientFactory factory=new JsonBimServerClientFactory(""String_Node_Str"");
  try {
    BimServerClient client=factory.create(new UsernamePasswordAuthenticationInfo(""String_Node_Str"",""String_Node_Str""));
    long poid=2686977;
    long roid=720899;
    ClientIfcModel model=client.getModel(poid,roid,true);
    for (    IfcPropertySingleValue prop : model.getAll(IfcPropertySingleValue.class)) {
      IfcLabel label=model.create(IfcLabel.class);
      label.setWrappedValue(""String_Node_Str"");
      prop.setNominalValue(label);
    }
    model.commit(""String_Node_Str"");
  }
 catch (  ServiceException|ChannelConnectionException e) {
    e.printStackTrace();
  }
catch (  BimServerClientException e) {
    e.printStackTrace();
  }
catch (  PublicInterfaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  IfcModelInterfaceException e) {
    e.printStackTrace();
  }
}",0.5818743563336766
160538,"@Override public List<SProjectSmall> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<SProjectSmall> list=new ArrayList<SProjectSmall>();
  User user=getUserByUoid(authorization.getUoid());
  IfcModelInterface model=getDatabaseSession().getAllOfType(StorePackage.eINSTANCE.getProject(),Query.getDefault());
  List<Project> projects=model.getAll(Project.class);
  for (  Project project : projects) {
    if (project.getParent() == null) {
      Project rootProject=getRootProject(project);
      addProjects(list,rootProject,user);
    }
  }
  return list;
}","@Override public List<SProjectSmall> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  List<SProjectSmall> list=new ArrayList<SProjectSmall>();
  User user=getUserByUoid(authorization.getUoid());
  IfcModelInterface model=getDatabaseSession().getAllOfType(StorePackage.eINSTANCE.getProject(),Query.getDefault());
  List<Project> projects=model.getAll(Project.class);
  for (  Project project : projects) {
    if (project.getParent() == null && !project.getName().equals(Database.STORE_PROJECT_NAME)) {
      Project rootProject=getRootProject(project);
      addProjects(list,rootProject,user);
    }
  }
  return list;
}",0.9545454545454546
160539,"private void loadDeep() throws ServerException, UserException, BimServerClientException, PublicInterfaceNotFoundException {
  if (modelState != ModelState.FULLY_LOADED) {
    modelState=ModelState.LOADING;
    Long download=bimServerClient.getBimsie1ServiceInterface().download(roid,getIfcSerializerOid(),true,true);
    processDownload(download);
    modelState=ModelState.FULLY_LOADED;
  }
}","private void loadDeep() throws ServerException, UserException, BimServerClientException, PublicInterfaceNotFoundException {
  if (modelState != ModelState.FULLY_LOADED) {
    modelState=ModelState.LOADING;
    Long download=bimServerClient.getBimsie1ServiceInterface().download(roid,getIfcSerializerOid(),true,true);
    try {
      processDownload(download);
      modelState=ModelState.FULLY_LOADED;
    }
 catch (    IfcModelInterfaceException|IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.8646864686468647
160540,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void processDownload(Long download) throws BimServerClientException, UserException, ServerException, PublicInterfaceNotFoundException {
  WaitingList<Long> waitingList=new WaitingList<Long>();
  try {
    InputStream downloadData=bimServerClient.getDownloadData(download,getIfcSerializerOid());
    boolean log=false;
    if (log) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      if (downloadData instanceof SerializerInputstream) {
        SerializerInputstream serializerInputStream=(SerializerInputstream)downloadData;
        serializerInputStream.getEmfSerializer().writeToOutputStream(baos);
      }
 else {
        IOUtils.copy((InputStream)downloadData,baos);
      }
      FileOutputStream fos=new FileOutputStream(new File(download + ""String_Node_Str""));
      IOUtils.write(baos.toByteArray(),fos);
      fos.close();
      downloadData=new ByteArrayInputStream(baos.toByteArray());
    }
 else {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      if (downloadData instanceof SerializerInputstream) {
        SerializerInputstream serializerInputStream=(SerializerInputstream)downloadData;
        serializerInputStream.getEmfSerializer().writeToOutputStream(baos);
      }
 else {
        IOUtils.copy((InputStream)downloadData,baos);
      }
      downloadData=new ByteArrayInputStream(baos.toByteArray());
    }
    JsonReader jsonReader=new JsonReader(new InputStreamReader(downloadData,Charsets.UTF_8));
    try {
      jsonReader.beginObject();
      if (jsonReader.nextName().equals(""String_Node_Str"")) {
        jsonReader.beginArray();
        while (jsonReader.hasNext()) {
          jsonReader.beginObject();
          if (jsonReader.nextName().equals(""String_Node_Str"")) {
            long oid=jsonReader.nextLong();
            if (jsonReader.nextName().equals(""String_Node_Str"")) {
              String type=jsonReader.nextString();
              EClass eClass=(EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(type);
              if (eClass == null) {
                throw new BimServerClientException(""String_Node_Str"" + type);
              }
              if (jsonReader.nextName().equals(""String_Node_Str"")) {
                String state=jsonReader.nextString();
                IdEObject object=null;
                if (containsNoFetch(oid)) {
                  object=getNoFetch(oid);
                }
 else {
                  object=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create(eClass);
                  ((IdEObjectImpl)object).eSetStore(eStore);
                  ((IdEObjectImpl)object).setOid(oid);
                  add(oid,object);
                }
                if (state.equals(""String_Node_Str"")) {
                  ((IdEObjectImpl)object).setLoadingState(State.TO_BE_LOADED);
                }
 else {
                  while (jsonReader.hasNext()) {
                    String featureName=jsonReader.nextName();
                    boolean embedded=false;
                    if (featureName.startsWith(""String_Node_Str"")) {
                      featureName=featureName.substring(5);
                    }
 else                     if (featureName.startsWith(""String_Node_Str"")) {
                      embedded=true;
                      featureName=featureName.substring(5);
                    }
                    EStructuralFeature eStructuralFeature=eClass.getEStructuralFeature(featureName);
                    if (eStructuralFeature == null) {
                      throw new BimServerClientException(""String_Node_Str"" + featureName + ""String_Node_Str""+ eClass.getName());
                    }
                    if (eStructuralFeature.isMany()) {
                      jsonReader.beginArray();
                      if (eStructuralFeature instanceof EAttribute) {
                        List list=(List)object.eGet(eStructuralFeature);
                        List<String> stringList=null;
                        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                          EStructuralFeature asStringFeature=eClass.getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
                          stringList=(List<String>)object.eGet(asStringFeature);
                        }
                        while (jsonReader.hasNext()) {
                          Object e=readPrimitive(jsonReader,eStructuralFeature);
                          list.add(e);
                          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                            double val=(Double)e;
                            stringList.add(""String_Node_Str"" + val);
                          }
                        }
                      }
 else                       if (eStructuralFeature instanceof EReference) {
                        int index=0;
                        while (jsonReader.hasNext()) {
                          if (embedded) {
                            List list=(List)object.eGet(eStructuralFeature);
                            jsonReader.beginObject();
                            String n=jsonReader.nextName();
                            if (n.equals(""String_Node_Str"")) {
                              String t=jsonReader.nextString();
                              IdEObject wrappedObject=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create((EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(t));
                              ((IdEObjectImpl)wrappedObject).setOid(object.getOid());
                              ((IdEObjectImpl)wrappedObject).eSetStore(eStore);
                              if (jsonReader.nextName().equals(""String_Node_Str"")) {
                                EStructuralFeature wv=wrappedObject.eClass().getEStructuralFeature(""String_Node_Str"");
                                wrappedObject.eSet(wv,readPrimitive(jsonReader,wv));
                                list.add(wrappedObject);
                              }
 else {
                              }
                            }
 else                             if (n.equals(""String_Node_Str"")) {
                              long refOid=jsonReader.nextLong();
                              if (containsNoFetch(refOid)) {
                                IdEObject refObj=getNoFetch(refOid);
                                AbstractEList l=(AbstractEList)object.eGet(eStructuralFeature);
                                while (l.size() <= index) {
                                  l.addUnique(refObj.eClass().getEPackage().getEFactoryInstance().create(refObj.eClass()));
                                }
                                l.setUnique(index,refObj);
                              }
 else {
                                waitingList.add(refOid,new ListWaitingObject(-1,object,eStructuralFeature,index));
                              }
                            }
                            jsonReader.endObject();
                          }
 else {
                            long refOid=jsonReader.nextLong();
                            if (containsNoFetch(refOid)) {
                              IdEObject refObj=getNoFetch(refOid);
                              AbstractEList l=(AbstractEList)object.eGet(eStructuralFeature);
                              while (l.size() <= index) {
                                l.addUnique(refObj.eClass().getEPackage().getEFactoryInstance().create(refObj.eClass()));
                              }
                              l.setUnique(index,refObj);
                            }
 else {
                              waitingList.add(refOid,new ListWaitingObject(-1,object,eStructuralFeature,index));
                            }
                            index++;
                          }
                        }
                      }
                      jsonReader.endArray();
                    }
 else {
                      if (eStructuralFeature instanceof EAttribute) {
                        Object x=readPrimitive(jsonReader,eStructuralFeature);
                        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                          EStructuralFeature asStringFeature=object.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
                          object.eSet(asStringFeature,""String_Node_Str"" + x);
                        }
                        object.eSet(eStructuralFeature,x);
                      }
 else                       if (eStructuralFeature instanceof EReference) {
                        if (embedded) {
                          jsonReader.beginObject();
                          if (jsonReader.nextName().equals(""String_Node_Str"")) {
                            String t=jsonReader.nextString();
                            IdEObject wrappedObject=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create((EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(t));
                            ((IdEObjectImpl)wrappedObject).eSetStore(eStore);
                            ((IdEObjectImpl)wrappedObject).setOid(object.getOid());
                            if (jsonReader.nextName().equals(""String_Node_Str"")) {
                              EStructuralFeature wv=wrappedObject.eClass().getEStructuralFeature(""String_Node_Str"");
                              wrappedObject.eSet(wv,readPrimitive(jsonReader,wv));
                              object.eSet(eStructuralFeature,wrappedObject);
                            }
 else {
                            }
                          }
                          jsonReader.endObject();
                        }
 else {
                          long refOid=jsonReader.nextLong();
                          if (containsNoFetch(refOid)) {
                            IdEObject refObj=getNoFetch(refOid);
                            object.eSet(eStructuralFeature,refObj);
                          }
 else {
                            waitingList.add(refOid,new SingleWaitingObject(-1,object,eStructuralFeature));
                          }
                        }
                      }
                    }
                  }
                }
                if (waitingList.containsKey(oid)) {
                  try {
                    waitingList.updateNode(oid,eClass,object);
                  }
 catch (                  DeserializeException e) {
                    LOGGER.error(""String_Node_Str"",e);
                  }
                }
              }
            }
          }
          jsonReader.endObject();
        }
        jsonReader.endArray();
      }
      jsonReader.endObject();
    }
 catch (    IfcModelInterfaceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
 finally {
      jsonReader.close();
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  SerializerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    waitingList.dumpIfNotEmpty();
    bimServerClient.getServiceInterface().cleanupLongAction(download);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void processDownload(Long download) throws BimServerClientException, UserException, ServerException, PublicInterfaceNotFoundException, IfcModelInterfaceException, IOException {
  WaitingList<Long> waitingList=new WaitingList<Long>();
  try {
    InputStream downloadData=bimServerClient.getDownloadData(download,getIfcSerializerOid());
    boolean log=false;
    if (log) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      if (downloadData instanceof SerializerInputstream) {
        SerializerInputstream serializerInputStream=(SerializerInputstream)downloadData;
        serializerInputStream.getEmfSerializer().writeToOutputStream(baos);
      }
 else {
        IOUtils.copy((InputStream)downloadData,baos);
      }
      FileOutputStream fos=new FileOutputStream(new File(download + ""String_Node_Str""));
      IOUtils.write(baos.toByteArray(),fos);
      fos.close();
      downloadData=new ByteArrayInputStream(baos.toByteArray());
    }
 else {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      if (downloadData instanceof SerializerInputstream) {
        SerializerInputstream serializerInputStream=(SerializerInputstream)downloadData;
        serializerInputStream.getEmfSerializer().writeToOutputStream(baos);
      }
 else {
        IOUtils.copy((InputStream)downloadData,baos);
      }
      downloadData=new ByteArrayInputStream(baos.toByteArray());
    }
    JsonReader jsonReader=new JsonReader(new InputStreamReader(downloadData,Charsets.UTF_8));
    try {
      jsonReader.beginObject();
      if (jsonReader.nextName().equals(""String_Node_Str"")) {
        jsonReader.beginArray();
        while (jsonReader.hasNext()) {
          jsonReader.beginObject();
          if (jsonReader.nextName().equals(""String_Node_Str"")) {
            long oid=jsonReader.nextLong();
            if (jsonReader.nextName().equals(""String_Node_Str"")) {
              String type=jsonReader.nextString();
              EClass eClass=(EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(type);
              if (eClass == null) {
                throw new BimServerClientException(""String_Node_Str"" + type);
              }
              if (jsonReader.nextName().equals(""String_Node_Str"")) {
                String state=jsonReader.nextString();
                IdEObject object=null;
                if (containsNoFetch(oid)) {
                  object=getNoFetch(oid);
                }
 else {
                  object=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create(eClass);
                  ((IdEObjectImpl)object).eSetStore(eStore);
                  ((IdEObjectImpl)object).setOid(oid);
                  add(oid,object);
                }
                if (state.equals(""String_Node_Str"")) {
                  ((IdEObjectImpl)object).setLoadingState(State.TO_BE_LOADED);
                }
 else {
                  while (jsonReader.hasNext()) {
                    String featureName=jsonReader.nextName();
                    boolean embedded=false;
                    if (featureName.startsWith(""String_Node_Str"")) {
                      featureName=featureName.substring(5);
                    }
 else                     if (featureName.startsWith(""String_Node_Str"")) {
                      embedded=true;
                      featureName=featureName.substring(5);
                    }
                    EStructuralFeature eStructuralFeature=eClass.getEStructuralFeature(featureName);
                    if (eStructuralFeature == null) {
                      throw new BimServerClientException(""String_Node_Str"" + featureName + ""String_Node_Str""+ eClass.getName());
                    }
                    if (eStructuralFeature.isMany()) {
                      jsonReader.beginArray();
                      if (eStructuralFeature instanceof EAttribute) {
                        List list=(List)object.eGet(eStructuralFeature);
                        List<String> stringList=null;
                        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                          EStructuralFeature asStringFeature=eClass.getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
                          stringList=(List<String>)object.eGet(asStringFeature);
                        }
                        while (jsonReader.hasNext()) {
                          Object e=readPrimitive(jsonReader,eStructuralFeature);
                          list.add(e);
                          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                            double val=(Double)e;
                            stringList.add(""String_Node_Str"" + val);
                          }
                        }
                      }
 else                       if (eStructuralFeature instanceof EReference) {
                        int index=0;
                        while (jsonReader.hasNext()) {
                          if (embedded) {
                            List list=(List)object.eGet(eStructuralFeature);
                            jsonReader.beginObject();
                            String n=jsonReader.nextName();
                            if (n.equals(""String_Node_Str"")) {
                              String t=jsonReader.nextString();
                              IdEObject wrappedObject=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create((EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(t));
                              ((IdEObjectImpl)wrappedObject).setOid(object.getOid());
                              ((IdEObjectImpl)wrappedObject).eSetStore(eStore);
                              if (jsonReader.nextName().equals(""String_Node_Str"")) {
                                EStructuralFeature wv=wrappedObject.eClass().getEStructuralFeature(""String_Node_Str"");
                                wrappedObject.eSet(wv,readPrimitive(jsonReader,wv));
                                list.add(wrappedObject);
                              }
 else {
                              }
                            }
 else                             if (n.equals(""String_Node_Str"")) {
                              long refOid=jsonReader.nextLong();
                              if (containsNoFetch(refOid)) {
                                IdEObject refObj=getNoFetch(refOid);
                                AbstractEList l=(AbstractEList)object.eGet(eStructuralFeature);
                                while (l.size() <= index) {
                                  l.addUnique(refObj.eClass().getEPackage().getEFactoryInstance().create(refObj.eClass()));
                                }
                                l.setUnique(index,refObj);
                              }
 else {
                                waitingList.add(refOid,new ListWaitingObject(-1,object,eStructuralFeature,index));
                              }
                            }
                            jsonReader.endObject();
                          }
 else {
                            long refOid=jsonReader.nextLong();
                            if (containsNoFetch(refOid)) {
                              IdEObject refObj=getNoFetch(refOid);
                              AbstractEList l=(AbstractEList)object.eGet(eStructuralFeature);
                              while (l.size() <= index) {
                                l.addUnique(refObj.eClass().getEPackage().getEFactoryInstance().create(refObj.eClass()));
                              }
                              l.setUnique(index,refObj);
                            }
 else {
                              waitingList.add(refOid,new ListWaitingObject(-1,object,eStructuralFeature,index));
                            }
                            index++;
                          }
                        }
                      }
                      jsonReader.endArray();
                    }
 else {
                      if (eStructuralFeature instanceof EAttribute) {
                        Object x=readPrimitive(jsonReader,eStructuralFeature);
                        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
                          EStructuralFeature asStringFeature=object.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
                          object.eSet(asStringFeature,""String_Node_Str"" + x);
                        }
                        object.eSet(eStructuralFeature,x);
                      }
 else                       if (eStructuralFeature instanceof EReference) {
                        if (embedded) {
                          jsonReader.beginObject();
                          if (jsonReader.nextName().equals(""String_Node_Str"")) {
                            String t=jsonReader.nextString();
                            IdEObject wrappedObject=(IdEObject)Ifc2x3tc1Factory.eINSTANCE.create((EClass)Ifc2x3tc1Package.eINSTANCE.getEClassifier(t));
                            ((IdEObjectImpl)wrappedObject).eSetStore(eStore);
                            ((IdEObjectImpl)wrappedObject).setOid(object.getOid());
                            if (jsonReader.nextName().equals(""String_Node_Str"")) {
                              EStructuralFeature wv=wrappedObject.eClass().getEStructuralFeature(""String_Node_Str"");
                              wrappedObject.eSet(wv,readPrimitive(jsonReader,wv));
                              object.eSet(eStructuralFeature,wrappedObject);
                            }
 else {
                            }
                          }
                          jsonReader.endObject();
                        }
 else {
                          long refOid=jsonReader.nextLong();
                          if (containsNoFetch(refOid)) {
                            IdEObject refObj=getNoFetch(refOid);
                            object.eSet(eStructuralFeature,refObj);
                          }
 else {
                            waitingList.add(refOid,new SingleWaitingObject(-1,object,eStructuralFeature));
                          }
                        }
                      }
                    }
                  }
                }
                if (waitingList.containsKey(oid)) {
                  try {
                    waitingList.updateNode(oid,eClass,object);
                  }
 catch (                  DeserializeException e) {
                    LOGGER.error(""String_Node_Str"",e);
                  }
                }
              }
            }
          }
          jsonReader.endObject();
        }
        jsonReader.endArray();
      }
      jsonReader.endObject();
    }
  finally {
      jsonReader.close();
    }
    waitingList.dumpIfNotEmpty();
  }
 catch (  SerializerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    bimServerClient.getServiceInterface().cleanupLongAction(download);
  }
}",0.9820143884892086
160541,"@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            boolean firstF=true;
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}","@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                        out.write(""String_Node_Str"");
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      out.write(""String_Node_Str"");
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (SERIALIZE_EMPTY_LISTS || !list.isEmpty()) {
                        out.write(""String_Node_Str"");
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      out.write(""String_Node_Str"");
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}",0.95897034772097
160542,"public void dumpIfNotEmpty() throws BimServerClientException {
  if (size() > 0) {
    for (    Entry<T,List<WaitingObject>> entry : waitingObjects.entrySet()) {
      StringBuilder sb=new StringBuilder(""String_Node_Str"" + entry.getKey());
      for (      WaitingObject waitingObject : entry.getValue()) {
        sb.append(waitingObject.toString() + ""String_Node_Str"");
      }
      LOGGER.info(sb.toString());
    }
    throw new BimServerClientException(""String_Node_Str"");
  }
}","public void dumpIfNotEmpty() throws BimServerClientException {
  if (size() > 0) {
    for (    Entry<T,List<WaitingObject>> entry : waitingObjects.entrySet()) {
      StringBuilder sb=new StringBuilder(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
      for (      WaitingObject waitingObject : entry.getValue()) {
        sb.append(waitingObject.toString() + ""String_Node_Str"");
      }
      LOGGER.info(sb.toString());
    }
    throw new BimServerClientException(""String_Node_Str"");
  }
}",0.979757085020243
160543,"private void writeWrappedValue(int pid,int rid,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  IdEObject wrappedValue=(IdEObject)value;
  EStructuralFeature eStructuralFeature=wrappedValue.eClass().getEStructuralFeature(""String_Node_Str"");
  Short cid=database.getCidOfEClass(wrappedValue.eClass());
  buffer.putShort((short)-cid);
  writePrimitiveValue(eStructuralFeature,wrappedValue.eGet(eStructuralFeature),buffer);
  if (wrappedValue instanceof IfcGloballyUniqueId) {
    if (wrappedValue.getOid() == -1) {
      ((IdEObjectImpl)wrappedValue).setOid(newOid(Ifc2x3tc1Package.eINSTANCE.getIfcGloballyUniqueId()));
    }
    ByteBuffer b=ByteBuffer.allocate(getExactSize(wrappedValue));
    ByteBuffer convertObjectToByteArray=convertObjectToByteArray(wrappedValue,b);
    ByteBuffer createKeyBuffer=createKeyBuffer(pid,wrappedValue.getOid(),rid);
    try {
      EClass ifcGloballyUniqueIdEClass=Ifc2x3tc1Package.eINSTANCE.getIfcGloballyUniqueId();
      database.getKeyValueStore().storeNoOverwrite(ifcGloballyUniqueIdEClass.getEPackage().getName() + ""String_Node_Str"" + ifcGloballyUniqueIdEClass.getName(),createKeyBuffer.array(),convertObjectToByteArray.array(),this);
      database.incrementCommittedWrites(1);
    }
 catch (    BimserverLockConflictException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","private void writeWrappedValue(int pid,int rid,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  IdEObject wrappedValue=(IdEObject)value;
  EStructuralFeature eStructuralFeature=wrappedValue.eClass().getEStructuralFeature(""String_Node_Str"");
  Short cid=database.getCidOfEClass(wrappedValue.eClass());
  buffer.putShort((short)-cid);
  writePrimitiveValue(eStructuralFeature,wrappedValue.eGet(eStructuralFeature),buffer);
  if (wrappedValue instanceof IfcGloballyUniqueId) {
    if (wrappedValue.getOid() == -1) {
      ((IdEObjectImpl)wrappedValue).setOid(newOid(Ifc2x3tc1Package.eINSTANCE.getIfcGloballyUniqueId()));
    }
    ByteBuffer convertObjectToByteArray=convertObjectToByteArray(wrappedValue,ByteBuffer.allocate(getExactSize(wrappedValue)));
    ByteBuffer createKeyBuffer=createKeyBuffer(pid,wrappedValue.getOid(),rid);
    try {
      EClass ifcGloballyUniqueIdEClass=Ifc2x3tc1Package.eINSTANCE.getIfcGloballyUniqueId();
      database.getKeyValueStore().storeNoOverwrite(ifcGloballyUniqueIdEClass.getEPackage().getName() + ""String_Node_Str"" + ifcGloballyUniqueIdEClass.getName(),createKeyBuffer.array(),convertObjectToByteArray.array(),this);
      database.incrementCommittedWrites(1);
    }
 catch (    BimserverLockConflictException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9461480927449514
160544,"private void writePrimitiveValue(EStructuralFeature feature,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  EClassifier type=feature.getEType();
  if (type == ECORE_PACKAGE.getEString()) {
    if (value == null) {
      buffer.putInt(-1);
    }
 else {
      String stringValue=(String)value;
      byte[] bytes=stringValue.getBytes(Charsets.UTF_8);
      if (bytes.length > Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str"");
      }
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else   if (type == ECORE_PACKAGE.getEInt() || type == ECORE_PACKAGE.getEIntegerObject()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      buffer.putInt((Integer)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDouble() || type == ECORE_PACKAGE.getEDoubleObject()) {
    if (value == null) {
      buffer.putDouble(0D);
    }
 else {
      buffer.putDouble((Double)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEFloat() || type == ECORE_PACKAGE.getEFloatObject()) {
    if (value == null) {
      buffer.putFloat(0F);
    }
 else {
      buffer.putFloat((Float)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getELong() || type == ECORE_PACKAGE.getELongObject()) {
    if (value == null) {
      buffer.putLong(0L);
    }
 else {
      buffer.putLong((Long)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEBoolean() || type == ECORE_PACKAGE.getEBooleanObject()) {
    if (value == null) {
      buffer.put((byte)0);
    }
 else {
      buffer.put(((Boolean)value) ? (byte)1 : (byte)0);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDate()) {
    if (value == null) {
      buffer.putLong(-1L);
    }
 else {
      buffer.putLong(((Date)value).getTime());
    }
  }
 else   if (type == Ifc2x3tc1Package.eINSTANCE.getTristate()) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (value instanceof Enumerator) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (type == EcorePackage.eINSTANCE.getEByteArray()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      byte[] bytes=(byte[])value;
      buffer.putInt(bytes.length);
      buffer.put(bytes);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type.getName());
  }
}","private void writePrimitiveValue(EStructuralFeature feature,Object value,ByteBuffer buffer) throws BimserverDatabaseException {
  EClassifier type=feature.getEType();
  if (type == ECORE_PACKAGE.getEString()) {
    if (value == null) {
      buffer.putInt(-1);
    }
 else {
      String stringValue=(String)value;
      byte[] bytes=stringValue.getBytes(Charsets.UTF_8);
      if (bytes.length > Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str"");
      }
      buffer.putInt(bytes.length);
      buffer.put(bytes);
      buffer.position(buffer.position() + bytes.length);
    }
  }
 else   if (type == ECORE_PACKAGE.getEInt() || type == ECORE_PACKAGE.getEIntegerObject()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      buffer.putInt((Integer)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDouble() || type == ECORE_PACKAGE.getEDoubleObject()) {
    if (value == null) {
      buffer.putDouble(0D);
    }
 else {
      buffer.putDouble((Double)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEFloat() || type == ECORE_PACKAGE.getEFloatObject()) {
    if (value == null) {
      buffer.putFloat(0F);
    }
 else {
      buffer.putFloat((Float)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getELong() || type == ECORE_PACKAGE.getELongObject()) {
    if (value == null) {
      buffer.putLong(0L);
    }
 else {
      buffer.putLong((Long)value);
    }
  }
 else   if (type == ECORE_PACKAGE.getEBoolean() || type == ECORE_PACKAGE.getEBooleanObject()) {
    if (value == null) {
      buffer.put((byte)0);
    }
 else {
      buffer.put(((Boolean)value) ? (byte)1 : (byte)0);
    }
  }
 else   if (type == ECORE_PACKAGE.getEDate()) {
    if (value == null) {
      buffer.putLong(-1L);
    }
 else {
      buffer.putLong(((Date)value).getTime());
    }
  }
 else   if (type == Ifc2x3tc1Package.eINSTANCE.getTristate()) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (value instanceof Enumerator) {
    Enumerator eEnumLiteral=(Enumerator)value;
    buffer.putInt(eEnumLiteral.getValue());
  }
 else   if (type == EcorePackage.eINSTANCE.getEByteArray()) {
    if (value == null) {
      buffer.putInt(0);
    }
 else {
      byte[] bytes=(byte[])value;
      buffer.putInt(bytes.length);
      buffer.put(bytes);
      buffer.position(buffer.position() + bytes.length);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type.getName());
  }
}",0.9770253929866988
160545,"public void loadPluginsFromJar(File file) throws PluginException {
  if (loadedLocations.contains(file.getAbsolutePath())) {
    return;
  }
  LOGGER.debug(""String_Node_Str"" + file.getAbsolutePath());
  if (!file.isFile()) {
    throw new PluginException(""String_Node_Str"" + file.getAbsolutePath());
  }
  try {
    FileJarClassLoader jarClassLoader=new FileJarClassLoader(getClass().getClassLoader(),file,new File(tempDir,file.getName()));
    InputStream pluginStream=jarClassLoader.getResourceAsStream(""String_Node_Str"");
    if (pluginStream == null) {
      throw new PluginException(""String_Node_Str"");
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(pluginStream);
    if (pluginDescriptor == null) {
      throw new PluginException(""String_Node_Str"");
    }
    LOGGER.debug(pluginDescriptor.toString());
    loadedLocations.add(file.getAbsolutePath());
    loadPlugins(jarClassLoader,file.getAbsolutePath(),file.getAbsolutePath(),pluginDescriptor,PluginSourceType.JAR_FILE);
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
}","public void loadPluginsFromJar(File file) throws PluginException {
  if (loadedLocations.contains(file.getAbsolutePath())) {
    return;
  }
  LOGGER.debug(""String_Node_Str"" + file.getAbsolutePath());
  if (!file.isFile()) {
    throw new PluginException(""String_Node_Str"" + file.getAbsolutePath());
  }
  try {
    FileJarClassLoader jarClassLoader=new FileJarClassLoader(getClass().getClassLoader(),file,tempDir);
    InputStream pluginStream=jarClassLoader.getResourceAsStream(""String_Node_Str"");
    if (pluginStream == null) {
      throw new PluginException(""String_Node_Str"");
    }
    PluginDescriptor pluginDescriptor=getPluginDescriptor(pluginStream);
    if (pluginDescriptor == null) {
      throw new PluginException(""String_Node_Str"");
    }
    LOGGER.debug(pluginDescriptor.toString());
    loadedLocations.add(file.getAbsolutePath());
    loadPlugins(jarClassLoader,file.getAbsolutePath(),file.getAbsolutePath(),pluginDescriptor,PluginSourceType.JAR_FILE);
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
}",0.9895615866388308
160546,"public void loadPluginsFromEclipseProject(File projectRoot) throws PluginException {
  if (loadedLocations.contains(projectRoot.getAbsolutePath())) {
    return;
  }
  if (!projectRoot.isDirectory()) {
    throw new PluginException(""String_Node_Str"" + projectRoot.getAbsolutePath());
  }
  File pluginFolder=new File(projectRoot,""String_Node_Str"");
  if (!pluginFolder.isDirectory()) {
    throw new PluginException(""String_Node_Str"" + projectRoot.getAbsolutePath());
  }
  File pluginFile=new File(pluginFolder,""String_Node_Str"");
  if (!pluginFile.isFile()) {
    throw new PluginException(""String_Node_Str"" + pluginFolder.getAbsolutePath());
  }
  try {
    PluginDescriptor pluginDescriptor=getPluginDescriptor(new FileInputStream(pluginFile));
    DelegatingClassLoader delegatingClassLoader=new DelegatingClassLoader(getClass().getClassLoader());
    File libFolder=new File(projectRoot,""String_Node_Str"");
    if (libFolder.isDirectory()) {
      for (      File libFile : libFolder.listFiles()) {
        if (libFile.getName().toLowerCase().endsWith(""String_Node_Str"")) {
          FileJarClassLoader jarClassLoader=new FileJarClassLoader(delegatingClassLoader,libFile,new File(tempDir,projectRoot.getName()));
          delegatingClassLoader.add(jarClassLoader);
        }
      }
    }
    EclipsePluginClassloader pluginClassloader=new EclipsePluginClassloader(delegatingClassLoader,projectRoot);
    loadedLocations.add(projectRoot.getAbsolutePath());
    loadPlugins(pluginClassloader,projectRoot.getAbsolutePath(),new File(projectRoot,""String_Node_Str"").getAbsolutePath(),pluginDescriptor,PluginSourceType.ECLIPSE_PROJECT);
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
}","public void loadPluginsFromEclipseProject(File projectRoot) throws PluginException {
  if (loadedLocations.contains(projectRoot.getAbsolutePath())) {
    return;
  }
  if (!projectRoot.isDirectory()) {
    throw new PluginException(""String_Node_Str"" + projectRoot.getAbsolutePath());
  }
  File pluginFolder=new File(projectRoot,""String_Node_Str"");
  if (!pluginFolder.isDirectory()) {
    throw new PluginException(""String_Node_Str"" + projectRoot.getAbsolutePath());
  }
  File pluginFile=new File(pluginFolder,""String_Node_Str"");
  if (!pluginFile.isFile()) {
    throw new PluginException(""String_Node_Str"" + pluginFolder.getAbsolutePath());
  }
  try {
    PluginDescriptor pluginDescriptor=getPluginDescriptor(new FileInputStream(pluginFile));
    DelegatingClassLoader delegatingClassLoader=new DelegatingClassLoader(getClass().getClassLoader());
    File libFolder=new File(projectRoot,""String_Node_Str"");
    if (libFolder.isDirectory()) {
      for (      File libFile : libFolder.listFiles()) {
        if (libFile.getName().toLowerCase().endsWith(""String_Node_Str"")) {
          FileJarClassLoader jarClassLoader=new FileJarClassLoader(delegatingClassLoader,libFile,tempDir);
          delegatingClassLoader.add(jarClassLoader);
        }
      }
    }
    EclipsePluginClassloader pluginClassloader=new EclipsePluginClassloader(delegatingClassLoader,projectRoot);
    loadedLocations.add(projectRoot.getAbsolutePath());
    loadPlugins(pluginClassloader,projectRoot.getAbsolutePath(),new File(projectRoot,""String_Node_Str"").getAbsolutePath(),pluginDescriptor,PluginSourceType.ECLIPSE_PROJECT);
  }
 catch (  JAXBException e) {
    throw new PluginException(e);
  }
catch (  FileNotFoundException e) {
    throw new PluginException(e);
  }
catch (  IOException e) {
    throw new PluginException(e);
  }
}",0.9912663755458516
160547,"public FileJarClassLoader(ClassLoader parentClassLoader,File jarFile,File tempDir) throws FileNotFoundException, IOException {
  super(parentClassLoader);
  this.tempDir=tempDir;
  if (!tempDir.exists()) {
    tempDir.mkdir();
  }
  JarInputStream jarInputStream=new JarInputStream(new FileInputStream(jarFile));
  JarEntry entry=jarInputStream.getNextJarEntry();
  while (entry != null) {
    if (entry.getName().endsWith(""String_Node_Str"")) {
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      IOUtils.copy(jarInputStream,byteArrayOutputStream);
      loadSubJars(byteArrayOutputStream.toByteArray());
    }
 else {
      if (!entry.isDirectory()) {
        addDataToMap(jarInputStream,entry);
      }
    }
    entry=jarInputStream.getNextJarEntry();
  }
  jarInputStream.close();
}","public FileJarClassLoader(ClassLoader parentClassLoader,File jarFile,File tempDir) throws FileNotFoundException, IOException {
  super(parentClassLoader);
  FileInputStream fis=new FileInputStream(jarFile);
  try {
    String md5=org.apache.commons.codec.digest.DigestUtils.md5Hex(fis);
    this.tempDir=new File(tempDir,md5);
  }
  finally {
    fis.close();
  }
  if (tempDir.exists()) {
    return;
  }
  tempDir.mkdir();
  JarInputStream jarInputStream=new JarInputStream(new FileInputStream(jarFile));
  JarEntry entry=jarInputStream.getNextJarEntry();
  while (entry != null) {
    if (entry.getName().endsWith(""String_Node_Str"")) {
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      IOUtils.copy(jarInputStream,byteArrayOutputStream);
      loadSubJars(byteArrayOutputStream.toByteArray());
    }
 else {
      if (!entry.isDirectory()) {
        addDataToMap(jarInputStream,entry);
      }
    }
    entry=jarInputStream.getNextJarEntry();
  }
  jarInputStream.close();
}",0.8722707423580786
160548,"public SModelCheckerPluginDescriptor convertToSObject(ModelCheckerPluginDescriptor input){
  if (input == null) {
    return null;
  }
  SModelCheckerPluginDescriptor result=new SModelCheckerPluginDescriptor();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setSimpleName(input.getSimpleName());
  result.setDefaultName(input.getDefaultName());
  result.setPluginClassName(input.getPluginClassName());
  result.setDescription(input.getDescription());
  result.setLocation(input.getLocation());
  result.setEnabled(input.getEnabled());
  result.setPluginInterfaceClassName(input.getPluginInterfaceClassName());
  List<Long> listconfigurations=new ArrayList<Long>();
  for (  PluginConfiguration v : input.getConfigurations()) {
    listconfigurations.add(v.getOid());
  }
  result.setConfigurations(listconfigurations);
  return result;
}","public SRemoteServiceCalled convertToSObject(RemoteServiceCalled input){
  if (input == null) {
    return null;
  }
  SRemoteServiceCalled result=new SRemoteServiceCalled();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(SNotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  Service serviceVal=input.getService();
  result.setServiceId(serviceVal == null ? -1 : serviceVal.getOid());
  return result;
}",0.1275129236071223
160549,"public ModelCheckerPluginDescriptor convertFromSObject(SModelCheckerPluginDescriptor input,ModelCheckerPluginDescriptor result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setSimpleName(input.getSimpleName());
  result.setDefaultName(input.getDefaultName());
  result.setPluginClassName(input.getPluginClassName());
  result.setDescription(input.getDescription());
  result.setLocation(input.getLocation());
  result.setEnabled(input.getEnabled());
  result.setPluginInterfaceClassName(input.getPluginInterfaceClassName());
  List<PluginConfiguration> listconfigurations=result.getConfigurations();
  for (  long oid : input.getConfigurations()) {
    listconfigurations.add((PluginConfiguration)session.get(StorePackage.eINSTANCE.getPluginConfiguration(),oid,Query.getDefault()));
  }
  return result;
}","public RemoteServiceCalled convertFromSObject(SRemoteServiceCalled input,RemoteServiceCalled result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(NotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),Query.getDefault()));
  result.setService((Service)session.get(StorePackage.eINSTANCE.getService(),input.getServiceId(),Query.getDefault()));
  return result;
}",0.2878699941961695
160550,"@Override public URL findResource(final String name){
  try {
    return new URL(new URL(""String_Node_Str"" + jarFile.toURI().toURL() + ""String_Node_Str""+ name),name,new URLStreamHandler(){
      @Override protected URLConnection openConnection(      URL u) throws IOException {
        return new URLConnection(u){
          @Override public void connect() throws IOException {
          }
          @Override public InputStream getInputStream() throws IOException {
            return new FileInputStream(new File(tempDir,name));
          }
        }
;
      }
    }
);
  }
 catch (  MalformedURLException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public URL findResource(final String name){
  try {
    return new URL(new URL(""String_Node_Str"" + this.tempDir.getAbsolutePath() + ""String_Node_Str""+ name),name,new URLStreamHandler(){
      @Override protected URLConnection openConnection(      URL u) throws IOException {
        return new URLConnection(u){
          @Override public void connect() throws IOException {
          }
          @Override public InputStream getInputStream() throws IOException {
            return new FileInputStream(new File(tempDir,name));
          }
        }
;
      }
    }
);
  }
 catch (  MalformedURLException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9681717246484086
160551,"private void writeReference(IdEObject object,Object value,ByteBuffer buffer,EStructuralFeature feature) throws BimserverDatabaseException {
  Short cid=database.getCidOfEClass(((EObject)value).eClass());
  buffer.putShort(cid);
  IdEObject idEObject=(IdEObject)value;
  if (idEObject.getOid() == -1) {
    ((IdEObjectImpl)idEObject).setOid(newOid(object.eClass()));
    ((IdEObjectImpl)idEObject).setPid(object.getPid());
    ((IdEObjectImpl)idEObject).setRid(object.getRid());
  }
  buffer.putLong(idEObject.getOid());
}","private void writeReference(IdEObject object,Object value,ByteBuffer buffer,EStructuralFeature feature) throws BimserverDatabaseException {
  Short cid=database.getCidOfEClass(((EObject)value).eClass());
  buffer.putShort(cid);
  IdEObject idEObject=(IdEObject)value;
  if (idEObject.getOid() == -1) {
    ((IdEObjectImpl)idEObject).setOid(newOid(idEObject.eClass()));
    ((IdEObjectImpl)idEObject).setPid(object.getPid());
    ((IdEObjectImpl)idEObject).setRid(object.getRid());
  }
  buffer.putLong(idEObject.getOid());
}",0.9952153110047848
160552,"@SuppressWarnings(""String_Node_Str"") public <T extends IdEObject>T get(IdEObject idEObject,long oid,IfcModelInterface model,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  checkOpen();
  if (oid == -1) {
    throw new BimserverDatabaseException(""String_Node_Str"" + oid);
  }
  if (objectsToCommit.containsOid(oid)) {
    return (T)objectsToCommit.getByOid(oid);
  }
  EClass eClass=getEClassForOid(oid);
  RecordIdentifier recordIdentifier=new RecordIdentifier(query.getPid(),oid,query.getRid());
  IdEObjectImpl cachedObject=(IdEObjectImpl)objectCache.get(recordIdentifier);
  if (cachedObject != null) {
    idEObject=cachedObject;
    if (cachedObject.getLoadingState() == State.LOADED && cachedObject.getRid() != Integer.MAX_VALUE) {
      cachedObject.load();
      return (T)cachedObject;
    }
  }
  ByteBuffer mustStartWith=ByteBuffer.wrap(new byte[12]);
  mustStartWith.putInt(query.getPid());
  mustStartWith.putLong(oid);
  ByteBuffer startSearchWith=ByteBuffer.wrap(new byte[16]);
  startSearchWith.putInt(query.getPid());
  startSearchWith.putLong(oid);
  startSearchWith.putInt(-query.getRid());
  SearchingRecordIterator recordIterator=database.getKeyValueStore().getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),mustStartWith.array(),startSearchWith.array(),this);
  try {
    Record record=recordIterator.next();
    if (record == null) {
      return null;
    }
    reads++;
    ByteBuffer keyBuffer=ByteBuffer.wrap(record.getKey());
    ByteBuffer valueBuffer=ByteBuffer.wrap(record.getValue());
    keyBuffer.getInt();
    long keyOid=keyBuffer.getLong();
    int keyRid=-keyBuffer.getInt();
    if (keyRid <= query.getRid()) {
      if (idEObject != null && idEObject.getRid() == Integer.MAX_VALUE) {
        ((IdEObjectImpl)idEObject).setRid(keyRid);
      }
      if (model.contains(keyOid) && ((IdEObjectImpl)model.get(keyOid)).getLoadingState() == State.LOADED) {
        return (T)model.get(keyOid);
      }
 else {
        if (valueBuffer.capacity() == 1 && valueBuffer.get(0) == -1) {
          valueBuffer.position(valueBuffer.position() + 1);
          return null;
        }
 else {
          T convertByteArrayToObject=(T)convertByteArrayToObject(idEObject,eClass,eClass,keyOid,valueBuffer,model,keyRid,query,todoList);
          if (convertByteArrayToObject.getRid() == Integer.MAX_VALUE) {
            ((IdEObjectImpl)convertByteArrayToObject).setRid(keyRid);
          }
          objectCache.put(recordIdentifier,convertByteArrayToObject);
          return convertByteArrayToObject;
        }
      }
    }
 else {
      return null;
    }
  }
  finally {
    recordIterator.close();
  }
}","@SuppressWarnings(""String_Node_Str"") public <T extends IdEObject>T get(IdEObject idEObject,long oid,IfcModelInterface model,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  checkOpen();
  if (oid == 262145) {
    System.out.println();
  }
  if (oid == -1) {
    throw new BimserverDatabaseException(""String_Node_Str"" + oid);
  }
  if (objectsToCommit.containsOid(oid)) {
    return (T)objectsToCommit.getByOid(oid);
  }
  EClass eClass=getEClassForOid(oid);
  if (idEObject != null) {
    if (!eClass.isSuperTypeOf(idEObject.eClass())) {
      throw new BimserverDatabaseException(""String_Node_Str"" + oid + ""String_Node_Str""+ idEObject.eClass().getName()+ ""String_Node_Str""+ eClass.getName());
    }
  }
  RecordIdentifier recordIdentifier=new RecordIdentifier(query.getPid(),oid,query.getRid());
  IdEObjectImpl cachedObject=(IdEObjectImpl)objectCache.get(recordIdentifier);
  if (cachedObject != null) {
    idEObject=cachedObject;
    if (cachedObject.getLoadingState() == State.LOADED && cachedObject.getRid() != Integer.MAX_VALUE) {
      cachedObject.load();
      return (T)cachedObject;
    }
  }
  ByteBuffer mustStartWith=ByteBuffer.wrap(new byte[12]);
  mustStartWith.putInt(query.getPid());
  mustStartWith.putLong(oid);
  ByteBuffer startSearchWith=ByteBuffer.wrap(new byte[16]);
  startSearchWith.putInt(query.getPid());
  startSearchWith.putLong(oid);
  startSearchWith.putInt(-query.getRid());
  SearchingRecordIterator recordIterator=database.getKeyValueStore().getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),mustStartWith.array(),startSearchWith.array(),this);
  try {
    Record record=recordIterator.next();
    if (record == null) {
      return null;
    }
    reads++;
    ByteBuffer keyBuffer=ByteBuffer.wrap(record.getKey());
    ByteBuffer valueBuffer=ByteBuffer.wrap(record.getValue());
    keyBuffer.getInt();
    long keyOid=keyBuffer.getLong();
    int keyRid=-keyBuffer.getInt();
    if (keyRid <= query.getRid()) {
      if (idEObject != null && idEObject.getRid() == Integer.MAX_VALUE) {
        ((IdEObjectImpl)idEObject).setRid(keyRid);
      }
      if (model.contains(keyOid) && ((IdEObjectImpl)model.get(keyOid)).getLoadingState() == State.LOADED) {
        return (T)model.get(keyOid);
      }
 else {
        if (valueBuffer.capacity() == 1 && valueBuffer.get(0) == -1) {
          valueBuffer.position(valueBuffer.position() + 1);
          return null;
        }
 else {
          T convertByteArrayToObject=(T)convertByteArrayToObject(idEObject,eClass,eClass,keyOid,valueBuffer,model,keyRid,query,todoList);
          if (convertByteArrayToObject.getRid() == Integer.MAX_VALUE) {
            ((IdEObjectImpl)convertByteArrayToObject).setRid(keyRid);
          }
          objectCache.put(recordIdentifier,convertByteArrayToObject);
          return convertByteArrayToObject;
        }
      }
    }
 else {
      return null;
    }
  }
  finally {
    recordIterator.close();
  }
}",0.9474424327649852
160553,"@SuppressWarnings(""String_Node_Str"") private IdEObject convertByteArrayToObject(IdEObject idEObject,EClass originalQueryClass,EClass eClass,long oid,ByteBuffer buffer,IfcModelInterface model,int rid,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  try {
    if (idEObject == null) {
      idEObject=createInternal(eClass,query);
      ((IdEObjectImpl)idEObject).setOid(oid);
      ((IdEObjectImpl)idEObject).setPid(query.getPid());
      if (rid == Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE);
      }
    }
    ((IdEObjectImpl)idEObject).setRid(rid);
    if (DEVELOPER_DEBUG && StorePackage.eINSTANCE == idEObject.eClass().getEPackage()) {
      LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ query.getPid()+ ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
    }
    ((IdEObjectImpl)idEObject).setLoadingState(State.LOADING);
    objectCache.put(new RecordIdentifier(query.getPid(),oid,rid),idEObject);
    byte unsettedLength=buffer.get();
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      if (feature.isUnsettable() && (unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0) {
        idEObject.eUnset(feature);
      }
 else {
        if (!query.shouldFollowReference(originalQueryClass,eClass,feature)) {
          fakeRead(buffer,feature);
        }
 else {
          Object newValue=null;
          if (feature.isMany()) {
            if (feature.getEType() instanceof EEnum) {
            }
 else             if (feature.getEType() instanceof EClass) {
              if (buffer.capacity() == 1 && buffer.get(0) == -1) {
                buffer.position(buffer.position() + 1);
              }
 else {
                int listSize=buffer.getInt();
                AbstractEList<Object> list=(AbstractEList<Object>)idEObject.eGet(feature);
                for (int i=0; i < listSize; i++) {
                  IdEObject referencedObject=null;
                  short cid=buffer.getShort();
                  if (cid == -1) {
                  }
 else                   if (cid < 0) {
                    EClass referenceClass=database.getEClassForCid((short)(-cid));
                    referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
                  }
 else                   if (cid > 0) {
                    EClass referenceClass=database.getEClassForCid(cid);
                    referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
                  }
                  if (referencedObject != null) {
                    if (!feature.getEType().isInstance(referencedObject)) {
                      throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getName());
                    }
                    if (feature.isUnique()) {
                      list.add(referencedObject);
                    }
 else {
                      list.addUnique(referencedObject);
                    }
                  }
                }
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              int listSize=buffer.getInt();
              BasicEList<Object> list=new BasicEList<Object>(listSize);
              for (int i=0; i < listSize; i++) {
                Object reference=readPrimitiveValue(feature.getEType(),buffer);
                if (reference != null) {
                  list.addUnique(reference);
                }
              }
              newValue=list;
            }
          }
 else {
            if (feature.getEType() instanceof EEnum) {
              int enumOrdinal=buffer.getInt();
              EClassifier eType=feature.getEType();
              EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
              if (enumLiteral != null) {
                newValue=enumLiteral.getInstance();
              }
 else {
                LOGGER.error(enumOrdinal + ""String_Node_Str"");
              }
            }
 else             if (feature.getEType() instanceof EClass) {
              short cid=buffer.getShort();
              if (cid == -1) {
              }
 else               if (cid < 0) {
                EClass referenceClass=database.getEClassForCid((short)(-cid));
                newValue=readWrappedValue(feature,buffer,referenceClass,query);
              }
 else               if (cid > 0) {
                EClass referenceClass=database.getEClassForCid(cid);
                newValue=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              newValue=readPrimitiveValue(feature.getEType(),buffer);
            }
          }
          if (newValue != null) {
            if (newValue instanceof IdEObject) {
              State oldState=((IdEObjectImpl)newValue).getLoadingState();
              if (oldState == State.TO_BE_LOADED && ((EReference)feature).getEOpposite() != null) {
                ((IdEObjectImpl)newValue).setLoadingState(State.OPPOSITE_SETTING);
                idEObject.eSet(feature,newValue);
                ((IdEObjectImpl)newValue).setLoadingState(oldState);
              }
 else {
                idEObject.eSet(feature,newValue);
              }
            }
 else {
              idEObject.eSet(feature,newValue);
            }
          }
        }
      }
      fieldCounter++;
    }
    ((IdEObjectImpl)idEObject).setLoaded();
    if (idEObject.getRid() > 100000 || idEObject.getRid() < -100000) {
      throw new RuntimeException(""String_Node_Str"" + idEObject.getRid() + ""String_Node_Str""+ idEObject);
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
}","@SuppressWarnings(""String_Node_Str"") private IdEObject convertByteArrayToObject(IdEObject idEObject,EClass originalQueryClass,EClass eClass,long oid,ByteBuffer buffer,IfcModelInterface model,int rid,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  try {
    if (idEObject == null) {
      idEObject=createInternal(eClass,query);
      ((IdEObjectImpl)idEObject).setOid(oid);
      ((IdEObjectImpl)idEObject).setPid(query.getPid());
      if (rid == Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE);
      }
    }
    ((IdEObjectImpl)idEObject).setRid(rid);
    if (DEVELOPER_DEBUG && StorePackage.eINSTANCE == idEObject.eClass().getEPackage()) {
      LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ query.getPid()+ ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
    }
    ((IdEObjectImpl)idEObject).setLoadingState(State.LOADING);
    objectCache.put(new RecordIdentifier(query.getPid(),oid,rid),idEObject);
    byte unsettedLength=buffer.get();
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      if (idEObject.eClass().getName().equals(""String_Node_Str"") && feature.getName().equals(""String_Node_Str"")) {
        System.out.println();
      }
      if (feature.isUnsettable() && (unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0) {
        idEObject.eUnset(feature);
      }
 else {
        if (!query.shouldFollowReference(originalQueryClass,eClass,feature)) {
          fakeRead(buffer,feature);
        }
 else {
          Object newValue=null;
          if (feature.isMany()) {
            if (feature.getEType() instanceof EEnum) {
            }
 else             if (feature.getEType() instanceof EClass) {
              if (buffer.capacity() == 1 && buffer.get(0) == -1) {
                buffer.position(buffer.position() + 1);
              }
 else {
                int listSize=buffer.getInt();
                AbstractEList<Object> list=(AbstractEList<Object>)idEObject.eGet(feature);
                for (int i=0; i < listSize; i++) {
                  IdEObject referencedObject=null;
                  short cid=buffer.getShort();
                  if (cid == -1) {
                  }
 else                   if (cid < 0) {
                    EClass referenceClass=database.getEClassForCid((short)(-cid));
                    referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
                  }
 else                   if (cid > 0) {
                    EClass referenceClass=database.getEClassForCid(cid);
                    referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
                  }
                  if (referencedObject != null) {
                    if (!feature.getEType().isInstance(referencedObject)) {
                      throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getName());
                    }
                    if (feature.isUnique()) {
                      list.add(referencedObject);
                    }
 else {
                      list.addUnique(referencedObject);
                    }
                  }
                }
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              int listSize=buffer.getInt();
              BasicEList<Object> list=new BasicEList<Object>(listSize);
              for (int i=0; i < listSize; i++) {
                Object reference=readPrimitiveValue(feature.getEType(),buffer);
                if (reference != null) {
                  list.addUnique(reference);
                }
              }
              newValue=list;
            }
          }
 else {
            if (feature.getEType() instanceof EEnum) {
              int enumOrdinal=buffer.getInt();
              EClassifier eType=feature.getEType();
              EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
              if (enumLiteral != null) {
                newValue=enumLiteral.getInstance();
              }
 else {
                LOGGER.error(enumOrdinal + ""String_Node_Str"");
              }
            }
 else             if (feature.getEType() instanceof EClass) {
              short cid=buffer.getShort();
              if (cid == -1) {
              }
 else               if (cid < 0) {
                EClass referenceClass=database.getEClassForCid((short)(-cid));
                newValue=readWrappedValue(feature,buffer,referenceClass,query);
              }
 else               if (cid > 0) {
                EClass referenceClass=database.getEClassForCid(cid);
                newValue=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              newValue=readPrimitiveValue(feature.getEType(),buffer);
            }
          }
          if (newValue != null) {
            if (newValue instanceof IdEObject) {
              State oldState=((IdEObjectImpl)newValue).getLoadingState();
              if (oldState == State.TO_BE_LOADED && ((EReference)feature).getEOpposite() != null) {
                ((IdEObjectImpl)newValue).setLoadingState(State.OPPOSITE_SETTING);
                idEObject.eSet(feature,newValue);
                ((IdEObjectImpl)newValue).setLoadingState(oldState);
              }
 else {
                idEObject.eSet(feature,newValue);
              }
            }
 else {
              if (feature.getName().equals(""String_Node_Str"")) {
                System.out.println();
              }
              idEObject.eSet(feature,newValue);
            }
          }
        }
      }
      fieldCounter++;
    }
    ((IdEObjectImpl)idEObject).setLoaded();
    if (idEObject.getRid() > 100000 || idEObject.getRid() < -100000) {
      throw new RuntimeException(""String_Node_Str"" + idEObject.getRid() + ""String_Node_Str""+ idEObject);
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
}",0.9785184015163482
160554,"public static void main(String[] args){
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(new File(""String_Node_Str""));
    new IfcSchemaToJson().convert(fos);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      fos.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public static void main(String[] args){
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(new File(""String_Node_Str""));
    new IfcSchemaToJson().convert(fos);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9367088607594936
160555,"@Override public void execute(IfcModelInterface model,Project project,ConcreteRevision concreteRevision,DatabaseSession databaseSession,Map<Long,IdEObject> created,Map<Long,IdEObject> deleted) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(project.getId());
  eObject.setRid(concreteRevision.getId());
  ((IdEObjectImpl)eObject).setLoaded();
  databaseSession.store(eObject,project.getId(),concreteRevision.getId());
  created.put(oid,eObject);
}","@Override public void execute(IfcModelInterface model,Project project,ConcreteRevision concreteRevision,DatabaseSession databaseSession,Map<Long,IdEObject> created,Map<Long,IdEObject> deleted) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(project.getId());
  eObject.setRid(concreteRevision.getId());
  eObject.setLoaded();
  databaseSession.store(eObject,project.getId(),concreteRevision.getId());
  created.put(oid,eObject);
}",0.9795109054857898
160556,"public Set<ObjectIdentifier> getOidsOfName(String name,int pid,int rid) throws BimserverDatabaseException {
  Set<ObjectIdentifier> result=new HashSet<ObjectIdentifier>();
  for (  EClass eClass : getMetaDataManager().getAllSubClasses(Ifc2x3tc1Package.eINSTANCE.getIfcRoot())) {
    RecordIterator recordIterator=database.getKeyValueStore().getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),BinUtils.intToByteArray(pid),BinUtils.intToByteArray(pid),this);
    try {
      Record record=recordIterator.next();
      while (record != null) {
        reads++;
        ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
        int pidOfRecord=buffer.getInt();
        long oid=buffer.getLong();
        int ridOfRecord=-buffer.getInt();
        if (ridOfRecord == rid && pid == pidOfRecord) {
          ByteBuffer value=ByteBuffer.wrap(record.getValue());
          byte unsettablesSize=value.get();
          value.position(value.position() + unsettablesSize);
          if (value.capacity() > 1) {
            int stringLength=value.getInt();
            if (stringLength == -1) {
              return null;
            }
 else {
              BinUtils.readString(value,stringLength);
              if (value.getShort() != -1) {
                ;
                value.getLong();
              }
              stringLength=value.getInt();
              if (stringLength != -1) {
                String foundName=BinUtils.readString(value,stringLength);
                if (name.equals(foundName)) {
                  result.add(new ObjectIdentifier(oid,getCid(eClass)));
                }
              }
            }
          }
        }
        record=recordIterator.next();
      }
    }
  finally {
      recordIterator.close();
    }
  }
  return result;
}","public Set<ObjectIdentifier> getOidsOfName(String name,int pid,int rid) throws BimserverDatabaseException {
  Set<ObjectIdentifier> result=new HashSet<ObjectIdentifier>();
  for (  EClass eClass : getMetaDataManager().getAllSubClasses(Ifc2x3tc1Package.eINSTANCE.getIfcRoot())) {
    RecordIterator recordIterator=database.getKeyValueStore().getRecordIterator(eClass.getEPackage().getName() + ""String_Node_Str"" + eClass.getName(),BinUtils.intToByteArray(pid),BinUtils.intToByteArray(pid),this);
    try {
      Record record=recordIterator.next();
      while (record != null) {
        reads++;
        ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
        int pidOfRecord=buffer.getInt();
        long oid=buffer.getLong();
        int ridOfRecord=-buffer.getInt();
        if (ridOfRecord == rid && pid == pidOfRecord) {
          ByteBuffer value=ByteBuffer.wrap(record.getValue());
          byte unsettablesSize=value.get();
          value.position(value.position() + unsettablesSize);
          if (value.capacity() > 1) {
            int stringLength=value.getInt();
            if (stringLength == -1) {
              return null;
            }
 else {
              BinUtils.readString(value,stringLength);
              if (value.getShort() != -1) {
                value.getLong();
              }
              stringLength=value.getInt();
              if (stringLength != -1) {
                String foundName=BinUtils.readString(value,stringLength);
                if (name.equals(foundName)) {
                  result.add(new ObjectIdentifier(oid,getCid(eClass)));
                }
              }
            }
          }
        }
        record=recordIterator.next();
      }
    }
  finally {
      recordIterator.close();
    }
  }
  return result;
}",0.9949776785714286
160557,"@SuppressWarnings(""String_Node_Str"") private IdEObject convertByteArrayToObject(IdEObject idEObject,EClass originalQueryClass,EClass eClass,long oid,ByteBuffer buffer,IfcModelInterface model,int rid,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  try {
    if (idEObject == null) {
      idEObject=createInternal(eClass,query);
      ((IdEObjectImpl)idEObject).setOid(oid);
      ((IdEObjectImpl)idEObject).setPid(query.getPid());
      if (rid == Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE);
      }
    }
    ((IdEObjectImpl)idEObject).setRid(rid);
    if (DEVELOPER_DEBUG && StorePackage.eINSTANCE == idEObject.eClass().getEPackage()) {
      LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ query.getPid()+ ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
    }
    ((IdEObjectImpl)idEObject).setLoadingState(State.LOADING);
    objectCache.put(new RecordIdentifier(query.getPid(),oid,rid),idEObject);
    byte unsettedLength=buffer.get();
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      if (feature.isUnsettable() && (unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0) {
        idEObject.eUnset(feature);
      }
 else {
        if (!query.shouldFollowReference(originalQueryClass,eClass,feature)) {
          fakeRead(buffer,feature);
        }
 else {
          Object newValue=null;
          if (feature.isMany()) {
            if (feature.getEType() instanceof EEnum) {
            }
 else             if (feature.getEType() instanceof EClass) {
              if (buffer.capacity() == 1 && buffer.get(0) == -1) {
                buffer.position(buffer.position() + 1);
              }
 else {
                int listSize=buffer.getInt();
                AbstractEList<Object> list=(AbstractEList<Object>)idEObject.eGet(feature);
                for (int i=0; i < listSize; i++) {
                  IdEObject referencedObject=null;
                  short cid=buffer.getShort();
                  if (cid == -1) {
                  }
 else                   if (cid < 0) {
                    EClass referenceClass=database.getEClassForCid((short)(-cid));
                    referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
                  }
 else                   if (cid > 0) {
                    EClass referenceClass=database.getEClassForCid(cid);
                    referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
                  }
                  if (referencedObject != null) {
                    if (!feature.getEType().isInstance(referencedObject)) {
                      throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getName());
                    }
                    if (feature.isUnique()) {
                      list.add(referencedObject);
                    }
 else {
                      list.addUnique(referencedObject);
                    }
                  }
                }
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              int listSize=buffer.getInt();
              BasicEList<Object> list=new BasicEList<Object>(listSize);
              for (int i=0; i < listSize; i++) {
                Object reference=readPrimitiveValue(feature.getEType(),buffer);
                if (reference != null) {
                  list.addUnique(reference);
                }
              }
              newValue=list;
            }
          }
 else {
            if (feature.getEType() instanceof EEnum) {
              int enumOrdinal=buffer.getInt();
              EClassifier eType=feature.getEType();
              EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
              if (enumLiteral != null) {
                newValue=enumLiteral.getInstance();
              }
 else {
                LOGGER.error(enumOrdinal + ""String_Node_Str"");
              }
            }
 else             if (feature.getEType() instanceof EClass) {
              short cid=buffer.getShort();
              if (cid == -1) {
              }
 else               if (cid < 0) {
                EClass referenceClass=database.getEClassForCid((short)(-cid));
                newValue=readWrappedValue(feature,buffer,referenceClass,query);
              }
 else               if (cid > 0) {
                EClass referenceClass=database.getEClassForCid(cid);
                newValue=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              newValue=readPrimitiveValue(feature.getEType(),buffer);
            }
          }
          if (newValue != null) {
            if (newValue instanceof IdEObject) {
              State oldState=((IdEObjectImpl)newValue).getLoadingState();
              if (oldState == State.TO_BE_LOADED && ((EReference)feature).getEOpposite() != null) {
                ((IdEObjectImpl)newValue).setLoadingState(State.OPPOSITE_SETTING);
                idEObject.eSet(feature,newValue);
                ((IdEObjectImpl)newValue).setLoadingState(oldState);
              }
 else {
                idEObject.eSet(feature,newValue);
              }
            }
 else {
              idEObject.eSet(feature,newValue);
            }
          }
        }
      }
      fieldCounter++;
    }
    ((IdEObjectImpl)idEObject).setLoaded();
    if (idEObject.getRid() > 100000 || idEObject.getRid() < -100000) {
      throw new RuntimeException(""String_Node_Str"" + idEObject.getRid() + ""String_Node_Str""+ idEObject);
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + idEObject.eClass().getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + idEObject.eClass().getName(),e);
  }
}","@SuppressWarnings(""String_Node_Str"") private IdEObject convertByteArrayToObject(IdEObject idEObject,EClass originalQueryClass,EClass eClass,long oid,ByteBuffer buffer,IfcModelInterface model,int rid,QueryInterface query,TodoList todoList) throws BimserverDatabaseException {
  try {
    if (idEObject == null) {
      idEObject=createInternal(eClass,query);
      ((IdEObjectImpl)idEObject).setOid(oid);
      ((IdEObjectImpl)idEObject).setPid(query.getPid());
      if (rid == Integer.MAX_VALUE) {
        throw new BimserverDatabaseException(""String_Node_Str"" + Integer.MAX_VALUE);
      }
    }
    ((IdEObjectImpl)idEObject).setRid(rid);
    if (DEVELOPER_DEBUG && StorePackage.eINSTANCE == idEObject.eClass().getEPackage()) {
      LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ query.getPid()+ ""String_Node_Str""+ oid+ ""String_Node_Str""+ rid);
    }
    ((IdEObjectImpl)idEObject).setLoadingState(State.LOADING);
    objectCache.put(new RecordIdentifier(query.getPid(),oid,rid),idEObject);
    byte unsettedLength=buffer.get();
    byte[] unsetted=new byte[unsettedLength];
    buffer.get(unsetted);
    int fieldCounter=0;
    for (    EStructuralFeature feature : eClass.getEAllStructuralFeatures()) {
      if (feature.isUnsettable() && (unsetted[fieldCounter / 8] & (1 << (fieldCounter % 8))) != 0) {
        idEObject.eUnset(feature);
      }
 else {
        if (!query.shouldFollowReference(originalQueryClass,eClass,feature)) {
          fakeRead(buffer,feature);
        }
 else {
          Object newValue=null;
          if (feature.isMany()) {
            if (feature.getEType() instanceof EEnum) {
            }
 else             if (feature.getEType() instanceof EClass) {
              if (buffer.capacity() == 1 && buffer.get(0) == -1) {
                buffer.position(buffer.position() + 1);
              }
 else {
                int listSize=buffer.getInt();
                AbstractEList<Object> list=(AbstractEList<Object>)idEObject.eGet(feature);
                for (int i=0; i < listSize; i++) {
                  IdEObject referencedObject=null;
                  short cid=buffer.getShort();
                  if (cid == -1) {
                  }
 else                   if (cid < 0) {
                    EClass referenceClass=database.getEClassForCid((short)(-cid));
                    referencedObject=readWrappedValue(feature,buffer,referenceClass,query);
                  }
 else                   if (cid > 0) {
                    EClass referenceClass=database.getEClassForCid(cid);
                    referencedObject=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
                  }
                  if (referencedObject != null) {
                    if (!feature.getEType().isInstance(referencedObject)) {
                      throw new BimserverDatabaseException(referencedObject.getClass().getSimpleName() + ""String_Node_Str"" + feature.getName());
                    }
                    if (feature.isUnique()) {
                      list.add(referencedObject);
                    }
 else {
                      list.addUnique(referencedObject);
                    }
                  }
                }
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              int listSize=buffer.getInt();
              BasicEList<Object> list=new BasicEList<Object>(listSize);
              for (int i=0; i < listSize; i++) {
                Object reference=readPrimitiveValue(feature.getEType(),buffer);
                if (reference != null) {
                  list.addUnique(reference);
                }
              }
              newValue=list;
            }
          }
 else {
            if (feature.getEType() instanceof EEnum) {
              int enumOrdinal=buffer.getInt();
              EClassifier eType=feature.getEType();
              EEnumLiteral enumLiteral=((EEnumImpl)eType).getEEnumLiteral(enumOrdinal);
              if (enumLiteral != null) {
                newValue=enumLiteral.getInstance();
              }
 else {
                LOGGER.error(enumOrdinal + ""String_Node_Str"");
              }
            }
 else             if (feature.getEType() instanceof EClass) {
              short cid=buffer.getShort();
              if (cid == -1) {
              }
 else               if (cid < 0) {
                EClass referenceClass=database.getEClassForCid((short)(-cid));
                newValue=readWrappedValue(feature,buffer,referenceClass,query);
              }
 else               if (cid > 0) {
                EClass referenceClass=database.getEClassForCid(cid);
                newValue=readReference(originalQueryClass,buffer,model,idEObject,feature,referenceClass,query,todoList);
              }
            }
 else             if (feature.getEType() instanceof EDataType) {
              newValue=readPrimitiveValue(feature.getEType(),buffer);
            }
          }
          if (newValue != null) {
            if (newValue instanceof IdEObject) {
              State oldState=((IdEObjectImpl)newValue).getLoadingState();
              if (oldState == State.TO_BE_LOADED && ((EReference)feature).getEOpposite() != null) {
                ((IdEObjectImpl)newValue).setLoadingState(State.OPPOSITE_SETTING);
                idEObject.eSet(feature,newValue);
                ((IdEObjectImpl)newValue).setLoadingState(oldState);
              }
 else {
                idEObject.eSet(feature,newValue);
              }
            }
 else {
              idEObject.eSet(feature,newValue);
            }
          }
        }
      }
      fieldCounter++;
    }
    ((IdEObjectImpl)idEObject).setLoaded();
    if (idEObject.getRid() > 100000 || idEObject.getRid() < -100000) {
      throw new RuntimeException(""String_Node_Str"" + idEObject.getRid() + ""String_Node_Str""+ idEObject);
    }
    return idEObject;
  }
 catch (  BufferUnderflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
catch (  BufferOverflowException e) {
    throw new BimserverDatabaseException(""String_Node_Str"" + eClass.getName(),e);
  }
}",0.998066698888352
160558,"@Override public void objectAdded(){
  total.incrementAndGet();
  progress=Math.round(100L * total.get() / totalSize);
}","@Override public void objectAdded(){
  total.incrementAndGet();
  progress=(int)Math.round(100.0 * total.get() / totalSize);
}",0.967479674796748
160559,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Set<String> foundGuids=new HashSet<String>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    Map<ConcreteRevision,Set<Long>> map=new HashMap<ConcreteRevision,Set<Long>>();
    for (    String guid : guids) {
      if (!foundGuids.contains(guid)) {
        for (        ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
          ObjectIdentifier objectIdentifier=getDatabaseSession().getOidOfGuid(guid,concreteRevision.getProject().getId(),concreteRevision.getId());
          if (objectIdentifier != null) {
            foundGuids.add(guid);
            if (!map.containsKey(concreteRevision)) {
              map.put(concreteRevision,new HashSet<Long>());
              incrSize+=concreteRevision.getSize();
            }
            map.get(concreteRevision).add(objectIdentifier.getOid());
          }
        }
      }
    }
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : map.keySet()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=Math.round(100L * total.get() / totalSize);
        }
      }
);
      Set<Long> oids=map.get(concreteRevision);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  try {
    IfcModelInterface ifcModel=new IfcModel();
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    for (    String guid : guids) {
      if (!foundGuids.contains(guid)) {
        throw new UserException(""String_Node_Str"" + guid + ""String_Node_Str"");
      }
    }
    ifcModel.getModelMetaData().setRevisionId(1);
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Set<String> foundGuids=new HashSet<String>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    Map<ConcreteRevision,Set<Long>> map=new HashMap<ConcreteRevision,Set<Long>>();
    for (    String guid : guids) {
      if (!foundGuids.contains(guid)) {
        for (        ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
          ObjectIdentifier objectIdentifier=getDatabaseSession().getOidOfGuid(guid,concreteRevision.getProject().getId(),concreteRevision.getId());
          if (objectIdentifier != null) {
            foundGuids.add(guid);
            if (!map.containsKey(concreteRevision)) {
              map.put(concreteRevision,new HashSet<Long>());
              incrSize+=concreteRevision.getSize();
            }
            map.get(concreteRevision).add(objectIdentifier.getOid());
          }
        }
      }
    }
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : map.keySet()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=(int)Math.round(100.0 * total.get() / totalSize);
        }
      }
);
      Set<Long> oids=map.get(concreteRevision);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  try {
    IfcModelInterface ifcModel=new IfcModel();
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    for (    String guid : guids) {
      if (!foundGuids.contains(guid)) {
        throw new UserException(""String_Node_Str"" + guid + ""String_Node_Str"");
      }
    }
    ifcModel.getModelMetaData().setRevisionId(1);
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
}",0.9988119988119988
160560,"@Override public void objectAdded(){
  total.incrementAndGet();
  progress=Math.round(100L * total.get() / totalSize);
}","@Override public void objectAdded(){
  total.incrementAndGet();
  progress=(int)Math.round(100.0 * total.get() / totalSize);
}",0.967479674796748
160561,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Set<String> foundNames=new HashSet<String>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    Map<ConcreteRevision,Set<Long>> map=new HashMap<ConcreteRevision,Set<Long>>();
    for (    String name : names) {
      if (!foundNames.contains(name)) {
        for (        ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
          for (          ObjectIdentifier objectIdentifier : getDatabaseSession().getOidsOfName(name,concreteRevision.getProject().getId(),concreteRevision.getId())) {
            foundNames.add(name);
            if (!map.containsKey(concreteRevision)) {
              map.put(concreteRevision,new HashSet<Long>());
              incrSize+=concreteRevision.getSize();
            }
            map.get(concreteRevision).add(objectIdentifier.getOid());
          }
        }
      }
    }
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : map.keySet()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=Math.round(100L * total.get() / totalSize);
        }
      }
);
      Set<Long> oids=map.get(concreteRevision);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    for (    String name : names) {
      if (!foundNames.contains(name)) {
        throw new UserException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    ifcModel.getModelMetaData().setRevisionId(1);
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Set<String> foundNames=new HashSet<String>();
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    Map<ConcreteRevision,Set<Long>> map=new HashMap<ConcreteRevision,Set<Long>>();
    for (    String name : names) {
      if (!foundNames.contains(name)) {
        for (        ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
          for (          ObjectIdentifier objectIdentifier : getDatabaseSession().getOidsOfName(name,concreteRevision.getProject().getId(),concreteRevision.getId())) {
            foundNames.add(name);
            if (!map.containsKey(concreteRevision)) {
              map.put(concreteRevision,new HashSet<Long>());
              incrSize+=concreteRevision.getSize();
            }
            map.get(concreteRevision).add(objectIdentifier.getOid());
          }
        }
      }
    }
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : map.keySet()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=(int)Math.round(100.0 * total.get() / totalSize);
        }
      }
);
      Set<Long> oids=map.get(concreteRevision);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
    ifcModel.getModelMetaData().setName(""String_Node_Str"");
    for (    String name : names) {
      if (!foundNames.contains(name)) {
        throw new UserException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    ifcModel.getModelMetaData().setRevisionId(1);
    ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
    ifcModel.getModelMetaData().setDate(new Date());
    return ifcModel;
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
}",0.9988034699371822
160562,"@Override public void objectAdded(){
  total.incrementAndGet();
  progress=Math.round(100L * total.get() / totalSize);
}","@Override public void objectAdded(){
  total.incrementAndGet();
  progress=(int)Math.round(100.0 * total.get() / totalSize);
}",0.967479674796748
160563,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    incrSize+=virtualRevision.getConcreteRevisions().size();
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=Math.round(100L * total.get() / totalSize);
        }
      }
);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  ifcModel.getModelMetaData().setName(""String_Node_Str"");
  ifcModel.getModelMetaData().setRevisionId(1);
  ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  IfcModelSet ifcModelSet=new IfcModelSet();
  Project project=null;
  long incrSize=0L;
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  Long roid : roids) {
    Revision virtualRevision=getRevisionByRoid(roid);
    project=virtualRevision.getProject();
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    incrSize+=virtualRevision.getConcreteRevisions().size();
    final long totalSize=incrSize;
    final AtomicLong total=new AtomicLong();
    for (    ConcreteRevision concreteRevision : virtualRevision.getConcreteRevisions()) {
      IfcModel subModel=new IfcModel();
      int highestStopId=findHighestStopRid(project,concreteRevision);
      Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,deep,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          progress=(int)Math.round(100.0 * total.get() / totalSize);
        }
      }
);
      getDatabaseSession().getMapWithOids(subModel,oids,query);
      subModel.getModelMetaData().setDate(concreteRevision.getDate());
      try {
        checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,virtualRevision);
      }
 catch (      GeometryGeneratingException e) {
        throw new UserException(e);
      }
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  ifcModel.getModelMetaData().setName(""String_Node_Str"");
  ifcModel.getModelMetaData().setRevisionId(1);
  ifcModel.getModelMetaData().setAuthorizedUser(getUserByUoid(getAuthorization().getUoid()).getName());
  ifcModel.getModelMetaData().setDate(new Date());
  return ifcModel;
}",0.9983388704318936
160564,"@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
  }
}","@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
  }
}",0.9822222222222222
160565,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  Revision revision=getRevisionByRoid(roid);
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  getAuthorization().canDownload(roid);
  if (revision == null) {
    throw new UserException(""String_Node_Str"" + roid + ""String_Node_Str"");
  }
  Project project=revision.getProject();
  User user=getUserByUoid(getAuthorization().getUoid());
  try {
    getAuthorization().canDownload(roid);
  }
 catch (  UserException e) {
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  EList<ConcreteRevision> concreteRevisions=revision.getConcreteRevisions();
  if (concreteRevisions.size() == 0) {
    throw new ServerException(""String_Node_Str"");
  }
  for (  ConcreteRevision subRevision : concreteRevisions) {
    incrSize+=subRevision.getSize();
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  IfcHeader ifcHeader=null;
  for (  ConcreteRevision subRevision : concreteRevisions) {
    if (subRevision.getUser().getOid() != ignoreUoid) {
      IfcModel subModel=new IfcModel();
      ifcHeader=subRevision.getIfcHeader();
      int highestStopId=findHighestStopRid(project,subRevision);
      Query query=new Query(subRevision.getProject().getId(),subRevision.getId(),objectIDM,Deep.YES,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          if (totalSize == 0) {
            setProgress(""String_Node_Str"",0);
          }
 else {
            setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
          }
        }
      }
);
      getDatabaseSession().getMap(subModel,query);
      if (serializerPluginConfiguration != null) {
        try {
          checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,subRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
      }
      subModel.getModelMetaData().setDate(subRevision.getDate());
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(revision.getProject(),ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  if (ifcHeader != null) {
    ifcModel.getModelMetaData().setIfcHeader(bimServer.getSConverter().convertToSObject(ifcHeader));
  }
  ifcModel.getModelMetaData().setName(project.getName() + ""String_Node_Str"" + revision.getId());
  ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(revision) + 1);
  if (user != null) {
    ifcModel.getModelMetaData().setAuthorizedUser(user.getName());
  }
  ifcModel.getModelMetaData().setDate(revision.getDate());
  if (revision.getProject().getGeoTag() != null) {
  }
  return ifcModel;
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException, ServerException {
  Revision revision=getRevisionByRoid(roid);
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  getAuthorization().canDownload(roid);
  if (revision == null) {
    throw new UserException(""String_Node_Str"" + roid + ""String_Node_Str"");
  }
  Project project=revision.getProject();
  User user=getUserByUoid(getAuthorization().getUoid());
  try {
    getAuthorization().canDownload(roid);
  }
 catch (  UserException e) {
    if (!getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  EList<ConcreteRevision> concreteRevisions=revision.getConcreteRevisions();
  if (concreteRevisions.size() == 0) {
    throw new ServerException(""String_Node_Str"");
  }
  for (  ConcreteRevision subRevision : concreteRevisions) {
    incrSize+=subRevision.getSize();
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  IfcHeader ifcHeader=null;
  for (  ConcreteRevision subRevision : concreteRevisions) {
    if (subRevision.getUser().getOid() != ignoreUoid) {
      IfcModel subModel=new IfcModel();
      ifcHeader=subRevision.getIfcHeader();
      int highestStopId=findHighestStopRid(project,subRevision);
      Query query=new Query(subRevision.getProject().getId(),subRevision.getId(),objectIDM,Deep.YES,highestStopId);
      subModel.addChangeListener(new IfcModelChangeListener(){
        @Override public void objectAdded(){
          total.incrementAndGet();
          if (totalSize == 0) {
            setProgress(""String_Node_Str"",0);
          }
 else {
            setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
          }
        }
      }
);
      getDatabaseSession().getMap(subModel,query);
      if (serializerPluginConfiguration != null) {
        try {
          checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,subRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
      }
      subModel.getModelMetaData().setDate(subRevision.getDate());
      ifcModelSet.add(subModel);
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(revision.getProject(),ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  if (ifcHeader != null) {
    ifcModel.getModelMetaData().setIfcHeader(bimServer.getSConverter().convertToSObject(ifcHeader));
  }
  ifcModel.getModelMetaData().setName(project.getName() + ""String_Node_Str"" + revision.getId());
  ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(revision) + 1);
  if (user != null) {
    ifcModel.getModelMetaData().setAuthorizedUser(user.getName());
  }
  ifcModel.getModelMetaData().setDate(revision.getDate());
  if (revision.getProject().getGeoTag() != null) {
  }
  return ifcModel;
}",0.9988388969521044
160566,"@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
  }
}","@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
  }
}",0.9822222222222222
160567,"@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  String projectName=""String_Node_Str"";
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    for (    ConcreteRevision subRevision : revision.getConcreteRevisions()) {
      incrSize+=subRevision.getSize();
    }
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    project=revision.getProject();
    if (getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      for (      ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
        IfcModel subModel=new IfcModel();
        int highestStopId=findHighestStopRid(project,concreteRevision);
        Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,Deep.YES,highestStopId);
        subModel.addChangeListener(new IfcModelChangeListener(){
          @Override public void objectAdded(){
            total.incrementAndGet();
            if (totalSize == 0) {
              setProgress(""String_Node_Str"",0);
            }
 else {
              setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
            }
          }
        }
);
        getDatabaseSession().getMap(subModel,query);
        projectName+=concreteRevision.getProject().getName() + ""String_Node_Str"";
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        try {
          checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
        ifcModelSet.add(subModel);
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + project.getOid());
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  if (projectName.endsWith(""String_Node_Str"")) {
    projectName=projectName.substring(0,projectName.length() - 1);
  }
  ifcModel.getModelMetaData().setName(projectName);
  return ifcModel;
}","@Override public IfcModelInterface execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(getAuthorization().getUoid());
  Project project=null;
  String projectName=""String_Node_Str"";
  IfcModelSet ifcModelSet=new IfcModelSet();
  long incrSize=0;
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    for (    ConcreteRevision subRevision : revision.getConcreteRevisions()) {
      incrSize+=subRevision.getSize();
    }
  }
  final long totalSize=incrSize;
  final AtomicLong total=new AtomicLong();
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  for (  long roid : roids) {
    Revision revision=getRevisionByRoid(roid);
    project=revision.getProject();
    if (getAuthorization().hasRightsOnProjectOrSuperProjectsOrSubProjects(user,project)) {
      for (      ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
        IfcModel subModel=new IfcModel();
        int highestStopId=findHighestStopRid(project,concreteRevision);
        Query query=new Query(concreteRevision.getProject().getId(),concreteRevision.getId(),objectIDM,Deep.YES,highestStopId);
        subModel.addChangeListener(new IfcModelChangeListener(){
          @Override public void objectAdded(){
            total.incrementAndGet();
            if (totalSize == 0) {
              setProgress(""String_Node_Str"",0);
            }
 else {
              setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
            }
          }
        }
);
        getDatabaseSession().getMap(subModel,query);
        projectName+=concreteRevision.getProject().getName() + ""String_Node_Str"";
        subModel.getModelMetaData().setDate(concreteRevision.getDate());
        try {
          checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,concreteRevision,revision);
        }
 catch (        GeometryGeneratingException e) {
          throw new UserException(e);
        }
        ifcModelSet.add(subModel);
      }
    }
 else {
      throw new UserException(""String_Node_Str"" + project.getOid());
    }
  }
  IfcModelInterface ifcModel=new IfcModel();
  try {
    ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(project,ifcModelSet,new ModelHelper(ifcModel));
  }
 catch (  MergeException e) {
    throw new UserException(e);
  }
  if (projectName.endsWith(""String_Node_Str"")) {
    projectName=projectName.substring(0,projectName.length() - 1);
  }
  ifcModel.getModelMetaData().setName(projectName);
  return ifcModel;
}",0.9985501993475896
160568,"@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(uoid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getCheckout_User(),user);
  Map<Long,Checkout> query=(Map<Long,Checkout>)getDatabaseSession().query(condition,Checkout.class,Query.getDefault());
  return CollectionUtils.mapToList(query);
}","@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(uoid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getCheckout_User(),user);
  Map<Long,Checkout> query=getDatabaseSession().query(condition,Checkout.class,Query.getDefault());
  return CollectionUtils.mapToList(query);
}",0.975669099756691
160569,"@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Project project=getProjectByPoid(poid);
  Set<Project> projects=new HashSet<Project>();
  if (checkSubProjects) {
    getSubProjects(project,projects);
  }
 else {
    projects.add(project);
  }
  Condition condition=new HasReferenceToInCondition(StorePackage.eINSTANCE.getCheckout_Project(),projects);
  Map<Long,Checkout> query=(Map<Long,Checkout>)getDatabaseSession().query(condition,Checkout.class,Query.getDefault());
  return CollectionUtils.mapToList(query);
}","@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Project project=getProjectByPoid(poid);
  Set<Project> projects=new HashSet<Project>();
  if (checkSubProjects) {
    getSubProjects(project,projects);
  }
 else {
    projects.add(project);
  }
  Condition condition=new HasReferenceToInCondition(StorePackage.eINSTANCE.getCheckout_Project(),projects);
  Map<Long,Checkout> query=getDatabaseSession().query(condition,Checkout.class,Query.getDefault());
  return CollectionUtils.mapToList(query);
}",0.7996575342465754
160570,"@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision revision=getRevisionByRoid(roid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getCheckout_Revision(),revision);
  return CollectionUtils.mapToList((Map<Long,Checkout>)getDatabaseSession().query(condition,Checkout.class,Query.getDefault()));
}","@Override public List<Checkout> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Revision revision=getRevisionByRoid(roid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getCheckout_Revision(),revision);
  return CollectionUtils.mapToList(getDatabaseSession().query(condition,Checkout.class,Query.getDefault()));
}",0.9748110831234256
160571,"@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Condition condition=new Not(new HasReferenceToCondition(StorePackage.eINSTANCE.getProject_HasAuthorizedUsers(),getUserByUoid(uoid))).and(new Not(new AttributeCondition(StorePackage.eINSTANCE.getProject_Name(),new StringLiteral(Database.STORE_PROJECT_NAME))));
  return CollectionUtils.mapToSet((Map<Long,Project>)getDatabaseSession().query(condition,Project.class,Query.getDefault()));
}","@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Condition condition=new Not(new HasReferenceToCondition(StorePackage.eINSTANCE.getProject_HasAuthorizedUsers(),getUserByUoid(uoid))).and(new Not(new AttributeCondition(StorePackage.eINSTANCE.getProject_Name(),new StringLiteral(Database.STORE_PROJECT_NAME))));
  return CollectionUtils.mapToSet(getDatabaseSession().query(condition,Project.class,Query.getDefault()));
}",0.981094527363184
160572,"@Override public Set<User> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Project project=getProjectByPoid(poid);
  if (project == null) {
    throw new UserException(""String_Node_Str"" + poid + ""String_Node_Str"");
  }
  Condition condition=new AndCondition(new AndCondition(new Not(new HasReferenceToCondition(StorePackage.eINSTANCE.getUser_HasRightsOn(),project)),new AttributeCondition(StorePackage.eINSTANCE.getUser_State(),new EnumLiteral(ObjectState.ACTIVE))),new Not(new AttributeCondition(StorePackage.eINSTANCE.getUser_UserType(),new EnumLiteral(UserType.SYSTEM))));
  return CollectionUtils.mapToSet((Map<Long,User>)getDatabaseSession().query(condition,User.class,Query.getDefault()));
}","@Override public Set<User> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  Project project=getProjectByPoid(poid);
  if (project == null) {
    throw new UserException(""String_Node_Str"" + poid + ""String_Node_Str"");
  }
  Condition condition=new AndCondition(new AndCondition(new Not(new HasReferenceToCondition(StorePackage.eINSTANCE.getUser_HasRightsOn(),project)),new AttributeCondition(StorePackage.eINSTANCE.getUser_State(),new EnumLiteral(ObjectState.ACTIVE))),new Not(new AttributeCondition(StorePackage.eINSTANCE.getUser_UserType(),new EnumLiteral(UserType.SYSTEM))));
  return CollectionUtils.mapToSet(getDatabaseSession().query(condition,User.class,Query.getDefault()));
}",0.9891304347826086
160573,"@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(authorization.getUoid());
  Not notStoreProject=new Not(new AttributeCondition(StorePackage.eINSTANCE.getProject_Name(),new StringLiteral(Database.STORE_PROJECT_NAME)));
  HasReferenceToCondition authorized=new HasReferenceToCondition(StorePackage.eINSTANCE.getProject_HasAuthorizedUsers(),user);
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getProject()).and(notStoreProject);
  if (onlyActive) {
    condition=new AndCondition(condition,new AttributeCondition(StorePackage.eINSTANCE.getProject_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  if (user.getUserType() != UserType.ADMIN && user.getUserType() != UserType.SYSTEM) {
    condition=condition.and(authorized);
    condition=condition.and(new AttributeCondition(StorePackage.eINSTANCE.getProject_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  Map<Long,Project> results=(Map<Long,Project>)getDatabaseSession().query(condition,Project.class,Query.getDefault());
  Set<Project> resultSet=new HashSet<Project>();
  for (  Project p : results.values()) {
    if (p.getParent() == null || !onlyTopLevel) {
      resultSet.add(p);
    }
  }
  for (  Project project : results.values()) {
    addParentProjects(resultSet,project);
  }
  return resultSet;
}","@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(authorization.getUoid());
  Not notStoreProject=new Not(new AttributeCondition(StorePackage.eINSTANCE.getProject_Name(),new StringLiteral(Database.STORE_PROJECT_NAME)));
  HasReferenceToCondition authorized=new HasReferenceToCondition(StorePackage.eINSTANCE.getProject_HasAuthorizedUsers(),user);
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getProject()).and(notStoreProject);
  if (onlyActive) {
    condition=new AndCondition(condition,new AttributeCondition(StorePackage.eINSTANCE.getProject_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  if (user.getUserType() != UserType.ADMIN && user.getUserType() != UserType.SYSTEM) {
    condition=condition.and(authorized);
    condition=condition.and(new AttributeCondition(StorePackage.eINSTANCE.getProject_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  Map<Long,Project> results=getDatabaseSession().query(condition,Project.class,Query.getDefault());
  Set<Project> resultSet=new HashSet<Project>();
  for (  Project p : results.values()) {
    if (p.getParent() == null || !onlyTopLevel) {
      resultSet.add(p);
    }
  }
  for (  Project project : results.values()) {
    addParentProjects(resultSet,project);
  }
  return resultSet;
}",0.9931134469010512
160574,"@Override public Set<Revision> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(uoid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getRevision_User(),user);
  return CollectionUtils.mapToSet((Map<Long,Revision>)getDatabaseSession().query(condition,Revision.class,Query.getDefault()));
}","@Override public Set<Revision> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(uoid);
  Condition condition=new HasReferenceToCondition(StorePackage.eINSTANCE.getRevision_User(),user);
  return CollectionUtils.mapToSet(getDatabaseSession().query(condition,Revision.class,Query.getDefault()));
}",0.9733333333333334
160575,"@Override public Set<User> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User actingUser=getUserByUoid(authorization.getUoid());
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getUser());
  condition=condition.and(new Not(new AttributeCondition(StorePackage.eINSTANCE.getUser_UserType(),new EnumLiteral(UserType.SYSTEM))));
  if (actingUser.getUserType() != UserType.ADMIN) {
    condition=condition.and(new AttributeCondition(StorePackage.eINSTANCE.getUser_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  return CollectionUtils.mapToSet((Map<Long,User>)getDatabaseSession().query(condition,User.class,Query.getDefault()));
}","@Override public Set<User> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User actingUser=getUserByUoid(authorization.getUoid());
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getUser());
  condition=condition.and(new Not(new AttributeCondition(StorePackage.eINSTANCE.getUser_UserType(),new EnumLiteral(UserType.SYSTEM))));
  if (actingUser.getUserType() != UserType.ADMIN) {
    condition=condition.and(new AttributeCondition(StorePackage.eINSTANCE.getUser_State(),new EnumLiteral(ObjectState.ACTIVE)));
  }
  return CollectionUtils.mapToSet(getDatabaseSession().query(condition,User.class,Query.getDefault()));
}",0.9884225759768452
160576,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void fillDataObject(BiMap<? extends Long,? extends EObject> mapResult,EObject eObject,DataObject dataObject){
  for (  EStructuralFeature eStructuralFeature : eObject.eClass().getEAllStructuralFeatures()) {
    Object eGet=eObject.eGet(eStructuralFeature);
    if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
      if (eStructuralFeature instanceof EAttribute) {
        if (eStructuralFeature.isMany()) {
          ListDataValue listDataValue=StoreFactory.eINSTANCE.createListDataValue();
          listDataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(listDataValue);
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
            EStructuralFeature asStringFeature=eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
            List list=(List)eObject.eGet(asStringFeature);
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              dataValue.setStringValue(o.toString());
              listDataValue.getValues().add(dataValue);
            }
          }
 else {
            List list=(List)eGet;
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              if (eGet != null) {
                dataValue.setStringValue(o.toString());
              }
 else {
                dataValue.setStringValue(null);
              }
              listDataValue.getValues().add(dataValue);
            }
          }
        }
 else {
          SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
          if (eGet != null) {
            if (eGet instanceof byte[]) {
              dataValue.setStringValue(new String(((byte[])eGet),Charsets.UTF_8));
            }
 else {
              dataValue.setStringValue(eGet.toString());
            }
          }
 else {
            dataValue.setStringValue(null);
          }
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
        }
      }
 else       if (eStructuralFeature instanceof EReference) {
        if (eStructuralFeature.isMany()) {
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
            List list=(List)eObject.eGet(eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str""));
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataValue.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(dataValue);
            for (            Object o : list) {
              SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              simpleDataValue.setStringValue(o.toString());
              dataValue.getValues().add(simpleDataValue);
            }
          }
 else {
            EList<? extends EObject> list=(EList<EObject>)eGet;
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataObject.getValues().add(dataValue);
            dataValue.setFieldName(eStructuralFeature.getName());
            for (            EObject item : list) {
              if (item.eClass().getEAnnotation(""String_Node_Str"") != null) {
                EObject referenceEObject=(EObject)item;
                SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
                simpleDataValue.setStringValue(referenceEObject.eGet(referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"")).toString());
                dataValue.getValues().add(simpleDataValue);
              }
 else {
                Long oid=((IdEObject)item).getOid();
                ReferenceDataValue referenceDataValue=StoreFactory.eINSTANCE.createReferenceDataValue();
                if (item instanceof IfcRoot) {
                  IfcRoot ifcRoot=(IfcRoot)item;
                  String guid=ifcRoot.getGlobalId();
                  referenceDataValue.setGuid(guid);
                }
                referenceDataValue.setTypeName(item.eClass().getName());
                ((IdEObjectImpl)referenceDataValue).setOid(oid);
                dataValue.getValues().add(referenceDataValue);
              }
            }
          }
        }
 else {
          EObject eObject2=(EObject)eGet;
          if (eObject2 != null) {
            if (eObject2.eClass().getEAnnotation(""String_Node_Str"") != null) {
              EObject referenceEObject=(EObject)eGet;
              SimpleDataValue e=StoreFactory.eINSTANCE.createSimpleDataValue();
              EStructuralFeature wrappedValueFeature=referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"");
              Object eGet2=referenceEObject.eGet(wrappedValueFeature);
              if (eGet2 != null) {
                e.setStringValue(eGet2.toString());
              }
 else {
                e.setStringValue(null);
              }
              e.setFieldName(eStructuralFeature.getName());
              dataObject.getValues().add(e);
            }
 else {
              Long oid=((IdEObject)eObject2).getOid();
              ReferenceDataValue reference=StoreFactory.eINSTANCE.createReferenceDataValue();
              if (eObject2 instanceof IfcRoot) {
                IfcRoot ifcRoot=(IfcRoot)eObject2;
                String guid=ifcRoot.getGlobalId();
                reference.setGuid(guid);
              }
              reference.setTypeName(eObject2.eClass().getName());
              ((IdEObjectImpl)reference).setOid(oid);
              reference.setFieldName(eStructuralFeature.getName());
              dataObject.getValues().add(reference);
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void fillDataObject(BiMap<? extends Long,? extends EObject> mapResult,EObject eObject,DataObject dataObject){
  for (  EStructuralFeature eStructuralFeature : eObject.eClass().getEAllStructuralFeatures()) {
    Object eGet=eObject.eGet(eStructuralFeature);
    if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
      if (eStructuralFeature instanceof EAttribute) {
        if (eStructuralFeature.isMany()) {
          ListDataValue listDataValue=StoreFactory.eINSTANCE.createListDataValue();
          listDataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(listDataValue);
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
            EStructuralFeature asStringFeature=eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
            List list=(List)eObject.eGet(asStringFeature);
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              dataValue.setStringValue(o.toString());
              listDataValue.getValues().add(dataValue);
            }
          }
 else {
            if (eGet != null) {
              List list=(List)eGet;
              for (              Object o : list) {
                SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
                if (eGet != null) {
                  dataValue.setStringValue(o.toString());
                }
 else {
                  dataValue.setStringValue(null);
                }
                listDataValue.getValues().add(dataValue);
              }
            }
          }
        }
 else {
          SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
          if (eGet != null) {
            if (eGet instanceof byte[]) {
              dataValue.setStringValue(new String(((byte[])eGet),Charsets.UTF_8));
            }
 else {
              dataValue.setStringValue(eGet.toString());
            }
          }
 else {
            dataValue.setStringValue(null);
          }
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
        }
      }
 else       if (eStructuralFeature instanceof EReference) {
        if (eStructuralFeature.isMany()) {
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
            List list=(List)eObject.eGet(eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str""));
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataValue.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(dataValue);
            for (            Object o : list) {
              SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              simpleDataValue.setStringValue(o.toString());
              dataValue.getValues().add(simpleDataValue);
            }
          }
 else {
            EList<? extends EObject> list=(EList<EObject>)eGet;
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataObject.getValues().add(dataValue);
            dataValue.setFieldName(eStructuralFeature.getName());
            for (            EObject item : list) {
              if (item.eClass().getEAnnotation(""String_Node_Str"") != null) {
                EObject referenceEObject=item;
                SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
                simpleDataValue.setStringValue(referenceEObject.eGet(referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"")).toString());
                dataValue.getValues().add(simpleDataValue);
              }
 else {
                Long oid=((IdEObject)item).getOid();
                ReferenceDataValue referenceDataValue=StoreFactory.eINSTANCE.createReferenceDataValue();
                if (item instanceof IfcRoot) {
                  IfcRoot ifcRoot=(IfcRoot)item;
                  String guid=ifcRoot.getGlobalId();
                  referenceDataValue.setGuid(guid);
                }
                referenceDataValue.setTypeName(item.eClass().getName());
                ((IdEObjectImpl)referenceDataValue).setOid(oid);
                dataValue.getValues().add(referenceDataValue);
              }
            }
          }
        }
 else {
          EObject eObject2=(EObject)eGet;
          if (eObject2 != null) {
            if (eObject2.eClass().getEAnnotation(""String_Node_Str"") != null) {
              EObject referenceEObject=(EObject)eGet;
              SimpleDataValue e=StoreFactory.eINSTANCE.createSimpleDataValue();
              EStructuralFeature wrappedValueFeature=referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"");
              Object eGet2=referenceEObject.eGet(wrappedValueFeature);
              if (eGet2 != null) {
                e.setStringValue(eGet2.toString());
              }
 else {
                e.setStringValue(null);
              }
              e.setFieldName(eStructuralFeature.getName());
              dataObject.getValues().add(e);
            }
 else {
              Long oid=((IdEObject)eObject2).getOid();
              ReferenceDataValue reference=StoreFactory.eINSTANCE.createReferenceDataValue();
              if (eObject2 instanceof IfcRoot) {
                IfcRoot ifcRoot=(IfcRoot)eObject2;
                String guid=ifcRoot.getGlobalId();
                reference.setGuid(guid);
              }
              reference.setTypeName(eObject2.eClass().getName());
              ((IdEObjectImpl)reference).setOid(oid);
              reference.setFieldName(eStructuralFeature.getName());
              dataObject.getValues().add(reference);
            }
          }
        }
      }
    }
  }
}",0.9936828287800475
160577,"@Override public Void execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  RenderEnginePluginConfiguration oldRenderEngine=getDatabaseSession().get(StorePackage.eINSTANCE.getRenderEnginePluginConfiguration(),renderEngine.getOid(),Query.getDefault());
  if (oldRenderEngine.getEnabled() == true && renderEngine.getEnabled() == false && !renderEngine.getSerializers().isEmpty()) {
    throw new UserException(""String_Node_Str"");
  }
  return super.execute();
}","@Override public Void execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  RenderEnginePluginConfiguration oldRenderEngine=getDatabaseSession().get(StorePackage.eINSTANCE.getRenderEnginePluginConfiguration(),renderEngine.getOid(),Query.getDefault());
  if (oldRenderEngine.getEnabled() && !renderEngine.getEnabled() && !renderEngine.getSerializers().isEmpty()) {
    throw new UserException(""String_Node_Str"");
  }
  return super.execute();
}",0.9817073170731708
160578,"@Override public SearchingRecordIterator getRecordIterator(String tableName,byte[] mustStartWith,byte[] startSearchingAt,DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  Cursor cursor=null;
  try {
    cursor=getDatabase(tableName).openCursor(getTransaction(databaseSession),cursorConfig);
    return new BerkeleySearchingRecordIterator(cursor,mustStartWith,startSearchingAt);
  }
 catch (  BimserverLockConflictException e) {
    try {
      cursor.close();
      throw e;
    }
 catch (    DatabaseException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
catch (  DatabaseException e1) {
    LOGGER.error(""String_Node_Str"",e1);
  }
  return null;
}","@Override public SearchingRecordIterator getRecordIterator(String tableName,byte[] mustStartWith,byte[] startSearchingAt,DatabaseSession databaseSession) throws BimserverLockConflictException, BimserverDatabaseException {
  Cursor cursor=null;
  try {
    cursor=getDatabase(tableName).openCursor(getTransaction(databaseSession),cursorConfig);
    return new BerkeleySearchingRecordIterator(cursor,mustStartWith,startSearchingAt);
  }
 catch (  BimserverLockConflictException e) {
    if (cursor != null) {
      try {
        cursor.close();
        throw e;
      }
 catch (      DatabaseException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
catch (  DatabaseException e1) {
    LOGGER.error(""String_Node_Str"",e1);
  }
  return null;
}",0.9688346883468836
160579,"@SuppressWarnings(""String_Node_Str"") private Migration getMigration(int number){
  String name=""String_Node_Str"" + StringUtils.leftPad(""String_Node_Str"" + number,4,""String_Node_Str"");
  try {
    Class<Migration> migrationClass=(Class<Migration>)Class.forName(name);
    return (Migration)migrationClass.newInstance();
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") private Migration getMigration(int number){
  String name=""String_Node_Str"" + StringUtils.leftPad(""String_Node_Str"" + number,4,""String_Node_Str"");
  try {
    Class<Migration> migrationClass=(Class<Migration>)Class.forName(name);
    return migrationClass.newInstance();
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    return null;
  }
}",0.98636926889715
160580,"@Override public void migrate(Schema schema){
  this.schema=schema;
  storePackage=schema.createEPackage(""String_Node_Str"");
  createUserTypeEnum();
  createSIPrefixEnum();
  createObjectStateEnum();
  project=schema.createEClass(storePackage,""String_Node_Str"");
  user=schema.createEClass(storePackage,""String_Node_Str"");
  revisionClass=schema.createEClass(storePackage,""String_Node_Str"");
  concreteRevisionClass=schema.createEClass(storePackage,""String_Node_Str"");
  geoTagClass=schema.createEClass(storePackage,""String_Node_Str"");
  checkoutClass=schema.createEClass(storePackage,""String_Node_Str"");
  serverSettings=schema.createEClass(storePackage,""String_Node_Str"");
  userSettings=schema.createEClass(storePackage,""String_Node_Str"");
  createProjectClass();
  createUserClass();
  createCheckoutClass();
  createGeoTagClass();
  createConcreteRevisionClass();
  createRevisionClass();
  createServerSettingsClass();
  userHasRightsOn.setEOpposite(projectHasAuthorizedUsers);
  projectHasAuthorizedUsers.setEOpposite(userHasRightsOn);
  revisionProject.setEOpposite(projectRevisions);
  projectRevisions.setEOpposite(revisionProject);
  checkoutProject.setEOpposite(projectCheckouts);
  projectCheckouts.setEOpposite(checkoutProject);
  checkoutRevision.setEOpposite(revisionCheckouts);
  revisionCheckouts.setEOpposite(checkoutRevision);
  revisionUser.setEOpposite(userRevisions);
  userRevisions.setEOpposite(revisionUser);
  revisionConcreteRevisions.setEOpposite(concreteRevisionRevisions);
  concreteRevisionRevisions.setEOpposite(revisionConcreteRevisions);
  concreteRevisionProject.setEOpposite(projectConcreteRevisions);
  projectConcreteRevisions.setEOpposite(concreteRevisionProject);
  projectGeoTag.setEOpposite(geoTagProjects);
  geoTagProjects.setEOpposite(projectGeoTag);
  projectParentProject.setEOpposite(projectSubProjects);
  projectSubProjects.setEOpposite(projectParentProject);
  EPackage logPackage=schema.createEPackage(""String_Node_Str"");
  EEnum accessMethodEnum=schema.createEEnum(logPackage,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  EClass logAction=schema.createEClass(logPackage,""String_Node_Str"");
  schema.createEAttribute(logAction,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate(),Multiplicity.SINGLE);
  schema.createEReference(logAction,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(logAction,""String_Node_Str"",accessMethodEnum,Multiplicity.SINGLE);
  EClass serverLogClass=schema.createEClass(logPackage,""String_Node_Str"");
  schema.createEReference(serverLogClass,""String_Node_Str"",logAction,Multiplicity.MANY);
  EClass projectRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference projectRelatedProject=schema.createEReference(projectRelated,""String_Node_Str"",project,Multiplicity.SINGLE);
  EClass checkoutRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference checkoutRelatedCheckout=schema.createEReference(checkoutRelated,""String_Node_Str"",checkoutClass,Multiplicity.SINGLE);
  EClass revisionRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference revisionRelatedRevision=schema.createEReference(revisionRelated,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  EClass userRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference userRelatedUser=schema.createEReference(userRelated,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass newProjectAddedClass=schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEReference(newProjectAddedClass,""String_Node_Str"",project,Multiplicity.SINGLE);
  EClass revisionBrancedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(revisionBrancedClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  schema.createEReference(revisionBrancedClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  EClass newRevisionAdded=schema.createEClass(logPackage,""String_Node_Str"",revisionRelated);
  schema.createEReference(newRevisionAdded,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",checkoutRelated);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EClass userAddedToProject=schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEReference(userAddedToProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EClass userRemovedFromProject=schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEReference(userRemovedFromProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass databaseCreatedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEAttribute(databaseCreatedClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseCreatedClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",revisionRelated);
  EClass geoTagUpdatedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(geoTagUpdatedClass,""String_Node_Str"",geoTagClass,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass pluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEBooleanObject(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serializerPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EClass objectIDMPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference serializerObjectIDMReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.SINGLE);
  EReference serializerSettingsReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference objectIDMSerializers=schema.createEReference(objectIDMPluginConfiguration,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference objectIDMSettingsReference=schema.createEReference(objectIDMPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsSerializersReference=schema.createEReference(userSettings,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference settingsObjectIDMReference=schema.createEReference(userSettings,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.MANY);
  serializerSettingsReference.setEOpposite(settingsSerializersReference);
  objectIDMSettingsReference.setEOpposite(settingsObjectIDMReference);
  settingsSerializersReference.setEOpposite(serializerSettingsReference);
  settingsObjectIDMReference.setEOpposite(objectIDMSettingsReference);
  objectIDMSerializers.setEOpposite(serializerObjectIDMReference);
  serializerObjectIDMReference.setEOpposite(objectIDMSerializers);
  schema.createEAttribute(serverSettings,""String_Node_Str"",EcorePackage.eINSTANCE.getEBooleanObject(),Multiplicity.SINGLE);
  EClass renderEnginePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference renderEngineSerializersReference=schema.createEReference(renderEnginePluginConfiguration,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference serializerRenderEngineReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.SINGLE);
  serializerRenderEngineReference.setEOpposite(renderEngineSerializersReference);
  renderEngineSerializersReference.setEOpposite(serializerRenderEngineReference);
  EReference renderEngineSettings=schema.createEReference(renderEnginePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsRenderEngines=schema.createEReference(userSettings,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.MANY);
  settingsRenderEngines.setEOpposite(renderEngineSettings);
  renderEngineSettings.setEOpposite(settingsRenderEngines);
  EClass deserializerPluginClass=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference deserializerSettingsReference=schema.createEReference(deserializerPluginClass,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsDeserializersReference=schema.createEReference(userSettings,""String_Node_Str"",deserializerPluginClass,Multiplicity.MANY);
  deserializerSettingsReference.setEOpposite(settingsDeserializersReference);
  settingsDeserializersReference.setEOpposite(deserializerSettingsReference);
  EDataType dataHandler=schema.createEDataType(storePackage,EcoreFactory.eINSTANCE.createEDataType());
  dataHandler.setName(""String_Node_Str"");
  dataHandler.setInstanceClass(DataHandler.class);
  EClass downloadResultClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",dataHandler,Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",downloadResultClass);
  EClass dataValue=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(dataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass dataObjectClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(dataObjectClass,""String_Node_Str"",dataValue,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass userSessionClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(userSessionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  EClass migrationClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEBooleanObject(),Multiplicity.SINGLE);
  EClass referenceDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEAttribute(referenceDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(referenceDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass listDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEReference(listDataValue,""String_Node_Str"",dataValue,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  ;
  EClass simpleDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEAttribute(simpleDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass databaseInformationItem=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationItem,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationItem,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass databaseInformationCategoryClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationCategoryClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(databaseInformationCategoryClass,""String_Node_Str"",databaseInformationItem,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass databaseInformationClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getELongObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEReference(databaseInformationClass,""String_Node_Str"",databaseInformationCategoryClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass pluginDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEBooleanObject(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EReference pluginConfigurationPluginDescriptor=schema.createEReference(pluginConfiguration,""String_Node_Str"",pluginDescriptor,Multiplicity.SINGLE);
  EReference pluginDescriptorPluginConfiguration=schema.createEReference(pluginDescriptor,""String_Node_Str"",pluginConfiguration,Multiplicity.MANY);
  pluginDescriptorPluginConfiguration.setEOpposite(pluginConfigurationPluginDescriptor);
  pluginConfigurationPluginDescriptor.setEOpposite(pluginDescriptorPluginConfiguration);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass revisionSummaryTypeClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(revisionSummaryTypeClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(revisionSummaryTypeClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  EClass revisionSummaryContainerClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(revisionSummaryContainerClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(revisionSummaryContainerClass,""String_Node_Str"",revisionSummaryTypeClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass revisionSummaryClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(revisionSummaryClass,""String_Node_Str"",revisionSummaryContainerClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",revisionSummaryClass,Multiplicity.SINGLE);
  EClass longActionClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(longActionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass objectIDMPluginDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(objectIDMPluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EEnum compareTypeEnum=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  EClass compareItemClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(compareItemClass,""String_Node_Str"",dataObjectClass,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  EClass objectModified=schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass compareContainerClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(compareContainerClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(compareContainerClass,""String_Node_Str"",compareItemClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass compareResultClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(compareResultClass,""String_Node_Str"",compareContainerClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EEnum actionStateEnum=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  EClass longActionStateClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",actionStateEnum,Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  EEnum serverState=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  EClass serverInfoClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(serverInfoClass,""String_Node_Str"",serverState,Multiplicity.SINGLE);
  schema.createEAttribute(serverInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass versionInfoClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EEnum extendedDataSchemaType=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  EClass file=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEByteArray(),Multiplicity.SINGLE);
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass extendedDataSchema=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(extendedDataSchema,""String_Node_Str"",file,Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",extendedDataSchemaType,Multiplicity.SINGLE);
  EClass extendedDataClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(extendedDataClass,""String_Node_Str"",file,Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate(),Multiplicity.SINGLE);
  EReference userToExtendedDataSchema=schema.createEReference(user,""String_Node_Str"",extendedDataSchema,Multiplicity.MANY);
  EReference extendedDataSchemaToUser=schema.createEReference(extendedDataSchema,""String_Node_Str"",user,Multiplicity.MANY);
  userToExtendedDataSchema.setEOpposite(extendedDataSchemaToUser);
  extendedDataSchemaToUser.setEOpposite(userToExtendedDataSchema);
  EReference extendedDataToUser=schema.createEReference(extendedDataClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  EReference userToExtendedData=schema.createEReference(user,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  extendedDataToUser.setEOpposite(userToExtendedData);
  userToExtendedData.setEOpposite(extendedDataToUser);
  EReference extendedDataToExtendedDataSchema=schema.createEReference(extendedDataClass,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  EReference extendedDataSchemaToExtendedData=schema.createEReference(extendedDataSchema,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  extendedDataToExtendedDataSchema.setEOpposite(extendedDataSchemaToExtendedData);
  extendedDataSchemaToExtendedData.setEOpposite(extendedDataToExtendedDataSchema);
  EReference revisionExtendedData=schema.createEReference(revisionClass,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  EReference extendedDataRevision=schema.createEReference(extendedDataClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  revisionExtendedData.setEOpposite(extendedDataRevision);
  extendedDataRevision.setEOpposite(revisionExtendedData);
  EReference projectExtendedData=schema.createEReference(project,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  EReference extendedDataProject=schema.createEReference(extendedDataClass,""String_Node_Str"",project,Multiplicity.SINGLE);
  projectExtendedData.setEOpposite(extendedDataProject);
  extendedDataProject.setEOpposite(projectExtendedData);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass queryEnginePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference queryEngineSettingsReference=schema.createEReference(queryEnginePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsQueryEnginesReference=schema.createEReference(userSettings,""String_Node_Str"",queryEnginePluginConfiguration,Multiplicity.MANY);
  queryEngineSettingsReference.setEOpposite(settingsQueryEnginesReference);
  settingsQueryEnginesReference.setEOpposite(queryEngineSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass webModulePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference webModulePluginSettingsReference=schema.createEReference(webModulePluginConfiguration,""String_Node_Str"",serverSettings,Multiplicity.SINGLE);
  EReference settingsWebReference=schema.createEReference(serverSettings,""String_Node_Str"",webModulePluginConfiguration,Multiplicity.MANY);
  webModulePluginSettingsReference.setEOpposite(settingsWebReference);
  settingsWebReference.setEOpposite(webModulePluginSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass modelMergerPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference modelMergerSettingsReference=schema.createEReference(modelMergerPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsModelMergersReference=schema.createEReference(userSettings,""String_Node_Str"",modelMergerPluginConfiguration,Multiplicity.MANY);
  modelMergerSettingsReference.setEOpposite(settingsModelMergersReference);
  settingsModelMergersReference.setEOpposite(modelMergerSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass modelComparePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference modelCompareSettingsReference=schema.createEReference(modelComparePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsModelComparesReference=schema.createEReference(userSettings,""String_Node_Str"",modelComparePluginConfiguration,Multiplicity.MANY);
  modelCompareSettingsReference.setEOpposite(settingsModelComparesReference);
  settingsModelComparesReference.setEOpposite(modelCompareSettingsReference);
  schema.createEReference(userSettings,""String_Node_Str"",modelMergerPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",modelComparePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",queryEnginePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(serverSettings,""String_Node_Str"",webModulePluginConfiguration,Multiplicity.SINGLE);
  EEnum trigger=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  EClass profileDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  profileDescriptor.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serviceDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  serviceDescriptor.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",trigger,Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass service=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",trigger,Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  EReference serviceProject=schema.createEReference(service,""String_Node_Str"",project,Multiplicity.SINGLE);
  EReference projectServices=schema.createEReference(project,""String_Node_Str"",service,Multiplicity.MANY);
  serviceProject.setEOpposite(projectServices);
  projectServices.setEOpposite(serviceProject);
  EReference serviceUser=schema.createEReference(service,""String_Node_Str"",user,Multiplicity.SINGLE);
  EReference userServices=schema.createEReference(user,""String_Node_Str"",service,Multiplicity.MANY);
  serviceUser.setEOpposite(userServices);
  userServices.setEOpposite(serviceUser);
  schema.createEAttribute(serverSettings,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass tokenClass=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(tokenClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(tokenClass,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass internalServicePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  schema.createEAttribute(internalServicePluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",internalServicePluginConfiguration,Multiplicity.SINGLE);
  EReference serviceSettingsReference=schema.createEReference(internalServicePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsServicesReference=schema.createEReference(userSettings,""String_Node_Str"",internalServicePluginConfiguration,Multiplicity.MANY);
  serviceSettingsReference.setEOpposite(settingsServicesReference);
  settingsServicesReference.setEOpposite(serviceSettingsReference);
  EClass serviceInterface=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceInterface.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serviceMethod=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceMethod.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EEnum serviceSimpleType=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  EClass serviceField=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceField.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass serviceType=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(serviceField,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceField,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(serviceField,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(serviceField,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceType,""String_Node_Str"",serviceField,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(serviceType,""String_Node_Str"",serviceSimpleType,Multiplicity.SINGLE).getEAnnotations();
  EClass serviceParameter=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceParameter.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceParameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceParameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceParameter,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(serviceParameter,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass extendedDataAddedToRevision=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(extendedDataAddedToRevision,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  schema.createEReference(extendedDataAddedToRevision,""String_Node_Str"",extendedDataClass,Multiplicity.SINGLE);
  EClass extendedDataAddedToProject=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(extendedDataAddedToProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEReference(extendedDataAddedToProject,""String_Node_Str"",extendedDataClass,Multiplicity.SINGLE);
  EEnum primitiveEnum=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  EClass typeDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  typeDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass objectDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  objectDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass primitiveDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  primitiveDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass arrayDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  arrayDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass parameterDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  parameterDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(parameterDefinition,""String_Node_Str"",typeDefinition,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(objectDefinition,""String_Node_Str"",parameterDefinition,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(primitiveDefinition,""String_Node_Str"",primitiveEnum,Multiplicity.SINGLE);
  schema.createEReference(arrayDefinition,""String_Node_Str"",typeDefinition,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass type=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  EClass objectType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass primitiveType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass longType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass byteArrayType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass doubleType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass stringType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass booleanType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass arrayType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass parameter=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(objectType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(objectType,""String_Node_Str"",parameter,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(parameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(parameter,""String_Node_Str"",type,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(parameterDefinition,""String_Node_Str"",type,Multiplicity.SINGLE);
  schema.createEReference(arrayType,""String_Node_Str"",type,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(longType,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(doubleType,""String_Node_Str"",EcorePackage.eINSTANCE.getEDouble(),Multiplicity.SINGLE);
  schema.createEAttribute(byteArrayType,""String_Node_Str"",EcorePackage.eINSTANCE.getEByteArray(),Multiplicity.SINGLE);
  schema.createEAttribute(stringType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(booleanType,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(pluginConfiguration,""String_Node_Str"",objectType,Multiplicity.SINGLE);
  EEnum notificationResultEnum=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  EClass immediateNotificationResult=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(immediateNotificationResult,""String_Node_Str"",notificationResultEnum,Multiplicity.SINGLE);
  schema.createEAttribute(immediateNotificationResult,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass remoteServiceCalled=schema.createEClass(""String_Node_Str"",""String_Node_Str"",logAction);
  schema.createEReference(remoteServiceCalled,""String_Node_Str"",service,Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",notificationResultEnum,Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  EReference projectLogs=schema.createEReference(project,""String_Node_Str"",projectRelated,Multiplicity.MANY);
  EReference revisionLogs=schema.createEReference(revisionClass,""String_Node_Str"",revisionRelated,Multiplicity.MANY);
  EReference userLogs=schema.createEReference(user,""String_Node_Str"",userRelated,Multiplicity.MANY);
  EReference checkoutLogs=schema.createEReference(checkoutClass,""String_Node_Str"",checkoutRelated,Multiplicity.MANY);
  projectRelatedProject.setEOpposite(projectLogs);
  projectLogs.setEOpposite(projectRelatedProject);
  revisionRelatedRevision.setEOpposite(revisionLogs);
  revisionLogs.setEOpposite(revisionRelatedRevision);
  userRelatedUser.setEOpposite(userLogs);
  userLogs.setEOpposite(userRelatedUser);
  checkoutRelatedCheckout.setEOpposite(checkoutLogs);
  checkoutLogs.setEOpposite(checkoutRelatedCheckout);
  EClass remoteServiceUpdate=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  EClass percentageChange=schema.createEClass(""String_Node_Str"",""String_Node_Str"",remoteServiceUpdate);
  schema.createEAttribute(percentageChange,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  EClass systemInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  EClass javaInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  EClass bimserverInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  EEnum progressTopicType=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEReference(revisionClass,""String_Node_Str"",service,Multiplicity.SINGLE);
  EClass projectSmall=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(projectSmall,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(projectSmall,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  EClass ifcHeader=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",ifcHeader,Multiplicity.SINGLE);
}","@Override public void migrate(Schema schema){
  this.schema=schema;
  storePackage=schema.createEPackage(""String_Node_Str"");
  createUserTypeEnum();
  createSIPrefixEnum();
  createObjectStateEnum();
  project=schema.createEClass(storePackage,""String_Node_Str"");
  user=schema.createEClass(storePackage,""String_Node_Str"");
  revisionClass=schema.createEClass(storePackage,""String_Node_Str"");
  concreteRevisionClass=schema.createEClass(storePackage,""String_Node_Str"");
  geoTagClass=schema.createEClass(storePackage,""String_Node_Str"");
  checkoutClass=schema.createEClass(storePackage,""String_Node_Str"");
  serverSettings=schema.createEClass(storePackage,""String_Node_Str"");
  userSettings=schema.createEClass(storePackage,""String_Node_Str"");
  createProjectClass();
  createUserClass();
  createCheckoutClass();
  createGeoTagClass();
  createConcreteRevisionClass();
  createRevisionClass();
  createServerSettingsClass();
  userHasRightsOn.setEOpposite(projectHasAuthorizedUsers);
  projectHasAuthorizedUsers.setEOpposite(userHasRightsOn);
  revisionProject.setEOpposite(projectRevisions);
  projectRevisions.setEOpposite(revisionProject);
  checkoutProject.setEOpposite(projectCheckouts);
  projectCheckouts.setEOpposite(checkoutProject);
  checkoutRevision.setEOpposite(revisionCheckouts);
  revisionCheckouts.setEOpposite(checkoutRevision);
  revisionUser.setEOpposite(userRevisions);
  userRevisions.setEOpposite(revisionUser);
  revisionConcreteRevisions.setEOpposite(concreteRevisionRevisions);
  concreteRevisionRevisions.setEOpposite(revisionConcreteRevisions);
  concreteRevisionProject.setEOpposite(projectConcreteRevisions);
  projectConcreteRevisions.setEOpposite(concreteRevisionProject);
  projectGeoTag.setEOpposite(geoTagProjects);
  geoTagProjects.setEOpposite(projectGeoTag);
  projectParentProject.setEOpposite(projectSubProjects);
  projectSubProjects.setEOpposite(projectParentProject);
  EPackage logPackage=schema.createEPackage(""String_Node_Str"");
  EEnum accessMethodEnum=schema.createEEnum(logPackage,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  EClass logAction=schema.createEClass(logPackage,""String_Node_Str"");
  schema.createEAttribute(logAction,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate(),Multiplicity.SINGLE);
  schema.createEReference(logAction,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(logAction,""String_Node_Str"",accessMethodEnum,Multiplicity.SINGLE);
  EClass serverLogClass=schema.createEClass(logPackage,""String_Node_Str"");
  schema.createEReference(serverLogClass,""String_Node_Str"",logAction,Multiplicity.MANY);
  EClass projectRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference projectRelatedProject=schema.createEReference(projectRelated,""String_Node_Str"",project,Multiplicity.SINGLE);
  EClass checkoutRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference checkoutRelatedCheckout=schema.createEReference(checkoutRelated,""String_Node_Str"",checkoutClass,Multiplicity.SINGLE);
  EClass revisionRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference revisionRelatedRevision=schema.createEReference(revisionRelated,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  EClass userRelated=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EReference userRelatedUser=schema.createEReference(userRelated,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass newProjectAddedClass=schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEReference(newProjectAddedClass,""String_Node_Str"",project,Multiplicity.SINGLE);
  EClass revisionBrancedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(revisionBrancedClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  schema.createEReference(revisionBrancedClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  EClass newRevisionAdded=schema.createEClass(logPackage,""String_Node_Str"",revisionRelated);
  schema.createEReference(newRevisionAdded,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",checkoutRelated);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EClass userAddedToProject=schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEReference(userAddedToProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  EClass userRemovedFromProject=schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEReference(userRemovedFromProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass databaseCreatedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEAttribute(databaseCreatedClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseCreatedClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",projectRelated);
  schema.createEClass(logPackage,""String_Node_Str"",revisionRelated);
  EClass geoTagUpdatedClass=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(geoTagUpdatedClass,""String_Node_Str"",geoTagClass,Multiplicity.SINGLE);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  schema.createEClass(logPackage,""String_Node_Str"",userRelated);
  EClass pluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEBooleanObject(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serializerPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EClass objectIDMPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference serializerObjectIDMReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.SINGLE);
  EReference serializerSettingsReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference objectIDMSerializers=schema.createEReference(objectIDMPluginConfiguration,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference objectIDMSettingsReference=schema.createEReference(objectIDMPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsSerializersReference=schema.createEReference(userSettings,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference settingsObjectIDMReference=schema.createEReference(userSettings,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.MANY);
  serializerSettingsReference.setEOpposite(settingsSerializersReference);
  objectIDMSettingsReference.setEOpposite(settingsObjectIDMReference);
  settingsSerializersReference.setEOpposite(serializerSettingsReference);
  settingsObjectIDMReference.setEOpposite(objectIDMSettingsReference);
  objectIDMSerializers.setEOpposite(serializerObjectIDMReference);
  serializerObjectIDMReference.setEOpposite(objectIDMSerializers);
  schema.createEAttribute(serverSettings,""String_Node_Str"",EcorePackage.eINSTANCE.getEBooleanObject(),Multiplicity.SINGLE);
  EClass renderEnginePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference renderEngineSerializersReference=schema.createEReference(renderEnginePluginConfiguration,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.MANY);
  EReference serializerRenderEngineReference=schema.createEReference(serializerPluginConfiguration,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.SINGLE);
  serializerRenderEngineReference.setEOpposite(renderEngineSerializersReference);
  renderEngineSerializersReference.setEOpposite(serializerRenderEngineReference);
  EReference renderEngineSettings=schema.createEReference(renderEnginePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsRenderEngines=schema.createEReference(userSettings,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.MANY);
  settingsRenderEngines.setEOpposite(renderEngineSettings);
  renderEngineSettings.setEOpposite(settingsRenderEngines);
  EClass deserializerPluginClass=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference deserializerSettingsReference=schema.createEReference(deserializerPluginClass,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsDeserializersReference=schema.createEReference(userSettings,""String_Node_Str"",deserializerPluginClass,Multiplicity.MANY);
  deserializerSettingsReference.setEOpposite(settingsDeserializersReference);
  settingsDeserializersReference.setEOpposite(deserializerSettingsReference);
  EDataType dataHandler=schema.createEDataType(storePackage,EcoreFactory.eINSTANCE.createEDataType());
  dataHandler.setName(""String_Node_Str"");
  dataHandler.setInstanceClass(DataHandler.class);
  EClass downloadResultClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(downloadResultClass,""String_Node_Str"",dataHandler,Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",downloadResultClass);
  EClass dataValue=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(dataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass dataObjectClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(dataObjectClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(dataObjectClass,""String_Node_Str"",dataValue,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass userSessionClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(userSessionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(userSessionClass,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  EClass migrationClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(migrationClass,""String_Node_Str"",ecorePackage.getEBooleanObject(),Multiplicity.SINGLE);
  EClass referenceDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEAttribute(referenceDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(referenceDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass listDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEReference(listDataValue,""String_Node_Str"",dataValue,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass simpleDataValue=schema.createEClass(storePackage,""String_Node_Str"",dataValue);
  schema.createEAttribute(simpleDataValue,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass databaseInformationItem=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationItem,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationItem,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass databaseInformationCategoryClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationCategoryClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(databaseInformationCategoryClass,""String_Node_Str"",databaseInformationItem,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass databaseInformationClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getELongObject(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(databaseInformationClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEReference(databaseInformationClass,""String_Node_Str"",databaseInformationCategoryClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass pluginDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEBooleanObject(),Multiplicity.SINGLE);
  schema.createEAttribute(pluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EReference pluginConfigurationPluginDescriptor=schema.createEReference(pluginConfiguration,""String_Node_Str"",pluginDescriptor,Multiplicity.SINGLE);
  EReference pluginDescriptorPluginConfiguration=schema.createEReference(pluginDescriptor,""String_Node_Str"",pluginConfiguration,Multiplicity.MANY);
  pluginDescriptorPluginConfiguration.setEOpposite(pluginConfigurationPluginDescriptor);
  pluginConfigurationPluginDescriptor.setEOpposite(pluginDescriptorPluginConfiguration);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass revisionSummaryTypeClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(revisionSummaryTypeClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(revisionSummaryTypeClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  EClass revisionSummaryContainerClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(revisionSummaryContainerClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(revisionSummaryContainerClass,""String_Node_Str"",revisionSummaryTypeClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass revisionSummaryClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(revisionSummaryClass,""String_Node_Str"",revisionSummaryContainerClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",revisionSummaryClass,Multiplicity.SINGLE);
  EClass longActionClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(longActionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass objectIDMPluginDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(objectIDMPluginDescriptor,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EEnum compareTypeEnum=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  schema.createEEnumLiteral(compareTypeEnum,""String_Node_Str"");
  EClass compareItemClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(compareItemClass,""String_Node_Str"",dataObjectClass,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  EClass objectModified=schema.createEClass(storePackage,""String_Node_Str"",compareItemClass);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(objectModified,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass compareContainerClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(compareContainerClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(compareContainerClass,""String_Node_Str"",compareItemClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass compareResultClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEReference(compareResultClass,""String_Node_Str"",compareContainerClass,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EEnum actionStateEnum=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  schema.createEEnumLiteral(actionStateEnum,""String_Node_Str"");
  EClass longActionStateClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",actionStateEnum,Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(longActionStateClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEEnumLiteral(accessMethodEnum,""String_Node_Str"");
  EEnum serverState=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  schema.createEEnumLiteral(serverState,""String_Node_Str"");
  EClass serverInfoClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(serverInfoClass,""String_Node_Str"",serverState,Multiplicity.SINGLE);
  schema.createEAttribute(serverInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  EClass versionInfoClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEIntegerObject(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEDate(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(versionInfoClass,""String_Node_Str"",ecorePackage.getEString(),Multiplicity.SINGLE);
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EEnum extendedDataSchemaType=schema.createEEnum(storePackage,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  schema.createEEnumLiteral(extendedDataSchemaType,""String_Node_Str"");
  EClass file=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEByteArray(),Multiplicity.SINGLE);
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(file,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass extendedDataSchema=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(extendedDataSchema,""String_Node_Str"",file,Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataSchema,""String_Node_Str"",extendedDataSchemaType,Multiplicity.SINGLE);
  EClass extendedDataClass=schema.createEClass(storePackage,""String_Node_Str"");
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(extendedDataClass,""String_Node_Str"",file,Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(extendedDataClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate(),Multiplicity.SINGLE);
  EReference userToExtendedDataSchema=schema.createEReference(user,""String_Node_Str"",extendedDataSchema,Multiplicity.MANY);
  EReference extendedDataSchemaToUser=schema.createEReference(extendedDataSchema,""String_Node_Str"",user,Multiplicity.MANY);
  userToExtendedDataSchema.setEOpposite(extendedDataSchemaToUser);
  extendedDataSchemaToUser.setEOpposite(userToExtendedDataSchema);
  EReference extendedDataToUser=schema.createEReference(extendedDataClass,""String_Node_Str"",user,Multiplicity.SINGLE);
  EReference userToExtendedData=schema.createEReference(user,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  extendedDataToUser.setEOpposite(userToExtendedData);
  userToExtendedData.setEOpposite(extendedDataToUser);
  EReference extendedDataToExtendedDataSchema=schema.createEReference(extendedDataClass,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  EReference extendedDataSchemaToExtendedData=schema.createEReference(extendedDataSchema,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  extendedDataToExtendedDataSchema.setEOpposite(extendedDataSchemaToExtendedData);
  extendedDataSchemaToExtendedData.setEOpposite(extendedDataToExtendedDataSchema);
  EReference revisionExtendedData=schema.createEReference(revisionClass,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  EReference extendedDataRevision=schema.createEReference(extendedDataClass,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  revisionExtendedData.setEOpposite(extendedDataRevision);
  extendedDataRevision.setEOpposite(revisionExtendedData);
  EReference projectExtendedData=schema.createEReference(project,""String_Node_Str"",extendedDataClass,Multiplicity.MANY);
  EReference extendedDataProject=schema.createEReference(extendedDataClass,""String_Node_Str"",project,Multiplicity.SINGLE);
  projectExtendedData.setEOpposite(extendedDataProject);
  extendedDataProject.setEOpposite(projectExtendedData);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass queryEnginePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference queryEngineSettingsReference=schema.createEReference(queryEnginePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsQueryEnginesReference=schema.createEReference(userSettings,""String_Node_Str"",queryEnginePluginConfiguration,Multiplicity.MANY);
  queryEngineSettingsReference.setEOpposite(settingsQueryEnginesReference);
  settingsQueryEnginesReference.setEOpposite(queryEngineSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass webModulePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference webModulePluginSettingsReference=schema.createEReference(webModulePluginConfiguration,""String_Node_Str"",serverSettings,Multiplicity.SINGLE);
  EReference settingsWebReference=schema.createEReference(serverSettings,""String_Node_Str"",webModulePluginConfiguration,Multiplicity.MANY);
  webModulePluginSettingsReference.setEOpposite(settingsWebReference);
  settingsWebReference.setEOpposite(webModulePluginSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass modelMergerPluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference modelMergerSettingsReference=schema.createEReference(modelMergerPluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsModelMergersReference=schema.createEReference(userSettings,""String_Node_Str"",modelMergerPluginConfiguration,Multiplicity.MANY);
  modelMergerSettingsReference.setEOpposite(settingsModelMergersReference);
  settingsModelMergersReference.setEOpposite(modelMergerSettingsReference);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass modelComparePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  EReference modelCompareSettingsReference=schema.createEReference(modelComparePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsModelComparesReference=schema.createEReference(userSettings,""String_Node_Str"",modelComparePluginConfiguration,Multiplicity.MANY);
  modelCompareSettingsReference.setEOpposite(settingsModelComparesReference);
  settingsModelComparesReference.setEOpposite(modelCompareSettingsReference);
  schema.createEReference(userSettings,""String_Node_Str"",modelMergerPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",modelComparePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",queryEnginePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",renderEnginePluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",serializerPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(userSettings,""String_Node_Str"",objectIDMPluginConfiguration,Multiplicity.SINGLE);
  schema.createEReference(serverSettings,""String_Node_Str"",webModulePluginConfiguration,Multiplicity.SINGLE);
  EEnum trigger=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  schema.createEEnumLiteral(trigger,""String_Node_Str"");
  EClass profileDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  profileDescriptor.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(profileDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serviceDescriptor=schema.createEClass(storePackage,""String_Node_Str"");
  serviceDescriptor.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",trigger,Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceDescriptor,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass service=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",schema.getEEnum(""String_Node_Str"",""String_Node_Str""),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",trigger,Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",extendedDataSchema,Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(service,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  EReference serviceProject=schema.createEReference(service,""String_Node_Str"",project,Multiplicity.SINGLE);
  EReference projectServices=schema.createEReference(project,""String_Node_Str"",service,Multiplicity.MANY);
  serviceProject.setEOpposite(projectServices);
  projectServices.setEOpposite(serviceProject);
  EReference serviceUser=schema.createEReference(service,""String_Node_Str"",user,Multiplicity.SINGLE);
  EReference userServices=schema.createEReference(user,""String_Node_Str"",service,Multiplicity.MANY);
  serviceUser.setEOpposite(userServices);
  userServices.setEOpposite(serviceUser);
  schema.createEAttribute(serverSettings,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass tokenClass=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(tokenClass,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(tokenClass,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEClass(storePackage,""String_Node_Str"",pluginDescriptor);
  EClass internalServicePluginConfiguration=schema.createEClass(storePackage,""String_Node_Str"",pluginConfiguration);
  schema.createEAttribute(internalServicePluginConfiguration,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(service,""String_Node_Str"",internalServicePluginConfiguration,Multiplicity.SINGLE);
  EReference serviceSettingsReference=schema.createEReference(internalServicePluginConfiguration,""String_Node_Str"",userSettings,Multiplicity.SINGLE);
  EReference settingsServicesReference=schema.createEReference(userSettings,""String_Node_Str"",internalServicePluginConfiguration,Multiplicity.MANY);
  serviceSettingsReference.setEOpposite(settingsServicesReference);
  settingsServicesReference.setEOpposite(serviceSettingsReference);
  EClass serviceInterface=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceInterface.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceInterface,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass serviceMethod=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceMethod.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceMethod,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EEnum serviceSimpleType=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  schema.createEEnumLiteral(serviceSimpleType,""String_Node_Str"");
  EClass serviceField=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceField.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass serviceType=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(serviceField,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceField,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(serviceField,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(serviceField,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceType,""String_Node_Str"",serviceField,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(serviceType,""String_Node_Str"",serviceSimpleType,Multiplicity.SINGLE).getEAnnotations();
  EClass serviceParameter=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  serviceParameter.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(serviceParameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(serviceParameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(serviceParameter,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(serviceParameter,""String_Node_Str"",serviceType,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass extendedDataAddedToRevision=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(extendedDataAddedToRevision,""String_Node_Str"",revisionClass,Multiplicity.SINGLE);
  schema.createEReference(extendedDataAddedToRevision,""String_Node_Str"",extendedDataClass,Multiplicity.SINGLE);
  EClass extendedDataAddedToProject=schema.createEClass(logPackage,""String_Node_Str"",logAction);
  schema.createEReference(extendedDataAddedToProject,""String_Node_Str"",project,Multiplicity.SINGLE);
  schema.createEReference(extendedDataAddedToProject,""String_Node_Str"",extendedDataClass,Multiplicity.SINGLE);
  EEnum primitiveEnum=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  schema.createEEnumLiteral(primitiveEnum,""String_Node_Str"");
  EClass typeDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  typeDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass objectDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  objectDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass primitiveDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  primitiveDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass arrayDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"",typeDefinition);
  arrayDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  EClass parameterDefinition=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  parameterDefinition.getEAnnotations().add(createNoDatabaseAnnotation());
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEAttribute(parameterDefinition,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(parameterDefinition,""String_Node_Str"",typeDefinition,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(objectDefinition,""String_Node_Str"",parameterDefinition,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(primitiveDefinition,""String_Node_Str"",primitiveEnum,Multiplicity.SINGLE);
  schema.createEReference(arrayDefinition,""String_Node_Str"",typeDefinition,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  EClass type=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  EClass objectType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass primitiveType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass longType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass byteArrayType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass doubleType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass stringType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass booleanType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",primitiveType);
  EClass arrayType=schema.createEClass(""String_Node_Str"",""String_Node_Str"",type);
  EClass parameter=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(objectType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(objectType,""String_Node_Str"",parameter,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(parameter,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEReference(parameter,""String_Node_Str"",type,Multiplicity.SINGLE).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEReference(parameterDefinition,""String_Node_Str"",type,Multiplicity.SINGLE);
  schema.createEReference(arrayType,""String_Node_Str"",type,Multiplicity.MANY).getEAnnotations().add(createEmbedsReferenceAnnotation());
  schema.createEAttribute(longType,""String_Node_Str"",EcorePackage.eINSTANCE.getELong(),Multiplicity.SINGLE);
  schema.createEAttribute(doubleType,""String_Node_Str"",EcorePackage.eINSTANCE.getEDouble(),Multiplicity.SINGLE);
  schema.createEAttribute(byteArrayType,""String_Node_Str"",EcorePackage.eINSTANCE.getEByteArray(),Multiplicity.SINGLE);
  schema.createEAttribute(stringType,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  schema.createEAttribute(booleanType,""String_Node_Str"",EcorePackage.eINSTANCE.getEBoolean(),Multiplicity.SINGLE);
  schema.createEReference(pluginConfiguration,""String_Node_Str"",objectType,Multiplicity.SINGLE);
  EEnum notificationResultEnum=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  schema.createEEnumLiteral(notificationResultEnum,""String_Node_Str"");
  EClass immediateNotificationResult=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(immediateNotificationResult,""String_Node_Str"",notificationResultEnum,Multiplicity.SINGLE);
  schema.createEAttribute(immediateNotificationResult,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.SINGLE);
  EClass remoteServiceCalled=schema.createEClass(""String_Node_Str"",""String_Node_Str"",logAction);
  schema.createEReference(remoteServiceCalled,""String_Node_Str"",service,Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",notificationResultEnum,Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(remoteServiceCalled,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  EReference projectLogs=schema.createEReference(project,""String_Node_Str"",projectRelated,Multiplicity.MANY);
  EReference revisionLogs=schema.createEReference(revisionClass,""String_Node_Str"",revisionRelated,Multiplicity.MANY);
  EReference userLogs=schema.createEReference(user,""String_Node_Str"",userRelated,Multiplicity.MANY);
  EReference checkoutLogs=schema.createEReference(checkoutClass,""String_Node_Str"",checkoutRelated,Multiplicity.MANY);
  projectRelatedProject.setEOpposite(projectLogs);
  projectLogs.setEOpposite(projectRelatedProject);
  revisionRelatedRevision.setEOpposite(revisionLogs);
  revisionLogs.setEOpposite(revisionRelatedRevision);
  userRelatedUser.setEOpposite(userLogs);
  userLogs.setEOpposite(userRelatedUser);
  checkoutRelatedCheckout.setEOpposite(checkoutLogs);
  checkoutLogs.setEOpposite(checkoutRelatedCheckout);
  EClass remoteServiceUpdate=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  EClass percentageChange=schema.createEClass(""String_Node_Str"",""String_Node_Str"",remoteServiceUpdate);
  schema.createEAttribute(percentageChange,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt(),Multiplicity.SINGLE);
  EClass systemInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(systemInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  EClass javaInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(javaInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  EClass bimserverInfo=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEInt());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(bimserverInfo,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  EEnum progressTopicType=schema.createEEnum(""String_Node_Str"",""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEEnumLiteral(progressTopicType,""String_Node_Str"");
  schema.createEReference(revisionClass,""String_Node_Str"",service,Multiplicity.SINGLE);
  EClass projectSmall=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(projectSmall,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(projectSmall,""String_Node_Str"",EcorePackage.eINSTANCE.getELong());
  EClass ifcHeader=schema.createEClass(""String_Node_Str"",""String_Node_Str"");
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEDate());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString(),Multiplicity.MANY);
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEAttribute(ifcHeader,""String_Node_Str"",EcorePackage.eINSTANCE.getEString());
  schema.createEReference(concreteRevisionClass,""String_Node_Str"",ifcHeader,Multiplicity.SINGLE);
}",0.999963911945146
160581,"public synchronized void start(final LongAction<?> longAction) throws CannotBeScheduledException {
  if (running) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        longAction.execute();
      }
    }
);
    longAction.init();
    thread.setDaemon(true);
    thread.setName(longAction.getDescription());
    actions.put(longAction.getProgressTopic().getKey().getId(),longAction);
    thread.start();
  }
 else {
    throw new CannotBeScheduledException();
  }
}","public synchronized void start(final LongAction<?> longAction) throws CannotBeScheduledException {
  if (running) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        longAction.execute();
      }
    }
,""String_Node_Str"");
    longAction.init();
    thread.setDaemon(true);
    thread.setName(longAction.getDescription());
    actions.put(longAction.getProgressTopic().getKey().getId(),longAction);
    thread.start();
  }
 else {
    throw new CannotBeScheduledException();
  }
}",0.9823182711198428
160582,"protected void executeAction(BimDatabaseAction<? extends IfcModelInterface> action,DownloadParameters downloadParameters,DatabaseSession session,boolean commit) throws BimserverDatabaseException, UserException, NoSerializerFoundException, ServerException {
  try {
    if (action == null) {
      checkoutResult=new SCheckoutResult();
      checkoutResult.setFile(new DataHandler(getBimServer().getDiskCacheManager().get(downloadParameters)));
    }
 else {
      Revision revision=session.get(StorePackage.eINSTANCE.getRevision(),downloadParameters.getRoid(),Query.getDefault());
      revision.getProject().getGeoTag().load();
      IfcModelInterface ifcModel=session.executeAndCommitAction(action);
      DatabaseSession newSession=getBimServer().getDatabase().createSession();
      RenderEnginePlugin renderEnginePlugin=null;
      try {
        SerializerPluginConfiguration serializerPluginConfiguration=newSession.get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),downloadParameters.getSerializerOid(),Query.getDefault());
        if (serializerPluginConfiguration != null) {
          RenderEnginePluginConfiguration renderEngine=serializerPluginConfiguration.getRenderEngine();
          if (renderEngine != null) {
            renderEnginePlugin=(RenderEnginePlugin)getBimServer().getPluginManager().getRenderEngine(renderEngine.getPluginDescriptor().getPluginClassName(),true);
          }
        }
      }
 catch (      BimserverDatabaseException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        newSession.close();
      }
      checkoutResult=convertModelToCheckoutResult(revision.getProject(),getUserName(),ifcModel,renderEnginePlugin,downloadParameters);
    }
  }
  finally {
    done();
  }
}","protected void executeAction(BimDatabaseAction<? extends IfcModelInterface> action,DownloadParameters downloadParameters,DatabaseSession session,boolean commit) throws BimserverDatabaseException, UserException, NoSerializerFoundException, ServerException {
  try {
    if (action == null) {
      checkoutResult=new SCheckoutResult();
      checkoutResult.setFile(new DataHandler(getBimServer().getDiskCacheManager().get(downloadParameters)));
    }
 else {
      Revision revision=session.get(StorePackage.eINSTANCE.getRevision(),downloadParameters.getRoid(),Query.getDefault());
      revision.getProject().getGeoTag().load();
      IfcModelInterface ifcModel=session.executeAndCommitAction(action);
      DatabaseSession newSession=getBimServer().getDatabase().createSession();
      RenderEnginePlugin renderEnginePlugin=null;
      try {
        SerializerPluginConfiguration serializerPluginConfiguration=newSession.get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),downloadParameters.getSerializerOid(),Query.getDefault());
        if (serializerPluginConfiguration != null) {
          RenderEnginePluginConfiguration renderEngine=serializerPluginConfiguration.getRenderEngine();
          if (renderEngine != null) {
            renderEnginePlugin=getBimServer().getPluginManager().getRenderEngine(renderEngine.getPluginDescriptor().getPluginClassName(),true);
          }
        }
      }
 catch (      BimserverDatabaseException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        newSession.close();
      }
      checkoutResult=convertModelToCheckoutResult(revision.getProject(),getUserName(),ifcModel,renderEnginePlugin,downloadParameters);
    }
  }
  finally {
    done();
  }
}",0.9942528735632185
160583,"@SuppressWarnings(""String_Node_Str"") public void cleanupUnmodified(){
  Iterator<Long> iterator=resultModel.keySet().iterator();
  while (iterator.hasNext()) {
    Long oid=iterator.next();
    IdEObject idEObject=resultModel.get(oid);
    IdEObject originalObject=(IdEObject)oldModel.get(oid);
    if (originalObject != null) {
      boolean objectChanged=false;
      for (      EAttribute eAttribute : idEObject.eClass().getEAllAttributes()) {
        Object value=idEObject.eGet(eAttribute);
        Object originalValue=originalObject.eGet(eAttribute);
        if (((value == null && originalValue != null) || (value != null && originalValue == null))) {
          objectChanged=true;
          continue;
        }
        if (!(value == null && originalValue == null) && !value.equals(originalValue)) {
          objectChanged=true;
          continue;
        }
      }
      if (!objectChanged) {
        for (        EReference eReference : idEObject.eClass().getEAllReferences()) {
          if (eReference.isMany()) {
            List list=(List)idEObject.eGet(eReference);
            List originalList=(List)originalObject.eGet(eReference);
            if (list.size() != originalList.size()) {
              objectChanged=true;
              continue;
            }
            for (int i=0; i < list.size(); i++) {
              IdEObject referencedObject=(IdEObject)list.get(i);
              IdEObject originalReferencedObject=(IdEObject)originalList.get(i);
              if ((referencedObject == null && originalReferencedObject != null) || (referencedObject != null && originalReferencedObject == null)) {
                objectChanged=true;
                continue;
              }
              if (!(referencedObject == null && originalReferencedObject == null) && referencedObject.getOid() != originalReferencedObject.getOid()) {
                objectChanged=true;
                continue;
              }
            }
          }
 else {
            IdEObject referencedObject=(IdEObject)idEObject.eGet(eReference);
            IdEObject originalReferencedObject=(IdEObject)originalObject.eGet(eReference);
            if ((referencedObject == null && originalReferencedObject != null) || (referencedObject != null && originalReferencedObject == null)) {
              objectChanged=true;
              continue;
            }
            if (!(referencedObject == null && originalReferencedObject == null) && referencedObject.getOid() != originalReferencedObject.getOid()) {
              objectChanged=true;
              continue;
            }
          }
        }
      }
      if (!objectChanged) {
        iterator.remove();
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void cleanupUnmodified(){
  Iterator<Long> iterator=resultModel.keySet().iterator();
  while (iterator.hasNext()) {
    Long oid=iterator.next();
    IdEObject idEObject=resultModel.get(oid);
    IdEObject originalObject=oldModel.get(oid);
    if (originalObject != null) {
      boolean objectChanged=false;
      for (      EAttribute eAttribute : idEObject.eClass().getEAllAttributes()) {
        Object value=idEObject.eGet(eAttribute);
        Object originalValue=originalObject.eGet(eAttribute);
        if (((value == null && originalValue != null) || (value != null && originalValue == null))) {
          objectChanged=true;
          continue;
        }
        if (!(value == null && originalValue == null) && !value.equals(originalValue)) {
          objectChanged=true;
          continue;
        }
      }
      if (!objectChanged) {
        for (        EReference eReference : idEObject.eClass().getEAllReferences()) {
          if (eReference.isMany()) {
            List list=(List)idEObject.eGet(eReference);
            List originalList=(List)originalObject.eGet(eReference);
            if (list.size() != originalList.size()) {
              objectChanged=true;
              continue;
            }
            for (int i=0; i < list.size(); i++) {
              IdEObject referencedObject=(IdEObject)list.get(i);
              IdEObject originalReferencedObject=(IdEObject)originalList.get(i);
              if ((referencedObject == null && originalReferencedObject != null) || (referencedObject != null && originalReferencedObject == null)) {
                objectChanged=true;
                continue;
              }
              if (!(referencedObject == null && originalReferencedObject == null) && referencedObject.getOid() != originalReferencedObject.getOid()) {
                objectChanged=true;
                continue;
              }
            }
          }
 else {
            IdEObject referencedObject=(IdEObject)idEObject.eGet(eReference);
            IdEObject originalReferencedObject=(IdEObject)originalObject.eGet(eReference);
            if ((referencedObject == null && originalReferencedObject != null) || (referencedObject != null && originalReferencedObject == null)) {
              objectChanged=true;
              continue;
            }
            if (!(referencedObject == null && originalReferencedObject == null) && referencedObject.getOid() != originalReferencedObject.getOid()) {
              objectChanged=true;
              continue;
            }
          }
        }
      }
      if (!objectChanged) {
        iterator.remove();
      }
    }
  }
}",0.9979443094748646
160584,"@Override public void newRevision(final Long poid,final Long roid,Long soid,String serviceIdentifier,String profileIdentifier,final String userToken,String token,String apiUrl) throws UserException, ServerException {
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      long profileId=Long.parseLong(profileIdentifier);
      EClass eClassForOid=session.getEClassForOid(profileId);
      InternalServicePluginConfiguration internalServicePluginConfiguration=null;
      if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
        internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
      }
 else       if (eClassForOid == StorePackage.eINSTANCE.getService()) {
        Service service=session.get(profileId,Query.getDefault());
        internalServicePluginConfiguration=service.getInternalService();
      }
      final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
      final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
      BimServerClientInterface bimServerClient=null;
      if (apiUrl == null) {
        bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
      }
 else {
        bimServerClient=new JsonBimServerClientFactory(apiUrl).create(new TokenAuthentication(token));
      }
      final BimServerClientInterface finalClient=bimServerClient;
      new Thread(){
        @Override public void run(){
          try {
            newRevisionHandler.newRevision(finalClient,poid,roid,userToken,finalInternalServicePluginConfiguration.getOid(),settings);
          }
 catch (          ServerException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          UserException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
.start();
    }
  finally {
      session.close();
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void newRevision(final Long poid,final Long roid,Long soid,String serviceIdentifier,String profileIdentifier,final String userToken,String token,String apiUrl) throws UserException, ServerException {
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      long profileId=Long.parseLong(profileIdentifier);
      EClass eClassForOid=session.getEClassForOid(profileId);
      InternalServicePluginConfiguration internalServicePluginConfiguration=null;
      if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
        internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
      }
 else       if (eClassForOid == StorePackage.eINSTANCE.getService()) {
        Service service=session.get(profileId,Query.getDefault());
        internalServicePluginConfiguration=service.getInternalService();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
      final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
      BimServerClientInterface bimServerClient=null;
      if (apiUrl == null) {
        bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
      }
 else {
        bimServerClient=new JsonBimServerClientFactory(apiUrl).create(new TokenAuthentication(token));
      }
      final BimServerClientInterface finalClient=bimServerClient;
      new Thread(){
        @Override public void run(){
          try {
            newRevisionHandler.newRevision(finalClient,poid,roid,userToken,finalInternalServicePluginConfiguration.getOid(),settings);
          }
 catch (          ServerException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          UserException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
.start();
    }
  finally {
      session.close();
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9864114832535884
160585,"@Override public void registerInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor,final NewRevisionHandler newRevisionHandler){
  register(serviceDescriptor,new Bimsie1RemoteServiceInterfaceAdaptor(){
    @Override public void newRevision(    final Long poid,    final Long roid,    Long soid,    String serviceIdentifier,    String profileIdentifier,    final String userToken,    String token,    String apiUrl) throws UserException, ServerException {
      ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
      serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
      final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
      try {
        internalChannel.connect(new SimpleTokenHolder());
      }
 catch (      ChannelConnectionException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      try {
        DatabaseSession session=bimServer.getDatabase().createSession();
        try {
          long profileId=Long.parseLong(profileIdentifier);
          EClass eClassForOid=session.getEClassForOid(profileId);
          InternalServicePluginConfiguration internalServicePluginConfiguration=null;
          if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
            internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
          }
 else           if (eClassForOid == StorePackage.eINSTANCE.getService()) {
            Service service=session.get(profileId,Query.getDefault());
            internalServicePluginConfiguration=service.getInternalService();
          }
          final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
          final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
          BimServerClientInterface bimServerClient=null;
          if (apiUrl == null) {
            bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
          }
 else {
            bimServerClient=new JsonBimServerClientFactory(apiUrl).create(new TokenAuthentication(token));
          }
          final BimServerClientInterface finalClient=bimServerClient;
          new Thread(){
            @Override public void run(){
              try {
                newRevisionHandler.newRevision(finalClient,poid,roid,userToken,finalInternalServicePluginConfiguration.getOid(),settings);
              }
 catch (              ServerException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
catch (              UserException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
            }
          }
.start();
        }
  finally {
          session.close();
        }
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void registerInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor,final NewRevisionHandler newRevisionHandler){
  register(serviceDescriptor,new Bimsie1RemoteServiceInterfaceAdaptor(){
    @Override public void newRevision(    final Long poid,    final Long roid,    Long soid,    String serviceIdentifier,    String profileIdentifier,    final String userToken,    String token,    String apiUrl) throws UserException, ServerException {
      ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
      serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
      final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
      try {
        internalChannel.connect(new SimpleTokenHolder());
      }
 catch (      ChannelConnectionException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      try {
        DatabaseSession session=bimServer.getDatabase().createSession();
        try {
          long profileId=Long.parseLong(profileIdentifier);
          EClass eClassForOid=session.getEClassForOid(profileId);
          InternalServicePluginConfiguration internalServicePluginConfiguration=null;
          if (eClassForOid == StorePackage.eINSTANCE.getInternalServicePluginConfiguration()) {
            internalServicePluginConfiguration=session.get(profileId,Query.getDefault());
          }
 else           if (eClassForOid == StorePackage.eINSTANCE.getService()) {
            Service service=session.get(profileId,Query.getDefault());
            internalServicePluginConfiguration=service.getInternalService();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
          final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
          final InternalServicePluginConfiguration finalInternalServicePluginConfiguration=internalServicePluginConfiguration;
          BimServerClientInterface bimServerClient=null;
          if (apiUrl == null) {
            bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
          }
 else {
            bimServerClient=new JsonBimServerClientFactory(apiUrl).create(new TokenAuthentication(token));
          }
          final BimServerClientInterface finalClient=bimServerClient;
          new Thread(){
            @Override public void run(){
              try {
                newRevisionHandler.newRevision(finalClient,poid,roid,userToken,finalInternalServicePluginConfiguration.getOid(),settings);
              }
 catch (              ServerException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
catch (              UserException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
            }
          }
.start();
        }
  finally {
          session.close();
        }
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9871815674184652
160586,"/** 
 * Create a new BIMserver
 * @param homeDir A directory where the user can store instance specific configuration files
 * @param resourceFetcher A resource fetcher
 */
public BimServer(BimServerConfig config){
  this.config=config;
  try {
    if (config.getHomeDir() != null) {
      initHomeDir();
    }
    fixLogging();
    UncaughtExceptionHandler uncaughtExceptionHandler=new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (e instanceof OutOfMemoryError) {
          serverInfoManager.setOutOfMemory();
          LOGGER.error(""String_Node_Str"",e);
        }
 else         if (e instanceof Error) {
          serverInfoManager.setErrorMessage(e.getMessage());
          LOGGER.error(""String_Node_Str"",e);
        }
 else {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
;
    Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
    LOGGER=LoggerFactory.getLogger(BimServer.class);
    LOGGER.info(""String_Node_Str"");
    if (config.getHomeDir() != null) {
      LOGGER.info(""String_Node_Str"" + config.getHomeDir().getAbsolutePath() + ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    servicesMap=InterfaceList.createSServicesMap();
    LOGGER.debug(""String_Node_Str"");
    jsonSocketReflectorFactory=new JsonSocketReflectorFactory(servicesMap);
    LOGGER.debug(""String_Node_Str"");
    serverInfoManager=new ServerInfoManager();
    LOGGER.debug(""String_Node_Str"");
    notificationsManager=new NotificationsManager(this,jsonSocketReflectorFactory);
    LOGGER.debug(""String_Node_Str"");
    internalServicesManager=new InternalServicesManager(this,notificationsManager.getSiteAddress());
    LOGGER.debug(""String_Node_Str"");
    serviceFactory=new PublicInterfaceFactory(this);
    LOGGER.debug(""String_Node_Str"");
    pluginManager=new PluginManager(new File(config.getHomeDir(),""String_Node_Str""),config.getClassPath(),serviceFactory,internalServicesManager,servicesMap);
    LOGGER.debug(""String_Node_Str"");
    versionChecker=new VersionChecker(config.getResourceFetcher());
    LOGGER.debug(""String_Node_Str"");
    compareCache=new CompareCache();
    LOGGER.debug(""String_Node_Str"");
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer=new EmbeddedWebServer(this,config.isLocalDev());
      LOGGER.debug(""String_Node_Str"");
    }
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (LOGGER == null) {
      e.printStackTrace();
    }
    LOGGER.error(""String_Node_Str"",e);
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}","/** 
 * Create a new BIMserver
 * @param homeDir A directory where the user can store instance specific configuration files
 * @param resourceFetcher A resource fetcher
 */
public BimServer(BimServerConfig config){
  this.config=config;
  try {
    if (config.getHomeDir() != null) {
      initHomeDir();
    }
    fixLogging();
    UncaughtExceptionHandler uncaughtExceptionHandler=new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (e instanceof OutOfMemoryError) {
          serverInfoManager.setOutOfMemory();
          LOGGER.error(""String_Node_Str"",e);
        }
 else         if (e instanceof Error) {
          serverInfoManager.setErrorMessage(e.getMessage());
          LOGGER.error(""String_Node_Str"",e);
        }
 else {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
;
    Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
    LOGGER=LoggerFactory.getLogger(BimServer.class);
    LOGGER.info(""String_Node_Str"");
    if (config.getHomeDir() != null) {
      LOGGER.info(""String_Node_Str"" + config.getHomeDir().getAbsolutePath() + ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    servicesMap=InterfaceList.createSServicesMap();
    LOGGER.debug(""String_Node_Str"");
    jsonSocketReflectorFactory=new JsonSocketReflectorFactory(servicesMap);
    LOGGER.debug(""String_Node_Str"");
    serverInfoManager=new ServerInfoManager();
    LOGGER.debug(""String_Node_Str"");
    notificationsManager=new NotificationsManager(this,jsonSocketReflectorFactory);
    LOGGER.debug(""String_Node_Str"");
    internalServicesManager=new InternalServicesManager(this,notificationsManager.getSiteAddress());
    LOGGER.debug(""String_Node_Str"");
    serviceFactory=new PublicInterfaceFactory(this);
    LOGGER.debug(""String_Node_Str"");
    pluginManager=new PluginManager(new File(config.getHomeDir(),""String_Node_Str""),config.getClassPath(),serviceFactory,internalServicesManager,servicesMap);
    LOGGER.debug(""String_Node_Str"");
    versionChecker=new VersionChecker(config.getResourceFetcher());
    LOGGER.debug(""String_Node_Str"");
    compareCache=new CompareCache();
    LOGGER.debug(""String_Node_Str"");
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer=new EmbeddedWebServer(this,config.isLocalDev());
      LOGGER.debug(""String_Node_Str"");
    }
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (LOGGER == null) {
      e.printStackTrace();
    }
 else {
      LOGGER.error(""String_Node_Str"",e);
    }
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}",0.9969685486926866
160587,"@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
  }
}","@Override public void objectAdded(){
  total.incrementAndGet();
  if (totalSize == 0) {
    setProgress(""String_Node_Str"",0);
  }
 else {
    setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
  }
}",0.9822222222222222
160588,"private IfcModel realCheckout(Project project,Revision revision,DatabaseSession databaseSession,User user) throws BimserverLockConflictException, BimserverDatabaseException, UserException {
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  final long totalSize=revision.getSize();
  final AtomicLong total=new AtomicLong();
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : revision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    int highestStopId=findHighestStopRid(project,subRevision);
    Query query=new Query(subRevision.getProject().getId(),subRevision.getId(),null,Deep.YES,highestStopId);
    subModel.addChangeListener(new IfcModelChangeListener(){
      @Override public void objectAdded(){
        total.incrementAndGet();
        if (totalSize == 0) {
          setProgress(""String_Node_Str"",0);
        }
 else {
          setProgress(""String_Node_Str"",Math.round(100L * total.get() / totalSize));
        }
      }
    }
);
    getDatabaseSession().getMap(subModel,query);
    try {
      checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,subRevision,revision);
    }
 catch (    GeometryGeneratingException e) {
      throw new UserException(e);
    }
    subModel.getModelMetaData().setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(revision.getProject(),ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  ifcModel.getModelMetaData().setName(project.getName() + ""String_Node_Str"" + revision.getId());
  ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(revision) + 1);
  ifcModel.getModelMetaData().setAuthorizedUser(user.getName());
  ifcModel.getModelMetaData().setDate(new Date());
  return (IfcModel)ifcModel;
}","private IfcModel realCheckout(Project project,Revision revision,DatabaseSession databaseSession,User user) throws BimserverLockConflictException, BimserverDatabaseException, UserException {
  SerializerPluginConfiguration serializerPluginConfiguration=getDatabaseSession().get(StorePackage.eINSTANCE.getSerializerPluginConfiguration(),serializerOid,Query.getDefault());
  final long totalSize=revision.getSize();
  final AtomicLong total=new AtomicLong();
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : revision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    int highestStopId=findHighestStopRid(project,subRevision);
    Query query=new Query(subRevision.getProject().getId(),subRevision.getId(),null,Deep.YES,highestStopId);
    subModel.addChangeListener(new IfcModelChangeListener(){
      @Override public void objectAdded(){
        total.incrementAndGet();
        if (totalSize == 0) {
          setProgress(""String_Node_Str"",0);
        }
 else {
          setProgress(""String_Node_Str"",(int)Math.round(100.0 * total.get() / totalSize));
        }
      }
    }
);
    getDatabaseSession().getMap(subModel,query);
    try {
      checkGeometry(serializerPluginConfiguration,bimServer.getPluginManager(),subModel,project,subRevision,revision);
    }
 catch (    GeometryGeneratingException e) {
      throw new UserException(e);
    }
    subModel.getModelMetaData().setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface ifcModel=new IfcModel();
  if (ifcModelSet.size() > 1) {
    try {
      ifcModel=bimServer.getMergerFactory().createMerger(getDatabaseSession(),getAuthorization().getUoid()).merge(revision.getProject(),ifcModelSet,new ModelHelper(ifcModel));
    }
 catch (    MergeException e) {
      throw new UserException(e);
    }
  }
 else {
    ifcModel=ifcModelSet.iterator().next();
  }
  ifcModel.getModelMetaData().setName(project.getName() + ""String_Node_Str"" + revision.getId());
  ifcModel.getModelMetaData().setRevisionId(project.getRevisions().indexOf(revision) + 1);
  ifcModel.getModelMetaData().setAuthorizedUser(user.getName());
  ifcModel.getModelMetaData().setDate(new Date());
  return (IfcModel)ifcModel;
}",0.9982086878638604
160589,"public boolean updateNeeded(){
  SVersion localVersion=getLocalVersion();
  SVersion onlineVersion=getOnlineVersion();
  if (localVersion.getMajor() < onlineVersion.getMajor()) {
    return true;
  }
 else   if (localVersion.getMajor() == onlineVersion.getMajor()) {
    if (localVersion.getMinor() < onlineVersion.getMinor()) {
      return true;
    }
 else     if (localVersion.getMinor() == onlineVersion.getMinor()) {
      if (onlineVersion.getRevision() != null && localVersion.getRevision() < onlineVersion.getRevision()) {
        return true;
      }
    }
  }
  return false;
}","public boolean updateNeeded(){
  SVersion localVersion=getLocalVersion();
  SVersion onlineVersion=getOnlineVersion();
  if (localVersion.getMajor().compareTo(onlineVersion.getMajor()) < 0) {
    return true;
  }
 else   if (localVersion.getMajor() == onlineVersion.getMajor()) {
    if (localVersion.getMinor().compareTo(onlineVersion.getMinor()) > 0) {
      return true;
    }
 else     if (localVersion.getMinor().equals(onlineVersion.getMinor())) {
      if (onlineVersion.getRevision() != null && localVersion.getRevision() < onlineVersion.getRevision()) {
        return true;
      }
    }
  }
  return false;
}",0.8450704225352113
160590,"private void writeGeometries(OutputStream outputStream) throws IOException {
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  dataOutputStream.writeUTF(""String_Node_Str"");
  dataOutputStream.writeByte(FORMAT_VERSION);
  dataOutputStream.write(new byte[2]);
  Bounds modelBounds=new Bounds();
  int nrObjects=0;
  for (  IfcProduct ifcProduct : getModel().getAllWithSubTypes(IfcProduct.class)) {
    GeometryInfo geometryInfo=ifcProduct.getGeometry();
    if (geometryInfo != null) {
      Bounds objectBounds=new Bounds(new Float3(geometryInfo.getMinBounds().getX(),geometryInfo.getMinBounds().getY(),geometryInfo.getMinBounds().getZ()),new Float3(geometryInfo.getMaxBounds().getX(),geometryInfo.getMaxBounds().getY(),geometryInfo.getMaxBounds().getZ()));
      modelBounds.integrate(objectBounds);
      nrObjects++;
    }
  }
  modelBounds.writeTo(dataOutputStream);
  dataOutputStream.writeInt(nrObjects);
  for (  IfcProduct ifcProduct : getModel().getAllWithSubTypes(IfcProduct.class)) {
    GeometryInfo geometryInfo=ifcProduct.getGeometry();
    if (geometryInfo != null) {
      String materialName=getMaterial(ifcProduct);
      dataOutputStream.writeUTF(materialName);
      String type=null;
      if (ifcProduct instanceof IfcSlab && ((IfcSlab)ifcProduct).getPredefinedType() == IfcSlabTypeEnum.ROOF) {
        type=""String_Node_Str"";
      }
 else {
        type=ifcProduct.eClass().getName();
      }
      dataOutputStream.writeUTF(type);
      dataOutputStream.writeLong(ifcProduct.getOid());
      dataOutputStream.write(new byte[4 - ((materialName + type).getBytes(Charsets.UTF_8).length % 4)]);
      Bounds objectBounds=new Bounds(geometryInfo.getMinBounds(),geometryInfo.getMaxBounds());
      objectBounds.writeTo(dataOutputStream);
      dataOutputStream.writeInt(geometryInfo.getPrimitiveCount() * 3);
      GeometryData geometryData=geometryInfo.getData();
      byte[] vertices=geometryData.getVertices();
      ByteBuffer buffer=ByteBuffer.wrap(vertices);
      convertOrder(buffer);
      dataOutputStream.writeInt(buffer.capacity() / 4);
      dataOutputStream.write(buffer.array());
      byte[] normals=geometryData.getNormals();
      buffer=ByteBuffer.wrap(normals);
      convertOrder(buffer);
      dataOutputStream.writeInt(buffer.capacity() / 4);
      dataOutputStream.write(buffer.array());
    }
  }
  dataOutputStream.flush();
}","private void writeGeometries(OutputStream outputStream) throws IOException {
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  dataOutputStream.writeUTF(""String_Node_Str"");
  dataOutputStream.writeByte(FORMAT_VERSION);
  dataOutputStream.write(new byte[2]);
  Bounds modelBounds=new Bounds();
  int nrObjects=0;
  for (  IfcProduct ifcProduct : getModel().getAllWithSubTypes(IfcProduct.class)) {
    GeometryInfo geometryInfo=ifcProduct.getGeometry();
    if (geometryInfo != null) {
      Bounds objectBounds=new Bounds(new Float3(geometryInfo.getMinBounds().getX(),geometryInfo.getMinBounds().getY(),geometryInfo.getMinBounds().getZ()),new Float3(geometryInfo.getMaxBounds().getX(),geometryInfo.getMaxBounds().getY(),geometryInfo.getMaxBounds().getZ()));
      modelBounds.integrate(objectBounds);
      nrObjects++;
    }
  }
  modelBounds.writeTo(dataOutputStream);
  dataOutputStream.writeInt(nrObjects);
  for (  IfcProduct ifcProduct : getModel().getAllWithSubTypes(IfcProduct.class)) {
    GeometryInfo geometryInfo=ifcProduct.getGeometry();
    if (geometryInfo != null) {
      String materialName=getMaterial(ifcProduct);
      dataOutputStream.writeUTF(materialName);
      String type=null;
      if (ifcProduct instanceof IfcSlab && ((IfcSlab)ifcProduct).getPredefinedType() == IfcSlabTypeEnum.ROOF) {
        type=""String_Node_Str"";
      }
 else {
        type=ifcProduct.eClass().getName();
      }
      dataOutputStream.writeUTF(type);
      int skip=4 - (dataOutputStream.size() % 4);
      if (skip > 0 && skip != 4)       dataOutputStream.write(new byte[skip]);
      dataOutputStream.writeLong(ifcProduct.getOid());
      skip=4 - (dataOutputStream.size() % 4);
      if (skip > 0 && skip != 4)       dataOutputStream.write(new byte[skip]);
      Bounds objectBounds=new Bounds(geometryInfo.getMinBounds(),geometryInfo.getMaxBounds());
      objectBounds.writeTo(dataOutputStream);
      dataOutputStream.writeInt(geometryInfo.getPrimitiveCount() * 3);
      GeometryData geometryData=geometryInfo.getData();
      byte[] vertices=geometryData.getVertices();
      ByteBuffer buffer=ByteBuffer.wrap(vertices);
      convertOrder(buffer);
      dataOutputStream.writeInt(buffer.capacity() / 4);
      dataOutputStream.write(buffer.array());
      byte[] normals=geometryData.getNormals();
      buffer=ByteBuffer.wrap(normals);
      convertOrder(buffer);
      dataOutputStream.writeInt(buffer.capacity() / 4);
      dataOutputStream.write(buffer.array());
    }
  }
  dataOutputStream.flush();
}",0.9442981567753695
160591,"@Override public void newRevision(final Long poid,final Long roid,Long soid,String serviceIdentifier,String profileIdentifier,String token,String apiUrl) throws UserException, ServerException {
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e2) {
    e2.printStackTrace();
  }
  try {
    final ServiceInterface serviceInterface=bimServer.getService(ServiceInterface.class);
    final SService service=serviceInterface.getService(Long.parseLong(profileIdentifier));
    final SObjectType settings=internalChannel.getPluginInterface().getPluginSettings(service.getInternalServiceId());
    final BimServerClient bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
    new Thread(){
      @Override public void run(){
        try {
          newRevisionHandler.newRevision(bimServerClient,poid,roid,service.getOid(),settings);
        }
 catch (        ServerException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
catch (        UserException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
.start();
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void newRevision(final Long poid,final Long roid,Long soid,String serviceIdentifier,String profileIdentifier,String token,String apiUrl) throws UserException, ServerException {
  ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
  serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
  final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
  try {
    internalChannel.connect(new SimpleTokenHolder());
  }
 catch (  ChannelConnectionException e2) {
    e2.printStackTrace();
  }
  try {
    DatabaseSession session=bimServer.getDatabase().createSession();
    try {
      final InternalServicePluginConfiguration internalServicePluginConfiguration=session.get(Long.parseLong(profileIdentifier),Query.getDefault());
      final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
      final BimServerClient bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
      new Thread(){
        @Override public void run(){
          try {
            newRevisionHandler.newRevision(bimServerClient,poid,roid,internalServicePluginConfiguration.getOid(),settings);
          }
 catch (          ServerException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
catch (          UserException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
.start();
    }
  finally {
      session.close();
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.806421735103427
160592,"@Override public void run(){
  try {
    newRevisionHandler.newRevision(bimServerClient,poid,roid,service.getOid(),settings);
  }
 catch (  ServerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    newRevisionHandler.newRevision(bimServerClient,poid,roid,internalServicePluginConfiguration.getOid(),settings);
  }
 catch (  ServerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  UserException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.929188255613126
160593,"@Override public void registerInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor,final NewRevisionHandler newRevisionHandler){
  register(serviceDescriptor,new Bimsie1RemoteServiceInterfaceAdaptor(){
    @Override public void newRevision(    final Long poid,    final Long roid,    Long soid,    String serviceIdentifier,    String profileIdentifier,    String token,    String apiUrl) throws UserException, ServerException {
      ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
      serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
      final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
      try {
        internalChannel.connect(new SimpleTokenHolder());
      }
 catch (      ChannelConnectionException e2) {
        e2.printStackTrace();
      }
      try {
        final ServiceInterface serviceInterface=bimServer.getService(ServiceInterface.class);
        final SService service=serviceInterface.getService(Long.parseLong(profileIdentifier));
        final SObjectType settings=internalChannel.getPluginInterface().getPluginSettings(service.getInternalServiceId());
        final BimServerClient bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
        new Thread(){
          @Override public void run(){
            try {
              newRevisionHandler.newRevision(bimServerClient,poid,roid,service.getOid(),settings);
            }
 catch (            ServerException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
catch (            UserException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
.start();
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void registerInternalNewRevisionHandler(ServiceDescriptor serviceDescriptor,final NewRevisionHandler newRevisionHandler){
  register(serviceDescriptor,new Bimsie1RemoteServiceInterfaceAdaptor(){
    @Override public void newRevision(    final Long poid,    final Long roid,    Long soid,    String serviceIdentifier,    String profileIdentifier,    String token,    String apiUrl) throws UserException, ServerException {
      ServiceMapInterface serviceMapInterface=new ServiceMap(bimServer,null,AccessMethod.JSON);
      serviceMapInterface.add(Bimsie1RemoteServiceInterface.class,internalRemoteServiceInterfaces.get(serviceIdentifier));
      final InternalChannel internalChannel=new InternalChannel(bimServer.getServiceFactory(),bimServer.getServicesMap());
      try {
        internalChannel.connect(new SimpleTokenHolder());
      }
 catch (      ChannelConnectionException e2) {
        e2.printStackTrace();
      }
      try {
        DatabaseSession session=bimServer.getDatabase().createSession();
        try {
          final InternalServicePluginConfiguration internalServicePluginConfiguration=session.get(Long.parseLong(profileIdentifier),Query.getDefault());
          final SObjectType settings=bimServer.getSConverter().convertToSObject(internalServicePluginConfiguration.getSettings());
          final BimServerClient bimServerClient=bimServer.getBimServerClientFactory().create(new TokenAuthentication(token));
          new Thread(){
            @Override public void run(){
              try {
                newRevisionHandler.newRevision(bimServerClient,poid,roid,internalServicePluginConfiguration.getOid(),settings);
              }
 catch (              ServerException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
catch (              UserException e) {
                LOGGER.error(""String_Node_Str"",e);
              }
            }
          }
.start();
        }
  finally {
          session.close();
        }
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
}",0.8379387602688574
160594,"@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(authorization.getUoid());
  IfcModelInterface projectsModel=getDatabaseSession().getAllOfType(StorePackage.eINSTANCE.getProject(),Query.getDefault());
  Set<Project> result=new HashSet<Project>();
  for (  IdEObject idEObject : projectsModel.getValues()) {
    if (idEObject instanceof Project) {
      Project project=(Project)idEObject;
      if ((user.getUserType() == UserType.ADMIN || (project.getState() == ObjectState.ACTIVE) && authorization.hasRightsOnProjectOrSuperProjects(user,project))) {
        result.add(project);
      }
    }
  }
  return result;
}","@Override public Set<Project> execute() throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  User user=getUserByUoid(authorization.getUoid());
  IfcModelInterface projectsModel=getDatabaseSession().getAllOfType(StorePackage.eINSTANCE.getProject(),Query.getDefault());
  Set<Project> result=new HashSet<Project>();
  for (  IdEObject idEObject : projectsModel.getValues()) {
    if (idEObject instanceof Project) {
      Project project=(Project)idEObject;
      if (!project.getName().equals(""String_Node_Str"")) {
        if ((user.getUserType() == UserType.ADMIN || (project.getState() == ObjectState.ACTIVE) && authorization.hasRightsOnProjectOrSuperProjects(user,project))) {
          result.add(project);
        }
      }
    }
  }
  return result;
}",0.952127659574468
160595,"private void processMultiRequest(JsonArray requests,String jsonToken,HttpServletRequest httpRequest,JsonWriter out) throws Exception {
  out.name(""String_Node_Str"");
  out.beginArray();
  for (int r=0; r < requests.size(); r++) {
    processSingleRequest((JsonObject)requests.get(r),jsonToken,httpRequest,out);
  }
  out.endArray();
}","private void processMultiRequest(JsonArray requests,String jsonToken,HttpServletRequest httpRequest,JsonWriter out) throws Exception {
  out.name(""String_Node_Str"");
  out.beginArray();
  for (int r=0; r < requests.size(); r++) {
    try {
      processSingleRequest((JsonObject)requests.get(r),jsonToken,httpRequest,out);
    }
 catch (    Exception e) {
      handleException(out,e);
    }
  }
  out.endArray();
}",0.8918558077436582
160596,"@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            boolean firstF=true;
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}","@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            boolean firstF=true;
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}",0.9956080153719462
160597,"@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            boolean firstF=true;
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}","@Override protected boolean write(OutputStream outputStream) throws SerializerException {
  try {
    if (out == null) {
      out=new UTF8PrintWriter(outputStream);
    }
    if (mode == Mode.HEADER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      mode=Mode.BODY;
      iterator=getModel().iterator();
      return true;
    }
 else     if (mode == Mode.BODY) {
      if (iterator.hasNext()) {
        IdEObject object=iterator.next();
        if (object.eClass().getEAnnotation(""String_Node_Str"") == null) {
          if (!firstObject) {
            out.write(""String_Node_Str"");
          }
 else {
            firstObject=false;
          }
          if (((IdEObjectImpl)object).getLoadingState() != State.LOADED) {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"");
          }
 else {
            out.write(""String_Node_Str"");
            out.write(""String_Node_Str"" + object.getOid() + ""String_Node_Str"");
            out.write(""String_Node_Str"" + object.eClass().getName() + ""String_Node_Str"");
            out.write(""String_Node_Str"");
            boolean firstF=true;
            for (            EStructuralFeature eStructuralFeature : object.eClass().getEAllStructuralFeatures()) {
              if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null && eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
                if (eStructuralFeature instanceof EReference) {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        int wrapped=0;
                        int referred=0;
                        for (                        Object o : list) {
                          if (((IdEObject)o).eClass().getEAnnotation(""String_Node_Str"") != null) {
                            wrapped++;
                          }
 else {
                            referred++;
                          }
                        }
                        if (wrapped == 0 && referred != 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped != 0 && referred == 0) {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
 else                         if (wrapped == 0 && referred == 0) {
                        }
 else {
                          out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        }
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          IdEObject ref=(IdEObject)o;
                          if (ref.getOid() == -1) {
                            writeObject(out,ref);
                          }
 else {
                            if (wrapped != 0 && referred != 0) {
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"");
                              out.write(""String_Node_Str"" + ref.getOid());
                              out.write(""String_Node_Str"");
                            }
 else {
                              out.write(""String_Node_Str"" + ref.getOid());
                            }
                          }
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      IdEObject ref=(IdEObject)value;
                      if (ref instanceof IfcGloballyUniqueId) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writePrimitive(out,eStructuralFeature,((IfcGloballyUniqueId)ref).getWrappedValue());
                      }
 else                       if (((IdEObject)ref).eClass().getEAnnotation(""String_Node_Str"") != null) {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        writeObject(out,ref);
                      }
 else {
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str""+ ref.getOid());
                      }
                    }
                  }
                }
 else {
                  Object value=object.eGet(eStructuralFeature);
                  if (value != null) {
                    if (eStructuralFeature.isMany()) {
                      List<?> list=(List<?>)value;
                      if (serializerEmptyLists || !list.isEmpty()) {
                        if (firstF) {
                          firstF=false;
                        }
 else {
                          out.write(""String_Node_Str"");
                        }
                        out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                        boolean f=true;
                        for (                        Object o : list) {
                          if (!f) {
                            out.write(""String_Node_Str"");
                          }
 else {
                            f=false;
                          }
                          writePrimitive(out,eStructuralFeature,o);
                        }
                        out.write(""String_Node_Str"");
                      }
                    }
 else {
                      if (firstF) {
                        firstF=false;
                      }
 else {
                        out.write(""String_Node_Str"");
                      }
                      out.write(""String_Node_Str"" + eStructuralFeature.getName() + ""String_Node_Str"");
                      writePrimitive(out,eStructuralFeature,value);
                    }
                  }
                }
              }
            }
            out.write(""String_Node_Str"");
          }
        }
        return true;
      }
 else {
        mode=Mode.FOOTER;
        return true;
      }
    }
 else     if (mode == Mode.FOOTER) {
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.flush();
      mode=Mode.DONE;
      return false;
    }
  }
 catch (  Throwable e) {
    throw new SerializerException(e);
  }
  return false;
}",0.9956080153719462
160598,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Reference reAttach(IdEObject mainObject){
  List list=(List)getIdEObject().eGet(geteReference());
  list.remove(getReferredObject());
  list.add(mainObject);
  return new SingleReference(getIdEObject(),mainObject,geteReference());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Reference reAttach(IdEObject mainObject){
  AbstractEList list=(AbstractEList)getIdEObject().eGet(geteReference());
  int index=list.indexOf(getReferredObject());
  list.set(index,mainObject);
  while (list.contains(getReferredObject())) {
    list.remove(getReferredObject());
  }
  return new MultiReference(getIdEObject(),mainObject,geteReference());
}",0.7591836734693878
160599,"private void writeList(PrintWriter out,EObject object,EStructuralFeature feature) throws SerializerException {
  List<?> list=(List<?>)object.eGet(feature);
  List<?> doubleStingList=null;
  if (feature.getEType() == EcorePackage.eINSTANCE.getEDouble() && model.isUseDoubleStrings()) {
    EStructuralFeature doubleStringFeature=feature.getEContainingClass().getEStructuralFeature(feature.getName() + ""String_Node_Str"");
    if (doubleStringFeature == null) {
      throw new SerializerException(""String_Node_Str"" + feature.getName() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    doubleStingList=(List<?>)object.eGet(doubleStringFeature);
  }
  if (list.isEmpty()) {
    if (!feature.isUnsettable()) {
      out.print(OPEN_CLOSE_PAREN);
    }
 else {
      out.print(""String_Node_Str"");
    }
  }
 else {
    out.print(OPEN_PAREN);
    boolean first=true;
    int index=0;
    for (    Object listObject : list) {
      if (!first) {
        out.print(COMMA);
      }
      if ((listObject instanceof IdEObject) && model.contains((IdEObject)listObject)) {
        IdEObject eObject=(IdEObject)listObject;
        out.print(DASH);
        out.print(String.valueOf(getExpressId(eObject)));
      }
 else {
        if (listObject == null) {
          out.print(DOLLAR);
        }
 else {
          if (listObject instanceof IdEObject && feature.getEType().getEAnnotation(""String_Node_Str"") != null) {
            IdEObject eObject=(IdEObject)listObject;
            Object realVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
            if (realVal instanceof Double) {
              Object stringVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
              if (stringVal != null && model.isUseDoubleStrings()) {
                out.print(stringVal);
              }
 else {
                out.print(realVal);
              }
            }
 else {
              writePrimitive(out,realVal);
            }
          }
 else           if (listObject instanceof EObject) {
            IdEObject eObject=(IdEObject)listObject;
            EClass class1=eObject.eClass();
            EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
            if (structuralFeature != null) {
              Object realVal=eObject.eGet(structuralFeature);
              out.print(upperCases.get(class1));
              out.print(OPEN_PAREN);
              if (realVal instanceof Double) {
                Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
                if (stringVal != null && model.isUseDoubleStrings()) {
                  out.print(stringVal);
                }
 else {
                  out.print(realVal);
                }
              }
 else {
                writePrimitive(out,realVal);
              }
              out.print(CLOSE_PAREN);
            }
          }
 else {
            if (doubleStingList != null) {
              if (index < doubleStingList.size()) {
                String val=(String)doubleStingList.get(index);
                if (val == null) {
                  writePrimitive(out,listObject);
                }
 else {
                  out.write(val);
                }
              }
 else {
                writePrimitive(out,listObject);
              }
            }
 else {
              writePrimitive(out,listObject);
            }
          }
        }
      }
      first=false;
      index++;
    }
    out.print(CLOSE_PAREN);
  }
}","private void writeList(PrintWriter out,EObject object,EStructuralFeature feature) throws SerializerException {
  if (object instanceof IfcRoot) {
    if (((IfcRoot)object).getGlobalId().equals(""String_Node_Str"")) {
      System.out.println();
    }
  }
  List<?> list=(List<?>)object.eGet(feature);
  List<?> doubleStingList=null;
  if (feature.getEType() == EcorePackage.eINSTANCE.getEDouble() && model.isUseDoubleStrings()) {
    EStructuralFeature doubleStringFeature=feature.getEContainingClass().getEStructuralFeature(feature.getName() + ""String_Node_Str"");
    if (doubleStringFeature == null) {
      throw new SerializerException(""String_Node_Str"" + feature.getName() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    doubleStingList=(List<?>)object.eGet(doubleStringFeature);
  }
  if (list.isEmpty()) {
    if (!feature.isUnsettable()) {
      out.print(OPEN_CLOSE_PAREN);
    }
 else {
      out.print(""String_Node_Str"");
    }
  }
 else {
    out.print(OPEN_PAREN);
    boolean first=true;
    int index=0;
    for (    Object listObject : list) {
      if (!first) {
        out.print(COMMA);
      }
      if ((listObject instanceof IdEObject) && model.contains((IdEObject)listObject)) {
        IdEObject eObject=(IdEObject)listObject;
        out.print(DASH);
        out.print(String.valueOf(getExpressId(eObject)));
      }
 else {
        if (listObject == null) {
          out.print(DOLLAR);
        }
 else {
          if (listObject instanceof IdEObject && feature.getEType().getEAnnotation(""String_Node_Str"") != null) {
            IdEObject eObject=(IdEObject)listObject;
            Object realVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
            if (realVal instanceof Double) {
              Object stringVal=eObject.eGet(eObject.eClass().getEStructuralFeature(""String_Node_Str""));
              if (stringVal != null && model.isUseDoubleStrings()) {
                out.print(stringVal);
              }
 else {
                out.print(realVal);
              }
            }
 else {
              writePrimitive(out,realVal);
            }
          }
 else           if (listObject instanceof EObject) {
            IdEObject eObject=(IdEObject)listObject;
            EClass class1=eObject.eClass();
            EStructuralFeature structuralFeature=class1.getEStructuralFeature(WRAPPED_VALUE);
            if (structuralFeature != null) {
              Object realVal=eObject.eGet(structuralFeature);
              out.print(upperCases.get(class1));
              out.print(OPEN_PAREN);
              if (realVal instanceof Double) {
                Object stringVal=eObject.eGet(class1.getEStructuralFeature(structuralFeature.getName() + ""String_Node_Str""));
                if (stringVal != null && model.isUseDoubleStrings()) {
                  out.print(stringVal);
                }
 else {
                  out.print(realVal);
                }
              }
 else {
                writePrimitive(out,realVal);
              }
              out.print(CLOSE_PAREN);
            }
 else {
              LOGGER.info(""String_Node_Str"" + object + ""String_Node_Str""+ feature.getName()+ ""String_Node_Str""+ eObject);
            }
          }
 else {
            if (doubleStingList != null) {
              if (index < doubleStingList.size()) {
                String val=(String)doubleStingList.get(index);
                if (val == null) {
                  writePrimitive(out,listObject);
                }
 else {
                  out.write(val);
                }
              }
 else {
                writePrimitive(out,listObject);
              }
            }
 else {
              writePrimitive(out,listObject);
            }
          }
        }
      }
      first=false;
      index++;
    }
    out.print(CLOSE_PAREN);
  }
}",0.9610990206746464
160600,"private Map<String,List<IdEObject>> buildIdentifierMap(){
  Map<String,List<IdEObject>> map=new HashMap<String,List<IdEObject>>();
  for (  IfcModelInterface model : modelSet) {
    for (    IdEObject idEObject : model.getValues()) {
      if (idEObject instanceof IfcRoot) {
        IfcRoot ifcRoot=(IfcRoot)idEObject;
        String identifier=getIdentifier(idEObject);
        if (identifier != null) {
          if (!processedIdentifiers.contains(identifier)) {
            if (map.containsKey(identifier)) {
              if (map.get(identifier).get(0).eClass() != ifcRoot.eClass()) {
                LOGGER.info(""String_Node_Str"" + identifier + ""String_Node_Str""+ map.get(identifier).get(0).eClass().getName()+ ""String_Node_Str""+ ifcRoot.eClass().getName());
              }
 else {
                if (model.contains(ifcRoot)) {
                  map.get(identifier).add(ifcRoot);
                }
              }
            }
 else {
              if (model.contains(ifcRoot)) {
                List<IdEObject> list=new ArrayList<IdEObject>();
                list.add(ifcRoot);
                map.put(identifier,list);
              }
            }
          }
        }
      }
    }
  }
  return map;
}","private Map<String,List<IdEObject>> buildIdentifierMap(){
  Map<String,List<IdEObject>> map=new HashMap<String,List<IdEObject>>();
  for (  IdEObject idEObject : model.getValues()) {
    if (idEObject instanceof IfcRoot) {
      IfcRoot ifcRoot=(IfcRoot)idEObject;
      String identifier=getIdentifier(idEObject);
      if (identifier != null) {
        if (map.containsKey(identifier)) {
          if (map.get(identifier).get(0).eClass() != ifcRoot.eClass()) {
            LOGGER.info(""String_Node_Str"" + identifier + ""String_Node_Str""+ map.get(identifier).get(0).eClass().getName()+ ""String_Node_Str""+ ifcRoot.eClass().getName());
          }
 else {
            if (model.contains(ifcRoot)) {
              map.get(identifier).add(ifcRoot);
            }
          }
        }
 else {
          if (model.contains(ifcRoot)) {
            List<IdEObject> list=new ArrayList<IdEObject>();
            list.add(ifcRoot);
            map.put(identifier,list);
          }
        }
      }
    }
  }
  return map;
}",0.8821156432093231
160601,"private void removeReplaceLinks(IdEObject mainObject,IdEObject objectToRemove){
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Set<Reference> referencesTo=referenceCounter.getReferencesTo(objectToRemove);
  if (referencesTo != null) {
    Iterator<Reference> referenceIterator=referencesTo.iterator();
    Set<Reference> newReferences=new HashSet<Reference>();
    while (referenceIterator.hasNext()) {
      Reference reference=referenceIterator.next();
      newReferences.add(reference.reAttach(mainObject));
      referenceIterator.remove();
    }
    for (    Reference reference : newReferences) {
      referenceCounter.addReference(reference);
    }
  }
  model.remove(objectToRemove);
}","private void removeReplaceLinks(IdEObject mainObject,IdEObject objectToRemove){
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Set<Reference> referencesTo=referenceCounter.getReferencesTo(objectToRemove);
  if (referencesTo != null) {
    Iterator<Reference> referenceIterator=referencesTo.iterator();
    Set<Reference> newReferences=new HashSet<Reference>();
    while (referenceIterator.hasNext()) {
      Reference reference=referenceIterator.next();
      newReferences.add(reference.reAttach(mainObject));
      referenceIterator.remove();
    }
    for (    Reference reference : newReferences) {
      referenceCounter.addReference(reference);
    }
  }
  LOGGER.info(""String_Node_Str"" + objectToRemove);
  referenceCounter.remove(objectToRemove);
  model.remove(objectToRemove);
}",0.9418316831683168
160602,"public IfcModelInterface merge(Project project,IfcModelSet modelSet,ModelHelper modelHelper) throws MergeException {
  this.modelSet=modelSet;
  if (modelSet.size() == 1) {
    return modelSet.iterator().next();
  }
  modelSet.sortByDate();
  model=mergeScales(project,modelSet,modelHelper);
  LOGGER.info(""String_Node_Str"");
  referenceCounter=new ReferenceCounter(model);
  referenceCounter.updateReferences();
  Map<String,List<IdEObject>> identifierMap=buildIdentifierMap();
  cleanIdentifierMap(identifierMap);
  LOGGER.info(""String_Node_Str"" + model.size());
  return model;
}","public IfcModelInterface merge(Project project,IfcModelSet modelSet,ModelHelper modelHelper) throws MergeException {
  if (modelSet.size() == 1) {
    return modelSet.iterator().next();
  }
  modelSet.sortByDate();
  model=mergeScales(project,modelSet,modelHelper);
  LOGGER.info(""String_Node_Str"");
  referenceCounter=new ReferenceCounter(model);
  referenceCounter.updateReferences();
  Map<String,List<IdEObject>> identifierMap=buildIdentifierMap();
  cleanIdentifierMap(identifierMap);
  LOGGER.info(""String_Node_Str"" + model.size());
  return model;
}",0.9771528998242532
160603,"private void cleanIdentifierMap(Map<String,List<IdEObject>> identifierMap){
  for (  String identifier : identifierMap.keySet()) {
    List<IdEObject> list=identifierMap.get(identifier);
    if (list.size() > 1) {
      IdEObject newestObject=list.get(list.size() - 1);
      for (      EAttribute eAttribute : newestObject.eClass().getEAllAttributes()) {
        if (eAttribute.isMany()) {
        }
 else {
          if (!newestObject.eIsSet(eAttribute)) {
            for (int i=list.size() - 2; i >= 0; i--) {
              IdEObject olderObject=list.get(i);
              if (olderObject.eIsSet(eAttribute)) {
                newestObject.eSet(eAttribute,olderObject.eGet(eAttribute));
                break;
              }
            }
          }
        }
      }
      for (      EReference eReference : newestObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
        }
 else {
          if (!newestObject.eIsSet(eReference)) {
            for (int i=list.size() - 2; i >= 0; i--) {
              IdEObject olderObject=list.get(i);
              if (olderObject.eIsSet(eReference)) {
                newestObject.eSet(eReference,olderObject.eGet(eReference));
                referenceCounter.addReference(new ReferenceCounter.SingleReference(newestObject,(IdEObject)olderObject.eGet(eReference),eReference));
                break;
              }
            }
          }
        }
      }
      for (      IdEObject idEObject : list) {
        if (idEObject != newestObject) {
          removeReplaceLinks(newestObject,idEObject);
        }
      }
    }
    processedIdentifiers.add(identifier);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void cleanIdentifierMap(Map<String,List<IdEObject>> identifierMap){
  for (  String identifier : identifierMap.keySet()) {
    List<IdEObject> list=identifierMap.get(identifier);
    if (list.size() > 1) {
      IdEObject newestObject=list.get(list.size() - 1);
      for (      EAttribute eAttribute : newestObject.eClass().getEAllAttributes()) {
        if (eAttribute.isMany()) {
        }
 else {
          if (!newestObject.eIsSet(eAttribute)) {
            for (int i=list.size() - 2; i >= 0; i--) {
              IdEObject olderObject=list.get(i);
              if (olderObject.eIsSet(eAttribute)) {
                newestObject.eSet(eAttribute,olderObject.eGet(eAttribute));
                break;
              }
            }
          }
        }
      }
      for (      EReference eReference : newestObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          if (!newestObject.eIsSet(eReference)) {
            for (int i=list.size() - 2; i >= 0; i--) {
              IdEObject olderObject=list.get(i);
              if (olderObject.eIsSet(eReference)) {
                List<?> l=(List<?>)newestObject.eGet(eReference);
                List a=(List)olderObject.eGet(eReference);
                l.addAll(a);
                a.clear();
                referenceCounter.addReference(new ReferenceCounter.MultiReference(newestObject,(IdEObject)olderObject.eGet(eReference),eReference));
                break;
              }
            }
          }
        }
 else {
          if (!newestObject.eIsSet(eReference)) {
            for (int i=list.size() - 2; i >= 0; i--) {
              IdEObject olderObject=list.get(i);
              if (olderObject.eIsSet(eReference)) {
                newestObject.eSet(eReference,olderObject.eGet(eReference));
                referenceCounter.addReference(new ReferenceCounter.SingleReference(newestObject,(IdEObject)olderObject.eGet(eReference),eReference));
                break;
              }
            }
          }
        }
      }
      for (      IdEObject idEObject : list) {
        if (idEObject != newestObject) {
          removeReplaceLinks(newestObject,idEObject);
        }
      }
    }
  }
}",0.8065674704976912
160604,"private void start(File destDir,String address,String port,String heapsize,String stacksize,String permsize,String jvmPath,String homedir){
  try {
    String command=""String_Node_Str"";
    if (jvmPath.equalsIgnoreCase(""String_Node_Str"")) {
      command=""String_Node_Str"";
    }
 else {
      File jvm=new File(jvmPath);
      if (jvm.exists()) {
        File jre=new File(jvm,""String_Node_Str"");
        if (!jre.exists()) {
          jre=jvm;
        }
        command=new File(jre,""String_Node_Str"" + File.separator + ""String_Node_Str"").getAbsolutePath();
        File jreLib=new File(jre,""String_Node_Str"");
        command+=""String_Node_Str"";
        for (        File file : jreLib.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            if (file.getAbsolutePath().contains(""String_Node_Str"")) {
              command+=""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ File.pathSeparator;
            }
 else {
              command+=file.getAbsolutePath() + File.pathSeparator;
            }
          }
        }
        if (jre != jvm) {
          command+=new File(jvm,""String_Node_Str"" + File.separator + ""String_Node_Str"");
        }
        command+=""String_Node_Str"";
      }
    }
    command+=""String_Node_Str"" + heapsize;
    command+=""String_Node_Str"" + stacksize;
    command+=""String_Node_Str"" + permsize;
    command+=""String_Node_Str"";
    command+=""String_Node_Str"" + File.pathSeparator;
    File dir=new File(destDir + File.separator + ""String_Node_Str"");
    for (    File lib : dir.listFiles()) {
      if (lib.isFile()) {
        if (lib.getName().contains(""String_Node_Str"")) {
          command+=""String_Node_Str"" + File.separator + lib.getName()+ ""String_Node_Str""+ File.pathSeparator;
        }
 else {
          command+=""String_Node_Str"" + File.separator + lib.getName()+ File.pathSeparator;
        }
      }
    }
    if (command.endsWith(File.pathSeparator)) {
      command=command.substring(0,command.length() - 1);
    }
    Enumeration<URL> resources=getClass().getClassLoader().getResources(""String_Node_Str"");
    String realMainClass=""String_Node_Str"";
    while (resources.hasMoreElements()) {
      URL url=resources.nextElement();
      Manifest manifest=new Manifest(url.openStream());
      Attributes mainAttributes=manifest.getMainAttributes();
      for (      Object key : mainAttributes.keySet()) {
        if (key.toString().equals(""String_Node_Str"")) {
          realMainClass=mainAttributes.get(key).toString();
          break;
        }
      }
    }
    System.out.println(""String_Node_Str"" + realMainClass);
    command+=""String_Node_Str"" + realMainClass;
    command+=""String_Node_Str"" + address;
    command+=""String_Node_Str"" + port;
    command+=""String_Node_Str"" + homedir + ""String_Node_Str"";
    System.out.println(""String_Node_Str"" + command);
    exec=Runtime.getRuntime().exec(command,null,destDir);
    new Thread(new Runnable(){
      @Override public void run(){
        BufferedInputStream inputStream=new BufferedInputStream(exec.getInputStream());
        byte[] buffer=new byte[1024];
        int red;
        try {
          red=inputStream.read(buffer);
          while (red != -1) {
            String s=new String(buffer,0,red);
            System.out.print(s);
            red=inputStream.read(buffer);
          }
        }
 catch (        IOException e) {
        }
      }
    }
).start();
    new Thread(new Runnable(){
      @Override public void run(){
        BufferedInputStream errorStream=new BufferedInputStream(exec.getErrorStream());
        byte[] buffer=new byte[1024];
        int red;
        try {
          red=errorStream.read(buffer);
          while (red != -1) {
            String s=new String(buffer,0,red);
            System.out.print(s);
            red=errorStream.read(buffer);
          }
        }
 catch (        IOException e) {
        }
      }
    }
).start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void start(File destDir,String address,String port,String heapsize,String stacksize,String permsize,String jvmPath,String homedir){
  try {
    String command=""String_Node_Str"";
    if (jvmPath.equalsIgnoreCase(""String_Node_Str"")) {
      command=""String_Node_Str"";
    }
 else {
      File jvm=new File(jvmPath);
      if (jvm.exists()) {
        File jre=new File(jvm,""String_Node_Str"");
        if (!jre.exists()) {
          jre=jvm;
        }
        command=new File(jre,""String_Node_Str"" + File.separator + ""String_Node_Str"").getAbsolutePath();
        File jreLib=new File(jre,""String_Node_Str"");
        command+=""String_Node_Str"";
        for (        File file : jreLib.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            if (file.getAbsolutePath().contains(""String_Node_Str"")) {
              command+=""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ File.pathSeparator;
            }
 else {
              command+=file.getAbsolutePath() + File.pathSeparator;
            }
          }
        }
        if (jre != jvm) {
          command+=new File(jvm,""String_Node_Str"" + File.separator + ""String_Node_Str"");
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
    command+=""String_Node_Str"" + heapsize;
    command+=""String_Node_Str"" + stacksize;
    command+=""String_Node_Str"" + permsize;
    command+=""String_Node_Str"";
    command+=""String_Node_Str"" + File.pathSeparator;
    File dir=new File(destDir + File.separator + ""String_Node_Str"");
    for (    File lib : dir.listFiles()) {
      if (lib.isFile()) {
        if (lib.getName().contains(""String_Node_Str"")) {
          command+=""String_Node_Str"" + File.separator + lib.getName()+ ""String_Node_Str""+ File.pathSeparator;
        }
 else {
          command+=""String_Node_Str"" + File.separator + lib.getName()+ File.pathSeparator;
        }
      }
    }
    if (command.endsWith(File.pathSeparator)) {
      command=command.substring(0,command.length() - 1);
    }
    Enumeration<URL> resources=getClass().getClassLoader().getResources(""String_Node_Str"");
    String realMainClass=""String_Node_Str"";
    while (resources.hasMoreElements()) {
      URL url=resources.nextElement();
      Manifest manifest=new Manifest(url.openStream());
      Attributes mainAttributes=manifest.getMainAttributes();
      for (      Object key : mainAttributes.keySet()) {
        if (key.toString().equals(""String_Node_Str"")) {
          realMainClass=mainAttributes.get(key).toString();
          break;
        }
      }
    }
    System.out.println(""String_Node_Str"" + realMainClass);
    command+=""String_Node_Str"" + realMainClass;
    command+=""String_Node_Str"" + address;
    command+=""String_Node_Str"" + port;
    command+=""String_Node_Str"" + homedir + ""String_Node_Str"";
    System.out.println(""String_Node_Str"" + command);
    exec=Runtime.getRuntime().exec(command,null,destDir);
    new Thread(new Runnable(){
      @Override public void run(){
        BufferedInputStream inputStream=new BufferedInputStream(exec.getInputStream());
        byte[] buffer=new byte[1024];
        int red;
        try {
          red=inputStream.read(buffer);
          while (red != -1) {
            String s=new String(buffer,0,red);
            System.out.print(s);
            red=inputStream.read(buffer);
          }
        }
 catch (        IOException e) {
        }
      }
    }
).start();
    new Thread(new Runnable(){
      @Override public void run(){
        BufferedInputStream errorStream=new BufferedInputStream(exec.getErrorStream());
        byte[] buffer=new byte[1024];
        int red;
        try {
          red=errorStream.read(buffer);
          while (red != -1) {
            String s=new String(buffer,0,red);
            System.out.print(s);
            red=errorStream.read(buffer);
          }
        }
 catch (        IOException e) {
        }
      }
    }
).start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9938757655293088
160605,"public SRemoteServiceCalled convertToSObject(RemoteServiceCalled input){
  if (input == null) {
    return null;
  }
  SRemoteServiceCalled result=new SRemoteServiceCalled();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(SNotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  Service serviceVal=input.getService();
  result.setServiceId(serviceVal == null ? -1 : serviceVal.getOid());
  return result;
}","public SProjectSmall convertToSObject(ProjectSmall input){
  if (input == null) {
    return null;
  }
  SProjectSmall result=new SProjectSmall();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setName(input.getName());
  result.setParentId(input.getParentId());
  return result;
}",0.2210970464135021
160606,"public RemoteServiceCalled convertFromSObject(SRemoteServiceCalled input,RemoteServiceCalled result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(NotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),Query.getDefault()));
  result.setService((Service)session.get(StorePackage.eINSTANCE.getService(),input.getServiceId(),Query.getDefault()));
  return result;
}","public ProjectSmall convertFromSObject(SProjectSmall input,ProjectSmall result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setName(input.getName());
  result.setParentId(input.getParentId());
  return result;
}",0.3539823008849557
160607,"public static void loadPlugins(PluginManager pluginManager) throws PluginException {
  pluginManager.loadAllPluginsFromEclipseWorkspace(new File(""String_Node_Str""));
  File gitDirectory=new File(""String_Node_Str"");
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
}","public static void loadPlugins(PluginManager pluginManager) throws PluginException {
  pluginManager.loadAllPluginsFromEclipseWorkspace(new File(""String_Node_Str""));
  File gitDirectory=new File(""String_Node_Str"");
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
  pluginManager.loadPluginsFromEclipseProjectNoExceptions(new File(gitDirectory,""String_Node_Str""));
}",0.9246830723340792
160608,"private Object convert(EClassifier classifier,String value) throws DeserializeException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject create=(IdEObject)ePackage.getEFactoryInstance().create((EClass)classifier);
        Class<?> instanceClass=create.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(value + ""String_Node_Str"");
            }
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),value.substring(1,value.length() - 1));
          }
 else           if (instanceClass == Tristate.class) {
            Tristate tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.TRUE;
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.FALSE;
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.UNDEFINED;
            }
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
        }
        return create;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}","private Object convert(EClassifier classifier,String value) throws DeserializeException {
  if (classifier != null) {
    if (classifier instanceof EClassImpl) {
      if (null != ((EClassImpl)classifier).getEStructuralFeature(WRAPPED_VALUE)) {
        IdEObject create=(IdEObject)ePackage.getEFactoryInstance().create((EClass)classifier);
        Class<?> instanceClass=create.eClass().getEStructuralFeature(WRAPPED_VALUE).getEType().getInstanceClass();
        if (value.equals(""String_Node_Str"")) {
        }
 else {
          if (instanceClass == Integer.class || instanceClass == int.class) {
            try {
              create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Integer.parseInt(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(value + ""String_Node_Str"");
            }
          }
 else           if (instanceClass == Long.class || instanceClass == long.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Long.parseLong(value));
          }
 else           if (instanceClass == Boolean.class || instanceClass == boolean.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),value.equals(""String_Node_Str""));
          }
 else           if (instanceClass == Double.class || instanceClass == double.class) {
            try {
              create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),Double.parseDouble(value));
            }
 catch (            NumberFormatException e) {
              throw new DeserializeException(value + ""String_Node_Str"");
            }
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE + ""String_Node_Str""),value);
          }
 else           if (instanceClass == String.class) {
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),readString(value));
          }
 else           if (instanceClass == Tristate.class) {
            Tristate tristate=null;
            if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.TRUE;
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.FALSE;
            }
 else             if (value.equals(""String_Node_Str"")) {
              tristate=Tristate.UNDEFINED;
            }
            create.eSet(create.eClass().getEStructuralFeature(WRAPPED_VALUE),tristate);
          }
        }
        return create;
      }
 else {
        return processInline(classifier,value);
      }
    }
 else     if (classifier instanceof EDataType) {
      return convertSimpleValue(classifier.getInstanceClass(),value);
    }
  }
  return null;
}",0.992248062015504
160609,"@Override public void execute(int pid,int rid,DatabaseSession databaseSession,Map<Long,IdEObject> created) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(pid);
  eObject.setRid(rid);
  databaseSession.store(eObject,pid,rid);
  created.put(oid,eObject);
}","@Override public void execute(int pid,int rid,DatabaseSession databaseSession,Map<Long,IdEObject> created) throws UserException, BimserverLockConflictException, BimserverDatabaseException {
  EClass eClass=databaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObjectImpl)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(pid);
  eObject.setRid(rid);
  ((IdEObjectImpl)eObject).setLoaded();
  databaseSession.store(eObject,pid,rid);
  created.put(oid,eObject);
}",0.9662731871838112
160610,"public long store(IdEObject object,int pid,int rid) throws BimserverDatabaseException {
  checkOpen();
  if (!objectsToCommit.containsObject(object)) {
    if (object.getOid() == -1) {
      long newOid=newOid(object.eClass());
      ((IdEObjectImpl)object).setOid(newOid);
    }
    object.load();
    ((IdEObjectImpl)object).setPid(pid);
    if (rid == Integer.MAX_VALUE) {
      ((IdEObjectImpl)object).setRid(object.getRid() + 1);
    }
 else {
      ((IdEObjectImpl)object).setRid(rid);
    }
    addToObjectsToCommit(object);
  }
  return object.getOid();
}","public long store(IdEObject object,int pid,int rid) throws BimserverDatabaseException {
  checkOpen();
  if (!objectsToCommit.containsObject(object)) {
    objectCache.put(new RecordIdentifier(pid,object.getOid(),rid),object);
    boolean wrappedValue=Ifc2x3tc1Package.eINSTANCE.getWrappedValue().isSuperTypeOf(object.eClass());
    if (!wrappedValue) {
      if (object.getOid() == -1) {
        long newOid=newOid(object.eClass());
        ((IdEObjectImpl)object).setOid(newOid);
      }
      object.load();
      ((IdEObjectImpl)object).setPid(pid);
      if (rid == Integer.MAX_VALUE) {
        ((IdEObjectImpl)object).setRid(object.getRid() + 1);
      }
 else {
        ((IdEObjectImpl)object).setRid(rid);
      }
      addToObjectsToCommit(object);
    }
  }
  return object.getOid();
}",0.8070692194403535
160611,"private Schema upgrade(DatabaseSession databaseSession,int applicationSchemaVersion,int databaseSchemaVersion) throws MigrationException, InconsistentModelsException {
  Schema schema=new Schema();
  for (int i=0; i <= applicationSchemaVersion; i++) {
    Migration migration=getMigration(i);
    if (migration != null) {
      migration.migrate(schema);
      if (i > databaseSchemaVersion) {
        schema.upgradeDatabase(database,i,databaseSession);
      }
      schema.clearUpdates();
    }
 else {
      throw new MigrationException(""String_Node_Str"" + i);
    }
  }
  return schema;
}","private Schema upgrade(DatabaseSession databaseSession,int applicationSchemaVersion,int databaseSchemaVersion) throws MigrationException, InconsistentModelsException {
  Schema schema=new Schema();
  for (int i=0; i <= applicationSchemaVersion; i++) {
    Migration migration=getMigration(i);
    if (migration != null) {
      migration.migrate(schema);
      if (i > databaseSchemaVersion) {
        schema.upgradeDatabase(database,i,databaseSession);
      }
      schema.clearUpdates();
    }
 else {
      throw new MigrationException(""String_Node_Str"" + i);
    }
  }
  Schema emfSchema=new Schema();
  emfSchema.addEPackage(StorePackage.eINSTANCE);
  emfSchema.addEPackage(LogPackage.eINSTANCE);
  emfSchema.addEPackage(Ifc2x3tc1Package.eINSTANCE);
  return schema;
}",0.8667642752562226
160612,"public void start(String address,int port){
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(new File(""String_Node_Str""));
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher());
  config.setStartEmbeddedWebServer(true);
  config.setClassPath(System.getProperty(""String_Node_Str""));
  config.setPort(port);
  config.setStartCommandLine(true);
  bimServer=new BimServer(config);
  LocalVersionConstructor.augmentWithSvn(bimServer.getVersionChecker().getLocalVersion());
  try {
    LocalDevPluginLoader.loadPlugins(bimServer.getPluginManager());
    bimServer.start();
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void start(String address,int port){
  BimServerConfig config=new BimServerConfig();
  config.setHomeDir(new File(""String_Node_Str""));
  config.setResourceFetcher(new LocalDevelopmentResourceFetcher());
  config.setStartEmbeddedWebServer(true);
  config.setClassPath(System.getProperty(""String_Node_Str""));
  config.setPort(port);
  config.setStartCommandLine(true);
  bimServer=new BimServer(config);
  LocalVersionConstructor.augmentWithSvn(bimServer.getVersionChecker().getLocalVersion());
  try {
    LocalDevPluginLoader.loadPlugins(bimServer.getPluginManager());
    bimServer.start();
    if (bimServer.getServerInfo().getServerState() == ServerState.NOT_SETUP) {
      bimServer.getServiceFactory().getService(ServiceInterface.class,new SystemAuthorization(1,TimeUnit.HOURS)).setup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimserverDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.8648881239242685
160613,"private void writePrimitive(PrintWriter out,Object val) throws SerializerException {
  if (val instanceof Tristate) {
    Tristate bool=(Tristate)val;
    if (bool == Tristate.TRUE) {
      out.print(BOOLEAN_TRUE);
    }
 else     if (bool == Tristate.FALSE) {
      out.print(BOOLEAN_FALSE);
    }
 else     if (bool == Tristate.UNDEFINED) {
      out.print(BOOLEAN_UNDEFINED);
    }
  }
 else   if (val instanceof Double) {
    if (((Double)val).isInfinite() || (((Double)val).isNaN())) {
      LOGGER.info(""String_Node_Str"");
      out.print(""String_Node_Str"");
    }
 else {
      String string=val.toString();
      if (string.endsWith(DOT_0)) {
        out.print(string.substring(0,string.length() - 1));
      }
 else {
        out.print(string);
      }
    }
  }
 else   if (val instanceof Boolean) {
    Boolean bool=(Boolean)val;
    if (bool) {
      out.print(BOOLEAN_TRUE);
    }
 else {
      out.print(BOOLEAN_FALSE);
    }
  }
 else   if (val instanceof String) {
    out.print(SINGLE_QUOTE);
    String stringVal=(String)val;
    for (int i=0; i < stringVal.length(); i++) {
      char c=stringVal.charAt(i);
      if (c == '\'') {
        out.print(""String_Node_Str"");
      }
 else       if (c == '\\') {
        out.print(""String_Node_Str"");
      }
 else       if (c >= 32 && c <= 126) {
        out.print(c);
      }
 else       if (c < 255) {
        out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.ISO_8859_1.encode(CharBuffer.wrap(new char[]{(char)c})).array()),Charsets.UTF_8).toUpperCase());
      }
 else {
        if (useIso8859_1) {
          ByteBuffer encode=Charsets.ISO_8859_1.encode(new String(new char[]{(char)(c - 128)}));
          out.write(""String_Node_Str"" + (char)encode.get());
        }
 else {
          if (Character.isLowSurrogate(c)) {
            throw new SerializerException(""String_Node_Str"");
          }
 else           if (Character.isHighSurrogate(c)) {
            if (i + 1 < stringVal.length()) {
              char low=stringVal.charAt(i + 1);
              if (!Character.isLowSurrogate(low)) {
                throw new SerializerException(""String_Node_Str"");
              }
              try {
                out.write(""String_Node_Str"" + new String(Hex.encode(Charset.forName(""String_Node_Str"").encode(new String(new char[]{c,low})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
              }
 catch (              UnsupportedCharsetException e) {
                throw new SerializerException(e);
              }
              i++;
            }
 else {
              throw new SerializerException(""String_Node_Str"");
            }
          }
 else {
            out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.UTF_16.encode(CharBuffer.wrap(new char[]{c})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
          }
        }
      }
    }
    out.print(SINGLE_QUOTE);
  }
 else   if (val instanceof Enumerator) {
    out.print(""String_Node_Str"" + val + ""String_Node_Str"");
  }
 else {
    out.print(val == null ? ""String_Node_Str"" : val.toString());
  }
}","private void writePrimitive(PrintWriter out,Object val) throws SerializerException {
  if (val instanceof Tristate) {
    Tristate bool=(Tristate)val;
    if (bool == Tristate.TRUE) {
      out.print(BOOLEAN_TRUE);
    }
 else     if (bool == Tristate.FALSE) {
      out.print(BOOLEAN_FALSE);
    }
 else     if (bool == Tristate.UNDEFINED) {
      out.print(BOOLEAN_UNDEFINED);
    }
  }
 else   if (val instanceof Double) {
    if (((Double)val).isInfinite() || (((Double)val).isNaN())) {
      LOGGER.info(""String_Node_Str"");
      out.print(""String_Node_Str"");
    }
 else {
      String string=val.toString();
      if (string.endsWith(DOT_0)) {
        out.print(string.substring(0,string.length() - 1));
      }
 else {
        out.print(string);
      }
    }
  }
 else   if (val instanceof Boolean) {
    Boolean bool=(Boolean)val;
    if (bool) {
      out.print(BOOLEAN_TRUE);
    }
 else {
      out.print(BOOLEAN_FALSE);
    }
  }
 else   if (val instanceof String) {
    out.print(SINGLE_QUOTE);
    String stringVal=(String)val;
    for (int i=0; i < stringVal.length(); i++) {
      char c=stringVal.charAt(i);
      if (c == '\'') {
        out.print(""String_Node_Str"");
      }
 else       if (c == '\\') {
        out.print(""String_Node_Str"");
      }
 else       if (c >= 32 && c <= 126) {
        out.print(c);
      }
 else       if (c < 255) {
        out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.ISO_8859_1.encode(CharBuffer.wrap(new char[]{(char)c})).array()),Charsets.UTF_8).toUpperCase());
      }
 else {
        if (useIso8859_1) {
          ByteBuffer encode=Charsets.ISO_8859_1.encode(new String(new char[]{(char)(c - 128)}));
          out.write(""String_Node_Str"" + (char)encode.get());
        }
 else {
          if (Character.isLowSurrogate(c)) {
            throw new SerializerException(""String_Node_Str"");
          }
 else           if (Character.isHighSurrogate(c)) {
            if (i + 1 < stringVal.length()) {
              char low=stringVal.charAt(i + 1);
              if (!Character.isLowSurrogate(low)) {
                throw new SerializerException(""String_Node_Str"");
              }
              try {
                out.write(""String_Node_Str"" + new String(Hex.encode(Charset.forName(""String_Node_Str"").encode(new String(new char[]{c,low})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
              }
 catch (              UnsupportedCharsetException e) {
                throw new SerializerException(e);
              }
              i++;
            }
 else {
              throw new SerializerException(""String_Node_Str"");
            }
          }
 else {
            out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.UTF_16BE.encode(CharBuffer.wrap(new char[]{c})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
          }
        }
      }
    }
    out.print(SINGLE_QUOTE);
  }
 else   if (val instanceof Enumerator) {
    out.print(""String_Node_Str"" + val + ""String_Node_Str"");
  }
 else {
    out.print(val == null ? ""String_Node_Str"" : val.toString());
  }
}",0.9996756406097956
160614,"public SGeometry convertToSObject(Geometry input){
  if (input == null) {
    return null;
  }
  SGeometry result=new SGeometry();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.getIndices().addAll(input.getIndices());
  result.getVertices().addAll(input.getVertices());
  result.getNormals().addAll(input.getNormals());
  return result;
}","public SExternalServiceCalled convertToSObject(ExternalServiceCalled input){
  if (input == null) {
    return null;
  }
  SExternalServiceCalled result=new SExternalServiceCalled();
  result.setOid(input.getOid());
  result.setRid(input.getRid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(SNotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  Service serviceVal=input.getService();
  result.setServiceId(serviceVal == null ? -1 : serviceVal.getOid());
  return result;
}",0.1918465227817745
160615,"public Geometry convertFromSObject(SGeometry input,Geometry result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.getIndices().addAll(input.getIndices());
  result.getVertices().addAll(input.getVertices());
  result.getNormals().addAll(input.getNormals());
  return result;
}","public ExternalServiceCalled convertFromSObject(SExternalServiceCalled input,ExternalServiceCalled result,DatabaseSession session) throws BimserverDatabaseException {
  if (input == null) {
    return null;
  }
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setState(NotifictionResultEnum.values()[input.getState().ordinal()]);
  result.setPercentage(input.getPercentage());
  result.getInfos().addAll(input.getInfos());
  result.getWarnings().addAll(input.getWarnings());
  result.getErrors().addAll(input.getErrors());
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),false,null));
  result.setService((Service)session.get(StorePackage.eINSTANCE.getService(),input.getServiceId(),false,null));
  return result;
}",0.3874788494077834
160616,"public void init(){
  try {
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void init(){
  try {
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SProject();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SUser();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SRevision();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SConcreteRevision();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SGeoTag();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCheckout();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServerSettings();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SUserSettings();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SPluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SSerializerPluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectIDMPluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SIfcEnginePluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDeserializerPluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCheckinResult();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDownloadResult();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCheckoutResult();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDataValue();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDataObject();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SUserSession();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SMigration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SReferenceDataValue();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SListDataValue();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SSimpleDataValue();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDatabaseInformationItem();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDatabaseInformationCategory();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDatabaseInformation();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SPluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SSerializerPluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDeserializerPluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SRevisionSummaryType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SRevisionSummaryContainer();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SRevisionSummary();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SLongAction();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SLongCheckinAction();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectIDMPluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCompareItem();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectAdded();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectRemoved();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectModified();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCompareContainer();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SCompareResult();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SLongActionState();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServerInfo();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SVersion();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SIfcEnginePluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SFile();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SExtendedDataSchema();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SExtendedData();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SQueryEnginePluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SQueryEnginePluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SModelMergerPluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SModelMergerPluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SModelComparePluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SModelComparePluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SProfileDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SService();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SToken();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServicePluginDescriptor();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SInternalServicePluginConfiguration();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceInterface();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceMethod();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceField();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SServiceParameter();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.STypeDefinition();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectDefinition();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SPrimitiveDefinition();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SArrayDefinition();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SParameterDefinition();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SObjectType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SPrimitiveType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SLongType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SDoubleType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SStringType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SBooleanType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SArrayType();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SParameter();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),null));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SImmediateNotificationResult();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SExternalServiceUpdate();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SPercentageChange();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SBounds();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SVector3f();
      }
    }
));
    addType(new SClass(this,Class.forName(""String_Node_Str""),new SConstructor(){
      public Object newInstance(){
        return new org.bimserver.interfaces.objects.SGeometry();
      }
    }
));
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.4633248371566129
160617,"public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  stringBuffer.append(TEXT_2);
  stringBuffer.append(TEXT_3);
  stringBuffer.append(Licenser.getCommentedLicenseText(new File(""String_Node_Str"")));
  stringBuffer.append(TEXT_4);
  Object[] args=(Object[])argument;
  Class<?> cl=(Class<?>)args[0];
  EPackage ePackage=(EPackage)args[1];
  stringBuffer.append(TEXT_5);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_6);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_7);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_8);
  for (  EClassifier eClassifier : ePackage.getEClassifiers()) {
    if (eClassifier instanceof EClass || eClassifier instanceof EEnum) {
      stringBuffer.append(TEXT_9);
      stringBuffer.append(eClassifier.getName());
      stringBuffer.append(TEXT_10);
    }
  }
  stringBuffer.append(TEXT_11);
  return stringBuffer.toString();
}","public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  stringBuffer.append(TEXT_2);
  stringBuffer.append(TEXT_3);
  stringBuffer.append(Licenser.getCommentedLicenseText(new File(""String_Node_Str"")));
  stringBuffer.append(TEXT_4);
  Object[] args=(Object[])argument;
  Class<?> cl=(Class<?>)args[0];
  EPackage ePackage=(EPackage)args[1];
  stringBuffer.append(TEXT_5);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_6);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_7);
  stringBuffer.append(cl.getSimpleName());
  stringBuffer.append(TEXT_8);
  for (  EClassifier eClassifier : ePackage.getEClassifiers()) {
    if (eClassifier instanceof EClass) {
      stringBuffer.append(TEXT_9);
      stringBuffer.append(eClassifier.getName());
      stringBuffer.append(TEXT_10);
      stringBuffer.append(eClassifier.getName());
      stringBuffer.append(TEXT_11);
    }
 else     if (eClassifier instanceof EEnum) {
      stringBuffer.append(TEXT_12);
      stringBuffer.append(eClassifier.getName());
      stringBuffer.append(TEXT_13);
    }
  }
  stringBuffer.append(TEXT_14);
  return stringBuffer.toString();
}",0.8637992831541219
160618,"private void writePrimitive(PrintWriter out,Object val) throws SerializerException {
  if (val instanceof Tristate) {
    Tristate bool=(Tristate)val;
    if (bool == Tristate.TRUE) {
      out.print(BOOLEAN_TRUE);
    }
 else     if (bool == Tristate.FALSE) {
      out.print(BOOLEAN_FALSE);
    }
 else     if (bool == Tristate.UNDEFINED) {
      out.print(BOOLEAN_UNDEFINED);
    }
  }
 else   if (val instanceof Double) {
    if (((Double)val).isInfinite() || (((Double)val).isNaN())) {
      LOGGER.info(""String_Node_Str"");
      out.print(""String_Node_Str"");
    }
 else {
      String string=val.toString();
      if (string.endsWith(DOT_0)) {
        out.print(string.substring(0,string.length() - 1));
      }
 else {
        out.print(string);
      }
    }
  }
 else   if (val instanceof Boolean) {
    Boolean bool=(Boolean)val;
    if (bool) {
      out.print(BOOLEAN_TRUE);
    }
 else {
      out.print(BOOLEAN_FALSE);
    }
  }
 else   if (val instanceof String) {
    out.print(SINGLE_QUOTE);
    String stringVal=(String)val;
    for (int i=0; i < stringVal.length(); i++) {
      char c=stringVal.charAt(i);
      if (c <= 126) {
        out.print(c);
      }
 else       if (c < 255) {
        out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.ISO_8859_1.encode(CharBuffer.wrap(new char[]{(char)c})).array()),Charsets.UTF_8).toUpperCase());
      }
 else {
        if (useIso8859_1) {
          ByteBuffer encode=Charsets.ISO_8859_1.encode(new String(new char[]{(char)(c - 128)}));
          out.write(""String_Node_Str"" + (char)encode.get());
        }
 else {
          if (Character.isLowSurrogate(c)) {
            throw new SerializerException(""String_Node_Str"");
          }
 else           if (Character.isHighSurrogate(c)) {
            if (i + 1 < stringVal.length()) {
              char low=stringVal.charAt(i + 1);
              if (!Character.isLowSurrogate(low)) {
                throw new SerializerException(""String_Node_Str"");
              }
              try {
                out.write(""String_Node_Str"" + new String(Hex.encode(Charset.forName(""String_Node_Str"").encode(new String(new char[]{c,low})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
              }
 catch (              UnsupportedCharsetException e) {
                throw new SerializerException(e);
              }
              i++;
            }
 else {
              throw new SerializerException(""String_Node_Str"");
            }
          }
 else {
            out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.UTF_16.encode(CharBuffer.wrap(new char[]{c})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
          }
        }
      }
    }
    out.print(SINGLE_QUOTE);
  }
 else   if (val instanceof Enumerator) {
    out.print(""String_Node_Str"" + val + ""String_Node_Str"");
  }
 else {
    out.print(val == null ? ""String_Node_Str"" : val.toString());
  }
}","private void writePrimitive(PrintWriter out,Object val) throws SerializerException {
  if (val instanceof Tristate) {
    Tristate bool=(Tristate)val;
    if (bool == Tristate.TRUE) {
      out.print(BOOLEAN_TRUE);
    }
 else     if (bool == Tristate.FALSE) {
      out.print(BOOLEAN_FALSE);
    }
 else     if (bool == Tristate.UNDEFINED) {
      out.print(BOOLEAN_UNDEFINED);
    }
  }
 else   if (val instanceof Double) {
    if (((Double)val).isInfinite() || (((Double)val).isNaN())) {
      LOGGER.info(""String_Node_Str"");
      out.print(""String_Node_Str"");
    }
 else {
      String string=val.toString();
      if (string.endsWith(DOT_0)) {
        out.print(string.substring(0,string.length() - 1));
      }
 else {
        out.print(string);
      }
    }
  }
 else   if (val instanceof Boolean) {
    Boolean bool=(Boolean)val;
    if (bool) {
      out.print(BOOLEAN_TRUE);
    }
 else {
      out.print(BOOLEAN_FALSE);
    }
  }
 else   if (val instanceof String) {
    out.print(SINGLE_QUOTE);
    String stringVal=(String)val;
    for (int i=0; i < stringVal.length(); i++) {
      char c=stringVal.charAt(i);
      if (c == '\'') {
        out.print(""String_Node_Str"");
      }
 else       if (c == '\\') {
        out.print(""String_Node_Str"");
      }
 else       if (c >= 32 && c <= 126) {
        out.print(c);
      }
 else       if (c < 255) {
        out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.ISO_8859_1.encode(CharBuffer.wrap(new char[]{(char)c})).array()),Charsets.UTF_8).toUpperCase());
      }
 else {
        if (useIso8859_1) {
          ByteBuffer encode=Charsets.ISO_8859_1.encode(new String(new char[]{(char)(c - 128)}));
          out.write(""String_Node_Str"" + (char)encode.get());
        }
 else {
          if (Character.isLowSurrogate(c)) {
            throw new SerializerException(""String_Node_Str"");
          }
 else           if (Character.isHighSurrogate(c)) {
            if (i + 1 < stringVal.length()) {
              char low=stringVal.charAt(i + 1);
              if (!Character.isLowSurrogate(low)) {
                throw new SerializerException(""String_Node_Str"");
              }
              try {
                out.write(""String_Node_Str"" + new String(Hex.encode(Charset.forName(""String_Node_Str"").encode(new String(new char[]{c,low})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
              }
 catch (              UnsupportedCharsetException e) {
                throw new SerializerException(e);
              }
              i++;
            }
 else {
              throw new SerializerException(""String_Node_Str"");
            }
          }
 else {
            out.write(""String_Node_Str"" + new String(Hex.encode(Charsets.UTF_16.encode(CharBuffer.wrap(new char[]{c})).array()),Charsets.UTF_8).toUpperCase() + ""String_Node_Str"");
          }
        }
      }
    }
    out.print(SINGLE_QUOTE);
  }
 else   if (val instanceof Enumerator) {
    out.print(""String_Node_Str"" + val + ""String_Node_Str"");
  }
 else {
    out.print(val == null ? ""String_Node_Str"" : val.toString());
  }
}",0.9731800766283524
160619,"public CheckinStatus convertFromSObject(SCheckinStatus input){
  return CheckinStatus.values()[input.ordinal()];
}","public UserChanged convertFromSObject(SUserChanged input,BimDatabaseSession session){
  if (input == null) {
    return null;
  }
  UserChanged result=LogFactory.eINSTANCE.createUserChanged();
  result.setOid(input.getOid());
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),false,null));
  result.setUser((User)session.get(StorePackage.eINSTANCE.getUser(),input.getUserId(),false,null));
  return result;
}",0.1021897810218978
160620,"public SCheckinStatus convertToSObject(CheckinStatus input){
  return SCheckinStatus.values()[input.ordinal()];
}","public SUserChanged convertToSObject(UserChanged input){
  if (input == null) {
    return null;
  }
  SUserChanged result=new SUserChanged();
  result.setOid(input.getOid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  User userVal=input.getUser();
  result.setUserId(userVal == null ? -1 : userVal.getOid());
  return result;
}",0.2053712480252764
160621,"public AddDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IdEObject idEObject){
  super(bimDatabaseSession,accessMethod);
  this.idEObject=idEObject;
}","public AddDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,T idEObject){
  super(bimDatabaseSession,accessMethod);
  this.idEObject=idEObject;
}",0.9719101123595506
160622,"@Override public void updateSerializer(SSerializer serializer) throws ServerException, UserException {
  requireAdminAuthenticationAndRunningServer();
  BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    Serializer convert=converter.convertFromSObject(serializer,session);
    if (convert.getObjectIDM() != null) {
      session.store(convert.getObjectIDM());
    }
    session.executeAndCommitAction(new UpdateSerializerDatabaseAction(session,accessMethod,convert),DEADLOCK_RETRIES);
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}","@Override public void updateSerializer(SSerializer serializer) throws ServerException, UserException {
  requireAdminAuthenticationAndRunningServer();
  BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    Serializer convert=converter.convertFromSObject(serializer,session);
    session.executeAndCommitAction(new UpdateSerializerDatabaseAction(session,accessMethod,convert),DEADLOCK_RETRIES);
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    session.close();
  }
}",0.917186108637578
160623,"public void start(String address,int port,String homedir,String resourceBase){
  if (homedir.startsWith(""String_Node_Str"") && homedir.endsWith(""String_Node_Str"")) {
    homedir=homedir.substring(1,homedir.length() - 2);
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  BimServerConfig bimServerConfig=new BimServerConfig();
  bimServerConfig.setHomeDir(new File(homedir));
  bimServerConfig.setResourceFetcher(new JarResourceFetcher());
  bimServerConfig.setStartEmbeddedWebServer(true);
  bimServerConfig.setPort(port);
  bimServerConfig.setClassPath(System.getProperty(""String_Node_Str""));
  bimServer=new BimServer(bimServerConfig);
  try {
    bimServer.getEmbeddedWebServer().getContext().setResourceBase(""String_Node_Str"");
    bimServer.getPluginManager().loadAllPluginsFromDirectoryOfJars(new File(""String_Node_Str""));
    bimServer.start();
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.info(""String_Node_Str"");
}","public void start(String address,int port,String homedir,String resourceBase){
  if (homedir.startsWith(""String_Node_Str"") && homedir.endsWith(""String_Node_Str"")) {
    homedir=homedir.substring(1,homedir.length() - 2);
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  BimServerConfig bimServerConfig=new BimServerConfig();
  bimServerConfig.setHomeDir(new File(homedir));
  bimServerConfig.setResourceFetcher(new JarResourceFetcher());
  bimServerConfig.setStartEmbeddedWebServer(true);
  bimServerConfig.setPort(port);
  bimServerConfig.setClassPath(System.getProperty(""String_Node_Str""));
  bimServer=new BimServer(bimServerConfig);
  try {
    bimServer.getEmbeddedWebServer().getContext().setResourceBase(""String_Node_Str"");
    bimServer.getPluginManager().loadAllPluginsFromDirectoryOfJars(new File(""String_Node_Str""));
    bimServer.start();
    LOGGER.info(""String_Node_Str"");
  }
 catch (  PluginException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  ServerException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseInitException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  BimDatabaseException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  DatabaseRestartRequiredException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.926923076923077
160624,"@Override public Boolean execute() throws UserException, BimDatabaseException, BimDeadlockException {
  User actingUser=getUserByUoid(actingUoid);
  final Project project=getProjectByPoid(poid);
  if (actingUser.getUserType() == UserType.ADMIN || actingUser.getHasRightsOn().contains(project)) {
    delete(project);
    ProjectDeleted projectDeleted=LogFactory.eINSTANCE.createProjectDeleted();
    projectDeleted.setAccessMethod(getAccessMethod());
    projectDeleted.setDate(new Date());
    projectDeleted.setExecutor(actingUser);
    projectDeleted.setProject(project);
    getDatabaseSession().store(project);
    return true;
  }
 else {
    throw new UserException(""String_Node_Str"");
  }
}","@Override public Boolean execute() throws UserException, BimDatabaseException, BimDeadlockException {
  User actingUser=getUserByUoid(actingUoid);
  final Project project=getProjectByPoid(poid);
  if (actingUser.getUserType() == UserType.ADMIN || (actingUser.getHasRightsOn().contains(project) && bimServer.getSettingsManager().getSettings().isAllowUsersToCreateTopLevelProjects())) {
    delete(project);
    ProjectDeleted projectDeleted=LogFactory.eINSTANCE.createProjectDeleted();
    projectDeleted.setAccessMethod(getAccessMethod());
    projectDeleted.setDate(new Date());
    projectDeleted.setExecutor(actingUser);
    projectDeleted.setProject(project);
    getDatabaseSession().store(project);
    return true;
  }
 else {
    throw new UserException(""String_Node_Str"");
  }
}",0.94006734006734
160625,"public DeleteProjectDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,long poid,long actingUoid){
  super(bimDatabaseSession,accessMethod);
  this.poid=poid;
  this.actingUoid=actingUoid;
}","public DeleteProjectDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,BimServer bimServer,long poid,long actingUoid){
  super(bimDatabaseSession,accessMethod);
  this.bimServer=bimServer;
  this.poid=poid;
  this.actingUoid=actingUoid;
}",0.8677685950413223
160626,"@Override public List<Deserializer> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getDeserializer());
  Map<Long,Deserializer> result=getDatabaseSession().query(condition,Deserializer.class,false,null);
  List<Deserializer> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<Deserializer> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      Deserializer deserializer=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(deserializer.getClassName())) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}","@Override public List<Deserializer> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getDeserializer());
  Map<Long,Deserializer> result=getDatabaseSession().query(condition,Deserializer.class,false,null);
  List<Deserializer> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<Deserializer> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      Deserializer deserializer=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(deserializer.getClassName()) || !deserializer.getEnabled()) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}",0.9782923299565848
160627,"@Override public List<IfcEngine> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getIfcEngine());
  Map<Long,IfcEngine> result=getDatabaseSession().query(condition,IfcEngine.class,false,null);
  List<IfcEngine> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<IfcEngine> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      IfcEngine ifcEngine=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(ifcEngine.getClassName())) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}","@Override public List<IfcEngine> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getIfcEngine());
  Map<Long,IfcEngine> result=getDatabaseSession().query(condition,IfcEngine.class,false,null);
  List<IfcEngine> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<IfcEngine> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      IfcEngine ifcEngine=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(ifcEngine.getClassName()) || !ifcEngine.getEnabled()) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}",0.979622641509434
160628,"public List<ObjectIDM> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getObjectIDM());
  Map<Long,ObjectIDM> result=getDatabaseSession().query(condition,ObjectIDM.class,false,null);
  List<ObjectIDM> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<ObjectIDM> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      ObjectIDM objectIdm=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(objectIdm.getClassName())) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}","public List<ObjectIDM> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getObjectIDM());
  Map<Long,ObjectIDM> result=getDatabaseSession().query(condition,ObjectIDM.class,false,null);
  List<ObjectIDM> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<ObjectIDM> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      ObjectIDM objectIdm=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(objectIdm.getClassName()) || !objectIdm.getEnabled()) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}",0.9793103448275862
160629,"@Override public List<Serializer> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getSerializer());
  Map<Long,Serializer> result=getDatabaseSession().query(condition,Serializer.class,false,null);
  List<Serializer> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<Serializer> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      Serializer serializer=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(serializer.getClassName())) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}","@Override public List<Serializer> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Condition condition=new IsOfTypeCondition(StorePackage.eINSTANCE.getSerializer());
  Map<Long,Serializer> result=getDatabaseSession().query(condition,Serializer.class,false,null);
  List<Serializer> mapToList=CollectionUtils.mapToList(result);
  if (onlyEnabled) {
    Iterator<Serializer> iterator=mapToList.iterator();
    while (iterator.hasNext()) {
      Serializer serializer=iterator.next();
      if (!bimServer.getPluginManager().isEnabled(serializer.getClassName()) || !serializer.getEnabled()) {
        iterator.remove();
      }
    }
  }
  return mapToList;
}",0.9791666666666666
160630,"private void checkOtherUsersCheckouts(Project project,User user,Set<String> warnings){
  int activeCheckouts=0;
  for (  Project p : getAllRelatedProjects(project)) {
    for (    Checkout checkout : p.getCheckouts()) {
      if (checkout.getActive() && checkout.getUser() != user) {
        activeCheckouts++;
      }
    }
  }
  if (activeCheckouts == 1) {
    warnings.add(""String_Node_Str"");
  }
 else   if (activeCheckouts > 1) {
    warnings.add(""String_Node_Str"" + activeCheckouts + ""String_Node_Str"");
  }
}","public void checkOtherUsersCheckouts(Project project,User user,Set<String> warnings){
  int activeCheckouts=0;
  for (  Project p : getAllRelatedProjects(project)) {
    for (    Checkout checkout : p.getCheckouts()) {
      if (checkout.getActive() && checkout.getUser() != user) {
        activeCheckouts++;
      }
    }
  }
  if (activeCheckouts == 1) {
    warnings.add(""String_Node_Str"");
  }
 else   if (activeCheckouts > 1) {
    warnings.add(""String_Node_Str"" + activeCheckouts + ""String_Node_Str"");
  }
}",0.989310009718173
160631,"@Override public Set<String> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Project project=getProjectByPoid(poid);
  User user=getUserByUoid(uoid);
  Set<String> warnings=new HashSet<String>();
  checkInterleavingCommits(project,user,warnings);
  checkOtherUsersCheckouts(project,user,warnings);
  return warnings;
}","@Override public Set<String> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Project project=getProjectByPoid(poid);
  User user=getUserByUoid(uoid);
  Set<String> warnings=new HashSet<String>();
  checkOtherUsersCheckouts(project,user,warnings);
  return warnings;
}",0.8902627511591963
160632,"public UpdateDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IdEObject idEObject){
  super(bimDatabaseSession,accessMethod);
  this.idEObject=idEObject;
}","public UpdateDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,T idEObject){
  super(bimDatabaseSession,accessMethod);
  this.idEObject=idEObject;
}",0.9723756906077348
160633,"public UpdateIfcEngineDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IfcEngine ifcEngine){
  super(bimDatabaseSession,accessMethod,ifcEngine);
}","public UpdateIfcEngineDatabaseAction(BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IfcEngine ifcEngine){
  super(bimDatabaseSession,accessMethod,ifcEngine);
  this.ifcEngine=ifcEngine;
}",0.9263157894736842
160634,"@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    String fileName=dataHandler.getName();
    if (fileName == null || fileName.trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(new File(userDirIncoming,fileName)));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      if (deserializer == null) {
        throw new UserException(""String_Node_Str"" + deserializerName + ""String_Node_Str"");
      }
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,fileName,false,fileSize);
      User user=(User)session.get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
      CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(bimServer,null,accessMethod,poid,currentUoid,model,comment,merge,true);
      LongCheckinAction longAction=new LongCheckinAction(bimServer,user,checkinDatabaseAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}","@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    String fileName=dataHandler.getName();
    if (fileName == null || fileName.trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(new File(userDirIncoming,fileName)));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      if (deserializer == null) {
        throw new UserException(""String_Node_Str"" + deserializerName + ""String_Node_Str"");
      }
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,fileName,false,fileSize);
      if (model.size() == 0) {
        throw new DeserializeException(""String_Node_Str"");
      }
      User user=(User)session.get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
      CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(bimServer,null,accessMethod,poid,currentUoid,model,comment,merge,true);
      LongCheckinAction longAction=new LongCheckinAction(bimServer,user,checkinDatabaseAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}",0.9818719940806512
160635,"@Override public Boolean deleteProject(Long poid) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    BimDatabaseAction<Boolean> action=new DeleteProjectDatabaseAction(session,accessMethod,poid,currentUoid);
    return session.executeAndCommitAction(action,DEADLOCK_RETRIES);
  }
 catch (  Exception e) {
    handleException(e);
    return false;
  }
 finally {
    session.close();
  }
}","@Override public Boolean deleteProject(Long poid) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    BimDatabaseAction<Boolean> action=new DeleteProjectDatabaseAction(session,accessMethod,bimServer,poid,currentUoid);
    return session.executeAndCommitAction(action,DEADLOCK_RETRIES);
  }
 catch (  Exception e) {
    handleException(e);
    return false;
  }
 finally {
    session.close();
  }
}",0.9901185770750988
160636,"@Override public SDownloadResult getDownloadData(final Integer actionId) throws ServerException, UserException {
  LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(actionId);
  if (longAction != null) {
    longAction.waitForCompletion();
    SCheckoutResult result=longAction.getCheckoutResult();
    bimServer.getLongActionManager().remove(actionId);
    return result;
  }
 else {
    throw new UserException(""String_Node_Str"" + actionId);
  }
}","@Override public SDownloadResult getDownloadData(final Integer actionId) throws ServerException, UserException {
  LongDownloadOrCheckoutAction longAction=(LongDownloadOrCheckoutAction)bimServer.getLongActionManager().getLongAction(actionId);
  if (longAction != null) {
    longAction.waitForCompletion();
    SCheckoutResult result=longAction.getCheckoutResult();
    return result;
  }
 else {
    throw new UserException(""String_Node_Str"" + actionId);
  }
}",0.9437052200614124
160637,"public static void main(String[] args){
  String address=""String_Node_Str"";
  String port=""String_Node_Str"";
  String homedir=""String_Node_Str"";
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      address=arg.substring(8);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      port=arg.substring(5);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      homedir=arg.substring(8);
    }
  }
  final JarBimWebServer server=new JarBimWebServer();
  server.start(address,Integer.parseInt(port),homedir,""String_Node_Str"");
}","public static void main(String[] args){
  String address=""String_Node_Str"";
  String port=""String_Node_Str"";
  String homedir=""String_Node_Str"";
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      address=arg.substring(8);
      if (address.startsWith(""String_Node_Str"") && address.endsWith(""String_Node_Str"")) {
        address=address.substring(1,address.length() - 2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      port=arg.substring(5);
      if (port.startsWith(""String_Node_Str"") && port.endsWith(""String_Node_Str"")) {
        port=port.substring(1,port.length() - 2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      homedir=arg.substring(8);
      if (homedir.startsWith(""String_Node_Str"") && homedir.endsWith(""String_Node_Str"")) {
        homedir=homedir.substring(1,homedir.length() - 2);
      }
    }
  }
  final JarBimWebServer server=new JarBimWebServer();
  server.start(address,Integer.parseInt(port),homedir,""String_Node_Str"");
}",0.6801007556675063
160638,"public DatabaseSession(Database database,BimTransaction bimTransaction,boolean readOnly){
  this.database=database;
  this.bimTransaction=bimTransaction;
  this.readOnly=readOnly;
}","public DatabaseSession(Database database,BimTransaction bimTransaction,boolean readOnly){
  this.database=database;
  this.bimTransaction=bimTransaction;
  this.readOnly=readOnly;
  stackTrace=Thread.currentThread().getStackTrace();
}",0.8722891566265061
160639,"@Override public ObjectIdentifier getOidOfGuid(String guid,int pid,int rid) throws BimDeadlockException, BimDatabaseException {
  RecordIterator recordIterator=database.getColumnDatabase().getRecordIterator(""String_Node_Str"",BinUtils.intToByteArray(pid),BinUtils.intToByteArray(pid),this);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
      int pidOfRecord=buffer.getInt();
      buffer.getLong();
      int ridOfRecord=-buffer.getInt();
      if (ridOfRecord == rid && pid == pidOfRecord) {
        ByteBuffer value=ByteBuffer.wrap(record.getValue());
        byte unsettablesSize=value.get();
        value.position(value.position() + unsettablesSize);
        if (value.capacity() > 1) {
          int stringLength=value.getInt();
          if (stringLength == -1) {
            return null;
          }
 else {
            LOGGER.info(""String_Node_Str"" + stringLength);
            String s=BinUtils.readString(value,stringLength);
            if (s.equals(guid)) {
              short referenceCid=value.getShort();
              long referencedOid=value.getLong();
              return new ObjectIdentifier(referencedOid,referenceCid);
            }
          }
        }
      }
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
  return null;
}","@Override public ObjectIdentifier getOidOfGuid(String guid,int pid,int rid) throws BimDeadlockException, BimDatabaseException {
  RecordIterator recordIterator=database.getColumnDatabase().getRecordIterator(""String_Node_Str"",BinUtils.intToByteArray(pid),BinUtils.intToByteArray(pid),this);
  try {
    Record record=recordIterator.next();
    while (record != null) {
      ByteBuffer buffer=ByteBuffer.wrap(record.getKey());
      int pidOfRecord=buffer.getInt();
      buffer.getLong();
      int ridOfRecord=-buffer.getInt();
      if (ridOfRecord == rid && pid == pidOfRecord) {
        ByteBuffer value=ByteBuffer.wrap(record.getValue());
        byte unsettablesSize=value.get();
        value.position(value.position() + unsettablesSize);
        if (value.capacity() > 1) {
          int stringLength=value.getInt();
          if (stringLength == -1) {
            return null;
          }
 else {
            String s=BinUtils.readString(value,stringLength);
            if (s.equals(guid)) {
              short referenceCid=value.getShort();
              long referencedOid=value.getLong();
              return new ObjectIdentifier(referencedOid,referenceCid);
            }
          }
        }
      }
      record=recordIterator.next();
    }
  }
  finally {
    recordIterator.close();
  }
  return null;
}",0.9782046545991872
160640,"@Override public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimDatabaseException, UserException {
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      commit(progressHandler);
      return result;
    }
 catch (    BimDeadlockException e) {
      bimTransaction.rollback();
      clearCache();
      objectsToCommit.clear();
      bimTransaction=database.getColumnDatabase().startTransaction();
      LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"");
    }
catch (    BimDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw e;
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}","@Override public <T>T executeAndCommitAction(BimDatabaseAction<T> action,int retries,ProgressHandler progressHandler) throws BimDatabaseException, UserException {
  for (int i=0; i < retries; i++) {
    try {
      T result=action.execute();
      commit(progressHandler);
      return result;
    }
 catch (    BimDeadlockException e) {
      bimTransaction.rollback();
      clearCache();
      objectsToCommit.clear();
      bimTransaction=database.getColumnDatabase().startTransaction();
      LOGGER.info(""String_Node_Str"" + action.getClass().getSimpleName() + ""String_Node_Str""+ i+ ""String_Node_Str"");
      LOGGER.info(""String_Node_Str"",e);
      long[] ownerTxnIds=e.getLockException().getOwnerTxnIds();
      for (      long txnid : ownerTxnIds) {
        BimDatabaseSession databaseSession=database.getDatabaseSession(txnid);
        LOGGER.info(""String_Node_Str"" + databaseSession);
        StackTraceElement[] stackTraceElements=databaseSession.getStackTrace();
        for (        StackTraceElement stackTraceElement : stackTraceElements) {
          LOGGER.info(""String_Node_Str"" + stackTraceElement);
        }
      }
    }
catch (    BimDatabaseException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw e;
    }
    if (i < retries - 1) {
      try {
        Thread.sleep(new Random().nextInt((i + 1) * 1000));
      }
 catch (      InterruptedException e1) {
        LOGGER.error(""String_Node_Str"",e1);
      }
    }
  }
  throw new BimDatabaseException(""String_Node_Str"" + retries + ""String_Node_Str"");
}",0.7587563951200315
160641,"@SuppressWarnings(""String_Node_Str"") @Override public Set<T> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Map<Long,Revision> oidToRoidMap=new HashMap<Long,Revision>();
  Set<EidClash> clashDetections=bimServer.getClashDetectionCache().getClashDetection(clashDetectionSettings);
  if (clashDetections != null) {
    return (Set<T>)clashDetections;
  }
  Project project=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  Revision revision : clashDetectionSettings.getRevisions()) {
    project=revision.getProject();
    for (    ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
      IfcModel source=new IfcModel();
      getDatabaseSession().getMap(source,concreteRevision.getProject().getId(),concreteRevision.getId(),true,null);
      source.setDate(concreteRevision.getDate());
      ifcModelSet.add(source);
      for (      Long oid : source.keySet()) {
        oidToRoidMap.put(oid,revision);
      }
    }
  }
  IfcModelInterface ifcModel=bimServer.getMergerFactory().createMerger().merge(project,ifcModelSet,false);
  IfcModel newModel=new IfcModel();
  Map<IdEObject,IdEObject> converted=new HashMap<IdEObject,IdEObject>();
  for (  IdEObject idEObject : ifcModel.getValues()) {
    if (!clashDetectionSettings.getIgnoredClasses().contains(idEObject.eClass().getName())) {
      cleanupModel(idEObject.eClass(),idEObject,newModel,ifcModel,converted);
    }
  }
  Collection<SerializerPlugin> allSerializerPlugins=bimServer.getPluginManager().getAllSerializerPlugins(""String_Node_Str"",true);
  if (!allSerializerPlugins.isEmpty()) {
    SerializerPlugin serializerPlugin=allSerializerPlugins.iterator().next();
    EmfSerializer ifcSerializer=serializerPlugin.createSerializer();
    try {
      ifcSerializer.init(newModel,null,bimServer.getPluginManager(),bimServer.getPluginManager().requireIfcEngine().createIfcEngine());
      byte[] bytes=ifcSerializer.getBytes();
      IfcEngine ifcEngine=bimServer.getPluginManager().requireIfcEngine().createIfcEngine();
      ifcEngine.init();
      try {
        IfcEngineModel ifcEngineModel=ifcEngine.openModel(bytes);
        try {
          Set<IfcEngineClash> clashes=ifcEngineModel.findClashesWithEids(clashDetectionSettings.getMargin());
          Set<EidClash> eidClashes=new HashSet<EidClash>();
          for (          IfcEngineClash clash : clashes) {
            EidClash eidClash=StoreFactory.eINSTANCE.createEidClash();
            eidClash.setEid1(clash.getEid1());
            eidClash.setEid2(clash.getEid2());
            eidClash.setName1(clash.getName1());
            eidClash.setName2(clash.getName2());
            eidClash.setType1(clash.getType1());
            eidClash.setType2(clash.getType2());
            eidClashes.add(eidClash);
          }
          bimServer.getClashDetectionCache().storeClashDetection(clashDetectionSettings,eidClashes);
          for (          EidClash clash : eidClashes) {
            IfcRoot object1=(IfcRoot)newModel.get(clash.getEid1());
            clash.setName1(object1.getName());
            clash.setType1(object1.eClass().getName());
            clash.setRevision1(oidToRoidMap.get(clash.getEid1()));
            IfcRoot object2=(IfcRoot)newModel.get(clash.getEid2());
            clash.setName2(object2.getName());
            clash.setType2(object2.eClass().getName());
            clash.setRevision2(oidToRoidMap.get(clash.getEid2()));
          }
          return (Set<T>)eidClashes;
        }
  finally {
          ifcEngineModel.close();
        }
      }
 catch (      PluginException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        ifcEngine.close();
      }
    }
 catch (    PluginException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    SerializerException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Set<T> execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Map<Long,Revision> oidToRoidMap=new HashMap<Long,Revision>();
  Set<EidClash> clashDetections=bimServer.getClashDetectionCache().getClashDetection(clashDetectionSettings);
  if (clashDetections != null) {
    return (Set<T>)clashDetections;
  }
  Project project=null;
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  Revision revision : clashDetectionSettings.getRevisions()) {
    project=revision.getProject();
    for (    ConcreteRevision concreteRevision : revision.getConcreteRevisions()) {
      IfcModel source=new IfcModel();
      getDatabaseSession().getMap(source,concreteRevision.getProject().getId(),concreteRevision.getId(),true,null);
      source.setDate(concreteRevision.getDate());
      ifcModelSet.add(source);
      for (      Long oid : source.keySet()) {
        oidToRoidMap.put(oid,revision);
      }
    }
  }
  IfcModelInterface ifcModel=bimServer.getMergerFactory().createMerger().merge(project,ifcModelSet,false);
  IfcModel newModel=new IfcModel();
  Map<IdEObject,IdEObject> converted=new HashMap<IdEObject,IdEObject>();
  for (  IdEObject idEObject : ifcModel.getValues()) {
    if (!clashDetectionSettings.getIgnoredClasses().contains(idEObject.eClass().getName())) {
      cleanupModel(idEObject.eClass(),idEObject,newModel,ifcModel,converted);
    }
  }
  Collection<SerializerPlugin> allSerializerPlugins=bimServer.getPluginManager().getAllSerializerPlugins(""String_Node_Str"",true);
  if (!allSerializerPlugins.isEmpty()) {
    SerializerPlugin serializerPlugin=allSerializerPlugins.iterator().next();
    EmfSerializer ifcSerializer=serializerPlugin.createSerializer();
    try {
      try {
        ifcSerializer.init(newModel,null,bimServer.getPluginManager(),bimServer.getPluginManager().requireIfcEngine().createIfcEngine());
        byte[] bytes=ifcSerializer.getBytes();
        Plugin plugin=bimServer.getPluginManager().getPlugin(""String_Node_Str"",true);
        if (plugin != null && plugin instanceof IfcEnginePlugin) {
          IfcEnginePlugin ifcEnginePlugin=(IfcEnginePlugin)plugin;
          IfcEngine ifcEngine=ifcEnginePlugin.createIfcEngine();
          ifcEngine.init();
          IfcEngineModel ifcEngineModel=ifcEngine.openModel(bytes);
          try {
            Set<IfcEngineClash> clashes=ifcEngineModel.findClashesWithEids(clashDetectionSettings.getMargin());
            Set<EidClash> eidClashes=new HashSet<EidClash>();
            for (            IfcEngineClash clash : clashes) {
              EidClash eidClash=StoreFactory.eINSTANCE.createEidClash();
              eidClash.setEid1(clash.getEid1());
              eidClash.setEid2(clash.getEid2());
              eidClash.setName1(clash.getName1());
              eidClash.setName2(clash.getName2());
              eidClash.setType1(clash.getType1());
              eidClash.setType2(clash.getType2());
              eidClashes.add(eidClash);
            }
            bimServer.getClashDetectionCache().storeClashDetection(clashDetectionSettings,eidClashes);
            for (            EidClash clash : eidClashes) {
              IfcRoot object1=(IfcRoot)newModel.get(clash.getEid1());
              clash.setName1(object1.getName());
              clash.setType1(object1.eClass().getName());
              clash.setRevision1(oidToRoidMap.get(clash.getEid1()));
              IfcRoot object2=(IfcRoot)newModel.get(clash.getEid2());
              clash.setName2(object2.getName());
              clash.setType2(object2.eClass().getName());
              clash.setRevision2(oidToRoidMap.get(clash.getEid2()));
            }
            return (Set<T>)eidClashes;
          }
  finally {
            ifcEngineModel.close();
            ifcEngine.close();
          }
        }
      }
 catch (      PluginException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
 catch (    SerializerException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return null;
}",0.9159090909090908
160642,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void fillDataObject(BiMap<? extends Long,? extends EObject> mapResult,EObject eObject,DataObject dataObject){
  for (  EStructuralFeature eStructuralFeature : eObject.eClass().getEAllStructuralFeatures()) {
    Object eGet=eObject.eGet(eStructuralFeature);
    if (eStructuralFeature instanceof EAttribute) {
      if (!eStructuralFeature.getName().endsWith(""String_Node_Str"")) {
        if (eStructuralFeature.isMany()) {
          ListDataValue listDataValue=StoreFactory.eINSTANCE.createListDataValue();
          listDataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(listDataValue);
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
            EStructuralFeature asStringFeature=eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
            List list=(List)eObject.eGet(asStringFeature);
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              dataValue.setStringValue(o.toString());
              listDataValue.getValues().add(dataValue);
            }
          }
 else {
            List list=(List)eGet;
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              if (eGet != null) {
                dataValue.setStringValue(o.toString());
              }
 else {
                dataValue.setStringValue(null);
              }
              listDataValue.getValues().add(dataValue);
            }
          }
        }
 else {
          SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
          if (eGet != null) {
            dataValue.setStringValue(eGet.toString());
          }
 else {
            dataValue.setStringValue(null);
          }
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
        }
      }
    }
 else     if (eStructuralFeature instanceof EReference) {
      if (eStructuralFeature.isMany()) {
        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
          List list=(List)eObject.eGet(eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str""));
          ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
          for (          Object o : list) {
            SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
            simpleDataValue.setStringValue(o.toString());
            dataValue.getValues().add(simpleDataValue);
          }
        }
 else {
          EList<? extends EObject> list=(EList<EObject>)eGet;
          for (          EObject item : list) {
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataValue.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(dataValue);
            if (item instanceof WrappedValue || item instanceof IfcGloballyUniqueId) {
              EObject referenceEObject=(EObject)item;
              SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              simpleDataValue.setStringValue(referenceEObject.eGet(referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"")).toString());
              dataValue.getValues().add(simpleDataValue);
            }
 else {
              Long oid=mapResult.inverse().get(item);
              String guid=getGuid(item);
              ReferenceDataValue referenceDataValue=StoreFactory.eINSTANCE.createReferenceDataValue();
              referenceDataValue.setTypeName(item.eClass().getName());
              referenceDataValue.setOid(oid);
              referenceDataValue.setGuid(guid);
              dataValue.getValues().add(referenceDataValue);
            }
          }
        }
      }
 else {
        EObject eObject2=(EObject)eGet;
        if (eObject2 != null) {
          if (eObject2 instanceof WrappedValue || eObject2 instanceof IfcGloballyUniqueId) {
            EObject referenceEObject=(EObject)eGet;
            if (referenceEObject instanceof IfcLengthMeasure) {
              System.out.println();
            }
            SimpleDataValue e=StoreFactory.eINSTANCE.createSimpleDataValue();
            EStructuralFeature wrappedValueFeature=referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"");
            Object eGet2=referenceEObject.eGet(wrappedValueFeature);
            if (eGet2 != null) {
              e.setStringValue(eGet2.toString());
            }
 else {
              e.setStringValue(null);
            }
            e.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(e);
          }
 else {
            Long oid=mapResult.inverse().get(eObject2);
            String guid=getGuid(eObject2);
            ReferenceDataValue reference=StoreFactory.eINSTANCE.createReferenceDataValue();
            reference.setTypeName(eObject2.eClass().getName());
            reference.setOid(oid);
            reference.setGuid(guid);
            reference.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(reference);
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void fillDataObject(BiMap<? extends Long,? extends EObject> mapResult,EObject eObject,DataObject dataObject){
  for (  EStructuralFeature eStructuralFeature : eObject.eClass().getEAllStructuralFeatures()) {
    Object eGet=eObject.eGet(eStructuralFeature);
    if (eStructuralFeature instanceof EAttribute) {
      if (!eStructuralFeature.getName().endsWith(""String_Node_Str"")) {
        if (eStructuralFeature.isMany()) {
          ListDataValue listDataValue=StoreFactory.eINSTANCE.createListDataValue();
          listDataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(listDataValue);
          if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble()) {
            EStructuralFeature asStringFeature=eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str"");
            List list=(List)eObject.eGet(asStringFeature);
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              dataValue.setStringValue(o.toString());
              listDataValue.getValues().add(dataValue);
            }
          }
 else {
            List list=(List)eGet;
            for (            Object o : list) {
              SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              if (eGet != null) {
                dataValue.setStringValue(o.toString());
              }
 else {
                dataValue.setStringValue(null);
              }
              listDataValue.getValues().add(dataValue);
            }
          }
        }
 else {
          SimpleDataValue dataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
          if (eGet != null) {
            dataValue.setStringValue(eGet.toString());
          }
 else {
            dataValue.setStringValue(null);
          }
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
        }
      }
    }
 else     if (eStructuralFeature instanceof EReference) {
      if (eStructuralFeature.isMany()) {
        if (eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDouble() || eStructuralFeature.getEType() == EcorePackage.eINSTANCE.getEDoubleObject()) {
          List list=(List)eObject.eGet(eObject.eClass().getEStructuralFeature(eStructuralFeature.getName() + ""String_Node_Str""));
          ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
          dataValue.setFieldName(eStructuralFeature.getName());
          dataObject.getValues().add(dataValue);
          for (          Object o : list) {
            SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
            simpleDataValue.setStringValue(o.toString());
            dataValue.getValues().add(simpleDataValue);
          }
        }
 else {
          EList<? extends EObject> list=(EList<EObject>)eGet;
          for (          EObject item : list) {
            ListDataValue dataValue=StoreFactory.eINSTANCE.createListDataValue();
            dataValue.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(dataValue);
            if (item instanceof WrappedValue || item instanceof IfcGloballyUniqueId) {
              EObject referenceEObject=(EObject)item;
              SimpleDataValue simpleDataValue=StoreFactory.eINSTANCE.createSimpleDataValue();
              simpleDataValue.setStringValue(referenceEObject.eGet(referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"")).toString());
              dataValue.getValues().add(simpleDataValue);
            }
 else {
              Long oid=mapResult.inverse().get(item);
              String guid=getGuid(item);
              ReferenceDataValue referenceDataValue=StoreFactory.eINSTANCE.createReferenceDataValue();
              referenceDataValue.setTypeName(item.eClass().getName());
              referenceDataValue.setOid(oid);
              referenceDataValue.setGuid(guid);
              dataValue.getValues().add(referenceDataValue);
            }
          }
        }
      }
 else {
        EObject eObject2=(EObject)eGet;
        if (eObject2 != null) {
          if (eObject2 instanceof WrappedValue || eObject2 instanceof IfcGloballyUniqueId) {
            EObject referenceEObject=(EObject)eGet;
            SimpleDataValue e=StoreFactory.eINSTANCE.createSimpleDataValue();
            EStructuralFeature wrappedValueFeature=referenceEObject.eClass().getEStructuralFeature(""String_Node_Str"");
            Object eGet2=referenceEObject.eGet(wrappedValueFeature);
            if (eGet2 != null) {
              e.setStringValue(eGet2.toString());
            }
 else {
              e.setStringValue(null);
            }
            e.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(e);
          }
 else {
            Long oid=mapResult.inverse().get(eObject2);
            String guid=getGuid(eObject2);
            ReferenceDataValue reference=StoreFactory.eINSTANCE.createReferenceDataValue();
            reference.setTypeName(eObject2.eClass().getName());
            reference.setOid(oid);
            reference.setGuid(guid);
            reference.setFieldName(eStructuralFeature.getName());
            dataObject.getValues().add(reference);
          }
        }
      }
    }
  }
}",0.9897922636103152
160643,"@Override public void run(){
  initConnections();
  SConverter sConverter=new SConverter();
  running=true;
  try {
    while (running) {
      try {
        Notification notification=queue.take();
        for (        NotificationContainer notificationContainer : listeners) {
          NotificationInterface notificationInterface=notificationContainer.getNotificationInterface();
          boolean isAdmin=notificationContainer.getUser().getUserType() == UserType.ADMIN;
          if (notification instanceof NewProjectNotification) {
            if (isAdmin) {
              notificationInterface.newProject(sConverter.convertToSObject((NewProjectNotification)notification));
            }
          }
 else           if (notification instanceof NewRevisionNotification) {
            NewRevisionNotification newRevisionNotification=(NewRevisionNotification)notification;
            if (isAdmin || newRevisionNotification.getRevision().getProject().getHasAuthorizedUsers().contains(notificationContainer.getUser())) {
              notificationInterface.newRevision(sConverter.convertToSObject(newRevisionNotification));
            }
          }
        }
      }
 catch (      InterruptedException e) {
        throw e;
      }
catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  InterruptedException e) {
    if (running) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  initConnections();
  SConverter sConverter=new SConverter();
  running=true;
  try {
    while (running) {
      try {
        Notification notification=queue.take();
        for (        NotificationContainer notificationContainer : listeners) {
          NotificationInterface notificationInterface=notificationContainer.getNotificationInterface();
          boolean isAdmin=notificationContainer.getUser().getUserType() == UserType.ADMIN;
          if (notification instanceof NewProjectNotification) {
            NewProjectNotification newProjectNotification=(NewProjectNotification)notification;
            Project project=newProjectNotification.getProject();
            if (isAdmin || RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(notificationContainer.getUser(),project)) {
              notificationInterface.newProject(sConverter.convertToSObject((NewProjectNotification)notification));
            }
          }
 else           if (notification instanceof NewRevisionNotification) {
            NewRevisionNotification newRevisionNotification=(NewRevisionNotification)notification;
            Project project=newRevisionNotification.getRevision().getProject();
            if (isAdmin || RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(notificationContainer.getUser(),project)) {
              notificationInterface.newRevision(sConverter.convertToSObject(newRevisionNotification));
            }
          }
        }
      }
 catch (      InterruptedException e) {
        throw e;
      }
catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  InterruptedException e) {
    if (running) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.8310874334064556
160644,"@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    String fileName=dataHandler.getName();
    if (fileName == null || fileName.trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(new File(userDirIncoming,fileName)));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      if (deserializer == null) {
        throw new UserException(""String_Node_Str"" + deserializerName + ""String_Node_Str"");
      }
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,fileName,false,fileSize);
      if (model.size() == 0) {
        throw new DeserializeException(""String_Node_Str"");
      }
      User user=(User)session.get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
      CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(bimServer,null,accessMethod,poid,currentUoid,model,comment,merge,true);
      LongCheckinAction longAction=new LongCheckinAction(bimServer,user,checkinDatabaseAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}","@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession();
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    String fileName=dataHandler.getName();
    if (fileName == null || fileName.trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      if (fileName.contains(""String_Node_Str"")) {
        fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
      }
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      fileName=dateFormat.format(new Date()) + ""String_Node_Str"" + fileName;
      File file=new File(userDirIncoming,fileName);
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(file));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      if (deserializer == null) {
        throw new UserException(""String_Node_Str"" + deserializerName + ""String_Node_Str"");
      }
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,fileName,false,fileSize);
      if (model.size() == 0) {
        throw new DeserializeException(""String_Node_Str"");
      }
      User user=(User)session.get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
      CheckinDatabaseAction checkinDatabaseAction=new CheckinDatabaseAction(bimServer,null,accessMethod,poid,currentUoid,model,comment,merge,true);
      LongCheckinAction longAction=new LongCheckinAction(bimServer,user,checkinDatabaseAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServerException(e);
  }
 finally {
    session.close();
  }
}",0.9548660084626234
160645,"public void init(){
  try {
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void init(){
  try {
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
    addType(new SClass(this,Class.forName(""String_Node_Str"")));
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9922216820612544
160646,"public UserChanged convertFromSObject(SUserChanged input,BimDatabaseSession session){
  if (input == null) {
    return null;
  }
  UserChanged result=LogFactory.eINSTANCE.createUserChanged();
  result.setOid(input.getOid());
  result.setDate(input.getDate());
  result.setAccessMethod(AccessMethod.values()[input.getAccessMethod().ordinal()]);
  result.setExecutor((User)session.get(StorePackage.eINSTANCE.getUser(),input.getExecutorId(),false,null));
  result.setUser((User)session.get(StorePackage.eINSTANCE.getUser(),input.getUserId(),false,null));
  return result;
}","public Version convertFromSObject(SVersion input,BimDatabaseSession session){
  if (input == null) {
    return null;
  }
  Version result=StoreFactory.eINSTANCE.createVersion();
  result.setOid(input.getOid());
  result.setMajor(input.getMajor());
  result.setMinor(input.getMinor());
  result.setRevision(input.getRevision());
  result.setDate(input.getDate());
  result.setDownloadUrl(input.getDownloadUrl());
  result.setSupportUrl(input.getSupportUrl());
  result.setSupportEmail(input.getSupportEmail());
  return result;
}",0.3072727272727272
160647,"public SUserChanged convertToSObject(UserChanged input){
  if (input == null) {
    return null;
  }
  SUserChanged result=new SUserChanged();
  result.setOid(input.getOid());
  result.setDate(input.getDate());
  result.setAccessMethod(SAccessMethod.values()[input.getAccessMethod().ordinal()]);
  User executorVal=input.getExecutor();
  result.setExecutorId(executorVal == null ? -1 : executorVal.getOid());
  User userVal=input.getUser();
  result.setUserId(userVal == null ? -1 : userVal.getOid());
  return result;
}","public SVersion convertToSObject(Version input){
  if (input == null) {
    return null;
  }
  SVersion result=new SVersion();
  result.setOid(input.getOid());
  result.setMajor(input.getMajor());
  result.setMinor(input.getMinor());
  result.setRevision(input.getRevision());
  result.setDate(input.getDate());
  result.setDownloadUrl(input.getDownloadUrl());
  result.setSupportUrl(input.getSupportUrl());
  result.setSupportEmail(input.getSupportEmail());
  return result;
}",0.226680040120361
160648,"/** 
 * Create a new BIMserver
 * @param homeDir A directory where the user can store instance specific configuration files
 * @param resourceFetcher A resource fetcher
 */
public BimServer(BimServerConfig config){
  this.config=config;
  try {
    if (config.getHomeDir() != null) {
      initHomeDir();
    }
    fixLogging();
    LOGGER=LoggerFactory.getLogger(BimServer.class);
    LOGGER.info(""String_Node_Str"");
    if (config.getHomeDir() != null) {
      LOGGER.info(""String_Node_Str"" + config.getHomeDir().getAbsolutePath() + ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    serverInfoManager=new ServerInfoManager();
    UncaughtExceptionHandler uncaughtExceptionHandler=new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (e instanceof OutOfMemoryError) {
          serverInfoManager.setOutOfMemory();
          LOGGER.error(""String_Node_Str"",e);
        }
 else         if (e instanceof Error) {
          serverInfoManager.setErrorMessage(e.getMessage());
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
;
    Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
    versionChecker=new VersionChecker(config.getResourceFetcher());
    SVersion localVersion=versionChecker.getLocalVersion();
    if (localVersion != null) {
      LOGGER.info(""String_Node_Str"" + localVersion.getMajor() + ""String_Node_Str""+ localVersion.getMinor()+ ""String_Node_Str""+ localVersion.getRevision()+ ""String_Node_Str""+ localVersion.getDate());
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    try {
      pluginManager=new PluginManager(config.getHomeDir(),config.getClassPath());
      pluginManager.addPluginChangeListener(new PluginChangeListener(){
        @Override public void pluginStateChanged(        PluginContext pluginContext,        boolean enabled){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPlugin_Name(),new StringLiteral(pluginContext.getPlugin().getClass().getName()));
          BimDatabaseSession session=bimDatabase.createSession(true);
          try {
            Map<Long,org.bimserver.models.store.Plugin> pluginsFound=session.query(pluginCondition,org.bimserver.models.store.Plugin.class,false,null);
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              org.bimserver.models.store.Plugin pluginFound=pluginsFound.values().iterator().next();
              pluginFound.setEnabled(pluginContext.isEnabled());
              session.store(pluginFound);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimDatabaseException e) {
            e.printStackTrace();
          }
catch (          BimDeadlockException e) {
            e.printStackTrace();
          }
 finally {
            session.close();
          }
        }
      }
);
      pluginManager.loadPlugin(ObjectIDMPlugin.class,""String_Node_Str"",""String_Node_Str"",new SchemaFieldObjectIDMPlugin());
    }
 catch (    Exception e) {
      e.printStackTrace();
      LOGGER.error(""String_Node_Str"",e);
    }
    clashDetectionCache=new ClashDetectionCache();
    compareCache=new CompareCache();
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer=new EmbeddedWebServer(this);
    }
  }
 catch (  Throwable e) {
    if (LOGGER == null) {
      e.printStackTrace();
    }
    LOGGER.error(""String_Node_Str"",e);
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}","/** 
 * Create a new BIMserver
 * @param homeDir A directory where the user can store instance specific configuration files
 * @param resourceFetcher A resource fetcher
 */
public BimServer(BimServerConfig config){
  this.config=config;
  try {
    if (config.getHomeDir() != null) {
      initHomeDir();
    }
    fixLogging();
    LOGGER=LoggerFactory.getLogger(BimServer.class);
    LOGGER.info(""String_Node_Str"");
    if (config.getHomeDir() != null) {
      LOGGER.info(""String_Node_Str"" + config.getHomeDir().getAbsolutePath() + ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    serverInfoManager=new ServerInfoManager();
    UncaughtExceptionHandler uncaughtExceptionHandler=new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (e instanceof OutOfMemoryError) {
          serverInfoManager.setOutOfMemory();
          LOGGER.error(""String_Node_Str"",e);
        }
 else         if (e instanceof Error) {
          serverInfoManager.setErrorMessage(e.getMessage());
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
;
    Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
    versionChecker=new VersionChecker(config.getResourceFetcher());
    try {
      pluginManager=new PluginManager(config.getHomeDir(),config.getClassPath());
      pluginManager.addPluginChangeListener(new PluginChangeListener(){
        @Override public void pluginStateChanged(        PluginContext pluginContext,        boolean enabled){
          Condition pluginCondition=new AttributeCondition(StorePackage.eINSTANCE.getPlugin_Name(),new StringLiteral(pluginContext.getPlugin().getClass().getName()));
          BimDatabaseSession session=bimDatabase.createSession(true);
          try {
            Map<Long,org.bimserver.models.store.Plugin> pluginsFound=session.query(pluginCondition,org.bimserver.models.store.Plugin.class,false,null);
            if (pluginsFound.size() == 0) {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName() + ""String_Node_Str"");
            }
 else             if (pluginsFound.size() == 1) {
              org.bimserver.models.store.Plugin pluginFound=pluginsFound.values().iterator().next();
              pluginFound.setEnabled(pluginContext.isEnabled());
              session.store(pluginFound);
            }
 else {
              LOGGER.error(""String_Node_Str"" + pluginContext.getPlugin().getClass().getName());
            }
            session.commit();
          }
 catch (          BimDatabaseException e) {
            e.printStackTrace();
          }
catch (          BimDeadlockException e) {
            e.printStackTrace();
          }
 finally {
            session.close();
          }
        }
      }
);
      pluginManager.loadPlugin(ObjectIDMPlugin.class,""String_Node_Str"",""String_Node_Str"",new SchemaFieldObjectIDMPlugin());
    }
 catch (    Exception e) {
      e.printStackTrace();
      LOGGER.error(""String_Node_Str"",e);
    }
    clashDetectionCache=new ClashDetectionCache();
    compareCache=new CompareCache();
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer=new EmbeddedWebServer(this);
    }
  }
 catch (  Throwable e) {
    if (LOGGER == null) {
      e.printStackTrace();
    }
    LOGGER.error(""String_Node_Str"",e);
    serverInfoManager.setErrorMessage(e.getMessage());
  }
}",0.4453070844308887
160649,"public void start() throws DatabaseInitException, BimDatabaseException, PluginException, DatabaseRestartRequiredException, ServerException {
  try {
    pluginManager.initAllLoadedPlugins();
    serverStartTime=new GregorianCalendar();
    longActionManager=new LongActionManager();
    Set<Ifc2x3Package> packages=CollectionUtils.singleSet(Ifc2x3Package.eINSTANCE);
    templateEngine=new TemplateEngine();
    templateEngine.init(config.getResourceFetcher().getResource(""String_Node_Str""));
    File databaseDir=new File(config.getHomeDir(),""String_Node_Str"");
    BerkeleyColumnDatabase columnDatabase=new BerkeleyColumnDatabase(databaseDir);
    bimDatabase=new Database(this,packages,columnDatabase);
    try {
      bimDatabase.init();
    }
 catch (    DatabaseRestartRequiredException e) {
      bimDatabase.close();
      columnDatabase=new BerkeleyColumnDatabase(databaseDir);
      bimDatabase=new Database(this,packages,columnDatabase);
      try {
        bimDatabase.init();
      }
 catch (      InconsistentModelsException e1) {
        LOGGER.error(""String_Node_Str"",e);
        serverInfoManager.setServerState(ServerState.FATAL_ERROR);
        serverInfoManager.setErrorMessage(""String_Node_Str"");
      }
    }
catch (    InconsistentModelsException e) {
      LOGGER.error(""String_Node_Str"",e);
      serverInfoManager.setServerState(ServerState.FATAL_ERROR);
      serverInfoManager.setErrorMessage(""String_Node_Str"");
    }
    protocolBuffersMetaData=new ProtocolBuffersMetaData();
    try {
      protocolBuffersMetaData.load(config.getResourceFetcher().getResource(""String_Node_Str""));
      protocolBuffersMetaData.load(config.getResourceFetcher().getResource(""String_Node_Str""));
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    sService=new SService(ServiceInterface.class);
    notificationsManager=new NotificationsManager(this);
    notificationsManager.start();
    settingsManager=new SettingsManager(bimDatabase);
    serverInfoManager.init(this);
    serverInfoManager.update();
    emfSerializerFactory=new EmfSerializerFactory();
    emfDeserializerFactory=new EmfDeserializerFactory();
    if (serverInfoManager.getServerState() == ServerState.MIGRATION_REQUIRED) {
      serverInfoManager.registerStateChangeListener(new StateChangeListener(){
        @Override public void stateChanged(        ServerState oldState,        ServerState newState){
          if (oldState == ServerState.MIGRATION_REQUIRED && newState == ServerState.RUNNING) {
            try {
              initDatabaseDependantItems();
            }
 catch (            BimDatabaseException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
 else {
      initDatabaseDependantItems();
    }
    mailSystem=new MailSystem(settingsManager);
    serviceFactory=new ServiceInterfaceFactory(this);
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer.start();
    }
    diskCacheManager=new DiskCacheManager(new File(config.getHomeDir(),""String_Node_Str""),settingsManager);
    mergerFactory=new MergerFactory(settingsManager);
    setSystemService(serviceFactory.newService(AccessMethod.INTERNAL,""String_Node_Str""));
    try {
      if (!((Service)getSystemService()).loginAsSystem()) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    bimScheduler=new JobScheduler(this);
    bimScheduler.start();
    try {
      ServiceFactoryRegistry serviceFactoryRegistry=new ServiceFactoryRegistry();
      serviceFactoryRegistry.registerServiceFactory(serviceFactory);
      protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactoryRegistry,settingsManager.getSettings().getProtocolBuffersPort());
      protocolBuffersServer.registerService(new ReflectiveRpcChannel(serviceFactory,protocolBuffersMetaData,new SService(ServiceInterface.class)));
      protocolBuffersServer.start();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    ServerStarted serverStarted=LogFactory.eINSTANCE.createServerStarted();
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(null);
    BimDatabaseSession session=bimDatabase.createSession(true);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimDeadlockException e) {
      throw new BimDatabaseException(e);
    }
 finally {
      session.close();
    }
    CommandLine commandLine=new CommandLine(this);
    commandLine.start();
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    serverInfoManager.setErrorMessage(e.getMessage());
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void start() throws DatabaseInitException, BimDatabaseException, PluginException, DatabaseRestartRequiredException, ServerException {
  try {
    SVersion localVersion=versionChecker.getLocalVersion();
    if (localVersion != null) {
      LOGGER.info(""String_Node_Str"" + localVersion.getMajor() + ""String_Node_Str""+ localVersion.getMinor()+ ""String_Node_Str""+ localVersion.getRevision()+ ""String_Node_Str""+ localVersion.getDate());
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    pluginManager.initAllLoadedPlugins();
    serverStartTime=new GregorianCalendar();
    longActionManager=new LongActionManager();
    Set<Ifc2x3Package> packages=CollectionUtils.singleSet(Ifc2x3Package.eINSTANCE);
    templateEngine=new TemplateEngine();
    templateEngine.init(config.getResourceFetcher().getResource(""String_Node_Str""));
    File databaseDir=new File(config.getHomeDir(),""String_Node_Str"");
    BerkeleyColumnDatabase columnDatabase=new BerkeleyColumnDatabase(databaseDir);
    bimDatabase=new Database(this,packages,columnDatabase);
    try {
      bimDatabase.init();
    }
 catch (    DatabaseRestartRequiredException e) {
      bimDatabase.close();
      columnDatabase=new BerkeleyColumnDatabase(databaseDir);
      bimDatabase=new Database(this,packages,columnDatabase);
      try {
        bimDatabase.init();
      }
 catch (      InconsistentModelsException e1) {
        LOGGER.error(""String_Node_Str"",e);
        serverInfoManager.setServerState(ServerState.FATAL_ERROR);
        serverInfoManager.setErrorMessage(""String_Node_Str"");
      }
    }
catch (    InconsistentModelsException e) {
      LOGGER.error(""String_Node_Str"",e);
      serverInfoManager.setServerState(ServerState.FATAL_ERROR);
      serverInfoManager.setErrorMessage(""String_Node_Str"");
    }
    protocolBuffersMetaData=new ProtocolBuffersMetaData();
    try {
      protocolBuffersMetaData.load(config.getResourceFetcher().getResource(""String_Node_Str""));
      protocolBuffersMetaData.load(config.getResourceFetcher().getResource(""String_Node_Str""));
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    sService=new SService(ServiceInterface.class);
    notificationsManager=new NotificationsManager(this);
    notificationsManager.start();
    settingsManager=new SettingsManager(bimDatabase);
    serverInfoManager.init(this);
    serverInfoManager.update();
    emfSerializerFactory=new EmfSerializerFactory();
    emfDeserializerFactory=new EmfDeserializerFactory();
    if (serverInfoManager.getServerState() == ServerState.MIGRATION_REQUIRED) {
      serverInfoManager.registerStateChangeListener(new StateChangeListener(){
        @Override public void stateChanged(        ServerState oldState,        ServerState newState){
          if (oldState == ServerState.MIGRATION_REQUIRED && newState == ServerState.RUNNING) {
            try {
              initDatabaseDependantItems();
            }
 catch (            BimDatabaseException e) {
              LOGGER.error(""String_Node_Str"",e);
            }
          }
        }
      }
);
    }
 else {
      initDatabaseDependantItems();
    }
    mailSystem=new MailSystem(settingsManager);
    serviceFactory=new ServiceInterfaceFactory(this);
    if (config.isStartEmbeddedWebServer()) {
      embeddedWebServer.start();
    }
    diskCacheManager=new DiskCacheManager(new File(config.getHomeDir(),""String_Node_Str""),settingsManager);
    mergerFactory=new MergerFactory(settingsManager);
    setSystemService(serviceFactory.newService(AccessMethod.INTERNAL,""String_Node_Str""));
    try {
      if (!((Service)getSystemService()).loginAsSystem()) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    bimScheduler=new JobScheduler(this);
    bimScheduler.start();
    try {
      ServiceFactoryRegistry serviceFactoryRegistry=new ServiceFactoryRegistry();
      serviceFactoryRegistry.registerServiceFactory(serviceFactory);
      protocolBuffersServer=new ProtocolBuffersServer(protocolBuffersMetaData,serviceFactoryRegistry,settingsManager.getSettings().getProtocolBuffersPort());
      protocolBuffersServer.registerService(new ReflectiveRpcChannel(serviceFactory,protocolBuffersMetaData,new SService(ServiceInterface.class)));
      protocolBuffersServer.start();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    ServerStarted serverStarted=LogFactory.eINSTANCE.createServerStarted();
    serverStarted.setDate(new Date());
    serverStarted.setAccessMethod(AccessMethod.INTERNAL);
    serverStarted.setExecutor(null);
    BimDatabaseSession session=bimDatabase.createSession(true);
    try {
      session.store(serverStarted);
      session.commit();
    }
 catch (    BimDeadlockException e) {
      throw new BimDatabaseException(e);
    }
 finally {
      session.close();
    }
    CommandLine commandLine=new CommandLine(this);
    commandLine.start();
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    serverInfoManager.setErrorMessage(e.getMessage());
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.965214791189076
160650,"public void execute(){
  BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    createCheckinAction.setDatabaseSession(session);
    session.executeAndCommitAction(createCheckinAction,10,new ProgressHandler(){
      @Override public void progress(      int current,      int max){
        LongCheckinAction.this.progress=current * 100 / max;
      }
    }
);
    session.close();
    BimDatabaseSession extraSession=bimServer.getDatabase().createSession(true);
    try {
      ConcreteRevision concreteRevision=(ConcreteRevision)extraSession.get(StorePackage.eINSTANCE.getConcreteRevision(),createCheckinAction.getCroid(),false,null);
      for (      Revision r : concreteRevision.getRevisions()) {
        Revision latest=null;
        for (        Revision r2 : r.getProject().getRevisions()) {
          if (latest == null || r2.getId() > latest.getId()) {
            latest=r2;
          }
        }
        if (latest != null) {
          latest.getProject().setLastRevision(latest);
          extraSession.store(latest.getProject());
        }
      }
      extraSession.commit();
    }
  finally {
      extraSession.close();
    }
    session=bimServer.getDatabase().createReadOnlySession();
    for (    Revision revision : createCheckinAction.getConcreteRevision(createCheckinAction.getCroid()).getRevisions()) {
      NewRevisionAdded newRevisionAdded=LogFactory.eINSTANCE.createNewRevisionAdded();
      newRevisionAdded.setDate(new Date());
      newRevisionAdded.setExecutor(user);
      newRevisionAdded.setRevision(revision);
      newRevisionAdded.setAccessMethod(createCheckinAction.getAccessMethod());
    }
    startClashDetection(session);
  }
 catch (  OutOfMemoryError e) {
    bimServer.getServerInfoManager().setOutOfMemory();
    return;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    long croid=createCheckinAction.getCroid();
    try {
      BimDatabaseSession rollBackSession=bimServer.getDatabase().createSession(true);
      try {
        Throwable throwable=e;
        while (throwable.getCause() != null) {
          throwable=throwable.getCause();
        }
        ConcreteRevision concreteRevision=(ConcreteRevision)rollBackSession.get(StorePackage.eINSTANCE.getConcreteRevision(),croid,false,null);
        concreteRevision.setState(CheckinState.ERROR);
        concreteRevision.setLastError(throwable.getMessage());
        for (        Revision revision : concreteRevision.getRevisions()) {
          revision.setState(CheckinState.ERROR);
          revision.setLastError(throwable.getMessage());
        }
        rollBackSession.store(concreteRevision);
        rollBackSession.commit();
      }
  finally {
        rollBackSession.close();
      }
    }
 catch (    BimDeadlockException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
catch (    BimDatabaseException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
 finally {
    session.close();
  }
  done();
}","public void execute(){
  BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    createCheckinAction.setDatabaseSession(session);
    session.executeAndCommitAction(createCheckinAction,10,new ProgressHandler(){
      @Override public void progress(      int current,      int max){
        LongCheckinAction.this.progress=current * 100 / max;
      }
    }
);
    session.close();
    BimDatabaseSession extraSession=bimServer.getDatabase().createSession(true);
    try {
      ConcreteRevision concreteRevision=(ConcreteRevision)extraSession.get(StorePackage.eINSTANCE.getConcreteRevision(),createCheckinAction.getCroid(),false,null);
      Map<Revision,Project> projects=new HashMap<Revision,Project>();
      for (      Revision r : concreteRevision.getRevisions()) {
        projects.put(r,r.getProject());
      }
      for (      Revision r : concreteRevision.getRevisions()) {
        Revision latest=null;
        for (        Revision r2 : projects.get(r).getRevisions()) {
          if (latest == null || r2.getId() > latest.getId()) {
            latest=r2;
          }
        }
        if (latest != null) {
          Project p=latest.getProject();
          p.setLastRevision(latest);
          extraSession.store(p);
        }
      }
      extraSession.commit();
    }
  finally {
      extraSession.close();
    }
    session=bimServer.getDatabase().createReadOnlySession();
    for (    Revision revision : createCheckinAction.getConcreteRevision(createCheckinAction.getCroid()).getRevisions()) {
      NewRevisionAdded newRevisionAdded=LogFactory.eINSTANCE.createNewRevisionAdded();
      newRevisionAdded.setDate(new Date());
      newRevisionAdded.setExecutor(user);
      newRevisionAdded.setRevision(revision);
      newRevisionAdded.setAccessMethod(createCheckinAction.getAccessMethod());
    }
    startClashDetection(session);
  }
 catch (  OutOfMemoryError e) {
    bimServer.getServerInfoManager().setOutOfMemory();
    return;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    long croid=createCheckinAction.getCroid();
    try {
      BimDatabaseSession rollBackSession=bimServer.getDatabase().createSession(true);
      try {
        Throwable throwable=e;
        while (throwable.getCause() != null) {
          throwable=throwable.getCause();
        }
        ConcreteRevision concreteRevision=(ConcreteRevision)rollBackSession.get(StorePackage.eINSTANCE.getConcreteRevision(),croid,false,null);
        concreteRevision.setState(CheckinState.ERROR);
        concreteRevision.setLastError(throwable.getMessage());
        for (        Revision revision : concreteRevision.getRevisions()) {
          revision.setState(CheckinState.ERROR);
          revision.setLastError(throwable.getMessage());
        }
        rollBackSession.store(concreteRevision);
        rollBackSession.commit();
      }
  finally {
        rollBackSession.close();
      }
    }
 catch (    BimDeadlockException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
catch (    BimDatabaseException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
 finally {
    session.close();
  }
  done();
}",0.9568333604821632
160651,"private void setLengthUnitMeasure(IfcModelInterface model,SIPrefix prefix){
  Map<Long,IdEObject> objects=model.getObjects();
  boolean prefixFound=false;
  for (  IdEObject object : objects.values()) {
    if (object instanceof IfcProject) {
      IfcUnitAssignment unitsInContext=((IfcProject)object).getUnitsInContext();
      EList<IfcUnit> units=unitsInContext.getUnits();
      for (      IfcUnit unit : units) {
        if (unit instanceof IfcSIUnit) {
          IfcSIUnit ifcSIUnit=(IfcSIUnit)unit;
          IfcUnitEnum unitType=ifcSIUnit.getUnitType();
          if (unitType == IfcUnitEnum.LENGTHUNIT) {
            prefixFound=true;
            if (prefix == SIPrefix.METER) {
              ifcSIUnit.setPrefix(null);
            }
 else {
              ifcSIUnit.setPrefix(IfcSIPrefix.valueOf(prefix.getLiteral()));
            }
            break;
          }
        }
      }
    }
    if (prefixFound)     break;
  }
}","private void setLengthUnitMeasure(IfcModelInterface model,SIPrefix prefix){
  Map<Long,IdEObject> objects=model.getObjects();
  boolean prefixFound=false;
  for (  IdEObject object : objects.values()) {
    if (object instanceof IfcProject) {
      IfcUnitAssignment unitsInContext=((IfcProject)object).getUnitsInContext();
      EList<IfcUnit> units=unitsInContext.getUnits();
      for (      IfcUnit unit : units) {
        if (unit instanceof IfcSIUnit) {
          IfcSIUnit ifcSIUnit=(IfcSIUnit)unit;
          IfcUnitEnum unitType=ifcSIUnit.getUnitType();
          if (unitType == IfcUnitEnum.LENGTHUNIT) {
            prefixFound=true;
            if (prefix == SIPrefix.METER) {
              ifcSIUnit.setPrefix(null);
            }
 else {
              String siPrefix=prefix.getLiteral().substring(0,prefix.getLiteral().length() - 5).toUpperCase();
              ifcSIUnit.setPrefix(IfcSIPrefix.valueOf(siPrefix));
            }
            break;
          }
        }
      }
    }
    if (prefixFound) {
      break;
    }
  }
}",0.9111111111111112
160652,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void updateReferences(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      String guid=((IfcRoot)idEObject).getGlobalId().getWrappedValue();
      IfcRoot oldObject=resultModel.get(guid);
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        Object referencedObject=idEObject.eGet(eReference);
        if (referencedObject instanceof IfcRoot) {
          String referencedGuid=((IfcRoot)referencedObject).getGlobalId().getWrappedValue();
          IfcRoot newObject=resultModel.get(referencedGuid);
          oldObject.eSet(eReference,newObject);
          LOGGER.info(""String_Node_Str"" + guid + ""String_Node_Str""+ referencedGuid);
        }
 else         if (referencedObject instanceof List) {
          List referencedList=(List)referencedObject;
          List oldReferencedList=(List)oldObject.eGet(eReference);
          for (          Object object : referencedList) {
            if (object instanceof IfcRoot) {
              IfcRoot referencedItem=(IfcRoot)object;
              String itemGuid=referencedItem.getGlobalId().getWrappedValue();
              oldReferencedList.add(resultModel.get(itemGuid));
              LOGGER.info(""String_Node_Str"" + guid + ""String_Node_Str""+ itemGuid);
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void updateReferences(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      String guid=((IfcRoot)idEObject).getGlobalId().getWrappedValue();
      IfcRoot oldObject=resultModel.get(guid);
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        Object referencedObject=idEObject.eGet(eReference);
        if (referencedObject instanceof IfcRoot) {
          String referencedGuid=((IfcRoot)referencedObject).getGlobalId().getWrappedValue();
          IfcRoot newObject=resultModel.get(referencedGuid);
          oldObject.eSet(eReference,newObject);
        }
 else         if (referencedObject instanceof List) {
          List referencedList=(List)referencedObject;
          List oldReferencedList=(List)oldObject.eGet(eReference);
          for (          Object object : referencedList) {
            if (object instanceof IfcRoot) {
              IfcRoot referencedItem=(IfcRoot)object;
              String itemGuid=referencedItem.getGlobalId().getWrappedValue();
              oldReferencedList.add(resultModel.get(itemGuid));
            }
          }
        }
      }
    }
  }
}",0.9365558912386708
160653,"private void copyAttributesGuidObjectsAndAddNewObjects(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      IfcRoot ifcRoot=(IfcRoot)idEObject;
      String guid=ifcRoot.getGlobalId().getWrappedValue();
      if (resultModel.contains(guid)) {
        LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ guid);
        IfcRoot oldObject=resultModel.get(guid);
        for (        EAttribute eAttribute : idEObject.eClass().getEAllAttributes()) {
          Object newValue=idEObject.eGet(eAttribute);
          oldObject.eSet(eAttribute,newValue);
        }
      }
 else {
        LOGGER.info(""String_Node_Str"" + idEObject.eClass().getName() + ""String_Node_Str""+ guid);
        IdEObject newObject=(IdEObject)idEObject.eClass().getEPackage().getEFactoryInstance().create(idEObject.eClass());
        newObject.setOid(idEObject.getOid());
        ((IfcRoot)newObject).setGlobalId(newGuid(guid));
        for (        EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
          newObject.eSet(eAttribute,idEObject.eGet(eAttribute));
        }
        resultModel.add(newObject.getOid(),newObject);
      }
    }
  }
}","private void copyAttributesGuidObjectsAndAddNewObjects(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      IfcRoot ifcRoot=(IfcRoot)idEObject;
      String guid=ifcRoot.getGlobalId().getWrappedValue();
      if (resultModel.contains(guid)) {
        IfcRoot oldObject=resultModel.get(guid);
        for (        EAttribute eAttribute : idEObject.eClass().getEAllAttributes()) {
          Object newValue=idEObject.eGet(eAttribute);
          oldObject.eSet(eAttribute,newValue);
        }
      }
 else {
        IdEObject newObject=(IdEObject)idEObject.eClass().getEPackage().getEFactoryInstance().create(idEObject.eClass());
        newObject.setOid(idEObject.getOid());
        ((IfcRoot)newObject).setGlobalId(newGuid(guid));
        for (        EAttribute eAttribute : newObject.eClass().getEAllAttributes()) {
          newObject.eSet(eAttribute,idEObject.eGet(eAttribute));
        }
        resultModel.add(newObject.getOid(),newObject);
      }
    }
  }
}",0.6986547085201794
160654,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fixExplicitNullReferences(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      String guid=((IfcRoot)idEObject).getGlobalId().getWrappedValue();
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          List list=(List)idEObject.eGet(eReference);
          List oldList=(List)resultModel.get(guid).eGet(eReference);
          Set<Object> guidsToRemove=new HashSet<Object>();
          for (          Object o : oldList) {
            if (o instanceof IfcRoot) {
              String referredGuid=((IfcRoot)o).getGlobalId().getWrappedValue();
              if (newModel.contains(referredGuid)) {
                boolean found=false;
                for (                Object q : list) {
                  if (q instanceof IfcRoot) {
                    String qGuid=((IfcRoot)q).getGlobalId().getWrappedValue();
                    if (qGuid.equals(referredGuid)) {
                      found=true;
                      break;
                    }
                  }
                }
                if (!found) {
                  guidsToRemove.add(referredGuid);
                }
              }
            }
          }
          if (!guidsToRemove.isEmpty()) {
            LOGGER.info(""String_Node_Str"");
            oldList.removeAll(guidsToRemove);
          }
        }
 else {
          if (idEObject.eGet(eReference) == null) {
            Object eGet=resultModel.get(guid).eGet(eReference);
            if (eGet != null) {
              if (eGet instanceof IfcRoot) {
                String oldGuid=((IfcRoot)eGet).getGlobalId().getWrappedValue();
                if (newModel.contains(oldGuid)) {
                  LOGGER.info(""String_Node_Str"");
                  resultModel.get(guid).eSet(eReference,null);
                }
              }
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fixExplicitNullReferences(){
  for (  IdEObject idEObject : newModel.getValues()) {
    if (idEObject instanceof IfcRoot) {
      String guid=((IfcRoot)idEObject).getGlobalId().getWrappedValue();
      for (      EReference eReference : idEObject.eClass().getEAllReferences()) {
        if (eReference.isMany()) {
          List list=(List)idEObject.eGet(eReference);
          List oldList=(List)resultModel.get(guid).eGet(eReference);
          Set<Object> guidsToRemove=new HashSet<Object>();
          for (          Object o : oldList) {
            if (o instanceof IfcRoot) {
              String referredGuid=((IfcRoot)o).getGlobalId().getWrappedValue();
              if (newModel.contains(referredGuid)) {
                boolean found=false;
                for (                Object q : list) {
                  if (q instanceof IfcRoot) {
                    String qGuid=((IfcRoot)q).getGlobalId().getWrappedValue();
                    if (qGuid.equals(referredGuid)) {
                      found=true;
                      break;
                    }
                  }
                }
                if (!found) {
                  guidsToRemove.add(referredGuid);
                }
              }
            }
          }
          if (!guidsToRemove.isEmpty()) {
            oldList.removeAll(guidsToRemove);
          }
        }
 else {
          if (idEObject.eGet(eReference) == null) {
            Object eGet=resultModel.get(guid).eGet(eReference);
            if (eGet != null) {
              if (eGet instanceof IfcRoot) {
                String oldGuid=((IfcRoot)eGet).getGlobalId().getWrappedValue();
                if (newModel.contains(oldGuid)) {
                  resultModel.get(guid).eSet(eReference,null);
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9551478083588176
160655,"public ProtocolBuffersConnectionHandler(Socket socket,ProtocolBuffersServer protocolBuffersServer){
  this.socket=socket;
  this.protocolBuffersServer=protocolBuffersServer;
  setName(""String_Node_Str"");
  try {
    dataInputStream=new DataInputStream(socket.getInputStream());
    outputStream=socket.getOutputStream();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public ProtocolBuffersConnectionHandler(Socket socket,ProtocolBuffersServer protocolBuffersServer){
  this.socket=socket;
  this.protocolBuffersServer=protocolBuffersServer;
  setName(""String_Node_Str"");
  try {
    dataInputStream=new DataInputStream(socket.getInputStream());
    outputStream=socket.getOutputStream();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.93573264781491
160656,"@Override public void run(){
  try {
    while (true) {
      String serviceName=dataInputStream.readUTF();
      String methodName=dataInputStream.readUTF();
      ProtocolBuffersMetaData protocolBuffersMetaData=protocolBuffersServer.getProtocolBuffersMetaData();
      if (!services.containsKey(serviceName)) {
        services.put(serviceName,protocolBuffersServer.getServiceFactoryRegistry().createServiceFactory(serviceName).newService(AccessMethod.PROTOCOL_BUFFERS,socket.getRemoteSocketAddress().toString()));
      }
      ReflectiveRpcChannel reflectiveRpcChannel=new ReflectiveRpcChannel(services.get(serviceName),protocolBuffersMetaData,new SService(ServiceInterface.class));
      MethodDescriptorContainer method=protocolBuffersMetaData.getMethod(serviceName,methodName);
      Builder requestBuilder=DynamicMessage.getDefaultInstance(method.getInputDescriptor()).newBuilderForType();
      requestBuilder.mergeDelimitedFrom(dataInputStream);
      Message response=reflectiveRpcChannel.callBlockingMethod(method,requestBuilder.build());
      response.writeDelimitedTo(outputStream);
      outputStream.flush();
    }
  }
 catch (  SocketException e) {
  }
catch (  EOFException e) {
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    while (true) {
      String serviceName=dataInputStream.readUTF();
      String methodName=dataInputStream.readUTF();
      ProtocolBuffersMetaData protocolBuffersMetaData=protocolBuffersServer.getProtocolBuffersMetaData();
      if (!services.containsKey(serviceName)) {
        services.put(serviceName,protocolBuffersServer.getServiceFactoryRegistry().createServiceFactory(serviceName).newService(AccessMethod.PROTOCOL_BUFFERS,socket.getRemoteSocketAddress().toString()));
      }
      ReflectiveRpcChannel reflectiveRpcChannel=new ReflectiveRpcChannel(services.get(serviceName),protocolBuffersMetaData,new SService(ServiceInterface.class));
      MethodDescriptorContainer method=protocolBuffersMetaData.getMethod(serviceName,methodName);
      Builder requestBuilder=DynamicMessage.getDefaultInstance(method.getInputDescriptor()).newBuilderForType();
      requestBuilder.mergeDelimitedFrom(dataInputStream);
      Message response=reflectiveRpcChannel.callBlockingMethod(method,requestBuilder.build());
      response.writeDelimitedTo(outputStream);
      outputStream.flush();
    }
  }
 catch (  SocketException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  EOFException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.929535232383808
160657,"@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    if (dataHandler.getName() == null || dataHandler.getName().trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(new File(userDirIncoming,dataHandler.getName())));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,dataHandler.getName(),false,fileSize);
      BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(session,accessMethod,poid,currentUoid,model,comment);
      GetUserByUoidDatabaseAction getUserByUoidDatabaseAction=new GetUserByUoidDatabaseAction(session,accessMethod,currentUoid);
      User userByUoid=session.executeAction(getUserByUoidDatabaseAction,DEADLOCK_RETRIES);
      ConcreteRevision revision=session.executeAndCommitAction(action,DEADLOCK_RETRIES);
      session.close();
      CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,null,accessMethod,model,currentUoid,revision.getOid(),merge);
      SCheckinResult result=new SCheckinResult();
      result.setProjectId(revision.getProject().getOid());
      LongCheckinAction longAction=new LongCheckinAction(bimServer,userByUoid,createCheckinAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      new ServerException(""String_Node_Str"",e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new UserException(""String_Node_Str"",e);
  }
 finally {
    session.close();
  }
  return -1;
}","@Override public Integer checkin(final Long poid,final String comment,String deserializerName,Long fileSize,DataHandler dataHandler,Boolean merge,Boolean sync) throws ServerException, UserException {
  requireAuthenticationAndRunningServer();
  final BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    File homeDirIncoming=new File(bimServer.getHomeDir(),""String_Node_Str"");
    if (!homeDirIncoming.isDirectory()) {
      homeDirIncoming.mkdir();
    }
    File userDirIncoming=new File(homeDirIncoming,getCurrentUser().getUsername());
    if (!userDirIncoming.exists()) {
      userDirIncoming.mkdir();
    }
    InputStream inputStream=null;
    if (dataHandler.getName() == null || dataHandler.getName().trim().equals(""String_Node_Str"")) {
      inputStream=dataHandler.getInputStream();
    }
 else {
      inputStream=new MultiplexingInputStream(dataHandler.getInputStream(),new FileOutputStream(new File(userDirIncoming,dataHandler.getName())));
    }
    try {
      EmfDeserializer deserializer=bimServer.getEmfDeserializerFactory().createDeserializer(deserializerName);
      if (deserializer == null) {
        throw new UserException(""String_Node_Str"" + deserializerName + ""String_Node_Str"");
      }
      try {
        deserializer.init(bimServer.getPluginManager().requireSchemaDefinition());
      }
 catch (      PluginException e) {
        throw new UserException(e);
      }
      IfcModelInterface model=deserializer.read(inputStream,dataHandler.getName(),false,fileSize);
      BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(session,accessMethod,poid,currentUoid,model,comment);
      GetUserByUoidDatabaseAction getUserByUoidDatabaseAction=new GetUserByUoidDatabaseAction(session,accessMethod,currentUoid);
      User userByUoid=session.executeAction(getUserByUoidDatabaseAction,DEADLOCK_RETRIES);
      ConcreteRevision revision=session.executeAndCommitAction(action,DEADLOCK_RETRIES);
      session.close();
      CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,null,accessMethod,model,currentUoid,revision.getOid(),merge);
      SCheckinResult result=new SCheckinResult();
      result.setProjectId(revision.getProject().getOid());
      LongCheckinAction longAction=new LongCheckinAction(bimServer,userByUoid,createCheckinAction);
      bimServer.getLongActionManager().start(longAction);
      if (sync) {
        longAction.waitForCompletion();
      }
      return longAction.getId();
    }
 catch (    UserException e) {
      throw e;
    }
catch (    DeserializeException e) {
      throw new UserException(e);
    }
catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      new ServerException(""String_Node_Str"",e);
    }
 finally {
      inputStream.close();
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new UserException(""String_Node_Str"",e);
  }
 finally {
    session.close();
  }
  return -1;
}",0.977245508982036
160658,"@Override public Long addUser(String username,String name,SUserType type,Boolean selfRegistration) throws ServerException, UserException {
  if (!selfRegistration) {
    requireAuthenticationAndRunningServer();
  }
 else   if (!bimServer.getSettingsManager().getSettings().isAllowSelfRegistration()) {
    requireSelfregistrationAllowed();
  }
  BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    BimDatabaseAction<Long> action=new AddUserDatabaseAction(bimServer,session,accessMethod,username,name,converter.convertFromSObject(type),currentUoid,selfRegistration);
    return session.executeAndCommitAction(action,DEADLOCK_RETRIES);
  }
 catch (  Exception e) {
    handleException(e);
    return -1L;
  }
 finally {
    session.close();
  }
}","@Override public SUser addUser(String username,String name,SUserType type,Boolean selfRegistration) throws ServerException, UserException {
  if (!selfRegistration) {
    requireAuthenticationAndRunningServer();
  }
 else   if (!bimServer.getSettingsManager().getSettings().isAllowSelfRegistration()) {
    requireSelfregistrationAllowed();
  }
  BimDatabaseSession session=bimServer.getDatabase().createSession(true);
  try {
    BimDatabaseAction<User> action=new AddUserDatabaseAction(bimServer,session,accessMethod,username,name,converter.convertFromSObject(type),currentUoid,selfRegistration);
    return converter.convertToSObject(session.executeAndCommitAction(action,DEADLOCK_RETRIES));
  }
 catch (  Exception e) {
    handleException(e);
    return null;
  }
 finally {
    session.close();
  }
}",0.9671302149178256
160659,"public java.lang.Long addUser(java.lang.String arg0,java.lang.String arg1,org.bimserver.interfaces.objects.SUserType arg2,java.lang.Boolean arg3) throws org.bimserver.shared.exceptions.UserException, org.bimserver.shared.exceptions.ServerException {
  return (java.lang.Long)reflector.callMethod(""String_Node_Str"",""String_Node_Str"",java.lang.Long.class,arg0,arg1,arg2,arg3);
}","public org.bimserver.interfaces.objects.SUser addUser(java.lang.String arg0,java.lang.String arg1,org.bimserver.interfaces.objects.SUserType arg2,java.lang.Boolean arg3) throws org.bimserver.shared.exceptions.UserException, org.bimserver.shared.exceptions.ServerException {
  return (org.bimserver.interfaces.objects.SUser)reflector.callMethod(""String_Node_Str"",""String_Node_Str"",org.bimserver.interfaces.objects.SUser.class,arg0,arg1,arg2,arg3);
}",0.8106796116504854
160660,"@Override public void run(){
  running=true;
  ReflectiveRpcChannel reflectiveRpcChannel=new ReflectiveRpcChannel(serviceFactory.newService(AccessMethod.PROTOCOL_BUFFERS,socket.getRemoteSocketAddress().toString()),protocolBuffersMetaData,sService);
  try {
    while (running) {
      DataInputStream dis=new DataInputStream(socket.getInputStream());
      String serviceName=dis.readUTF();
      String methodName=dis.readUTF();
      MethodDescriptorContainer methodDescriptorContainer=protocolBuffersMetaData.getMethod(serviceName,methodName);
      Builder newBuilder=DynamicMessage.newBuilder(methodDescriptorContainer.getInputDescriptor());
      newBuilder.mergeDelimitedFrom(dis);
      DynamicMessage request=newBuilder.build();
      try {
        Message response=reflectiveRpcChannel.callBlockingMethod(methodDescriptorContainer,request);
        response.writeDelimitedTo(socket.getOutputStream());
      }
 catch (      ServiceException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  socketNotificationsClient.notifyDisconnect();
}","@Override public void run(){
  running=true;
  ReflectiveRpcChannel reflectiveRpcChannel=new ReflectiveRpcChannel(serviceFactory.newService(AccessMethod.PROTOCOL_BUFFERS,socket.getRemoteSocketAddress().toString()),protocolBuffersMetaData,sService);
  try {
    while (running) {
      DataInputStream dis=new DataInputStream(socket.getInputStream());
      String serviceName=dis.readUTF();
      String methodName=dis.readUTF();
      MethodDescriptorContainer methodDescriptorContainer=protocolBuffersMetaData.getMethod(serviceName,methodName);
      Builder newBuilder=DynamicMessage.newBuilder(methodDescriptorContainer.getInputDescriptor());
      newBuilder.mergeDelimitedFrom(dis);
      DynamicMessage request=newBuilder.build();
      Message response=reflectiveRpcChannel.callBlockingMethod(methodDescriptorContainer,request);
      response.writeDelimitedTo(socket.getOutputStream());
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  socketNotificationsClient.notifyDisconnect();
}",0.9302107728337236
160661,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (!eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eAttribute);
  list.add(value);
  bimDatabaseSession.store(idEObject);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (!eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eAttribute);
  list.add(value);
  bimDatabaseSession.store(idEObject);
}",0.7049808429118773
160662,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (!eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  IdEObject referencedObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(referenceClassName),referenceOid,false,null);
  if (referencedObject == null) {
    throw new UserException(""String_Node_Str"" + referenceClassName + ""String_Node_Str""+ referenceOid+ ""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eReference);
  list.add(referencedObject);
  bimDatabaseSession.store(idEObject);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (!eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  IdEObject referencedObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(referenceClassName),pid,rid,referenceOid,false,null);
  if (referencedObject == null) {
    throw new UserException(""String_Node_Str"" + referenceClassName + ""String_Node_Str""+ referenceOid+ ""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eReference);
  list.add(referencedObject);
  bimDatabaseSession.store(idEObject);
}",0.5660531697341513
160663,"void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException ;","void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException ;",0.9054054054054054
160664,"@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  EClass eClass=bimDatabaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  IdEObject eObject=(IdEObject)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(pid);
  eObject.setRid(rid);
  bimDatabaseSession.store(eObject,pid,rid);
}","@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  EClass eClass=bimDatabaseSession.getEClassForName(type);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  eObject=(IdEObject)eClass.getEPackage().getEFactoryInstance().create(eClass);
  eObject.setOid(oid);
  eObject.setPid(pid);
  eObject.setRid(rid);
  bimDatabaseSession.store(eObject,pid,rid);
  created.put(oid,eObject);
}",0.9391143911439116
160665,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (!eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eAttribute);
  list.remove(index);
  bimDatabaseSession.store(idEObject);
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (!eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eAttribute);
  list.remove(index);
  bimDatabaseSession.store(idEObject);
}",0.6993865030674846
160666,"@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  EClass eClass=bimDatabaseSession.getEClassForName(className);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + className);
  }
  IdEObject idEObject=bimDatabaseSession.get(eClass,pid,rid - 1,oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + oid + ""String_Node_Str"");
  }
  bimDatabaseSession.delete(idEObject);
}","@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  EClass eClass=bimDatabaseSession.getEClassForName(className);
  if (eClass == null) {
    throw new UserException(""String_Node_Str"" + className);
  }
  IdEObject idEObject=bimDatabaseSession.get(eClass,pid,rid - 1,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + oid + ""String_Node_Str"");
  }
  bimDatabaseSession.delete(idEObject);
}",0.9210754553339116
160667,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (!eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eReference);
  list.remove(index);
  bimDatabaseSession.store(idEObject);
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (!eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  List list=(List)idEObject.eGet(eReference);
  list.remove(index);
  bimDatabaseSession.store(idEObject);
}",0.6949247071946458
160668,"@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  if (eAttribute.getEType() instanceof EEnum) {
    EEnum eEnum=(EEnum)eAttribute.getEType();
    idEObject.eSet(eAttribute,eEnum.getEEnumLiteral((String)value).getInstance());
  }
 else {
    idEObject.eSet(eAttribute,value);
  }
  if (value instanceof Double) {
    idEObject.eSet(idEObject.eClass().getEStructuralFeature(attributeName + ""String_Node_Str""),String.valueOf((Double)value));
  }
  bimDatabaseSession.store(idEObject);
}","@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EAttribute eAttribute=bimDatabaseSession.getMetaDataManager().getEAttribute(className,attributeName);
  if (eAttribute == null) {
    throw new UserException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ className);
  }
  if (eAttribute.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  if (eAttribute.getEType() instanceof EEnum) {
    EEnum eEnum=(EEnum)eAttribute.getEType();
    idEObject.eSet(eAttribute,eEnum.getEEnumLiteral((String)value).getInstance());
  }
 else {
    idEObject.eSet(eAttribute,value);
  }
  if (value instanceof Double) {
    idEObject.eSet(idEObject.eClass().getEStructuralFeature(attributeName + ""String_Node_Str""),String.valueOf((Double)value));
  }
  bimDatabaseSession.store(idEObject);
}",0.9481231547870096
160669,"@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),oid,false,null);
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  IdEObject referencedObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(referencedClassName),referenceOid,false,null);
  if (referencedObject == null) {
    throw new UserException(""String_Node_Str"" + referencedClassName + ""String_Node_Str""+ referenceOid+ ""String_Node_Str"");
  }
  idEObject.eSet(eReference,referencedObject);
  bimDatabaseSession.store(idEObject);
}","@Override public void execute(int pid,int rid,BimDatabaseSession bimDatabaseSession,Map<Long,IdEObject> created) throws UserException, BimDeadlockException, BimDatabaseException {
  IdEObject idEObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(className),pid,rid,oid,false,null);
  if (idEObject == null) {
    idEObject=created.get(oid);
  }
  if (idEObject == null) {
    throw new UserException(""String_Node_Str"" + className + ""String_Node_Str""+ oid+ ""String_Node_Str""+ pid);
  }
  EReference eReference=bimDatabaseSession.getMetaDataManager().getEReference(className,referenceName);
  if (eReference == null) {
    throw new UserException(""String_Node_Str"" + referenceName + ""String_Node_Str""+ className);
  }
  if (eReference.isMany()) {
    throw new UserException(""String_Node_Str"");
  }
  IdEObject referencedObject=bimDatabaseSession.get(bimDatabaseSession.getEClassForName(referencedClassName),pid,rid,referenceOid,false,null);
  if (referencedObject == null) {
    throw new UserException(""String_Node_Str"" + referencedClassName + ""String_Node_Str""+ referenceOid+ ""String_Node_Str"");
  }
  idEObject.eSet(eReference,referencedObject);
  bimDatabaseSession.store(idEObject);
}",0.5327472527472528
160670,"@Override public Integer execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Revision oldRevision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,false,null);
  Project oldProject=oldRevision.getProject();
  User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
  if (!RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,oldProject)) {
    throw new UserException(""String_Node_Str"");
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : oldRevision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    getDatabaseSession().getMap(subModel,subRevision.getProject().getId(),subRevision.getId(),true,null);
    subModel.setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface model=bimServer.getMergerFactory().createMerger().merge(oldRevision.getProject(),ifcModelSet,bimServer.getSettingsManager().getSettings().isIntelligentMerging());
  model.resetOids();
  BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(getDatabaseSession(),getAccessMethod(),destPoid,currentUoid,model,comment);
  try {
    ConcreteRevision revision=action.execute();
    CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,getDatabaseSession(),getAccessMethod(),model,currentUoid,revision.getOid(),false);
    SCheckinResult result=new SCheckinResult();
    result.setProjectId(revision.getProject().getOid());
    LongCheckinAction longAction=new LongCheckinAction(bimServer,user,createCheckinAction);
    bimServer.getLongActionManager().start(longAction);
    return longAction.getId();
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public Integer execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Revision oldRevision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,false,null);
  Project oldProject=oldRevision.getProject();
  User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
  if (!RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,oldProject)) {
    throw new UserException(""String_Node_Str"");
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : oldRevision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    getDatabaseSession().getMap(subModel,subRevision.getProject().getId(),subRevision.getId(),true,null);
    subModel.setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  IfcModelInterface model=bimServer.getMergerFactory().createMerger().merge(oldRevision.getProject(),ifcModelSet,bimServer.getSettingsManager().getSettings().isIntelligentMerging());
  model.resetOids();
  BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(getDatabaseSession(),getAccessMethod(),destPoid,currentUoid,model,comment);
  try {
    ConcreteRevision revision=action.execute();
    CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,getDatabaseSession(),getAccessMethod(),model,currentUoid,revision.getOid(),false,true);
    SCheckinResult result=new SCheckinResult();
    result.setProjectId(revision.getProject().getOid());
    LongCheckinAction longAction=new LongCheckinAction(bimServer,user,createCheckinAction);
    bimServer.getLongActionManager().start(longAction);
    return longAction.getId();
  }
 catch (  UserException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9986416734582994
160671,"@Override public Integer execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Revision oldRevision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,false,null);
  Project oldProject=oldRevision.getProject();
  final User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
  if (!RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,oldProject)) {
    throw new UserException(""String_Node_Str"");
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : oldRevision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    getDatabaseSession().getMap(subModel,subRevision.getProject().getId(),subRevision.getId(),true,null);
    subModel.setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  final IfcModelInterface model=bimServer.getMergerFactory().createMerger().merge(oldRevision.getProject(),ifcModelSet,bimServer.getSettingsManager().getSettings().isIntelligentMerging());
  model.resetOids();
  final Project newProject=new AddProjectDatabaseAction(bimServer,getDatabaseSession(),getAccessMethod(),projectName,currentUoid).execute();
  BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(getDatabaseSession(),getAccessMethod(),newProject.getOid(),currentUoid,model,comment);
  ConcreteRevision revision=action.execute();
  CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,bimServer.getDatabase().createSession(true),getAccessMethod(),model,currentUoid,revision.getOid(),false);
  SCheckinResult result=new SCheckinResult();
  result.setProjectId(revision.getProject().getOid());
  LongCheckinAction longAction=new LongCheckinAction(bimServer,user,createCheckinAction);
  try {
    bimServer.getLongActionManager().start(longAction);
  }
 catch (  CannotBeScheduledException e) {
    e.printStackTrace();
  }
  return longAction.getId();
}","@Override public Integer execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Revision oldRevision=getDatabaseSession().get(StorePackage.eINSTANCE.getRevision(),roid,false,null);
  Project oldProject=oldRevision.getProject();
  final User user=getDatabaseSession().get(StorePackage.eINSTANCE.getUser(),currentUoid,false,null);
  if (!RightsManager.hasRightsOnProjectOrSuperProjectsOrSubProjects(user,oldProject)) {
    throw new UserException(""String_Node_Str"");
  }
  IfcModelSet ifcModelSet=new IfcModelSet();
  for (  ConcreteRevision subRevision : oldRevision.getConcreteRevisions()) {
    IfcModel subModel=new IfcModel();
    getDatabaseSession().getMap(subModel,subRevision.getProject().getId(),subRevision.getId(),true,null);
    subModel.setDate(subRevision.getDate());
    ifcModelSet.add(subModel);
  }
  final IfcModelInterface model=bimServer.getMergerFactory().createMerger().merge(oldRevision.getProject(),ifcModelSet,bimServer.getSettingsManager().getSettings().isIntelligentMerging());
  model.resetOids();
  final Project newProject=new AddProjectDatabaseAction(bimServer,getDatabaseSession(),getAccessMethod(),projectName,currentUoid).execute();
  BimDatabaseAction<ConcreteRevision> action=new CheckinPart1DatabaseAction(getDatabaseSession(),getAccessMethod(),newProject.getOid(),currentUoid,model,comment);
  ConcreteRevision revision=action.execute();
  CheckinPart2DatabaseAction createCheckinAction=new CheckinPart2DatabaseAction(bimServer,bimServer.getDatabase().createSession(true),getAccessMethod(),model,currentUoid,revision.getOid(),false,true);
  SCheckinResult result=new SCheckinResult();
  result.setProjectId(revision.getProject().getOid());
  LongCheckinAction longAction=new LongCheckinAction(bimServer,user,createCheckinAction);
  try {
    bimServer.getLongActionManager().start(longAction);
  }
 catch (  CannotBeScheduledException e) {
    e.printStackTrace();
  }
  return longAction.getId();
}",0.9987235128925198
160672,"public CheckinPart2DatabaseAction(BimServer bimServer,BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IfcModelInterface ifcModel,long actingUoid,long croid,boolean merge){
  super(bimDatabaseSession,accessMethod);
  this.bimServer=bimServer;
  this.ifcModel=ifcModel;
  this.actingUoid=actingUoid;
  this.croid=croid;
  this.merge=merge;
}","public CheckinPart2DatabaseAction(BimServer bimServer,BimDatabaseSession bimDatabaseSession,AccessMethod accessMethod,IfcModelInterface ifcModel,long actingUoid,long croid,boolean merge,boolean clean){
  super(bimDatabaseSession,accessMethod);
  this.bimServer=bimServer;
  this.ifcModel=ifcModel;
  this.actingUoid=actingUoid;
  this.croid=croid;
  this.merge=merge;
  this.clean=clean;
}",0.9543010752688172
160673,"private JSONObject writeGeometry(IfcObjectDefinition ifcObject,String id) throws IfcEngineException, JSONException, SerializerException {
  float[] modelOffset=new float[]{-(sceneExtents.min[0] + sceneExtents.max[0]) * 0.5f,-(sceneExtents.min[1] + sceneExtents.max[1]) * 0.5f,-(sceneExtents.min[2] + sceneExtents.max[2]) * 0.5f};
  JSONObject jsonObj=new JSONObject();
  IfcModelInterface ifcModel=new IfcModel();
  convertToSubset(ifcObject.eClass(),ifcObject,ifcModel,new HashMap<EObject,EObject>());
  EmfSerializer serializer=getPluginManager().requireIfcStepSerializer();
  serializer.init(ifcModel,getProjectInfo(),getPluginManager());
  try {
    IfcEngineModel model=ifcEngine.openModel(serializer.getBytes());
    try {
      model.setPostProcessing(true);
      IfcEngineGeometry geometry=model.finalizeModelling(model.initializeModelling());
      if (geometry != null) {
        JSONArray verticesArray=new JSONArray();
        jsonObj.put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",ifcObject.getGlobalId().getWrappedValue()).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",verticesArray);
        for (int i=0; i < geometry.getNrVertices(); i+=3) {
          verticesArray.put(geometry.getVertex(i + 0) + modelOffset[0]).put(geometry.getVertex(i + 1) + modelOffset[1]).put(geometry.getVertex(i + 2) + modelOffset[2]);
        }
        JSONArray normalsArray=new JSONArray();
        jsonObj.put(""String_Node_Str"",normalsArray);
        for (int i=0; i < geometry.getNrNormals(); i++) {
          normalsArray.put(geometry.getNormal(i));
        }
        List<? extends IfcEngineInstance> instances=model.getInstances(ifcObject.eClass().getName().toUpperCase());
        if (instances.size() > 1) {
          LOGGER.error(""String_Node_Str"");
        }
        for (        IfcEngineInstance instance : instances) {
          IfcEngineInstanceVisualisationProperties instanceInModelling=instance.getVisualisationProperties();
          JSONArray indicesArray=new JSONArray();
          jsonObj.put(""String_Node_Str"",indicesArray);
          int endIndex=instanceInModelling.getPrimitiveCount() * 3 + instanceInModelling.getStartIndex();
          for (int i=instanceInModelling.getStartIndex(); i < endIndex; i+=3) {
            indicesArray.put(geometry.getIndex(i)).put(geometry.getIndex(i + 2)).put(geometry.getIndex(i + 1));
          }
        }
      }
    }
  finally {
      model.close();
    }
  }
 catch (  IfcEngineException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return jsonObj;
}","private JSONObject writeGeometry(IfcObjectDefinition ifcObject,String id) throws IfcEngineException, JSONException, SerializerException {
  float[] modelOffset=new float[]{-(sceneExtents.min[0] + sceneExtents.max[0]) * 0.5f,-(sceneExtents.min[1] + sceneExtents.max[1]) * 0.5f,-(sceneExtents.min[2] + sceneExtents.max[2]) * 0.5f};
  modelOffset[0]=Float.isInfinite(modelOffset[0]) || Float.isNaN(modelOffset[0]) ? 0.0f : modelOffset[0];
  modelOffset[1]=Float.isInfinite(modelOffset[1]) || Float.isNaN(modelOffset[1]) ? 0.0f : modelOffset[1];
  modelOffset[2]=Float.isInfinite(modelOffset[2]) || Float.isNaN(modelOffset[2]) ? 0.0f : modelOffset[2];
  JSONObject jsonObj=new JSONObject();
  IfcModelInterface ifcModel=new IfcModel();
  convertToSubset(ifcObject.eClass(),ifcObject,ifcModel,new HashMap<EObject,EObject>());
  EmfSerializer serializer=getPluginManager().requireIfcStepSerializer();
  serializer.init(ifcModel,getProjectInfo(),getPluginManager());
  try {
    IfcEngineModel model=ifcEngine.openModel(serializer.getBytes());
    try {
      model.setPostProcessing(true);
      IfcEngineGeometry geometry=model.finalizeModelling(model.initializeModelling());
      if (geometry != null) {
        JSONArray verticesArray=new JSONArray();
        jsonObj.put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",ifcObject.getGlobalId().getWrappedValue()).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",verticesArray);
        for (int i=0; i < geometry.getNrVertices(); i+=3) {
          float[] v={geometry.getVertex(i + 0),geometry.getVertex(i + 1),geometry.getVertex(i + 2)};
          verticesArray.put((Float.isInfinite(v[0]) || Float.isNaN(v[0]) ? 0.0f : v[0]) + modelOffset[0]).put((Float.isInfinite(v[1]) || Float.isNaN(v[1]) ? 0.0f : v[1]) + modelOffset[1]).put((Float.isInfinite(v[2]) || Float.isNaN(v[2]) ? 0.0f : v[2]) + modelOffset[2]);
        }
        JSONArray normalsArray=new JSONArray();
        jsonObj.put(""String_Node_Str"",normalsArray);
        for (int i=0; i < geometry.getNrNormals(); i++) {
          normalsArray.put(geometry.getNormal(i));
        }
        List<? extends IfcEngineInstance> instances=model.getInstances(ifcObject.eClass().getName().toUpperCase());
        if (instances.size() > 1) {
          LOGGER.error(""String_Node_Str"");
        }
        for (        IfcEngineInstance instance : instances) {
          IfcEngineInstanceVisualisationProperties instanceInModelling=instance.getVisualisationProperties();
          JSONArray indicesArray=new JSONArray();
          jsonObj.put(""String_Node_Str"",indicesArray);
          int endIndex=instanceInModelling.getPrimitiveCount() * 3 + instanceInModelling.getStartIndex();
          for (int i=instanceInModelling.getStartIndex(); i < endIndex; i+=3) {
            indicesArray.put(geometry.getIndex(i)).put(geometry.getIndex(i + 2)).put(geometry.getIndex(i + 1));
          }
        }
      }
    }
  finally {
      model.close();
    }
  }
 catch (  IfcEngineException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return jsonObj;
}",0.884365678189156
160674,"public ActionState convertFromSObject(SActionState input){
  return ActionState.values()[input.ordinal()];
}","public LongActionState convertFromSObject(SLongActionState input,BimDatabaseSession session){
  if (input == null) {
    return null;
  }
  LongActionState result=StoreFactory.eINSTANCE.createLongActionState();
  result.setOid(input.getOid());
  result.setProgress(input.getProgress());
  result.setState(ActionState.values()[input.getState().ordinal()]);
  return result;
}",0.3485477178423236
160675,"public SActionState convertToSObject(ActionState input){
  return SActionState.values()[input.ordinal()];
}","public SLongActionState convertToSObject(LongActionState input){
  if (input == null) {
    return null;
  }
  SLongActionState result=new SLongActionState();
  result.setOid(input.getOid());
  result.setProgress(input.getProgress());
  result.setState(SActionState.values()[input.getState().ordinal()]);
  return result;
}",0.4651162790697674
160676,"public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  if (argument instanceof EClass) {
    EClass eClass=(EClass)argument;
    stringBuffer.append(TEXT_2);
    stringBuffer.append(eClass.getName());
    if (!eClass.getESuperTypes().isEmpty()) {
      stringBuffer.append(TEXT_3);
      for (      EClass eSuperClass : eClass.getESuperTypes()) {
        stringBuffer.append(TEXT_4);
        stringBuffer.append(eSuperClass.getName());
      }
    }
    stringBuffer.append(TEXT_5);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_6);
    for (    EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
      if (eStructuralFeature instanceof EAttribute) {
        EAttribute eAttribute=(EAttribute)eStructuralFeature;
        if (eAttribute.getEType() instanceof EEnum) {
          stringBuffer.append(TEXT_7);
          stringBuffer.append(eStructuralFeature.getName());
          stringBuffer.append(TEXT_8);
          stringBuffer.append(eAttribute.getEType().getName());
          stringBuffer.append(TEXT_9);
        }
 else {
          if (eAttribute.isMany()) {
            stringBuffer.append(TEXT_10);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_11);
            stringBuffer.append(eAttribute.getEType().getInstanceClassName());
            stringBuffer.append(TEXT_12);
          }
 else {
            stringBuffer.append(TEXT_13);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_14);
            stringBuffer.append(eAttribute.getEType().getInstanceClassName());
            stringBuffer.append(TEXT_15);
          }
        }
      }
 else       if (eStructuralFeature instanceof EReference) {
        EReference eReference=(EReference)eStructuralFeature;
        if (eReference.isMany()) {
          if (eReference.getEAnnotation(""String_Node_Str"") != null) {
            stringBuffer.append(TEXT_16);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_17);
            stringBuffer.append(eReference.getEType().getName());
            stringBuffer.append(TEXT_18);
          }
 else {
            stringBuffer.append(TEXT_19);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_20);
          }
        }
 else {
          if (eReference.getEAnnotation(""String_Node_Str"") != null) {
            stringBuffer.append(TEXT_21);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_22);
            stringBuffer.append(eReference.getEType().getName());
            stringBuffer.append(TEXT_23);
          }
 else {
            stringBuffer.append(TEXT_24);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_25);
          }
        }
      }
    }
    stringBuffer.append(TEXT_26);
    for (    EStructuralFeature eStructuralFeature : eClass.getEStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
        if (eStructuralFeature instanceof EAttribute) {
          EAttribute eAttribute=(EAttribute)eStructuralFeature;
          if (eAttribute.getEType() instanceof EEnum) {
            stringBuffer.append(TEXT_27);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_28);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_29);
          }
 else {
            if (eAttribute.isMany()) {
              stringBuffer.append(TEXT_30);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_31);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_32);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_33);
            }
 else {
              stringBuffer.append(TEXT_34);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_35);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_36);
            }
          }
        }
 else         if (eStructuralFeature instanceof EReference) {
          EReference eReference=(EReference)eStructuralFeature;
          if (eReference.isMany()) {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_37);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_38);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_39);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_40);
            }
 else {
              stringBuffer.append(TEXT_41);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_42);
            }
          }
 else {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_43);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_44);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_45);
            }
 else {
              stringBuffer.append(TEXT_46);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_47);
            }
          }
        }
      }
    }
    for (    EStructuralFeature eStructuralFeature : eClass.getEStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
        if (eStructuralFeature instanceof EAttribute) {
          EAttribute eAttribute=(EAttribute)eStructuralFeature;
          if (eAttribute.getEType() instanceof EEnum) {
            stringBuffer.append(TEXT_48);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_49);
            stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
            stringBuffer.append(TEXT_50);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_51);
            stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
            stringBuffer.append(TEXT_52);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_53);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_54);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_55);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_56);
          }
 else {
            if (eAttribute.isMany()) {
              stringBuffer.append(TEXT_57);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_58);
              stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
              stringBuffer.append(TEXT_59);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_60);
              stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
              stringBuffer.append(TEXT_61);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_62);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_63);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_64);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_65);
            }
 else {
              stringBuffer.append(TEXT_66);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_67);
              stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
              stringBuffer.append(TEXT_68);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_69);
              stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
              stringBuffer.append(TEXT_70);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_71);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_72);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_73);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_74);
            }
          }
        }
 else         if (eStructuralFeature instanceof EReference) {
          EReference eReference=(EReference)eStructuralFeature;
          if (eReference.isMany()) {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_75);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_76);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_77);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_78);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_79);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_80);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_81);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_82);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_83);
            }
 else {
              stringBuffer.append(TEXT_84);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_85);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_86);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_87);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_88);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_89);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_90);
            }
          }
 else {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_91);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_92);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_93);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_94);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_95);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_96);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_97);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_98);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_99);
            }
 else {
              stringBuffer.append(TEXT_100);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_101);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_102);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_103);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_104);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_105);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_106);
            }
          }
        }
      }
    }
    stringBuffer.append(TEXT_107);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_109);
  }
 else   if (argument instanceof EEnum) {
    EEnum eEnum=(EEnum)argument;
    stringBuffer.append(TEXT_110);
    stringBuffer.append(eEnum.getName());
    stringBuffer.append(TEXT_111);
    for (    EEnumLiteral eEnumLiteral : eEnum.getELiterals()) {
      stringBuffer.append(TEXT_112);
      stringBuffer.append(eEnumLiteral.getName());
      stringBuffer.append(TEXT_113);
      stringBuffer.append(eEnumLiteral.getValue());
      stringBuffer.append(TEXT_114);
      stringBuffer.append(eEnum.getELiterals().get(eEnum.getELiterals().size() - 1) == eEnumLiteral ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    stringBuffer.append(TEXT_115);
    stringBuffer.append(eEnum.getName());
    stringBuffer.append(TEXT_116);
  }
  stringBuffer.append(TEXT_117);
  return stringBuffer.toString();
}","public String generate(Object argument){
  final StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(TEXT_1);
  if (argument instanceof EClass) {
    EClass eClass=(EClass)argument;
    stringBuffer.append(TEXT_2);
    stringBuffer.append(eClass.getName());
    if (!eClass.getESuperTypes().isEmpty()) {
      stringBuffer.append(TEXT_3);
      for (      EClass eSuperClass : eClass.getESuperTypes()) {
        stringBuffer.append(TEXT_4);
        stringBuffer.append(eSuperClass.getName());
      }
    }
    stringBuffer.append(TEXT_5);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_6);
    for (    EStructuralFeature eStructuralFeature : eClass.getEAllStructuralFeatures()) {
      if (eStructuralFeature instanceof EAttribute) {
        EAttribute eAttribute=(EAttribute)eStructuralFeature;
        if (eAttribute.getEType() instanceof EEnum) {
          stringBuffer.append(TEXT_7);
          stringBuffer.append(eStructuralFeature.getName());
          stringBuffer.append(TEXT_8);
          stringBuffer.append(eAttribute.getEType().getName());
          stringBuffer.append(TEXT_9);
        }
 else {
          if (eAttribute.isMany()) {
            stringBuffer.append(TEXT_10);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_11);
            stringBuffer.append(eAttribute.getEType().getInstanceClassName());
            stringBuffer.append(TEXT_12);
          }
 else {
            stringBuffer.append(TEXT_13);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_14);
            stringBuffer.append(eAttribute.getEType().getInstanceClassName());
            stringBuffer.append(TEXT_15);
          }
        }
      }
 else       if (eStructuralFeature instanceof EReference) {
        EReference eReference=(EReference)eStructuralFeature;
        if (eReference.isMany()) {
          if (eReference.getEAnnotation(""String_Node_Str"") != null) {
            stringBuffer.append(TEXT_16);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_17);
            stringBuffer.append(eReference.getEType().getName());
            stringBuffer.append(TEXT_18);
          }
 else {
            stringBuffer.append(TEXT_19);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_20);
          }
        }
 else {
          if (eReference.getEAnnotation(""String_Node_Str"") != null) {
            stringBuffer.append(TEXT_21);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_22);
            stringBuffer.append(eReference.getEType().getName());
            stringBuffer.append(TEXT_23);
          }
 else {
            stringBuffer.append(TEXT_24);
            stringBuffer.append(eStructuralFeature.getName());
            stringBuffer.append(TEXT_25);
          }
        }
      }
    }
    stringBuffer.append(TEXT_26);
    for (    EStructuralFeature eStructuralFeature : eClass.getEStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
        if (eStructuralFeature instanceof EAttribute) {
          EAttribute eAttribute=(EAttribute)eStructuralFeature;
          if (eAttribute.getEType() instanceof EEnum) {
            stringBuffer.append(TEXT_27);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_28);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_29);
          }
 else {
            if (eAttribute.isMany()) {
              stringBuffer.append(TEXT_30);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_31);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_32);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_33);
            }
 else {
              if (eAttribute.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
                stringBuffer.append(TEXT_34);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_35);
              }
 else {
                stringBuffer.append(TEXT_36);
                stringBuffer.append(eAttribute.getEType().getInstanceClassName());
                stringBuffer.append(TEXT_37);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_38);
              }
            }
          }
        }
 else         if (eStructuralFeature instanceof EReference) {
          EReference eReference=(EReference)eStructuralFeature;
          if (eReference.isMany()) {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_39);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_40);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_41);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_42);
            }
 else {
              stringBuffer.append(TEXT_43);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_44);
            }
          }
 else {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_45);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_46);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_47);
            }
 else {
              stringBuffer.append(TEXT_48);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_49);
            }
          }
        }
      }
    }
    for (    EStructuralFeature eStructuralFeature : eClass.getEStructuralFeatures()) {
      if (eStructuralFeature.getEAnnotation(""String_Node_Str"") == null) {
        if (eStructuralFeature instanceof EAttribute) {
          EAttribute eAttribute=(EAttribute)eStructuralFeature;
          if (eAttribute.getEType() instanceof EEnum) {
            stringBuffer.append(TEXT_50);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_51);
            stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
            stringBuffer.append(TEXT_52);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_53);
            stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
            stringBuffer.append(TEXT_54);
            stringBuffer.append(eAttribute.getEType().getName());
            stringBuffer.append(TEXT_55);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_56);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_57);
            stringBuffer.append(eAttribute.getName());
            stringBuffer.append(TEXT_58);
          }
 else {
            if (eAttribute.isMany()) {
              stringBuffer.append(TEXT_59);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_60);
              stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
              stringBuffer.append(TEXT_61);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_62);
              stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
              stringBuffer.append(TEXT_63);
              stringBuffer.append(eAttribute.getEType().getInstanceClassName());
              stringBuffer.append(TEXT_64);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_65);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_66);
              stringBuffer.append(eAttribute.getName());
              stringBuffer.append(TEXT_67);
            }
 else {
              if (eAttribute.getEType() == EcorePackage.eINSTANCE.getEByteArray()) {
                stringBuffer.append(TEXT_68);
                stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
                stringBuffer.append(TEXT_69);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_70);
                stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
                stringBuffer.append(TEXT_71);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_72);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_73);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_74);
              }
 else {
                stringBuffer.append(TEXT_75);
                stringBuffer.append(eAttribute.getEType().getInstanceClassName());
                stringBuffer.append(TEXT_76);
                stringBuffer.append(GenerateUtils.makeGetter(eAttribute));
                stringBuffer.append(TEXT_77);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_78);
                stringBuffer.append(GenerateUtils.makeSetter(eAttribute));
                stringBuffer.append(TEXT_79);
                stringBuffer.append(eAttribute.getEType().getInstanceClassName());
                stringBuffer.append(TEXT_80);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_81);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_82);
                stringBuffer.append(eAttribute.getName());
                stringBuffer.append(TEXT_83);
              }
            }
          }
        }
 else         if (eStructuralFeature instanceof EReference) {
          EReference eReference=(EReference)eStructuralFeature;
          if (eReference.isMany()) {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_84);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_85);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_86);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_87);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_88);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_89);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_90);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_91);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_92);
            }
 else {
              stringBuffer.append(TEXT_93);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_94);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_95);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_96);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_97);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_98);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_99);
            }
          }
 else {
            if (eReference.getEAnnotation(""String_Node_Str"") != null) {
              stringBuffer.append(TEXT_100);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_101);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_102);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_103);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_104);
              stringBuffer.append(eReference.getEType().getName());
              stringBuffer.append(TEXT_105);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_106);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_107);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_108);
            }
 else {
              stringBuffer.append(TEXT_109);
              stringBuffer.append(GenerateUtils.makeGetter(eReference));
              stringBuffer.append(TEXT_110);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_111);
              stringBuffer.append(GenerateUtils.makeSetter(eReference));
              stringBuffer.append(TEXT_112);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_113);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_114);
              stringBuffer.append(eReference.getName());
              stringBuffer.append(TEXT_115);
            }
          }
        }
      }
    }
    stringBuffer.append(TEXT_116);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_117);
    stringBuffer.append(eClass.getName());
    stringBuffer.append(TEXT_118);
  }
 else   if (argument instanceof EEnum) {
    EEnum eEnum=(EEnum)argument;
    stringBuffer.append(TEXT_119);
    stringBuffer.append(eEnum.getName());
    stringBuffer.append(TEXT_120);
    for (    EEnumLiteral eEnumLiteral : eEnum.getELiterals()) {
      stringBuffer.append(TEXT_121);
      stringBuffer.append(eEnumLiteral.getName());
      stringBuffer.append(TEXT_122);
      stringBuffer.append(eEnumLiteral.getValue());
      stringBuffer.append(TEXT_123);
      stringBuffer.append(eEnum.getELiterals().get(eEnum.getELiterals().size() - 1) == eEnumLiteral ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    stringBuffer.append(TEXT_124);
    stringBuffer.append(eEnum.getName());
    stringBuffer.append(TEXT_125);
  }
  stringBuffer.append(TEXT_126);
  return stringBuffer.toString();
}",0.7002195933980307
160677,"public void addToObjectsToCommit(IdEObject idEObject) throws BimDatabaseException {
  if (idEObject.getOid() == -1) {
    throw new BimDatabaseException(""String_Node_Str"");
  }
  objectsToCommit.put(idEObject,idEObject.getOid());
}","public void addToObjectsToCommit(IdEObject idEObject) throws BimDatabaseException {
  if (idEObject.getOid() == -1) {
    throw new BimDatabaseException(""String_Node_Str"");
  }
  objectsToCommit.forcePut(idEObject,idEObject.getOid());
}",0.9850107066381156
160678,"@Override public ConcreteRevision execute() throws UserException, BimDeadlockException, BimDatabaseException {
  Project project=getProjectByPoid(poid);
  User user=getUserByUoid(actingUid);
  if (project == null) {
    throw new UserException(""String_Node_Str"" + poid + ""String_Node_Str"");
  }
  if (user.getUserType() == UserType.ANONYMOUS) {
    throw new UserException(""String_Node_Str"");
  }
  if (!RightsManager.hasRightsOnProjectOrSuperProjects(user,project)) {
    throw new UserException(""String_Node_Str"");
  }
  if (!MailSystem.isValidEmailAddress(user.getUsername())) {
    throw new UserException(""String_Node_Str"");
  }
  checkCheckSum(project);
  if (!project.getRevisions().isEmpty() && project.getRevisions().get(project.getRevisions().size() - 1).getState() == CheckinState.STORING) {
    throw new UserException(""String_Node_Str"");
  }
  ConcreteRevision concreteRevision=createNewConcreteRevision(getDatabaseSession(),getModel().getSize(),poid,actingUid,comment.trim(),CheckinState.STORING);
  concreteRevision.setChecksum(getModel().getChecksum());
  NewRevisionAdded newRevisionAdded=LogFactory.eINSTANCE.createNewRevisionAdded();
  newRevisionAdded.setDate(new Date());
  newRevisionAdded.setExecutor(user);
  newRevisionAdded.setRevision(concreteRevision.getRevisions().get(0));
  newRevisionAdded.setAccessMethod(getAccessMethod());
  getDatabaseSession().store(newRevisionAdded);
  getDatabaseSession().store(concreteRevision);
  getDatabaseSession().store(project);
  return concreteRevision;
}","@Override public ConcreteRevision execute() throws UserException, BimDeadlockException, BimDatabaseException {
  try {
    Project project=getProjectByPoid(poid);
    User user=getUserByUoid(actingUid);
    if (project == null) {
      throw new UserException(""String_Node_Str"" + poid + ""String_Node_Str"");
    }
    if (user.getUserType() == UserType.ANONYMOUS) {
      throw new UserException(""String_Node_Str"");
    }
    if (!RightsManager.hasRightsOnProjectOrSuperProjects(user,project)) {
      throw new UserException(""String_Node_Str"");
    }
    if (!MailSystem.isValidEmailAddress(user.getUsername())) {
      throw new UserException(""String_Node_Str"");
    }
    checkCheckSum(project);
    if (!project.getRevisions().isEmpty() && project.getRevisions().get(project.getRevisions().size() - 1).getState() == CheckinState.STORING) {
      throw new UserException(""String_Node_Str"");
    }
    ConcreteRevision concreteRevision=createNewConcreteRevision(getDatabaseSession(),getModel().getSize(),poid,actingUid,comment.trim(),CheckinState.STORING);
    concreteRevision.setChecksum(getModel().getChecksum());
    NewRevisionAdded newRevisionAdded=LogFactory.eINSTANCE.createNewRevisionAdded();
    newRevisionAdded.setDate(new Date());
    newRevisionAdded.setExecutor(user);
    newRevisionAdded.setRevision(concreteRevision.getRevisions().get(0));
    newRevisionAdded.setAccessMethod(getAccessMethod());
    getDatabaseSession().store(newRevisionAdded);
    getDatabaseSession().store(concreteRevision);
    getDatabaseSession().store(project);
    return concreteRevision;
  }
 catch (  Exception e) {
    throw new UserException(e);
  }
}",0.9587141506460762
160679,"private void setGeometry(JsWriter writer,IdEObject ifcRootObject,String id,String material) throws IfcEngineException, SerializerException {
  id=id.replace('$','-');
  boolean materialFound=false;
  if (ifcRootObject instanceof IfcProduct) {
    IfcProduct ifcProduct=(IfcProduct)ifcRootObject;
    EList<IfcRelDecomposes> isDecomposedBy=ifcProduct.getIsDecomposedBy();
    for (    IfcRelDecomposes dcmp : isDecomposedBy) {
      EList<IfcObjectDefinition> relatedObjects=dcmp.getRelatedObjects();
      for (      IfcObjectDefinition relatedObject : relatedObjects) {
        setGeometry(writer,relatedObject,relatedObject.getGlobalId().getWrappedValue(),material);
      }
    }
    if (isDecomposedBy != null && isDecomposedBy.size() > 0) {
      return;
    }
    Iterator<IfcRelAssociatesMaterial> ramIter=model.getAll(IfcRelAssociatesMaterial.class).iterator();
    boolean found=false;
    IfcMaterialSelect relatingMaterial=null;
    while (!found && ramIter.hasNext()) {
      IfcRelAssociatesMaterial ram=ramIter.next();
      if (ram.getRelatedObjects().contains(ifcProduct)) {
        found=true;
        relatingMaterial=ram.getRelatingMaterial();
      }
    }
    if (found && relatingMaterial instanceof IfcMaterialLayerSetUsage) {
      IfcMaterialLayerSetUsage mlsu=(IfcMaterialLayerSetUsage)relatingMaterial;
      IfcMaterialLayerSet forLayerSet=mlsu.getForLayerSet();
      if (forLayerSet != null) {
        EList<IfcMaterialLayer> materialLayers=forLayerSet.getMaterialLayers();
        for (        IfcMaterialLayer ml : materialLayers) {
          IfcMaterial ifcMaterial=ml.getMaterial();
          if (ifcMaterial != null) {
            String name=ifcMaterial.getName();
            String filterSpaces=fitNameForQualifiedName(name);
            materialFound=surfaceStyleIds.contains(filterSpaces);
            if (materialFound) {
              material=filterSpaces;
            }
          }
        }
      }
    }
 else     if (found && relatingMaterial instanceof IfcMaterial) {
      IfcMaterial ifcMaterial=(IfcMaterial)relatingMaterial;
      String name=ifcMaterial.getName();
      String filterSpaces=fitNameForQualifiedName(name);
      materialFound=surfaceStyleIds.contains(filterSpaces);
      if (materialFound) {
        material=filterSpaces;
      }
    }
    if (!materialFound) {
      IfcProductRepresentation representation=ifcProduct.getRepresentation();
      if (representation instanceof IfcProductDefinitionShape) {
        IfcProductDefinitionShape pds=(IfcProductDefinitionShape)representation;
        EList<IfcRepresentation> representations=pds.getRepresentations();
        for (        IfcRepresentation rep : representations) {
          if (rep instanceof IfcShapeRepresentation) {
            IfcShapeRepresentation sRep=(IfcShapeRepresentation)rep;
            EList<IfcRepresentationItem> items=sRep.getItems();
            for (            IfcRepresentationItem item : items) {
              EList<IfcStyledItem> styledByItem=item.getStyledByItem();
              for (              IfcStyledItem sItem : styledByItem) {
                EList<IfcPresentationStyleAssignment> styles=sItem.getStyles();
                for (                IfcPresentationStyleAssignment sa : styles) {
                  EList<IfcPresentationStyleSelect> styles2=sa.getStyles();
                  for (                  IfcPresentationStyleSelect pss : styles2) {
                    if (pss instanceof IfcSurfaceStyle) {
                      IfcSurfaceStyle ss=(IfcSurfaceStyle)pss;
                      String name=ss.getName();
                      String filterSpaces=fitNameForQualifiedName(name);
                      materialFound=surfaceStyleIds.contains(filterSpaces);
                      if (materialFound) {
                        material=filterSpaces;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!converted.containsKey(material)) {
    converted.put(material,new HashSet<String>());
  }
  converted.get(material).add(id);
  IfcModelInterface ifcModel=new IfcModel();
  convertToSubset(ifcRootObject.eClass(),ifcRootObject,ifcModel,new HashMap<EObject,EObject>());
  EmfSerializer serializer=getPluginManager().requireIfcStepSerializer();
  serializer.init(ifcModel,getProjectInfo(),getPluginManager());
  try {
    IfcEngineModel model=ifcEngine.openModel(serializer.getBytes());
    try {
      model.setPostProcessing(true);
      IfcEngineGeometry geometry=model.finalizeModelling(model.initializeModelling());
      if (geometry != null) {
        writer.writeln(""String_Node_Str"");
        writer.indent();
        writer.writeln(""String_Node_Str"");
        writer.writeln(""String_Node_Str"" + id + ""String_Node_Str"");
        writer.writeln(""String_Node_Str"" + id + ""String_Node_Str"");
        writer.writeln(""String_Node_Str"");
        writer.writetab(""String_Node_Str"");
        for (int i=0; i < geometry.getNrVertices(); i+=1) {
          writer.print(geometry.getVertex(i) + ""String_Node_Str"");
        }
        writer.println(""String_Node_Str"");
        writer.writetab(""String_Node_Str"");
        for (int i=0; i < geometry.getNrNormals(); i++) {
          writer.print(geometry.getNormal(i) + ""String_Node_Str"");
        }
        writer.println(""String_Node_Str"");
        List<? extends IfcEngineInstance> instances=model.getInstances(ifcRootObject.eClass().getName().toUpperCase());
        if (instances.size() > 1)         writer.writeln(""String_Node_Str"");
        for (        IfcEngineInstance instance : instances) {
          IfcEngineInstanceVisualisationProperties instanceInModelling=instance.getVisualisationProperties();
          writer.writetab(""String_Node_Str"");
          for (int i=instanceInModelling.getStartIndex(); i < instanceInModelling.getPrimitiveCount() * 3 + instanceInModelling.getStartIndex(); i+=3) {
            writer.print(geometry.getIndex(i) + ""String_Node_Str"");
            writer.print(geometry.getIndex(i + 2) + ""String_Node_Str"");
            writer.print(geometry.getIndex(i + 1) + ""String_Node_Str"");
          }
          writer.println(""String_Node_Str"");
        }
        writer.unindent();
        writer.writeln(""String_Node_Str"");
      }
    }
  finally {
      model.close();
    }
  }
 catch (  IfcEngineException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void setGeometry(JsWriter writer,IdEObject ifcRootObject,String id,String material) throws IfcEngineException, SerializerException {
  id=id.replace('$','-');
  boolean materialFound=false;
  if (ifcRootObject instanceof IfcProduct) {
    IfcProduct ifcProduct=(IfcProduct)ifcRootObject;
    EList<IfcRelDecomposes> isDecomposedBy=ifcProduct.getIsDecomposedBy();
    for (    IfcRelDecomposes dcmp : isDecomposedBy) {
      EList<IfcObjectDefinition> relatedObjects=dcmp.getRelatedObjects();
      for (      IfcObjectDefinition relatedObject : relatedObjects) {
        setGeometry(writer,relatedObject,relatedObject.getGlobalId().getWrappedValue(),material);
      }
    }
    if (isDecomposedBy != null && isDecomposedBy.size() > 0) {
      return;
    }
    Iterator<IfcRelAssociatesMaterial> ramIter=model.getAll(IfcRelAssociatesMaterial.class).iterator();
    boolean found=false;
    IfcMaterialSelect relatingMaterial=null;
    while (!found && ramIter.hasNext()) {
      IfcRelAssociatesMaterial ram=ramIter.next();
      if (ram.getRelatedObjects().contains(ifcProduct)) {
        found=true;
        relatingMaterial=ram.getRelatingMaterial();
      }
    }
    if (found && relatingMaterial instanceof IfcMaterialLayerSetUsage) {
      IfcMaterialLayerSetUsage mlsu=(IfcMaterialLayerSetUsage)relatingMaterial;
      IfcMaterialLayerSet forLayerSet=mlsu.getForLayerSet();
      if (forLayerSet != null) {
        EList<IfcMaterialLayer> materialLayers=forLayerSet.getMaterialLayers();
        for (        IfcMaterialLayer ml : materialLayers) {
          IfcMaterial ifcMaterial=ml.getMaterial();
          if (ifcMaterial != null) {
            String name=ifcMaterial.getName();
            String filterSpaces=fitNameForQualifiedName(name);
            materialFound=surfaceStyleIds.contains(filterSpaces);
            if (materialFound) {
              material=filterSpaces;
            }
          }
        }
      }
    }
 else     if (found && relatingMaterial instanceof IfcMaterial) {
      IfcMaterial ifcMaterial=(IfcMaterial)relatingMaterial;
      String name=ifcMaterial.getName();
      String filterSpaces=fitNameForQualifiedName(name);
      materialFound=surfaceStyleIds.contains(filterSpaces);
      if (materialFound) {
        material=filterSpaces;
      }
    }
    if (!materialFound) {
      IfcProductRepresentation representation=ifcProduct.getRepresentation();
      if (representation instanceof IfcProductDefinitionShape) {
        IfcProductDefinitionShape pds=(IfcProductDefinitionShape)representation;
        EList<IfcRepresentation> representations=pds.getRepresentations();
        for (        IfcRepresentation rep : representations) {
          if (rep instanceof IfcShapeRepresentation) {
            IfcShapeRepresentation sRep=(IfcShapeRepresentation)rep;
            EList<IfcRepresentationItem> items=sRep.getItems();
            for (            IfcRepresentationItem item : items) {
              EList<IfcStyledItem> styledByItem=item.getStyledByItem();
              for (              IfcStyledItem sItem : styledByItem) {
                EList<IfcPresentationStyleAssignment> styles=sItem.getStyles();
                for (                IfcPresentationStyleAssignment sa : styles) {
                  EList<IfcPresentationStyleSelect> styles2=sa.getStyles();
                  for (                  IfcPresentationStyleSelect pss : styles2) {
                    if (pss instanceof IfcSurfaceStyle) {
                      IfcSurfaceStyle ss=(IfcSurfaceStyle)pss;
                      String name=ss.getName();
                      String filterSpaces=fitNameForQualifiedName(name);
                      materialFound=surfaceStyleIds.contains(filterSpaces);
                      if (materialFound) {
                        material=filterSpaces;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!converted.containsKey(material)) {
    converted.put(material,new HashSet<String>());
  }
  converted.get(material).add(id);
  IfcModelInterface ifcModel=new IfcModel();
  convertToSubset(ifcRootObject.eClass(),ifcRootObject,ifcModel,new HashMap<EObject,EObject>());
  EmfSerializer serializer=getPluginManager().requireIfcStepSerializer();
  serializer.init(ifcModel,getProjectInfo(),getPluginManager());
  try {
    IfcEngineModel model=ifcEngine.openModel(serializer.getBytes());
    try {
      model.setPostProcessing(true);
      IfcEngineGeometry geometry=model.finalizeModelling(model.initializeModelling());
      if (geometry != null) {
        writer.writeln(""String_Node_Str"");
        writer.indent();
        writer.writeln(""String_Node_Str"");
        writer.writeln(""String_Node_Str"" + id + ""String_Node_Str"");
        writer.writeln(""String_Node_Str"");
        writer.writetab(""String_Node_Str"");
        for (int i=0; i < geometry.getNrVertices(); i+=1) {
          writer.print(geometry.getVertex(i) + ""String_Node_Str"");
        }
        writer.println(""String_Node_Str"");
        writer.writetab(""String_Node_Str"");
        for (int i=0; i < geometry.getNrNormals(); i++) {
          writer.print(geometry.getNormal(i) + ""String_Node_Str"");
        }
        writer.println(""String_Node_Str"");
        List<? extends IfcEngineInstance> instances=model.getInstances(ifcRootObject.eClass().getName().toUpperCase());
        if (instances.size() > 1)         writer.writeln(""String_Node_Str"");
        for (        IfcEngineInstance instance : instances) {
          IfcEngineInstanceVisualisationProperties instanceInModelling=instance.getVisualisationProperties();
          writer.writetab(""String_Node_Str"");
          for (int i=instanceInModelling.getStartIndex(); i < instanceInModelling.getPrimitiveCount() * 3 + instanceInModelling.getStartIndex(); i+=3) {
            writer.print(geometry.getIndex(i) + ""String_Node_Str"");
            writer.print(geometry.getIndex(i + 2) + ""String_Node_Str"");
            writer.print(geometry.getIndex(i + 1) + ""String_Node_Str"");
          }
          writer.println(""String_Node_Str"");
        }
        writer.unindent();
        writer.writeln(""String_Node_Str"");
      }
    }
  finally {
      model.close();
    }
  }
 catch (  IfcEngineException e) {
    throw e;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9947122861586314
160680,"private void writeVisualScenes(JsWriter writer){
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  for (  String materialId : converted.keySet()) {
    writer.writeln(""String_Node_Str"");
    writer.indent();
    writer.writeln(""String_Node_Str"");
    writer.writeln(""String_Node_Str"" + materialId + ""String_Node_Str"");
    Set<String> geometryIds=converted.get(materialId);
    writer.writeln(""String_Node_Str"");
    writer.indent();
    for (    String geometryId : geometryIds) {
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"" + geometryId + ""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
    }
    writer.unindent();
    writer.writeln(""String_Node_Str"");
    writer.unindent();
    writer.writeln(""String_Node_Str"");
  }
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
}","private void writeVisualScenes(JsWriter writer){
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.indent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  for (  String materialId : converted.keySet()) {
    writer.writeln(""String_Node_Str"");
    writer.indent();
    writer.writeln(""String_Node_Str"");
    writer.writeln(""String_Node_Str"" + materialId + ""String_Node_Str"");
    Set<String> geometryIds=converted.get(materialId);
    writer.writeln(""String_Node_Str"");
    writer.indent();
    for (    String geometryId : geometryIds) {
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"" + geometryId + ""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
    }
    writer.unindent();
    writer.writeln(""String_Node_Str"");
    writer.unindent();
    writer.writeln(""String_Node_Str"");
  }
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
  writer.unindent();
  writer.writeln(""String_Node_Str"");
}",0.7410787029493238
160681,"@Override public boolean write(OutputStream out) throws SerializerException {
  if (getMode() == Mode.BODY) {
    try {
      ifcEngine=getPluginManager().requireIfcEngine().createIfcEngine();
    }
 catch (    PluginException e) {
      throw new SerializerException(e);
    }
    JsWriter writer=new JsWriter(out);
    try {
      writeAssets(writer);
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writeMaterials(writer);
      writeGeometries(writer);
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writeCameras(writer);
      writeLights(writer);
      writeVisualScenes(writer);
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.flush();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    writer.flush();
    setMode(Mode.FINISHED);
    ifcEngine.close();
    return true;
  }
 else   if (getMode() == Mode.FINISHED) {
    return false;
  }
  return false;
}","@Override public boolean write(OutputStream out) throws SerializerException {
  if (getMode() == Mode.BODY) {
    try {
      ifcEngine=getPluginManager().requireIfcEngine().createIfcEngine();
    }
 catch (    PluginException e) {
      throw new SerializerException(e);
    }
    JsWriter writer=new JsWriter(out);
    try {
      writeAssets(writer);
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writer.writeln(""String_Node_Str"");
      writer.writeln(""String_Node_Str"");
      writer.indent();
      writeMaterials(writer);
      writeGeometries(writer);
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writeCameras(writer);
      writeLights(writer);
      writeVisualScenes(writer);
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.unindent();
      writer.writeln(""String_Node_Str"");
      writer.flush();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    writer.flush();
    setMode(Mode.FINISHED);
    ifcEngine.close();
    return true;
  }
 else   if (getMode() == Mode.FINISHED) {
    return false;
  }
  return false;
}",0.9882352941176472
160682,"@SuppressWarnings(""String_Node_Str"") private static void removeReplaceLinks(IfcModel model,IdEObject mainObject,IdEObject objectToRemove){
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (mainObject == objectToRemove) {
    return;
  }
  for (  IdEObject idEObject : model.getValues()) {
    for (    EReference eReference : idEObject.eClass().getEAllReferences()) {
      Object value=idEObject.eGet(eReference);
      if (eReference.isMany()) {
        List<IdEObject> list=(List<IdEObject>)value;
        for (        IdEObject val : list) {
          if (val == objectToRemove) {
            if (!list.contains(mainObject)) {
              list.set(list.indexOf(val),mainObject);
            }
 else {
              System.out.println();
            }
          }
        }
      }
 else {
        if (value == objectToRemove) {
          idEObject.eSet(eReference,mainObject);
        }
      }
    }
  }
  model.remove(objectToRemove);
}","@SuppressWarnings(""String_Node_Str"") private static void removeReplaceLinks(IfcModel model,IdEObject mainObject,IdEObject objectToRemove){
  if (mainObject.eClass() != objectToRemove.eClass()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  for (  IdEObject idEObject : model.getValues()) {
    for (    EReference eReference : idEObject.eClass().getEAllReferences()) {
      Object value=idEObject.eGet(eReference);
      if (eReference.isMany()) {
        List<IdEObject> list=(List<IdEObject>)value;
        for (        IdEObject val : list) {
          if (val == objectToRemove) {
            if (!list.contains(mainObject)) {
              list.set(list.indexOf(val),mainObject);
            }
          }
        }
      }
 else {
        if (value == objectToRemove) {
          idEObject.eSet(eReference,mainObject);
        }
      }
    }
  }
  model.remove(objectToRemove);
}",0.3518324607329843
160683,"private void writeEffect(PrintWriter out,String name,float[] colors){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + name + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + colors[0] + ""String_Node_Str""+ colors[1]+ ""String_Node_Str""+ colors[2]+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","private void writeEffect(PrintWriter out,String name,float[] colors){
  out.println(""String_Node_Str"" + name + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + colors[0] + ""String_Node_Str""+ colors[1]+ ""String_Node_Str""+ colors[2]+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9886591060707138
160684,"private void writeEffects(PrintWriter out){
  writeEffect(out,""String_Node_Str"",new float[]{0.137255f,0.403922f,0.870588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.837255f,0.203922f,0.270588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.637255f,0.603922f,0.670588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.537255f,0.337255f,0.237255f});
  writeEffect(out,""String_Node_Str"",new float[]{0.637255f,0.603922f,0.670588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.2f,0.2f,0.8f});
  writeEffect(out,""String_Node_Str"",new float[]{0.137255f,0.203922f,0.270588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.437255f,0.603922f,0.370588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.437255f,0.603922f,0.370588f});
  out.println(""String_Node_Str"");
}","private void writeEffects(PrintWriter out){
  out.println(""String_Node_Str"");
  writeEffect(out,""String_Node_Str"",new float[]{0.137255f,0.403922f,0.870588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.837255f,0.203922f,0.270588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.637255f,0.603922f,0.670588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.537255f,0.337255f,0.237255f});
  writeEffect(out,""String_Node_Str"",new float[]{0.637255f,0.603922f,0.670588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.2f,0.2f,0.8f});
  writeEffect(out,""String_Node_Str"",new float[]{0.137255f,0.203922f,0.270588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.437255f,0.603922f,0.370588f});
  writeEffect(out,""String_Node_Str"",new float[]{0.437255f,0.603922f,0.370588f});
  out.println(""String_Node_Str"");
}",0.9790123456790124
160685,"public static IfcModel merge(Project project,Set<IfcModel> ifcModels){
  long size=0;
  for (  IfcModel ifcModel : ifcModels) {
    size+=ifcModel.size();
  }
  IfcModel endModel=new IfcModel((int)size);
  float foundPrefix=Float.MIN_VALUE;
  boolean allModelsSameScale=allModelsSameScale(ifcModels,foundPrefix);
  if (allModelsSameScale) {
    for (    IfcModel ifcModel : ifcModels) {
      for (      long key : ifcModel.keySet()) {
        endModel.add(ifcModel.get(key));
      }
    }
  }
 else {
    SIPrefix prefix=project.getExportLengthMeasurePrefix();
    for (    IfcModel ifcModel : ifcModels) {
      setLengthUnitToMilli(ifcModel);
      float scale=(float)(getLengthUnitPrefix(ifcModel) * Math.pow(10.0,prefix.ordinal()));
      ifcModel.indexGuids();
      for (      long key : ifcModel.keySet()) {
        IdEObject idEObject=ifcModel.get(key);
        if (idEObject instanceof IfcAsymmetricIShapeProfileDef) {
          setIfcAsymmetricIShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBlock) {
          setIfcBlock(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBoundingBox) {
          setIfcBoundingBox(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBuilding) {
          setIfcBuilding(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBuildingStorey) {
          setIfcBuildingStorey(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCartesianPoint) {
          setIfcCartesianPoint(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCenterLineProfileDef) {
          setIfcCenterLineProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcChamferEdgeFeature) {
          setIfcChamferEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircle) {
          setIfcCircle(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircleHollowProfileDef) {
          setIfcCircleHollowProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircleProfileDef) {
          setIfcCircleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCraneRailAShapeProfileDef) {
          setIfcCraneRailAShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCraneRailFShapeProfileDef) {
          setIfcCraneRailFShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcConnectionPointEccentricity) {
          setIfcConnectionPointEccentricity(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCShapeProfileDef) {
          setIfcCShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCurveStyleFontPattern) {
          setIfcCurveStyleFontPattern(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoor) {
          setIfcDoor(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoorLiningProperties) {
          setIfcDoorLiningProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoorPanelProperties) {
          setIfcDoorPanelProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEdgeFeature) {
          setIfcEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEllipse) {
          setIfcEllipse(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEllipseProfileDef) {
          setIfcEllipseProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcExtrudedAreaSolid) {
          setIfcExtrudedAreaSolid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcGeneralProfileProperties) {
          setIfcGeneralProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcIShapeProfileDef) {
          setIfcIShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcLightSourcePositional) {
          setIfcLightSourcePositional(idEObject,scale);
        }
 else         if (idEObject instanceof IfcLShapeProfileDef) {
          setIfcLShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMaterialLayer) {
          setIfcMaterialLayer(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMaterialLayerSetUsage) {
          setIfcMaterialLayerSetUsage(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMechanicalConcreteMaterialProperties) {
          setIfcMechanicalConcreteMaterialProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMechanicalFastener) {
          setIfcMechanicalFastener(idEObject,scale);
        }
 else         if (idEObject instanceof IfcOffsetCurve2D) {
          setIfcOffsetCurve2D(idEObject,scale);
        }
 else         if (idEObject instanceof IfcOffsetCurve3D) {
          setIfcOffsetCurve3D(idEObject,scale);
        }
 else         if (idEObject instanceof IfcPermeableCoveringProperties) {
          setIfcPermeableCoveringProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcPlanarExtent) {
          setIfcPlanarExtent(idEObject,scale);
        }
 else         if (idEObject instanceof IfcQuantityLength) {
          setIfcQuantityLength(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangleHollowProfileDef) {
          setIfcRectangleHollowProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangleProfileDef) {
          setIfcRectangleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangularPyramid) {
          setIfcRectangularPyramid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcementBarProperties) {
          setIfcReinforcementBarProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcingBar) {
          setIfcReinforcingBar(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcingMesh) {
          setIfcReinforcingMesh(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRelConnectsStructuralMember) {
          setIfcRelConnectsStructuralMember(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRibPlateProfileProperties) {
          setIfcRibPlateProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRightCircularCone) {
          setIfcRightCircularCone(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRightCircularCylinder) {
          setIfcRightCircularCylinder(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRoundedEdgeFeature) {
          setIfcRoundedEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRoundedRectangleProfileDef) {
          setIfcRoundedRectangleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSectionReinforcementProperties) {
          setIfcSectionReinforcementProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSite) {
          setIfcSite(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSlippageConnectionCondition) {
          setIfcSlippageConnectionCondition(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSpace) {
          setIfcSpace(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSphere) {
          setIfcSphere(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStairFlight) {
          setIfcStairFlight(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralLoadSingleDisplacement) {
          setIfcStructuralLoadSingleDisplacement(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralProfileProperties) {
          setIfcStructuralProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralSurfaceMember) {
          setIfcStructuralSurfaceMember(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralSurfaceMemberVarying) {
          setIfcStructuralSurfaceMemberVarying(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSurfaceOfLinearExtrusion) {
          setIfcSurfaceOfLinearExtrusion(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSweptDiskSolid) {
          setIfcSweptDiskSolid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTendon) {
          setIfcTendon(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTextStyleWithBoxCharacteristics) {
          setIfcTextStyleWithBoxCharacteristics(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTrapeziumProfileDef) {
          setIfcTrapeziumProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTShapeProfileDef) {
          setIfcTShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcUShapeProfileDef) {
          setIfcUShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcVector) {
          setIfcVector(idEObject,scale);
        }
 else         if (idEObject instanceof IfcVirtualGridIntersection) {
          setIfcVirtualGridIntersection(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindow) {
          setIfcWindow(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindowLiningProperties) {
          setIfcWindowLiningProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindowPanelProperties) {
          setIfcWindowPanelProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcZShapeProfileDef) {
          setIfcZShapeProfileDef(idEObject,scale);
        }
        endModel.add(key,ifcModel.get(key));
      }
    }
  }
  return endModel;
}","public static IfcModel merge(Project project,Set<IfcModel> ifcModels){
  long size=0;
  for (  IfcModel ifcModel : ifcModels) {
    size+=ifcModel.size();
  }
  IfcModel endModel=new IfcModel((int)size);
  float foundPrefix=Float.MIN_VALUE;
  boolean allModelsSameScale=allModelsSameScale(ifcModels,foundPrefix);
  if (allModelsSameScale) {
    for (    IfcModel ifcModel : ifcModels) {
      for (      long key : ifcModel.keySet()) {
        endModel.add(key,ifcModel.get(key));
      }
    }
  }
 else {
    SIPrefix prefix=project.getExportLengthMeasurePrefix();
    for (    IfcModel ifcModel : ifcModels) {
      setLengthUnitToMilli(ifcModel);
      float scale=(float)(getLengthUnitPrefix(ifcModel) * Math.pow(10.0,prefix.ordinal()));
      ifcModel.indexGuids();
      for (      long key : ifcModel.keySet()) {
        IdEObject idEObject=ifcModel.get(key);
        if (idEObject instanceof IfcAsymmetricIShapeProfileDef) {
          setIfcAsymmetricIShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBlock) {
          setIfcBlock(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBoundingBox) {
          setIfcBoundingBox(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBuilding) {
          setIfcBuilding(idEObject,scale);
        }
 else         if (idEObject instanceof IfcBuildingStorey) {
          setIfcBuildingStorey(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCartesianPoint) {
          setIfcCartesianPoint(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCenterLineProfileDef) {
          setIfcCenterLineProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcChamferEdgeFeature) {
          setIfcChamferEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircle) {
          setIfcCircle(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircleHollowProfileDef) {
          setIfcCircleHollowProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCircleProfileDef) {
          setIfcCircleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCraneRailAShapeProfileDef) {
          setIfcCraneRailAShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCraneRailFShapeProfileDef) {
          setIfcCraneRailFShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcConnectionPointEccentricity) {
          setIfcConnectionPointEccentricity(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCShapeProfileDef) {
          setIfcCShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcCurveStyleFontPattern) {
          setIfcCurveStyleFontPattern(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoor) {
          setIfcDoor(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoorLiningProperties) {
          setIfcDoorLiningProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcDoorPanelProperties) {
          setIfcDoorPanelProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEdgeFeature) {
          setIfcEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEllipse) {
          setIfcEllipse(idEObject,scale);
        }
 else         if (idEObject instanceof IfcEllipseProfileDef) {
          setIfcEllipseProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcExtrudedAreaSolid) {
          setIfcExtrudedAreaSolid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcGeneralProfileProperties) {
          setIfcGeneralProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcIShapeProfileDef) {
          setIfcIShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcLightSourcePositional) {
          setIfcLightSourcePositional(idEObject,scale);
        }
 else         if (idEObject instanceof IfcLShapeProfileDef) {
          setIfcLShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMaterialLayer) {
          setIfcMaterialLayer(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMaterialLayerSetUsage) {
          setIfcMaterialLayerSetUsage(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMechanicalConcreteMaterialProperties) {
          setIfcMechanicalConcreteMaterialProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcMechanicalFastener) {
          setIfcMechanicalFastener(idEObject,scale);
        }
 else         if (idEObject instanceof IfcOffsetCurve2D) {
          setIfcOffsetCurve2D(idEObject,scale);
        }
 else         if (idEObject instanceof IfcOffsetCurve3D) {
          setIfcOffsetCurve3D(idEObject,scale);
        }
 else         if (idEObject instanceof IfcPermeableCoveringProperties) {
          setIfcPermeableCoveringProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcPlanarExtent) {
          setIfcPlanarExtent(idEObject,scale);
        }
 else         if (idEObject instanceof IfcQuantityLength) {
          setIfcQuantityLength(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangleHollowProfileDef) {
          setIfcRectangleHollowProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangleProfileDef) {
          setIfcRectangleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRectangularPyramid) {
          setIfcRectangularPyramid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcementBarProperties) {
          setIfcReinforcementBarProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcingBar) {
          setIfcReinforcingBar(idEObject,scale);
        }
 else         if (idEObject instanceof IfcReinforcingMesh) {
          setIfcReinforcingMesh(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRelConnectsStructuralMember) {
          setIfcRelConnectsStructuralMember(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRibPlateProfileProperties) {
          setIfcRibPlateProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRightCircularCone) {
          setIfcRightCircularCone(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRightCircularCylinder) {
          setIfcRightCircularCylinder(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRoundedEdgeFeature) {
          setIfcRoundedEdgeFeature(idEObject,scale);
        }
 else         if (idEObject instanceof IfcRoundedRectangleProfileDef) {
          setIfcRoundedRectangleProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSectionReinforcementProperties) {
          setIfcSectionReinforcementProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSite) {
          setIfcSite(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSlippageConnectionCondition) {
          setIfcSlippageConnectionCondition(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSpace) {
          setIfcSpace(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSphere) {
          setIfcSphere(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStairFlight) {
          setIfcStairFlight(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralLoadSingleDisplacement) {
          setIfcStructuralLoadSingleDisplacement(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralProfileProperties) {
          setIfcStructuralProfileProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralSurfaceMember) {
          setIfcStructuralSurfaceMember(idEObject,scale);
        }
 else         if (idEObject instanceof IfcStructuralSurfaceMemberVarying) {
          setIfcStructuralSurfaceMemberVarying(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSurfaceOfLinearExtrusion) {
          setIfcSurfaceOfLinearExtrusion(idEObject,scale);
        }
 else         if (idEObject instanceof IfcSweptDiskSolid) {
          setIfcSweptDiskSolid(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTendon) {
          setIfcTendon(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTextStyleWithBoxCharacteristics) {
          setIfcTextStyleWithBoxCharacteristics(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTrapeziumProfileDef) {
          setIfcTrapeziumProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcTShapeProfileDef) {
          setIfcTShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcUShapeProfileDef) {
          setIfcUShapeProfileDef(idEObject,scale);
        }
 else         if (idEObject instanceof IfcVector) {
          setIfcVector(idEObject,scale);
        }
 else         if (idEObject instanceof IfcVirtualGridIntersection) {
          setIfcVirtualGridIntersection(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindow) {
          setIfcWindow(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindowLiningProperties) {
          setIfcWindowLiningProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcWindowPanelProperties) {
          setIfcWindowPanelProperties(idEObject,scale);
        }
 else         if (idEObject instanceof IfcZShapeProfileDef) {
          setIfcZShapeProfileDef(idEObject,scale);
        }
        endModel.add(key,ifcModel.get(key));
      }
    }
  }
  return endModel;
}",0.9997992371009836
160686,"@Nullable @Override public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element){
  if (element instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)element;
    PsiAnnotation subscriberAnnotation=PsiConsultantImpl.findAnnotationOnMethod(psiMethod,OttoProjectHandler.SUBSCRIBE_CLASS_NAME);
    if (subscriberAnnotation != null) {
      PsiTypeElement methodParameter=getMethodParameter(psiMethod);
      if (methodParameter != null) {
        return new LineMarkerInfo<PsiElement>(psiMethod,methodParameter.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_INSTANTIATIONS_AND_PRODUCERS,GutterIconRenderer.Alignment.LEFT);
      }
    }
    PsiAnnotation producerAnnotation=PsiConsultantImpl.findAnnotationOnMethod(psiMethod,OttoProjectHandler.PRODUCER_CLASS_NAME);
    if (producerAnnotation != null) {
      return new LineMarkerInfo<PsiElement>(psiMethod,psiMethod.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_SUBSCRIBERS_FROM_PRODUCERS,GutterIconRenderer.Alignment.LEFT);
    }
  }
 else   if (element instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)element;
    String qualifiedName=psiClass.getQualifiedName();
    if (qualifiedName != null) {
      OttoProjectHandler ottoProjectHandler=OttoProjectHandler.get(element.getProject());
      if (ottoProjectHandler.isEventClass(qualifiedName)) {
        PsiIdentifier nameIdentifier=psiClass.getNameIdentifier();
        if (nameIdentifier != null) {
          return new LineMarkerInfo<PsiClass>(psiClass,nameIdentifier.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_ALL,GutterIconRenderer.Alignment.LEFT);
        }
      }
    }
  }
 else   if (element instanceof PsiMethodCallExpression) {
    PsiMethodCallExpression expression=(PsiMethodCallExpression)element;
    PsiMethod psiMethod=expression.resolveMethod();
    if (psiMethod != null) {
      if (psiMethod.equals(getOttoBusMethod(element))) {
        PsiType[] expressionTypes=expression.getArgumentList().getExpressionTypes();
        if (expressionTypes.length > 0) {
          PsiClass eventClass=PsiConsultantImpl.getClass(expressionTypes[0]);
          return new LineMarkerInfo<PsiElement>(eventClass,element.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_SUBSCRIBERS,GutterIconRenderer.Alignment.LEFT);
        }
      }
    }
  }
  return null;
}","@Nullable @Override public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element){
  if (element instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)element;
    PsiAnnotation subscriberAnnotation=PsiConsultantImpl.findAnnotationOnMethod(psiMethod,OttoProjectHandler.SUBSCRIBE_CLASS_NAME);
    if (subscriberAnnotation != null) {
      PsiTypeElement methodParameter=getMethodParameter(psiMethod);
      if (methodParameter != null) {
        return new LineMarkerInfo<PsiElement>(psiMethod,methodParameter.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_INSTANTIATIONS_AND_PRODUCERS,GutterIconRenderer.Alignment.LEFT);
      }
    }
    PsiAnnotation producerAnnotation=PsiConsultantImpl.findAnnotationOnMethod(psiMethod,OttoProjectHandler.PRODUCER_CLASS_NAME);
    if (producerAnnotation != null) {
      return new LineMarkerInfo<PsiElement>(psiMethod,psiMethod.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_SUBSCRIBERS_FROM_PRODUCERS,GutterIconRenderer.Alignment.LEFT);
    }
  }
 else   if (element instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)element;
    String qualifiedName=psiClass.getQualifiedName();
    if (qualifiedName != null) {
      OttoProjectHandler ottoProjectHandler=OttoProjectHandler.get(element.getProject());
      if (ottoProjectHandler.isEventClass(qualifiedName)) {
        PsiIdentifier nameIdentifier=psiClass.getNameIdentifier();
        if (nameIdentifier != null) {
          return new LineMarkerInfo<PsiClass>(psiClass,nameIdentifier.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_ALL,GutterIconRenderer.Alignment.LEFT);
        }
      }
    }
  }
 else   if (element instanceof PsiMethodCallExpression) {
    PsiMethodCallExpression expression=(PsiMethodCallExpression)element;
    PsiMethod psiMethod=expression.resolveMethod();
    if (psiMethod != null) {
      if (psiMethod.equals(getOttoBusMethod(element))) {
        PsiType[] expressionTypes=expression.getArgumentList().getExpressionTypes();
        if (expressionTypes.length > 0) {
          return new LineMarkerInfo<PsiElement>(element,element.getTextRange(),ICON,Pass.UPDATE_ALL,null,SHOW_SUBSCRIBERS,GutterIconRenderer.Alignment.LEFT);
        }
      }
    }
  }
  return null;
}",0.9793379249055766
160687,"private void maybeAddSubscriberMethod(PsiMethod element){
  PsiTypeElement methodParameter=OttoLineMarkerProvider.getMethodParameter(element);
  if (methodParameter != null) {
    String canonicalText=methodParameter.getType().getCanonicalText();
    VirtualFile virtualFile=methodParameter.getContainingFile().getVirtualFile();
synchronized (fileToEventClasses) {
      Set<String> eventClasses=getEventClasses(virtualFile);
      eventClasses.add(canonicalText);
    }
  }
}","private void maybeAddSubscriberMethod(PsiMethod element){
  PsiTypeElement methodParameter=OttoLineMarkerProvider.getMethodParameter(element);
  if (methodParameter != null) {
    String canonicalText=methodParameter.getType().getCanonicalText();
    PsiFile containingFile=methodParameter.getContainingFile();
    if (containingFile != null) {
      VirtualFile virtualFile=containingFile.getVirtualFile();
      if (virtualFile != null) {
synchronized (fileToEventClasses) {
          Set<String> eventClasses=getEventClasses(virtualFile);
          eventClasses.add(canonicalText);
        }
      }
    }
  }
}",0.7357798165137615
160688,"@Nullable public PsiMethod getBusPostMethod(Project project){
  JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
  GlobalSearchScope globalSearchScope=GlobalSearchScope.allScope(project);
  PsiClass busClass=javaPsiFacade.findClass(getBusClassName(),globalSearchScope);
  if (busClass != null) {
    for (    PsiMethod psiMethod : busClass.getMethods()) {
      if (psiMethod.getName().equals(""String_Node_Str""))       return psiMethod;
    }
  }
  return null;
}","@Nullable public PsiMethod getBusPostMethod(Project project){
  JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
  GlobalSearchScope globalSearchScope=GlobalSearchScope.allScope(project);
  PsiClass busClass=javaPsiFacade.findClass(getBusClassName(),globalSearchScope);
  if (busClass != null) {
    for (    PsiMethod psiMethod : busClass.getMethods()) {
      if (psiMethod.getName().equals(""String_Node_Str"")) {
        return psiMethod;
      }
    }
  }
  return null;
}",0.987603305785124
160689,"public static boolean isAnnotatedWithProducer(PsiMethod method){
  for (  SubscriberMetadata info : subscribers) {
    if (info.getProducerClassName() == null)     continue;
    PsiAnnotation annotation=PsiConsultantImpl.findAnnotationOnMethod(method,info.getProducerClassName());
    if (annotation != null)     return true;
  }
  return false;
}","public static boolean isAnnotatedWithProducer(PsiMethod method){
  for (  SubscriberMetadata info : subscribers) {
    if (info.getProducerClassName() == null) {
      continue;
    }
    PsiAnnotation annotation=PsiConsultantImpl.findAnnotationOnMethod(method,info.getProducerClassName());
    if (annotation != null) {
      return true;
    }
  }
  return false;
}",0.9719887955182072
160690,"@Nullable public static SubscriberMetadata getSubscriberMetadata(PsiMethod method){
  for (  SubscriberMetadata info : subscribers) {
    PsiAnnotation annotation=PsiConsultantImpl.findAnnotationOnMethod(method,info.getSubscriberAnnotationClassName());
    if (annotation != null)     return info;
  }
  return null;
}","@Nullable public static SubscriberMetadata getSubscriberMetadata(PsiMethod method){
  for (  SubscriberMetadata info : subscribers) {
    PsiAnnotation annotation=PsiConsultantImpl.findAnnotationOnMethod(method,info.getSubscriberAnnotationClassName());
    if (annotation != null) {
      return info;
    }
  }
  return null;
}",0.9845201238390092
160691,"public static boolean isBusPostMethod(PsiMethod candidate,Project project){
  if (!candidate.getName().equals(""String_Node_Str""))   return false;
  for (  SubscriberMetadata subscriber : subscribers) {
    PsiMethod busPostMethod=subscriber.getBusPostMethod(project);
    if (candidate.equals(busPostMethod))     return true;
  }
  return false;
}","public static boolean isBusPostMethod(PsiMethod candidate,Project project){
  if (!candidate.getName().equals(""String_Node_Str"")) {
    return false;
  }
  for (  SubscriberMetadata subscriber : subscribers) {
    PsiMethod busPostMethod=subscriber.getBusPostMethod(project);
    if (candidate.equals(busPostMethod)) {
      return true;
    }
  }
  return false;
}",0.9747191011235956
160692,"@Override public void run(){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format(""String_Node_Str"",searchScope,System.currentTimeMillis() - startTime));
  }
}","@Override public void run(){
  PsiManager manager=PsiManager.getInstance(myProject);
  DaemonCodeAnalyzer codeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
synchronized (fileToEventClasses) {
    for (    VirtualFile virtualFile : fileToEventClasses.keySet()) {
      PsiFile psiFile=manager.findFile(virtualFile);
      if (psiFile == null)       continue;
      codeAnalyzer.restart(psiFile);
    }
  }
}",0.1924398625429553
160693,"private void findEventsViaMethodsAnnotatedSubscribe(){
  performSearch(ProjectScope.getProjectScope(myProject));
  optimizeEventClassIndex();
}","private void findEventsViaMethodsAnnotatedSubscribe(){
  performSearch(ProjectScope.getProjectScope(myProject));
}",0.8871595330739299
160694,"private void performSearch(final SearchScope searchScope){
  JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(myProject);
  PsiClass subscribePsiClass=javaPsiFacade.findClass(SUBSCRIBE_CLASS_NAME,GlobalSearchScope.allScope(myProject));
  if (subscribePsiClass == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  FindUsagesHandler handler=findUsagesManager.getNewFindUsagesHandler(subscribePsiClass,false);
  if (handler != null) {
    UsageInfoToUsageConverter.TargetElementsDescriptor descriptor=new UsageInfoToUsageConverter.TargetElementsDescriptor(handler.getPrimaryElements(),handler.getSecondaryElements());
    final long startTime=System.currentTimeMillis();
    Processor<Usage> processor=new Processor<Usage>(){
      @Override public boolean process(      Usage usage){
        if (usage instanceof UsageInfo2UsageAdapter) {
          PsiElement element=((UsageInfo2UsageAdapter)usage).getElement();
          if ((element=element.getContext()) instanceof PsiAnnotation) {
            if ((element=element.getContext()) instanceof PsiModifierList) {
              if ((element=element.getContext()) instanceof PsiMethod) {
                if (PsiConsultantImpl.findAnnotationOnMethod((PsiMethod)element,SUBSCRIBE_CLASS_NAME) != null) {
                  maybeAddSubscriberMethod((PsiMethod)element);
                }
              }
            }
          }
        }
        return true;
      }
    }
;
    JavaClassFindUsagesOptions options=new JavaClassFindUsagesOptions(myProject);
    options.searchScope=searchScope;
    FindUsagesManager.startProcessUsages(handler,descriptor,processor,options,new Runnable(){
      @Override public void run(){
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug(String.format(""String_Node_Str"",searchScope,System.currentTimeMillis() - startTime));
        }
      }
    }
);
  }
}","private void performSearch(final SearchScope searchScope){
  JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(myProject);
  PsiClass subscribePsiClass=javaPsiFacade.findClass(SUBSCRIBE_CLASS_NAME,GlobalSearchScope.allScope(myProject));
  if (subscribePsiClass == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  FindUsagesHandler handler=findUsagesManager.getNewFindUsagesHandler(subscribePsiClass,false);
  if (handler != null) {
    UsageInfoToUsageConverter.TargetElementsDescriptor descriptor=new UsageInfoToUsageConverter.TargetElementsDescriptor(handler.getPrimaryElements(),handler.getSecondaryElements());
    final long startTime=System.currentTimeMillis();
    Processor<Usage> processor=new Processor<Usage>(){
      @Override public boolean process(      Usage usage){
        if (usage instanceof UsageInfo2UsageAdapter) {
          PsiElement element=((UsageInfo2UsageAdapter)usage).getElement();
          if ((element=element.getContext()) instanceof PsiAnnotation) {
            if ((element=element.getContext()) instanceof PsiModifierList) {
              if ((element=element.getContext()) instanceof PsiMethod) {
                if (PsiConsultantImpl.findAnnotationOnMethod((PsiMethod)element,SUBSCRIBE_CLASS_NAME) != null) {
                  maybeAddSubscriberMethod((PsiMethod)element);
                }
              }
            }
          }
        }
        return true;
      }
    }
;
    JavaClassFindUsagesOptions options=new JavaClassFindUsagesOptions(myProject);
    options.searchScope=searchScope;
    FindUsagesManager.startProcessUsages(handler,descriptor,processor,options,new Runnable(){
      @Override public void run(){
        optimizeEventClassIndex();
        scheduleRefreshOfEventFiles();
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug(String.format(""String_Node_Str"",searchScope,System.currentTimeMillis() - startTime));
        }
      }
    }
);
  }
}",0.9806079664570232
160695,"public static AnnotationFieldKind valueOf(ProcessingEnvironment processingEnv,TypeMirror type){
  TypeMirror componentType=componentTypeOf(type);
  if (componentType.getKind().isPrimitive()) {
    return PRIMITIVE;
  }
 else   if (String.class.getCanonicalName().equals(componentType.toString())) {
    return STRING;
  }
 else   if (Class.class.getCanonicalName().equals(componentType.toString())) {
    return CLASS;
  }
 else {
    ImmutableList<String> superTypesClassNames=FluentIterable.from(processingEnv.getTypeUtils().directSupertypes(componentType)).transform(Functions.toStringFunction()).toList();
    if (superTypesClassNames.contains(Annotation.class.getCanonicalName())) {
      return ANNOTATION;
    }
 else {
      return ENUM;
    }
  }
}","public static AnnotationFieldKind valueOf(ProcessingEnvironment processingEnv,TypeMirror type){
  TypeMirror componentType=componentTypeOf(type);
  if (componentType.getKind().isPrimitive()) {
    return PRIMITIVE;
  }
 else   if (String.class.getCanonicalName().equals(componentType.toString())) {
    return STRING;
  }
 else   if (Class.class.getCanonicalName().equals(TypeHelper.rawTypeFrom(componentType.toString()))) {
    return CLASS;
  }
 else {
    ImmutableList<String> superTypesClassNames=FluentIterable.from(processingEnv.getTypeUtils().directSupertypes(componentType)).transform(Functions.toStringFunction()).toList();
    if (superTypesClassNames.contains(Annotation.class.getCanonicalName())) {
      return ANNOTATION;
    }
 else {
      return ENUM;
    }
  }
}",0.9544863459037712
160696,"String getValueCodeInstanciation(){
  if (AnnotationFieldKind.ANNOTATION.equals(this.kind)) {
    return ""String_Node_Str"";
  }
 else   if (isArray) {
    return String.format(""String_Node_Str"",type,Joiner.on(""String_Node_Str"").join((List)value));
  }
 else {
    return ""String_Node_Str"" + kind.transformSingleValueToExpression(value,this);
  }
}","String getValueCodeInstanciation(){
  if (AnnotationFieldKind.ANNOTATION.equals(this.kind)) {
    return ""String_Node_Str"";
  }
 else   if (isArray) {
    return String.format(""String_Node_Str"",TypeHelper.rawTypeFrom(type.toString()),Joiner.on(""String_Node_Str"").join((List)value));
  }
 else {
    return ""String_Node_Str"" + kind.transformSingleValueToExpression(value,this);
  }
}",0.9492455418381344
160697,"private AnnotationDescription createAnnotationDescriptionFrom(AnnotationMirror methodAnnotation,ExecutableElement element){
  ImmutableList.Builder<AnnotationField> annotationFieldsBuilder=ImmutableList.builder();
  for (  Map.Entry<? extends ExecutableElement,? extends AnnotationValue> fieldEntry : methodAnnotation.getElementValues().entrySet()) {
    String fieldName=fieldEntry.getKey().toString();
    TypeMirror type=fieldEntry.getKey().getReturnType();
    TypeMirror componentType=AnnotationFieldKind.componentTypeOf(type);
    boolean arrayed=AnnotationFieldKind.isArrayed(type);
    AnnotationFieldKind annotationFieldKind=AnnotationFieldKind.valueOf(processingEnv,type);
    annotationFieldsBuilder.add(new AnnotationField(fieldName.substring(0,fieldName.length() - ""String_Node_Str"".length()),fieldEntry.getValue().getValue(),componentType,annotationFieldKind,arrayed));
  }
  AnnotationDescription annotationDescription=new AnnotationDescription(methodAnnotation.getAnnotationType().toString(),annotationFieldsBuilder.build());
  return annotationDescription;
}","private AnnotationDescription createAnnotationDescriptionFrom(AnnotationMirror methodAnnotation,ExecutableElement element){
  ImmutableList.Builder<AnnotationField> annotationFieldsBuilder=ImmutableList.builder();
  ImmutableSet.Builder<String> annotationFieldNamesBuilder=ImmutableSet.builder();
  for (  Map.Entry<? extends ExecutableElement,? extends AnnotationValue> fieldEntry : methodAnnotation.getElementValues().entrySet()) {
    String fieldName=fieldEntry.getKey().toString().substring(0,fieldEntry.getKey().toString().length() - ""String_Node_Str"".length());
    TypeMirror type=fieldEntry.getKey().getReturnType();
    TypeMirror componentType=AnnotationFieldKind.componentTypeOf(type);
    boolean arrayed=AnnotationFieldKind.isArrayed(type);
    AnnotationFieldKind annotationFieldKind=AnnotationFieldKind.valueOf(processingEnv,type);
    annotationFieldsBuilder.add(new AnnotationField(fieldName,fieldEntry.getValue().getValue(),componentType,annotationFieldKind,arrayed));
    annotationFieldNamesBuilder.add(fieldName);
  }
  ImmutableSet<String> declaredAnnotationFieldNames=annotationFieldNamesBuilder.build();
  for (  Symbol annotationMember : ((Symbol.ClassSymbol)methodAnnotation.getAnnotationType().asElement()).members().getElements()) {
    if (annotationMember instanceof Symbol.MethodSymbol) {
      Symbol.MethodSymbol annotationMemberAsMethod=(Symbol.MethodSymbol)annotationMember;
      String fieldName=annotationMemberAsMethod.getSimpleName().toString();
      if (!declaredAnnotationFieldNames.contains(fieldName)) {
        Type type=annotationMemberAsMethod.getReturnType();
        TypeMirror componentType=AnnotationFieldKind.componentTypeOf(type);
        boolean arrayed=AnnotationFieldKind.isArrayed(type);
        AnnotationFieldKind annotationFieldKind=AnnotationFieldKind.valueOf(processingEnv,type);
        annotationFieldsBuilder.add(new AnnotationField(fieldName,annotationMemberAsMethod.getDefaultValue() == null ? null : annotationMemberAsMethod.getDefaultValue().getValue(),componentType,annotationFieldKind,arrayed));
      }
    }
  }
  AnnotationDescription annotationDescription=new AnnotationDescription(methodAnnotation.getAnnotationType().toString(),annotationFieldsBuilder.build());
  return annotationDescription;
}",0.4234099731263063
160698,"private static int compareByPriorityAndName(int p1,Name<?> n1,int p2,Name<?> n2){
  int c=p1 - p2;
  if (c == 0) {
    return n1.asId().compareTo(n2.asId());
  }
 else {
    return c;
  }
}","private static int compareByPriorityAndName(int p1,Name<?> n1,int p2,Name<?> n2){
  int priorityComparison=Integer.compare(p1,p2);
  if (priorityComparison == 0) {
    return n1.asId().compareTo(n2.asId());
  }
 else {
    return priorityComparison;
  }
}",0.8063063063063063
160699,"@Override public T readBody(RestxRequest req,RestxContext ctx) throws IOException {
  InputStream contentStream=req.getContentStream();
  if (contentStream.available() == 0) {
    contentStream.close();
    return null;
  }
  return reader.readValue(contentStream);
}","@Override public T readBody(RestxRequest req,RestxContext ctx) throws IOException {
  return readNullableValue(reader,req.getContentStream());
}",0.583941605839416
160700,"public static ParameterExpressionBuilder createFromMapQueryObjectFromRequest(RestxAnnotationProcessor.ResourceMethodParameter parameter,EndpointParameterKind kind){
  return new ParameterExpressionBuilder(String.format(""String_Node_Str"",parameter.type,parameter.reqParamName,kind.name()),kind.name());
}","public static ParameterExpressionBuilder createFromMapQueryObjectFromRequest(RestxAnnotationProcessor.ResourceMethodParameter parameter,EndpointParameterKind kind){
  return new ParameterExpressionBuilder(String.format(""String_Node_Str"",TypeHelper.isParameterizedType(parameter.type) ? ""String_Node_Str"" + parameter.type + ""String_Node_Str"" : ""String_Node_Str"",TypeHelper.rawTypeFrom(parameter.type),parameter.reqParamName,kind.name()),kind.name());
}",0.76657824933687
160701,"@Provides public RestxRouteFilter routeFilterExample(){
  return new RestxRouteFilter(){
    @Override public Optional<RestxHandlerMatch> match(    RestxRoute route){
      if (route instanceof ExampleRoute) {
        return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str""),new RestxHandler(){
          @Override public void handle(          RestxRequestMatch match,          RestxRequest req,          RestxResponse resp,          RestxContext ctx) throws IOException {
            resp.getWriter().write(""String_Node_Str"");
            ctx.nextHandlerMatch().handle(req,resp,ctx);
            resp.getWriter().write(""String_Node_Str"");
          }
        }
));
      }
 else {
        return Optional.absent();
      }
    }
  }
;
}","@Provides(priority=12000) public RestxRouteFilter routeFilterExample(){
  return new RestxRouteFilter(){
    @Override public Optional<RestxHandlerMatch> match(    RestxRoute route){
      if (route instanceof ExampleRoute) {
        return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str""),new RestxHandler(){
          @Override public void handle(          RestxRequestMatch match,          RestxRequest req,          RestxResponse resp,          RestxContext ctx) throws IOException {
            resp.getWriter().write(""String_Node_Str"");
            ctx.nextHandlerMatch().handle(req,resp,ctx);
            resp.getWriter().write(""String_Node_Str"");
          }
        }
));
      }
 else {
        return Optional.absent();
      }
    }
  }
;
}",0.9896507115135834
160702,"protected boolean isSimpleCORSRequest(RestxRequest req){
  return SIMPLE_METHODS.contains(req.getHttpMethod());
}","protected boolean isSimpleCORSRequest(RestxRequest req){
  if (!SIMPLE_METHODS.contains(req.getHttpMethod())) {
    return false;
  }
  Optional<String> origin=req.getHeader(""String_Node_Str"");
  if (!origin.isPresent()) {
    return false;
  }
  Optional<String> host=req.getHeader(""String_Node_Str"");
  if (!host.isPresent()) {
    return true;
  }
  if (origin.get().endsWith(host.get())) {
    logger.debug(""String_Node_Str"",req);
    return false;
  }
 else {
    return true;
  }
}",0.3433333333333333
160703,"@Override public Optional<RestxHandlerMatch> match(RestxRequest req){
  Optional<String> origin=req.getHeader(""String_Node_Str"");
  if (""String_Node_Str"".equals(req.getHttpMethod()) && origin.isPresent()) {
    CORS cors=CORS.check(authorizers,req,origin.get(),""String_Node_Str"",req.getRestxPath());
    if (cors.isAccepted()) {
      return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str"",req.getRestxPath(),ImmutableMap.<String,String>of(),ImmutableMap.of(""String_Node_Str"",cors)),this));
    }
  }
  return Optional.absent();
}","@Override public Optional<RestxHandlerMatch> match(RestxRequest req){
  Optional<String> origin=req.getHeader(""String_Node_Str"");
  if (origin.isPresent() && isSimpleCORSRequest(req)) {
    CORS cors=CORS.check(authorizers,req,origin.get(),req.getHttpMethod(),req.getRestxPath());
    if (cors.isAccepted()) {
      return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str"",req.getRestxPath(),ImmutableMap.<String,String>of(),ImmutableMap.of(""String_Node_Str"",cors)),this));
    }
 else {
      logger.info(""String_Node_Str"",origin.get(),req.getHttpMethod());
      return unauthorized(req);
    }
  }
  return Optional.absent();
}",0.7911184210526315
160704,"@Override public Optional<RestxHandlerMatch> match(RestxRequest req){
  Optional<String> acrMethod=req.getHeader(""String_Node_Str"");
  Optional<String> origin=req.getHeader(""String_Node_Str"");
  if (""String_Node_Str"".equals(req.getHttpMethod()) && acrMethod.isPresent()) {
    CORS cors=CORS.check(authorizers,req,origin.get(),acrMethod.get(),req.getRestxPath());
    if (cors.isAccepted()) {
      return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str"",req.getRestxPath(),ImmutableMap.<String,String>of(),ImmutableMap.of(""String_Node_Str"",cors)),this));
    }
  }
  return Optional.absent();
}","@Override public Optional<RestxHandlerMatch> match(RestxRequest req){
  Optional<String> acrMethod=req.getHeader(""String_Node_Str"");
  if (""String_Node_Str"".equals(req.getHttpMethod()) && acrMethod.isPresent()) {
    Optional<String> origin=req.getHeader(""String_Node_Str"");
    CORS cors=CORS.check(authorizers,req,origin.get(),acrMethod.get(),req.getRestxPath());
    if (cors.isAccepted()) {
      return Optional.of(new RestxHandlerMatch(new StdRestxRequestMatch(""String_Node_Str"",req.getRestxPath(),ImmutableMap.<String,String>of(),ImmutableMap.of(""String_Node_Str"",cors)),this));
    }
 else {
      logger.info(""String_Node_Str"",origin.get(),acrMethod.get());
      return unauthorized(req);
    }
  }
  return Optional.absent();
}",0.8273328434974284
160705,"@Test public void should_handle_auto_startable_in_dev_mode() throws Exception {
  Factory.LocalMachines.threadLocal().addMachine(new SingletonFactoryMachine<>(-1000,NamedComponent.of(String.class,""String_Node_Str"",""String_Node_Str"")));
  try {
    SimpleWebServer server=SimpleWebServer.builder().setRouterPath(""String_Node_Str"").setPort(WebServers.findAvailablePort()).build();
    server.start();
    try {
      HttpRequest httpRequest=HttpRequest.get(server.baseUrl() + ""String_Node_Str"");
      assertThat(httpRequest.code()).isEqualTo(200);
      assertThat(httpRequest.body().trim()).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + server.getServerId() + ""String_Node_Str""+ server.baseUrl()+ ""String_Node_Str"");
      httpRequest=HttpRequest.get(server.baseUrl() + ""String_Node_Str"");
      assertThat(httpRequest.code()).isEqualTo(200);
      assertThat(httpRequest.body().trim()).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + server.getServerId() + ""String_Node_Str""+ server.baseUrl()+ ""String_Node_Str"");
    }
  finally {
      server.stop();
    }
  }
  finally {
    Factory.LocalMachines.threadLocal().clear();
  }
}","@Test public void should_handle_auto_startable_in_dev_mode() throws Exception {
  Factory.LocalMachines.threadLocal().addMachine(new SingletonFactoryMachine<>(-1000,NamedComponent.of(String.class,""String_Node_Str"",""String_Node_Str"")));
  try {
    SimpleWebServer server=SimpleWebServer.builder().setRouterPath(""String_Node_Str"").setPort(WebServers.findAvailablePort()).build();
    server.start();
    try {
      HttpTestClient client=HttpTestClient.withBaseUrl(server.baseUrl());
      HttpRequest httpRequest=client.GET(""String_Node_Str"");
      assertThat(httpRequest.code()).isEqualTo(200);
      assertThat(httpRequest.body().trim()).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + server.getServerId() + ""String_Node_Str""+ server.baseUrl()+ ""String_Node_Str"");
      httpRequest=client.GET(""String_Node_Str"");
      assertThat(httpRequest.code()).isEqualTo(200);
      assertThat(httpRequest.body().trim()).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + server.getServerId() + ""String_Node_Str""+ server.baseUrl()+ ""String_Node_Str"");
    }
  finally {
      server.stop();
    }
  }
  finally {
    Factory.LocalMachines.threadLocal().clear();
  }
}",0.9216710182767625
160706,"public File getStoreFile(String path){
  String basePath=settings.recorderBasePath();
  return new File(basePath + ""String_Node_Str"" + path);
}","public File getStoreFile(String path){
  if (path.startsWith(""String_Node_Str"")) {
    return new File(path);
  }
 else {
    String basePath=settings.recorderBasePath();
    return new File(basePath + ""String_Node_Str"" + path);
  }
}",0.7586206896551724
160707,"public RestxSpecTape doRecord(final Optional<String> recordPath,final Optional<String> recordTitle) throws IOException {
  specTape.set(this);
  for (  RestxSpecRecorder.GivenRecorder recorder : recorders) {
    givenTapes.add(recorder.recordIn(givens));
  }
  DateTime now=DateTime.now();
  givens.put(GivenTime.class.getSimpleName() + ""String_Node_Str"",new GivenTime(now));
  DateTimeUtils.setCurrentMillisFixed(now.getMillis());
  recordedSpec.setRecordTime(now);
  Stopwatch stopwatch=new Stopwatch().start();
  System.out.print(""String_Node_Str"");
  final String method=restxRequest.getHttpMethod();
  final String path=restxRequest.getRestxUri().substring(1);
  final ImmutableMap<String,String> cookies=sessionFilter.toCookiesMap(sessionFilter.buildContextFromRequest(restxRequest));
  final byte[] requestBody=ByteStreams.toByteArray(restxRequest.getContentStream());
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ path+ ""String_Node_Str""+ requestBody.length+ ""String_Node_Str""+ stopwatch.stop());
  recordedSpec.setCapturedRequestSize(requestBody.length);
  id=specId.incrementAndGet();
  final String title=recordTitle.or(buildTitle(id,method,path));
  final String specPath=storage.buildPath(recordPath,title);
  recordingRequest=new RestxRequestWrapper(restxRequest){
    @Override public InputStream getContentStream() throws IOException {
      return new ByteArrayInputStream(requestBody);
    }
  }
;
  recordingResponse=new RestxResponseWrapper(restxResponse){
    private Stopwatch stopwatch=new Stopwatch();
    private ByteArrayOutputStream baos;
    private PrintWriter realWriter;
    private PrintWriter writer;
    private OutputStream realOS;
    public HttpStatus status=HttpStatus.OK;
    @Override public PrintWriter getWriter() throws IOException {
      if (writer == null) {
        if (recordPath.isPresent()) {
          super.setHeader(""String_Node_Str"",specPath);
        }
        System.out.print(""String_Node_Str"");
        stopwatch.start();
        realWriter=super.getWriter();
        writer=new PrintWriter(baos=new ByteArrayOutputStream());
      }
      return writer;
    }
    @Override public OutputStream getOutputStream() throws IOException {
      if (recordPath.isPresent()) {
        super.setHeader(""String_Node_Str"",specPath);
      }
      System.out.print(""String_Node_Str"");
      stopwatch.start();
      realOS=super.getOutputStream();
      return baos=new ByteArrayOutputStream();
    }
    @Override public HttpStatus getStatus(){
      return status;
    }
    @Override public RestxResponse setStatus(    HttpStatus i){
      super.setStatus(i);
      status=i;
      return null;
    }
    @Override public void close() throws Exception {
      System.out.println(""String_Node_Str"" + baos.size() + ""String_Node_Str""+ stopwatch.stop());
      if (realWriter != null) {
        CharStreams.copy(CharStreams.asCharSource(baos.toString(Charsets.UTF_8.name())).openStream(),realWriter);
      }
 else       if (realOS != null) {
        ByteStreams.copy(ByteStreams.asByteSource(baos.toByteArray()).openStream(),realOS);
      }
      super.close();
      RestxSpec restxSpec=new RestxSpec(specPath,title,ImmutableList.copyOf(givens.values()),ImmutableList.<When>of(new WhenHttpRequest(method,path,cookies,new String(requestBody,Charsets.UTF_8),new ThenHttpResponse(status.getCode(),baos.toString(Charsets.UTF_8.name())))));
      System.out.println(""String_Node_Str"" + restxSpec + ""String_Node_Str""+ ""String_Node_Str"");
      recordedSpec.setId(id).setSpec(restxSpec).setMethod(method).setPath(path).setDuration(new Duration(recordedSpec.getRecordTime(),new DateTime(System.currentTimeMillis()))).setCapturedResponseSize(baos.size());
    }
  }
;
  return this;
}","public RestxSpecTape doRecord(final Optional<String> recordPath,final Optional<String> recordTitle) throws IOException {
  specTape.set(this);
  for (  RestxSpecRecorder.GivenRecorder recorder : recorders) {
    givenTapes.add(recorder.recordIn(givens));
  }
  DateTime now=DateTime.now();
  givens.put(GivenTime.class.getSimpleName() + ""String_Node_Str"",new GivenTime(now));
  DateTimeUtils.setCurrentMillisFixed(now.getMillis());
  recordedSpec.setRecordTime(now);
  Stopwatch stopwatch=new Stopwatch().start();
  System.out.print(""String_Node_Str"");
  final String method=restxRequest.getHttpMethod();
  final String path=restxRequest.getRestxUri().substring(1);
  final ImmutableMap<String,String> cookies=sessionFilter.toCookiesMap(sessionFilter.buildContextFromRequest(restxRequest));
  final byte[] requestBody=ByteStreams.toByteArray(restxRequest.getContentStream());
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ path+ ""String_Node_Str""+ requestBody.length+ ""String_Node_Str""+ stopwatch.stop());
  recordedSpec.setCapturedRequestSize(requestBody.length);
  id=specId.incrementAndGet();
  final String title=recordTitle.or(buildTitle(id,method,path));
  final String specPath=storage.buildPath(recordPath,title);
  recordingRequest=new RestxRequestWrapper(restxRequest){
    @Override public InputStream getContentStream() throws IOException {
      return new ByteArrayInputStream(requestBody);
    }
  }
;
  recordingResponse=new RestxResponseWrapper(restxResponse){
    private Stopwatch stopwatch=new Stopwatch();
    private ByteArrayOutputStream baos;
    private PrintWriter realWriter;
    private PrintWriter writer;
    private OutputStream realOS;
    public HttpStatus status=HttpStatus.OK;
    @Override public PrintWriter getWriter() throws IOException {
      if (writer == null) {
        if (recordPath.isPresent()) {
          super.setHeader(""String_Node_Str"",specPath);
        }
        System.out.print(""String_Node_Str"");
        stopwatch.start();
        realWriter=super.getWriter();
        writer=new PrintWriter(baos=new ByteArrayOutputStream());
      }
      return writer;
    }
    @Override public OutputStream getOutputStream() throws IOException {
      if (recordPath.isPresent()) {
        super.setHeader(""String_Node_Str"",specPath);
      }
      System.out.print(""String_Node_Str"");
      stopwatch.start();
      realOS=super.getOutputStream();
      return baos=new ByteArrayOutputStream();
    }
    @Override public HttpStatus getStatus(){
      return status;
    }
    @Override public RestxResponse setStatus(    HttpStatus i){
      super.setStatus(i);
      status=i;
      return null;
    }
    @Override public void close() throws Exception {
      if (writer != null) {
        writer.flush();
      }
      System.out.println(""String_Node_Str"" + baos.size() + ""String_Node_Str""+ stopwatch.stop());
      if (realWriter != null) {
        CharStreams.copy(CharStreams.asCharSource(baos.toString(Charsets.UTF_8.name())).openStream(),realWriter);
      }
 else       if (realOS != null) {
        ByteStreams.copy(ByteStreams.asByteSource(baos.toByteArray()).openStream(),realOS);
      }
      super.close();
      Iterator<AutoCloseable> iterator=givenTapes.iterator();
      while (iterator.hasNext()) {
        AutoCloseable givenTape=iterator.next();
        try {
          givenTape.close();
          iterator.remove();
        }
 catch (        Exception e) {
        }
      }
      DateTimeUtils.setCurrentMillisSystem();
      RestxSpec restxSpec=new RestxSpec(specPath,title,ImmutableList.copyOf(givens.values()),ImmutableList.<When>of(new WhenHttpRequest(method,path,cookies,new String(requestBody,Charsets.UTF_8),new ThenHttpResponse(status.getCode(),baos.toString(Charsets.UTF_8.name())))));
      System.out.println(""String_Node_Str"" + restxSpec + ""String_Node_Str""+ ""String_Node_Str"");
      recordedSpec.setId(id).setSpec(restxSpec).setMethod(method).setPath(path).setDuration(new Duration(recordedSpec.getRecordTime(),DateTime.now())).setCapturedResponseSize(baos.size());
    }
  }
;
  return this;
}",0.9448477900904344
160708,"@Override public void close() throws Exception {
  System.out.println(""String_Node_Str"" + baos.size() + ""String_Node_Str""+ stopwatch.stop());
  if (realWriter != null) {
    CharStreams.copy(CharStreams.asCharSource(baos.toString(Charsets.UTF_8.name())).openStream(),realWriter);
  }
 else   if (realOS != null) {
    ByteStreams.copy(ByteStreams.asByteSource(baos.toByteArray()).openStream(),realOS);
  }
  super.close();
  RestxSpec restxSpec=new RestxSpec(specPath,title,ImmutableList.copyOf(givens.values()),ImmutableList.<When>of(new WhenHttpRequest(method,path,cookies,new String(requestBody,Charsets.UTF_8),new ThenHttpResponse(status.getCode(),baos.toString(Charsets.UTF_8.name())))));
  System.out.println(""String_Node_Str"" + restxSpec + ""String_Node_Str""+ ""String_Node_Str"");
  recordedSpec.setId(id).setSpec(restxSpec).setMethod(method).setPath(path).setDuration(new Duration(recordedSpec.getRecordTime(),new DateTime(System.currentTimeMillis()))).setCapturedResponseSize(baos.size());
}","@Override public void close() throws Exception {
  if (writer != null) {
    writer.flush();
  }
  System.out.println(""String_Node_Str"" + baos.size() + ""String_Node_Str""+ stopwatch.stop());
  if (realWriter != null) {
    CharStreams.copy(CharStreams.asCharSource(baos.toString(Charsets.UTF_8.name())).openStream(),realWriter);
  }
 else   if (realOS != null) {
    ByteStreams.copy(ByteStreams.asByteSource(baos.toByteArray()).openStream(),realOS);
  }
  super.close();
  Iterator<AutoCloseable> iterator=givenTapes.iterator();
  while (iterator.hasNext()) {
    AutoCloseable givenTape=iterator.next();
    try {
      givenTape.close();
      iterator.remove();
    }
 catch (    Exception e) {
    }
  }
  DateTimeUtils.setCurrentMillisSystem();
  RestxSpec restxSpec=new RestxSpec(specPath,title,ImmutableList.copyOf(givens.values()),ImmutableList.<When>of(new WhenHttpRequest(method,path,cookies,new String(requestBody,Charsets.UTF_8),new ThenHttpResponse(status.getCode(),baos.toString(Charsets.UTF_8.name())))));
  System.out.println(""String_Node_Str"" + restxSpec + ""String_Node_Str""+ ""String_Node_Str"");
  recordedSpec.setId(id).setSpec(restxSpec).setMethod(method).setPath(path).setDuration(new Duration(recordedSpec.getRecordTime(),DateTime.now())).setCapturedResponseSize(baos.size());
}",0.8358728776665215
160709,"private Class<?> getCTJacksonViewClass(Type valueType,String contentType,Class<?> defaultClazz){
  int parameterIndex=contentType.indexOf(JACKSON_VIEW_PARAMETER);
  if (parameterIndex != -1) {
    String className=contentType.substring(parameterIndex + JACKSON_VIEW_PARAMETER.length());
    try {
      return Class.forName(className);
    }
 catch (    ClassNotFoundException e) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"",className,valueType,contentType);
      throw new IllegalStateException(e);
    }
  }
  return defaultClazz;
}","private Class<?> getCTJacksonViewClass(Type valueType,String contentType,Class<?> defaultClazz){
  int parameterIndex=contentType.indexOf(JACKSON_VIEW_PARAMETER);
  if (parameterIndex != -1) {
    String className=contentType.substring(parameterIndex + JACKSON_VIEW_PARAMETER.length());
    try {
      return Class.forName(className,true,Thread.currentThread().getContextClassLoader());
    }
 catch (    ClassNotFoundException e) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"",className,valueType,contentType);
      throw new IllegalStateException(e);
    }
  }
  return defaultClazz;
}",0.954782608695652
160710,"@Override public GivenCleaner run(GivenUUIDGenerator given,ImmutableMap<String,String> params){
  NamedComponent<UUIDGenerator> playbackUUIDComponent=NamedComponent.of(UUIDGenerator.class,given.getTargetComponentName(),new UUIDGenerator.PlaybackUUIDGenerator(given.getPlaybackUUIDs()));
  final UUIDGeneratorFactory.OverridenMachineCleaner cleaner=UUIDGeneratorFactory.overwriteUUIDGenerator(playbackUUIDComponent);
  return new GivenCleaner(){
    @Override public void cleanUp(){
      cleaner.cleanup();
    }
  }
;
}","@Override public GivenCleaner run(GivenUUIDGenerator given,ImmutableMap<String,String> params){
  NamedComponent<UUIDGenerator> playbackUUIDComponent=NamedComponent.of(UUIDGenerator.class,given.getTargetComponentName(),new UUIDGenerator.PlaybackUUIDGenerator(given.getPlaybackUUIDs()));
  final UUIDGenerators.OverridenMachineCleaner cleaner=UUIDGenerators.overrideUUIDGenerator(playbackUUIDComponent);
  return new GivenCleaner(){
    @Override public void cleanUp(){
      cleaner.cleanup();
    }
  }
;
}",0.967867575462512
160711,"@Provides public RestxSessionCookieDescriptor restxSessionCookieDescriptor(@Named(""String_Node_Str"") Optional<String> appName){
  if (appName.isPresent()) {
    return new RestxSessionCookieDescriptor(String.format(""String_Node_Str"",""String_Node_Str"",appName),String.format(""String_Node_Str"",""String_Node_Str"",appName));
  }
 else {
    return new RestxSessionCookieDescriptor(""String_Node_Str"",""String_Node_Str"");
  }
}","@Provides public RestxSessionCookieDescriptor restxSessionCookieDescriptor(@Named(""String_Node_Str"") Optional<String> appName){
  if (appName.isPresent()) {
    return new RestxSessionCookieDescriptor(String.format(""String_Node_Str"",""String_Node_Str"",appName.get()),String.format(""String_Node_Str"",""String_Node_Str"",appName.get()));
  }
 else {
    return new RestxSessionCookieDescriptor(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9859154929577464
160712,"@Override public boolean isPersistentCookie(String cookie){
  return request.getCookies().contains(cookie) ? request.getCookie(cookie).getExpiry() > 0 : false;
}","@Override public boolean isPersistentCookie(String cookie){
  Map<String,String> cookiesMap=getCookiesMap();
  return cookiesMap.containsKey(cookie) ? request.getCookie(cookie).getExpiry() > 0 : false;
}",0.7307692307692307
160713,"@Override public String getCookieValue(String cookie,String defaultValue){
  return request.getCookies().contains(cookie) ? request.getCookie(cookie).getValue() : defaultValue;
}","@Override public String getCookieValue(String cookie,String defaultValue){
  Map<String,String> cookiesMap=getCookiesMap();
  return cookiesMap.containsKey(cookie) ? cookiesMap.get(cookie) : defaultValue;
}",0.5104166666666666
160714,"public GivenCleaner run(final GivenJongoCollection given,final ImmutableMap<String,String> params){
  try {
    MongoClientURI mongoClientURI=new MongoClientURI(checkNotNull(params.get(DB_URI),DB_URI + ""String_Node_Str""));
    Jongo jongo=new Jongo(new MongoClient(mongoClientURI).getDB(mongoClientURI.getDatabase()));
    Stopwatch stopwatch=new Stopwatch().start();
    MongoCollection collection=jongo.getCollection(given.getCollection());
    Iterable<String> items=Splitter.on(""String_Node_Str"").trimResults().omitEmptyStrings().split(given.getData());
    int count=0;
    for (    String item : items) {
      collection.insert(item);
      count++;
    }
    System.out.printf(""String_Node_Str"",given.getCollection(),count,stopwatch.stop().toString());
    final UnmodifiableIterator<String> it=given.getSequence().iterator();
    final CollectionSequence iteratingSequence=new CollectionSequence(){
      @Override public Optional<String> next(){
        return it.hasNext() ? Optional.of(it.next()) : Optional.<String>absent();
      }
    }
;
    final Factory.Query<Mapper> mapperQuery=Factory.Query.byClass(Mapper.class);
    contextLocal(checkNotNull(params.get(CONTEXT_NAME),CONTEXT_NAME + ""String_Node_Str"")).addMachine(new SingleNameFactoryMachine<>(0,new StdMachineEngine<ComponentCustomizerEngine>(Name.of(ComponentCustomizerEngine.class,""String_Node_Str""),BoundlessComponentBox.FACTORY){
      @Override public BillOfMaterials getBillOfMaterial(){
        return BillOfMaterials.of(mapperQuery);
      }
      @Override protected ComponentCustomizerEngine doNewComponent(      final SatisfiedBOM satisfiedBOM){
        return new SingleComponentNameCustomizerEngine<JongoCollection>(0,Name.of(JongoCollection.class,given.getCollection())){
          @Override public NamedComponent<JongoCollection> customize(          NamedComponent<JongoCollection> namedComponent){
            if (namedComponent.getName().equals(given.getCollection())) {
              Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
              return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
            }
 else {
              return namedComponent;
            }
          }
        }
;
      }
    }
));
    return new GivenCleaner(){
      @Override public void cleanUp(){
        try {
          MongoClientURI mongoClientURI=new MongoClientURI(checkNotNull(params.get(DB_URI),DB_URI + ""String_Node_Str""));
          Jongo jongo=new Jongo(new MongoClient(mongoClientURI).getDB(mongoClientURI.getDatabase()));
          Stopwatch stopwatch=new Stopwatch().start();
          jongo.getCollection(given.getCollection()).drop();
          System.out.printf(""String_Node_Str"",given.getCollection(),stopwatch.stop().toString());
        }
 catch (        UnknownHostException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
}","public GivenCleaner run(final GivenJongoCollection given,final ImmutableMap<String,String> params){
  try {
    MongoClientURI mongoClientURI=new MongoClientURI(checkNotNull(params.get(DB_URI),DB_URI + ""String_Node_Str""));
    Jongo jongo=new Jongo(new MongoClient(mongoClientURI).getDB(mongoClientURI.getDatabase()));
    Stopwatch stopwatch=new Stopwatch().start();
    MongoCollection collection=jongo.getCollection(given.getCollection());
    Iterable<String> items=Splitter.on(""String_Node_Str"").trimResults().omitEmptyStrings().split(given.getData());
    int count=0;
    for (    String item : items) {
      collection.insert(item);
      count++;
    }
    System.out.printf(""String_Node_Str"",given.getCollection(),count,stopwatch.stop().toString());
    final UnmodifiableIterator<String> it=given.getSequence().iterator();
    final CollectionSequence iteratingSequence=new CollectionSequence(){
      @Override public Optional<String> next(){
        return it.hasNext() ? Optional.of(it.next()) : Optional.<String>absent();
      }
    }
;
    final Factory.Query<Mapper> mapperQuery=Factory.Query.byClass(Mapper.class);
    contextLocal(checkNotNull(params.get(CONTEXT_NAME),CONTEXT_NAME + ""String_Node_Str"")).addMachine(new SingleNameFactoryMachine<>(0,new StdMachineEngine<ComponentCustomizerEngine>(Name.of(ComponentCustomizerEngine.class,""String_Node_Str""),BoundlessComponentBox.FACTORY){
      @Override public BillOfMaterials getBillOfMaterial(){
        return BillOfMaterials.of(mapperQuery);
      }
      @Override protected ComponentCustomizerEngine doNewComponent(      final SatisfiedBOM satisfiedBOM){
        return new SingleComponentNameCustomizerEngine<JongoCollection>(0,Name.of(JongoCollection.class,given.getCollection())){
          @Override public NamedComponent<JongoCollection> customize(          NamedComponent<JongoCollection> namedComponent){
            if (namedComponent.getName().getName().equals(given.getCollection())) {
              Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
              return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
            }
 else {
              return namedComponent;
            }
          }
        }
;
      }
    }
));
    return new GivenCleaner(){
      @Override public void cleanUp(){
        try {
          MongoClientURI mongoClientURI=new MongoClientURI(checkNotNull(params.get(DB_URI),DB_URI + ""String_Node_Str""));
          Jongo jongo=new Jongo(new MongoClient(mongoClientURI).getDB(mongoClientURI.getDatabase()));
          Stopwatch stopwatch=new Stopwatch().start();
          jongo.getCollection(given.getCollection()).drop();
          System.out.printf(""String_Node_Str"",given.getCollection(),stopwatch.stop().toString());
        }
 catch (        UnknownHostException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
}",0.9983697424193022
160715,"@Override public NamedComponent<JongoCollection> customize(NamedComponent<JongoCollection> namedComponent){
  if (namedComponent.getName().equals(given.getCollection())) {
    Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
    return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
  }
 else {
    return namedComponent;
  }
}","@Override public NamedComponent<JongoCollection> customize(NamedComponent<JongoCollection> namedComponent){
  if (namedComponent.getName().getName().equals(given.getCollection())) {
    Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
    return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
  }
 else {
    return namedComponent;
  }
}",0.9892703862660944
160716,"@Override protected ComponentCustomizerEngine doNewComponent(final SatisfiedBOM satisfiedBOM){
  return new SingleComponentNameCustomizerEngine<JongoCollection>(0,Name.of(JongoCollection.class,given.getCollection())){
    @Override public NamedComponent<JongoCollection> customize(    NamedComponent<JongoCollection> namedComponent){
      if (namedComponent.getName().equals(given.getCollection())) {
        Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
        return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
      }
 else {
        return namedComponent;
      }
    }
  }
;
}","@Override protected ComponentCustomizerEngine doNewComponent(final SatisfiedBOM satisfiedBOM){
  return new SingleComponentNameCustomizerEngine<JongoCollection>(0,Name.of(JongoCollection.class,given.getCollection())){
    @Override public NamedComponent<JongoCollection> customize(    NamedComponent<JongoCollection> namedComponent){
      if (namedComponent.getName().getName().equals(given.getCollection())) {
        Mapper mapper=satisfiedBOM.getOne(mapperQuery).get().getComponent();
        return new NamedComponent<>(namedComponent.getName(),new SequencedJongoCollection(namedComponent.getComponent(),mapper,mapper.getObjectIdUpdater(),iteratingSequence));
      }
 else {
        return namedComponent;
      }
    }
  }
;
}",0.9931318681318682
160717,"public void route(RestxRequest restxRequest,RestxResponse restxResponse) throws IOException {
  RestxSpecTape tape=null;
  if (restxSpecRecorder != null && !restxRequest.getRestxPath().startsWith(""String_Node_Str"")) {
    tape=restxSpecRecorder.record(restxRequest,restxResponse);
    restxRequest=tape.getRecordingRequest();
    restxResponse=tape.getRecordingResponse();
  }
  if (getLoadFactoryMode().equals(""String_Node_Str"")) {
    loadFactory();
  }
  try {
    mainRouter.route(restxRequest,restxResponse);
  }
  finally {
    if (tape != null) {
      restxSpecRecorder.stop(tape);
    }
    if (getLoadFactoryMode().equals(""String_Node_Str"")) {
      closeFactory();
    }
  }
}","@Override public void route(RestxRequest restxRequest,RestxResponse restxResponse) throws IOException {
  RestxSpecTape tape=null;
  if (restxSpecRecorder != null && !restxRequest.getRestxPath().startsWith(""String_Node_Str"")) {
    tape=restxSpecRecorder.record(restxRequest,restxResponse);
    restxRequest=tape.getRecordingRequest();
    restxResponse=tape.getRecordingResponse();
  }
  Factory factory=loadFactory(newFactoryBuilder(getFactoryContextName(restxRequest.getPort()),restxSpecRecorder));
  try {
    newStdRouter(factory).route(restxRequest,restxResponse);
  }
  finally {
    if (tape != null) {
      restxSpecRecorder.stop(tape);
    }
    factory.close();
  }
}",0.7701317715959004
160718,"private void logPrompt(String baseUri,String state){
  logger.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + state + (RestxContext.Modes.RECORDING.equals(getMode()) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (mainRouter != null ? (""String_Node_Str"" + mainRouter.getNbFilters() + ""String_Node_Str"") : ""String_Node_Str"")+ (mainRouter != null ? (""String_Node_Str"" + mainRouter.getNbRoutes() + ""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ baseUri+ ""String_Node_Str""+ ""String_Node_Str"");
}","private static void logPrompt(String baseUri,String state,StdRestxMainRouter mainRouter){
  logger.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + state + (RestxContext.Modes.RECORDING.equals(getMode()) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (mainRouter != null ? (""String_Node_Str"" + mainRouter.getNbFilters() + ""String_Node_Str"") : ""String_Node_Str"")+ (mainRouter != null ? (""String_Node_Str"" + mainRouter.getNbRoutes() + ""String_Node_Str"") : ""String_Node_Str"")+ (baseUri == null || baseUri.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + ""String_Node_Str"" + baseUri + ""String_Node_Str"")+ ""String_Node_Str"");
}",0.8221670802315963
160719,"private String getLoadFactoryMode(){
  return System.getProperty(""String_Node_Str"",""String_Node_Str"");
}","private static String getLoadFactoryMode(){
  return System.getProperty(""String_Node_Str"",RestxContext.Modes.RECORDING.equals(getMode()) ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.7323943661971831
160720,"private void loadFactory(){
  Factory.Builder builder=Factory.builder().addFromServiceLoader().addLocalMachines(Factory.LocalMachines.threadLocal()).addLocalMachines(Factory.LocalMachines.contextLocal(contextName));
  if (restxSpecRecorder != null) {
    builder.addLocalMachines(Factory.LocalMachines.contextLocal(RestxContext.Modes.RECORDING));
    builder.addMachine(new SingletonFactoryMachine<>(0,NamedComponent.of(RestxSpecRecorder.class,""String_Node_Str"",restxSpecRecorder)));
  }
  factory=builder.build();
  logger.debug(""String_Node_Str"",factory.dumper());
  mainRouter=new StdRestxMainRouter(factory.queryByClass(RestxRouting.class).findOne().get().getComponent());
}","private static Factory loadFactory(Factory.Builder builder){
  Factory factory=builder.build();
  logger.debug(""String_Node_Str"",factory.dumper());
  return factory;
}",0.3408284023668639
160721,"public static void main(String[] args) throws Exception {
  WebServer server=new SimpleWebServer(WEB_APP_LOCATION,8086);
  System.setProperty(""String_Node_Str"",server.baseUrl() + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  server.startAndAwait();
}","public static void main(String[] args) throws Exception {
  WebServer server=new SimpleWebServer(WEB_APP_LOCATION,8086);
  server.startAndAwait();
}",0.6836027713625866
160722,"public void start() throws Exception {
  server=new Server();
  server.setThreadPool(createThreadPool());
  server.addConnector(createConnector());
  server.setHandler(createHandlers());
  server.setStopAtShutdown(true);
  server.start();
}","public void start() throws Exception {
  server=new Server();
  server.setThreadPool(createThreadPool());
  server.addConnector(createConnector());
  server.setHandler(createHandlers(createContext()));
  server.setStopAtShutdown(true);
  server.start();
}",0.9696969696969696
160723,"private HandlerCollection createHandlers(){
  WebAppContext ctx=new WebAppContext();
  ctx.setContextPath(""String_Node_Str"");
  ctx.setWar(appBase);
  if (!Strings.isNullOrEmpty(webInfLocation)) {
    ctx.setDescriptor(webInfLocation);
  }
  HashLoginService loginService=new HashLoginService();
  loginService.setIdentityService(new DefaultIdentityService());
  ctx.getSecurityHandler().setLoginService(loginService);
  ctx.getSecurityHandler().setIdentityService(loginService.getIdentityService());
  HandlerList contexts=new HandlerList();
  contexts.setHandlers(new Handler[]{ctx});
  HandlerCollection result=new HandlerCollection();
  result.setHandlers(new Handler[]{contexts});
  return result;
}","private HandlerCollection createHandlers(WebAppContext webAppContext){
  HandlerList contexts=new HandlerList();
  contexts.setHandlers(new Handler[]{webAppContext});
  HandlerCollection result=new HandlerCollection();
  result.setHandlers(new Handler[]{contexts});
  return result;
}",0.5445344129554656
160724,"@Override public void start() throws Exception {
  logger.info(""String_Node_Str"");
  if (router instanceof RestxMainRouterFactory) {
    RestxMainRouterFactory mainRouterFactory=(RestxMainRouterFactory)router;
    mainRouterFactory.init();
  }
  Container container=new Container(){
    @Override public void handle(    Request request,    Response response){
      try {
        if (request.getTarget().startsWith(routerPath)) {
          router.route(new SimpleRestxRequest(routerPath,request),new SimpleRestxResponse(response));
        }
 else {
          response.getPrintStream().print(""String_Node_Str"");
          response.getPrintStream().close();
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  Server server=new ContainerServer(container);
  connection=new SocketConnection(server);
  SocketAddress address=new InetSocketAddress(port);
  connection.connect(address);
}","@Override public void start() throws Exception {
  logger.debug(""String_Node_Str"");
  Container container=new Container(){
    @Override public void handle(    Request request,    Response response){
      try {
        if (request.getTarget().startsWith(routerPath)) {
          router.route(new SimpleRestxRequest(routerPath,request),new SimpleRestxResponse(response));
        }
 else {
          response.getPrintStream().print(""String_Node_Str"");
          response.getPrintStream().close();
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  Server server=new ContainerServer(container);
  connection=new SocketConnection(server);
  SocketAddress address=new InetSocketAddress(port);
  connection.connect(address);
}",0.9012775842044136
160725,"public TomcatWebServer(String appBase,int port) throws ServletException {
  this.port=port;
  tomcat=new Tomcat();
  tomcat.setPort(port);
  tomcat.setBaseDir(""String_Node_Str"");
  tomcat.getHost().setAppBase(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  StandardServer server=(StandardServer)tomcat.getServer();
  AprLifecycleListener listener=new AprLifecycleListener();
  server.addLifecycleListener(listener);
  tomcat.addWebapp(contextPath,appBase);
}","public TomcatWebServer(String appBase,int port) throws ServletException {
  this.port=port;
  tomcat=new Tomcat();
  tomcat.setPort(port);
  tomcat.setBaseDir(""String_Node_Str"");
  tomcat.getHost().setAppBase(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  StandardServer server=(StandardServer)tomcat.getServer();
  AprLifecycleListener listener=new AprLifecycleListener();
  server.addLifecycleListener(listener);
  Context context=tomcat.addWebapp(contextPath,appBase);
  context.getServletContext().setInitParameter(""String_Node_Str"",baseUrl());
}",0.910318225650916
160726,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  mainRouter.init();
  init(mainRouter);
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String baseUri=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  String baseServer=config.getServletContext().getInitParameter(""String_Node_Str"");
  if (baseUri.isEmpty() && baseServer != null) {
    Collection<String> mappings=config.getServletContext().getServletRegistration(config.getServletName()).getMappings();
    if (!mappings.isEmpty()) {
      String routerPath=mappings.iterator().next();
      if (routerPath.endsWith(""String_Node_Str"")) {
        routerPath=routerPath.substring(0,routerPath.length() - 2);
      }
      baseUri=baseServer + routerPath;
    }
  }
  init(RestxMainRouterFactory.newInstance(baseUri));
}",0.2593856655290102
160727,"@Override public PrintWriter getWriter() throws IOException {
  if (charset == null) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    charset=Charsets.UTF_8.name();
  }
  return writer=new PrintWriter(new OutputStreamWriter(response.getPrintStream(),charset),true);
}","@Override public PrintWriter getWriter() throws IOException {
  if (writer != null) {
    return writer;
  }
  if (charset == null) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    charset=Charsets.UTF_8.name();
  }
  return writer=new PrintWriter(new OutputStreamWriter(response.getPrintStream(),charset),true);
}",0.9225700164744646
160728,"@Override public OutputStream getOutputStream() throws IOException {
  return outputStream=response.getOutputStream();
}","@Override public OutputStream getOutputStream() throws IOException {
  if (outputStream != null) {
    return outputStream;
  }
  return outputStream=response.getOutputStream();
}",0.802675585284281
160729,"@Override public void route(RestxRequest restxRequest,final RestxResponse restxResponse) throws IOException {
  logger.info(""String_Node_Str"",restxRequest);
  Monitor monitor=MonitorFactory.start(""String_Node_Str"" + restxRequest.getHttpMethod() + ""String_Node_Str""+ restxRequest.getRestxPath());
  try {
    Optional<RestxRouting.Match> m=routing.match(restxRequest);
    if (!m.isPresent()) {
      String path=restxRequest.getRestxPath();
      StringBuilder sb=new StringBuilder().append(""String_Node_Str"").append(restxRequest.getHttpMethod()).append(""String_Node_Str"").append(path).append(""String_Node_Str"");
      if (hasApiDocs()) {
        sb.append(""String_Node_Str"").append(restxRequest.getBaseUri()).append(""String_Node_Str"").append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      for (      RestxRoute route : routing.getRoutes()) {
        sb.append(route).append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      restxResponse.setStatus(404);
      restxResponse.setContentType(""String_Node_Str"");
      PrintWriter out=restxResponse.getWriter();
      out.print(sb.toString());
    }
 else {
      RouteLifecycleListener noCache=new RouteLifecycleListener(){
        @Override public void onRouteMatch(        RestxRoute source){
        }
        @Override public void onBeforeWriteContent(        RestxRoute source){
          restxResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
        }
      }
;
      RestxContext context=new RestxContext(getMode(),noCache,ImmutableList.copyOf(m.get().getMatches()));
      RestxRouteMatch match=context.nextHandlerMatch();
      match.getHandler().handle(match,restxRequest,restxResponse,context);
    }
  }
 catch (  JsonProcessingException ex) {
    logger.warn(""String_Node_Str"" + ex.getClass().getSimpleName(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    if (restxRequest.getContentStream() instanceof BufferedInputStream) {
      try {
        JsonLocation location=ex.getLocation();
        restxRequest.getContentStream().reset();
        out.println(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,ex.getClass().getSimpleName()) + ""String_Node_Str"" + ""String_Node_Str"");
        out.println(""String_Node_Str"");
        List<String> lines=CharStreams.readLines(new InputStreamReader(restxRequest.getContentStream()));
        for (int i=0; i < lines.size(); i++) {
          String line=lines.get(i);
          out.println(line);
          if (i + 1 == location.getLineNr()) {
            boolean farColumn=location.getColumnNr() > 80;
            out.println(Strings.repeat(""String_Node_Str"",Math.max(0,location.getColumnNr() - 2)) + ""String_Node_Str"");
            out.println(Strings.repeat(farColumn ? ""String_Node_Str"" : ""String_Node_Str"",Math.max(0,location.getColumnNr() - (ex.getOriginalMessage().length() / 2) - 3)) + ""String_Node_Str"" + ex.getOriginalMessage()+ ""String_Node_Str"");
            out.println();
          }
        }
        out.println(""String_Node_Str"");
        restxRequest.getContentStream().reset();
        logger.debug(ex.getClass().getSimpleName() + ""String_Node_Str"" + restxRequest+ ""String_Node_Str""+ ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ CharStreams.toString(new InputStreamReader(restxRequest.getContentStream())));
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        out.println(ex.getMessage());
      }
    }
  }
catch (  RestxError.RestxException ex) {
    logger.debug(""String_Node_Str"",ex);
    restxResponse.setStatus(ex.getErrorStatus());
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(ex.toJSON());
  }
catch (  IllegalArgumentException|IllegalStateException ex) {
    logger.warn(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(""String_Node_Str"");
    out.print(ex.getMessage());
  }
catch (  RuntimeException ex) {
    logger.error(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
    restxResponse.setStatus(500);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(""String_Node_Str"");
    out.print(ex.getMessage());
  }
 finally {
    try {
      restxRequest.closeContentStream();
    }
 catch (    Exception ex) {
    }
    try {
      restxResponse.close();
    }
 catch (    Exception ex) {
    }
    monitor.stop();
  }
}","@Override public void route(RestxRequest restxRequest,final RestxResponse restxResponse) throws IOException {
  logger.info(""String_Node_Str"",restxRequest);
  Monitor monitor=MonitorFactory.start(""String_Node_Str"" + restxRequest.getHttpMethod() + ""String_Node_Str""+ restxRequest.getRestxPath());
  try {
    Optional<RestxRouting.Match> m=routing.match(restxRequest);
    if (!m.isPresent()) {
      String path=restxRequest.getRestxPath();
      StringBuilder sb=new StringBuilder().append(""String_Node_Str"").append(restxRequest.getHttpMethod()).append(""String_Node_Str"").append(path).append(""String_Node_Str"");
      if (hasApiDocs()) {
        sb.append(""String_Node_Str"").append(restxRequest.getBaseUri()).append(""String_Node_Str"").append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      for (      RestxRoute route : routing.getRoutes()) {
        sb.append(route).append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      restxResponse.setStatus(404);
      restxResponse.setContentType(""String_Node_Str"");
      PrintWriter out=restxResponse.getWriter();
      out.print(sb.toString());
    }
 else {
      RouteLifecycleListener noCache=new RouteLifecycleListener(){
        @Override public void onRouteMatch(        RestxRoute source){
        }
        @Override public void onBeforeWriteContent(        RestxRoute source){
          restxResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
        }
      }
;
      RestxContext context=new RestxContext(getMode(),noCache,ImmutableList.copyOf(m.get().getMatches()));
      RestxRouteMatch match=context.nextHandlerMatch();
      match.getHandler().handle(match,restxRequest,restxResponse,context);
    }
  }
 catch (  JsonProcessingException ex) {
    logger.warn(""String_Node_Str"" + ex.getClass().getSimpleName(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    if (restxRequest.getContentStream() instanceof BufferedInputStream) {
      try {
        JsonLocation location=ex.getLocation();
        restxRequest.getContentStream().reset();
        out.println(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,ex.getClass().getSimpleName()) + ""String_Node_Str"" + ""String_Node_Str"");
        List<String> lines=CharStreams.readLines(new InputStreamReader(restxRequest.getContentStream()));
        if (lines.isEmpty()) {
          if (""String_Node_Str"".equalsIgnoreCase(restxRequest.getContentType())) {
            out.println(""String_Node_Str"" + restxRequest.getContentType() + ""String_Node_Str""+ ""String_Node_Str"");
          }
 else {
            out.println(""String_Node_Str"" + restxRequest.getContentType() + ""String_Node_Str"");
          }
        }
 else {
          out.println(""String_Node_Str"");
          for (int i=0; i < lines.size(); i++) {
            String line=lines.get(i);
            out.println(line);
            if (i + 1 == location.getLineNr()) {
              boolean farColumn=location.getColumnNr() > 80;
              out.println(Strings.repeat(""String_Node_Str"",Math.max(0,location.getColumnNr() - 2)) + ""String_Node_Str"");
              out.println(Strings.repeat(farColumn ? ""String_Node_Str"" : ""String_Node_Str"",Math.max(0,location.getColumnNr() - (ex.getOriginalMessage().length() / 2) - 3)) + ""String_Node_Str"" + ex.getOriginalMessage()+ ""String_Node_Str"");
              out.println();
            }
          }
          out.println(""String_Node_Str"");
        }
        restxRequest.getContentStream().reset();
        logger.debug(ex.getClass().getSimpleName() + ""String_Node_Str"" + restxRequest+ ""String_Node_Str""+ ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ CharStreams.toString(new InputStreamReader(restxRequest.getContentStream())));
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        out.println(ex.getMessage());
      }
    }
  }
catch (  RestxError.RestxException ex) {
    logger.debug(""String_Node_Str"",ex);
    restxResponse.setStatus(ex.getErrorStatus());
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(ex.toJSON());
  }
catch (  IllegalArgumentException|IllegalStateException ex) {
    logger.warn(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(""String_Node_Str"");
    out.print(ex.getMessage());
  }
catch (  RuntimeException ex) {
    logger.error(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
    restxResponse.setStatus(500);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.println(""String_Node_Str"");
    out.print(ex.getMessage());
  }
 finally {
    try {
      restxRequest.closeContentStream();
    }
 catch (    Exception ex) {
    }
    try {
      restxResponse.close();
    }
 catch (    Exception ex) {
    }
    monitor.stop();
  }
}",0.9377075576129617
160730,"public void check(ImmutableMap<String,String> params){
  Stopwatch stopwatch=new Stopwatch().start();
  String url=checkNotNull(params.get(BASE_URL),BASE_URL + ""String_Node_Str"") + ""String_Node_Str"" + getPath();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(getMethod() + ""String_Node_Str"" + url);
  System.out.println();
  HttpRequest httpRequest=new HttpRequest(url,getMethod());
  if (!cookies.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    for (    Map.Entry<String,String> entry : cookies.entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.setLength(sb.length() - 2);
    httpRequest.header(""String_Node_Str"",sb.toString());
  }
  if (!Strings.isNullOrEmpty(getBody())) {
    httpRequest.send(getBody());
    System.out.println(getBody());
  }
  System.out.println();
  int code=httpRequest.code();
  System.out.println(""String_Node_Str"");
  System.out.println(code);
  System.out.println();
  String body=httpRequest.body(Charsets.UTF_8.name());
  System.out.println(body);
  System.out.println();
  Assertions.assertThat(code).isEqualTo(getThen().getExpectedCode());
  MatcherAssert.assertThat(body,SameJSONAs.sameJSONAs(getThen().getExpected()).allowingExtraUnexpectedFields());
  System.out.printf(""String_Node_Str"",getMethod(),getPath(),stopwatch.stop().toString());
}","public void check(ImmutableMap<String,String> params){
  Stopwatch stopwatch=new Stopwatch().start();
  String url=checkNotNull(params.get(BASE_URL),BASE_URL + ""String_Node_Str"") + ""String_Node_Str"" + getPath();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(getMethod() + ""String_Node_Str"" + url);
  System.out.println();
  HttpRequest httpRequest=new HttpRequest(url,getMethod());
  if (!cookies.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    for (    Map.Entry<String,String> entry : cookies.entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.setLength(sb.length() - 2);
    httpRequest.header(""String_Node_Str"",sb.toString());
  }
  if (!Strings.isNullOrEmpty(getBody())) {
    httpRequest.contentType(""String_Node_Str"");
    httpRequest.send(getBody());
    System.out.println(getBody());
  }
  System.out.println();
  int code=httpRequest.code();
  System.out.println(""String_Node_Str"");
  System.out.println(code);
  System.out.println();
  String body=httpRequest.body(Charsets.UTF_8.name());
  System.out.println(body);
  System.out.println();
  Assertions.assertThat(code).isEqualTo(getThen().getExpectedCode());
  MatcherAssert.assertThat(body,SameJSONAs.sameJSONAs(getThen().getExpected()).allowingExtraUnexpectedFields());
  System.out.printf(""String_Node_Str"",getMethod(),getPath(),stopwatch.stop().toString());
}",0.9835277968428278
160731,"@Override public Query<T> setMandatory(boolean mandatory){
  return new ClassQuery(mayGetFactory(),isMandatory(),getComponentClass());
}","@Override public Query<T> setMandatory(boolean mandatory){
  return new ClassQuery(mayGetFactory(),mandatory,getComponentClass());
}",0.9776119402985076
160732,"public void route(String contextName,RestxRequest restxRequest,final RestxResponse restxResponse) throws IOException {
  logger.info(""String_Node_Str"",restxRequest);
  if (getLoadFactoryMode().equals(""String_Node_Str"")) {
    loadFactory(contextName);
  }
  try {
    if (!mainRouter.route(restxRequest,restxResponse,new RestxContext(RouteLifecycleListener.DEAF))) {
      String path=restxRequest.getRestxPath();
      String msg=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",restxRequest.getHttpMethod(),path,mainRouter);
      restxResponse.setStatus(404);
      restxResponse.setContentType(""String_Node_Str"");
      PrintWriter out=restxResponse.getWriter();
      out.print(msg);
      out.close();
    }
  }
 catch (  JsonProcessingException ex) {
    logger.debug(""String_Node_Str"" + ex.getClass().getSimpleName(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    if (restxRequest.getContentStream() instanceof BufferedInputStream) {
      try {
        JsonLocation location=ex.getLocation();
        restxRequest.getContentStream().reset();
        out.println(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,ex.getClass().getSimpleName()) + ""String_Node_Str"" + ""String_Node_Str"");
        out.println(""String_Node_Str"");
        List<String> lines=CharStreams.readLines(new InputStreamReader(restxRequest.getContentStream()));
        for (int i=0; i < lines.size(); i++) {
          String line=lines.get(i);
          out.println(line);
          if (i + 1 == location.getLineNr()) {
            out.print(Strings.repeat(""String_Node_Str"",location.getColumnNr() - 2));
            out.println(""String_Node_Str"");
            out.print(""String_Node_Str"");
            out.print(Strings.repeat(""String_Node_Str"",Math.max(0,location.getColumnNr() - (ex.getOriginalMessage().length() / 2) - 3)));
            out.print(ex.getOriginalMessage());
            out.println(""String_Node_Str"");
            out.println();
          }
        }
        out.println(""String_Node_Str"");
        restxRequest.getContentStream().reset();
        logger.debug(ex.getClass().getSimpleName() + ""String_Node_Str"" + restxRequest+ ""String_Node_Str""+ ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ CharStreams.toString(new InputStreamReader(restxRequest.getContentStream())));
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        out.println(ex.getMessage());
      }
    }
    out.close();
  }
catch (  IllegalArgumentException ex) {
    logger.debug(""String_Node_Str"",ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.print(ex.getMessage());
    out.close();
  }
 finally {
    try {
      restxRequest.closeContentStream();
    }
 catch (    Exception ex) {
    }
  }
}","public void route(String contextName,RestxRequest restxRequest,final RestxResponse restxResponse) throws IOException {
  logger.info(""String_Node_Str"",restxRequest);
  if (getLoadFactoryMode().equals(""String_Node_Str"")) {
    loadFactory(contextName);
  }
  try {
    if (!mainRouter.route(restxRequest,restxResponse,new RestxContext(RouteLifecycleListener.DEAF))) {
      String path=restxRequest.getRestxPath();
      String msg=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",restxRequest.getHttpMethod(),path,mainRouter);
      restxResponse.setStatus(404);
      restxResponse.setContentType(""String_Node_Str"");
      PrintWriter out=restxResponse.getWriter();
      out.print(msg);
      out.close();
    }
  }
 catch (  JsonProcessingException ex) {
    logger.debug(""String_Node_Str"" + ex.getClass().getSimpleName(),ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    if (restxRequest.getContentStream() instanceof BufferedInputStream) {
      try {
        JsonLocation location=ex.getLocation();
        restxRequest.getContentStream().reset();
        out.println(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,ex.getClass().getSimpleName()) + ""String_Node_Str"" + ""String_Node_Str"");
        out.println(""String_Node_Str"");
        List<String> lines=CharStreams.readLines(new InputStreamReader(restxRequest.getContentStream()));
        for (int i=0; i < lines.size(); i++) {
          String line=lines.get(i);
          out.println(line);
          if (i + 1 == location.getLineNr()) {
            boolean farColumn=location.getColumnNr() > 80;
            out.println(Strings.repeat(""String_Node_Str"",Math.max(0,location.getColumnNr() - 2)) + ""String_Node_Str"");
            out.println(Strings.repeat(farColumn ? ""String_Node_Str"" : ""String_Node_Str"",Math.max(0,location.getColumnNr() - (ex.getOriginalMessage().length() / 2) - 3)) + ""String_Node_Str"" + ex.getOriginalMessage()+ ""String_Node_Str"");
            out.println();
          }
        }
        out.println(""String_Node_Str"");
        restxRequest.getContentStream().reset();
        logger.debug(ex.getClass().getSimpleName() + ""String_Node_Str"" + restxRequest+ ""String_Node_Str""+ ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ CharStreams.toString(new InputStreamReader(restxRequest.getContentStream())));
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        out.println(ex.getMessage());
      }
    }
    out.close();
  }
catch (  IllegalArgumentException ex) {
    logger.debug(""String_Node_Str"",ex);
    restxResponse.setStatus(400);
    restxResponse.setContentType(""String_Node_Str"");
    PrintWriter out=restxResponse.getWriter();
    out.print(ex.getMessage());
    out.close();
  }
 finally {
    try {
      restxRequest.closeContentStream();
    }
 catch (    Exception ex) {
    }
  }
}",0.9221516872702974
160733,"@Override public void onReceive(Context context,Intent intent){
  if (intent != null && connectivityAction(intent)) {
    boolean isConnected=getIsConnected(context,intent);
    String info=intent.getStringExtra(ConnectivityManager.EXTRA_EXTRA_INFO);
    String reason=intent.getStringExtra(ConnectivityManager.EXTRA_REASON);
    notifyMerlinService(context,new ConnectivityChangeEvent(isConnected,info,reason));
  }
}","@SuppressLint(""String_Node_Str"") @Override public void onReceive(Context context,Intent intent){
  if (intent != null && connectivityAction(intent)) {
    boolean isConnected=getIsConnected(context,intent);
    String info=intent.getStringExtra(ConnectivityManager.EXTRA_EXTRA_INFO);
    String reason=intent.getStringExtra(ConnectivityManager.EXTRA_REASON);
    notifyMerlinService(context,new ConnectivityChangeEvent(isConnected,info,reason));
  }
}",0.9620253164556962
160734,"@Override public Request head(String endpoint){
  try {
    HttpURLConnection urlConnection=connectTo(endpoint);
    setConnectionToHeadRequest(urlConnection);
    disableRedirects(urlConnection);
    return new MerlinHttpRequest(urlConnection);
  }
 catch (  MalformedURLException e) {
    throw new RequestException(e);
  }
catch (  IOException e) {
    throw new RequestException(e);
  }
}","@Override public Request head(String endpoint){
  try {
    HttpURLConnection urlConnection=connectTo(endpoint);
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    setConnectionToHeadRequest(urlConnection);
    disableRedirects(urlConnection);
    return new MerlinHttpRequest(urlConnection);
  }
 catch (  MalformedURLException e) {
    throw new RequestException(e);
  }
catch (  IOException e) {
    throw new RequestException(e);
  }
}",0.9126891734575088
160735,"private void notifyMerlinService(Context context,ConnectivityChangeEvent connectivityChangedEvent){
  IBinder binder=peekService(context,new Intent(context,MerlinService.class));
  MerlinService merlinService=getMerlinService(binder);
  if (isAvailable(merlinService)) {
    merlinService.onConnectivityChanged(connectivityChangedEvent);
  }
}","private void notifyMerlinService(Context context,ConnectivityChangeEvent connectivityChangedEvent){
  MerlinService merlinService=getMerlinService(context);
  if (isAvailable(merlinService)) {
    merlinService.onConnectivityChanged(connectivityChangedEvent);
  }
}",0.7532894736842105
160736,"private boolean isAvailable(MerlinService merlinService){
  return merlinService != null;
}","private static boolean isAvailable(Object object){
  return object != null;
}",0.6666666666666666
160737,"protected MerlinService getMerlinService(IBinder binder){
  return ((MerlinService.LocalBinder)binder).getService();
}","protected MerlinService getMerlinService(Context context){
  IBinder binder=peekService(context,new Intent(context,MerlinService.class));
  if (isAvailable(binder)) {
    return ((MerlinService.LocalBinder)binder).getService();
  }
  return null;
}",0.639344262295082
160738,"@Before public void setUp() throws Exception {
  initMocks(this);
  connectivityReceiver=new ConnectivityReceiver(){
    @Override protected MerlinService getMerlinService(    IBinder binder){
      return merlinService;
    }
  }
;
}","@Before public void setUp() throws Exception {
  initMocks(this);
  connectivityReceiver=new ConnectivityReceiver(){
    @Override protected MerlinService getMerlinService(    Context context){
      return merlinService;
    }
  }
;
}",0.9381663113006397
160739,"@Override protected MerlinService getMerlinService(IBinder binder){
  return merlinService;
}","@Override protected MerlinService getMerlinService(Context context){
  return merlinService;
}",0.8983957219251337
160740,"/** 
 * Validates all fields for adding a user
 */
public void validateSaveUser(){
  if (user == null || user.getUsername() == null || user.getUsername().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user == null || user.getLastNm() == null || user.getLastNm().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user == null || user.getFirstNm() == null || user.getFirstNm().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user != null && user.getPassword() != null && !user.getPassword().trim().equals(""String_Node_Str"")) {
    if (!user.getPassword().equals(user.getPasswordConfirm())) {
      addActionError(""String_Node_Str"");
    }
 else     if (!PasswordUtil.isValid(user.getPassword())) {
      addActionError(PasswordUtil.PASSWORD_REQ_ERROR_MSG);
    }
  }
  if (user != null && user.getId() == null && (user.getPassword() == null || user.getPassword().trim().equals(""String_Node_Str""))) {
    addActionError(""String_Node_Str"");
  }
  if (user != null && !UserDB.isUnique(user.getId(),user.getUsername())) {
    addActionError(""String_Node_Str"");
  }
  if (!this.getFieldErrors().isEmpty() || !this.getActionErrors().isEmpty()) {
    Long userId=AuthUtil.getUserId(servletRequest.getSession());
    sortedSet=UserDB.getUserSet(sortedSet);
    user.setId(userId);
  }
}","/** 
 * Validates all fields for adding a user
 */
public void validateSaveUser(){
  if (user == null || user.getUsername() == null || user.getUsername().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user == null || user.getLastNm() == null || user.getLastNm().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user == null || user.getFirstNm() == null || user.getFirstNm().trim().equals(""String_Node_Str"")) {
    addFieldError(""String_Node_Str"",REQUIRED);
  }
  if (user != null && user.getPassword() != null && !user.getPassword().trim().equals(""String_Node_Str"")) {
    if (!user.getPassword().equals(user.getPasswordConfirm())) {
      addActionError(""String_Node_Str"");
    }
 else     if (!PasswordUtil.isValid(user.getPassword())) {
      addActionError(PasswordUtil.PASSWORD_REQ_ERROR_MSG);
    }
  }
  if (user != null && user.getId() == null && (user.getPassword() == null || user.getPassword().trim().equals(""String_Node_Str""))) {
    addActionError(""String_Node_Str"");
  }
  if (user != null && !UserDB.isUnique(user.getId(),user.getUsername())) {
    addActionError(""String_Node_Str"");
  }
  if (!this.getFieldErrors().isEmpty() || !this.getActionErrors().isEmpty()) {
    sortedSet=UserDB.getUserSet(sortedSet);
  }
}",0.967411204686928
160741,"@Action(value=""String_Node_Str"",results={@Result(name=""String_Node_Str"",location=""String_Node_Str"")}) public String viewSystems(){
  Long userId=AuthUtil.getUserId(servletRequest.getSession());
  String userType=AuthUtil.getUserType(servletRequest.getSession());
  List<String> ec2RegionList=EC2KeyDB.getEC2Regions();
  List<String> instanceIdList=new ArrayList<String>();
  if (sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE) == null) {
    sortedSet.getFilterMap().put(FILTER_BY_INSTANCE_STATE,AppConfig.getProperty(""String_Node_Str""));
  }
  try {
    Map<String,HostSystem> hostSystemList=new HashMap<String,HostSystem>();
    List<Profile> profileList=UserProfileDB.getProfilesByUser(userId);
    if (profileList.size() > 0 || Auth.MANAGER.equals(userType)) {
      List<String> profileTags=new ArrayList<>();
      for (      Profile profile : profileList) {
        profileTags.add(profile.getTag());
      }
      Map<String,List<String>> profileTagMap=parseTags(profileTags);
      Map<String,List<String>> tagMap=profileTagMap;
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_TAG))) {
        Map<String,List<String>> filterTags=new HashMap<>();
        if (Auth.MANAGER.equals(userType)) {
          filterTags.putAll(parseTags(Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_TAG))));
        }
 else {
          Map<String,List<String>> tmpMap=parseTags(Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_TAG)));
          for (          String name : tmpMap.keySet()) {
            if (profileTagMap.get(name).containsAll(tmpMap.get(name))) {
              filterTags.put(name,tmpMap.get(name));
            }
          }
        }
        if (filterTags.size() > 0) {
          tagMap=filterTags;
        }
      }
      List<String> securityGroupList=new ArrayList<>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP))) {
        securityGroupList=Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP).split(""String_Node_Str""));
      }
      for (      AWSCred awsCred : AWSCredDB.getAWSCredList()) {
        if (awsCred != null) {
          BasicAWSCredentials awsCredentials=new BasicAWSCredentials(awsCred.getAccessKey(),awsCred.getSecretKey());
          for (          String ec2Region : ec2RegionList) {
            AmazonEC2 service=new AmazonEC2Client(awsCredentials,AWSClientConfig.getClientConfig());
            service.setEndpoint(ec2Region);
            List<String> keyValueList=new ArrayList<String>();
            for (            EC2Key ec2Key : EC2KeyDB.getEC2KeyByRegion(ec2Region,awsCred.getId())) {
              keyValueList.add(ec2Key.getKeyNm());
            }
            DescribeInstancesRequest describeInstancesRequest=new DescribeInstancesRequest();
            Filter keyNmFilter=new Filter(""String_Node_Str"",keyValueList);
            describeInstancesRequest.withFilters(keyNmFilter);
            if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE))) {
              List<String> instanceStateList=new ArrayList<String>();
              instanceStateList.add(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE));
              Filter instanceStateFilter=new Filter(""String_Node_Str"",instanceStateList);
              describeInstancesRequest.withFilters(instanceStateFilter);
            }
            if (securityGroupList.size() > 0) {
              Filter groupFilter=new Filter(""String_Node_Str"",securityGroupList);
              describeInstancesRequest.withFilters(groupFilter);
            }
            List<String> tagList=new ArrayList<String>();
            for (            String tag : tagMap.keySet()) {
              if (tagMap.get(tag) != null) {
                Filter tagValueFilter=new Filter(""String_Node_Str"" + tag,tagMap.get(tag));
                describeInstancesRequest.withFilters(tagValueFilter);
              }
 else {
                tagList.add(tag);
              }
            }
            if (tagList.size() > 0) {
              Filter tagFilter=new Filter(""String_Node_Str"",tagList);
              describeInstancesRequest.withFilters(tagFilter);
            }
            DescribeInstancesResult describeInstancesResult=service.describeInstances(describeInstancesRequest);
            for (            Reservation res : describeInstancesResult.getReservations()) {
              for (              Instance instance : res.getInstances()) {
                HostSystem hostSystem=new HostSystem();
                hostSystem.setInstance(instance.getInstanceId());
                if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicDnsName())) {
                  hostSystem.setHost(instance.getPublicDnsName());
                }
 else                 if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicIpAddress())) {
                  hostSystem.setHost(instance.getPublicIpAddress());
                }
 else                 if (StringUtils.isNotEmpty(instance.getPrivateDnsName())) {
                  hostSystem.setHost(instance.getPrivateDnsName());
                }
 else {
                  hostSystem.setHost(instance.getPrivateIpAddress());
                }
                hostSystem.setKeyId(EC2KeyDB.getEC2KeyByNmRegion(instance.getKeyName(),ec2Region,awsCred.getId()).getId());
                hostSystem.setEc2Region(ec2Region);
                hostSystem.setState(instance.getState().getName());
                for (                Tag tag : instance.getTags()) {
                  if (""String_Node_Str"".equals(tag.getKey())) {
                    hostSystem.setDisplayNm(tag.getValue());
                  }
                }
                instanceIdList.add(hostSystem.getInstance());
                hostSystemList.put(hostSystem.getInstance(),hostSystem);
              }
            }
            if (instanceIdList.size() > 0) {
              servletRequest.getSession().setAttribute(""String_Node_Str"",new ArrayList<String>(instanceIdList));
              if (showStatus) {
                int i=0;
                List<String> idCallList=new ArrayList<String>();
                while (!instanceIdList.isEmpty()) {
                  idCallList.add(instanceIdList.remove(0));
                  i++;
                  if (i >= 100 || instanceIdList.isEmpty()) {
                    DescribeInstanceStatusRequest describeInstanceStatusRequest=new DescribeInstanceStatusRequest();
                    describeInstanceStatusRequest.withInstanceIds(idCallList);
                    DescribeInstanceStatusResult describeInstanceStatusResult=service.describeInstanceStatus(describeInstanceStatusRequest);
                    for (                    InstanceStatus instanceStatus : describeInstanceStatusResult.getInstanceStatuses()) {
                      HostSystem hostSystem=hostSystemList.remove(instanceStatus.getInstanceId());
                      hostSystem.setSystemStatus(instanceStatus.getSystemStatus().getStatus());
                      hostSystem.setInstanceStatus(instanceStatus.getInstanceStatus().getStatus());
                      if ((StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))|| (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))) {
                        hostSystemList.put(hostSystem.getInstance(),hostSystem);
                      }
                    }
                    i=0;
                    idCallList.clear();
                  }
                }
                AmazonCloudWatchClient cloudWatchClient=new AmazonCloudWatchClient(awsCredentials,AWSClientConfig.getClientConfig());
                cloudWatchClient.setEndpoint(ec2Region.replace(""String_Node_Str"",""String_Node_Str""));
                DescribeAlarmsResult describeAlarmsResult=cloudWatchClient.describeAlarms();
                for (                MetricAlarm metricAlarm : describeAlarmsResult.getMetricAlarms()) {
                  for (                  Dimension dim : metricAlarm.getDimensions()) {
                    if (dim.getName().equals(""String_Node_Str"")) {
                      HostSystem hostSystem=hostSystemList.remove(dim.getValue());
                      if (hostSystem != null) {
                        if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorAlarm(hostSystem.getMonitorAlarm() + 1);
                        }
 else                         if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorInsufficientData(hostSystem.getMonitorInsufficientData() + 1);
                        }
 else {
                          hostSystem.setMonitorOk(hostSystem.getMonitorOk() + 1);
                        }
                        if (StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE))) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorAlarm() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorInsufficientData() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorOk() > 0 && hostSystem.getMonitorInsufficientData() <= 0 && hostSystem.getMonitorAlarm() <= 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      SystemDB.setSystems(hostSystemList.values());
      sortedSet=SystemDB.getSystemSet(sortedSet,new ArrayList<String>(hostSystemList.keySet()));
    }
  }
 catch (  AmazonServiceException ex) {
    log.error(ex.toString(),ex);
  }
  if (script != null && script.getId() != null) {
    script=ScriptDB.getScript(script.getId(),userId);
  }
  return SUCCESS;
}","@Action(value=""String_Node_Str"",results={@Result(name=""String_Node_Str"",location=""String_Node_Str"")}) public String viewSystems(){
  Long userId=AuthUtil.getUserId(servletRequest.getSession());
  String userType=AuthUtil.getUserType(servletRequest.getSession());
  List<String> ec2RegionList=EC2KeyDB.getEC2Regions();
  List<String> instanceIdList=new ArrayList<String>();
  if (sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE) == null) {
    sortedSet.getFilterMap().put(FILTER_BY_INSTANCE_STATE,AppConfig.getProperty(""String_Node_Str""));
  }
  try {
    Map<String,HostSystem> hostSystemList=new HashMap<String,HostSystem>();
    List<Profile> profileList=UserProfileDB.getProfilesByUser(userId);
    if (profileList.size() > 0 || Auth.MANAGER.equals(userType)) {
      List<String> profileTags=new ArrayList<>();
      for (      Profile profile : profileList) {
        profileTags.add(profile.getTag());
      }
      Map<String,List<String>> profileTagMap=parseTags(profileTags);
      Map<String,List<String>> filterTags=fetchInputFilterTags(userType,profileTagMap);
      List<String> securityGroupList=new ArrayList<>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP))) {
        securityGroupList=Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP).split(""String_Node_Str""));
      }
      for (      AWSCred awsCred : AWSCredDB.getAWSCredList()) {
        if (awsCred != null) {
          BasicAWSCredentials awsCredentials=new BasicAWSCredentials(awsCred.getAccessKey(),awsCred.getSecretKey());
          for (          String ec2Region : ec2RegionList) {
            AmazonEC2 service=new AmazonEC2Client(awsCredentials,AWSClientConfig.getClientConfig());
            service.setEndpoint(ec2Region);
            List<String> keyValueList=new ArrayList<String>();
            for (            EC2Key ec2Key : EC2KeyDB.getEC2KeyByRegion(ec2Region,awsCred.getId())) {
              keyValueList.add(ec2Key.getKeyNm());
            }
            DescribeInstancesRequest describeInstancesRequest=new DescribeInstancesRequest();
            Filter keyNmFilter=new Filter(""String_Node_Str"",keyValueList);
            describeInstancesRequest.withFilters(keyNmFilter);
            if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE))) {
              List<String> instanceStateList=new ArrayList<String>();
              instanceStateList.add(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE));
              Filter instanceStateFilter=new Filter(""String_Node_Str"",instanceStateList);
              describeInstancesRequest.withFilters(instanceStateFilter);
            }
            if (securityGroupList.size() > 0) {
              Filter groupFilter=new Filter(""String_Node_Str"",securityGroupList);
              describeInstancesRequest.withFilters(groupFilter);
            }
            List<String> tagList=new ArrayList<String>();
            addTagsToDescribeInstanceRequest(profileTagMap,describeInstancesRequest,tagList);
            addTagsToDescribeInstanceRequest(filterTags,describeInstancesRequest,tagList);
            if (tagList.size() > 0) {
              Filter tagFilter=new Filter(""String_Node_Str"",tagList);
              describeInstancesRequest.withFilters(tagFilter);
            }
            DescribeInstancesResult describeInstancesResult=service.describeInstances(describeInstancesRequest);
            for (            Reservation res : describeInstancesResult.getReservations()) {
              for (              Instance instance : res.getInstances()) {
                HostSystem hostSystem=new HostSystem();
                hostSystem.setInstance(instance.getInstanceId());
                if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicDnsName())) {
                  hostSystem.setHost(instance.getPublicDnsName());
                }
 else                 if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicIpAddress())) {
                  hostSystem.setHost(instance.getPublicIpAddress());
                }
 else                 if (StringUtils.isNotEmpty(instance.getPrivateDnsName())) {
                  hostSystem.setHost(instance.getPrivateDnsName());
                }
 else {
                  hostSystem.setHost(instance.getPrivateIpAddress());
                }
                hostSystem.setKeyId(EC2KeyDB.getEC2KeyByNmRegion(instance.getKeyName(),ec2Region,awsCred.getId()).getId());
                hostSystem.setEc2Region(ec2Region);
                hostSystem.setState(instance.getState().getName());
                for (                Tag tag : instance.getTags()) {
                  if (""String_Node_Str"".equals(tag.getKey())) {
                    hostSystem.setDisplayNm(tag.getValue());
                  }
                }
                instanceIdList.add(hostSystem.getInstance());
                hostSystemList.put(hostSystem.getInstance(),hostSystem);
              }
            }
            if (instanceIdList.size() > 0) {
              servletRequest.getSession().setAttribute(""String_Node_Str"",new ArrayList<String>(instanceIdList));
              if (showStatus) {
                int i=0;
                List<String> idCallList=new ArrayList<String>();
                while (!instanceIdList.isEmpty()) {
                  idCallList.add(instanceIdList.remove(0));
                  i++;
                  if (i >= 100 || instanceIdList.isEmpty()) {
                    DescribeInstanceStatusRequest describeInstanceStatusRequest=new DescribeInstanceStatusRequest();
                    describeInstanceStatusRequest.withInstanceIds(idCallList);
                    DescribeInstanceStatusResult describeInstanceStatusResult=service.describeInstanceStatus(describeInstanceStatusRequest);
                    for (                    InstanceStatus instanceStatus : describeInstanceStatusResult.getInstanceStatuses()) {
                      HostSystem hostSystem=hostSystemList.remove(instanceStatus.getInstanceId());
                      hostSystem.setSystemStatus(instanceStatus.getSystemStatus().getStatus());
                      hostSystem.setInstanceStatus(instanceStatus.getInstanceStatus().getStatus());
                      if ((StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))|| (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))) {
                        hostSystemList.put(hostSystem.getInstance(),hostSystem);
                      }
                    }
                    i=0;
                    idCallList.clear();
                  }
                }
                AmazonCloudWatchClient cloudWatchClient=new AmazonCloudWatchClient(awsCredentials,AWSClientConfig.getClientConfig());
                cloudWatchClient.setEndpoint(ec2Region.replace(""String_Node_Str"",""String_Node_Str""));
                DescribeAlarmsResult describeAlarmsResult=cloudWatchClient.describeAlarms();
                for (                MetricAlarm metricAlarm : describeAlarmsResult.getMetricAlarms()) {
                  for (                  Dimension dim : metricAlarm.getDimensions()) {
                    if (dim.getName().equals(""String_Node_Str"")) {
                      HostSystem hostSystem=hostSystemList.remove(dim.getValue());
                      if (hostSystem != null) {
                        if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorAlarm(hostSystem.getMonitorAlarm() + 1);
                        }
 else                         if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorInsufficientData(hostSystem.getMonitorInsufficientData() + 1);
                        }
 else {
                          hostSystem.setMonitorOk(hostSystem.getMonitorOk() + 1);
                        }
                        if (StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE))) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorAlarm() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorInsufficientData() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorOk() > 0 && hostSystem.getMonitorInsufficientData() <= 0 && hostSystem.getMonitorAlarm() <= 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      SystemDB.setSystems(hostSystemList.values());
      sortedSet=SystemDB.getSystemSet(sortedSet,new ArrayList<String>(hostSystemList.keySet()));
    }
  }
 catch (  AmazonServiceException ex) {
    log.error(ex.toString(),ex);
  }
  if (script != null && script.getId() != null) {
    script=ScriptDB.getScript(script.getId(),userId);
  }
  return SUCCESS;
}",0.9406094968107724
160742,"@Action(value=""String_Node_Str"",results={@Result(name=""String_Node_Str"",location=""String_Node_Str"")}) public String viewSystems(){
  Long userId=AuthUtil.getUserId(servletRequest.getSession());
  String userType=AuthUtil.getUserType(servletRequest.getSession());
  List<String> ec2RegionList=EC2KeyDB.getEC2Regions();
  List<String> instanceIdList=new ArrayList<String>();
  if (sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE) == null) {
    sortedSet.getFilterMap().put(FILTER_BY_INSTANCE_STATE,AppConfig.getProperty(""String_Node_Str""));
  }
  try {
    Map<String,HostSystem> hostSystemList=new HashMap<String,HostSystem>();
    Map<String,String> tagMap=new HashMap<>();
    List<String> tagList=new ArrayList<>();
    List<Profile> profileList=UserProfileDB.getProfilesByUser(userId);
    if (profileList.size() > 0 || Auth.MANAGER.equals(userType)) {
      List<String> inputTagList=new ArrayList<String>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_TAG))) {
        inputTagList.add(sortedSet.getFilterMap().get(FILTER_BY_TAG));
      }
      for (      Profile profile : profileList) {
        inputTagList.add(profile.getTag());
      }
      for (      String tagStr : inputTagList) {
        String[] tagArr1=tagStr.split(""String_Node_Str"");
        if (tagArr1.length > 0) {
          for (          String tag1 : tagArr1) {
            String[] tagArr2=tag1.split(""String_Node_Str"");
            if (tagArr2.length > 1) {
              tagMap.put(tag1.split(""String_Node_Str"")[0],tag1.split(""String_Node_Str"")[1]);
            }
 else {
              tagList.add(tag1);
            }
          }
        }
      }
      List<String> securityGroupList=new ArrayList<>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP))) {
        securityGroupList=Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP).split(""String_Node_Str""));
      }
      for (      AWSCred awsCred : AWSCredDB.getAWSCredList()) {
        if (awsCred != null) {
          BasicAWSCredentials awsCredentials=new BasicAWSCredentials(awsCred.getAccessKey(),awsCred.getSecretKey());
          for (          String ec2Region : ec2RegionList) {
            AmazonEC2 service=new AmazonEC2Client(awsCredentials,AWSClientConfig.getClientConfig());
            service.setEndpoint(ec2Region);
            List<String> keyValueList=new ArrayList<String>();
            for (            EC2Key ec2Key : EC2KeyDB.getEC2KeyByRegion(ec2Region,awsCred.getId())) {
              keyValueList.add(ec2Key.getKeyNm());
            }
            DescribeInstancesRequest describeInstancesRequest=new DescribeInstancesRequest();
            Filter keyNmFilter=new Filter(""String_Node_Str"",keyValueList);
            describeInstancesRequest.withFilters(keyNmFilter);
            if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE))) {
              List<String> instanceStateList=new ArrayList<String>();
              instanceStateList.add(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE));
              Filter instanceStateFilter=new Filter(""String_Node_Str"",instanceStateList);
              describeInstancesRequest.withFilters(instanceStateFilter);
            }
            if (tagList.size() > 0) {
              Filter tagFilter=new Filter(""String_Node_Str"",tagList);
              describeInstancesRequest.withFilters(tagFilter);
            }
            if (securityGroupList.size() > 0) {
              Filter groupFilter=new Filter(""String_Node_Str"",securityGroupList);
              describeInstancesRequest.withFilters(groupFilter);
            }
            for (            String tag : tagMap.keySet()) {
              Filter tagValueFilter=new Filter(""String_Node_Str"" + tag,Arrays.asList(tagMap.get(tag)));
              describeInstancesRequest.withFilters(tagValueFilter);
            }
            DescribeInstancesResult describeInstancesResult=service.describeInstances(describeInstancesRequest);
            for (            Reservation res : describeInstancesResult.getReservations()) {
              for (              Instance instance : res.getInstances()) {
                HostSystem hostSystem=new HostSystem();
                hostSystem.setInstance(instance.getInstanceId());
                if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicDnsName())) {
                  hostSystem.setHost(instance.getPublicDnsName());
                }
 else                 if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicIpAddress())) {
                  hostSystem.setHost(instance.getPublicIpAddress());
                }
 else                 if (StringUtils.isNotEmpty(instance.getPrivateDnsName())) {
                  hostSystem.setHost(instance.getPrivateDnsName());
                }
 else {
                  hostSystem.setHost(instance.getPrivateIpAddress());
                }
                hostSystem.setKeyId(EC2KeyDB.getEC2KeyByNmRegion(instance.getKeyName(),ec2Region,awsCred.getId()).getId());
                hostSystem.setEc2Region(ec2Region);
                hostSystem.setState(instance.getState().getName());
                for (                Tag tag : instance.getTags()) {
                  if (""String_Node_Str"".equals(tag.getKey())) {
                    hostSystem.setDisplayNm(tag.getValue());
                  }
                }
                instanceIdList.add(hostSystem.getInstance());
                hostSystemList.put(hostSystem.getInstance(),hostSystem);
              }
            }
            if (instanceIdList.size() > 0) {
              servletRequest.getSession().setAttribute(""String_Node_Str"",new ArrayList<String>(instanceIdList));
              if (showStatus) {
                int i=0;
                List<String> idCallList=new ArrayList<String>();
                while (!instanceIdList.isEmpty()) {
                  idCallList.add(instanceIdList.remove(0));
                  i++;
                  if (i >= 100 || instanceIdList.isEmpty()) {
                    DescribeInstanceStatusRequest describeInstanceStatusRequest=new DescribeInstanceStatusRequest();
                    describeInstanceStatusRequest.withInstanceIds(idCallList);
                    DescribeInstanceStatusResult describeInstanceStatusResult=service.describeInstanceStatus(describeInstanceStatusRequest);
                    for (                    InstanceStatus instanceStatus : describeInstanceStatusResult.getInstanceStatuses()) {
                      HostSystem hostSystem=hostSystemList.remove(instanceStatus.getInstanceId());
                      hostSystem.setSystemStatus(instanceStatus.getSystemStatus().getStatus());
                      hostSystem.setInstanceStatus(instanceStatus.getInstanceStatus().getStatus());
                      if ((StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))|| (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))) {
                        hostSystemList.put(hostSystem.getInstance(),hostSystem);
                      }
                    }
                    i=0;
                    idCallList.clear();
                  }
                }
                AmazonCloudWatchClient cloudWatchClient=new AmazonCloudWatchClient(awsCredentials,AWSClientConfig.getClientConfig());
                cloudWatchClient.setEndpoint(ec2Region.replace(""String_Node_Str"",""String_Node_Str""));
                DescribeAlarmsResult describeAlarmsResult=cloudWatchClient.describeAlarms();
                for (                MetricAlarm metricAlarm : describeAlarmsResult.getMetricAlarms()) {
                  for (                  Dimension dim : metricAlarm.getDimensions()) {
                    if (dim.getName().equals(""String_Node_Str"")) {
                      HostSystem hostSystem=hostSystemList.remove(dim.getValue());
                      if (hostSystem != null) {
                        if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorAlarm(hostSystem.getMonitorAlarm() + 1);
                        }
 else                         if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorInsufficientData(hostSystem.getMonitorInsufficientData() + 1);
                        }
 else {
                          hostSystem.setMonitorOk(hostSystem.getMonitorOk() + 1);
                        }
                        if (StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE))) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorAlarm() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorInsufficientData() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorOk() > 0 && hostSystem.getMonitorInsufficientData() <= 0 && hostSystem.getMonitorAlarm() <= 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      SystemDB.setSystems(hostSystemList.values());
      sortedSet=SystemDB.getSystemSet(sortedSet,new ArrayList<String>(hostSystemList.keySet()));
    }
  }
 catch (  AmazonServiceException ex) {
    ex.printStackTrace();
  }
  if (script != null && script.getId() != null) {
    script=ScriptDB.getScript(script.getId(),userId);
  }
  return SUCCESS;
}","@Action(value=""String_Node_Str"",results={@Result(name=""String_Node_Str"",location=""String_Node_Str"")}) public String viewSystems(){
  Long userId=AuthUtil.getUserId(servletRequest.getSession());
  String userType=AuthUtil.getUserType(servletRequest.getSession());
  List<String> ec2RegionList=EC2KeyDB.getEC2Regions();
  List<String> instanceIdList=new ArrayList<String>();
  if (sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE) == null) {
    sortedSet.getFilterMap().put(FILTER_BY_INSTANCE_STATE,AppConfig.getProperty(""String_Node_Str""));
  }
  try {
    Map<String,HostSystem> hostSystemList=new HashMap<String,HostSystem>();
    Map<String,List<String>> tagMap=new HashMap<>();
    List<String> tagList=new ArrayList<>();
    List<Profile> profileList=UserProfileDB.getProfilesByUser(userId);
    if (profileList.size() > 0 || Auth.MANAGER.equals(userType)) {
      List<String> inputTagList=new ArrayList<String>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_TAG))) {
        inputTagList.add(sortedSet.getFilterMap().get(FILTER_BY_TAG));
      }
      for (      Profile profile : profileList) {
        inputTagList.add(profile.getTag());
      }
      for (      String tagStr : inputTagList) {
        String[] tagArr1=tagStr.split(""String_Node_Str"");
        if (tagArr1.length > 0) {
          for (          String tag1 : tagArr1) {
            String[] tagArr2=tag1.split(""String_Node_Str"");
            if (tagArr2.length > 1) {
              String tagNm=tag1.split(""String_Node_Str"")[0];
              String tagVal=tag1.split(""String_Node_Str"")[1];
              if (tagMap.get(tagNm) != null && tagMap.get(tagNm).size() > 0) {
                tagMap.get(tagNm).add(tagVal);
              }
 else {
                tagMap.put(tagNm,new LinkedList<String>());
                tagMap.get(tagNm).add(tagVal);
              }
            }
 else {
              tagList.add(tag1);
            }
          }
        }
      }
      List<String> securityGroupList=new ArrayList<>();
      if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP))) {
        securityGroupList=Arrays.asList(sortedSet.getFilterMap().get(FILTER_BY_SECURITY_GROUP).split(""String_Node_Str""));
      }
      for (      AWSCred awsCred : AWSCredDB.getAWSCredList()) {
        if (awsCred != null) {
          BasicAWSCredentials awsCredentials=new BasicAWSCredentials(awsCred.getAccessKey(),awsCred.getSecretKey());
          for (          String ec2Region : ec2RegionList) {
            AmazonEC2 service=new AmazonEC2Client(awsCredentials,AWSClientConfig.getClientConfig());
            service.setEndpoint(ec2Region);
            List<String> keyValueList=new ArrayList<String>();
            for (            EC2Key ec2Key : EC2KeyDB.getEC2KeyByRegion(ec2Region,awsCred.getId())) {
              keyValueList.add(ec2Key.getKeyNm());
            }
            DescribeInstancesRequest describeInstancesRequest=new DescribeInstancesRequest();
            Filter keyNmFilter=new Filter(""String_Node_Str"",keyValueList);
            describeInstancesRequest.withFilters(keyNmFilter);
            if (StringUtils.isNotEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE))) {
              List<String> instanceStateList=new ArrayList<String>();
              instanceStateList.add(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATE));
              Filter instanceStateFilter=new Filter(""String_Node_Str"",instanceStateList);
              describeInstancesRequest.withFilters(instanceStateFilter);
            }
            if (tagList.size() > 0) {
              Filter tagFilter=new Filter(""String_Node_Str"",tagList);
              describeInstancesRequest.withFilters(tagFilter);
            }
            if (securityGroupList.size() > 0) {
              Filter groupFilter=new Filter(""String_Node_Str"",securityGroupList);
              describeInstancesRequest.withFilters(groupFilter);
            }
            for (            String tag : tagMap.keySet()) {
              Filter tagValueFilter=new Filter(""String_Node_Str"" + tag,tagMap.get(tag));
              describeInstancesRequest.withFilters(tagValueFilter);
            }
            DescribeInstancesResult describeInstancesResult=service.describeInstances(describeInstancesRequest);
            for (            Reservation res : describeInstancesResult.getReservations()) {
              for (              Instance instance : res.getInstances()) {
                HostSystem hostSystem=new HostSystem();
                hostSystem.setInstance(instance.getInstanceId());
                if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicDnsName())) {
                  hostSystem.setHost(instance.getPublicDnsName());
                }
 else                 if (!""String_Node_Str"".equals(AppConfig.getProperty(""String_Node_Str"")) && StringUtils.isNotEmpty(instance.getPublicIpAddress())) {
                  hostSystem.setHost(instance.getPublicIpAddress());
                }
 else                 if (StringUtils.isNotEmpty(instance.getPrivateDnsName())) {
                  hostSystem.setHost(instance.getPrivateDnsName());
                }
 else {
                  hostSystem.setHost(instance.getPrivateIpAddress());
                }
                hostSystem.setKeyId(EC2KeyDB.getEC2KeyByNmRegion(instance.getKeyName(),ec2Region,awsCred.getId()).getId());
                hostSystem.setEc2Region(ec2Region);
                hostSystem.setState(instance.getState().getName());
                for (                Tag tag : instance.getTags()) {
                  if (""String_Node_Str"".equals(tag.getKey())) {
                    hostSystem.setDisplayNm(tag.getValue());
                  }
                }
                instanceIdList.add(hostSystem.getInstance());
                hostSystemList.put(hostSystem.getInstance(),hostSystem);
              }
            }
            if (instanceIdList.size() > 0) {
              servletRequest.getSession().setAttribute(""String_Node_Str"",new ArrayList<String>(instanceIdList));
              if (showStatus) {
                int i=0;
                List<String> idCallList=new ArrayList<String>();
                while (!instanceIdList.isEmpty()) {
                  idCallList.add(instanceIdList.remove(0));
                  i++;
                  if (i >= 100 || instanceIdList.isEmpty()) {
                    DescribeInstanceStatusRequest describeInstanceStatusRequest=new DescribeInstanceStatusRequest();
                    describeInstanceStatusRequest.withInstanceIds(idCallList);
                    DescribeInstanceStatusResult describeInstanceStatusResult=service.describeInstanceStatus(describeInstanceStatusRequest);
                    for (                    InstanceStatus instanceStatus : describeInstanceStatusResult.getInstanceStatuses()) {
                      HostSystem hostSystem=hostSystemList.remove(instanceStatus.getInstanceId());
                      hostSystem.setSystemStatus(instanceStatus.getSystemStatus().getStatus());
                      hostSystem.setInstanceStatus(instanceStatus.getInstanceStatus().getStatus());
                      if ((StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS))) || (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))|| (hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_SYSTEM_STATUS)) && hostSystem.getInstanceStatus().equals(sortedSet.getFilterMap().get(FILTER_BY_INSTANCE_STATUS)))) {
                        hostSystemList.put(hostSystem.getInstance(),hostSystem);
                      }
                    }
                    i=0;
                    idCallList.clear();
                  }
                }
                AmazonCloudWatchClient cloudWatchClient=new AmazonCloudWatchClient(awsCredentials,AWSClientConfig.getClientConfig());
                cloudWatchClient.setEndpoint(ec2Region.replace(""String_Node_Str"",""String_Node_Str""));
                DescribeAlarmsResult describeAlarmsResult=cloudWatchClient.describeAlarms();
                for (                MetricAlarm metricAlarm : describeAlarmsResult.getMetricAlarms()) {
                  for (                  Dimension dim : metricAlarm.getDimensions()) {
                    if (dim.getName().equals(""String_Node_Str"")) {
                      HostSystem hostSystem=hostSystemList.remove(dim.getValue());
                      if (hostSystem != null) {
                        if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorAlarm(hostSystem.getMonitorAlarm() + 1);
                        }
 else                         if (""String_Node_Str"".equals(metricAlarm.getStateValue())) {
                          hostSystem.setMonitorInsufficientData(hostSystem.getMonitorInsufficientData() + 1);
                        }
 else {
                          hostSystem.setMonitorOk(hostSystem.getMonitorOk() + 1);
                        }
                        if (StringUtils.isEmpty(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE))) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorAlarm() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorInsufficientData() > 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
 else                         if (""String_Node_Str"".equals(sortedSet.getFilterMap().get(FILTER_BY_ALARM_STATE)) && hostSystem.getMonitorOk() > 0 && hostSystem.getMonitorInsufficientData() <= 0 && hostSystem.getMonitorAlarm() <= 0) {
                          hostSystemList.put(hostSystem.getInstance(),hostSystem);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      SystemDB.setSystems(hostSystemList.values());
      sortedSet=SystemDB.getSystemSet(sortedSet,new ArrayList<String>(hostSystemList.keySet()));
    }
  }
 catch (  AmazonServiceException ex) {
    ex.printStackTrace();
  }
  if (script != null && script.getId() != null) {
    script=ScriptDB.getScript(script.getId(),userId);
  }
  return SUCCESS;
}",0.9833654994945318
160743,"/** 
 * AST_FUNC_DECL nodes are function-declaring nodes for top-level functions (as opposed to methods declared within a class scope.) Any AST_FUNC_DECL node has exactly four children: 1) AST_PARAM_LIST 2) NULL, for structural compatibility with AST_CLOSURE 3) AST_STMT_LIST 4) AST_NAME or NULL, indicating the return type This test checks a function's name and children in the following PHP code: function foo() : int {}
 */
@Test public void testFunctionDefCreation() throws IOException, InvalidCSVFile {
  handleCSVFiles(""String_Node_Str"");
  ASTNode node=ast.getNodeById((long)6);
  assertThat(node,instanceOf(FunctionDef.class));
  assertEquals(""String_Node_Str"",((FunctionDef)node).getName());
  assertEquals(4,node.getChildCount());
  assertEquals(ast.getNodeById((long)9),((FunctionDef)node).getParameterList());
  assertEquals(ast.getNodeById((long)11),((FunctionDef)node).getContent());
  assertEquals(ast.getNodeById((long)12),((FunctionDef)node).getReturnType());
  assertEquals(ast.getNodeById((long)13),((FunctionDef)node).getReturnType().getNameChild());
  assertEquals(""String_Node_Str"",((FunctionDef)node).getReturnType().getNameChild().getEscapedCodeStr());
}","/** 
 * AST_FUNC_DECL nodes are function-declaring nodes for top-level functions (as opposed to methods declared within a class scope.) Any AST_FUNC_DECL node has exactly four children: 1) AST_PARAM_LIST 2) NULL, for structural compatibility with AST_CLOSURE 3) AST_STMT_LIST 4) AST_NAME or NULL, indicating the return type This test checks a function's name and children in the following PHP code: function foo() : int {}
 */
@Test public void testFunctionDefCreation() throws IOException, InvalidCSVFile {
  handleCSVFiles(""String_Node_Str"");
  ASTNode node=ast.getNodeById((long)6);
  assertThat(node,instanceOf(FunctionDef.class));
  assertEquals(""String_Node_Str"",((FunctionDef)node).getName());
  assertEquals(""String_Node_Str"",((FunctionDef)node).getName());
  assertEquals(""String_Node_Str"",((FunctionDef)node).getName());
  assertEquals(4,node.getChildCount());
  assertEquals(ast.getNodeById((long)9),((FunctionDef)node).getParameterList());
  assertEquals(ast.getNodeById((long)11),((FunctionDef)node).getContent());
  assertEquals(ast.getNodeById((long)12),((FunctionDef)node).getReturnType());
  assertEquals(ast.getNodeById((long)13),((FunctionDef)node).getReturnType().getNameChild());
  assertEquals(""String_Node_Str"",((FunctionDef)node).getReturnType().getNameChild().getEscapedCodeStr());
}",0.9477071600965408
160744,"public void importCSVFiles(String nodeFilename,String edgeFilename) throws IOException {
  openNodeFile(nodeFilename);
  openEdgeFile(edgeFilename);
  openDatabaseForBatchInsert();
  initializeDatabase();
  importNodes();
  importEdges();
  closeDatabase();
}","public void importCSVFiles(String nodeFilename,String edgeFilename) throws IOException {
  openNodeFile(nodeFilename);
  openEdgeFile(edgeFilename);
  isNewDatabase=!databaseExists(dbName);
  if (!isNewDatabase())   return;
  openDatabaseForBatchInsert();
  initializeDatabase();
  importNodes();
  importEdges();
  closeDatabase();
}",0.8735244519392917
160745,"public void initializeDatabase() throws IOException {
  isNewDatabase=!databaseExists(dbName);
  if (!isNewDatabase())   return;
  DatabaseInitializer initializer=new DatabaseInitializer();
  initializer.setVertexKeys(nodeFile.getKeys());
  initializer.initialize(tx);
}","public void initializeDatabase() throws IOException {
  DatabaseInitializer initializer=new DatabaseInitializer();
  initializer.setVertexKeys(nodeFile.getKeys());
  initializer.initialize(tx);
}",0.8387096774193549
160746,"public void initialize(OrientGraph tx){
  createNodeProperties();
  createIndices();
}","public void initialize(OrientGraph tx){
  this.tx=tx;
  createNodeProperties();
  createIndices();
}",0.9247311827956988
160747,"private static OctopusProject createOctopusProjectForName(String name) throws IOException {
  Path pathToProject=getPathToProject(name);
  Files.createDirectories(pathToProject);
  OctopusProject newProject=new OctopusProject(name,pathToProject.toString());
  TitanLocalDatabaseManager databaseManager=new TitanLocalDatabaseManager();
  databaseManager.initializeDatabaseForProject(newProject);
  return newProject;
}","private static OctopusProject createOctopusProjectForName(String name) throws IOException {
  Path pathToProject=getPathToProject(name);
  Files.createDirectories(pathToProject);
  OctopusProject newProject=new OctopusProject(name,pathToProject.toString());
  return newProject;
}",0.8034433285509326
160748,"public static void create(String name) throws IOException {
  if (projectsDir == null)   throw new IllegalStateException(""String_Node_Str"");
  if (doesProjectExist(name))   throw new RuntimeException(""String_Node_Str"");
  OctopusProject project=createOctopusProjectForName(name);
  logger.debug(""String_Node_Str"" + name);
  nameToProject.put(name,project);
}","public static void create(String name) throws IOException {
  if (projectsDir == null)   throw new IllegalStateException(""String_Node_Str"");
  if (doesProjectExist(name))   throw new RuntimeException(""String_Node_Str"");
  OctopusProject project=createOctopusProjectForName(name);
  TitanLocalDatabaseManager databaseManager=new TitanLocalDatabaseManager();
  databaseManager.initializeDatabaseForProject(project);
  logger.debug(""String_Node_Str"" + name);
  nameToProject.put(name,project);
}",0.8352941176470589
160749,"@Override public void visitFile(Path filename){
  String basePath=filename.getParent().toString();
  String nodeFilename=basePath + File.separator + ""String_Node_Str"";
  String edgeFilename=basePath + File.separator + ""String_Node_Str"";
  System.out.println(nodeFilename);
  String name=joernProject.getName();
  ImportJob importJob=new ImportJob(nodeFilename,edgeFilename,name);
  (new ImportCSVRunnable(importJob)).run();
}","@Override public void visitFile(Path filename){
  String basePath=filename.getParent().toString();
  String nodeFilename=basePath + File.separator + ""String_Node_Str"";
  String edgeFilename=basePath + File.separator + ""String_Node_Str"";
  String name=joernProject.getName();
  ImportJob importJob=new ImportJob(nodeFilename,edgeFilename,name);
  (new ImportCSVRunnable(importJob)).run();
}",0.9557739557739556
160750,"private static void loadProject(Path projectDir) throws IOException {
  String projectName=projectDir.getFileName().toString();
  OctopusProject newProject=createOctopusProjectForName(projectName);
  nameToProject.put(projectName,newProject);
}","private static void loadProject(Path projectDir) throws IOException {
  String projectName=projectDir.getFileName().toString();
  OctopusProject newProject=createOctopusProjectForName(projectName);
  logger.debug(""String_Node_Str"" + projectName);
  nameToProject.put(projectName,newProject);
}",0.9087523277467412
160751,"public static OctopusProject getProjectByName(String name){
  return nameToProject.get(name);
}","public static OctopusProject getProjectByName(String name){
  if (name == null) {
    System.out.println(getStackTrace());
  }
  logger.debug(""String_Node_Str"" + name);
  return nameToProject.get(name);
}",0.5618729096989966
160752,"/** 
 * This function reads lines from the nodeReader, file by file. 1. It first continuously adds lines that have the same funcid as the funcid currently on top of the funcIdStack to the CSVAST on top of the csvStack. 2. Upon finding a function declaration: [<outdated> a) It adds the line to the CSVAST on top of the csvStack, since the declaration as such is indeed part of the outer scope and belongs there. </outdated>] UPDATE: 2a) does not hold anymore! We now only add function declarations once, as root node of the CSVAST that corresponds to this function itself. b) It pushes a new CSVAST on top of  the csvStack and that function's id on top of the funcIdStack. The line is also added to this new CSVAST. [<outdated> Do note that this means that we intentionally duplicate a line by adding it to two separate CSVAST instances. This second addition is needed for technical reasons, because the line contains meta-information about the function (e.g., its name) that we will need when converting the CSVAST to an ast.functionDef.FunctionDef node using the CSV2AST class. </outdated>] UPDATE: So now, this line is not duplicated anymore. The line is *only added to new new CSVAST. 3. Upon finding a funcId different from the one on top of the funcIdStack, it looks for that funcId within the stack. In a valid CSV file, this funcId must have been previously declared by a function declaration. a) If it is not found, an exception is thrown. b) If it is found, we know that we finished scanning at least one function (since we got back to the ""outer"" scope). The distance from the top of the stack to the csvAST that corresponds to the current funcId is the number of functions that we finished scanning. We pop the csvStack (and the funcIdStack) that many times and put the popped CSVAST's in the csvFifoQueue.
 */
private void addNodeRowsUntilNextFile() throws InvalidCSVFile {
  while (nodeReader.hasNextRow()) {
    KeyedCSVRow currNodeRow=nodeReader.getNextRow();
    System.out.println(currNodeRow);
    String currType=currNodeRow.getFieldForKey(PHPCSVNodeTypes.TYPE);
    if (currType.equals(PHPCSVNodeTypes.TYPE_DIRECTORY))     continue;
    if (currType.equals(PHPCSVNodeTypes.TYPE_FILE)) {
      if (!csvStack.isEmpty())       break;
 else       continue;
    }
    if (currType.equals(PHPCSVNodeTypes.TYPE_CFG_ENTRY) || currType.equals(PHPCSVNodeTypes.TYPE_CFG_EXIT))     continue;
    if (currType.equals(PHPCSVNodeTypes.TYPE_TOPLEVEL) && currNodeRow.getFieldForKey(PHPCSVNodeTypes.FLAGS).contains(PHPCSVNodeTypes.FLAG_TOPLEVEL_FILE)) {
      if (!csvStack.empty())       throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String topLevelFuncId=currNodeRow.getFieldForKey(PHPCSVNodeTypes.NODE_ID);
      initCSVAST(topLevelFuncId);
      addRowToTopCSVAST(currNodeRow);
      continue;
    }
    if (csvStack.empty())     throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str"");
    String currFuncId=currNodeRow.getFieldForKey(PHPCSVNodeTypes.FUNCID);
    int finishedFunctions=funcIdStack.search(currFuncId) - 1;
    if (finishedFunctions < 0)     throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ currFuncId+ ""String_Node_Str"");
    for (int i=0; i < finishedFunctions; i++) {
      csvFifoQueue.add(csvStack.pop());
      funcIdStack.pop();
    }
    addRowAndInitASTForFuncType(currNodeRow);
  }
  while (!csvStack.empty()) {
    csvFifoQueue.add(csvStack.pop());
    funcIdStack.pop();
  }
}","/** 
 * This function reads lines from the nodeReader, file by file. 1. It first continuously adds lines that have the same funcid as the funcid currently on top of the funcIdStack to the CSVAST on top of the csvStack. 2. Upon finding a function declaration: [<outdated> a) It adds the line to the CSVAST on top of the csvStack, since the declaration as such is indeed part of the outer scope and belongs there. </outdated>] UPDATE: 2a) does not hold anymore! We now only add function declarations once, as root node of the CSVAST that corresponds to this function itself. b) It pushes a new CSVAST on top of  the csvStack and that function's id on top of the funcIdStack. The line is also added to this new CSVAST. [<outdated> Do note that this means that we intentionally duplicate a line by adding it to two separate CSVAST instances. This second addition is needed for technical reasons, because the line contains meta-information about the function (e.g., its name) that we will need when converting the CSVAST to an ast.functionDef.FunctionDef node using the CSV2AST class. </outdated>] UPDATE: So now, this line is not duplicated anymore. The line is *only added to new new CSVAST. 3. Upon finding a funcId different from the one on top of the funcIdStack, it looks for that funcId within the stack. In a valid CSV file, this funcId must have been previously declared by a function declaration. a) If it is not found, an exception is thrown. b) If it is found, we know that we finished scanning at least one function (since we got back to the ""outer"" scope). The distance from the top of the stack to the csvAST that corresponds to the current funcId is the number of functions that we finished scanning. We pop the csvStack (and the funcIdStack) that many times and put the popped CSVAST's in the csvFifoQueue.
 */
private void addNodeRowsUntilNextFile() throws InvalidCSVFile {
  while (nodeReader.hasNextRow()) {
    KeyedCSVRow currNodeRow=nodeReader.getNextRow();
    String currType=currNodeRow.getFieldForKey(PHPCSVNodeTypes.TYPE);
    if (currType.equals(PHPCSVNodeTypes.TYPE_DIRECTORY))     continue;
    if (currType.equals(PHPCSVNodeTypes.TYPE_FILE)) {
      if (!csvStack.isEmpty())       break;
 else       continue;
    }
    if (currType.equals(PHPCSVNodeTypes.TYPE_CFG_ENTRY) || currType.equals(PHPCSVNodeTypes.TYPE_CFG_EXIT))     continue;
    if (currType.equals(PHPCSVNodeTypes.TYPE_TOPLEVEL) && currNodeRow.getFieldForKey(PHPCSVNodeTypes.FLAGS).contains(PHPCSVNodeTypes.FLAG_TOPLEVEL_FILE)) {
      if (!csvStack.empty())       throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String topLevelFuncId=currNodeRow.getFieldForKey(PHPCSVNodeTypes.NODE_ID);
      initCSVAST(topLevelFuncId);
      addRowToTopCSVAST(currNodeRow);
      continue;
    }
    if (csvStack.empty())     throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str"");
    String currFuncId=currNodeRow.getFieldForKey(PHPCSVNodeTypes.FUNCID);
    int finishedFunctions=funcIdStack.search(currFuncId) - 1;
    if (finishedFunctions < 0)     throw new InvalidCSVFile(""String_Node_Str"" + nodeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ currFuncId+ ""String_Node_Str"");
    for (int i=0; i < finishedFunctions; i++) {
      csvFifoQueue.add(csvStack.pop());
      funcIdStack.pop();
    }
    addRowAndInitASTForFuncType(currNodeRow);
  }
  while (!csvStack.empty()) {
    csvFifoQueue.add(csvStack.pop());
    funcIdStack.pop();
  }
}",0.9948958477031314
160753,"/** 
 * Reads lines from the edgeReader, file by file. Assumes that the functions currently in the csvNodeIds map are exactly those referenced by the next edge rows until meeting the next FILE_OF edge.
 */
private void addEdgeRowsUntilNextFile() throws InvalidCSVFile {
  while (edgeReader.hasNextRow()) {
    KeyedCSVRow currEdgeRow=edgeReader.getNextRow();
    System.out.println(currEdgeRow);
    String currType=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.TYPE);
    if (currType.equals(PHPCSVEdgeTypes.TYPE_DIRECTORY_OF))     continue;
    if (currType.equals(PHPCSVEdgeTypes.TYPE_FILE_OF))     break;
    if (currType.equals(PHPCSVEdgeTypes.TYPE_CFG_ENTRY) || currType.equals(PHPCSVEdgeTypes.TYPE_CFG_EXIT))     continue;
    if (!currType.equals(PHPCSVEdgeTypes.TYPE_AST_PARENT_OF))     throw new InvalidCSVFile(""String_Node_Str"" + edgeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ currType+ ""String_Node_Str"");
    String startId=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.START_ID);
    String endId=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.END_ID);
    for (    CSVAST csvAST : csvNodeIds.keySet()) {
      Set<String> nodeSet=csvNodeIds.get(csvAST);
      if (nodeSet.contains(startId) && nodeSet.contains(endId))       csvAST.addEdgeRow(currEdgeRow);
    }
  }
  csvNodeIds.clear();
}","/** 
 * Reads lines from the edgeReader, file by file. Assumes that the functions currently in the csvNodeIds map are exactly those referenced by the next edge rows until meeting the next FILE_OF edge.
 */
private void addEdgeRowsUntilNextFile() throws InvalidCSVFile {
  while (edgeReader.hasNextRow()) {
    KeyedCSVRow currEdgeRow=edgeReader.getNextRow();
    String currType=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.TYPE);
    if (currType.equals(PHPCSVEdgeTypes.TYPE_DIRECTORY_OF))     continue;
    if (currType.equals(PHPCSVEdgeTypes.TYPE_FILE_OF))     break;
    if (currType.equals(PHPCSVEdgeTypes.TYPE_CFG_ENTRY) || currType.equals(PHPCSVEdgeTypes.TYPE_CFG_EXIT))     continue;
    if (!currType.equals(PHPCSVEdgeTypes.TYPE_AST_PARENT_OF))     throw new InvalidCSVFile(""String_Node_Str"" + edgeReader.getCurrentLineNumber() + ""String_Node_Str""+ ""String_Node_Str""+ currType+ ""String_Node_Str"");
    String startId=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.START_ID);
    String endId=currEdgeRow.getFieldForKey(PHPCSVEdgeTypes.END_ID);
    for (    CSVAST csvAST : csvNodeIds.keySet()) {
      Set<String> nodeSet=csvNodeIds.get(csvAST);
      if (nodeSet.contains(startId) && nodeSet.contains(endId))       csvAST.addEdgeRow(currEdgeRow);
    }
  }
  csvNodeIds.clear();
}",0.9857965451055662
160754,"/** 
 * Creates a new CG instance based on the lists of known function definitions and function calls. Call this after all function definitions and calls have been added to the lists using addFunctionDef(FunctionDef) and addFunctionCall(CallExpression). After a call graph has been constructed, these lists are automatically reset.
 * @return A new call graph instance.
 */
public static CG newInstance(){
  CG cg=new CG();
  createFunctionCallEdges(cg);
  createStaticMethodCallEdges(cg);
  createConstructorCallEdges(cg);
  createNonStaticMethodCallEdges(cg);
  reset();
  return cg;
}","/** 
 * Creates a new CG instance based on the lists of known function definitions and function calls. Call this after all function definitions and calls have been added to the lists using addFunctionDef(FunctionDef) and addFunctionCall(CallExpression). After a call graph has been constructed, these lists are automatically reset.
 * @return A new call graph instance.
 */
public static CG newInstance(){
  CG cg=new CG();
  createFunctionCallEdges(cg);
  createStaticMethodCallEdges(cg);
  createConstructorCallEdges(cg);
  createNonStaticMethodCallEdges(cg);
  System.err.println(""String_Node_Str"" + blacklistedMethodNames.size() + ""String_Node_Str""+ ""String_Node_Str""+ nonStaticMethodDefs.size()+ ""String_Node_Str"");
  reset();
  return cg;
}",0.8612153038259565
160755,"/** 
 * Adds a new known function definition.
 * @param functionDef A PHP function definition. If a function definition with the samename was previously added, then the new function definition will be used for that name and the old function definition will be returned.
 * @return If there already exists a PHP function definition with the same name,then returns that function definition. Otherwise, returns null.
 */
public static PHPFunctionDef addFunctionDef(PHPFunctionDef functionDef){
  if (functionDef instanceof TopLevelFunctionDef)   return null;
 else   if (functionDef instanceof Closure)   return null;
 else   if (functionDef instanceof Method && functionDef.getFlags().contains(PHPCSVNodeTypes.FLAG_MODIFIER_STATIC)) {
    String staticMethodKey=((Method)functionDef).getEnclosingClass() + ""String_Node_Str"" + functionDef.getName();
    if (!functionDef.getEnclosingNamespace().isEmpty())     staticMethodKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + staticMethodKey;
    if (staticMethodDefs.containsKey(staticMethodKey)) {
      System.err.println(""String_Node_Str"" + staticMethodKey + ""String_Node_Str""+ ""String_Node_Str""+ staticMethodDefs.get(staticMethodKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return staticMethodDefs.put(staticMethodKey,(Method)functionDef);
  }
 else   if (functionDef instanceof Method && (functionDef.getName().equals(""String_Node_Str"") || functionDef.getName().equals(((Method)functionDef).getEnclosingClass()))) {
    String constructorKey=((Method)functionDef).getEnclosingClass();
    if (!functionDef.getEnclosingNamespace().isEmpty())     constructorKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + constructorKey;
    if (constructorDefs.containsKey(constructorKey)) {
      System.err.println(""String_Node_Str"" + constructorKey + ""String_Node_Str""+ ""String_Node_Str""+ staticMethodDefs.get(constructorKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return constructorDefs.put(constructorKey,(Method)functionDef);
  }
 else   if (functionDef instanceof Method) {
    String methodKey=((Method)functionDef).getName();
    if (nonStaticMethodDefs.containsKey(methodKey) || blacklistedMethodNames.contains(methodKey)) {
      blacklistedMethodNames.add(methodKey);
      return nonStaticMethodDefs.remove(methodKey);
    }
    return nonStaticMethodDefs.put(methodKey,(Method)functionDef);
  }
 else {
    String functionKey=functionDef.getName();
    if (!functionDef.getEnclosingNamespace().isEmpty())     functionKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + functionKey;
    if (functionDefs.containsKey(functionKey)) {
      System.err.println(""String_Node_Str"" + functionKey + ""String_Node_Str""+ ""String_Node_Str""+ functionDefs.get(functionKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return functionDefs.put(functionKey,functionDef);
  }
}","/** 
 * Adds a new known function definition.
 * @param functionDef A PHP function definition. If a function definition with the samename was previously added, then the new function definition will be used for that name and the old function definition will be returned.
 * @return If there already exists a PHP function definition with the same name,then returns that function definition. Otherwise, returns null.
 */
public static PHPFunctionDef addFunctionDef(PHPFunctionDef functionDef){
  if (functionDef instanceof TopLevelFunctionDef)   return null;
 else   if (functionDef instanceof Closure)   return null;
 else   if (functionDef instanceof Method && functionDef.getFlags().contains(PHPCSVNodeTypes.FLAG_MODIFIER_STATIC)) {
    String staticMethodKey=((Method)functionDef).getEnclosingClass() + ""String_Node_Str"" + functionDef.getName();
    if (!functionDef.getEnclosingNamespace().isEmpty())     staticMethodKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + staticMethodKey;
    if (staticMethodDefs.containsKey(staticMethodKey)) {
      System.err.println(""String_Node_Str"" + staticMethodKey + ""String_Node_Str""+ ""String_Node_Str""+ staticMethodDefs.get(staticMethodKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return staticMethodDefs.put(staticMethodKey,(Method)functionDef);
  }
 else   if (functionDef instanceof Method && (functionDef.getName().equals(""String_Node_Str"") || functionDef.getName().equals(((Method)functionDef).getEnclosingClass()))) {
    String constructorKey=((Method)functionDef).getEnclosingClass();
    if (!functionDef.getEnclosingNamespace().isEmpty())     constructorKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + constructorKey;
    if (constructorDefs.containsKey(constructorKey)) {
      System.err.println(""String_Node_Str"" + constructorKey + ""String_Node_Str""+ ""String_Node_Str""+ constructorDefs.get(constructorKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return constructorDefs.put(constructorKey,(Method)functionDef);
  }
 else   if (functionDef instanceof Method) {
    String methodKey=((Method)functionDef).getName();
    if (nonStaticMethodDefs.containsKey(methodKey) || blacklistedMethodNames.contains(methodKey)) {
      blacklistedMethodNames.add(methodKey);
      return nonStaticMethodDefs.remove(methodKey);
    }
    return nonStaticMethodDefs.put(methodKey,(Method)functionDef);
  }
 else {
    String functionKey=functionDef.getName();
    if (!functionDef.getEnclosingNamespace().isEmpty())     functionKey=functionDef.getEnclosingNamespace() + ""String_Node_Str"" + functionKey;
    if (functionDefs.containsKey(functionKey)) {
      System.err.println(""String_Node_Str"" + functionKey + ""String_Node_Str""+ ""String_Node_Str""+ functionDefs.get(functionKey).getNodeId()+ ""String_Node_Str""+ functionDef.getNodeId()+ ""String_Node_Str"");
    }
    return functionDefs.put(functionKey,functionDef);
  }
}",0.9961364018142114
160756,"/** 
 * foo.php ------- namespace A; include_once ""bar.php""; class ClassOne { public function foo() {} } $classtwo = new \B\ClassTwo(); $classtwo->bar(); bar.php ------- namespace B; include_once ""foo.php""; class ClassTwo { public function foo() {} } $classone = new \A\ClassOne(); $classone->foo();
 */
@Test public void testTwoFilesNamespacedNonStaticCalls() throws IOException, InvalidCSVFile {
  CG cg=getCGForCSVFiles(""String_Node_Str"");
  assertEquals(4,cg.size());
  assertEquals(2,cg.numberOfCallers());
  assertEquals(2,cg.numberOfCallees());
  assertEquals(cg.numberOfEdges(),cg.numberOfCallers());
  assertTrue(edgeExists(cg,32,54));
  assertTrue(edgeExists(cg,68,18));
}","/** 
 * foo.php ------- namespace A; include_once ""bar.php""; class ClassOne { public function foo() {} } $classtwo = new \B\ClassTwo(); $classtwo->bar(); bar.php ------- namespace B; include_once ""foo.php""; class ClassTwo { public function bar() {} } $classone = new \A\ClassOne(); $classone->foo();
 */
@Test public void testTwoFilesNamespacedNonStaticCalls() throws IOException, InvalidCSVFile {
  CG cg=getCGForCSVFiles(""String_Node_Str"");
  assertEquals(4,cg.size());
  assertEquals(2,cg.numberOfCallers());
  assertEquals(2,cg.numberOfCallees());
  assertEquals(cg.numberOfEdges(),cg.numberOfCallers());
  assertTrue(edgeExists(cg,32,54));
  assertTrue(edgeExists(cg,68,18));
}",0.995601173020528
160757,"public CodeLocation getLocation(){
  return location;
}","public CodeLocation getLocation(){
  return this.location;
}",0.9565217391304348
160758,"private void setChildNumber(int num){
  childNumber=num;
}","private void setChildNumber(int num){
  this.childNumber=num;
}",0.9586776859504132
160759,"public int getChildNumber(){
  return childNumber;
}","public int getChildNumber(){
  return this.childNumber;
}",0.9541284403669724
160760,"public void setLocation(CodeLocation loc){
  this.location=loc;
}","public void setLocation(CodeLocation location){
  this.location=location;
}",0.9285714285714286
160761,"public Long getNodeId(){
  Long id;
  try {
    id=Long.parseLong(getProperty(ASTNodeProperties.NODE_ID));
  }
 catch (  NumberFormatException e) {
    id=-1l;
    e.printStackTrace();
  }
  return id;
}","public Long getNodeId(){
  Long id;
  try {
    id=Long.parseLong(getProperty(ASTNodeProperties.NODE_ID));
  }
 catch (  NumberFormatException e) {
    id=-1l;
    System.err.println(""String_Node_Str"" + super.toString() + ""String_Node_Str""+ ""String_Node_Str""+ getTypeAsString()+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ getCodeStr()+ ""String_Node_Str"");
    e.printStackTrace();
  }
  return id;
}",0.6633986928104575
160762,"public String getLocationString(){
  return location.toString();
}","public String getLocationString(){
  return this.location.toString();
}",0.9635036496350364
160763,"@Override public String toString(){
  if (null != getEscapedCodeStr() && null != getProperty(ASTNodeProperties.NODE_ID))   return ""String_Node_Str"" + getProperty(ASTNodeProperties.NODE_ID) + ""String_Node_Str""+ getEscapedCodeStr()+ ""String_Node_Str"";
  if (null != getEscapedCodeStr())   return ""String_Node_Str"" + getEscapedCodeStr() + ""String_Node_Str"";
  if (null != getProperty(ASTNodeProperties.NODE_ID))   return ""String_Node_Str"" + getProperty(ASTNodeProperties.NODE_ID) + ""String_Node_Str""+ getTypeAsString()+ ""String_Node_Str"";
  return super.toString();
}","@Override public String toString(){
  if (null != getEscapedCodeStr() && null != getProperty(ASTNodeProperties.NODE_ID))   return ""String_Node_Str"" + getNodeId() + ""String_Node_Str""+ getEscapedCodeStr()+ ""String_Node_Str"";
  if (null != getEscapedCodeStr())   return ""String_Node_Str"" + getEscapedCodeStr() + ""String_Node_Str"";
  if (null != getProperty(ASTNodeProperties.NODE_ID))   return ""String_Node_Str"" + getNodeId() + ""String_Node_Str""+ getTypeAsString()+ ""String_Node_Str"";
  return super.toString();
}",0.5176908752327747
160764,"public void setStatement(Expression expression){
  ExpressionStatement expressionStatement=new ExpressionStatement();
  expressionStatement.setExpression(expression);
  setStatement(expressionStatement);
}","public void setStatement(Statement statement){
  this.statement=statement;
  super.addChild(statement);
}",0.5032258064516129
160765,"/** 
 * AST_CLOSURE nodes are function-declaring nodes for closures (anonymous functions). We always give them the artificial name ""{closure}"". Any AST_CLOSURE node has exactly four children: 1) AST_PARAM_LIST 2) AST_CLOSURE_USES or NULL 3) AST_STMT_LIST 4) AST_NAME or NULL, indicating the return type This test checks a closure's pseudo-name and children in the following PHP code: $a = function() use ($foo) : int {}; It also checks that a ClosureExpression holding the Closure is created.
 */
@Test public void testClosureCreation() throws IOException, InvalidCSVFile {
  String nodeStr=CSVASTSamples.closureNodeStr;
  String edgeStr=CSVASTSamples.closureEdgeStr;
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)6);
  assertThat(node,instanceOf(Closure.class));
  assertEquals(""String_Node_Str"",((Closure)node).getName());
  assertEquals(4,node.getChildCount());
  assertEquals(ast.getNodeById((long)7),((Closure)node).getParameterList());
  assertEquals(ast.getNodeById((long)8),((Closure)node).getClosureUses());
  assertEquals(ast.getNodeById((long)11),((Closure)node).getContent());
  assertEquals(ast.getNodeById((long)12),((Closure)node).getReturnType());
  assertEquals(ast.getNodeById((long)13),((Closure)node).getReturnType().getNameChild());
  assertEquals(""String_Node_Str"",((Closure)node).getReturnType().getNameChild().getEscapedCodeStr());
  ASTNode node2=ast.getNodeById((long)3);
  assertThat(node2,instanceOf(AssignmentExpression.class));
  ASTNode node3=((AssignmentExpression)node2).getRight();
  assertThat(node3,instanceOf(ClosureExpression.class));
  assertEquals(node,((ClosureExpression)node3).getClosure());
}","/** 
 * AST_CLOSURE nodes are function-declaring nodes for closures (anonymous functions). We always give them the artificial name ""{closure}"". Any AST_CLOSURE node has exactly four children: 1) AST_PARAM_LIST 2) AST_CLOSURE_USES or NULL 3) AST_STMT_LIST 4) AST_NAME or NULL, indicating the return type This test checks a closure's pseudo-name and children in the following PHP code: $a = function() use ($foo) : int {}; It also checks that a ClosureExpression holding the Closure is created.
 */
@Test public void testClosureCreation() throws IOException, InvalidCSVFile {
  String nodeStr=CSVASTSamples.closureNodeStr;
  String edgeStr=CSVASTSamples.closureEdgeStr;
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)6);
  assertThat(node,instanceOf(Closure.class));
  assertEquals(""String_Node_Str"",((Closure)node).getName());
  assertEquals(4,node.getChildCount());
  assertEquals(ast.getNodeById((long)7),((Closure)node).getParameterList());
  assertEquals(ast.getNodeById((long)8),((Closure)node).getClosureUses());
  assertEquals(ast.getNodeById((long)11),((Closure)node).getContent());
  assertEquals(ast.getNodeById((long)12),((Closure)node).getReturnType());
  assertEquals(ast.getNodeById((long)13),((Closure)node).getReturnType().getNameChild());
  assertEquals(""String_Node_Str"",((Closure)node).getReturnType().getNameChild().getEscapedCodeStr());
  ASTNode node2=ast.getNodeById((long)3);
  assertThat(node2,instanceOf(AssignmentExpression.class));
  ASTNode node3=((AssignmentExpression)node2).getRight();
  assertThat(node3,instanceOf(ClosureExpression.class));
  assertEquals(node,((ClosureExpression)node3).getClosure());
  assertEquals(node.getNodeId(),node3.getNodeId());
}",0.9845238095238096
160766,"/** 
 * foreach ($somearray as $foo); foreach ($somearray as $foo) bar();
 */
@Test public void testMinimalForEachCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)10);
  assertThat(node,instanceOf(ForEachStatement.class));
  assertEquals(4,node.getChildCount());
  assertNull(((ForEachStatement)node).getKeyVariable());
  assertNull(((ForEachStatement)node).getStatement());
  assertThat(node2,instanceOf(ForEachStatement.class));
  assertEquals(4,node2.getChildCount());
  assertNull(((ForEachStatement)node2).getKeyVariable());
  assertThat(((ForEachStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((ForEachStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)16),((ExpressionStatement)((ForEachStatement)node2).getStatement()).getExpression());
}","/** 
 * foreach ($somearray as $foo); foreach ($somearray as $foo) bar();
 */
@Test public void testMinimalForEachCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)10);
  assertThat(node,instanceOf(ForEachStatement.class));
  assertEquals(4,node.getChildCount());
  assertNull(((ForEachStatement)node).getKeyVariable());
  assertNull(((ForEachStatement)node).getStatement());
  assertThat(node2,instanceOf(ForEachStatement.class));
  assertEquals(4,node2.getChildCount());
  assertNull(((ForEachStatement)node2).getKeyVariable());
  assertThat(((ForEachStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((ForEachStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)16),((ExpressionStatement)((ForEachStatement)node2).getStatement()).getExpression());
  assertEquals(Long.valueOf(16),((ExpressionStatement)((ForEachStatement)node2).getStatement()).getNodeId());
}",0.9739706578324656
160767,"/** 
 * do ; while($foo); do bar(); while($foo);
 */
@Test public void testMinimalDoCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)7);
  assertThat(node,instanceOf(DoStatement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((DoStatement)node).getStatement());
  assertThat(node2,instanceOf(DoStatement.class));
  assertEquals(2,node2.getChildCount());
  assertThat(((DoStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((DoStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)8),((ExpressionStatement)((DoStatement)node2).getStatement()).getExpression());
}","/** 
 * do ; while($foo); do bar(); while($foo);
 */
@Test public void testMinimalDoCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)7);
  assertThat(node,instanceOf(DoStatement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((DoStatement)node).getStatement());
  assertThat(node2,instanceOf(DoStatement.class));
  assertEquals(2,node2.getChildCount());
  assertThat(((DoStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((DoStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)8),((ExpressionStatement)((DoStatement)node2).getStatement()).getExpression());
  assertEquals(Long.valueOf(8),((ExpressionStatement)((DoStatement)node2).getStatement()).getNodeId());
}",0.9649359406608228
160768,"/** 
 * if(true) ; else ; if(true) foo(); else bar();
 */
@Test public void testMinimalIfElementCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)4);
  ASTNode node2=ast.getNodeById((long)9);
  ASTNode node3=ast.getNodeById((long)13);
  ASTNode node4=ast.getNodeById((long)21);
  assertThat(node,instanceOf(PHPIfElement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((PHPIfElement)node).getStatement());
  assertThat(node2,instanceOf(PHPIfElement.class));
  assertEquals(2,node2.getChildCount());
  assertNull(((PHPIfElement)node2).getCondition());
  assertNull(((PHPIfElement)node2).getStatement());
  assertThat(node3,instanceOf(PHPIfElement.class));
  assertEquals(2,node3.getChildCount());
  assertThat(((PHPIfElement)node3).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((PHPIfElement)node3).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)17),((ExpressionStatement)((PHPIfElement)node3).getStatement()).getExpression());
  assertThat(node4,instanceOf(PHPIfElement.class));
  assertEquals(2,node4.getChildCount());
  assertNull(((PHPIfElement)node4).getCondition());
  assertThat(((PHPIfElement)node4).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((PHPIfElement)node4).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)23),((ExpressionStatement)((PHPIfElement)node4).getStatement()).getExpression());
}","/** 
 * if(true) ; else ; if(true) foo(); else bar();
 */
@Test public void testMinimalIfElementCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)4);
  ASTNode node2=ast.getNodeById((long)9);
  ASTNode node3=ast.getNodeById((long)13);
  ASTNode node4=ast.getNodeById((long)21);
  assertThat(node,instanceOf(PHPIfElement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((PHPIfElement)node).getStatement());
  assertThat(node2,instanceOf(PHPIfElement.class));
  assertEquals(2,node2.getChildCount());
  assertNull(((PHPIfElement)node2).getCondition());
  assertNull(((PHPIfElement)node2).getStatement());
  assertThat(node3,instanceOf(PHPIfElement.class));
  assertEquals(2,node3.getChildCount());
  assertThat(((PHPIfElement)node3).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((PHPIfElement)node3).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)17),((ExpressionStatement)((PHPIfElement)node3).getStatement()).getExpression());
  assertEquals(Long.valueOf(17),((ExpressionStatement)((PHPIfElement)node3).getStatement()).getNodeId());
  assertThat(node4,instanceOf(PHPIfElement.class));
  assertEquals(2,node4.getChildCount());
  assertNull(((PHPIfElement)node4).getCondition());
  assertThat(((PHPIfElement)node4).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((PHPIfElement)node4).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)23),((ExpressionStatement)((PHPIfElement)node4).getStatement()).getExpression());
  assertEquals(Long.valueOf(23),((ExpressionStatement)((PHPIfElement)node4).getStatement()).getNodeId());
}",0.8916349809885932
160769,"/** 
 * for (;;); for (;;) foo();
 */
@Test public void testMinimalForCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)8);
  assertThat(node,instanceOf(ForStatement.class));
  assertEquals(4,node.getChildCount());
  assertNull(((ForStatement)node).getForInitExpression());
  assertNull(((ForStatement)node).getCondition());
  assertNull(((ForStatement)node).getForLoopExpression());
  assertNull(((ForStatement)node).getStatement());
  assertThat(node2,instanceOf(ForStatement.class));
  assertEquals(4,node2.getChildCount());
  assertNull(((ForStatement)node2).getForInitExpression());
  assertNull(((ForStatement)node2).getCondition());
  assertNull(((ForStatement)node2).getForLoopExpression());
  assertThat(((ForStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((ForStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)12),((ExpressionStatement)((ForStatement)node2).getStatement()).getExpression());
}","/** 
 * for (;;); for (;;) foo();
 */
@Test public void testMinimalForCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)8);
  assertThat(node,instanceOf(ForStatement.class));
  assertEquals(4,node.getChildCount());
  assertNull(((ForStatement)node).getForInitExpression());
  assertNull(((ForStatement)node).getCondition());
  assertNull(((ForStatement)node).getForLoopExpression());
  assertNull(((ForStatement)node).getStatement());
  assertThat(node2,instanceOf(ForStatement.class));
  assertEquals(4,node2.getChildCount());
  assertNull(((ForStatement)node2).getForInitExpression());
  assertNull(((ForStatement)node2).getCondition());
  assertNull(((ForStatement)node2).getForLoopExpression());
  assertThat(((ForStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((ForStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)12),((ExpressionStatement)((ForStatement)node2).getStatement()).getExpression());
  assertEquals(Long.valueOf(12),((ExpressionStatement)((ForStatement)node2).getStatement()).getNodeId());
}",0.9738658777120316
160770,"/** 
 * while($foo); while($foo) bar();
 */
@Test public void testMinimalWhileCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)7);
  assertThat(node,instanceOf(WhileStatement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((WhileStatement)node).getStatement());
  assertThat(node2,instanceOf(WhileStatement.class));
  assertEquals(2,node2.getChildCount());
  assertThat(((WhileStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((WhileStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)10),((ExpressionStatement)((WhileStatement)node2).getStatement()).getExpression());
}","/** 
 * while($foo); while($foo) bar();
 */
@Test public void testMinimalWhileCreation() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  String edgeStr=edgeHeader;
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  edgeStr+=""String_Node_Str"";
  handle(nodeStr,edgeStr);
  ASTNode node=ast.getNodeById((long)3);
  ASTNode node2=ast.getNodeById((long)7);
  assertThat(node,instanceOf(WhileStatement.class));
  assertEquals(2,node.getChildCount());
  assertNull(((WhileStatement)node).getStatement());
  assertThat(node2,instanceOf(WhileStatement.class));
  assertEquals(2,node2.getChildCount());
  assertThat(((WhileStatement)node2).getStatement(),not(instanceOf(CompoundStatement.class)));
  assertThat(((WhileStatement)node2).getStatement(),instanceOf(ExpressionStatement.class));
  assertEquals(ast.getNodeById((long)10),((ExpressionStatement)((WhileStatement)node2).getStatement()).getExpression());
  assertEquals(Long.valueOf(10),((ExpressionStatement)((WhileStatement)node2).getStatement()).getNodeId());
}",0.9639519359145527
160771,"/** 
 * Checks whether a collection of UseOrDef elements contains a definition/use of a given symbol for a given node.
 */
private boolean containsUseOrDef(UseDefGraph udg,String symbol,long id,boolean isDef){
  List<UseOrDefRecord> useOrDefRecords=udg.getUsesAndDefsForSymbol(symbol);
  for (  UseOrDefRecord useOrDefRecord : useOrDefRecords) {
    if (useOrDefRecord.getAstNode().getProperty(ASTNodeProperties.NODE_ID).equals(String.valueOf(id)) && useOrDefRecord.isDef() == isDef)     return true;
  }
  return false;
}","/** 
 * Checks whether a collection of UseOrDef elements contains a definition/use of a given symbol for a given node.
 */
private boolean containsUseOrDef(UseDefGraph udg,String symbol,long id,boolean isDef){
  List<UseOrDefRecord> useOrDefRecords=udg.getUsesAndDefsForSymbol(symbol);
  for (  UseOrDefRecord useOrDefRecord : useOrDefRecords) {
    if (useOrDefRecord.getAstNode().getNodeId().equals(id) && useOrDefRecord.isDef() == isDef)     return true;
  }
  return false;
}",0.949050949050949
160772,"public String getFunctionSignature(){
  String retval=getName().getEscapedCodeStr();
  if (getParameterList() != null)   retval+=""String_Node_Str"" + getParameterList().getEscapedCodeStr() + ""String_Node_Str"";
 else   retval+=""String_Node_Str"";
  return retval;
}","public String getFunctionSignature(){
  String retval=getIdentifier().getEscapedCodeStr();
  if (getParameterList() != null)   retval+=""String_Node_Str"" + getParameterList().getEscapedCodeStr() + ""String_Node_Str"";
 else   retval+=""String_Node_Str"";
  return retval;
}",0.5169811320754717
160773,"public void addChild(ASTNode node){
  if (node instanceof CompoundStatement)   setContent((CompoundStatement)node);
 else   if (node instanceof ParameterList)   setParameterList((ParameterList)node);
 else   if (node instanceof Identifier)   setName((Identifier)node);
  super.addChild(node);
}","public void addChild(ASTNode node){
  if (node instanceof CompoundStatement)   setContent((CompoundStatement)node);
 else   if (node instanceof ParameterList)   setParameterList((ParameterList)node);
 else   if (node instanceof Identifier)   setIdentifier((Identifier)node);
  super.addChild(node);
}",0.9764309764309764
160774,"@Override public String getFunctionSignature(){
  return getName().getEscapedCodeStr();
}","@Override public String getFunctionSignature(){
  return getIdentifier().getEscapedCodeStr();
}",0.9347826086956522
160775,"public String getName(){
  return astRoot.getName().getEscapedCodeStr();
}","public String getName(){
  return astRoot.getIdentifier().getEscapedCodeStr();
}",0.922077922077922
160776,"public void setName(Function_nameContext ctx,Stack<ASTNodeBuilder> itemStack){
  thisItem.addChild(new Identifier());
  ASTNodeFactory.initializeFromContext(thisItem.getName(),ctx);
}","public void setName(Function_nameContext ctx,Stack<ASTNodeBuilder> itemStack){
  thisItem.addChild(new Identifier());
  ASTNodeFactory.initializeFromContext(thisItem.getIdentifier(),ctx);
}",0.967741935483871
160777,"public void addToDatabaseSafe(ASTNode node){
  try {
    FunctionDatabaseNode function=new FunctionDatabaseNode();
    function.initialize(node);
    addFunctionToDatabase(function);
    linkFunctionToFileNode(function,curFile);
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + ((FunctionDef)node).getName().getEscapedCodeStr());
    return;
  }
}","public void addToDatabaseSafe(ASTNode node){
  try {
    FunctionDatabaseNode function=new FunctionDatabaseNode();
    function.initialize(node);
    addFunctionToDatabase(function);
    linkFunctionToFileNode(function,curFile);
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + ((FunctionDef)node).getIdentifier().getEscapedCodeStr());
    return;
  }
}",0.9828009828009828
160778,"@Test public void testMissingFunctiondName() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  FunctionDef func=createASTFromStrings(nodeStr,edgeHeader);
  assertEquals(""String_Node_Str"",func.getName().getEscapedCodeStr());
}","@Test public void testMissingFunctiondName() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  FunctionDef func=createASTFromStrings(nodeStr,edgeHeader);
  assertEquals(""String_Node_Str"",func.getIdentifier().getEscapedCodeStr());
}",0.9746376811594204
160779,"@Test public void testFunctionName() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  FunctionDef func=createASTFromStrings(nodeStr,edgeHeader);
  assertEquals(""String_Node_Str"",func.getName().getEscapedCodeStr());
}","@Test public void testFunctionName() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  FunctionDef func=createASTFromStrings(nodeStr,edgeHeader);
  assertEquals(""String_Node_Str"",func.getIdentifier().getEscapedCodeStr());
}",0.9738805970149254
160780,"/** 
 * function foo() {} class foo { function bar() {} } class buz {}
 */
@Test public void testFunctionAndTwoClassesWithMethod() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  FunctionDef function6=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function5.getName().getEscapedCodeStr());
  assertEquals(null,function6);
}","/** 
 * function foo() {} class foo { function bar() {} } class buz {}
 */
@Test public void testFunctionAndTwoClassesWithMethod() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  FunctionDef function6=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function5.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function6);
}",0.9795680093403386
160781,"/** 
 * function foo() {}
 */
@Test public void testSingleFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(null,function3);
}","/** 
 * function foo() {}
 */
@Test public void testSingleFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function3);
}",0.9826732673267328
160782,"/** 
 * function foo() {} true;
 */
@Test public void testFunctionPlusTopLevel() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(null,function3);
}","/** 
 * function foo() {} true;
 */
@Test public void testFunctionPlusTopLevel() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function3);
}",0.9846153846153848
160783,"/** 
 * function foo() { function() {}; }
 */
@Test public void testFunctionWithClosure() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(null,function4);
}","/** 
 * function foo() { function() {}; }
 */
@Test public void testFunctionWithClosure() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function4);
}",0.981081081081081
160784,"/** 
 * foo.php ------- function foo() {} bar.php ------- function bar() {}
 */
@Test public void testTwoFiles() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getName().getEscapedCodeStr());
  assertEquals(null,function5);
}","/** 
 * foo.php ------- function foo() {} bar.php ------- function bar() {}
 */
@Test public void testTwoFiles() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function5);
}",0.9797687861271676
160785,"/** 
 * function foo() {} function bar() {}
 */
@Test public void testTwoFunctions() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(null,function4);
}","/** 
 * function foo() {} function bar() {}
 */
@Test public void testTwoFunctions() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function4);
}",0.980995475113122
160786,"/** 
 * class foo {}
 */
@Test public void testSingleClass() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(null,function3);
}","/** 
 * class foo {}
 */
@Test public void testSingleClass() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function3);
}",0.9825
160787,"/** 
 * function foo() { function bar() {} }
 */
@Test public void testFunctionWithInnerFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(null,function4);
}","/** 
 * function foo() { function bar() {} }
 */
@Test public void testFunctionWithInnerFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function4);
}",0.9812332439678284
160788,"/** 
 * true; function foo() {} true;
 */
@Test public void testTopLevelFuncTopLevel() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(null,function3);
}","/** 
 * true; function foo() {} true;
 */
@Test public void testTopLevelFuncTopLevel() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function3);
}",0.9860834990059644
160789,"/** 
 * function foo() { function bar() {} } function buz() {}
 */
@Test public void testTwoFunctionsAndInnerFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getName().getEscapedCodeStr());
  assertEquals(null,function5);
}","/** 
 * function foo() { function bar() {} } function buz() {}
 */
@Test public void testTwoFunctionsAndInnerFunction() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getIdentifier().getEscapedCodeStr());
  assertEquals(null,function5);
}",0.9802955665024632
160790,"/** 
 * foo.php ------- class foo { function foo() {} } bar.php ------- class bar { function bar() {} }
 */
@Test public void testTwoFilesWithClassesAndMethods() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  FunctionDef function6=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function5.getName().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function6.getName().getEscapedCodeStr());
}","/** 
 * foo.php ------- class foo { function foo() {} } bar.php ------- class bar { function bar() {} }
 */
@Test public void testTwoFilesWithClassesAndMethods() throws IOException, InvalidCSVFile {
  String nodeStr=nodeHeader;
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeStr+=""String_Node_Str"";
  nodeReader=new StringReader(nodeStr);
  extractor.initialize(nodeReader,edgeReader);
  FunctionDef function=extractor.getNextFunction();
  FunctionDef function2=extractor.getNextFunction();
  FunctionDef function3=extractor.getNextFunction();
  FunctionDef function4=extractor.getNextFunction();
  FunctionDef function5=extractor.getNextFunction();
  FunctionDef function6=extractor.getNextFunction();
  assertEquals(""String_Node_Str"",function.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function2.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function3.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function4.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function5.getIdentifier().getEscapedCodeStr());
  assertEquals(""String_Node_Str"",function6.getIdentifier().getEscapedCodeStr());
}",0.9780104712041884
160791,"@Test public void testFunctionPtrParam(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  FunctionDef codeItem=(FunctionDef)codeItems.get(0);
  System.out.println(codeItem.getEscapedCodeStr());
  assertTrue(codeItem.getName().getEscapedCodeStr().equals(""String_Node_Str""));
}","@Test public void testFunctionPtrParam(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  FunctionDef codeItem=(FunctionDef)codeItems.get(0);
  System.out.println(codeItem.getEscapedCodeStr());
  assertTrue(codeItem.getIdentifier().getEscapedCodeStr().equals(""String_Node_Str""));
}",0.977491961414791
160792,"@Test public void testFuncName(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  FunctionDef codeItem=(FunctionDef)codeItems.get(0);
  assertTrue(codeItem.getName().getEscapedCodeStr().equals(""String_Node_Str""));
}","@Test public void testFuncName(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  FunctionDef codeItem=(FunctionDef)codeItems.get(0);
  assertTrue(codeItem.getIdentifier().getEscapedCodeStr().equals(""String_Node_Str""));
}",0.9721115537848606
160793,"@Test public void testFunctionInClass(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  ClassDefStatement codeItem=(ClassDefStatement)codeItems.get(0);
  FunctionDef funcItem=(FunctionDef)codeItem.content.getStatements().get(0);
  assertTrue(funcItem.getName().getEscapedCodeStr().equals(""String_Node_Str""));
}","@Test public void testFunctionInClass(){
  String input=""String_Node_Str"";
  List<ASTNode> codeItems=parseInput(input);
  ClassDefStatement codeItem=(ClassDefStatement)codeItems.get(0);
  FunctionDef funcItem=(FunctionDef)codeItem.content.getStatements().get(0);
  assertTrue(funcItem.getIdentifier().getEscapedCodeStr().equals(""String_Node_Str""));
}",0.9798270893371758
160794,"private void reportUpstream(UseDefEnvironment childEnv){
  Collection<String> symbols=childEnv.upstreamSymbols();
  try {
    UseDefEnvironment parentEnv=environmentStack.peek();
    parentEnv.addChildSymbols(symbols);
    Collection<UseOrDef> toEmit=parentEnv.useOrDefsFromChildSymbols();
    emitUseOrDefs(toEmit);
  }
 catch (  EmptyStackException ex) {
    LinkedList<UseOrDef> toEmit=childEnv.createUsesForAllSymbols(symbols);
    emitUseOrDefs(toEmit);
  }
}","private void reportUpstream(UseDefEnvironment childEnv){
  LinkedList<String> symbols=childEnv.upstreamSymbols();
  try {
    UseDefEnvironment parentEnv=environmentStack.peek();
    parentEnv.addChildSymbols(symbols);
    Collection<UseOrDef> toEmit=parentEnv.useOrDefsFromChildSymbols();
    emitUseOrDefs(toEmit);
  }
 catch (  EmptyStackException ex) {
    LinkedList<UseOrDef> toEmit=childEnv.createUsesForAllSymbols(symbols);
    emitUseOrDefs(toEmit);
  }
}",0.978448275862069
160795,"public void addChildSymbols(Collection<String> childSymbols){
  if (childNum != 0)   useSymbols.addAll(childSymbols);
 else   symbolsForUpstream.addAll(childSymbols);
}","public void addChildSymbols(LinkedList<String> childSymbols){
  if (childNum != 0)   useSymbols.addAll(childSymbols);
 else   symbolsForUpstream.addAll(childSymbols);
}",0.9523809523809524
160796,"public Collection<String> upstreamSymbols(){
  return emptySymbolList;
}","public LinkedList<String> upstreamSymbols(){
  return emptySymbolList;
}",0.8888888888888888
160797,"public void addChildSymbols(Collection<String> childSymbols){
  if (isDef())   defSymbols.addAll(childSymbols);
  if (isUse())   useSymbols.addAll(childSymbols);
}","public void addChildSymbols(LinkedList<String> childSymbols){
  if (isDef())   defSymbols.addAll(childSymbols);
  if (isUse())   useSymbols.addAll(childSymbols);
}",0.950920245398773
160798,"public void addChildSymbols(Collection<String> childSymbols){
  if (isDef()) {
    if (childSymbols.size() > 1) {
      Iterator<String> iterator=childSymbols.iterator();
      iterator.next();
      while (iterator.hasNext()) {
        String next=iterator.next();
        defSymbols.add(next);
      }
    }
 else     defSymbols.addAll(childSymbols);
  }
  if (isUse())   symbolsForUpstream.addAll(childSymbols);
}","public void addChildSymbols(LinkedList<String> childSymbols){
  if (isDef()) {
    if (childSymbols.size() > 1) {
      defSymbols.add(childSymbols.getLast());
    }
 else     defSymbols.addAll(childSymbols);
  }
  if (isUse())   symbolsForUpstream.addAll(childSymbols);
}",0.6598837209302325
160799,"public Collection<String> upstreamSymbols(){
  return symbolsForUpstream;
}","public LinkedList<String> upstreamSymbols(){
  return symbolsForUpstream;
}",0.8933333333333333
160800,"public void addChildSymbols(Collection<String> childSymbols){
  useSymbols.addAll(childSymbols);
}","public void addChildSymbols(LinkedList<String> childSymbols){
  useSymbols.addAll(childSymbols);
}",0.9183673469387756
160801,"public Collection<String> upstreamSymbols(){
  String code=astProvider.getEscapedCodeStr();
  ArrayList<String> retval=new ArrayList<String>();
  retval.add(code);
  return retval;
}","public LinkedList<String> upstreamSymbols(){
  String code=astProvider.getEscapedCodeStr();
  LinkedList<String> retval=new LinkedList<String>();
  retval.add(code);
  return retval;
}",0.8961748633879781
160802,"public Collection<UseOrDef> useOrDefsFromChildSymbols(){
  if (childNum != 0)   return emptyUseOrDef;
  LinkedList<String> symbols=new LinkedList<String>();
  symbols.add(leftMostSymbol);
  return createUsesForAllSymbols(symbols);
}","public Collection<UseOrDef> useOrDefsFromChildSymbols(){
  if (childNum != 0)   return emptyUseOrDef;
  return createUsesForAllSymbols(symbolsForUpstream);
}",0.7506426735218509
160803,"public Collection<String> upstreamSymbols(){
  if (emitted)   return emptySymbolList;
  emitted=true;
  LinkedList<String> retval=new LinkedList<String>();
  retval.add(leftMostSymbol);
  String codeStr=astProvider.getEscapedCodeStr();
  retval.add(codeStr);
  return retval;
}","public LinkedList<String> upstreamSymbols(){
  if (emitted)   return emptySymbolList;
  emitted=true;
  LinkedList<String> retval=new LinkedList<String>();
  retval.addAll(symbolsForUpstream);
  String codeStr=astProvider.getEscapedCodeStr();
  retval.add(codeStr);
  return retval;
}",0.1925133689839572
160804,"public void addChildSymbols(Collection<String> childSymbols){
  if (childNum == 0 && childSymbols.size() == 1) {
    leftMostSymbol=childSymbols.iterator().next();
  }
}","public void addChildSymbols(LinkedList<String> childSymbols){
  if (childNum != 0)   return;
  super.addChildSymbols(childSymbols);
}",0.5960264900662252
160805,"public Collection<String> upstreamSymbols(){
  return symbolsForUpstream;
}","public LinkedList<String> upstreamSymbols(){
  return symbolsForUpstream;
}",0.8933333333333333
160806,"public void addChildSymbols(Collection<String> childSymbols){
  symbolsForUpstream.addAll(childSymbols);
}","public void addChildSymbols(LinkedList<String> childSymbols){
  symbolsForUpstream.addAll(childSymbols);
}",0.9245283018867924
160807,"public void pop(){
  ASTNode topOfItemStack=itemStack.peek();
  if (stack.size() > 0 && stack.peek().parentCompound == topOfItemStack) {
    stack.pop();
  }
}","public void pop(){
  ASTNode topOfItemStack=itemStack.peek();
  while (stack.size() > 0 && stack.peek().parentCompound == topOfItemStack) {
    stack.pop();
  }
}",0.9844236760124612
160808,"public void pop(){
  ASTNode topOfItemStack=itemStack.peek();
  if (stack.size() > 0 && stack.peek().parentCompound == topOfItemStack) {
    stack.pop();
  }
}","public void pop(){
  ASTNode topOfItemStack=itemStack.peek();
  while (stack.size() > 0 && stack.peek().parentCompound == topOfItemStack) {
    stack.pop();
  }
}",0.9844236760124612
160809,"private DoStatement getDoFromShadowStack(){
  DoStatement retval;
  ASTNode first=null;
  ASTNode second=null;
  try {
    first=shadowStack.pop();
    second=shadowStack.pop();
    retval=(DoStatement)second;
  }
 catch (  EmptyStackException ex) {
    return null;
  }
catch (  ClassCastException ex) {
    shadowStack.push(second);
    shadowStack.push(first);
    return null;
  }
  return retval;
}","private DoStatement getDoFromShadowStack(){
  DoStatement retval;
  ASTNode first=null;
  ASTNode second=null;
  try {
    first=shadowStack.pop();
    second=shadowStack.pop();
    retval=(DoStatement)second;
    if (itemStack.contains(retval)) {
      shadowStack.push(second);
      shadowStack.push(first);
      return null;
    }
  }
 catch (  EmptyStackException ex) {
    return null;
  }
catch (  ClassCastException ex) {
    shadowStack.push(second);
    shadowStack.push(first);
    return null;
  }
  return retval;
}",0.8648068669527897
160810,"private IndexHits<Long> lookupCallee(String callee){
  String query=""String_Node_Str"" + callee + ""String_Node_Str"";
  IndexHits<Long> hits=Neo4JBatchInserter.queryIndex(query);
  return hits;
}","private IndexHits<Long> lookupCallee(String callee){
  if (callee.contains(""String_Node_Str""))   return null;
  String query=""String_Node_Str"" + callee + ""String_Node_Str"";
  IndexHits<Long> hits=Neo4JBatchInserter.queryIndex(query);
  return hits;
}",0.871331828442438
160811,"private void createOutgoingCallGraphEdges(Long funcId){
  IndexHits<Long> calls=getOutgoingCallsFromIndex(funcId);
  for (  long callId : calls) {
    IndexHits<Long> dstIds=resolveCalledFunction(callId);
    createCallGraphEdges(funcId,dstIds,callId);
  }
}","private void createOutgoingCallGraphEdges(Long funcId){
  IndexHits<Long> calls=getOutgoingCallsFromIndex(funcId);
  for (  long callId : calls) {
    IndexHits<Long> dstIds=resolveCalledFunction(callId);
    if (dstIds == null)     continue;
    createCallGraphEdges(funcId,dstIds,callId);
  }
}",0.9314079422382672
160812,"@Override public void visit(FunctionDef item){
}","public void visit(FunctionDef item){
}",0.8837209302325582
160813,"@Override public void visit(ExprStatementItem statementItem){
}","public void visit(ClassDef item){
  Document newDocument=DocumentVendor.createNewDocument();
  documents.add(newDocument);
  ClassDefToDocumentConverter.convert(item,filename,documents);
}",0.2231075697211155
160814,public abstract void visit(ExprStatementItem statementItem);,"public void visit(ExprStatementItem statementItem){
  defaultHandler(statementItem);
}",0.6986301369863014
160815,"private CompoundStatement parseFunctionContents(Function_defContext ctx){
  String text=getCompoundStmtAsString(ctx);
  FunctionParser parser=new FunctionParser();
  parser.enableFineParsing();
  try {
    parser.parseAndWalkString(text);
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + ctx.function_name().getText() + ""String_Node_Str"");
  }
  return parser.getResult();
}","private CompoundStatement parseFunctionContents(Function_defContext ctx){
  String text=getCompoundStmtAsString(ctx);
  FunctionParser parser=new FunctionParser();
  parser.enableFineParsing();
  try {
    parser.parseAndWalkString(text);
  }
 catch (  RuntimeException ex) {
    System.err.println(""String_Node_Str"" + ctx.function_name().getText() + ""String_Node_Str"");
  }
  return parser.getResult();
}",0.6770334928229665
160816,"private void processSingleFile(String filename){
  try {
    parser.parseAndWalkFile(filename);
  }
 catch (  ParserException ex) {
    System.err.println(""String_Node_Str"" + filename);
  }
}","private void processSingleFile(String filename){
  System.out.println(filename);
  try {
    parser.parseAndWalkFile(filename);
  }
 catch (  ParserException ex) {
    System.err.println(""String_Node_Str"" + filename);
  }
}",0.9227053140096618
160817,"@Override public void action(RuleContext _localctx,int ruleIndex,int actionIndex){
switch (ruleIndex) {
case 101:
    COMMENT_action((RuleContext)_localctx,actionIndex);
  break;
case 102:
WHITESPACE_action((RuleContext)_localctx,actionIndex);
break;
case 103:
CPPCOMMENT_action((RuleContext)_localctx,actionIndex);
break;
case 104:
OTHER_action((RuleContext)_localctx,actionIndex);
break;
}
}","@Override public void action(RuleContext _localctx,int ruleIndex,int actionIndex){
switch (ruleIndex) {
case 102:
    COMMENT_action((RuleContext)_localctx,actionIndex);
  break;
case 103:
WHITESPACE_action((RuleContext)_localctx,actionIndex);
break;
case 104:
CPPCOMMENT_action((RuleContext)_localctx,actionIndex);
break;
case 105:
OTHER_action((RuleContext)_localctx,actionIndex);
break;
}
}",0.648854961832061
160818,"public final Postfix_expressionContext postfix_expression(int _p) throws RecognitionException {
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  Postfix_expressionContext _localctx=new Postfix_expressionContext(_ctx,_parentState,_p);
  Postfix_expressionContext _prevctx=_localctx;
  int _startState=82;
  enterRecursionRule(_localctx,RULE_postfix_expression);
  int _la;
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new PrimaryOnlyContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(348);
        primary_expression();
      }
      _ctx.stop=_input.LT(-1);
      setState(376);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,25,_ctx);
      while (_alt != 2 && _alt != -1) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(374);
switch (getInterpreter().adaptivePredict(_input,24,_ctx)) {
case 1:
{
                _localctx=new ArrayIndexingContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
                pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
                setState(350);
                if (!(6 >= _localctx._p))                 throw new FailedPredicateException(this,""String_Node_Str"");
                setState(351);
                match(3);
                setState(352);
                expr();
                setState(353);
                match(22);
              }
            break;
case 2:
{
            _localctx=new FuncCallContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
            pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
            setState(355);
            if (!(5 >= _localctx._p))             throw new FailedPredicateException(this,""String_Node_Str"");
            setState(356);
            match(28);
            setState(357);
            function_argument_list();
            setState(358);
            match(12);
          }
        break;
case 3:
{
        _localctx=new MemberAccessContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
        pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
        setState(360);
        if (!(4 >= _localctx._p))         throw new FailedPredicateException(this,""String_Node_Str"");
        setState(361);
        match(42);
        setState(363);
        _la=_input.LA(1);
        if (_la == TEMPLATE) {
{
            setState(362);
            match(TEMPLATE);
          }
        }
        setState(365);
        identifier();
      }
    break;
case 4:
{
    _localctx=new PtrMemberAccessContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
    pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
    setState(366);
    if (!(3 >= _localctx._p))     throw new FailedPredicateException(this,""String_Node_Str"");
    setState(367);
    match(9);
    setState(369);
    _la=_input.LA(1);
    if (_la == TEMPLATE) {
{
        setState(368);
        match(TEMPLATE);
      }
    }
    setState(371);
    identifier();
  }
break;
case 5:
{
_localctx=new IncDecOpContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
setState(372);
if (!(2 >= _localctx._p)) throw new FailedPredicateException(this,""String_Node_Str"");
setState(373);
inc_dec();
}
break;
}
}
}
setState(378);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,25,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}","public final Postfix_expressionContext postfix_expression(int _p) throws RecognitionException {
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  Postfix_expressionContext _localctx=new Postfix_expressionContext(_ctx,_parentState,_p);
  Postfix_expressionContext _prevctx=_localctx;
  int _startState=82;
  enterRecursionRule(_localctx,RULE_postfix_expression);
  int _la;
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new PrimaryOnlyContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(361);
        primary_expression();
      }
      _ctx.stop=_input.LT(-1);
      setState(389);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,26,_ctx);
      while (_alt != 2 && _alt != -1) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(387);
switch (getInterpreter().adaptivePredict(_input,25,_ctx)) {
case 1:
{
                _localctx=new ArrayIndexingContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
                pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
                setState(363);
                if (!(6 >= _localctx._p))                 throw new FailedPredicateException(this,""String_Node_Str"");
                setState(364);
                match(3);
                setState(365);
                expr();
                setState(366);
                match(23);
              }
            break;
case 2:
{
            _localctx=new FuncCallContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
            pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
            setState(368);
            if (!(5 >= _localctx._p))             throw new FailedPredicateException(this,""String_Node_Str"");
            setState(369);
            match(29);
            setState(370);
            function_argument_list();
            setState(371);
            match(12);
          }
        break;
case 3:
{
        _localctx=new MemberAccessContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
        pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
        setState(373);
        if (!(4 >= _localctx._p))         throw new FailedPredicateException(this,""String_Node_Str"");
        setState(374);
        match(43);
        setState(376);
        _la=_input.LA(1);
        if (_la == TEMPLATE) {
{
            setState(375);
            match(TEMPLATE);
          }
        }
        setState(378);
        identifier();
      }
    break;
case 4:
{
    _localctx=new PtrMemberAccessContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
    pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
    setState(379);
    if (!(3 >= _localctx._p))     throw new FailedPredicateException(this,""String_Node_Str"");
    setState(380);
    match(9);
    setState(382);
    _la=_input.LA(1);
    if (_la == TEMPLATE) {
{
        setState(381);
        match(TEMPLATE);
      }
    }
    setState(384);
    identifier();
  }
break;
case 5:
{
_localctx=new IncDecOpContext(new Postfix_expressionContext(_parentctx,_parentState,_p));
pushNewRecursionContext(_localctx,_startState,RULE_postfix_expression);
setState(385);
if (!(2 >= _localctx._p)) throw new FailedPredicateException(this,""String_Node_Str"");
setState(386);
inc_dec();
}
break;
}
}
}
setState(391);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,26,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}",0.861643475977947
160819,"public final NumberContext number() throws RecognitionException {
  NumberContext _localctx=new NumberContext(_ctx,getState());
  enterRule(_localctx,130,RULE_number);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(591);
      _la=_input.LA(1);
      if (!(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (HEX_LITERAL - 89)) | (1L << (DECIMAL_LITERAL - 89)) | (1L << (OCTAL_LITERAL - 89)))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final NumberContext number() throws RecognitionException {
  NumberContext _localctx=new NumberContext(_ctx,getState());
  enterRule(_localctx,130,RULE_number);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(604);
      _la=_input.LA(1);
      if (!(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (HEX_LITERAL - 90)) | (1L << (DECIMAL_LITERAL - 90)) | (1L << (OCTAL_LITERAL - 90)))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9191489361702128
160820,"public final Param_type_listContext param_type_list() throws RecognitionException {
  Param_type_listContext _localctx=new Param_type_listContext(_ctx,getState());
  enterRule(_localctx,122,RULE_param_type_list);
  int _la;
  try {
    setState(563);
switch (getInterpreter().adaptivePredict(_input,58,_ctx)) {
case 1:
      enterOuterAlt(_localctx,1);
{
      setState(548);
      match(28);
      setState(549);
      match(VOID);
      setState(550);
      match(12);
    }
  break;
case 2:
enterOuterAlt(_localctx,2);
{
setState(551);
match(28);
setState(560);
_la=_input.LA(1);
if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (VOID - 67)) | (1L << (UNSIGNED - 67)) | (1L << (SIGNED - 67))| (1L << (LONG - 67))| (1L << (CV_QUALIFIER - 67))| (1L << (AUTO - 67))| (1L << (REGISTER - 67))| (1L << (CLASS_KEY - 67))| (1L << (ALPHA_NUMERIC - 67)))) != 0)) {
{
    setState(552);
    param_type();
    setState(557);
    _errHandler.sync(this);
    _la=_input.LA(1);
    while (_la == 26) {
{
{
          setState(553);
          match(26);
          setState(554);
          param_type();
        }
      }
      setState(559);
      _errHandler.sync(this);
      _la=_input.LA(1);
    }
  }
}
setState(562);
match(12);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Param_type_listContext param_type_list() throws RecognitionException {
  Param_type_listContext _localctx=new Param_type_listContext(_ctx,getState());
  enterRule(_localctx,122,RULE_param_type_list);
  int _la;
  try {
    setState(576);
switch (getInterpreter().adaptivePredict(_input,59,_ctx)) {
case 1:
      enterOuterAlt(_localctx,1);
{
      setState(561);
      match(29);
      setState(562);
      match(VOID);
      setState(563);
      match(12);
    }
  break;
case 2:
enterOuterAlt(_localctx,2);
{
setState(564);
match(29);
setState(573);
_la=_input.LA(1);
if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VOID - 68)) | (1L << (UNSIGNED - 68)) | (1L << (SIGNED - 68))| (1L << (LONG - 68))| (1L << (CV_QUALIFIER - 68))| (1L << (AUTO - 68))| (1L << (REGISTER - 68))| (1L << (CLASS_KEY - 68))| (1L << (ALPHA_NUMERIC - 68)))) != 0)) {
{
    setState(565);
    param_type();
    setState(570);
    _errHandler.sync(this);
    _la=_input.LA(1);
    while (_la == 27) {
{
{
          setState(566);
          match(27);
          setState(567);
          param_type();
        }
      }
      setState(572);
      _errHandler.sync(this);
      _la=_input.LA(1);
    }
  }
}
setState(575);
match(12);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.813953488372093
160821,"public final Primary_expressionContext primary_expression() throws RecognitionException {
  Primary_expressionContext _localctx=new Primary_expressionContext(_ctx,getState());
  enterRule(_localctx,88,RULE_primary_expression);
  try {
    setState(397);
switch (_input.LA(1)) {
case ALPHA_NUMERIC:
      enterOuterAlt(_localctx,1);
{
      setState(391);
      identifier();
    }
  break;
case HEX_LITERAL:
case DECIMAL_LITERAL:
case OCTAL_LITERAL:
case FLOATING_POINT_LITERAL:
case CHAR:
case STRING:
enterOuterAlt(_localctx,2);
{
setState(392);
constant();
}
break;
case 28:
enterOuterAlt(_localctx,3);
{
setState(393);
match(28);
setState(394);
expr();
setState(395);
match(12);
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Primary_expressionContext primary_expression() throws RecognitionException {
  Primary_expressionContext _localctx=new Primary_expressionContext(_ctx,getState());
  enterRule(_localctx,88,RULE_primary_expression);
  try {
    setState(410);
switch (_input.LA(1)) {
case ALPHA_NUMERIC:
      enterOuterAlt(_localctx,1);
{
      setState(404);
      identifier();
    }
  break;
case HEX_LITERAL:
case DECIMAL_LITERAL:
case OCTAL_LITERAL:
case FLOATING_POINT_LITERAL:
case CHAR:
case STRING:
enterOuterAlt(_localctx,2);
{
setState(405);
constant();
}
break;
case 29:
enterOuterAlt(_localctx,3);
{
setState(406);
match(29);
setState(407);
expr();
setState(408);
match(12);
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.9025191675794084
160822,"public final IdentifierContext identifier() throws RecognitionException {
  IdentifierContext _localctx=new IdentifierContext(_ctx,getState());
  enterRule(_localctx,128,RULE_identifier);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
      setState(583);
      match(ALPHA_NUMERIC);
      setState(588);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,63,_ctx);
      while (_alt != 2 && _alt != -1) {
        if (_alt == 1) {
{
{
              setState(584);
              match(15);
              setState(585);
              match(ALPHA_NUMERIC);
            }
          }
        }
        setState(590);
        _errHandler.sync(this);
        _alt=getInterpreter().adaptivePredict(_input,63,_ctx);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final IdentifierContext identifier() throws RecognitionException {
  IdentifierContext _localctx=new IdentifierContext(_ctx,getState());
  enterRule(_localctx,128,RULE_identifier);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
      setState(596);
      match(ALPHA_NUMERIC);
      setState(601);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,64,_ctx);
      while (_alt != 2 && _alt != -1) {
        if (_alt == 1) {
{
{
              setState(597);
              match(15);
              setState(598);
              match(ALPHA_NUMERIC);
            }
          }
        }
        setState(603);
        _errHandler.sync(this);
        _alt=getInterpreter().adaptivePredict(_input,64,_ctx);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9874739039665972
160823,"public final No_brackets_curlies_or_squaresContext no_brackets_curlies_or_squares() throws RecognitionException {
  No_brackets_curlies_or_squaresContext _localctx=new No_brackets_curlies_or_squaresContext(_ctx,getState());
  enterRule(_localctx,28,RULE_no_brackets_curlies_or_squares);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(230);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22)| (1L << 28))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_brackets_curlies_or_squaresContext no_brackets_curlies_or_squares() throws RecognitionException {
  No_brackets_curlies_or_squaresContext _localctx=new No_brackets_curlies_or_squaresContext(_ctx,getState());
  enterRule(_localctx,28,RULE_no_brackets_curlies_or_squares);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(230);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 23)| (1L << 29))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9854721549636803
160824,"public final Exclusive_or_expressionContext exclusive_or_expression() throws RecognitionException {
  Exclusive_or_expressionContext _localctx=new Exclusive_or_expressionContext(_ctx,getState());
  enterRule(_localctx,60,RULE_exclusive_or_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(284);
      bit_and_expression();
      setState(287);
      _la=_input.LA(1);
      if (_la == 40) {
{
          setState(285);
          match(40);
          setState(286);
          exclusive_or_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Exclusive_or_expressionContext exclusive_or_expression() throws RecognitionException {
  Exclusive_or_expressionContext _localctx=new Exclusive_or_expressionContext(_ctx,getState());
  enterRule(_localctx,60,RULE_exclusive_or_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(284);
      bit_and_expression();
      setState(287);
      _la=_input.LA(1);
      if (_la == 41) {
{
          setState(285);
          match(41);
          setState(286);
          exclusive_or_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.99734395750332
160825,"public final Function_decl_specifiersContext function_decl_specifiers() throws RecognitionException {
  Function_decl_specifiersContext _localctx=new Function_decl_specifiersContext(_ctx,getState());
  enterRule(_localctx,10,RULE_function_decl_specifiers);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(153);
      _la=_input.LA(1);
      if (!(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (13 - 13)) | (1L << (14 - 13)) | (1L << (36 - 13))| (1L << (38 - 13))| (1L << (VIRTUAL - 13)))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Function_decl_specifiersContext function_decl_specifiers() throws RecognitionException {
  Function_decl_specifiersContext _localctx=new Function_decl_specifiersContext(_ctx,getState());
  enterRule(_localctx,10,RULE_function_decl_specifiers);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(153);
      _la=_input.LA(1);
      if (!(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (13 - 13)) | (1L << (14 - 13)) | (1L << (37 - 13))| (1L << (39 - 13))| (1L << (VIRTUAL - 13)))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9975124378109452
160826,"public final Var_declContext var_decl() throws RecognitionException {
  Var_declContext _localctx=new Var_declContext(_ctx,getState());
  enterRule(_localctx,98,RULE_var_decl);
  try {
    setState(443);
switch (getInterpreter().adaptivePredict(_input,38,_ctx)) {
case 1:
      _localctx=new DeclByClassContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(436);
    class_def();
    setState(438);
switch (getInterpreter().adaptivePredict(_input,37,_ctx)) {
case 1:
{
        setState(437);
        init_declarator_list();
      }
    break;
}
}
break;
case 2:
_localctx=new DeclByTypeContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(440);
type_name();
setState(441);
init_declarator_list();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Var_declContext var_decl() throws RecognitionException {
  Var_declContext _localctx=new Var_declContext(_ctx,getState());
  enterRule(_localctx,98,RULE_var_decl);
  try {
    setState(456);
switch (getInterpreter().adaptivePredict(_input,39,_ctx)) {
case 1:
      _localctx=new DeclByClassContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(449);
    class_def();
    setState(451);
switch (getInterpreter().adaptivePredict(_input,38,_ctx)) {
case 1:
{
        setState(450);
        init_declarator_list();
      }
    break;
}
}
break;
case 2:
_localctx=new DeclByTypeContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(453);
type_name();
setState(454);
init_declarator_list();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.8452115812917594
160827,"public final Base_classContext base_class() throws RecognitionException {
  Base_classContext _localctx=new Base_classContext(_ctx,getState());
  enterRule(_localctx,112,RULE_base_class);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(492);
      _la=_input.LA(1);
      if (_la == VIRTUAL) {
{
          setState(491);
          match(VIRTUAL);
        }
      }
      setState(495);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 25) | (1L << 31) | (1L << 44))) != 0)) {
{
          setState(494);
          access_specifier();
        }
      }
      setState(497);
      identifier();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Base_classContext base_class() throws RecognitionException {
  Base_classContext _localctx=new Base_classContext(_ctx,getState());
  enterRule(_localctx,112,RULE_base_class);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(505);
      _la=_input.LA(1);
      if (_la == VIRTUAL) {
{
          setState(504);
          match(VIRTUAL);
        }
      }
      setState(508);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 26) | (1L << 32) | (1L << 45))) != 0)) {
{
          setState(507);
          access_specifier();
        }
      }
      setState(510);
      identifier();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.981132075471698
160828,"public final No_comma_or_semicolonContext no_comma_or_semicolon() throws RecognitionException {
  No_comma_or_semicolonContext _localctx=new No_comma_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,40,RULE_no_comma_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(242);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 26 || _la == 45)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_comma_or_semicolonContext no_comma_or_semicolon() throws RecognitionException {
  No_comma_or_semicolonContext _localctx=new No_comma_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,40,RULE_no_comma_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(242);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 27 || _la == 46)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9969650986342944
160829,"public final Base_typeContext base_type() throws RecognitionException {
  Base_typeContext _localctx=new Base_typeContext(_ctx,getState());
  enterRule(_localctx,116,RULE_base_type);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(537);
switch (getInterpreter().adaptivePredict(_input,53,_ctx)) {
case 1:
{
          setState(532);
          match(ALPHA_NUMERIC);
        }
      break;
case 2:
{
      setState(533);
      match(VOID);
    }
  break;
case 3:
{
  setState(534);
  match(LONG);
}
break;
case 4:
{
setState(535);
match(LONG);
setState(536);
match(LONG);
}
break;
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Base_typeContext base_type() throws RecognitionException {
  Base_typeContext _localctx=new Base_typeContext(_ctx,getState());
  enterRule(_localctx,116,RULE_base_type);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(550);
switch (getInterpreter().adaptivePredict(_input,54,_ctx)) {
case 1:
{
          setState(545);
          match(ALPHA_NUMERIC);
        }
      break;
case 2:
{
      setState(546);
      match(VOID);
    }
  break;
case 3:
{
  setState(547);
  match(LONG);
}
break;
case 4:
{
setState(548);
match(LONG);
setState(549);
match(LONG);
}
break;
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.984251968503937
160830,"public final Shift_expressionContext shift_expression() throws RecognitionException {
  Shift_expressionContext _localctx=new Shift_expressionContext(_ctx,getState());
  enterRule(_localctx,68,RULE_shift_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(306);
      additive_expression();
      setState(309);
      _la=_input.LA(1);
      if (_la == 8 || _la == 39) {
{
          setState(307);
          _la=_input.LA(1);
          if (!(_la == 8 || _la == 39)) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(308);
          shift_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Shift_expressionContext shift_expression() throws RecognitionException {
  Shift_expressionContext _localctx=new Shift_expressionContext(_ctx,getState());
  enterRule(_localctx,68,RULE_shift_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(306);
      additive_expression();
      setState(309);
      _la=_input.LA(1);
      if (_la == 8 || _la == 40) {
{
          setState(307);
          _la=_input.LA(1);
          if (!(_la == 8 || _la == 40)) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(308);
          shift_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9952996474735604
160831,"public final Class_nameContext class_name() throws RecognitionException {
  Class_nameContext _localctx=new Class_nameContext(_ctx,getState());
  enterRule(_localctx,108,RULE_class_name);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(480);
      identifier();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Class_nameContext class_name() throws RecognitionException {
  Class_nameContext _localctx=new Class_nameContext(_ctx,getState());
  enterRule(_localctx,108,RULE_class_name);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(493);
      identifier();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9957805907172996
160832,"public final No_brackets_or_semicolonContext no_brackets_or_semicolon() throws RecognitionException {
  No_brackets_or_semicolonContext _localctx=new No_brackets_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,30,RULE_no_brackets_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(232);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 12) | (1L << 28) | (1L << 45))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_brackets_or_semicolonContext no_brackets_or_semicolon() throws RecognitionException {
  No_brackets_or_semicolonContext _localctx=new No_brackets_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,30,RULE_no_brackets_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(232);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 12) | (1L << 29) | (1L << 46))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9972862957937584
160833,"public final Function_argument_listContext function_argument_list() throws RecognitionException {
  Function_argument_listContext _localctx=new Function_argument_listContext(_ctx,getState());
  enterRule(_localctx,84,RULE_function_argument_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(387);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4)| (1L << 20)| (1L << 27)| (1L << 28)| (1L << 37)| (1L << 43)| (1L << 53))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (ALPHA_NUMERIC - 83)) | (1L << (HEX_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83))| (1L << (OCTAL_LITERAL - 83))| (1L << (FLOATING_POINT_LITERAL - 83))| (1L << (CHAR - 83))| (1L << (STRING - 83)))) != 0)) {
{
          setState(379);
          function_argument();
          setState(384);
          _errHandler.sync(this);
          _la=_input.LA(1);
          while (_la == 26) {
{
{
                setState(380);
                match(26);
                setState(381);
                function_argument();
              }
            }
            setState(386);
            _errHandler.sync(this);
            _la=_input.LA(1);
          }
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Function_argument_listContext function_argument_list() throws RecognitionException {
  Function_argument_listContext _localctx=new Function_argument_listContext(_ctx,getState());
  enterRule(_localctx,84,RULE_function_argument_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(400);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4)| (1L << 20)| (1L << 21)| (1L << 28)| (1L << 29)| (1L << 38)| (1L << 44)| (1L << 54))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (ALPHA_NUMERIC - 84)) | (1L << (HEX_LITERAL - 84)) | (1L << (DECIMAL_LITERAL - 84))| (1L << (OCTAL_LITERAL - 84))| (1L << (FLOATING_POINT_LITERAL - 84))| (1L << (CHAR - 84))| (1L << (STRING - 84)))) != 0)) {
{
          setState(392);
          function_argument();
          setState(397);
          _errHandler.sync(this);
          _la=_input.LA(1);
          while (_la == 27) {
{
{
                setState(393);
                match(27);
                setState(394);
                function_argument();
              }
            }
            setState(399);
            _errHandler.sync(this);
            _la=_input.LA(1);
          }
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9324137931034484
160834,"public final Simple_declContext simple_decl() throws RecognitionException {
  Simple_declContext _localctx=new Simple_declContext(_ctx,getState());
  enterRule(_localctx,96,RULE_simple_decl);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
{
        setState(429);
        _la=_input.LA(1);
        if (_la == TYPEDEF) {
{
            setState(428);
            match(TYPEDEF);
          }
        }
        setState(432);
        _la=_input.LA(1);
        if (_la == TEMPLATE) {
{
            setState(431);
            template_decl_start();
          }
        }
      }
      setState(434);
      var_decl();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Simple_declContext simple_decl() throws RecognitionException {
  Simple_declContext _localctx=new Simple_declContext(_ctx,getState());
  enterRule(_localctx,96,RULE_simple_decl);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
{
        setState(442);
        _la=_input.LA(1);
        if (_la == TYPEDEF) {
{
            setState(441);
            match(TYPEDEF);
          }
        }
        setState(445);
        _la=_input.LA(1);
        if (_la == TEMPLATE) {
{
            setState(444);
            template_decl_start();
          }
        }
      }
      setState(447);
      var_decl();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9890377588306942
160835,"public final PtrsContext ptrs() throws RecognitionException {
  PtrsContext _localctx=new PtrsContext(_ctx,getState());
  enterRule(_localctx,132,RULE_ptrs);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(594);
      _errHandler.sync(this);
      _la=_input.LA(1);
      do {
{
{
            setState(593);
            ptr_operator();
          }
        }
        setState(596);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
 while (_la == 1 || _la == 2);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final PtrsContext ptrs() throws RecognitionException {
  PtrsContext _localctx=new PtrsContext(_ctx,getState());
  enterRule(_localctx,132,RULE_ptrs);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(607);
      _errHandler.sync(this);
      _la=_input.LA(1);
      do {
{
{
            setState(606);
            ptr_operator();
          }
        }
        setState(609);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
 while (_la == 1 || _la == 2);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8887303851640513
160836,"public final Relational_expressionContext relational_expression() throws RecognitionException {
  Relational_expressionContext _localctx=new Relational_expressionContext(_ctx,getState());
  enterRule(_localctx,66,RULE_relational_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(300);
      shift_expression();
      setState(304);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 7) | (1L << 48)| (1L << 54))) != 0)) {
{
          setState(301);
          relational_operator();
          setState(302);
          relational_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Relational_expressionContext relational_expression() throws RecognitionException {
  Relational_expressionContext _localctx=new Relational_expressionContext(_ctx,getState());
  enterRule(_localctx,66,RULE_relational_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(300);
      shift_expression();
      setState(304);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 7) | (1L << 49)| (1L << 55))) != 0)) {
{
          setState(301);
          relational_operator();
          setState(302);
          relational_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.997610513739546
160837,"public final Unary_expressionContext unary_expression() throws RecognitionException {
  Unary_expressionContext _localctx=new Unary_expressionContext(_ctx,getState());
  enterRule(_localctx,78,RULE_unary_expression);
  try {
    setState(343);
switch (_input.LA(1)) {
case 4:
case 37:
      enterOuterAlt(_localctx,1);
{
      setState(336);
      inc_dec();
      setState(337);
      cast_expression();
    }
  break;
case 1:
case 2:
case 20:
case 27:
case 43:
case 53:
enterOuterAlt(_localctx,2);
{
setState(339);
unary_operator();
setState(340);
cast_expression();
}
break;
case 28:
case ALPHA_NUMERIC:
case HEX_LITERAL:
case DECIMAL_LITERAL:
case OCTAL_LITERAL:
case FLOATING_POINT_LITERAL:
case CHAR:
case STRING:
enterOuterAlt(_localctx,3);
{
setState(342);
postfix_expression(0);
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Unary_expressionContext unary_expression() throws RecognitionException {
  Unary_expressionContext _localctx=new Unary_expressionContext(_ctx,getState());
  enterRule(_localctx,78,RULE_unary_expression);
  int _la;
  try {
    setState(356);
switch (getInterpreter().adaptivePredict(_input,22,_ctx)) {
case 1:
      enterOuterAlt(_localctx,1);
{
      setState(336);
      inc_dec();
      setState(337);
      cast_expression();
    }
  break;
case 2:
enterOuterAlt(_localctx,2);
{
setState(339);
unary_operator();
setState(340);
cast_expression();
}
break;
case 3:
enterOuterAlt(_localctx,3);
{
setState(342);
match(21);
setState(343);
match(29);
setState(344);
type_name();
setState(348);
_errHandler.sync(this);
_la=_input.LA(1);
while (_la == 1 || _la == 2) {
{
{
setState(345);
ptr_operator();
}
}
setState(350);
_errHandler.sync(this);
_la=_input.LA(1);
}
setState(351);
match(12);
}
break;
case 4:
enterOuterAlt(_localctx,4);
{
setState(353);
match(21);
setState(354);
unary_expression();
}
break;
case 5:
enterOuterAlt(_localctx,5);
{
setState(355);
postfix_expression(0);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.2727668845315904
160838,"public final OperatorContext operator() throws RecognitionException {
  OperatorContext _localctx=new OperatorContext(_ctx,getState());
  enterRule(_localctx,16,RULE_operator);
  int _la;
  try {
    setState(204);
switch (_input.LA(1)) {
case 18:
case 41:
      enterOuterAlt(_localctx,1);
{
{
        setState(159);
        _la=_input.LA(1);
        if (!(_la == 18 || _la == 41)) {
          _errHandler.recoverInline(this);
        }
        consume();
        setState(162);
        _la=_input.LA(1);
        if (_la == 3) {
{
            setState(160);
            match(3);
            setState(161);
            match(22);
          }
        }
      }
    }
  break;
case 43:
enterOuterAlt(_localctx,2);
{
setState(164);
match(43);
}
break;
case 27:
enterOuterAlt(_localctx,3);
{
setState(165);
match(27);
}
break;
case 2:
enterOuterAlt(_localctx,4);
{
setState(166);
match(2);
}
break;
case 52:
enterOuterAlt(_localctx,5);
{
setState(167);
match(52);
}
break;
case 10:
enterOuterAlt(_localctx,6);
{
setState(168);
match(10);
}
break;
case 40:
enterOuterAlt(_localctx,7);
{
setState(169);
match(40);
}
break;
case 1:
enterOuterAlt(_localctx,8);
{
setState(170);
match(1);
}
break;
case 19:
enterOuterAlt(_localctx,9);
{
setState(171);
match(19);
}
break;
case 53:
enterOuterAlt(_localctx,10);
{
setState(172);
match(53);
}
break;
case 20:
enterOuterAlt(_localctx,11);
{
setState(173);
match(20);
}
break;
case 16:
enterOuterAlt(_localctx,12);
{
setState(174);
match(16);
}
break;
case 5:
enterOuterAlt(_localctx,13);
{
setState(175);
match(5);
}
break;
case 48:
enterOuterAlt(_localctx,14);
{
setState(176);
match(48);
}
break;
case 34:
enterOuterAlt(_localctx,15);
{
setState(177);
match(34);
}
break;
case 24:
enterOuterAlt(_localctx,16);
{
setState(178);
match(24);
}
break;
case 11:
enterOuterAlt(_localctx,17);
{
setState(179);
match(11);
}
break;
case 50:
enterOuterAlt(_localctx,18);
{
setState(180);
match(50);
}
break;
case 49:
enterOuterAlt(_localctx,19);
{
setState(181);
match(49);
}
break;
case 35:
enterOuterAlt(_localctx,20);
{
setState(182);
match(35);
}
break;
case 30:
enterOuterAlt(_localctx,21);
{
setState(183);
match(30);
}
break;
case 17:
enterOuterAlt(_localctx,22);
{
setState(184);
match(17);
}
break;
case 39:
enterOuterAlt(_localctx,23);
{
setState(185);
match(39);
}
break;
case 8:
enterOuterAlt(_localctx,24);
{
setState(186);
match(8);
}
break;
case 33:
enterOuterAlt(_localctx,25);
{
setState(187);
match(33);
}
break;
case 21:
enterOuterAlt(_localctx,26);
{
setState(188);
match(21);
}
break;
case 51:
enterOuterAlt(_localctx,27);
{
setState(189);
match(51);
}
break;
case 6:
enterOuterAlt(_localctx,28);
{
setState(190);
match(6);
}
break;
case 7:
enterOuterAlt(_localctx,29);
{
setState(191);
match(7);
}
break;
case 54:
enterOuterAlt(_localctx,30);
{
setState(192);
match(54);
}
break;
case 46:
enterOuterAlt(_localctx,31);
{
setState(193);
match(46);
}
break;
case 47:
enterOuterAlt(_localctx,32);
{
setState(194);
match(47);
}
break;
case 37:
enterOuterAlt(_localctx,33);
{
setState(195);
match(37);
}
break;
case 4:
enterOuterAlt(_localctx,34);
{
setState(196);
match(4);
}
break;
case 26:
enterOuterAlt(_localctx,35);
{
setState(197);
match(26);
}
break;
case 23:
enterOuterAlt(_localctx,36);
{
setState(198);
match(23);
}
break;
case 9:
enterOuterAlt(_localctx,37);
{
setState(199);
match(9);
}
break;
case 28:
enterOuterAlt(_localctx,38);
{
setState(200);
match(28);
setState(201);
match(12);
}
break;
case 3:
enterOuterAlt(_localctx,39);
{
setState(202);
match(3);
setState(203);
match(22);
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final OperatorContext operator() throws RecognitionException {
  OperatorContext _localctx=new OperatorContext(_ctx,getState());
  enterRule(_localctx,16,RULE_operator);
  int _la;
  try {
    setState(204);
switch (_input.LA(1)) {
case 18:
case 42:
      enterOuterAlt(_localctx,1);
{
{
        setState(159);
        _la=_input.LA(1);
        if (!(_la == 18 || _la == 42)) {
          _errHandler.recoverInline(this);
        }
        consume();
        setState(162);
        _la=_input.LA(1);
        if (_la == 3) {
{
            setState(160);
            match(3);
            setState(161);
            match(23);
          }
        }
      }
    }
  break;
case 44:
enterOuterAlt(_localctx,2);
{
setState(164);
match(44);
}
break;
case 28:
enterOuterAlt(_localctx,3);
{
setState(165);
match(28);
}
break;
case 2:
enterOuterAlt(_localctx,4);
{
setState(166);
match(2);
}
break;
case 53:
enterOuterAlt(_localctx,5);
{
setState(167);
match(53);
}
break;
case 10:
enterOuterAlt(_localctx,6);
{
setState(168);
match(10);
}
break;
case 41:
enterOuterAlt(_localctx,7);
{
setState(169);
match(41);
}
break;
case 1:
enterOuterAlt(_localctx,8);
{
setState(170);
match(1);
}
break;
case 19:
enterOuterAlt(_localctx,9);
{
setState(171);
match(19);
}
break;
case 54:
enterOuterAlt(_localctx,10);
{
setState(172);
match(54);
}
break;
case 20:
enterOuterAlt(_localctx,11);
{
setState(173);
match(20);
}
break;
case 16:
enterOuterAlt(_localctx,12);
{
setState(174);
match(16);
}
break;
case 5:
enterOuterAlt(_localctx,13);
{
setState(175);
match(5);
}
break;
case 49:
enterOuterAlt(_localctx,14);
{
setState(176);
match(49);
}
break;
case 35:
enterOuterAlt(_localctx,15);
{
setState(177);
match(35);
}
break;
case 25:
enterOuterAlt(_localctx,16);
{
setState(178);
match(25);
}
break;
case 11:
enterOuterAlt(_localctx,17);
{
setState(179);
match(11);
}
break;
case 51:
enterOuterAlt(_localctx,18);
{
setState(180);
match(51);
}
break;
case 50:
enterOuterAlt(_localctx,19);
{
setState(181);
match(50);
}
break;
case 36:
enterOuterAlt(_localctx,20);
{
setState(182);
match(36);
}
break;
case 31:
enterOuterAlt(_localctx,21);
{
setState(183);
match(31);
}
break;
case 17:
enterOuterAlt(_localctx,22);
{
setState(184);
match(17);
}
break;
case 40:
enterOuterAlt(_localctx,23);
{
setState(185);
match(40);
}
break;
case 8:
enterOuterAlt(_localctx,24);
{
setState(186);
match(8);
}
break;
case 34:
enterOuterAlt(_localctx,25);
{
setState(187);
match(34);
}
break;
case 22:
enterOuterAlt(_localctx,26);
{
setState(188);
match(22);
}
break;
case 52:
enterOuterAlt(_localctx,27);
{
setState(189);
match(52);
}
break;
case 6:
enterOuterAlt(_localctx,28);
{
setState(190);
match(6);
}
break;
case 7:
enterOuterAlt(_localctx,29);
{
setState(191);
match(7);
}
break;
case 55:
enterOuterAlt(_localctx,30);
{
setState(192);
match(55);
}
break;
case 47:
enterOuterAlt(_localctx,31);
{
setState(193);
match(47);
}
break;
case 48:
enterOuterAlt(_localctx,32);
{
setState(194);
match(48);
}
break;
case 38:
enterOuterAlt(_localctx,33);
{
setState(195);
match(38);
}
break;
case 4:
enterOuterAlt(_localctx,34);
{
setState(196);
match(4);
}
break;
case 27:
enterOuterAlt(_localctx,35);
{
setState(197);
match(27);
}
break;
case 24:
enterOuterAlt(_localctx,36);
{
setState(198);
match(24);
}
break;
case 9:
enterOuterAlt(_localctx,37);
{
setState(199);
match(9);
}
break;
case 29:
enterOuterAlt(_localctx,38);
{
setState(200);
match(29);
setState(201);
match(12);
}
break;
case 3:
enterOuterAlt(_localctx,39);
{
setState(202);
match(3);
setState(203);
match(23);
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.525311423270607
160839,"public final And_expressionContext and_expression() throws RecognitionException {
  And_expressionContext _localctx=new And_expressionContext(_ctx,getState());
  enterRule(_localctx,56,RULE_and_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(274);
      inclusive_or_expression();
      setState(277);
      _la=_input.LA(1);
      if (_la == 46) {
{
          setState(275);
          match(46);
          setState(276);
          and_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final And_expressionContext and_expression() throws RecognitionException {
  And_expressionContext _localctx=new And_expressionContext(_ctx,getState());
  enterRule(_localctx,56,RULE_and_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(274);
      inclusive_or_expression();
      setState(277);
      _la=_input.LA(1);
      if (_la == 47) {
{
          setState(275);
          match(47);
          setState(276);
          and_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9971590909090908
160840,"public final Additive_expressionContext additive_expression() throws RecognitionException {
  Additive_expressionContext _localctx=new Additive_expressionContext(_ctx,getState());
  enterRule(_localctx,70,RULE_additive_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(311);
      multiplicative_expression();
      setState(314);
      _la=_input.LA(1);
      if (_la == 27 || _la == 43) {
{
          setState(312);
          _la=_input.LA(1);
          if (!(_la == 27 || _la == 43)) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(313);
          additive_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Additive_expressionContext additive_expression() throws RecognitionException {
  Additive_expressionContext _localctx=new Additive_expressionContext(_ctx,getState());
  enterRule(_localctx,70,RULE_additive_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(311);
      multiplicative_expression();
      setState(314);
      _la=_input.LA(1);
      if (_la == 28 || _la == 44) {
{
          setState(312);
          _la=_input.LA(1);
          if (!(_la == 28 || _la == 44)) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(313);
          additive_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9954389965792474
160841,"public final Multiplicative_expressionContext multiplicative_expression() throws RecognitionException {
  Multiplicative_expressionContext _localctx=new Multiplicative_expressionContext(_ctx,getState());
  enterRule(_localctx,72,RULE_multiplicative_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(316);
      cast_expression();
      setState(319);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 52))) != 0)) {
{
          setState(317);
          _la=_input.LA(1);
          if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 52))) != 0))) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(318);
          multiplicative_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Multiplicative_expressionContext multiplicative_expression() throws RecognitionException {
  Multiplicative_expressionContext _localctx=new Multiplicative_expressionContext(_ctx,getState());
  enterRule(_localctx,72,RULE_multiplicative_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(316);
      cast_expression();
      setState(319);
      _la=_input.LA(1);
      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 53))) != 0)) {
{
          setState(317);
          _la=_input.LA(1);
          if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 10) | (1L << 53))) != 0))) {
            _errHandler.recoverInline(this);
          }
          consume();
          setState(318);
          multiplicative_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9980525803310614
160842,"public final No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets() throws RecognitionException {
  No_angle_brackets_or_bracketsContext _localctx=new No_angle_brackets_or_bracketsContext(_ctx,getState());
  enterRule(_localctx,32,RULE_no_angle_brackets_or_brackets);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(234);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 12) | (1L << 28)| (1L << 48))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_angle_brackets_or_bracketsContext no_angle_brackets_or_brackets() throws RecognitionException {
  No_angle_brackets_or_bracketsContext _localctx=new No_angle_brackets_or_bracketsContext(_ctx,getState());
  enterRule(_localctx,32,RULE_no_angle_brackets_or_brackets);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(234);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 12) | (1L << 29)| (1L << 49))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9974126778783958
160843,"public final Param_type_idContext param_type_id() throws RecognitionException {
  Param_type_idContext _localctx=new Param_type_idContext(_ctx,getState());
  enterRule(_localctx,126,RULE_param_type_id);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(569);
      _la=_input.LA(1);
      if (_la == 1 || _la == 2) {
{
          setState(568);
          ptrs();
        }
      }
      setState(578);
switch (getInterpreter().adaptivePredict(_input,61,_ctx)) {
case 1:
{
          setState(571);
          match(28);
          setState(572);
          param_type_id();
          setState(573);
          match(12);
        }
      break;
case 2:
{
      setState(576);
      _la=_input.LA(1);
      if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (25 - 25)) | (1L << (31 - 25)) | (1L << (44 - 25))| (1L << (ALPHA_NUMERIC - 25)))) != 0)) {
{
          setState(575);
          parameter_name();
        }
      }
    }
  break;
}
setState(581);
_la=_input.LA(1);
if (_la == 3 || _la == 28) {
{
  setState(580);
  type_suffix();
}
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final Param_type_idContext param_type_id() throws RecognitionException {
  Param_type_idContext _localctx=new Param_type_idContext(_ctx,getState());
  enterRule(_localctx,126,RULE_param_type_id);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(582);
      _la=_input.LA(1);
      if (_la == 1 || _la == 2) {
{
          setState(581);
          ptrs();
        }
      }
      setState(591);
switch (getInterpreter().adaptivePredict(_input,62,_ctx)) {
case 1:
{
          setState(584);
          match(29);
          setState(585);
          param_type_id();
          setState(586);
          match(12);
        }
      break;
case 2:
{
      setState(589);
      _la=_input.LA(1);
      if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (26 - 26)) | (1L << (32 - 26)) | (1L << (45 - 26))| (1L << (ALPHA_NUMERIC - 26)))) != 0)) {
{
          setState(588);
          parameter_name();
        }
      }
    }
  break;
}
setState(594);
_la=_input.LA(1);
if (_la == 3 || _la == 29) {
{
  setState(593);
  type_suffix();
}
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.8298387096774194
160844,"public final Assign_water_l2Context assign_water_l2() throws RecognitionException {
  Assign_water_l2Context _localctx=new Assign_water_l2Context(_ctx,getState());
  enterRule(_localctx,44,RULE_assign_water_l2);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(246);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22)| (1L << 28))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Assign_water_l2Context assign_water_l2() throws RecognitionException {
  Assign_water_l2Context _localctx=new Assign_water_l2Context(_ctx,getState());
  enterRule(_localctx,44,RULE_assign_water_l2);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(246);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 23)| (1L << 29))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9973368841544608
160845,"public final Base_classesContext base_classes() throws RecognitionException {
  Base_classesContext _localctx=new Base_classesContext(_ctx,getState());
  enterRule(_localctx,110,RULE_base_classes);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(482);
      match(29);
      setState(483);
      base_class();
      setState(488);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 26) {
{
{
            setState(484);
            match(26);
            setState(485);
            base_class();
          }
        }
        setState(490);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Base_classesContext base_classes() throws RecognitionException {
  Base_classesContext _localctx=new Base_classesContext(_ctx,getState());
  enterRule(_localctx,110,RULE_base_classes);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(495);
      match(30);
      setState(496);
      base_class();
      setState(501);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 27) {
{
{
            setState(497);
            match(27);
            setState(498);
            base_class();
          }
        }
        setState(503);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8016431924882629
160846,"public final Param_typeContext param_type() throws RecognitionException {
  Param_typeContext _localctx=new Param_typeContext(_ctx,getState());
  enterRule(_localctx,124,RULE_param_type);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(565);
      param_decl_specifiers();
      setState(566);
      param_type_id();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Param_typeContext param_type() throws RecognitionException {
  Param_typeContext _localctx=new Param_typeContext(_ctx,getState());
  enterRule(_localctx,124,RULE_param_type);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(578);
      param_decl_specifiers();
      setState(579);
      param_type_id();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8998109640831758
160847,"public final Or_expressionContext or_expression() throws RecognitionException {
  Or_expressionContext _localctx=new Or_expressionContext(_ctx,getState());
  enterRule(_localctx,54,RULE_or_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(269);
      and_expression();
      setState(272);
      _la=_input.LA(1);
      if (_la == 47) {
{
          setState(270);
          match(47);
          setState(271);
          or_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Or_expressionContext or_expression() throws RecognitionException {
  Or_expressionContext _localctx=new Or_expressionContext(_ctx,getState());
  enterRule(_localctx,54,RULE_or_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(269);
      and_expression();
      setState(272);
      _la=_input.LA(1);
      if (_la == 48) {
{
          setState(270);
          match(48);
          setState(271);
          or_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9970972423802612
160848,"public final Function_argumentContext function_argument() throws RecognitionException {
  Function_argumentContext _localctx=new Function_argumentContext(_ctx,getState());
  enterRule(_localctx,86,RULE_function_argument);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(389);
      assign_expr();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Function_argumentContext function_argument() throws RecognitionException {
  Function_argumentContext _localctx=new Function_argumentContext(_ctx,getState());
  enterRule(_localctx,86,RULE_function_argument);
  try {
    enterOuterAlt(_localctx,1);
{
      setState(402);
      assign_expr();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9941060903732808
160849,"public final Assign_waterContext assign_water() throws RecognitionException {
  Assign_waterContext _localctx=new Assign_waterContext(_ctx,getState());
  enterRule(_localctx,42,RULE_assign_water);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(244);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 22)| (1L << 26)| (1L << 28)| (1L << 45))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Assign_waterContext assign_water() throws RecognitionException {
  Assign_waterContext _localctx=new Assign_waterContext(_ctx,getState());
  enterRule(_localctx,42,RULE_assign_water);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(244);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 23)| (1L << 27)| (1L << 29)| (1L << 46))) != 0) || _la == OPENING_CURLY || _la == CLOSING_CURLY)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.968421052631579
160850,"public final Equality_expressionContext equality_expression() throws RecognitionException {
  Equality_expressionContext _localctx=new Equality_expressionContext(_ctx,getState());
  enterRule(_localctx,64,RULE_equality_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(294);
      relational_expression();
      setState(298);
      _la=_input.LA(1);
      if (_la == 6 || _la == 51) {
{
          setState(295);
          equality_operator();
          setState(296);
          equality_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Equality_expressionContext equality_expression() throws RecognitionException {
  Equality_expressionContext _localctx=new Equality_expressionContext(_ctx,getState());
  enterRule(_localctx,64,RULE_equality_expression);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(294);
      relational_expression();
      setState(298);
      _la=_input.LA(1);
      if (_la == 6 || _la == 52) {
{
          setState(295);
          equality_operator();
          setState(296);
          equality_expression();
        }
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9986737400530504
160851,"public final Initializer_listContext initializer_list() throws RecognitionException {
  Initializer_listContext _localctx=new Initializer_listContext(_ctx,getState());
  enterRule(_localctx,104,RULE_initializer_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(462);
      initializer();
      setState(467);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 26) {
{
{
            setState(463);
            match(26);
            setState(464);
            initializer();
          }
        }
        setState(469);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Initializer_listContext initializer_list() throws RecognitionException {
  Initializer_listContext _localctx=new Initializer_listContext(_ctx,getState());
  enterRule(_localctx,104,RULE_initializer_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(475);
      initializer();
      setState(480);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 27) {
{
{
            setState(476);
            match(27);
            setState(477);
            initializer();
          }
        }
        setState(482);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8409090909090909
160852,"public final Init_declarator_listContext init_declarator_list() throws RecognitionException {
  Init_declarator_listContext _localctx=new Init_declarator_listContext(_ctx,getState());
  enterRule(_localctx,100,RULE_init_declarator_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(445);
      init_declarator();
      setState(450);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 26) {
{
{
            setState(446);
            match(26);
            setState(447);
            init_declarator();
          }
        }
        setState(452);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
      setState(453);
      match(45);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Init_declarator_listContext init_declarator_list() throws RecognitionException {
  Init_declarator_listContext _localctx=new Init_declarator_listContext(_ctx,getState());
  enterRule(_localctx,100,RULE_init_declarator_list);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(458);
      init_declarator();
      setState(463);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while (_la == 27) {
{
{
            setState(459);
            match(27);
            setState(460);
            init_declarator();
          }
        }
        setState(465);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
      setState(466);
      match(46);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8059866962305987
160853,"public final Class_defContext class_def() throws RecognitionException {
  Class_defContext _localctx=new Class_defContext(_ctx,getState());
  enterRule(_localctx,106,RULE_class_def);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(470);
      match(CLASS_KEY);
      setState(472);
      _la=_input.LA(1);
      if (_la == ALPHA_NUMERIC) {
{
          setState(471);
          class_name();
        }
      }
      setState(475);
      _la=_input.LA(1);
      if (_la == 29) {
{
          setState(474);
          base_classes();
        }
      }
      setState(477);
      match(OPENING_CURLY);
      skipToEndOfObject();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Class_defContext class_def() throws RecognitionException {
  Class_defContext _localctx=new Class_defContext(_ctx,getState());
  enterRule(_localctx,106,RULE_class_def);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(483);
      match(CLASS_KEY);
      setState(485);
      _la=_input.LA(1);
      if (_la == ALPHA_NUMERIC) {
{
          setState(484);
          class_name();
        }
      }
      setState(488);
      _la=_input.LA(1);
      if (_la == 30) {
{
          setState(487);
          base_classes();
        }
      }
      setState(490);
      match(OPENING_CURLY);
      skipToEndOfObject();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.8795749704840614
160854,"public final No_squaresContext no_squares() throws RecognitionException {
  No_squaresContext _localctx=new No_squaresContext(_ctx,getState());
  enterRule(_localctx,36,RULE_no_squares);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(238);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 3 || _la == 22)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_squaresContext no_squares() throws RecognitionException {
  No_squaresContext _localctx=new No_squaresContext(_ctx,getState());
  enterRule(_localctx,36,RULE_no_squares);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(238);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 3 || _la == 23)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9983416252072967
160855,"public final Coarse_contentContext coarse_content() throws RecognitionException {
  Coarse_contentContext _localctx=new Coarse_contentContext(_ctx,getState());
  enterRule(_localctx,0,RULE_coarse_content);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(137);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3)| (1L << 4)| (1L << 5)| (1L << 6)| (1L << 7)| (1L << 8)| (1L << 9)| (1L << 10)| (1L << 11)| (1L << 12)| (1L << 13)| (1L << 14)| (1L << 15)| (1L << 16)| (1L << 17)| (1L << 18)| (1L << 19)| (1L << 20)| (1L << 21)| (1L << 22)| (1L << 23)| (1L << 24)| (1L << 25)| (1L << 26)| (1L << 27)| (1L << 28)| (1L << 29)| (1L << 30)| (1L << 31)| (1L << 32)| (1L << 33)| (1L << 34)| (1L << 35)| (1L << 36)| (1L << 37)| (1L << 38)| (1L << 39)| (1L << 40)| (1L << 41)| (1L << 42)| (1L << 43)| (1L << 44)| (1L << 45)| (1L << 46)| (1L << 47)| (1L << 48)| (1L << 49)| (1L << 50)| (1L << 51)| (1L << 52)| (1L << 53)| (1L << 54)| (1L << IF)| (1L << ELSE)| (1L << FOR)| (1L << WHILE)| (1L << BREAK)| (1L << CASE)| (1L << CONTINUE)| (1L << SWITCH)| (1L << DO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GOTO - 64)) | (1L << (RETURN - 64)) | (1L << (TYPEDEF - 64))| (1L << (VOID - 64))| (1L << (UNSIGNED - 64))| (1L << (SIGNED - 64))| (1L << (LONG - 64))| (1L << (CV_QUALIFIER - 64))| (1L << (VIRTUAL - 64))| (1L << (TRY - 64))| (1L << (CATCH - 64))| (1L << (THROW - 64))| (1L << (USING - 64))| (1L << (NAMESPACE - 64))| (1L << (AUTO - 64))| (1L << (REGISTER - 64))| (1L << (OPERATOR - 64))| (1L << (TEMPLATE - 64))| (1L << (CLASS_KEY - 64))| (1L << (ALPHA_NUMERIC - 64))| (1L << (OPENING_CURLY - 64))| (1L << (CLOSING_CURLY - 64))| (1L << (PRE_IF - 64))| (1L << (PRE_ELSE - 64))| (1L << (PRE_ENDIF - 64))| (1L << (HEX_LITERAL - 64))| (1L << (DECIMAL_LITERAL - 64))| (1L << (OCTAL_LITERAL - 64))| (1L << (FLOATING_POINT_LITERAL - 64))| (1L << (CHAR - 64))| (1L << (STRING - 64))| (1L << (COMMENT - 64))| (1L << (WHITESPACE - 64))| (1L << (CPPCOMMENT - 64))| (1L << (OTHER - 64))| (1L << (20 - 64))| (1L << (27 - 64))| (1L << (28 - 64))| (1L << (37 - 64))| (1L << (43 - 64))| (1L << (53 - 64))| (1L << (TYPEDEF - 64))| (1L << (VOID - 64))| (1L << (UNSIGNED - 64))| (1L << (SIGNED - 64))| (1L << (LONG - 64))| (1L << (CV_QUALIFIER - 64))| (1L << (TEMPLATE - 64))| (1L << (CLASS_KEY - 64))| (1L << (ALPHA_NUMERIC - 64))| (1L << (HEX_LITERAL - 64))| (1L << (DECIMAL_LITERAL - 64))| (1L << (OCTAL_LITERAL - 64))| (1L << (FLOATING_POINT_LITERAL - 64))| (1L << (CHAR - 64))| (1L << (STRING - 64)))) != 0)) {
{
{
            setState(134);
            coarse_content_elem();
          }
        }
        setState(139);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
      setState(140);
      match(EOF);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final Coarse_contentContext coarse_content() throws RecognitionException {
  Coarse_contentContext _localctx=new Coarse_contentContext(_ctx,getState());
  enterRule(_localctx,0,RULE_coarse_content);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(137);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 3)| (1L << 4)| (1L << 5)| (1L << 6)| (1L << 7)| (1L << 8)| (1L << 9)| (1L << 10)| (1L << 11)| (1L << 12)| (1L << 13)| (1L << 14)| (1L << 15)| (1L << 16)| (1L << 17)| (1L << 18)| (1L << 19)| (1L << 20)| (1L << 21)| (1L << 22)| (1L << 23)| (1L << 24)| (1L << 25)| (1L << 26)| (1L << 27)| (1L << 28)| (1L << 29)| (1L << 30)| (1L << 31)| (1L << 32)| (1L << 33)| (1L << 34)| (1L << 35)| (1L << 36)| (1L << 37)| (1L << 38)| (1L << 39)| (1L << 40)| (1L << 41)| (1L << 42)| (1L << 43)| (1L << 44)| (1L << 45)| (1L << 46)| (1L << 47)| (1L << 48)| (1L << 49)| (1L << 50)| (1L << 51)| (1L << 52)| (1L << 53)| (1L << 54)| (1L << 55)| (1L << IF)| (1L << ELSE)| (1L << FOR)| (1L << WHILE)| (1L << BREAK)| (1L << CASE)| (1L << CONTINUE)| (1L << SWITCH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DO - 64)) | (1L << (GOTO - 64)) | (1L << (RETURN - 64))| (1L << (TYPEDEF - 64))| (1L << (VOID - 64))| (1L << (UNSIGNED - 64))| (1L << (SIGNED - 64))| (1L << (LONG - 64))| (1L << (CV_QUALIFIER - 64))| (1L << (VIRTUAL - 64))| (1L << (TRY - 64))| (1L << (CATCH - 64))| (1L << (THROW - 64))| (1L << (USING - 64))| (1L << (NAMESPACE - 64))| (1L << (AUTO - 64))| (1L << (REGISTER - 64))| (1L << (OPERATOR - 64))| (1L << (TEMPLATE - 64))| (1L << (CLASS_KEY - 64))| (1L << (ALPHA_NUMERIC - 64))| (1L << (OPENING_CURLY - 64))| (1L << (CLOSING_CURLY - 64))| (1L << (PRE_IF - 64))| (1L << (PRE_ELSE - 64))| (1L << (PRE_ENDIF - 64))| (1L << (HEX_LITERAL - 64))| (1L << (DECIMAL_LITERAL - 64))| (1L << (OCTAL_LITERAL - 64))| (1L << (FLOATING_POINT_LITERAL - 64))| (1L << (CHAR - 64))| (1L << (STRING - 64))| (1L << (COMMENT - 64))| (1L << (WHITESPACE - 64))| (1L << (CPPCOMMENT - 64))| (1L << (OTHER - 64))| (1L << (20 - 64))| (1L << (21 - 64))| (1L << (28 - 64))| (1L << (29 - 64))| (1L << (38 - 64))| (1L << (44 - 64))| (1L << (54 - 64))| (1L << (TYPEDEF - 64))| (1L << (VOID - 64))| (1L << (UNSIGNED - 64))| (1L << (SIGNED - 64))| (1L << (LONG - 64))| (1L << (CV_QUALIFIER - 64))| (1L << (TEMPLATE - 64))| (1L << (CLASS_KEY - 64))| (1L << (ALPHA_NUMERIC - 64))| (1L << (HEX_LITERAL - 64))| (1L << (DECIMAL_LITERAL - 64))| (1L << (OCTAL_LITERAL - 64))| (1L << (FLOATING_POINT_LITERAL - 64))| (1L << (CHAR - 64))| (1L << (STRING - 64)))) != 0)) {
{
{
            setState(134);
            coarse_content_elem();
          }
        }
        setState(139);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
      setState(140);
      match(EOF);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9823874755381604
160856,"public final No_squares_or_semicolonContext no_squares_or_semicolon() throws RecognitionException {
  No_squares_or_semicolonContext _localctx=new No_squares_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,38,RULE_no_squares_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(240);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 22) | (1L << 45))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_squares_or_semicolonContext no_squares_or_semicolon() throws RecognitionException {
  No_squares_or_semicolonContext _localctx=new No_squares_or_semicolonContext(_ctx,getState());
  enterRule(_localctx,38,RULE_no_squares_or_semicolon);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(240);
      _la=_input.LA(1);
      if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 23) | (1L << 46))) != 0))) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9972640218878248
160857,"public final DeclaratorContext declarator() throws RecognitionException {
  DeclaratorContext _localctx=new DeclaratorContext(_ctx,getState());
  enterRule(_localctx,92,RULE_declarator);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(414);
      _la=_input.LA(1);
      if (_la == 1 || _la == 2) {
{
          setState(413);
          ptrs();
        }
      }
      setState(416);
      identifier();
      setState(418);
switch (getInterpreter().adaptivePredict(_input,32,_ctx)) {
case 1:
{
          setState(417);
          type_suffix();
        }
      break;
  }
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}","public final DeclaratorContext declarator() throws RecognitionException {
  DeclaratorContext _localctx=new DeclaratorContext(_ctx,getState());
  enterRule(_localctx,92,RULE_declarator);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(427);
      _la=_input.LA(1);
      if (_la == 1 || _la == 2) {
{
          setState(426);
          ptrs();
        }
      }
      setState(429);
      identifier();
      setState(431);
switch (getInterpreter().adaptivePredict(_input,33,_ctx)) {
case 1:
{
          setState(430);
          type_suffix();
        }
      break;
  }
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}",0.8638743455497382
160858,"public final No_bracketsContext no_brackets() throws RecognitionException {
  No_bracketsContext _localctx=new No_bracketsContext(_ctx,getState());
  enterRule(_localctx,26,RULE_no_brackets);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(228);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 12 || _la == 28)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}","public final No_bracketsContext no_brackets() throws RecognitionException {
  No_bracketsContext _localctx=new No_bracketsContext(_ctx,getState());
  enterRule(_localctx,26,RULE_no_brackets);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(228);
      _la=_input.LA(1);
      if (_la <= 0 || (_la == 12 || _la == 29)) {
        _errHandler.recoverInline(this);
      }
      consume();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0.9983579638752051
160859,"protected void consolidateBlockStarters(ASTNode stmt){
  while (true) {
    try {
      BlockStarter bItem=(BlockStarter)itemStack.peek();
      bItem=(BlockStarter)itemStack.pop();
      bItem.addChild(stmt);
      stmt=bItem;
    }
 catch (    ClassCastException ex) {
      break;
    }
  }
  CompoundStatement root=(CompoundStatement)itemStack.peek();
  root.addStatement(stmt);
}","protected void consolidateBlockStarters(ASTNode stmt){
  while (true) {
    try {
      BlockStarter bItem=(BlockStarter)itemStack.peek();
      bItem=(BlockStarter)itemStack.pop();
      bItem.addChild(stmt);
      stmt=bItem;
    }
 catch (    ClassCastException ex) {
      break;
    }
  }
  ASTNode root=itemStack.peek();
  root.addChild(stmt);
}",0.8326530612244898
160860,"@Override public int getChildCount(){
  if (condition == null || statement == null)   throw new RuntimeException(""String_Node_Str"");
  return 2;
}","@Override public int getChildCount(){
  if (condition == null || statement == null)   throw new RuntimeException(""String_Node_Str"");
  return super.getChildCount();
}",0.9294871794871796
160861,"@Override public void addChild(ASTNode node){
  if (node instanceof Condition)   setCondition((Condition)node);
  if (node instanceof Statement)   setStatement((Statement)node);
  super.addChild(node);
}","@Override public void addChild(ASTNode node){
  if (node instanceof Condition)   setCondition((Condition)node);
 else   if (node instanceof Statement)   setStatement((Statement)node);
  super.addChild(node);
}",0.9854368932038836
160862,"@Override public void addChild(ASTNode item){
  if (forInitStatement instanceof DummyNode)   forInitStatement=item;
 else   if (expression instanceof DummyNode)   expression=item;
  super.addChild(item);
}","@Override public void addChild(ASTNode item){
  if (forInitStatement instanceof DummyNode)   forInitStatement=item;
 else   if (expression instanceof DummyNode && condition != null)   expression=item;
  super.addChild(item);
}",0.951276102088167
160863,"private CFG convertStatement(Statement node){
  if (node instanceof CompoundStatement)   return convertCompoundStatement((CompoundStatement)node);
  if (node instanceof IfStatement)   return convertIfStatement((IfStatement)node);
  if (node instanceof WhileStatement)   return convertWhileStatement((WhileStatement)node);
  return defaultStatementConverter(node);
}","private CFG convertStatement(Statement node){
  if (node instanceof CompoundStatement)   return convertCompoundStatement((CompoundStatement)node);
  if (node instanceof IfStatement)   return convertIfStatement((IfStatement)node);
  if (node instanceof WhileStatement)   return convertWhileStatement((WhileStatement)node);
  if (node instanceof DoStatement)   return convertDoStatement((DoStatement)node);
  if (node instanceof ForStatement)   return convertForStatement((ForStatement)node);
  return defaultStatementConverter(node);
}",0.8120133481646273
160864,"@Test public void ifElse(){
  String input=""String_Node_Str"";
  CompoundStatement contentItem=(CompoundStatement)FineFuncContentTestUtil.parseAndWalk(input);
  IfStatement ifItem=(IfStatement)contentItem.getStatements().get(0);
  System.out.println(contentItem.getStatements().size());
  assertTrue(ifItem.getElseNode() != null);
  assertTrue(ifItem.getElseNode().getChild(1) != null);
  assertTrue(contentItem.getStatements().size() == 1);
}","@Test public void ifElse(){
  String input=""String_Node_Str"";
  CompoundStatement contentItem=(CompoundStatement)FineFuncContentTestUtil.parseAndWalk(input);
  IfStatement ifItem=(IfStatement)contentItem.getStatements().get(0);
  System.out.println(contentItem.getStatements().size());
  assertTrue(ifItem.getElseNode() != null);
  assertTrue(ifItem.getElseNode().getChild(0) != null);
  assertTrue(contentItem.getStatements().size() == 1);
}",0.8552036199095022
160865,"public void enterAssignment(Assign_exprContext ctx){
  ExprStatementItem exprStmt=new ExprStatementItem();
  exprStmt.expr=new AssignmentExpr();
  exprStmt.expr.initializeFromContext(ctx);
  replaceTopOfStack(exprStmt);
}","public void enterAssignment(Assign_exprContext ctx){
  if (ctx.assignment_operator().size() == 0)   return;
  ExprStatementItem exprStmt=new ExprStatementItem();
  exprStmt.expr=new AssignmentExpr();
  exprStmt.expr.initializeFromContext(ctx);
  replaceTopOfStack(exprStmt);
}",0.8893360160965795
160866,"@Override public void visit(ClassDef item){
  ClassDefToDocumentConverter.convert(item,filename,d);
}","@Override public void visit(ClassDef item){
  d=new Document();
  ClassDefToDocumentConverter.convert(item,filename,d);
}",0.90990990990991
160867,"public ScoreDoc[] find(String queryString){
  try {
    Query query=parser.parse(queryString,defaultField);
    TopDocs topDocs=searcher.search(query,maxHits);
    for (    ScoreDoc doc : topDocs.scoreDocs) {
      Document document=searcher.doc(doc.doc);
      String codeStr=document.getField(""String_Node_Str"").stringValue();
      System.out.println(codeStr);
    }
  }
 catch (  QueryNodeException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","public ScoreDoc[] find(String queryString) throws QueryNodeException, IOException {
  Query query=parser.parse(queryString,defaultField);
  TopDocs topDocs=searcher.search(query,maxHits);
  return topDocs.scoreDocs;
}",0.2455172413793103
160868,"public static void convert(FunctionDef item,String filename,Document d){
  d=new Document();
  CodeItemToDocumentConverter.addStandardFields(item,filename,d);
  d.add(new TextField(""String_Node_Str"",item.name.getCodeStr(),Field.Store.YES));
  d.add(new TextField(""String_Node_Str"",item.returnType.getCodeStr(),Field.Store.YES));
  addParameters(item,d);
  CodeItemToDocumentConverter.addContent(item.content,d);
}","public static void convert(FunctionDef item,String filename,Document d){
  CodeItemToDocumentConverter.addStandardFields(item,filename,d);
  d.add(new TextField(""String_Node_Str"",item.name.getCodeStr(),Field.Store.YES));
  d.add(new TextField(""String_Node_Str"",item.returnType.getCodeStr(),Field.Store.YES));
  addParameters(item,d);
  CodeItemToDocumentConverter.addContent(item.content,d);
}",0.9751861042183624
160869,"@Override public void startOfUnit(ParserRuleContext ctx,String filename){
}","@Override public void startOfUnit(ParserRuleContext ctx,String aFilename){
  filename=aFilename;
}",0.8554913294797688
160870,"@Override public void processItem(CodeItem item,Stack<CodeItemBuilder> itemStack){
  CodeItemToDocumentConverter converter=new CodeItemToDocumentConverter();
  converter.setFilename(""String_Node_Str"");
  item.accept(converter);
  Document doc=converter.getDocument();
  if (doc == null)   return;
  try {
    indexWriter.addDocument(doc);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void processItem(CodeItem item,Stack<CodeItemBuilder> itemStack){
  CodeItemToDocumentConverter converter=new CodeItemToDocumentConverter();
  converter.setFilename(filename);
  item.accept(converter);
  Document doc=converter.getDocument();
  if (doc == null)   return;
  try {
    indexWriter.addDocument(doc);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.968394437420986
160871,"private void emitDeclarations(ParserRuleContext decl_list,ParserRuleContext typeName){
  IdentifierDeclBuilder builder=new IdentifierDeclBuilder();
  List<IdentifierDecl> declarations=builder.getDeclarations(decl_list,typeName);
  IdentifierDeclStatement stmt=new IdentifierDeclStatement();
  Iterator<IdentifierDecl> it=declarations.iterator();
  while (it.hasNext()) {
    IdentifierDecl decl=it.next();
    stmt.addDeclaration(decl);
  }
  p.notifyObserversOfItem(stmt);
}","private void emitDeclarations(ParserRuleContext decl_list,ParserRuleContext typeName){
  IdentifierDeclBuilder builder=new IdentifierDeclBuilder();
  List<IdentifierDecl> declarations=builder.getDeclarations(decl_list,typeName);
  IdentifierDeclStatement stmt=new IdentifierDeclStatement();
  stmt.nodeTypeName=""String_Node_Str"";
  Iterator<IdentifierDecl> it=declarations.iterator();
  while (it.hasNext()) {
    IdentifierDecl decl=it.next();
    stmt.addDeclaration(decl);
  }
  p.notifyObserversOfItem(stmt);
}",0.96056622851365
160872,"private void outputDecl(CodeItem aItem,Stack<CodeItemBuilder> itemStack){
  IdentifierDecl item=(IdentifierDecl)aItem;
  int level=itemStack.size();
  item.setCodeStr(item.name.getCodeStr());
  if (item.type.completeType != ""String_Node_Str"")   item.setCodeStr(item.type.completeType + ""String_Node_Str"" + item.name.getCodeStr());
  defaultOut(item,level);
}","private void outputDecl(CodeItem aItem,Stack<CodeItemBuilder> itemStack){
  IdentifierDeclStatement stmt=(IdentifierDeclStatement)aItem;
  Iterator<IdentifierDecl> it=stmt.identifierDeclList.iterator();
  while (it.hasNext()) {
    IdentifierDecl item=it.next();
    int level=itemStack.size();
    item.setCodeStr(item.name.getCodeStr());
    if (item.type.completeType != ""String_Node_Str"")     item.setCodeStr(item.type.completeType + ""String_Node_Str"" + item.name.getCodeStr());
    defaultOut(item,level);
  }
}",0.7894736842105263
160873,"@Override public void run(){
  parser.addObserver(new LuceneIndexCreator());
  processBatch();
}","@Override public void run(){
  parser.addObserver(new CSVPrinter());
  processBatch();
}",0.8695652173913043
160874,"public static void main(String[] args){
  String queryString=""String_Node_Str"";
  String directoryName=""String_Node_Str"";
  Finder finder=new Finder(directoryName);
  finder.find(queryString);
}","public static void main(String[] args){
  CommandLineInterface cli=new CommandLineInterface();
  try {
    cli.parseCommandLine(args);
  }
 catch (  RuntimeException|ParseException e) {
    System.err.println(e.getMessage());
    cli.outputHelp();
    return;
  }
  String queryString=cli.getQuery();
  String directoryName=cli.getIndexDir();
  Finder finder=new Finder(directoryName);
  ScoreDoc[] documents;
  try {
    documents=finder.find(queryString);
  }
 catch (  QueryNodeException|IOException e) {
    System.err.println(e.getMessage());
    return;
  }
  LocationPrinter locationPrinter=new LocationPrinter(finder);
  locationPrinter.print(documents);
}",0.2097902097902098
160875,"public static void convert(ClassDef item,String filename,Document d){
  d=new Document();
  CodeItemToDocumentConverter.addStandardFields(item,filename,d);
  String className=""String_Node_Str"";
  if (item.name != null)   className=item.getName().getCodeStr();
  d.add(new TextField(""String_Node_Str"",className,Field.Store.YES));
  CodeItemToDocumentConverter.addContent(item.content,d);
}","public static void convert(ClassDef item,String filename,Document d){
  CodeItemToDocumentConverter.addStandardFields(item,filename,d);
  String className=""String_Node_Str"";
  if (item.name != null)   className=item.getName().getCodeStr();
  d.add(new TextField(""String_Node_Str"",className,Field.Store.YES));
  CodeItemToDocumentConverter.addContent(item.content,d);
}",0.9735449735449736
160876,"@Override public void run(){
  parser.addObserver(new CSVPrinter());
  processBatch();
}","@Override public void run(){
  parser.addObserver(new LuceneIndexCreator());
  processBatch();
}",0.8913043478260869
160877,"public void print(ScoreDoc[] documents){
  try {
    for (    ScoreDoc doc : documents) {
      Document document=finder.getDocumentById(doc.doc);
      String filename=document.getField(""String_Node_Str"").stringValue();
      String stringValue=document.getField(""String_Node_Str"").stringValue();
      System.out.println(filename + ""String_Node_Str"" + stringValue);
    }
  }
 catch (  IOException e) {
    System.err.println(e.getMessage());
  }
}","public void print(ScoreDoc[] documents){
  try {
    for (    ScoreDoc doc : documents) {
      Document document=finder.getDocumentById(doc.doc);
      String filename=document.getField(""String_Node_Str"").stringValue();
      String stringValue=document.getField(""String_Node_Str"").stringValue();
      String name=document.getField(""String_Node_Str"").stringValue();
      System.out.println(filename + ""String_Node_Str"" + stringValue+ ""String_Node_Str""+ name);
    }
  }
 catch (  IOException e) {
    System.err.println(e.getMessage());
  }
}",0.9045226130653268
160878,"@Override public void run(){
  parser.addObserver(new CSVPrinter());
  processBatch();
}","@Override public void run(){
  parser.addObserver(new LuceneIndexCreator());
  processBatch();
}",0.8913043478260869
160879,"private void parseClassContent(CodeSensorParser.DeclByClassContext ctx){
  restrictStreamToClassContent(ctx);
  ShallowParser shallowParser=new ShallowParser();
  shallowParser.setStack(itemStack);
  shallowParser.parseTokenStream(stream);
  stream.resetRestriction();
}","private void parseClassContent(CodeSensorParser.DeclByClassContext ctx){
  restrictStreamToClassContent(ctx);
  ShallowParser shallowParser=new ShallowParser();
  shallowParser.setStack(itemStack);
  shallowParser.parseAndWalk(stream);
  stream.resetRestriction();
}",0.9701492537313432
160880,"public void setStack(Stack<CodeItemBuilder> aStack){
  stack=aStack;
}","public void setStack(Stack<CodeItemBuilder> aStack){
  listener.setStack(aStack);
  ;
}",0.8789808917197452
160881,"public void parseAndWalk(String filename) throws IOException {
  initializeContext(filename);
  ParseTree tree=parseTokenStream(context.stream);
  walkParseTree(context.stream,tree);
}","public void parseAndWalk(TokenSubStream stream){
  initializeContext(stream);
  ParseTree tree=parseTokenStream(context.stream);
  walkParseTree(context.stream,tree);
}",0.8579545454545454
160882,"private void walkParseTree(TokenSubStream tokens,ParseTree tree){
  ShallowParseTreeListener listener=new ShallowParseTreeListener(context);
  if (stack != null)   listener.setStack(stack);
  ParseTreeWalker walker=new ParseTreeWalker();
  walker.walk(listener,tree);
}","public void walkParseTree(TokenSubStream tokens,ParseTree tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  walker.walk(listener,tree);
}",0.6779661016949152
160883,"private void initializeContext(String filename) throws IOException {
  context=new ParserContext();
  context.filename=filename;
  context.stream=createTokenStreamFromFile(context.filename);
}","private void initializeContext(TokenSubStream stream){
  context=new ParserContext();
  context.filename=""String_Node_Str"";
  context.stream=stream;
  listener.initializeContext(context);
}",0.6929133858267716
160884,"@Override public void exitDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  CodeItemBuilder builder=itemStack.pop();
  processor.processItem(builder.getItem(),itemStack);
  parseClassContent(ctx);
}","@Override public void exitDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  CodeItemBuilder builder=itemStack.pop();
  processor.processItem(builder.getItem(),itemStack);
  parseClassContent(ctx);
  emitDeclarationsForClass(ctx);
}",0.9251700680272108
160885,"@Override public void enterDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  ClassDefBuilder builder=new ClassDefBuilder();
  builder.createNew(ctx);
  itemStack.push(builder);
  emitDeclarationsForClass(ctx);
}","@Override public void enterDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  ClassDefBuilder builder=new ClassDefBuilder();
  builder.createNew(ctx);
  itemStack.push(builder);
}",0.917705735660848
160886,"public String getCodeStr(){
  if (codeStr != null)   return codeStr;
  codeStr=ParseTreeUtils.childTokenString(rootRule);
  return codeStr;
}","public String getCodeStr(){
  if (codeStr != null)   return codeStr;
  Iterator<Parameter> i=parameters.iterator();
  StringBuilder s=new StringBuilder();
  for (; i.hasNext(); ) {
    Parameter param=i.next();
    s.append(param.getCodeStr() + ""String_Node_Str"");
  }
  codeStr=s.toString();
  codeStr=codeStr.substring(0,s.length() - 3);
  return codeStr;
}",0.304
160887,"@Test public void testFunction_defStaticUnsigned(){
  String input=""String_Node_Str"";
  CodeSensorParser parser=createParser(input);
  String output=parser.function_def().toStringTree(parser);
  System.out.println(output);
  assertTrue(output.startsWith(""String_Node_Str""));
}","@Test public void testFunction_defStaticUnsigned(){
  String input=""String_Node_Str"";
  CodeSensorParser parser=createParser(input);
  String output=parser.function_def().toStringTree(parser);
  assertTrue(output.startsWith(""String_Node_Str""));
}",0.8773946360153256
160888,"@Override public void enterDeclByType(CodeSensorParser.DeclByTypeContext ctx){
  Init_declarator_listContext decl_list=ctx.init_declarator_list();
  String typeName=ctx.type_name().getText();
  emitDeclarations(decl_list,typeName);
}","@Override public void enterDeclByType(CodeSensorParser.DeclByTypeContext ctx){
  Init_declarator_listContext decl_list=ctx.init_declarator_list();
  Type_nameContext typeName=ctx.type_name();
  emitDeclarations(decl_list,typeName);
}",0.9313304721030042
160889,"@Override public void enterDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  ClassDef classDef=new ClassDef();
  classDef.create(ctx,itemStack);
  itemStack.push(classDef);
  Init_declarator_listContext decl_list=ctx.init_declarator_list();
  if (decl_list != null) {
    String typeName=""String_Node_Str"";
    Class_nameContext class_name=ctx.class_def().class_name();
    if (class_name != null)     typeName=class_name.getText();
    emitDeclarations(decl_list,typeName);
  }
}","@Override public void enterDeclByClass(CodeSensorParser.DeclByClassContext ctx){
  ClassDef classDef=new ClassDef();
  classDef.create(ctx,itemStack);
  itemStack.push(classDef);
  Init_declarator_listContext decl_list=ctx.init_declarator_list();
  if (decl_list != null) {
    Class_nameContext class_name=ctx.class_def().class_name();
    ParserRuleContext typeName=class_name;
    emitDeclarations(decl_list,typeName);
  }
}",0.6659364731653888
160890,"private void emitDeclarations(Init_declarator_listContext decl_list,String typeName){
  Init_declaratorContext decl_ctx;
  for (Iterator<ParseTree> i=decl_list.children.iterator(); i.hasNext(); ) {
    try {
      decl_ctx=(Init_declaratorContext)i.next();
    }
 catch (    java.lang.ClassCastException e) {
      continue;
    }
    IdentifierDecl idDecl=new IdentifierDecl();
    idDecl.create(decl_ctx,itemStack);
    idDecl.setName(decl_ctx.identifier(),itemStack);
    String completeType=typeName;
    if (decl_ctx.ptrs() != null)     completeType+=decl_ctx.ptrs().getText();
    if (decl_ctx.type_suffix() != null)     completeType+=decl_ctx.type_suffix().getText();
    idDecl.setType(typeName,completeType);
    nodePrinter.printItem(idDecl);
  }
}","private void emitDeclarations(Init_declarator_listContext decl_list,ParserRuleContext typeName){
  Init_declaratorContext decl_ctx;
  for (Iterator<ParseTree> i=decl_list.children.iterator(); i.hasNext(); ) {
    try {
      decl_ctx=(Init_declaratorContext)i.next();
    }
 catch (    java.lang.ClassCastException e) {
      continue;
    }
    IdentifierDecl idDecl=new IdentifierDecl();
    idDecl.create(decl_ctx,itemStack);
    idDecl.setName(decl_ctx.identifier(),itemStack);
    idDecl.setType(decl_ctx,typeName);
    nodePrinter.printItem(idDecl);
  }
}",0.7672479150871873
160891,"public void setType(String baseType,String completeType){
  type=new IdentifierDeclType();
  type.baseType=baseType;
  type.completeType=completeType;
}","public void setType(Init_declaratorContext decl_ctx,ParserRuleContext typeName){
  String baseType=""String_Node_Str"";
  if (typeName != null)   baseType=childTokenString(typeName);
  String completeType=baseType;
  if (decl_ctx.ptrs() != null)   completeType+=childTokenString(decl_ctx.ptrs());
  if (decl_ctx.type_suffix() != null)   completeType+=childTokenString(decl_ctx.type_suffix());
  type=new IdentifierDeclType();
  type.baseType=baseType;
  type.completeType=completeType;
}",0.3736263736263736
160892,"@Override public void create(ParserRuleContext aCtx,Stack<CodeItem> itemStack){
  Parameter_declContext ctx=(Parameter_declContext)aCtx;
  nodeTypeName=""String_Node_Str"";
  baseType=childTokenString(ctx.param_decl_specifiers());
  String typeName=baseType;
  Type_suffixContext type_suffix=ctx.type_suffix();
  PtrsContext ptrs=ctx.ptrs();
  if (ptrs != null)   typeName+=""String_Node_Str"" + ptrs.getText();
  if (type_suffix != null)   typeName+=""String_Node_Str"" + type_suffix.getText();
  completeType=typeName;
  super.create(ctx,itemStack);
  codeStr=typeName;
}","@Override public void create(ParserRuleContext aCtx,Stack<CodeItem> itemStack){
  Parameter_declContext ctx=(Parameter_declContext)aCtx;
  nodeTypeName=""String_Node_Str"";
  baseType=childTokenString(ctx.param_decl_specifiers());
  String typeName=baseType;
  Type_suffixContext type_suffix=ctx.type_suffix();
  PtrsContext ptrs=ctx.ptrs();
  if (ptrs != null)   typeName+=""String_Node_Str"" + childTokenString(ptrs);
  if (type_suffix != null)   typeName+=""String_Node_Str"" + childTokenString(type_suffix);
  completeType=typeName;
  super.create(ctx,itemStack);
  codeStr=typeName;
}",0.76
160893,"private void defaultOut(CodeItem item){
  String output=item.nodeTypeName + SEPARATOR;
  output+=createLocationString(item) + SEPARATOR + item.level;
  output+=SEPARATOR + escapeCodeStr(item.codeStr);
  System.out.println(output);
}","private void defaultOut(CodeItem item){
  if (item == null)   return;
  String output=item.nodeTypeName + SEPARATOR;
  output+=createLocationString(item) + SEPARATOR + item.level;
  output+=SEPARATOR + escapeCodeStr(item.codeStr);
  System.out.println(output);
}",0.9392712550607288
160894,"private void setCompleteType(Parameter_idContext parameter_id,String baseType){
  completeType=baseType;
  while (parameter_id.parameter_name() == null) {
    String newCompleteType=""String_Node_Str"";
    newCompleteType+=""String_Node_Str"";
    if (parameter_id.ptrs() != null)     newCompleteType+=childTokenString(parameter_id.ptrs()) + ""String_Node_Str"";
    if (parameter_id.type_suffix() != null)     newCompleteType+=childTokenString(parameter_id.type_suffix()) + ""String_Node_Str"";
    newCompleteType+=completeType;
    newCompleteType+=""String_Node_Str"";
    completeType=newCompleteType;
  }
}","private void setCompleteType(Parameter_idContext parameter_id,String baseType){
  completeType=baseType;
  while (parameter_id.parameter_name() == null) {
    String newCompleteType=""String_Node_Str"";
    newCompleteType+=""String_Node_Str"";
    if (parameter_id.ptrs() != null)     newCompleteType+=childTokenString(parameter_id.ptrs()) + ""String_Node_Str"";
    if (parameter_id.type_suffix() != null)     newCompleteType+=childTokenString(parameter_id.type_suffix()) + ""String_Node_Str"";
    newCompleteType+=completeType;
    newCompleteType+=""String_Node_Str"";
    completeType=newCompleteType;
    parameter_id=parameter_id.parameter_id();
  }
}",0.963258785942492
160895,"@Override public void paintThumb(Graphics g){
  final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
  Rectangle knobBounds=thumbRect;
  int w=knobBounds.width;
  int h=knobBounds.height;
  g.translate(knobBounds.x,knobBounds.y);
  if (slider.isEnabled()) {
    g.setColor(slider.getBackground());
  }
 else {
    g.setColor(slider.getBackground().darker());
  }
  Boolean paintThumbArrowShape=(Boolean)slider.getClientProperty(""String_Node_Str"");
  if ((!slider.getPaintTicks() && paintThumbArrowShape == null) || paintThumbArrowShape == Boolean.FALSE) {
    final RoundRectangle2D.Double thumb=new RoundRectangle2D.Double(0,0,w,h,JBUI.scale(6),JBUI.scale(6));
    final RoundRectangle2D.Double innerThumb=new RoundRectangle2D.Double(1,1,w - 2,h - 2,JBUI.scale(6) - 2,JBUI.scale(6) - 2);
    g.setColor(ColorUtil.fromHex(""String_Node_Str""));
    ((Graphics2D)g).fill(thumb);
    g.setColor(slider.isEnabled() ? getSelectedTrackColor() : getDisabledTickColor());
    ((Graphics2D)g).fill(innerThumb);
  }
 else   if (slider.getOrientation() == JSlider.HORIZONTAL) {
    int cw=w / 2;
    g.fillRect(1,1,w - 3,h - 1 - cw);
    Polygon p=new Polygon();
    p.addPoint(1,h - cw);
    p.addPoint(cw - 1,h - 1);
    p.addPoint(w - 2,h - 1 - cw);
    g.fillPolygon(p);
    g.setColor(getHighlightColor());
    g.drawLine(0,0,w - 2,0);
    g.drawLine(0,1,0,h - 1 - cw);
    g.drawLine(0,h - cw,cw - 1,h - 1);
    g.setColor(Color.black);
    g.drawLine(w - 1,0,w - 1,h - 2 - cw);
    g.drawLine(w - 1,h - 1 - cw,w - 1 - cw,h - 1);
    g.setColor(getShadowColor());
    g.drawLine(w - 2,1,w - 2,h - 2 - cw);
    g.drawLine(w - 2,h - 1 - cw,w - 1 - cw,h - 2);
  }
 else {
    int cw=h / 2;
    if (slider.getComponentOrientation().isLeftToRight()) {
      g.fillRect(1,1,w - 1 - cw,h - 3);
      Polygon p=new Polygon();
      p.addPoint(w - cw - 1,0);
      p.addPoint(w - 1,cw);
      p.addPoint(w - 1 - cw,h - 2);
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(0,0,0,h - 2);
      g.drawLine(1,0,w - 1 - cw,0);
      g.drawLine(w - cw - 1,0,w - 1,cw);
      g.setColor(Color.black);
      g.drawLine(0,h - 1,w - 2 - cw,h - 1);
      g.drawLine(w - 1 - cw,h - 1,w - 1,h - 1 - cw);
      g.setColor(getShadowColor());
      g.drawLine(1,h - 2,w - 2 - cw,h - 2);
      g.drawLine(w - 1 - cw,h - 2,w - 2,h - cw - 1);
    }
 else {
      g.fillRect(5,1,w - 1 - cw,h - 3);
      Polygon p=new Polygon();
      p.addPoint(cw,0);
      p.addPoint(0,cw);
      p.addPoint(cw,h - 2);
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(cw - 1,0,w - 2,0);
      g.drawLine(0,cw,cw,0);
      g.setColor(Color.black);
      g.drawLine(0,h - 1 - cw,cw,h - 1);
      g.drawLine(cw,h - 1,w - 1,h - 1);
      g.setColor(getShadowColor());
      g.drawLine(cw,h - 2,w - 2,h - 2);
      g.drawLine(w - 1,1,w - 1,h - 2);
    }
  }
  g.translate(-knobBounds.x,-knobBounds.y);
  config.restore();
}","@Override public void paintThumb(Graphics g){
  final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
  Rectangle knobBounds=thumbRect;
  int w=knobBounds.width;
  int h=knobBounds.height;
  g.translate(knobBounds.x,knobBounds.y);
  if (slider.isEnabled()) {
    g.setColor(slider.getBackground());
  }
 else {
    g.setColor(slider.getBackground().darker());
  }
  if (isPlainThumb()) {
    double r=slider.getOrientation() == JSlider.HORIZONTAL ? h : w;
    final Ellipse2D.Double thumb=new Ellipse2D.Double(0,0,r,r);
    final Ellipse2D.Double innerThumb=new Ellipse2D.Double(1,1,r - 2,r - 2);
    g.setColor(ColorUtil.fromHex(""String_Node_Str""));
    ((Graphics2D)g).fill(thumb);
    g.setColor(slider.isEnabled() ? getSelectedTrackColor() : getDisabledTickColor());
    ((Graphics2D)g).fill(innerThumb);
  }
 else   if (slider.getOrientation() == JSlider.HORIZONTAL) {
    int cw=w / 2;
    g.fillRect(1,1,w - 3,h - 1 - cw);
    Polygon p=new Polygon();
    p.addPoint(1,h - cw);
    p.addPoint(cw - 1,h - 1);
    p.addPoint(w - 2,h - 1 - cw);
    g.fillPolygon(p);
    g.setColor(getHighlightColor());
    g.drawLine(0,0,w - 2,0);
    g.drawLine(0,1,0,h - 1 - cw);
    g.drawLine(0,h - cw,cw - 1,h - 1);
    g.setColor(Color.black);
    g.drawLine(w - 1,0,w - 1,h - 2 - cw);
    g.drawLine(w - 1,h - 1 - cw,w - 1 - cw,h - 1);
    g.setColor(getShadowColor());
    g.drawLine(w - 2,1,w - 2,h - 2 - cw);
    g.drawLine(w - 2,h - 1 - cw,w - 1 - cw,h - 2);
  }
 else {
    int cw=h / 2;
    if (slider.getComponentOrientation().isLeftToRight()) {
      g.fillRect(1,1,w - 1 - cw,h - 3);
      Polygon p=new Polygon();
      p.addPoint(w - cw - 1,0);
      p.addPoint(w - 1,cw);
      p.addPoint(w - 1 - cw,h - 2);
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(0,0,0,h - 2);
      g.drawLine(1,0,w - 1 - cw,0);
      g.drawLine(w - cw - 1,0,w - 1,cw);
      g.setColor(Color.black);
      g.drawLine(0,h - 1,w - 2 - cw,h - 1);
      g.drawLine(w - 1 - cw,h - 1,w - 1,h - 1 - cw);
      g.setColor(getShadowColor());
      g.drawLine(1,h - 2,w - 2 - cw,h - 2);
      g.drawLine(w - 1 - cw,h - 2,w - 2,h - cw - 1);
    }
 else {
      g.fillRect(5,1,w - 1 - cw,h - 3);
      Polygon p=new Polygon();
      p.addPoint(cw,0);
      p.addPoint(0,cw);
      p.addPoint(cw,h - 2);
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(cw - 1,0,w - 2,0);
      g.drawLine(0,cw,cw,0);
      g.setColor(Color.black);
      g.drawLine(0,h - 1 - cw,cw,h - 1);
      g.drawLine(cw,h - 1,w - 1,h - 1);
      g.setColor(getShadowColor());
      g.drawLine(cw,h - 2,w - 2,h - 2);
      g.drawLine(w - 1,1,w - 1,h - 2);
    }
  }
  g.translate(-knobBounds.x,-knobBounds.y);
  config.restore();
}",0.8116094986807388
160896,"@Override public void paintTrack(Graphics g2d){
  Graphics2D g=(Graphics2D)g2d;
  Rectangle trackBounds=trackRect;
  final int arc=JBUI.scale(5);
  int trackSize=JBUI.scale(5);
  final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
  final Color bg=ColorUtil.fromHex(""String_Node_Str"");
  final Color selection=slider.isEnabled() ? getSelectedTrackColor() : getDisabledTickColor();
  if (slider.getOrientation() == JSlider.HORIZONTAL) {
    int cy=(trackBounds.height / 2) - trackSize / 2;
    int cw=trackBounds.width;
    final Area shape=new Area(new RoundRectangle2D.Double(0,0,cw,trackSize,arc,arc));
    g.translate(trackBounds.x,trackBounds.y + cy);
    g.setColor(bg);
    g.fill(shape);
    int x=thumbRect.x;
    shape.intersect(new Area(new Rectangle2D.Double(0,0,x,trackSize)));
    g.setColor(selection);
    g.fill(shape);
    g.translate(-trackBounds.x,-(trackBounds.y + cy));
  }
 else {
    int cx=(trackBounds.width / 2) - trackSize / 2;
    int ch=trackBounds.height;
    g.translate(trackBounds.x + cx,trackBounds.y);
    g.setColor(bg);
    g.fillRoundRect(0,0,trackSize,ch,arc,arc);
    g.translate(-(trackBounds.x + cx),-trackBounds.y);
  }
  config.restore();
}","@Override public void paintTrack(Graphics g2d){
  Graphics2D g=(Graphics2D)g2d;
  Rectangle trackBounds=trackRect;
  final int arc=JBUI.scale(6);
  int trackSize=JBUI.scale(6);
  final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
  final Color bg=getTrackBackground();
  final Color selection=slider.isEnabled() ? getSelectedTrackColor() : getDisabledTickColor();
  if (slider.getOrientation() == JSlider.HORIZONTAL) {
    int cy=(trackBounds.height / 2) - trackSize / 2;
    int cw=trackBounds.width;
    final Area shape=new Area(new RoundRectangle2D.Double(0,0,cw,trackSize,arc,arc));
    g.translate(trackBounds.x,trackBounds.y + cy);
    g.setColor(bg);
    g.fill(shape);
    int x=thumbRect.x;
    shape.intersect(new Area(new Rectangle2D.Double(0,0,x,trackSize)));
    g.setColor(selection);
    g.fill(shape);
    g.translate(-trackBounds.x,-(trackBounds.y + cy));
  }
 else {
    int cx=(trackBounds.width / 2) - trackSize / 2;
    int ch=trackBounds.height;
    g.translate(trackBounds.x + cx,trackBounds.y);
    g.setColor(bg);
    g.fillRoundRect(0,0,trackSize,ch,arc,arc);
    g.translate(-(trackBounds.x + cx),-trackBounds.y);
  }
  config.restore();
}",0.9755274261603376
160897,"@Override public List<Music> searchSimilarTitle(String title){
  return musics=entityManager.createQuery(""String_Node_Str"",Music.class).setParameter(""String_Node_Str"",""String_Node_Str"" + title + ""String_Node_Str"").getResultList();
}","@Override public List<Music> searchSimilarTitle(String title){
  return entityManager.createQuery(""String_Node_Str"",Music.class).setParameter(""String_Node_Str"",""String_Node_Str"" + title + ""String_Node_Str"").getResultList();
}",0.9846827133479212
160898,"private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String path=request.getContextPath();
  return referer.substring(referer.indexOf(path) + path.length());
}","private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=null;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String ctxPath=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(ctxPath) + ctxPath.length());
}",0.7376543209876543
160899,"private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String path=request.getContextPath();
  return referer.substring(referer.indexOf(path) + path.length());
}","private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=referer;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String path=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(path) + path.length());
}",0.7507788161993769
160900,"private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=referer;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String path=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(path) + path.length());
}","private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=null;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String ctxPath=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(ctxPath) + ctxPath.length());
}",0.9678217821782178
160901,"private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=referer;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String path=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(path) + path.length());
}","private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String path=request.getContextPath();
  return referer.substring(referer.indexOf(path) + path.length());
}",0.7507788161993769
160902,"private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=null;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String ctxPath=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(ctxPath) + ctxPath.length());
}","private String getReferer(){
  String referer=request.getHeader(""String_Node_Str"");
  checkState(referer != null,""String_Node_Str"");
  String refererPath=referer;
  try {
    refererPath=new URL(referer).getPath();
  }
 catch (  MalformedURLException e) {
    refererPath=referer;
  }
  String path=request.getContextPath();
  return refererPath.substring(refererPath.indexOf(path) + path.length());
}",0.9678217821782178
160903,"@Override public Object[] deserialize(InputStream inputStream,ControllerMethod method){
  Class<?>[] types=getTypes(method);
  if (types.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Gson gson=builder.create();
  final Parameter[] parameterNames=paramNameProvider.parametersFor(method.getMethod());
  final Object[] values=new Object[parameterNames.length];
  final Deserializee deserializee=deserializeeInstance.get();
  try {
    String content=getContentOfStream(inputStream);
    logger.debug(""String_Node_Str"",content);
    if (!isNullOrEmpty(content)) {
      JsonParser parser=new JsonParser();
      JsonElement jsonElement=parser.parse(content);
      if (jsonElement.isJsonObject()) {
        JsonObject root=jsonElement.getAsJsonObject();
        deserializee.setWithoutRoot(isWithoutRoot(parameterNames,root));
        for (        Class<? extends DeserializerConfig> option : method.getMethod().getAnnotation(Consumes.class).options()) {
          DeserializerConfig config=container.instanceFor(option);
          config.config(deserializee);
        }
        for (int i=0; i < types.length; i++) {
          Parameter parameter=parameterNames[i];
          JsonElement node=root.get(parameter.getName());
          if (deserializee.isWithoutRoot()) {
            values[i]=gson.fromJson(root,parameter.getParameterizedType());
            logger.info(""String_Node_Str"");
            break;
          }
 else           if (node != null) {
            if (node.isJsonArray()) {
              JsonArray jsonArray=node.getAsJsonArray();
              Type type=parameter.getParameterizedType();
              if (type instanceof ParameterizedType) {
                values[i]=gson.fromJson(jsonArray,type);
              }
 else {
                values[i]=gson.fromJson(jsonArray,types[i]);
              }
            }
 else {
              values[i]=gson.fromJson(node,types[i]);
            }
          }
        }
      }
 else       if (jsonElement.isJsonArray()) {
        if ((parameterNames.length != 1) || (!(parameterNames[0].getParameterizedType() instanceof ParameterizedType)))         throw new IllegalArgumentException(""String_Node_Str"");
        JsonArray jsonArray=jsonElement.getAsJsonArray();
        values[0]=gson.fromJson(jsonArray,parameterNames[0].getParameterizedType());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new ResultException(""String_Node_Str"",e);
  }
  logger.debug(""String_Node_Str"",(Object)values);
  return values;
}","@Override public Object[] deserialize(InputStream inputStream,ControllerMethod method){
  Class<?>[] types=getTypes(method);
  if (types.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Gson gson=builder.create();
  final Parameter[] parameterNames=paramNameProvider.parametersFor(method.getMethod());
  final Object[] values=new Object[parameterNames.length];
  final Deserializee deserializee=deserializeeInstance.get();
  try {
    String content=getContentOfStream(inputStream);
    logger.debug(""String_Node_Str"",content);
    if (!isNullOrEmpty(content)) {
      JsonParser parser=new JsonParser();
      JsonElement jsonElement=parser.parse(content);
      if (jsonElement.isJsonObject()) {
        JsonObject root=jsonElement.getAsJsonObject();
        deserializee.setWithoutRoot(isWithoutRoot(parameterNames,root));
        for (        Class<? extends DeserializerConfig> option : method.getMethod().getAnnotation(Consumes.class).options()) {
          DeserializerConfig config=container.instanceFor(option);
          config.config(deserializee);
        }
        for (int i=0; i < types.length; i++) {
          Parameter parameter=parameterNames[i];
          JsonElement node=root.get(parameter.getName());
          if (deserializee.isWithoutRoot()) {
            values[i]=gson.fromJson(root,fallbackTo(parameter.getParameterizedType(),types[i]));
            logger.info(""String_Node_Str"");
            break;
          }
 else           if (node != null) {
            if (node.isJsonArray()) {
              JsonArray jsonArray=node.getAsJsonArray();
              Type type=parameter.getParameterizedType();
              if (type instanceof ParameterizedType) {
                values[i]=gson.fromJson(jsonArray,type);
              }
 else {
                values[i]=gson.fromJson(jsonArray,types[i]);
              }
            }
 else {
              values[i]=gson.fromJson(node,types[i]);
            }
          }
        }
      }
 else       if (jsonElement.isJsonArray()) {
        if ((parameterNames.length != 1) || (!(parameterNames[0].getParameterizedType() instanceof ParameterizedType)))         throw new IllegalArgumentException(""String_Node_Str"");
        JsonArray jsonArray=jsonElement.getAsJsonArray();
        values[0]=gson.fromJson(jsonArray,parameterNames[0].getParameterizedType());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new ResultException(""String_Node_Str"",e);
  }
  logger.debug(""String_Node_Str"",(Object)values);
  return values;
}",0.9959638669998078
160904,"/** 
 * This implementation don't actually use request dispatcher for the forwarding. It runs forwarding logic, and renders its <b>default</b> view.
 */
@Override public <T>T forwardTo(final Class<T> type){
  return proxifier.proxify(type,new MethodInvocation<T>(){
    @Override public Object intercept(    T proxy,    Method method,    Object[] args,    SuperMethod superMethod){
      try {
        logger.debug(""String_Node_Str"",method);
        ControllerMethod old=methodInfo.getControllerMethod();
        methodInfo.setControllerMethod(DefaultControllerMethod.instanceFor(type,method));
        Object methodResult=method.invoke(container.instanceFor(type),args);
        methodInfo.setControllerMethod(old);
        Type returnType=method.getGenericReturnType();
        if (!(returnType == void.class)) {
          request.setAttribute(extractor.nameFor(returnType),methodResult);
        }
        if (response.isCommitted() || result.used()) {
          logger.debug(""String_Node_Str"");
          return null;
        }
        String path=resolver.pathFor(DefaultControllerMethod.instanceFor(type,method));
        logger.debug(""String_Node_Str"",path);
        request.getRequestDispatcher(path).forward(request,response);
        return null;
      }
 catch (      InvocationTargetException e) {
        propagateIfPossible(e.getCause());
        throw new ProxyInvocationException(e);
      }
catch (      Exception e) {
        throw new ProxyInvocationException(e);
      }
    }
  }
);
}","/** 
 * This implementation don't actually use request dispatcher for the forwarding. It runs forwarding logic, and renders its <b>default</b> view.
 */
@Override public <T>T forwardTo(final Class<T> type){
  return proxifier.proxify(type,new MethodInvocation<T>(){
    @Override public Object intercept(    T proxy,    Method method,    Object[] args,    SuperMethod superMethod){
      try {
        logger.debug(""String_Node_Str"",method);
        ControllerMethod old=methodInfo.getControllerMethod();
        methodInfo.setControllerMethod(DefaultControllerMethod.instanceFor(type,method));
        Object methodResult=method.invoke(container.instanceFor(type),args);
        methodInfo.setControllerMethod(old);
        Type returnType=method.getGenericReturnType();
        if (!(returnType == void.class)) {
          request.setAttribute(extractor.nameFor(returnType),methodResult);
        }
        if (response.isCommitted()) {
          logger.debug(""String_Node_Str"");
          return null;
        }
        String path=resolver.pathFor(DefaultControllerMethod.instanceFor(type,method));
        logger.debug(""String_Node_Str"",path);
        request.getRequestDispatcher(path).forward(request,response);
        return null;
      }
 catch (      InvocationTargetException e) {
        propagateIfPossible(e.getCause());
        throw new ProxyInvocationException(e);
      }
catch (      Exception e) {
        throw new ProxyInvocationException(e);
      }
    }
  }
);
}",0.9943200801871032
160905,"@Inject public DefaultLogicResult(Proxifier proxifier,Router router,MutableRequest request,HttpServletResponse response,Container container,PathResolver resolver,TypeNameExtractor extractor,FlashScope flash,MethodInfo methodInfo,Result result){
  this.proxifier=proxifier;
  this.result=result;
  this.response=unproxifyIfPossible(response);
  this.request=unproxifyIfPossible(request);
  this.router=router;
  this.container=container;
  this.resolver=resolver;
  this.extractor=extractor;
  this.flash=flash;
  this.methodInfo=methodInfo;
}","@Inject public DefaultLogicResult(Proxifier proxifier,Router router,MutableRequest request,HttpServletResponse response,Container container,PathResolver resolver,TypeNameExtractor extractor,FlashScope flash,MethodInfo methodInfo){
  this.proxifier=proxifier;
  this.response=unproxifyIfPossible(response);
  this.request=unproxifyIfPossible(request);
  this.router=router;
  this.container=container;
  this.resolver=resolver;
  this.extractor=extractor;
  this.flash=flash;
  this.methodInfo=methodInfo;
}",0.965648854961832
160906,"@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  proxifier=new JavassistProxifier();
  methodInfo=new MethodInfo(new ParanamerNameProvider());
  this.logicResult=new DefaultLogicResult(proxifier,router,request,response,container,resolver,extractor,flash,methodInfo,result);
}","@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  proxifier=new JavassistProxifier();
  methodInfo=new MethodInfo(new ParanamerNameProvider());
  this.logicResult=new DefaultLogicResult(proxifier,router,request,response,container,resolver,extractor,flash,methodInfo);
}",0.9879931389365352
160907,"/** 
 * Creates an instance for build a   {@link ZipDownload}.<br> <code> List<Path> listOfFiles = [...]; Download download = DownloadBuilder.of(listOfFiles) .withFileName(""resume.zip"") .build(); </code>
 * @param files List of input files
 * @throws NullPointerException If the {@code input} argument is {@code null}
 */
public static ZipDownloadBuilder of(List<Path> files){
  return new ZipDownloadBuilder(files);
}","/** 
 * Creates an instance for build a   {@link ZipDownload}.<br>
 * @param files List of input files
 * @throws NullPointerException If the {@code input} argument is {@code null}
 */
public static ZipDownloadBuilder of(List<Path> files){
  return new ZipDownloadBuilder(files);
}",0.2718168812589413
160908,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T of(T controller){
  return (T)of(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T of(T controller){
  return (T)of((Class<T>)extractRawTypeIfPossible(controller.getClass()));
}",0.9446254071661238
160909,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T redirectTo(T controller){
  return (T)redirectTo(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T redirectTo(T controller){
  return (T)redirectTo((Class<T>)extractRawTypeIfPossible(controller.getClass()));
}",0.9498525073746312
160910,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T forwardTo(T controller){
  return (T)forwardTo(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T forwardTo(T controller){
  return (T)forwardTo((Class<T>)extractRawTypeIfPossible(controller.getClass()));
}",0.9492537313432836
160911,"protected String extractControllerFromName(String baseName){
  baseName=lowerFirstCharacter(baseName);
  if (baseName.endsWith(""String_Node_Str"")) {
    return baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  return baseName;
}","protected String extractControllerFromName(String baseName){
  baseName=getFilteredControllerBaseName(lowerFirstCharacter(baseName));
  if (baseName.endsWith(""String_Node_Str"")) {
    return baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  return baseName;
}",0.940952380952381
160912,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T of(T controller){
  return (T)of(controller.getClass());
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T of(T controller){
  return (T)of(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}",0.8634686346863468
160913,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T redirectTo(T controller){
  return (T)redirectTo(controller.getClass());
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T redirectTo(T controller){
  return (T)redirectTo(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}",0.8778877887788779
160914,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T forwardTo(T controller){
  return (T)forwardTo(controller.getClass());
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T forwardTo(T controller){
  return (T)forwardTo(CDIProxies.extractRawTypeIfPossible(controller.getClass()));
}",0.8762541806020067
160915,"protected String extractControllerFromName(String baseName){
  baseName=getFilteredControllerBaseName(lowerFirstCharacter(baseName));
  if (baseName.endsWith(""String_Node_Str"")) {
    return baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  return baseName;
}","protected String extractControllerFromName(String baseName){
  baseName=lowerFirstCharacter(baseName);
  if (baseName.endsWith(""String_Node_Str"")) {
    return baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  return baseName;
}",0.940952380952381
160916,"@Inject public MockRequestHandlerObserver(UrlToControllerTranslator translator,ControllerNotFoundHandler controllerNotFoundHandler,MethodNotAllowedHandler methodNotAllowedHandler,Event<ControllerFound> controllerFoundEvent,Event<RequestSucceded> endRequestEvent,InterceptorStack interceptorStack,Result result){
  super(translator,controllerNotFoundHandler,methodNotAllowedHandler,controllerFoundEvent,endRequestEvent,interceptorStack,result);
}","@Inject public MockRequestHandlerObserver(UrlToControllerTranslator translator,ControllerNotFoundHandler controllerNotFoundHandler,MethodNotAllowedHandler methodNotAllowedHandler,Event<ControllerFound> controllerFoundEvent,Event<RequestSucceded> endRequestEvent,InterceptorStack interceptorStack,InvalidInputHandler invalidInputHandler){
  super(translator,controllerNotFoundHandler,methodNotAllowedHandler,controllerFoundEvent,endRequestEvent,interceptorStack,invalidInputHandler);
}",0.9171151776103336
160917,"@Test public void shouldHandle400() throws Exception {
  when(translator.translate(webRequest)).thenThrow(new InvalidInputException(""String_Node_Str""));
  observer.handle(requestStarted);
  assertTrue(result.used());
  verify(interceptorStack,never()).start();
}","@Test public void shouldHandle400() throws Exception {
  InvalidInputException invalidInputException=new InvalidInputException(""String_Node_Str"");
  when(translator.translate(webRequest)).thenThrow(invalidInputException);
  observer.handle(requestStarted);
  verify(interceptorStack,never()).start();
  verify(invalidInputHandler).deny(invalidInputException);
}",0.5232744783306581
160918,"@Before public void config(){
  MockitoAnnotations.initMocks(this);
  requestStarted=new VRaptorRequestStarted(chain,webRequest,webResponse);
  observer=new RequestHandlerObserver(translator,notFoundHandler,methodNotAllowedHandler,controllerFoundEvent,requestSucceededEvent,interceptorStack,result);
}","@Before public void config(){
  MockitoAnnotations.initMocks(this);
  requestStarted=new VRaptorRequestStarted(chain,webRequest,webResponse);
  observer=new RequestHandlerObserver(translator,notFoundHandler,methodNotAllowedHandler,controllerFoundEvent,requestSucceededEvent,interceptorStack,invalidInputHandler);
}",0.959349593495935
160919,"@Override public <T extends View>T use(Class<T> view){
  responseCommitted=true;
  return container.instanceFor(view);
}","@Override public <T extends View>T use(Class<T> view){
  if (view.isAssignableFrom(Results.json()) && validator.hasErrors()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  responseCommitted=true;
  return container.instanceFor(view);
}",0.5333333333333333
160920,"@Inject public DefaultResult(HttpServletRequest request,Container container,ExceptionMapper exceptions,TypeNameExtractor extractor){
  this.request=request;
  this.container=container;
  this.extractor=extractor;
  this.includedAttributes=new HashMap<>();
  this.exceptions=exceptions;
}","@Inject public DefaultResult(HttpServletRequest request,Container container,ExceptionMapper exceptions,TypeNameExtractor extractor,Validator validator){
  this.request=request;
  this.container=container;
  this.extractor=extractor;
  this.includedAttributes=new HashMap<>();
  this.exceptions=exceptions;
  this.validator=validator;
}",0.9228295819935692
160921,"@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  result=new DefaultResult(request,container,null,extractor);
}","@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  validator=new MockValidator();
  result=new DefaultResult(request,container,null,extractor,validator);
}",0.858085808580858
160922,"@Test public void shouldTrimValueWhenEvaluatingSupport() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(DEVELOPMENT);
  assertThat(defaultEnvironment.supports(""String_Node_Str""),is(true));
}","@Test public void shouldTrimValueWhenEvaluatingSupport() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(EnvironmentType.DEVELOPMENT);
  assertThat(defaultEnvironment.supports(""String_Node_Str""),is(true));
}",0.965665236051502
160923,"@Test public void shouldGetDefaultValueIfTheValueIsntSet() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(development());
  String value=defaultEnvironment.get(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
}","@Test public void shouldGetDefaultValueIfTheValueIsntSet() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(EnvironmentType.DEVELOPMENT);
  String value=defaultEnvironment.get(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
}",0.9326241134751772
160924,"@Test public void shouldGetValueIfIsSetInProperties() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(development());
  String value=defaultEnvironment.get(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
}","@Test public void shouldGetValueIfIsSetInProperties() throws Exception {
  DefaultEnvironment defaultEnvironment=new DefaultEnvironment(EnvironmentType.DEVELOPMENT);
  String value=defaultEnvironment.get(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
}",0.927797833935018
160925,"@Override public Validator check(boolean condition,Message message){
  if (!condition) {
    errors.add(message);
  }
  return this;
}","@Override public Validator check(boolean condition,Message message){
  message.setBundle(bundle);
  if (!condition) {
    errors.add(message);
  }
  return this;
}",0.9023569023569024
160926,"@Before public void setup(){
  mimeTypeToFormat=new DefaultAcceptHeaderToFormat();
}","@Before public void setup(){
  CacheStore<String,String> cache=new LRUCacheStore<>(100);
  mimeTypeToFormat=new DefaultAcceptHeaderToFormat(cache);
}",0.721030042918455
160927,"@Override public void intercept(InterceptorStack stack,ControllerMethod method,Object controllerInstance) throws InterceptionException {
  if (session.getAttribute(FLASH_INCLUDED_PARAMETERS) != null) {
    session.removeAttribute(FLASH_INCLUDED_PARAMETERS);
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> parameters=(Map<String,Object>)session.getAttribute(FLASH_INCLUDED_PARAMETERS);
    for (    Entry<String,Object> parameter : parameters.entrySet()) {
      result.include(parameter.getKey(),parameter.getValue());
    }
  }
  response.addRedirectListener(new RedirectListener(){
    @Override public void beforeRedirect(){
      Map<String,Object> included=result.included();
      if (!included.isEmpty()) {
        try {
          session.setAttribute(FLASH_INCLUDED_PARAMETERS,included);
        }
 catch (        IllegalStateException e) {
          LOGGER.info(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
  }
);
  stack.next(method,controllerInstance);
}","@Override public void intercept(InterceptorStack stack,ControllerMethod method,Object controllerInstance) throws InterceptionException {
  if (session.getAttribute(FLASH_INCLUDED_PARAMETERS) != null) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> parameters=(Map<String,Object>)session.getAttribute(FLASH_INCLUDED_PARAMETERS);
    session.removeAttribute(FLASH_INCLUDED_PARAMETERS);
    for (    Entry<String,Object> parameter : parameters.entrySet()) {
      result.include(parameter.getKey(),parameter.getValue());
    }
  }
  response.addRedirectListener(new RedirectListener(){
    @Override public void beforeRedirect(){
      Map<String,Object> included=result.included();
      if (!included.isEmpty()) {
        try {
          session.setAttribute(FLASH_INCLUDED_PARAMETERS,included);
        }
 catch (        IllegalStateException e) {
          LOGGER.info(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
  }
);
  stack.next(method,controllerInstance);
}",0.8896690070210632
160928,"public void updateHosts(List<Host> hosts){
  ThreadPreconditions.checkOnMainThread();
  mHosts=hosts;
  notifyDataSetChanged();
}","public void updateHosts(List<Host> hosts){
  ThreadPreconditions.checkOnMainThread();
  if (hosts == null) {
    mHosts=Collections.emptyList();
  }
 else {
    mHosts=hosts;
  }
  notifyDataSetChanged();
}",0.7343283582089553
160929,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fragmentMngr=getSupportFragmentManager();
  mFragment=(ListHostsFragment)fragmentMngr.findFragmentByTag(ListHostsFragment.FRAGMENT_TAG);
  if (mFragment == null) {
    mFragment=new ListHostsFragment();
    FragmentTransaction ft=fragmentMngr.beginTransaction();
    ft.add(android.R.id.content,mFragment,ListHostsFragment.FRAGMENT_TAG);
    ft.commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fragmentMngr=getSupportFragmentManager();
  mFragment=(ListHostsFragment)fragmentMngr.findFragmentByTag(ListHostsFragment.TAG);
  if (mFragment == null) {
    mFragment=new ListHostsFragment();
    FragmentTransaction ft=fragmentMngr.beginTransaction();
    ft.add(android.R.id.content,mFragment,ListHostsFragment.TAG);
    ft.commit();
  }
}",0.9808102345415778
160930,"@Subscribe public void onHostAdded(AddedHostEvent event){
  refreshHosts(false);
}","@Subscribe public void onHostAdded(AddedHostEvent event){
  Log.d(TAG,""String_Node_Str"");
  refreshHosts(false);
}",0.8367346938775511
160931,"@Override public void onPause(){
  mMode=null;
  super.onPause();
}","@Override public void onPause(){
  if (mMode != null) {
    mMode.finish();
  }
  super.onPause();
}",0.8023952095808383
160932,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  updateActionBar();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  int nbCheckedElements=0;
  SparseBooleanArray checked=mListView.getCheckedItemPositions();
  for (int i=0; i < checked.size(); i++) {
    if (checked.valueAt(i)) {
      nbCheckedElements++;
    }
  }
  if (nbCheckedElements > 0) {
    if (mMode == null) {
      mMode=mActivity.startActionMode(new ModeCallback());
    }
    mMode.setTitle(String.format(Locale.US,getString(R.string.add_host_menu_selected),nbCheckedElements));
  }
 else {
    if (mMode != null) {
      mMode.finish();
    }
  }
}",0.268188302425107
160933,"@Override public void onResume(){
  super.onResume();
  updateActionBar();
}","@Override public void onResume(){
  super.onResume();
}",0.8396946564885496
160934,"@Subscribe public void onRefreshHosts(RefreshHostsEvent hosts){
  mAdapter.updateHosts(hosts.get());
  mListView.setAdapter(mAdapter);
}","@Subscribe public void onRefreshHosts(RefreshHostsEvent hosts){
  Log.d(TAG,""String_Node_Str"");
  mAdapter.updateHosts(hosts.get());
  mListView.setAdapter(mAdapter);
}",0.8947368421052632
160935,"@Subscribe public void onHostsRefreshed(RefreshHostsEvent hosts){
  Log.d(TAG,""String_Node_Str"");
  mAdapter.updateHosts(hosts.get());
  mListView.setAdapter(mAdapter);
}","@Subscribe public void onHostsRefreshed(RefreshHostsEvent hosts){
  Log.d(TAG,""String_Node_Str"");
  finishActionMode();
  mAdapter.updateHosts(hosts.get());
  mListView.setAdapter(mAdapter);
}",0.9392265193370166
160936,"@Override public void onPause(){
  if (mMode != null) {
    mMode.finish();
  }
  super.onPause();
}","@Override public void onPause(){
  finishActionMode();
  super.onPause();
}",0.7428571428571429
160937,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  int nbCheckedElements=0;
  SparseBooleanArray checked=mListView.getCheckedItemPositions();
  for (int i=0; i < checked.size(); i++) {
    if (checked.valueAt(i)) {
      nbCheckedElements++;
    }
  }
  if (nbCheckedElements > 0) {
    if (mMode == null) {
      mMode=mActivity.startActionMode(new ModeCallback());
    }
    if (mEditMenuItem != null) {
      mEditMenuItem.setVisible(nbCheckedElements == 1);
    }
    mMode.setTitle(String.format(Locale.US,getString(R.string.list_menu_selected),nbCheckedElements));
  }
 else {
    if (mMode != null) {
      mMode.finish();
    }
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  int nbCheckedElements=0;
  SparseBooleanArray checked=mListView.getCheckedItemPositions();
  for (int i=0; i < checked.size(); i++) {
    if (checked.valueAt(i)) {
      nbCheckedElements++;
    }
  }
  if (nbCheckedElements > 0) {
    if (mMode == null) {
      mMode=mActivity.startActionMode(new ModeCallback());
    }
    if (mEditMenuItem != null) {
      mEditMenuItem.setVisible(nbCheckedElements == 1);
    }
    mMode.setTitle(String.format(Locale.US,getString(R.string.list_menu_selected),nbCheckedElements));
  }
 else {
    finishActionMode();
  }
}",0.9497374343585896
160938,"public OAuth2(final OAuthConfig config,final Map<String,String> endpoints){
  oauth=new OAuthConsumer(config);
  this.endpoints=endpoints;
  permission=Permission.DEFAULT;
  providerId=config.getId();
  accessTokenParameterName=Constants.ACCESS_TOKEN_PARAMETER_NAME;
}","public OAuth2(final OAuthConfig config,final Map<String,String> endpoints){
  oauth=new OAuthConsumer(config);
  this.endpoints=endpoints;
  permission=Permission.DEFAULT;
  providerId=config.getId();
  accessTokenParameterName=Constants.ACCESS_TOKEN_PARAMETER_NAME;
  customProperties=config.getCustomProperties();
}",0.9162393162393162
160939,"@Override public AccessGrant verifyResponse(final Map<String,String> requestParams,final String methodType) throws Exception {
  LOG.info(""String_Node_Str"");
  if (requestParams.get(""String_Node_Str"") != null) {
    LOG.debug(""String_Node_Str"");
    String accessToken=requestParams.get(""String_Node_Str"");
    Integer expires=null;
    if (requestParams.get(Constants.EXPIRES) != null) {
      expires=new Integer(requestParams.get(Constants.EXPIRES));
    }
    accessGrant=new AccessGrant();
    accessGrant.setKey(accessToken);
    accessGrant.setAttribute(Constants.EXPIRES,expires);
    if (permission != null) {
      accessGrant.setPermission(permission);
    }
 else {
      accessGrant.setPermission(Permission.ALL);
    }
    accessGrant.setProviderId(providerId);
    LOG.debug(accessGrant);
    return accessGrant;
  }
  if (!providerState) {
    throw new ProviderStateException();
  }
  String code=requestParams.get(""String_Node_Str"");
  if (code == null || code.length() == 0) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  LOG.debug(""String_Node_Str"" + code);
  String acode;
  String accessToken=null;
  try {
    acode=URLEncoder.encode(code,""String_Node_Str"");
  }
 catch (  Exception e) {
    acode=code;
  }
  StringBuffer sb=new StringBuffer();
  if (MethodType.GET.toString().equals(methodType)) {
    sb.append(endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL));
    char separator=endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL).indexOf('?') == -1 ? '?' : '&';
    sb.append(separator);
  }
  sb.append(""String_Node_Str"").append(oauth.getConfig().get_consumerKey());
  sb.append(""String_Node_Str"").append(this.successUrl);
  sb.append(""String_Node_Str"").append(oauth.getConfig().get_consumerSecret());
  sb.append(""String_Node_Str"").append(acode);
  sb.append(""String_Node_Str"");
  Response response;
  String authURL=null;
  try {
    if (MethodType.GET.toString().equals(methodType)) {
      authURL=sb.toString();
      LOG.debug(""String_Node_Str"" + authURL);
      response=HttpUtil.doHttpRequest(authURL,methodType,null,null);
    }
 else {
      authURL=endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL);
      LOG.debug(""String_Node_Str"" + authURL);
      response=HttpUtil.doHttpRequest(authURL,methodType,sb.toString(),null);
    }
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + authURL,e);
  }
  String result;
  try {
    result=response.getResponseBodyAsString(Constants.ENCODING);
  }
 catch (  IOException io) {
    throw new SocialAuthException(io);
  }
  Map<String,Object> attributes=new HashMap<String,Object>();
  Integer expires=null;
  if (result.indexOf(""String_Node_Str"") < 0) {
    String[] pairs=result.split(""String_Node_Str"");
    for (    String pair : pairs) {
      String[] kv=pair.split(""String_Node_Str"");
      if (kv.length != 2) {
        throw new SocialAuthException(""String_Node_Str"" + authURL);
      }
 else {
        if (kv[0].equals(""String_Node_Str"")) {
          accessToken=kv[1];
        }
 else         if (kv[0].equals(""String_Node_Str"")) {
          expires=Integer.valueOf(kv[1]);
        }
 else         if (kv[0].equals(""String_Node_Str"")) {
          expires=Integer.valueOf(kv[1]);
        }
 else {
          attributes.put(kv[0],kv[1]);
        }
      }
    }
  }
 else {
    try {
      JSONObject jObj=new JSONObject(result);
      if (jObj.has(""String_Node_Str"")) {
        accessToken=jObj.getString(""String_Node_Str"");
      }
      if (jObj.has(""String_Node_Str"") && jObj.opt(""String_Node_Str"") != null) {
        String str=jObj.get(""String_Node_Str"").toString();
        if (str != null && str.length() > 0) {
          expires=Integer.valueOf(str);
        }
      }
      if (accessToken != null) {
        Iterator<String> keyItr=jObj.keys();
        while (keyItr.hasNext()) {
          String key=keyItr.next();
          if (!""String_Node_Str"".equals(key) && !""String_Node_Str"".equals(key) && jObj.opt(key) != null) {
            attributes.put(key,jObj.opt(key).toString());
          }
        }
      }
    }
 catch (    JSONException je) {
      throw new SocialAuthException(""String_Node_Str"" + authURL);
    }
  }
  LOG.debug(""String_Node_Str"" + accessToken);
  LOG.debug(""String_Node_Str"" + expires);
  if (accessToken != null) {
    accessGrant=new AccessGrant();
    accessGrant.setKey(accessToken);
    accessGrant.setAttribute(Constants.EXPIRES,expires);
    if (attributes.size() > 0) {
      accessGrant.setAttributes(attributes);
    }
    if (permission != null) {
      accessGrant.setPermission(permission);
    }
 else {
      accessGrant.setPermission(Permission.ALL);
    }
    accessGrant.setProviderId(providerId);
  }
 else {
    throw new SocialAuthException(""String_Node_Str"" + authURL);
  }
  return accessGrant;
}","@Override public AccessGrant verifyResponse(final Map<String,String> requestParams,final String methodType) throws Exception {
  LOG.info(""String_Node_Str"");
  if (requestParams.get(""String_Node_Str"") != null) {
    LOG.debug(""String_Node_Str"");
    String accessToken=requestParams.get(""String_Node_Str"");
    Integer expires=null;
    if (requestParams.get(Constants.EXPIRES) != null) {
      expires=new Integer(requestParams.get(Constants.EXPIRES));
    }
    accessGrant=new AccessGrant();
    accessGrant.setKey(accessToken);
    accessGrant.setAttribute(Constants.EXPIRES,expires);
    if (permission != null) {
      accessGrant.setPermission(permission);
    }
 else {
      accessGrant.setPermission(Permission.ALL);
    }
    accessGrant.setProviderId(providerId);
    LOG.debug(accessGrant);
    return accessGrant;
  }
  if (!providerState) {
    throw new ProviderStateException();
  }
  String code=requestParams.get(""String_Node_Str"");
  if (code == null || code.length() == 0) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  LOG.debug(""String_Node_Str"" + code);
  String acode;
  String accessToken=null;
  try {
    acode=URLEncoder.encode(code,""String_Node_Str"");
  }
 catch (  Exception e) {
    acode=code;
  }
  StringBuffer sb=new StringBuffer();
  if (MethodType.GET.toString().equals(methodType)) {
    sb.append(endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL));
    char separator=endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL).indexOf('?') == -1 ? '?' : '&';
    sb.append(separator);
  }
  sb.append(""String_Node_Str"").append(oauth.getConfig().get_consumerKey());
  sb.append(""String_Node_Str"").append(this.successUrl);
  sb.append(""String_Node_Str"").append(oauth.getConfig().get_consumerSecret());
  sb.append(""String_Node_Str"").append(acode);
  sb.append(""String_Node_Str"");
  if (customProperties != null) {
    for (    String key : customProperties.keySet()) {
      sb.append(""String_Node_Str"");
      sb.append(key);
      sb.append(""String_Node_Str"");
      sb.append(customProperties.get(key));
    }
  }
  LOG.debug(""String_Node_Str"" + sb.toString());
  Response response;
  String authURL=null;
  try {
    if (MethodType.GET.toString().equals(methodType)) {
      authURL=sb.toString();
      LOG.debug(""String_Node_Str"" + authURL);
      response=HttpUtil.doHttpRequest(authURL,methodType,null,null);
    }
 else {
      authURL=endpoints.get(Constants.OAUTH_ACCESS_TOKEN_URL);
      LOG.debug(""String_Node_Str"" + authURL);
      response=HttpUtil.doHttpRequest(authURL,methodType,sb.toString(),null);
    }
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + authURL,e);
  }
  String result;
  try {
    result=response.getResponseBodyAsString(Constants.ENCODING);
  }
 catch (  IOException io) {
    throw new SocialAuthException(io);
  }
  Map<String,Object> attributes=new HashMap<String,Object>();
  Integer expires=null;
  if (result.indexOf(""String_Node_Str"") < 0) {
    String[] pairs=result.split(""String_Node_Str"");
    for (    String pair : pairs) {
      String[] kv=pair.split(""String_Node_Str"");
      if (kv.length != 2) {
        throw new SocialAuthException(""String_Node_Str"" + authURL);
      }
 else {
        if (kv[0].equals(""String_Node_Str"")) {
          accessToken=kv[1];
        }
 else         if (kv[0].equals(""String_Node_Str"")) {
          expires=Integer.valueOf(kv[1]);
        }
 else         if (kv[0].equals(""String_Node_Str"")) {
          expires=Integer.valueOf(kv[1]);
        }
 else {
          attributes.put(kv[0],kv[1]);
        }
      }
    }
  }
 else {
    try {
      JSONObject jObj=new JSONObject(result);
      if (jObj.has(""String_Node_Str"")) {
        accessToken=jObj.getString(""String_Node_Str"");
      }
      if (jObj.has(""String_Node_Str"") && jObj.opt(""String_Node_Str"") != null) {
        String str=jObj.get(""String_Node_Str"").toString();
        if (str != null && str.length() > 0) {
          expires=Integer.valueOf(str);
        }
      }
      if (accessToken != null) {
        Iterator<String> keyItr=jObj.keys();
        while (keyItr.hasNext()) {
          String key=keyItr.next();
          if (!""String_Node_Str"".equals(key) && !""String_Node_Str"".equals(key) && jObj.opt(key) != null) {
            attributes.put(key,jObj.opt(key).toString());
          }
        }
      }
    }
 catch (    JSONException je) {
      throw new SocialAuthException(""String_Node_Str"" + authURL);
    }
  }
  LOG.debug(""String_Node_Str"" + accessToken);
  LOG.debug(""String_Node_Str"" + expires);
  if (accessToken != null) {
    accessGrant=new AccessGrant();
    accessGrant.setKey(accessToken);
    accessGrant.setAttribute(Constants.EXPIRES,expires);
    if (attributes.size() > 0) {
      accessGrant.setAttributes(attributes);
    }
    if (permission != null) {
      accessGrant.setPermission(permission);
    }
 else {
      accessGrant.setPermission(Permission.ALL);
    }
    accessGrant.setProviderId(providerId);
  }
 else {
    throw new SocialAuthException(""String_Node_Str"" + authURL);
  }
  return accessGrant;
}",0.9710865374860506
160940,"/** 
 * Stores configuration for the provider
 * @param providerConfig It contains the configuration of application like consumer key and consumer secret
 * @throws Exception
 */
public HotmailImpl(final OAuthConfig providerConfig) throws Exception {
  config=providerConfig;
  if (config.getCustomPermissions() != null) {
    this.scope=Permission.CUSTOM;
  }
  if (config.getAuthenticationUrl() != null) {
    ENDPOINTS.put(Constants.OAUTH_AUTHORIZATION_URL,config.getAuthenticationUrl());
  }
 else {
    config.setAuthenticationUrl(ENDPOINTS.get(Constants.OAUTH_AUTHORIZATION_URL));
  }
  if (config.getAccessTokenUrl() != null) {
    ENDPOINTS.put(Constants.OAUTH_ACCESS_TOKEN_URL,config.getAccessTokenUrl());
  }
 else {
    config.setAccessTokenUrl(ENDPOINTS.get(Constants.OAUTH_ACCESS_TOKEN_URL));
  }
  authenticationStrategy=new OAuth2(config,ENDPOINTS);
  authenticationStrategy.setPermission(scope);
  authenticationStrategy.setScope(getScope());
}","/** 
 * Stores configuration for the provider
 * @param providerConfig It contains the configuration of application like consumer key and consumer secret
 * @throws Exception
 */
public HotmailImpl(final OAuthConfig providerConfig) throws Exception {
  config=providerConfig;
  if (config.getCustomPermissions() != null) {
    this.scope=Permission.CUSTOM;
  }
  if (config.getAuthenticationUrl() != null) {
    ENDPOINTS.put(Constants.OAUTH_AUTHORIZATION_URL,config.getAuthenticationUrl());
  }
 else {
    config.setAuthenticationUrl(ENDPOINTS.get(Constants.OAUTH_AUTHORIZATION_URL));
  }
  if (config.getAccessTokenUrl() != null) {
    ENDPOINTS.put(Constants.OAUTH_ACCESS_TOKEN_URL,config.getAccessTokenUrl());
  }
 else {
    config.setAccessTokenUrl(ENDPOINTS.get(Constants.OAUTH_ACCESS_TOKEN_URL));
  }
  Map<String,String> props=new HashMap<String,String>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",getScope());
  config.setCustomProperties(props);
  authenticationStrategy=new OAuth2(config,ENDPOINTS);
  authenticationStrategy.setPermission(scope);
  authenticationStrategy.setScope(getScope());
}",0.91124822021832
160941,"/** 
 * @return
 * @throws Exception
 */
private Profile getProfile() throws Exception {
  if (!isVerify || accessToken == null) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  Profile p=new Profile();
  Response serviceResponse;
  if (profileId == null) {
    profileId=(String)accessGrant.getAttribute(""String_Node_Str"");
  }
  String profileURL=String.format(PROFILE_URL,profileId,accessToken);
  try {
    serviceResponse=HttpUtil.doHttpRequest(profileURL,""String_Node_Str"",null,null);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + profileURL,e);
  }
  String result;
  try {
    result=serviceResponse.getResponseBodyAsString(Constants.ENCODING);
    LOG.debug(""String_Node_Str"" + result);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + profileURL,e);
  }
  try {
    JSONObject resp=new JSONObject(result);
    if (resp.has(""String_Node_Str"")) {
      p.setFullName(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      p.setLocation(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      p.setProfileImageURL(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      String dstr=resp.getString(""String_Node_Str"");
      if (dstr != null) {
        String arr[]=dstr.split(""String_Node_Str"");
        BirthDate bd=new BirthDate();
        if (arr.length == 1) {
          Calendar currentDate=Calendar.getInstance();
          bd.setMonth(currentDate.get(Calendar.MONTH) + 1);
          bd.setDay(currentDate.get(Calendar.DAY_OF_MONTH));
        }
 else {
          if (arr.length > 0) {
            bd.setDay(Integer.parseInt(arr[1]));
          }
          if (arr.length > 1) {
            bd.setMonth(new Integer(SocialAuthUtil.getMonthInInt(arr[0])));
          }
        }
        p.setDob(bd);
      }
    }
    JSONObject userContactDetails=resp.getJSONObject(""String_Node_Str"");
    JSONArray emailArr=userContactDetails.getJSONArray(""String_Node_Str"");
    JSONObject eobj=emailArr.getJSONObject(0);
    if (eobj.has(""String_Node_Str"")) {
      p.setEmail(eobj.getString(""String_Node_Str""));
    }
    p.setProviderId(getProviderId());
    userProfile=p;
    return userProfile;
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + result,e);
  }
}","/** 
 * @return
 * @throws Exception
 */
private Profile getProfile() throws Exception {
  if (!isVerify || accessToken == null) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  Profile p=new Profile();
  Response serviceResponse;
  if (profileId == null) {
    profileId=(String)accessGrant.getAttribute(""String_Node_Str"");
  }
  String profileURL=String.format(PROFILE_URL,profileId,accessToken);
  Map<String,String> headerParam=new HashMap<String,String>();
  headerParam.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  try {
    serviceResponse=HttpUtil.doHttpRequest(profileURL,""String_Node_Str"",null,headerParam);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + profileURL,e);
  }
  String result;
  try {
    result=serviceResponse.getResponseBodyAsString(Constants.ENCODING);
    LOG.debug(""String_Node_Str"" + result);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + profileURL,e);
  }
  try {
    JSONObject resp=new JSONObject(result);
    if (resp.has(""String_Node_Str"")) {
      p.setFullName(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      p.setLocation(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      p.setProfileImageURL(resp.getString(""String_Node_Str""));
    }
    if (resp.has(""String_Node_Str"")) {
      String dstr=resp.getString(""String_Node_Str"");
      if (dstr != null) {
        String arr[]=dstr.split(""String_Node_Str"");
        BirthDate bd=new BirthDate();
        if (arr.length == 1) {
          Calendar currentDate=Calendar.getInstance();
          bd.setMonth(currentDate.get(Calendar.MONTH) + 1);
          bd.setDay(currentDate.get(Calendar.DAY_OF_MONTH));
        }
 else {
          if (arr.length > 0) {
            bd.setDay(Integer.parseInt(arr[1]));
          }
          if (arr.length > 1) {
            bd.setMonth(new Integer(SocialAuthUtil.getMonthInInt(arr[0])));
          }
        }
        p.setDob(bd);
      }
    }
    JSONObject userContactDetails=resp.getJSONObject(""String_Node_Str"");
    JSONArray emailArr=userContactDetails.getJSONArray(""String_Node_Str"");
    JSONObject eobj=emailArr.getJSONObject(0);
    if (eobj.has(""String_Node_Str"")) {
      p.setEmail(eobj.getString(""String_Node_Str""));
    }
    p.setProviderId(getProviderId());
    userProfile=p;
    return userProfile;
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + result,e);
  }
}",0.9697341513292432
160942,"/** 
 * Gets the list of contacts of the user. this may not be available for all providers.
 * @return List of contact objects representing Contacts. Only name will beavailable
 */
@Override public List<Contact> getContactList() throws Exception {
  if (!isVerify || accessToken == null) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  List<Contact> plist=new ArrayList<Contact>();
  String contactURL=String.format(CONTACTS_URL,accessToken);
  LOG.info(""String_Node_Str"" + contactURL);
  String respStr;
  try {
    Response response=HttpUtil.doHttpRequest(contactURL,MethodType.GET.toString(),null,null);
    respStr=response.getResponseBodyAsString(Constants.ENCODING);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + contactURL,e);
  }
  try {
    LOG.debug(""String_Node_Str"" + respStr);
    JSONArray resp=new JSONArray(respStr);
    for (int i=0; i < resp.length(); i++) {
      JSONObject obj=resp.getJSONObject(i);
      Contact p=new Contact();
      String name=obj.getString(""String_Node_Str"");
      p.setDisplayName(name);
      JSONObject userContactDetails=obj.getJSONObject(""String_Node_Str"");
      JSONArray emailArr=userContactDetails.getJSONArray(""String_Node_Str"");
      JSONObject eobj=emailArr.getJSONObject(0);
      if (eobj.has(""String_Node_Str"")) {
        p.setEmail(eobj.getString(""String_Node_Str""));
      }
      p.setId(obj.getString(""String_Node_Str""));
      p.setProfileUrl(obj.getString(""String_Node_Str""));
      plist.add(p);
    }
  }
 catch (  Exception e) {
    throw new ServerDataException(""String_Node_Str"" + respStr,e);
  }
  return plist;
}","/** 
 * Gets the list of contacts of the user. this may not be available for all providers.
 * @return List of contact objects representing Contacts. Only name will beavailable
 */
@Override public List<Contact> getContactList() throws Exception {
  if (!isVerify || accessToken == null) {
    throw new SocialAuthException(""String_Node_Str"");
  }
  List<Contact> plist=new ArrayList<Contact>();
  String contactURL=String.format(CONTACTS_URL,accessToken);
  Map<String,String> headerParam=new HashMap<String,String>();
  headerParam.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  LOG.info(""String_Node_Str"" + contactURL);
  String respStr;
  try {
    Response response=HttpUtil.doHttpRequest(contactURL,MethodType.GET.toString(),null,headerParam);
    respStr=response.getResponseBodyAsString(Constants.ENCODING);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + contactURL,e);
  }
  try {
    LOG.debug(""String_Node_Str"" + respStr);
    JSONArray resp=new JSONArray(respStr);
    for (int i=0; i < resp.length(); i++) {
      JSONObject obj=resp.getJSONObject(i);
      Contact p=new Contact();
      String name=obj.getString(""String_Node_Str"");
      p.setDisplayName(name);
      JSONObject userContactDetails=obj.getJSONObject(""String_Node_Str"");
      JSONArray emailArr=userContactDetails.getJSONArray(""String_Node_Str"");
      JSONObject eobj=emailArr.getJSONObject(0);
      if (eobj.has(""String_Node_Str"")) {
        p.setEmail(eobj.getString(""String_Node_Str""));
      }
      p.setId(obj.getString(""String_Node_Str""));
      p.setProfileUrl(obj.getString(""String_Node_Str""));
      plist.add(p);
    }
  }
 catch (  Exception e) {
    throw new ServerDataException(""String_Node_Str"" + respStr,e);
  }
  return plist;
}",0.9566490919742238
160943,"/** 
 * Retrieves the profile info as a string
 * @return String
 */
@Override public String toString(){
  StringBuilder result=new StringBuilder();
  String NEW_LINE=System.getProperty(""String_Node_Str"");
  result.append(this.getClass().getName() + ""String_Node_Str"" + NEW_LINE);
  result.append(""String_Node_Str"" + email + NEW_LINE);
  result.append(""String_Node_Str"" + firstName + NEW_LINE);
  result.append(""String_Node_Str"" + lastName + NEW_LINE);
  result.append(""String_Node_Str"" + displayName + NEW_LINE);
  result.append(""String_Node_Str"" + id + NEW_LINE);
  result.append(""String_Node_Str"" + profileUrl + NEW_LINE);
  result.append(""String_Node_Str"" + emailHash + NEW_LINE);
  result.append(""String_Node_Str"");
  if (otherEmails != null) {
    StringBuilder estr=new StringBuilder();
    for (    String str : otherEmails) {
      if (estr.length() > 0) {
        estr.append(""String_Node_Str"");
      }
      estr.append(str);
    }
    result.append(estr.toString());
  }
  result.append(NEW_LINE);
  result.append(""String_Node_Str"");
  return result.toString();
}","/** 
 * Retrieves the profile info as a string
 * @return String
 */
@Override public String toString(){
  StringBuilder result=new StringBuilder();
  String NEW_LINE=System.getProperty(""String_Node_Str"");
  result.append(this.getClass().getName() + ""String_Node_Str"" + NEW_LINE);
  result.append(""String_Node_Str"" + email + NEW_LINE);
  result.append(""String_Node_Str"" + firstName + NEW_LINE);
  result.append(""String_Node_Str"" + lastName + NEW_LINE);
  result.append(""String_Node_Str"" + displayName + NEW_LINE);
  result.append(""String_Node_Str"" + id + NEW_LINE);
  result.append(""String_Node_Str"" + profileUrl + NEW_LINE);
  result.append(""String_Node_Str"" + profileImageURL + NEW_LINE);
  result.append(""String_Node_Str"" + emailHash + NEW_LINE);
  result.append(""String_Node_Str"");
  if (otherEmails != null) {
    StringBuilder estr=new StringBuilder();
    for (    String str : otherEmails) {
      if (estr.length() > 0) {
        estr.append(""String_Node_Str"");
      }
      estr.append(str);
    }
    result.append(estr.toString());
  }
  result.append(NEW_LINE);
  result.append(""String_Node_Str"");
  return result.toString();
}",0.9643662607126748
160944,"public SocialAuthConfig(){
  providersImplMap=new HashMap<String,Class<?>>();
  providersImplMap.put(Constants.FACEBOOK,org.brickred.socialauth.provider.FacebookImpl.class);
  providersImplMap.put(Constants.FOURSQUARE,org.brickred.socialauth.provider.FourSquareImpl.class);
  providersImplMap.put(Constants.GOOGLE,org.brickred.socialauth.provider.GoogleImpl.class);
  providersImplMap.put(Constants.HOTMAIL,org.brickred.socialauth.provider.HotmailImpl.class);
  providersImplMap.put(Constants.LINKEDIN,org.brickred.socialauth.provider.LinkedInImpl.class);
  providersImplMap.put(Constants.MYSPACE,org.brickred.socialauth.provider.MySpaceImpl.class);
  providersImplMap.put(Constants.OPENID,org.brickred.socialauth.provider.OpenIdImpl.class);
  providersImplMap.put(Constants.TWITTER,org.brickred.socialauth.provider.TwitterImpl.class);
  providersImplMap.put(Constants.YAHOO,org.brickred.socialauth.provider.YahooImpl.class);
  providersImplMap.put(Constants.SALESFORCE,org.brickred.socialauth.provider.SalesForceImpl.class);
  providersImplMap.put(Constants.YAMMER,org.brickred.socialauth.provider.YammerImpl.class);
  providersImplMap.put(Constants.MENDELEY,org.brickred.socialauth.provider.MendeleyImpl.class);
  providersImplMap.put(Constants.RUNKEEPER,org.brickred.socialauth.provider.RunkeeperImpl.class);
  providersImplMap.put(Constants.GOOGLE_PLUS,org.brickred.socialauth.provider.GooglePlusImpl.class);
  providersImplMap.put(Constants.INSTAGRAM,org.brickred.socialauth.provider.RunkeeperImpl.class);
  domainMap=new HashMap<String,String>();
  domainMap.put(Constants.GOOGLE,""String_Node_Str"");
  domainMap.put(Constants.YAHOO,""String_Node_Str"");
  domainMap.put(Constants.TWITTER,""String_Node_Str"");
  domainMap.put(Constants.FACEBOOK,""String_Node_Str"");
  domainMap.put(Constants.HOTMAIL,""String_Node_Str"");
  domainMap.put(Constants.LINKEDIN,""String_Node_Str"");
  domainMap.put(Constants.FOURSQUARE,""String_Node_Str"");
  domainMap.put(Constants.MYSPACE,""String_Node_Str"");
  domainMap.put(Constants.SALESFORCE,""String_Node_Str"");
  domainMap.put(Constants.YAMMER,""String_Node_Str"");
  domainMap.put(Constants.MENDELEY,""String_Node_Str"");
  domainMap.put(Constants.RUNKEEPER,""String_Node_Str"");
  domainMap.put(Constants.GOOGLE_PLUS,""String_Node_Str"");
  domainMap.put(Constants.INSTAGRAM,""String_Node_Str"");
  providersConfig=new HashMap<String,OAuthConfig>();
  OAuthConfig c=new OAuthConfig(""String_Node_Str"",""String_Node_Str"");
  c.setProviderImplClass(org.brickred.socialauth.provider.OpenIdImpl.class);
  providersConfig.put(Constants.OPENID,c);
}","public SocialAuthConfig(){
  providersImplMap=new HashMap<String,Class<?>>();
  providersImplMap.put(Constants.FACEBOOK,org.brickred.socialauth.provider.FacebookImpl.class);
  providersImplMap.put(Constants.FOURSQUARE,org.brickred.socialauth.provider.FourSquareImpl.class);
  providersImplMap.put(Constants.GOOGLE,org.brickred.socialauth.provider.GoogleImpl.class);
  providersImplMap.put(Constants.HOTMAIL,org.brickred.socialauth.provider.HotmailImpl.class);
  providersImplMap.put(Constants.LINKEDIN,org.brickred.socialauth.provider.LinkedInImpl.class);
  providersImplMap.put(Constants.MYSPACE,org.brickred.socialauth.provider.MySpaceImpl.class);
  providersImplMap.put(Constants.OPENID,org.brickred.socialauth.provider.OpenIdImpl.class);
  providersImplMap.put(Constants.TWITTER,org.brickred.socialauth.provider.TwitterImpl.class);
  providersImplMap.put(Constants.YAHOO,org.brickred.socialauth.provider.YahooImpl.class);
  providersImplMap.put(Constants.SALESFORCE,org.brickred.socialauth.provider.SalesForceImpl.class);
  providersImplMap.put(Constants.YAMMER,org.brickred.socialauth.provider.YammerImpl.class);
  providersImplMap.put(Constants.MENDELEY,org.brickred.socialauth.provider.MendeleyImpl.class);
  providersImplMap.put(Constants.RUNKEEPER,org.brickred.socialauth.provider.RunkeeperImpl.class);
  providersImplMap.put(Constants.GOOGLE_PLUS,org.brickred.socialauth.provider.GooglePlusImpl.class);
  providersImplMap.put(Constants.INSTAGRAM,org.brickred.socialauth.provider.InstagramImpl.class);
  domainMap=new HashMap<String,String>();
  domainMap.put(Constants.GOOGLE,""String_Node_Str"");
  domainMap.put(Constants.YAHOO,""String_Node_Str"");
  domainMap.put(Constants.TWITTER,""String_Node_Str"");
  domainMap.put(Constants.FACEBOOK,""String_Node_Str"");
  domainMap.put(Constants.HOTMAIL,""String_Node_Str"");
  domainMap.put(Constants.LINKEDIN,""String_Node_Str"");
  domainMap.put(Constants.FOURSQUARE,""String_Node_Str"");
  domainMap.put(Constants.MYSPACE,""String_Node_Str"");
  domainMap.put(Constants.SALESFORCE,""String_Node_Str"");
  domainMap.put(Constants.YAMMER,""String_Node_Str"");
  domainMap.put(Constants.MENDELEY,""String_Node_Str"");
  domainMap.put(Constants.RUNKEEPER,""String_Node_Str"");
  domainMap.put(Constants.GOOGLE_PLUS,""String_Node_Str"");
  domainMap.put(Constants.INSTAGRAM,""String_Node_Str"");
  providersConfig=new HashMap<String,OAuthConfig>();
  OAuthConfig c=new OAuthConfig(""String_Node_Str"",""String_Node_Str"");
  c.setProviderImplClass(org.brickred.socialauth.provider.OpenIdImpl.class);
  providersConfig.put(Constants.OPENID,c);
}",0.9964925954793452
160945,"@Override public List<Feed> getFeeds() throws Exception {
  List<Feed> list=new ArrayList<Feed>();
  try {
    Response response=providerSupport.api(FEED_URL);
    String respStr=response.getResponseBodyAsString(Constants.ENCODING);
    JSONObject resp=new JSONObject(respStr);
    JSONArray data=resp.getJSONArray(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + data.length());
    for (int i=0; i < data.length(); i++) {
      Feed feed=new Feed();
      JSONObject obj=data.getJSONObject(i);
      if (obj.has(""String_Node_Str"")) {
        JSONObject iobj=obj.getJSONObject(""String_Node_Str"");
        if (iobj.has(""String_Node_Str""))         feed.setMessage(iobj.getJSONObject(""String_Node_Str"").optString(""String_Node_Str""));
      }
      if (obj.has(""String_Node_Str"")) {
        JSONObject iobj=obj.getJSONObject(""String_Node_Str"");
        if (iobj.has(""String_Node_Str"")) {
          feed.setFrom(iobj.getString(""String_Node_Str""));
        }
        if (iobj.has(""String_Node_Str"")) {
          feed.setId(iobj.getString(""String_Node_Str""));
        }
        if (iobj.has(""String_Node_Str"")) {
          feed.setScreenName(iobj.getString(""String_Node_Str""));
        }
      }
      if (obj.has(""String_Node_Str"")) {
        feed.setCreatedAt(new Date(Integer.parseInt(obj.getString(""String_Node_Str""))));
      }
      list.add(feed);
    }
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + FEED_URL,e);
  }
  return list;
}","@Override public List<Feed> getFeeds() throws Exception {
  List<Feed> list=new ArrayList<Feed>();
  try {
    Response response=providerSupport.api(FEED_URL);
    String respStr=response.getResponseBodyAsString(Constants.ENCODING);
    LOG.debug(""String_Node_Str"" + respStr);
    JSONObject resp=new JSONObject(respStr);
    JSONArray data=resp.getJSONArray(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + data.length());
    for (int i=0; i < data.length(); i++) {
      Feed feed=new Feed();
      JSONObject obj=data.getJSONObject(i);
      if (obj.has(""String_Node_Str"")) {
        JSONObject iobj=obj.getJSONObject(""String_Node_Str"");
        if (iobj.has(""String_Node_Str"")) {
          feed.setMessage(iobj.getJSONObject(""String_Node_Str"").optString(""String_Node_Str""));
        }
      }
      if (obj.has(""String_Node_Str"")) {
        JSONObject iobj=obj.getJSONObject(""String_Node_Str"");
        if (iobj.has(""String_Node_Str"")) {
          feed.setFrom(iobj.getString(""String_Node_Str""));
        }
        if (iobj.has(""String_Node_Str"")) {
          feed.setId(iobj.getString(""String_Node_Str""));
        }
        if (iobj.has(""String_Node_Str"")) {
          feed.setScreenName(iobj.getString(""String_Node_Str""));
        }
      }
      if (obj.has(""String_Node_Str"")) {
        feed.setCreatedAt(new Date(Integer.parseInt(obj.getString(""String_Node_Str""))));
      }
      list.add(feed);
    }
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + FEED_URL,e);
  }
  return list;
}",0.9807308970099669
160946,"public void setProviderSupport(final ProviderSupport providerSupport){
  this.providerSupport=providerSupport;
}","@Override public void setProviderSupport(final ProviderSupport providerSupport){
  this.providerSupport=providerSupport;
}",0.9572649572649572
160947,"public ProviderSupport getProviderSupport(){
  return providerSupport;
}","@Override public ProviderSupport getProviderSupport(){
  return providerSupport;
}",0.935064935064935
160948,"private Profile doVerifyResponse(final Map<String,String> requestParams) throws Exception {
  LOG.info(""String_Node_Str"");
  if (requestParams.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(requestParams.get(""String_Node_Str""))) {
    throw new UserDeniedPermissionException();
  }
  accessGrant=authenticationStrategy.verifyResponse(requestParams);
  if (accessGrant != null) {
    LOG.debug(""String_Node_Str"");
    getProfile();
    return this.userProfile;
  }
 else {
    throw new SocialAuthException(""String_Node_Str"");
  }
}","private Profile doVerifyResponse(final Map<String,String> requestParams) throws Exception {
  LOG.info(""String_Node_Str"");
  if (requestParams.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(requestParams.get(""String_Node_Str""))) {
    throw new UserDeniedPermissionException();
  }
  accessGrant=authenticationStrategy.verifyResponse(requestParams,MethodType.POST.toString());
  if (accessGrant != null) {
    LOG.debug(""String_Node_Str"");
    getProfile();
    return this.userProfile;
  }
 else {
    throw new SocialAuthException(""String_Node_Str"");
  }
}",0.9757412398921832
160949,"private Profile getProfile() throws Exception {
  LOG.debug(""String_Node_Str"");
  Response response;
  try {
    response=authenticationStrategy.executeFeed(PROFILE_URL);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + PROFILE_URL,e);
  }
  if (response.getStatus() == 200) {
    String respStr=response.getResponseBodyAsString(Constants.ENCODING);
    JSONObject data=new JSONObject(respStr);
    Profile p=new Profile();
    p.setValidatedId(data.optString(""String_Node_Str""));
    String full_name=data.optString(""String_Node_Str"");
    p.setDisplayName(full_name);
    if (full_name != null) {
      String[] names=full_name.split(""String_Node_Str"");
      if (names.length > 1) {
        p.setFirstName(names[0]);
        p.setLastName(names[1]);
      }
 else {
        p.setFirstName(full_name);
      }
    }
    p.setProfileImageURL(data.optString(""String_Node_Str""));
    p.setProviderId(getProviderId());
    return p;
  }
 else {
    throw new SocialAuthException(""String_Node_Str"" + PROFILE_URL + ""String_Node_Str""+ response.getStatus());
  }
}","private Profile getProfile() throws Exception {
  LOG.debug(""String_Node_Str"");
  Response response;
  try {
    response=authenticationStrategy.executeFeed(PROFILE_URL);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + PROFILE_URL,e);
  }
  if (response.getStatus() == 200) {
    String respStr=response.getResponseBodyAsString(Constants.ENCODING);
    LOG.debug(""String_Node_Str"" + respStr);
    JSONObject obj=new JSONObject(respStr);
    JSONObject data=obj.getJSONObject(""String_Node_Str"");
    Profile p=new Profile();
    p.setValidatedId(data.optString(""String_Node_Str""));
    String full_name=data.optString(""String_Node_Str"");
    p.setDisplayName(full_name);
    if (full_name != null) {
      String[] names=full_name.split(""String_Node_Str"");
      if (names.length > 1) {
        p.setFirstName(names[0]);
        p.setLastName(names[1]);
      }
 else {
        p.setFirstName(full_name);
      }
    }
    p.setProfileImageURL(data.optString(""String_Node_Str""));
    p.setProviderId(getProviderId());
    return p;
  }
 else {
    throw new SocialAuthException(""String_Node_Str"" + PROFILE_URL + ""String_Node_Str""+ response.getStatus());
  }
}",0.9339168490153172
160950,"@Override public void setAccessGrant(AccessGrant accessGrant) throws Exception {
  this.accessGrant=accessGrant;
  authenticationStrategy.setAccessGrant(accessGrant);
}","@Override public void setAccessGrant(final AccessGrant accessGrant) throws AccessTokenExpireException {
  this.accessGrant=accessGrant;
  authenticationStrategy.setAccessGrant(accessGrant);
}",0.935933147632312
160951,"@Override public List<Contact> getContactList() throws Exception {
  LOG.info(""String_Node_Str"" + CONTACTS_URL);
  Response serviceResponse;
  try {
    serviceResponse=authenticationStrategy.executeFeed(CONTACTS_URL);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ CONTACTS_URL,e);
  }
  if (serviceResponse.getStatus() != 200) {
    throw new SocialAuthException(""String_Node_Str"" + CONTACTS_URL + ""String_Node_Str""+ serviceResponse.getStatus());
  }
  String respStr=serviceResponse.getResponseBodyAsString(Constants.ENCODING);
  List<Contact> plist=new ArrayList<Contact>();
  JSONObject resp=new JSONObject(respStr);
  JSONArray data=resp.optJSONArray(""String_Node_Str"");
  if (data != null)   for (int i=0; i < data.length(); i++) {
    JSONObject obj=data.getJSONObject(i);
    Contact p=new Contact();
    String id=obj.optString(""String_Node_Str"");
    p.setId(id);
    String full_name=obj.optString(""String_Node_Str"");
    p.setDisplayName(full_name);
    if (full_name != null) {
      String[] names=full_name.split(""String_Node_Str"");
      if (names.length > 1) {
        p.setFirstName(names[0]);
        p.setLastName(names[1]);
      }
 else {
        p.setFirstName(full_name);
      }
    }
    String username=obj.optString(""String_Node_Str"");
    p.setProfileUrl(VIEW_PROFILE_URL + username);
    plist.add(p);
  }
  return plist;
}","@Override public List<Contact> getContactList() throws Exception {
  LOG.info(""String_Node_Str"" + CONTACTS_URL);
  Response serviceResponse;
  try {
    serviceResponse=authenticationStrategy.executeFeed(CONTACTS_URL);
  }
 catch (  Exception e) {
    throw new SocialAuthException(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ CONTACTS_URL,e);
  }
  if (serviceResponse.getStatus() != 200) {
    throw new SocialAuthException(""String_Node_Str"" + CONTACTS_URL + ""String_Node_Str""+ serviceResponse.getStatus());
  }
  String respStr=serviceResponse.getResponseBodyAsString(Constants.ENCODING);
  LOG.debug(""String_Node_Str"" + respStr);
  List<Contact> plist=new ArrayList<Contact>();
  JSONObject resp=new JSONObject(respStr);
  JSONArray data=resp.optJSONArray(""String_Node_Str"");
  if (data != null) {
    for (int i=0; i < data.length(); i++) {
      JSONObject obj=data.getJSONObject(i);
      Contact p=new Contact();
      String id=obj.optString(""String_Node_Str"");
      p.setId(id);
      String full_name=obj.optString(""String_Node_Str"");
      p.setDisplayName(full_name);
      if (full_name != null) {
        String[] names=full_name.split(""String_Node_Str"");
        if (names.length > 1) {
          p.setFirstName(names[0]);
          p.setLastName(names[1]);
        }
 else {
          p.setFirstName(full_name);
        }
      }
      String username=obj.optString(""String_Node_Str"");
      p.setProfileUrl(VIEW_PROFILE_URL + username);
      p.setProfileImageURL(obj.optString(""String_Node_Str""));
      plist.add(p);
    }
  }
  return plist;
}",0.9313790806129248
160952,"@Override public Profile getUserProfile() throws Exception {
  if (userProfile == null && accessGrant != null) {
    userProfile=getProfile();
  }
  return (userProfile == null) ? new Profile() : userProfile;
}","@Override public Profile getUserProfile() throws Exception {
  if (userProfile == null && accessGrant != null) {
    userProfile=getProfile();
  }
  return userProfile;
}",0.8947368421052632
160953,"@Override public void updateStatus(final String msg) throws Exception {
  LOG.warn(""String_Node_Str"");
  throw new SocialAuthException(""String_Node_Str"");
}","@Override public Response updateStatus(final String msg) throws Exception {
  LOG.warn(""String_Node_Str"");
  throw new SocialAuthException(""String_Node_Str"");
}",0.9683544303797468
160954,"private String getScope(Permission scope){
  StringBuffer result=new StringBuffer();
  String arr[];
  if (Permission.AUTHENTICATE_ONLY.equals(scope)) {
    arr=AuthPerms;
  }
 else   if (Permission.CUSTOM.equals(scope) && config.getCustomPermissions() != null) {
    arr=config.getCustomPermissions().split(""String_Node_Str"");
  }
 else {
    arr=AllPerms;
  }
  result.append(arr[0]);
  for (int i=1; i < arr.length; i++) {
    result.append(""String_Node_Str"").append(arr[i]);
  }
  String pluginScopes=getPluginsScope(config);
  if (pluginScopes != null) {
    result.append(""String_Node_Str"").append(pluginScopes);
  }
  return result.toString();
}","private String getScope(final Permission scope){
  StringBuffer result=new StringBuffer();
  String arr[];
  if (Permission.AUTHENTICATE_ONLY.equals(scope)) {
    arr=AuthPerms;
  }
 else   if (Permission.CUSTOM.equals(scope) && config.getCustomPermissions() != null) {
    arr=config.getCustomPermissions().split(""String_Node_Str"");
  }
 else {
    arr=AllPerms;
  }
  result.append(arr[0]);
  for (int i=1; i < arr.length; i++) {
    result.append(""String_Node_Str"").append(arr[i]);
  }
  String pluginScopes=getPluginsScope(config);
  if (pluginScopes != null) {
    result.append(""String_Node_Str"").append(pluginScopes);
  }
  return result.toString();
}",0.9954198473282444
160955,"void redirect(Method method,URL url,RequestInfo info){
  HttpRequest nue;
  if (method.toString().equals(info.req.getMethod().toString())) {
    if (info.req instanceof DefaultFullHttpRequest) {
      FullHttpRequest rq=((DefaultFullHttpRequest)info.req).copy();
      rq.setUri(url.getPathAndQuery());
      nue=rq;
    }
 else {
      nue=new DefaultHttpRequest(info.req.getProtocolVersion(),info.req.getMethod(),url.getPathAndQuery());
    }
  }
 else {
    nue=new DefaultHttpRequest(info.req.getProtocolVersion(),HttpMethod.valueOf(method.name()),url.getPathAndQuery());
  }
  copyHeaders(info.req,nue);
  submit(url,nue,new AtomicBoolean(),info.handle,info.r,info);
}","void redirect(Method method,URL url,RequestInfo info){
  HttpRequest nue;
  if (method.toString().equals(info.req.getMethod().toString())) {
    if (info.req instanceof DefaultFullHttpRequest) {
      DefaultFullHttpRequest dfrq=(DefaultFullHttpRequest)info.req;
      FullHttpRequest rq;
      try {
        rq=dfrq.copy();
      }
 catch (      IllegalReferenceCountException e) {
        rq=dfrq;
      }
      rq.setUri(url.getPathAndQuery());
      nue=rq;
    }
 else {
      nue=new DefaultHttpRequest(info.req.getProtocolVersion(),info.req.getMethod(),url.getPathAndQuery());
    }
  }
 else {
    nue=new DefaultHttpRequest(info.req.getProtocolVersion(),HttpMethod.valueOf(method.name()),url.getPathAndQuery());
  }
  copyHeaders(info.req,nue);
  submit(url,nue,new AtomicBoolean(),info.handle,info.r,info);
}",0.8906773977196513
160956,"private synchronized Bootstrap start(){
  if (bootstrap == null) {
    bootstrap=new Bootstrap();
    bootstrap.group(group);
    bootstrap.handler(new Initializer(new MessageHandlerImpl(followRedirects,this),false,maxChunkSize,maxInitialLineLength,maxHeadersSize,compress));
    bootstrap.option(ChannelOption.TCP_NODELAY,true);
    bootstrap.option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT);
    for (    ChannelOptionSetting setting : settings) {
      option(bootstrap,setting);
    }
    bootstrap.channelFactory(new NioChannelFactory());
  }
  return bootstrap;
}","private synchronized Bootstrap start(){
  if (bootstrap == null) {
    bootstrap=new Bootstrap();
    bootstrap.group(group);
    bootstrap.handler(new Initializer(new MessageHandlerImpl(followRedirects,this),false,maxChunkSize,maxInitialLineLength,maxHeadersSize,compress));
    bootstrap.option(ChannelOption.TCP_NODELAY,true);
    bootstrap.option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT);
    bootstrap.option(ChannelOption.SO_REUSEADDR,false);
    for (    ChannelOptionSetting setting : settings) {
      option(bootstrap,setting);
    }
    bootstrap.channelFactory(new NioChannelFactory());
  }
  return bootstrap;
}",0.9541734860883796
160957,"private synchronized Bootstrap startSsl(){
  if (bootstrapSsl == null) {
    bootstrapSsl=new Bootstrap();
    bootstrapSsl.group(group);
    bootstrapSsl.handler(new Initializer(new MessageHandlerImpl(followRedirects,this),true,maxChunkSize,maxInitialLineLength,maxHeadersSize,compress));
    bootstrapSsl.option(ChannelOption.TCP_NODELAY,true);
    bootstrapSsl.option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT);
    for (    ChannelOptionSetting setting : settings) {
      option(bootstrapSsl,setting);
    }
    bootstrapSsl.channelFactory(new NioChannelFactory());
  }
  return bootstrapSsl;
}","private synchronized Bootstrap startSsl(){
  if (bootstrapSsl == null) {
    bootstrapSsl=new Bootstrap();
    bootstrapSsl.group(group);
    bootstrapSsl.handler(new Initializer(new MessageHandlerImpl(followRedirects,this),true,maxChunkSize,maxInitialLineLength,maxHeadersSize,compress));
    bootstrapSsl.option(ChannelOption.TCP_NODELAY,true);
    bootstrapSsl.option(ChannelOption.SO_REUSEADDR,false);
    bootstrapSsl.option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT);
    for (    ChannelOptionSetting setting : settings) {
      option(bootstrapSsl,setting);
    }
    bootstrapSsl.channelFactory(new NioChannelFactory());
  }
  return bootstrapSsl;
}",0.9540140296180826
160958,"@Override public void content(final ByteBuf data){
  if (data.readableBytes() < frameLength) {
    return;
  }
  if (frameLength > 0) {
    final ByteBuf frame=data.readSlice(frameLength);
    frame.retain();
    part.add(new ZMTPFrame(data));
  }
 else   if (part == tail) {
    part.add(EMPTY_FRAME);
  }
 else {
    delimited=true;
    part=tail;
  }
}","@Override public void content(final ByteBuf data){
  if (data.readableBytes() < frameLength) {
    return;
  }
  if (frameLength > 0) {
    final ByteBuf frame=data.readSlice(frameLength);
    frame.retain();
    part.add(new ZMTPFrame(frame));
  }
 else   if (part == tail) {
    part.add(EMPTY_FRAME);
  }
 else {
    delimited=true;
    part=tail;
  }
}",0.9873417721518988
160959,"public static String printBytes(ByteBuf buffer,int start,int length){
  StringBuilder sb=new StringBuilder(length - start);
  for (int i=start; i < start + length; i++) {
    sb.append(String.format(""String_Node_Str"",buffer.getByte(i)));
  }
  return sb.toString();
}","public static String printBytes(ByteBuf buffer,int start,int length){
  StringBuilder sb=new StringBuilder(length);
  for (int i=start; i < start + length; i++) {
    sb.append(String.format(""String_Node_Str"",buffer.getByte(i)));
  }
  return sb.toString();
}",0.9847908745247148
160960,"/** 
 * Construct a ZMTP20Codec with the speicfied session and optional interoperability behavior.
 * @param session the session that configures this codec
 * @param interop whether this socket should implement the ZMTP/1.0 interoperability handshake
 */
public ZMTP20Codec(ZMTPSession session,boolean interop){
  super(session);
  this.interop=interop;
}","/** 
 * Construct a ZMTP20Codec with the specified session and optional interoperability behavior.
 * @param session the session that configures this codec
 * @param interop whether this socket should implement the ZMTP/1.0 interoperability handshake
 */
public ZMTP20Codec(ZMTPSession session,boolean interop){
  super(session);
  this.interop=interop;
}",0.9943661971830986
160961,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,VoidEnum _) throws ZMTPException {
  buffer.markReaderIndex();
  ChannelBuffer toSend=inputOutput(buffer);
  while (toSend != null) {
    ctx.getChannel().write(toSend);
    toSend=inputOutput(buffer);
  }
  if (actualReadableBytes() > 0) {
    return buffer.readBytes(actualReadableBytes());
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,VoidEnum _) throws ZMTPException {
  buffer.markReaderIndex();
  ChannelBuffer toSend=inputOutput(buffer);
  if (toSend != null) {
    ctx.getChannel().write(toSend);
    return null;
  }
  if (actualReadableBytes() > 0) {
    return buffer.readBytes(actualReadableBytes());
  }
  return null;
}",0.945137157107232
160962,"/** 
 * Parses as many whole frames from the buffer as possible, until the final frame is encountered. If the message was completed, it returns the frames of the message. Otherwise it returns null to indicate that more data is needed. <p> Oversized messages will be truncated by discarding frames that would make the message size exceeed the specified size limit.
 * @param buffer Buffer with data
 * @return A {@link ZMTPMessage} if it was completely parsed, otherwise null.
 */
public ZMTPParsedMessage parse(final ChannelBuffer buffer) throws ZMTPMessageParsingException {
  if (isOversized(size)) {
    return discardFrames(buffer);
  }
  while (buffer.readableBytes() > 0) {
    buffer.markReaderIndex();
    final boolean parsedHeader=parseFrameHeader(buffer);
    if (!parsedHeader) {
      buffer.resetReaderIndex();
      return null;
    }
    if (isOversized(size + frameSize)) {
      buffer.resetReaderIndex();
      return discardFrames(buffer);
    }
    if (frameSize > buffer.readableBytes()) {
      buffer.resetReaderIndex();
      return null;
    }
    size+=frameSize;
    final ZMTPFrame frame=ZMTPFrame.read(buffer,frameSize);
    if (!frame.hasData() && part == envelope) {
      part=content;
      continue;
    }
    part.add(frame);
    if (!hasMore) {
      return finish(false);
    }
  }
  return null;
}","/** 
 * Parses as many whole frames from the buffer as possible, until the final frame is encountered. If the message was completed, it returns the frames of the message. Otherwise it returns null to indicate that more data is needed. <p> Oversized messages will be truncated by discarding frames that would make the message size exceeed the specified size limit.
 * @param buffer Buffer with data
 * @return A {@link ZMTPMessage} if it was completely parsed, otherwise null.
 */
public ZMTPParsedMessage parse(final ChannelBuffer buffer) throws ZMTPMessageParsingException {
  if (isOversized(size)) {
    return discardFrames(buffer);
  }
  while (buffer.readableBytes() > 0) {
    buffer.markReaderIndex();
    final boolean parsedHeader=parseFrameHeader(buffer);
    if (!parsedHeader) {
      buffer.resetReaderIndex();
      return null;
    }
    if (isOversized(size + frameSize)) {
      buffer.resetReaderIndex();
      return discardFrames(buffer);
    }
    if (frameSize > buffer.readableBytes()) {
      buffer.resetReaderIndex();
      return null;
    }
    size+=frameSize;
    final ZMTPFrame frame=ZMTPFrame.read(buffer,frameSize);
    if (!frame.hasData() && part == envelope) {
      part=content;
    }
 else {
      part.add(frame);
    }
    if (!hasMore) {
      return finish(false);
    }
  }
  return null;
}",0.9880239520958084
160963,"private void testParse(final boolean enveloped,final Limit limit,final List<String> input,final ZMTPParsedMessage expected) throws Exception {
  out.println(format(""String_Node_Str"",enveloped,limit,input,expected));
  final ChannelBuffer serialized=serialize(input);
  final ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
  for (  List<ChannelBuffer> fragments : Fragmenter.generator(serialized.duplicate())) {
    buffer.setIndex(0,0);
    ZMTPParsedMessage parsed=null;
    final ZMTPMessageParser parser=new ZMTPMessageParser(enveloped,limit.value);
    for (int i=0; i < fragments.size(); i++) {
      final ChannelBuffer fragment=fragments.get(i);
      buffer.writeBytes(fragment);
      parsed=parser.parse(buffer);
      if (i < fragments.size() - 1) {
        assertNull(parsed);
      }
    }
    assertEquals(expected,parsed);
    final ZMTPParsedMessage reparsed=parser.parse(serialized.duplicate());
    assertEquals(expected,reparsed);
  }
}","private void testParse(final boolean enveloped,final Limit limit,final List<String> input,final ZMTPParsedMessage expected) throws Exception {
  out.println(format(""String_Node_Str"",enveloped,limit,input,expected));
  final ChannelBuffer serialized=serialize(input);
  final ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
{
    final ZMTPMessageParser parser=new ZMTPMessageParser(enveloped,limit.value);
    final ZMTPParsedMessage parsed=parser.parse(serialized.duplicate());
    assertEquals(expected,parsed);
  }
  for (  List<ChannelBuffer> fragments : Fragmenter.generator(serialized.duplicate())) {
    buffer.setIndex(0,0);
    ZMTPParsedMessage parsed=null;
    final ZMTPMessageParser parser=new ZMTPMessageParser(enveloped,limit.value);
    for (int i=0; i < fragments.size(); i++) {
      final ChannelBuffer fragment=fragments.get(i);
      buffer.writeBytes(fragment);
      parsed=parser.parse(buffer);
      if (i < fragments.size() - 1) {
        assertNull(parsed);
      }
    }
    assertEquals(expected,parsed);
    final ZMTPParsedMessage reparsed=parser.parse(serialized.duplicate());
    assertEquals(expected,reparsed);
    final int contentSize=min(limit.value - 1,10);
    final List<String> envelope=asList(""String_Node_Str"",""String_Node_Str"");
    final List<String> content=nCopies(contentSize,""String_Node_Str"");
    final List<String> frames=newArrayList(concat(envelope,content));
    final ZMTPMessage message=ZMTPMessage.fromStringsUTF8(enveloped,frames);
    final ChannelBuffer trivialSerialized=serialize(frames);
    final ZMTPParsedMessage parsedTrivial=parser.parse(trivialSerialized.duplicate());
    assertFalse(parsedTrivial.isTruncated());
    assertEquals(message,parsedTrivial.getMessage());
  }
}",0.7089634821099225
160964,"public static Parameters test(final List<String> input,final Expectation... expectations){
  final List<Verification> verifications=Lists.newArrayList();
  for (  final Expectation expectation : expectations) {
    verifications.add(verification(input,expectation));
  }
  return new Parameters(input,verifications);
}","public static Parameters test(final List<String> input,final Expectation... expectations){
  final List<Verification> verifications=newArrayList();
  for (  final Expectation expectation : expectations) {
    verifications.add(verification(input,expectation));
  }
  return new Parameters(input,verifications);
}",0.9904761904761904
160965,"@Test public void testZmqDealer() throws Exception {
  final ZMQ.Context context=ZMQ.context(1);
  final ZMQ.Socket socket=context.socket(ZMQ.DEALER);
  socket.connect(""String_Node_Str"" + serverAddress.getHostString() + ""String_Node_Str""+ serverAddress.getPort());
  final ZMsg request=ZMsg.newStringMsg(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  request.send(socket);
  final ZMTPIncomingMessage receivedRequest=incomingMessages.take();
  final ZMTPMessage receivedMessage=receivedRequest.getMessage();
  receivedRequest.getSession().getChannel().write(receivedMessage);
  final ZMsg reply=ZMsg.recvMsg(socket);
  assertEquals(request,reply);
  assertEquals(1,receivedMessage.getEnvelope().size());
  assertEquals(2,receivedMessage.getContent().size());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getEnvelope().get(0).getData());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getContent().get(0).getData());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getContent().get(1).getData());
}","@Test public void testZmqDealer() throws Exception {
  final ZMQ.Context context=ZMQ.context(1);
  final ZMQ.Socket socket=context.socket(ZMQ.DEALER);
  socket.connect(""String_Node_Str"" + serverAddress.getHostName() + ""String_Node_Str""+ serverAddress.getPort());
  final ZMsg request=ZMsg.newStringMsg(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  request.send(socket);
  final ZMTPIncomingMessage receivedRequest=incomingMessages.take();
  final ZMTPMessage receivedMessage=receivedRequest.getMessage();
  receivedRequest.getSession().getChannel().write(receivedMessage);
  final ZMsg reply=ZMsg.recvMsg(socket);
  assertEquals(request,reply);
  assertEquals(1,receivedMessage.getEnvelope().size());
  assertEquals(2,receivedMessage.getContent().size());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getEnvelope().get(0).getData());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getContent().get(0).getData());
  assertArrayEquals(""String_Node_Str"".getBytes(),receivedMessage.getContent().get(1).getData());
}",0.9953703703703703
160966,"@Test public void testZmqRouter() throws Exception {
  final ZMQ.Context context=ZMQ.context(1);
  final ZMQ.Socket socket=context.socket(ZMQ.ROUTER);
  socket.connect(""String_Node_Str"" + serverAddress.getHostString() + ""String_Node_Str""+ serverAddress.getPort());
  final ZMTPMessage request=new ZMTPMessage(asList(ZMTPFrame.create(""String_Node_Str"")),asList(ZMTPFrame.create(""String_Node_Str""),ZMTPFrame.create(""String_Node_Str"")));
  final Channel channel=channelsConnected.take();
  channel.write(request);
  final ZMsg receivedReply=ZMsg.recvMsg(socket);
  assertEquals(ZMsg.newStringMsg(identity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),receivedReply);
}","@Test public void testZmqRouter() throws Exception {
  final ZMQ.Context context=ZMQ.context(1);
  final ZMQ.Socket socket=context.socket(ZMQ.ROUTER);
  socket.connect(""String_Node_Str"" + serverAddress.getHostName() + ""String_Node_Str""+ serverAddress.getPort());
  final ZMTPMessage request=new ZMTPMessage(asList(ZMTPFrame.create(""String_Node_Str"")),asList(ZMTPFrame.create(""String_Node_Str""),ZMTPFrame.create(""String_Node_Str"")));
  final Channel channel=channelsConnected.take();
  channel.write(request);
  final ZMsg receivedReply=ZMsg.recvMsg(socket);
  assertEquals(ZMsg.newStringMsg(identity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),receivedReply);
}",0.9927641099855282
160967,"public void start(){
  if (timerRunning) {
    return;
  }
  timerRunning=true;
  timer=new CountDownTimer(currentDuration,1000){
    @Override public void onTick(    long millis){
      currentDuration=millis;
      updateText(millis);
      invalidate();
    }
    @Override public void onFinish(){
      stop();
      if (listener != null) {
        listener.onFinishCountDown();
      }
    }
  }
;
  timer.start();
}","public void start(){
  if (timerRunning) {
    return;
  }
  timerRunning=true;
  timer=new CountDownTimer(currentDuration,100){
    @Override public void onTick(    long millis){
      currentDuration=millis;
      updateText(millis);
      invalidate();
    }
    @Override public void onFinish(){
      stop();
      if (listener != null) {
        listener.onFinishCountDown();
      }
    }
  }
;
  timer.start();
}",0.9988109393579072
160968,"@Test public void new_mode_nrtm_test(){
  given(NEW_MODE,OBJ_EXISTS_WITH_CHANGED).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
  given(NEW_MODE,OBJ_EXISTS_NO_CHANGED__).when(TELNET_,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
}","@Test public void new_mode_nrtm_test(){
  given(NEW_MODE,OBJ_EXISTS_WITH_CHANGED).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
  given(NEW_MODE,OBJ_EXISTS_NO_CHANGED__).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
}",0.978798586572438
160969,"@Test public void old_mode_nrtm_test(){
  given(OLD_MODE,OBJ_EXISTS_WITH_CHANGED).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_WITH_CHANGED).run();
  given(OLD_MODE,OBJ_EXISTS_NO_CHANGED__).when(TELNET_,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
}","@Test public void old_mode_nrtm_test(){
  given(OLD_MODE,OBJ_EXISTS_WITH_CHANGED).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_WITH_CHANGED).run();
  given(OLD_MODE,OBJ_EXISTS_NO_CHANGED__).when(NRTM___,EVENT_,NOT_APPLIC__).then(SUCCESS,OBJ_EXISTS_NO_CHANGED__).run();
}",0.978798586572438
160970,"@DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String sourceParam,@PathParam(""String_Node_Str"") final String objectTypeParam,@PathParam(""String_Node_Str"") final String keyParam,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  checkForMainSource(request,sourceParam);
  final RpslObject primaryObject=lookupObjectByKey(keyParam,objectTypeParam);
  final Map<RpslObjectInfo,RpslObject> references=findReferences(primaryObject);
  validateReferences(primaryObject,references);
  try {
    if (references.isEmpty()) {
      performUpdate(request,primaryObject,reason,passwords,crowdTokenKey);
      return createResponse(request,primaryObject,Response.Status.OK);
    }
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final Set<RpslObject> allObjects=Sets.newHashSet(Iterables.concat(references.values(),Lists.newArrayList(primaryObject)));
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.MODIFY));
    for (    final RpslObject rpslObject : allObjects) {
      if (!rpslObject.getType().equals(ObjectType.MNTNER)) {
        actionRequests.add(new ActionRequest(rpslObject,Action.DELETE));
      }
    }
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.DELETE));
    performUpdates(request,actionRequests,passwords,crowdTokenKey,null,SsoAuthForm.UUID);
    return createResponse(request,allObjects,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
switch (e.getResponse().getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,primaryObject,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,primaryObject,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR);
}
}","@DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String sourceParam,@PathParam(""String_Node_Str"") final String objectTypeParam,@PathParam(""String_Node_Str"") final String keyParam,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  checkForMainSource(request,sourceParam);
  final RpslObject primaryObject=lookupObjectByKey(keyParam,objectTypeParam);
  final Map<RpslObjectInfo,RpslObject> references=findReferences(primaryObject);
  validateReferences(primaryObject,references);
  try {
    if (references.isEmpty()) {
      performUpdate(request,primaryObject,reason,passwords,crowdTokenKey);
      return createResponse(request,primaryObject,Response.Status.OK);
    }
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final Set<RpslObject> allObjects=Sets.newHashSet(Iterables.concat(references.values(),Lists.newArrayList(primaryObject)));
    final RpslObjectWithReplacements tmpMntnerWithReplacements=replaceReferencesInMntner(allObjects);
    actionRequests.add(new ActionRequest(tmpMntnerWithReplacements.rpslObject,Action.MODIFY));
    for (    final RpslObject rpslObject : allObjects) {
      if (!rpslObject.getType().equals(ObjectType.MNTNER)) {
        actionRequests.add(new ActionRequest(rpslObject,Action.DELETE));
      }
    }
    actionRequests.add(new ActionRequest(tmpMntnerWithReplacements.rpslObject,Action.DELETE));
    final WhoisResources whoisResources=performUpdates(request,actionRequests,passwords,crowdTokenKey,null,SsoAuthForm.UUID);
    removeDuplicatesAndRestoreReplacedReferences(whoisResources,tmpMntnerWithReplacements);
    return createResponse(request,whoisResources,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
switch (e.getResponse().getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,primaryObject,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,primaryObject,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR);
}
}",0.9348399246704332
160971,"private RpslObject replaceReferencesInMntner(final Collection<RpslObject> allObjects){
  for (  final RpslObject rpslObject : ImmutableSet.copyOf(allObjects)) {
    if (rpslObject.getType().equals(ObjectType.MNTNER)) {
      return replaceReferences(rpslObject,allObjects);
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}","private RpslObjectWithReplacements replaceReferencesInMntner(final Collection<RpslObject> allObjects){
  for (  final RpslObject rpslObject : ImmutableSet.copyOf(allObjects)) {
    if (rpslObject.getType().equals(ObjectType.MNTNER)) {
      return replaceReferences(rpslObject,allObjects);
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.9769452449567724
160972,"private RpslObject replaceReferences(final RpslObject mntner,final Collection<RpslObject> references){
  final Map<RpslAttribute,RpslAttribute> replacements=Maps.newHashMap();
  for (  final RpslAttribute rpslAttribute : mntner.getAttributes()) {
    for (    final RpslObject reference : references) {
      if (rpslAttribute.getCleanValue().equals(reference.getKey()) && rpslAttribute.getType().getReferences().contains(ObjectType.PERSON) || rpslAttribute.getType().getReferences().contains(ObjectType.ROLE)) {
        replacements.put(rpslAttribute,new RpslAttribute(rpslAttribute.getType(),dummyRole));
      }
    }
  }
  if (replacements.isEmpty()) {
    return mntner;
  }
  final RpslObjectBuilder builder=new RpslObjectBuilder(mntner);
  for (  Map.Entry<RpslAttribute,RpslAttribute> entry : replacements.entrySet()) {
    builder.replaceAttribute(entry.getKey(),entry.getValue());
  }
  return builder.get();
}","private RpslObjectWithReplacements replaceReferences(final RpslObject mntner,final Collection<RpslObject> references){
  final Map<RpslAttribute,RpslAttribute> replacements=Maps.newHashMap();
  for (  final RpslAttribute rpslAttribute : mntner.getAttributes()) {
    for (    final RpslObject reference : references) {
      if (rpslAttribute.getCleanValue().equals(reference.getKey()) && rpslAttribute.getType().getReferences().contains(ObjectType.PERSON) || rpslAttribute.getType().getReferences().contains(ObjectType.ROLE)) {
        replacements.put(rpslAttribute,new RpslAttribute(rpslAttribute.getType(),dummyRole));
      }
    }
  }
  if (replacements.isEmpty()) {
    return new RpslObjectWithReplacements(mntner,replacements);
  }
  final RpslObjectBuilder builder=new RpslObjectBuilder(mntner);
  for (  Map.Entry<RpslAttribute,RpslAttribute> entry : replacements.entrySet()) {
    builder.replaceAttribute(entry.getKey(),entry.getValue());
  }
  return new RpslObjectWithReplacements(builder.get(),replacements);
}",0.9393627954779034
160973,"@Test public void update_modify_multiple_objects_success(){
  final RpslObject updatedPerson=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObject updatedRole=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(mapRpslObjects(updatedPerson,updatedRole),MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  System.err.println(""String_Node_Str"" + response.getErrorMessages());
  for (  ErrorMessage em : response.getErrorMessages()) {
    System.err.println(""String_Node_Str"" + em.getSeverity());
    System.err.println(""String_Node_Str"" + em.getText());
  }
  RestTest.assertErrorCount(response,0);
  assertThat(response.getWhoisObjects(),hasSize(2));
  assertThat(mapWhoisObjects(response.getWhoisObjects()).get(0).getValueForAttribute(AttributeType.REMARKS),is(CIString.ciString(""String_Node_Str"")));
  assertThat(mapWhoisObjects(response.getWhoisObjects()).get(1).getValueForAttribute(AttributeType.REMARKS),is(CIString.ciString(""String_Node_Str"")));
}","@Test public void update_modify_multiple_objects_success(){
  final RpslObject updatedPerson=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObject updatedRole=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(mapRpslObjects(updatedPerson,updatedRole),MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  RestTest.assertErrorCount(response,0);
  assertThat(response.getWhoisObjects(),hasSize(2));
  assertThat(mapWhoisObjects(response.getWhoisObjects()).get(0).getValueForAttribute(AttributeType.REMARKS),is(CIString.ciString(""String_Node_Str"")));
  assertThat(mapWhoisObjects(response.getWhoisObjects()).get(1).getValueForAttribute(AttributeType.REMARKS),is(CIString.ciString(""String_Node_Str"")));
}",0.8985971943887776
160974,"@Test public void update_modify_with_sso_auth_succeeds(){
  final RpslObject ssomnt=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(ssomnt);
  final WhoisResources input=mapRpslObjects(new ActionRequest(new RpslObjectBuilder(ssomnt).addAttributeSorted(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).get(),Action.MODIFY));
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(input,MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  assertThat(getErrorMessagesWithSeverity(response.getErrorMessages(),""String_Node_Str""),hasSize(0));
  assertThat(response.getWhoisObjects(),hasSize(1));
  assertThat(objectExists(ObjectType.MNTNER,""String_Node_Str""),is(true));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
}","@Test public void update_modify_with_sso_auth_succeeds(){
  final RpslObject ssomnt=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  RestTest.target(getPort(),""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").post(Entity.entity(mapRpslObjects(ssomnt),MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  final WhoisResources input=mapRpslObjects(new ActionRequest(new RpslObjectBuilder(ssomnt).addAttributeSorted(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).get(),Action.MODIFY));
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(input,MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  assertThat(getErrorMessagesWithSeverity(response.getErrorMessages(),""String_Node_Str""),hasSize(0));
  assertThat(response.getWhoisObjects(),hasSize(1));
  assertThat(objectExists(ObjectType.MNTNER,""String_Node_Str""),is(true));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
}",0.6295857988165681
160975,"@Test public void update_delete_with_sso_auth_succeeds(){
  final RpslObject ssomnt=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(ssomnt);
  final WhoisResources input=mapRpslObjects(new ActionRequest(ssomnt,Action.DELETE));
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(input,MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  assertThat(getErrorMessagesWithSeverity(response.getErrorMessages(),""String_Node_Str""),hasSize(0));
  assertThat(response.getWhoisObjects(),hasSize(1));
  assertThat(objectExists(ObjectType.MNTNER,""String_Node_Str""),is(false));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
}","@Test public void update_delete_with_sso_auth_succeeds(){
  final RpslObject ssomnt=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  RestTest.target(getPort(),""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").post(Entity.entity(mapRpslObjects(ssomnt),MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",SyncUpdateUtils.encode(""String_Node_Str"")).request().put(Entity.entity(mapRpslObjects(new ActionRequest(ssomnt,Action.DELETE)),MediaType.APPLICATION_JSON_TYPE),WhoisResources.class);
  assertThat(getErrorMessagesWithSeverity(response.getErrorMessages(),""String_Node_Str""),hasSize(0));
  assertThat(response.getWhoisObjects(),hasSize(1));
  assertThat(objectExists(ObjectType.MNTNER,""String_Node_Str""),is(false));
  assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
}",0.453071253071253
160976,"private boolean containsRpslMntner(final RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.MNT_BY)) {
    return false;
  }
  for (  RpslAttribute mntBy : rpslObject.findAttributes(AttributeType.MNT_BY)) {
    if (mntBy.getCleanValue().equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","private boolean containsRpslMntner(final RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.MNT_BY)) {
    return false;
  }
  for (  RpslAttribute mntBy : rpslObject.findAttributes(AttributeType.MNT_BY)) {
    for (    CIString mntByStr : mntBy.getCleanValues()) {
      if (mntByStr.equals(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}",0.903846153846154
160977,"private WhoisResources performUpdates(final HttpServletRequest request,final UpdateContext updateContext,final Collection<Update> updates){
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setWhoisObjects(Lists.<WhoisObject>newArrayList());
  final List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Update update : updates) {
    for (    Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message));
    }
    for (    Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
      RpslAttribute rpslAttribute=entry.getKey();
      for (      Message message : entry.getValue().getAllMessages()) {
        errorMessages.add(new ErrorMessage(message,rpslAttribute));
      }
    }
  }
  if (!errorMessages.isEmpty()) {
    whoisResources.setErrorMessages(errorMessages);
  }
  for (  Update update : updates) {
    final PreparedUpdate preparedUpdate=updateContext.getPreparedUpdate(update);
    if (preparedUpdate != null) {
      final WhoisObject whoisObject=whoisObjectMapper.map(preparedUpdate.getUpdatedObject(),RestServiceHelper.getServerAttributeMapper(request.getQueryString()));
      whoisResources.getWhoisObjects().add(whoisObject);
    }
  }
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","private WhoisResources performUpdates(final HttpServletRequest request,final UpdateContext updateContext,final Collection<Update> updates){
  final WhoisResources whoisResources=new WhoisResources();
  final List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Update update : updates) {
    for (    Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message));
    }
    for (    Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
      RpslAttribute rpslAttribute=entry.getKey();
      for (      Message message : entry.getValue().getAllMessages()) {
        errorMessages.add(new ErrorMessage(message,rpslAttribute));
      }
    }
  }
  final List<WhoisObject> whoisObjects=Lists.newArrayList();
  for (  Update update : updates) {
    final PreparedUpdate preparedUpdate=updateContext.getPreparedUpdate(update);
    if (preparedUpdate == null || (preparedUpdate.getAction() == Action.DELETE && updateContext.getStatus(update) != UpdateStatus.SUCCESS)) {
      continue;
    }
    whoisObjects.add(whoisObjectMapper.map(preparedUpdate.getUpdatedObject(),RestServiceHelper.getServerAttributeMapper(request.getQueryString())));
  }
  if (!whoisObjects.isEmpty()) {
    whoisResources.setWhoisObjects(whoisObjects);
  }
  if (!errorMessages.isEmpty()) {
    whoisResources.setErrorMessages(errorMessages);
  }
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.335620354488279
160978,"@Test public void create_self_referencing_maintainer_sso_auth_only_invalid_token(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").post(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,SSO_ONLY_MNT),MediaType.APPLICATION_XML),WhoisResources.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    final WhoisResources whoisResources=RestTest.mapClientException(e);
    RestTest.assertErrorCount(whoisResources,2);
    RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void create_self_referencing_maintainer_sso_auth_only_invalid_token(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").post(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,SSO_ONLY_MNT),MediaType.APPLICATION_XML),WhoisResources.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    final WhoisResources whoisResources=RestTest.mapClientException(e);
    RestTest.assertErrorCount(whoisResources,1);
    RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    RestTest.assertInfoCount(whoisResources,1);
    RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  }
}",0.968671679197995
160979,"@Test public void update_noop_with_override(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  databaseHelper.insertUser(User.createWithPlainTextPassword(""String_Node_Str"",""String_Node_Str"",ObjectType.PERSON));
  WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,PAULETH_PALTHEN),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertErrorCount(whoisResources,2);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),containsInAnyOrder(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}","@Test public void update_noop_with_override(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  databaseHelper.insertUser(User.createWithPlainTextPassword(""String_Node_Str"",""String_Node_Str"",ObjectType.PERSON));
  WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,PAULETH_PALTHEN),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertWarningCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  RestTest.assertInfoCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),containsInAnyOrder(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}",0.9797979797979798
160980,"@Test public void update_noop(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,PAULETH_PALTHEN),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertErrorCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),containsInAnyOrder(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}","@Test public void update_noop(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,PAULETH_PALTHEN),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertWarningCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),containsInAnyOrder(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}",0.9951807228915662
160981,"@Test public void delete_self_referencing_maintainer_with_sso_auth_attribute_invalid_token_authenticated_with_password_succeeds() throws Exception {
  databaseHelper.addObject(SSO_AND_PASSWORD_MNT);
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").delete(WhoisResources.class);
  RestTest.assertErrorCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  assertThat(whoisResources.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  try {
    databaseHelper.lookupObject(ObjectType.MNTNER,""String_Node_Str"");
    fail();
  }
 catch (  EmptyResultDataAccessException ignored) {
  }
}","@Test public void delete_self_referencing_maintainer_with_sso_auth_attribute_invalid_token_authenticated_with_password_succeeds() throws Exception {
  databaseHelper.addObject(SSO_AND_PASSWORD_MNT);
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").request().cookie(""String_Node_Str"",""String_Node_Str"").delete(WhoisResources.class);
  RestTest.assertInfoCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  assertThat(whoisResources.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  try {
    databaseHelper.lookupObject(ObjectType.MNTNER,""String_Node_Str"");
    fail();
  }
 catch (  EmptyResultDataAccessException ignored) {
  }
}",0.9949238578680204
160982,"@Test public void update_with_override_succeeds(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  databaseHelper.insertUser(User.createWithPlainTextPassword(""String_Node_Str"",""String_Node_Str"",ObjectType.PERSON));
  final RpslObject updatedObject=new RpslObjectBuilder(PAULETH_PALTHEN).append(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).sort().get();
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,updatedObject),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertErrorCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}","@Test public void update_with_override_succeeds(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  databaseHelper.insertUser(User.createWithPlainTextPassword(""String_Node_Str"",""String_Node_Str"",ObjectType.PERSON));
  final RpslObject updatedObject=new RpslObjectBuilder(PAULETH_PALTHEN).append(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).sort().get();
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,updatedObject),MediaType.APPLICATION_XML),WhoisResources.class);
  RestTest.assertInfoCount(whoisResources,1);
  RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"");
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject object=whoisResources.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(whoisResources.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}",0.9972367209088118
160983,"@Test public void update_person_with_invalid_crowd_token_fails(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  final RpslObject updatedObject=new RpslObjectBuilder(PAULETH_PALTHEN).append(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).sort().get();
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).cookie(""String_Node_Str"",""String_Node_Str"").put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,updatedObject),MediaType.APPLICATION_XML),WhoisResources.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    final WhoisResources whoisResources=RestTest.mapClientException(e);
    RestTest.assertErrorCount(whoisResources,2);
    RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void update_person_with_invalid_crowd_token_fails(){
  databaseHelper.addObject(PAULETH_PALTHEN);
  final RpslObject updatedObject=new RpslObjectBuilder(PAULETH_PALTHEN).append(new RpslAttribute(AttributeType.REMARKS,""String_Node_Str"")).sort().get();
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).cookie(""String_Node_Str"",""String_Node_Str"").put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,updatedObject),MediaType.APPLICATION_XML),WhoisResources.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    final WhoisResources whoisResources=RestTest.mapClientException(e);
    RestTest.assertErrorCount(whoisResources,1);
    RestTest.assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    RestTest.assertInfoCount(whoisResources,1);
    RestTest.assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"");
  }
}",0.9272183449651048
160984,"@Test public void update_person_with_non_latin_chars() throws Exception {
{
    final RpslObject update=new RpslObjectBuilder(TEST_PERSON).replaceAttribute(TEST_PERSON.findAttribute(AttributeType.ADDRESS),new RpslAttribute(AttributeType.ADDRESS,""String_Node_Str"")).sort().get();
    final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").request().put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,update),MediaType.APPLICATION_XML),WhoisResources.class);
    RestTest.assertErrorCount(response,1);
    RestTest.assertErrorMessage(response,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final RpslObject lookupObject=databaseHelper.lookupObject(ObjectType.PERSON,""String_Node_Str"");
    assertThat(lookupObject.findAttribute(AttributeType.ADDRESS).getValue(),is(""String_Node_Str""));
  }
{
    final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
    assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  }
}","@Test public void update_person_with_non_latin_chars() throws Exception {
{
    final RpslObject update=new RpslObjectBuilder(TEST_PERSON).replaceAttribute(TEST_PERSON.findAttribute(AttributeType.ADDRESS),new RpslAttribute(AttributeType.ADDRESS,""String_Node_Str"")).sort().get();
    final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").request().put(Entity.entity(whoisObjectMapper.mapRpslObjects(FormattedClientAttributeMapper.class,update),MediaType.APPLICATION_XML),WhoisResources.class);
    RestTest.assertWarningCount(response,1);
    RestTest.assertErrorMessage(response,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final RpslObject lookupObject=databaseHelper.lookupObject(ObjectType.PERSON,""String_Node_Str"");
    assertThat(lookupObject.findAttribute(AttributeType.ADDRESS).getValue(),is(""String_Node_Str""));
  }
{
    final WhoisResources response=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
    assertThat(response.getWhoisObjects().get(0).getAttributes(),hasItem(new Attribute(""String_Node_Str"",""String_Node_Str"")));
  }
}",0.9945994599459946
160985,"/** 
 * Update one or more objects together (in the same transaction). If any update fails, then all changes are cancelled (rolled back). If any update fails, the response will contain all (attempted) changes up to, and including, that update. Any error message will refer to the last attempted update.
 */
@PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response update(final WhoisResources resource,@PathParam(""String_Node_Str"") final String sourceParam,@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey,@QueryParam(""String_Node_Str"") final String override){
  if (resource == null) {
    return badRequest(""String_Node_Str"");
  }
  if (Strings.isNullOrEmpty(override)) {
    return badRequest(""String_Node_Str"");
  }
  checkForMainSource(request,sourceParam);
  try {
    final WhoisResources updatedResources=performUpdates(request,convertToActionRequests(resource),passwords,crowdTokenKey,override);
    return createResponse(request,updatedResources,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
    final Response response=e.getResponse();
switch (response.getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,resource,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,resource,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR);
}
}","@PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response update(final WhoisResources resource,@PathParam(""String_Node_Str"") final String sourceParam,@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final String override){
  if (resource == null) {
    return badRequest(""String_Node_Str"");
  }
  if (Strings.isNullOrEmpty(override)) {
    return badRequest(""String_Node_Str"");
  }
  checkForMainSource(request,sourceParam);
  try {
    final WhoisResources updatedResources=performUpdates(request,convertToActionRequests(resource),Collections.<String>emptyList(),""String_Node_Str"",override,SsoAuthForm.ACCOUNT);
    return createResponse(request,updatedResources,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
    final Response response=e.getResponse();
switch (response.getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,resource,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,resource,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR);
}
}",0.6730123180291153
160986,"/** 
 * Update multiple objects in the database. Rollback if any update fails.
 */
private WhoisResources performUpdates(final HttpServletRequest request,final List<ActionRequest> actionRequests,final List<String> passwords,final String crowdTokenKey,final String override){
  try {
    final Origin origin=updatePerformer.createOrigin(request);
    final UpdateContext updateContext=updatePerformer.initContext(origin,crowdTokenKey);
    updateContext.batchUpdate();
    auditlogRequest(request);
    final List<Update> updates=Lists.newArrayList();
    for (    ActionRequest actionRequest : actionRequests) {
      final String deleteReason=Action.DELETE.equals(actionRequest.getAction()) ? ""String_Node_Str"" : null;
      updates.add(updatePerformer.createUpdate(updateContext,actionRequest.getRpslObject(),passwords,deleteReason,override));
    }
    final WhoisResources whoisResources=updatePerformer.performUpdates(updateContext,origin,updates,Keyword.NONE,request);
    for (    Update update : updates) {
      final UpdateStatus status=updateContext.getStatus(update);
      if (status == UpdateStatus.SUCCESS) {
      }
 else       if (status == UpdateStatus.FAILED_AUTHENTICATION) {
        throw new ReferenceUpdateFailedException(Response.Status.UNAUTHORIZED,whoisResources);
      }
 else       if (status == UpdateStatus.EXCEPTION) {
        throw new ReferenceUpdateFailedException(Response.Status.INTERNAL_SERVER_ERROR,whoisResources);
      }
 else       if (updateContext.getMessages(update).contains(UpdateMessages.newKeywordAndObjectExists())) {
        throw new ReferenceUpdateFailedException(Response.Status.CONFLICT,whoisResources);
      }
 else {
        throw new ReferenceUpdateFailedException(Response.Status.BAD_REQUEST,whoisResources);
      }
    }
    return whoisResources;
  }
 catch (  ReferenceUpdateFailedException e) {
    throw e;
  }
catch (  Exception e) {
    updatePerformer.logError(e);
    throw e;
  }
 finally {
    updatePerformer.closeContext();
  }
}","/** 
 * Update multiple objects in the database. Rollback if any update fails.
 */
private WhoisResources performUpdates(final HttpServletRequest request,final List<ActionRequest> actionRequests,final List<String> passwords,final String crowdTokenKey,final String override,final SsoAuthForm ssoAuthForm){
  try {
    final Origin origin=updatePerformer.createOrigin(request);
    final UpdateContext updateContext=updatePerformer.initContext(origin,crowdTokenKey);
    updateContext.batchUpdate();
    auditlogRequest(request);
    final List<Update> updates=Lists.newArrayList();
    for (    ActionRequest actionRequest : actionRequests) {
      final String deleteReason=Action.DELETE.equals(actionRequest.getAction()) ? ""String_Node_Str"" : null;
      final RpslObject originalObject;
      if (ssoAuthForm == SsoAuthForm.UUID) {
        ssoTranslator.populateCacheAuthToUsername(updateContext,actionRequest.getRpslObject());
        originalObject=ssoTranslator.translateFromCacheAuthToUsername(updateContext,actionRequest.getRpslObject());
      }
 else {
        originalObject=actionRequest.getRpslObject();
      }
      updates.add(updatePerformer.createUpdate(updateContext,originalObject,passwords,deleteReason,override));
    }
    final WhoisResources whoisResources=updatePerformer.performUpdates(updateContext,origin,updates,Keyword.NONE,request);
    for (    Update update : updates) {
      final UpdateStatus status=updateContext.getStatus(update);
      if (status == UpdateStatus.SUCCESS) {
      }
 else       if (status == UpdateStatus.FAILED_AUTHENTICATION) {
        throw new ReferenceUpdateFailedException(Response.Status.UNAUTHORIZED,whoisResources);
      }
 else       if (status == UpdateStatus.EXCEPTION) {
        throw new ReferenceUpdateFailedException(Response.Status.INTERNAL_SERVER_ERROR,whoisResources);
      }
 else       if (updateContext.getMessages(update).contains(UpdateMessages.newKeywordAndObjectExists())) {
        throw new ReferenceUpdateFailedException(Response.Status.CONFLICT,whoisResources);
      }
 else {
        throw new ReferenceUpdateFailedException(Response.Status.BAD_REQUEST,whoisResources);
      }
    }
    return whoisResources;
  }
 catch (  ReferenceUpdateFailedException e) {
    throw e;
  }
catch (  Exception e) {
    updatePerformer.logError(e);
    throw e;
  }
 finally {
    updatePerformer.closeContext();
  }
}",0.8778712758699113
160987,"/** 
 * Delete an object, and also any incoming referencing objects (which must be a closed group).
 * @param sourceParam
 * @param objectTypeParam
 * @param keyParam
 */
@DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String sourceParam,@PathParam(""String_Node_Str"") final String objectTypeParam,@PathParam(""String_Node_Str"") final String keyParam,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  checkForMainSource(request,sourceParam);
  final RpslObject primaryObject=lookupObjectByKey(keyParam,objectTypeParam);
  final Map<RpslObjectInfo,RpslObject> references=findReferences(primaryObject);
  validateReferences(primaryObject,references);
  try {
    if (references.isEmpty()) {
      performUpdate(request,primaryObject,reason,passwords,crowdTokenKey);
      return createResponse(request,primaryObject,Response.Status.OK);
    }
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final Set<RpslObject> allObjects=Sets.newHashSet(Iterables.concat(references.values(),Lists.newArrayList(primaryObject)));
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.MODIFY));
    for (    final RpslObject rpslObject : allObjects) {
      if (!rpslObject.getType().equals(ObjectType.MNTNER)) {
        actionRequests.add(new ActionRequest(rpslObject,Action.DELETE));
      }
    }
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.DELETE));
    performUpdates(request,actionRequests,passwords,crowdTokenKey,null);
    return createResponse(request,allObjects,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
switch (e.getResponse().getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,primaryObject,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,primaryObject,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR);
}
}","@DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String sourceParam,@PathParam(""String_Node_Str"") final String objectTypeParam,@PathParam(""String_Node_Str"") final String keyParam,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  checkForMainSource(request,sourceParam);
  final RpslObject primaryObject=lookupObjectByKey(keyParam,objectTypeParam);
  final Map<RpslObjectInfo,RpslObject> references=findReferences(primaryObject);
  validateReferences(primaryObject,references);
  try {
    if (references.isEmpty()) {
      performUpdate(request,primaryObject,reason,passwords,crowdTokenKey);
      return createResponse(request,primaryObject,Response.Status.OK);
    }
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final Set<RpslObject> allObjects=Sets.newHashSet(Iterables.concat(references.values(),Lists.newArrayList(primaryObject)));
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.MODIFY));
    for (    final RpslObject rpslObject : allObjects) {
      if (!rpslObject.getType().equals(ObjectType.MNTNER)) {
        actionRequests.add(new ActionRequest(rpslObject,Action.DELETE));
      }
    }
    actionRequests.add(new ActionRequest(replaceReferencesInMntner(allObjects),Action.DELETE));
    performUpdates(request,actionRequests,passwords,crowdTokenKey,null,SsoAuthForm.UUID);
    return createResponse(request,allObjects,Response.Status.OK);
  }
 catch (  WebApplicationException e) {
switch (e.getResponse().getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,primaryObject,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,primaryObject,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,primaryObject,Response.Status.INTERNAL_SERVER_ERROR);
}
}",0.9640672782874616
160988,"@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response create(final WhoisResources resource,@PathParam(""String_Node_Str"") final String sourceParam,@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (resource == null) {
    return badRequest(""String_Node_Str"");
  }
  checkForMainSource(request,sourceParam);
  try {
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final RpslObject mntner=createMntnerWithDummyAdminC(resource);
    actionRequests.add(new ActionRequest(mntner,Action.CREATE));
    final RpslObject person=createPerson(resource);
    actionRequests.add(new ActionRequest(person,Action.CREATE));
    final RpslObject updatedMntner=replaceAdminC(mntner,""String_Node_Str"");
    actionRequests.add(new ActionRequest(updatedMntner,Action.MODIFY));
    final WhoisResources whoisResources=performUpdates(request,actionRequests,passwords,crowdTokenKey,null);
    return createResponse(request,filterWhoisObjects(whoisResources),Response.Status.OK);
  }
 catch (  WebApplicationException e) {
    final Response response=e.getResponse();
switch (response.getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,resource,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,resource,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR);
}
}","@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response create(final WhoisResources resource,@PathParam(""String_Node_Str"") final String sourceParam,@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (resource == null) {
    return badRequest(""String_Node_Str"");
  }
  checkForMainSource(request,sourceParam);
  try {
    final List<ActionRequest> actionRequests=Lists.newArrayList();
    final RpslObject mntner=createMntnerWithDummyAdminC(resource);
    actionRequests.add(new ActionRequest(mntner,Action.CREATE));
    final RpslObject person=createPerson(resource);
    actionRequests.add(new ActionRequest(person,Action.CREATE));
    final RpslObject updatedMntner=replaceAdminC(mntner,""String_Node_Str"");
    actionRequests.add(new ActionRequest(updatedMntner,Action.MODIFY));
    final WhoisResources whoisResources=performUpdates(request,actionRequests,passwords,crowdTokenKey,null,SsoAuthForm.ACCOUNT);
    return createResponse(request,filterWhoisObjects(whoisResources),Response.Status.OK);
  }
 catch (  WebApplicationException e) {
    final Response response=e.getResponse();
switch (response.getStatus()) {
case HttpStatus.UNAUTHORIZED_401:
      throw new NotAuthorizedException(createResponse(request,resource,Response.Status.UNAUTHORIZED));
case HttpStatus.INTERNAL_SERVER_ERROR_500:
    throw new InternalServerErrorException(createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR));
default :
  throw new BadRequestException(createResponse(request,resource,Response.Status.BAD_REQUEST));
}
}
catch (ReferenceUpdateFailedException e) {
return createResponse(request,e.whoisResources,e.status);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
return createResponse(request,resource,Response.Status.INTERNAL_SERVER_ERROR);
}
}",0.9949924887330996
160989,"public String loadSplitFiles(String... filenames){
  Result result=new Result();
  for (  String filename : filenames) {
    File file=new File(filename);
    if (!file.isFile()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    if (!file.exists()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    runPass(result,filename,1);
    runPass(result,filename,2);
  }
  result.addText(String.format(""String_Node_Str"",result.getSuccess(),result.getFail()));
  return result.toString();
}","public String loadSplitFiles(String... filenames){
  Result result=new Result();
  for (  String filename : filenames) {
    File file=new File(filename);
    if (!file.isFile()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    if (!file.exists()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    runPass(result,filename,1);
    runPass(result,filename,2);
  }
  result.addText(String.format(""String_Node_Str"",result.getSuccess(),result.getFailPass1(),result.getFailPass2()));
  return result.toString();
}",0.9767441860465116
160990,"@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObject(RpslObject rpslObject,Result result,int pass){
  try {
    if (pass == 1) {
      checkForReservedNicHandle(rpslObject);
      rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
      rpslObjectUpdateDao.createObject(rpslObject);
    }
 else {
      final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
      rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
      claimIds(rpslObject);
      result.addSuccess();
    }
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter));
  }
}","@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObject(RpslObject rpslObject,Result result,int pass){
  try {
    if (pass == 1) {
      checkForReservedNicHandle(rpslObject);
      rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
      rpslObjectUpdateDao.createObject(rpslObject);
    }
 else {
      final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
      rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
      claimIds(rpslObject);
      result.addSuccess();
    }
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter),pass);
  }
}",0.9971799210377892
160991,"public void addFail(String reason){
  text.append(reason);
  fail.incrementAndGet();
}","public void addFail(final String reason,final int pass){
  text.append(reason);
  if (pass == 1) {
    failPass1.incrementAndGet();
  }
  if (pass == 2) {
    failPass2.incrementAndGet();
  }
}",0.6164874551971327
160992,"@Test public void testSplitFileWithErrorsAdded() throws Exception {
  bootstrap.setDumpFileLocation(applicationContext.getResource(""String_Node_Str"").getURI().getPath());
  final String bootstrapLoadResults=bootstrap.bootstrap();
  assertThat(bootstrapLoadResults,containsString(""String_Node_Str""));
  final Database bootstrapLoad=new Database(whoisTemplate);
  final String additionalLoadResults=bootstrap.loadTextDump(new String[]{applicationContext.getResource(""String_Node_Str"").getURI().getPath()});
  assertThat(additionalLoadResults,containsString(""String_Node_Str""));
  assertThat(additionalLoadResults,containsString(""String_Node_Str"" + ""String_Node_Str""));
  assertThat(additionalLoadResults,containsString(""String_Node_Str""));
  final Database additionalLoad=new Database(whoisTemplate);
  System.out.println(""String_Node_Str"" + additionalLoad);
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(10));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(5));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(5));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(2));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(2));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(3));
  final DatabaseDiff diff=Database.diff(bootstrapLoad,additionalLoad);
  System.out.println(""String_Node_Str"" + diff);
  assertThat(diff.getRemoved().getAll(),hasSize(0));
  assertThat(diff.getModified().getAll(),hasSize(0));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(2));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(1));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(1));
}","@Test public void testSplitFileWithErrorsAdded() throws Exception {
  bootstrap.setDumpFileLocation(applicationContext.getResource(""String_Node_Str"").getURI().getPath());
  final String bootstrapLoadResults=bootstrap.bootstrap();
  assertThat(bootstrapLoadResults,containsString(""String_Node_Str""));
  final Database bootstrapLoad=new Database(whoisTemplate);
  final String additionalLoadResults=bootstrap.loadTextDump(new String[]{applicationContext.getResource(""String_Node_Str"").getURI().getPath()});
  assertThat(additionalLoadResults,containsString(""String_Node_Str""));
  assertThat(additionalLoadResults,containsString(""String_Node_Str"" + ""String_Node_Str""));
  assertThat(additionalLoadResults,containsString(""String_Node_Str""));
  final Database additionalLoad=new Database(whoisTemplate);
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(10));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(5));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(5));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(2));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(2));
  assertThat(additionalLoad.getTable(""String_Node_Str""),hasSize(3));
  final DatabaseDiff diff=Database.diff(bootstrapLoad,additionalLoad);
  assertThat(diff.getRemoved().getAll(),hasSize(0));
  assertThat(diff.getModified().getAll(),hasSize(0));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(2));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(1));
  assertThat(diff.getAdded().getTable(""String_Node_Str""),hasSize(1));
}",0.8109903381642513
160993,"@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObject(RpslObject rpslObject,Result result,int pass){
  try {
    if (pass == 1) {
      rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
      rpslObjectUpdateDao.createObject(rpslObject);
    }
 else {
      final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
      rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
      claimIds(rpslObject);
      result.addSuccess();
    }
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter));
  }
}","@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObject(RpslObject rpslObject,Result result,int pass){
  try {
    if (pass == 1) {
      checkForReservedNicHandle(rpslObject);
      rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
      rpslObjectUpdateDao.createObject(rpslObject);
    }
 else {
      final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
      rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
      claimIds(rpslObject);
      result.addSuccess();
    }
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter));
  }
}",0.9738827626233314
160994,abstract void resetDatabase();,void resetDatabase();,0.8235294117647058
160995,"abstract void loadSplitFiles(Result result,String... filenames);",String loadSplitFiles(String... filenames);,0.7476635514018691
160996,"@Override protected void resetDatabase(){
  sanityCheck(whoisTemplate);
  truncateTables(whoisTemplate);
  loadScripts(whoisTemplate,""String_Node_Str"");
}","@Override public void resetDatabase(){
  sanityCheck(whoisTemplate);
  truncateTables(whoisTemplate);
  loadScripts(whoisTemplate,""String_Node_Str"");
}",0.9639344262295082
160997,"@Override protected void loadSplitFiles(Result result,String... filenames){
  result.addText(""String_Node_Str"");
  for (  String filename : filenames) {
    File file=new File(filename);
    if (!file.isFile()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    if (!file.exists()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    runPassRisky(result,filename,1);
    runPassRisky(result,filename,2);
  }
}","@Override public String loadSplitFiles(String... filenames){
  final Result result=new Result();
  try {
    validateFiles(Arrays.asList(filenames));
    for (    String filename : filenames) {
      runPassRisky(result,filename,1);
      runPassRisky(result,filename,2);
    }
  }
 catch (  Exception e) {
    result.addText(String.format(""String_Node_Str"",e.getMessage()));
  }
 finally {
    result.addText(String.format(""String_Node_Str"",result.getSuccess(),result.getFailPass1(),result.getFailPass2()));
    if (result.getFailPass1() > 0 || result.getFailPass2() > 0) {
      result.addText(""String_Node_Str"");
    }
  }
  return result.toString();
}",0.2441150828247602
160998,"@Autowired public LoaderRisky(@Qualifier(""String_Node_Str"") final DataSource dataSource,final ObjectLoader objectLoader){
  super(dataSource,objectLoader);
}","@Autowired public LoaderRisky(@Qualifier(""String_Node_Str"") final DataSource dataSource,final ObjectLoader objectLoader){
  this.objectLoader=objectLoader;
  this.whoisTemplate=new JdbcTemplate(dataSource);
}",0.7671232876712328
160999,"@Override protected void resetDatabase(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void resetDatabase(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9468599033816424
161000,"@Autowired public LoaderSafe(@Qualifier(""String_Node_Str"") final DataSource dataSource,final ObjectLoader objectLoader){
  super(dataSource,objectLoader);
}","@Autowired public LoaderSafe(final ObjectLoader objectLoader){
  this.objectLoader=objectLoader;
}",0.6377952755905512
