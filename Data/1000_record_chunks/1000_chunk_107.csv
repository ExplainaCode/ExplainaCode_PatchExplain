record_number,buggy_code,fixed_code,code_similarity
106001,"@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  String storePassword=String.valueOf(_random.nextLong());
  byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
  assert(ksBits != null);
  if (ksBits == null) {
    s_logger.error(""String_Node_Str"");
  }
  cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  cmd.setEncryptorPassword(getEncryptorPassword());
  try {
    HostVO consoleProxyHost=findConsoleProxyHost(startupCmd);
    assert(consoleProxyHost != null);
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}","@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  String storePassword=String.valueOf(_random.nextLong());
  byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
  assert(ksBits != null);
  if (ksBits == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new CloudRuntimeException(msg);
  }
  cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  cmd.setEncryptorPassword(getEncryptorPassword());
  try {
    HostVO consoleProxyHost=findConsoleProxyHost(startupCmd);
    assert(consoleProxyHost != null);
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}",0.9650986342943856
106002,"@Override public String getUuid(){
  return this.uuid;
}","@Override public String getUuid(){
  return uuid;
}",0.9532710280373832
106003,"@Override public boolean equals(Object obj){
  if (obj instanceof DedicatedResourceVO) {
    return ((DedicatedResourceVO)obj).getId() == this.getId();
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object obj){
  if (obj instanceof DedicatedResourceVO) {
    return ((DedicatedResourceVO)obj).getId() == getId();
  }
 else {
    return false;
  }
}",0.986449864498645
106004,"public DedicatedResourceVO(long dedicatedResourceId){
  this.id=dedicatedResourceId;
}","public DedicatedResourceVO(long dedicatedResourceId){
  id=dedicatedResourceId;
}",0.9700598802395208
106005,"@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null && !ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}",0.9994249568717654
106006,"@Override public boolean applyStaticNats(List<? extends StaticNat> staticNats,boolean continueOnError,boolean forRevoke) throws ResourceUnavailableException {
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIps.add(publicIp);
    }
  }
  if (checkStaticNatIPAssocRequired(network,false,forRevoke,publicIps)) {
    applyIpAssociations(network,false,continueOnError,publicIps);
  }
  StaticNatServiceProvider element=_networkMgr.getStaticNatProviderForNetwork(network);
  try {
    success=element.applyStaticNats(network,staticNats);
  }
 catch (  ResourceUnavailableException e) {
    if (!continueOnError) {
      throw e;
    }
    s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str"",e);
    success=false;
  }
  for (  StaticNat staticNat : staticNats) {
    if (staticNat.isForRevoke()) {
      for (      PublicIp publicIp : publicIps) {
        if (publicIp.getId() == staticNat.getSourceIpAddressId()) {
          publicIps.remove(publicIp);
          IPAddressVO ip=_ipAddressDao.findByIdIncludingRemoved(staticNat.getSourceIpAddressId());
          ip.setAssociatedWithVmId(null);
          publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
          publicIps.add(publicIp);
          break;
        }
      }
    }
  }
  if (checkStaticNatIPAssocRequired(network,true,forRevoke,publicIps)) {
    applyIpAssociations(network,true,continueOnError,publicIps);
  }
  return success;
}","@Override public boolean applyStaticNats(List<? extends StaticNat> staticNats,boolean continueOnError,boolean forRevoke) throws ResourceUnavailableException {
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIps.add(publicIp);
    }
  }
  if (checkStaticNatIPAssocRequired(network,false,forRevoke,publicIps)) {
    applyIpAssociations(network,false,continueOnError,publicIps);
  }
  StaticNatServiceProvider element=_networkMgr.getStaticNatProviderForNetwork(network);
  try {
    success=element.applyStaticNats(network,staticNats);
  }
 catch (  ResourceUnavailableException e) {
    if (!continueOnError) {
      throw e;
    }
    s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str"",e);
    success=false;
  }
  for (  StaticNat staticNat : staticNats) {
    if (staticNat.isForRevoke()) {
      for (      PublicIp publicIp : publicIps) {
        if (publicIp.getId() == staticNat.getSourceIpAddressId()) {
          publicIps.remove(publicIp);
          IPAddressVO ip=_ipAddressDao.findByIdIncludingRemoved(staticNat.getSourceIpAddressId());
          ip.setAssociatedWithVmId(null);
          publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
          publicIps.add(publicIp);
          break;
        }
      }
    }
  }
  if (checkStaticNatIPAssocRequired(network,true,forRevoke,publicIps)) {
    applyIpAssociations(network,true,continueOnError,publicIps);
  }
  return success;
}",0.9416581371545548
106007,"@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}","@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null && !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}",0.9998286203941732
106008,"@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
}","@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
  boolean success=true;
  if (!cleanupIpResources(addrId,userId,caller)) {
    success=false;
    s_logger.warn(""String_Node_Str"" + addrId);
  }
  IPAddressVO ip=markIpAsUnavailable(addrId);
  if (ip == null) {
    String msg=""String_Node_Str"" + addrId + ""String_Node_Str"";
    s_logger.error(msg);
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + addrId + ""String_Node_Str""+ ip.isSourceNat());
  }
  if (ip.getAssociatedWithNetworkId() != null) {
    Network network=_networksDao.findById(ip.getAssociatedWithNetworkId());
    try {
      if (!applyIpAssociations(network,true)) {
        s_logger.warn(""String_Node_Str"" + network);
        success=false;
      }
    }
 catch (    ResourceUnavailableException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 else {
    if (ip.getState() == IpAddress.State.Releasing) {
      _ipAddressDao.unassignIpAddress(ip.getId());
    }
  }
  if (success) {
    if (ip.isPortable()) {
      releasePortableIpAddress(addrId);
    }
    s_logger.debug(""String_Node_Str"" + addrId);
  }
  return success;
}",0.1506849315068493
106009,"@DB @Override public IPAddressVO associateIPToGuestNetwork(long ipId,long networkId,boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    Network network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
          _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  if (ipToAssoc.getAssociatedWithNetworkId() != null) {
    s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    return ipToAssoc;
  }
  Network network=_networksDao.findById(networkId);
  if (network != null) {
    _accountMgr.checkAccess(owner,AccessType.UseNetwork,false,network);
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zone.getNetworkType() == NetworkType.Advanced) {
    if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Shared+ ""String_Node_Str""+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str""+ Service.StaticNat.getName()+ ""String_Node_Str""+ Service.Lb.getName()+ ""String_Node_Str""+ Service.PortForwarding.getName()+ ""String_Node_Str"");
    }
  }
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  boolean isSourceNat=false;
  if (!sharedSourceNat) {
    if (getExistingSourceNatInNetwork(owner.getId(),networkId) == null) {
      if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {
        isSourceNat=true;
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ network);
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(networkId);
  ip.setSourceNat(isSourceNat);
  _ipAddressDao.update(ipId,ip);
  boolean success=false;
  try {
    success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
    if (!success && releaseOnFailure) {
      if (ip != null) {
        try {
          s_logger.warn(""String_Node_Str"" + ip);
          _ipAddressDao.markAsUnavailable(ip.getId());
          if (!applyIpAssociations(network,true)) {
            _ipAddressDao.unassignIpAddress(ip.getId());
          }
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"",e);
        }
      }
    }
  }
}","@DB @Override public IPAddressVO associateIPToGuestNetwork(long ipId,long networkId,boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    Network network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
          _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  if (ipToAssoc.getAssociatedWithNetworkId() != null) {
    s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    return ipToAssoc;
  }
  Network network=_networksDao.findById(networkId);
  if (network != null) {
    _accountMgr.checkAccess(owner,AccessType.UseNetwork,false,network);
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zone.getNetworkType() == NetworkType.Advanced) {
    if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Shared+ ""String_Node_Str""+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str""+ Service.StaticNat.getName()+ ""String_Node_Str""+ Service.Lb.getName()+ ""String_Node_Str""+ Service.PortForwarding.getName()+ ""String_Node_Str"");
    }
  }
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  boolean isSourceNat=false;
  if (!sharedSourceNat) {
    if (getExistingSourceNatInNetwork(owner.getId(),networkId) == null) {
      if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {
        isSourceNat=true;
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ network);
  IPAddressVO ip=ipToAssoc;
  ip.setAssociatedWithNetworkId(networkId);
  ip.setSourceNat(isSourceNat);
  _ipAddressDao.update(ipId,ip);
  boolean success=false;
  try {
    success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
    if (!success && releaseOnFailure) {
      try {
        s_logger.warn(""String_Node_Str"" + ip);
        _ipAddressDao.markAsUnavailable(ip.getId());
        if (!applyIpAssociations(network,true)) {
          _ipAddressDao.unassignIpAddress(ip.getId());
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}",0.9470999223688588
106010,"@DB @Override public PublicIp assignDedicateIpAddress(Account owner,final Long guestNtwkId,final Long vpcId,final long dcId,final boolean isSourceNat) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  final long ownerId=owner.getId();
  PublicIp ip=null;
  try {
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        Account owner=_accountDao.acquireInLockTable(ownerId);
        if (owner == null) {
          ConcurrentOperationException ex=new ConcurrentOperationException(""String_Node_Str"");
          throw ex;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ownerId + ""String_Node_Str"");
        }
        PublicIp ip=fetchNewPublicIp(dcId,null,null,owner,VlanType.VirtualNetwork,guestNtwkId,isSourceNat,false,null,false,vpcId);
        IPAddressVO publicIp=ip.ip();
        markPublicIpAsAllocated(publicIp);
        _ipAddressDao.update(publicIp.getId(),publicIp);
        return ip;
      }
    }
);
    return ip;
  }
  finally {
    if (owner != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ownerId);
      }
      _accountDao.releaseFromLockTable(ownerId);
    }
    if (ip == null) {
      s_logger.error(""String_Node_Str"" + ownerId);
    }
  }
}","@DB @Override public PublicIp assignDedicateIpAddress(Account owner,final Long guestNtwkId,final Long vpcId,final long dcId,final boolean isSourceNat) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  if (owner == null) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  final long ownerId=owner.getId();
  PublicIp ip=null;
  try {
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        Account owner=_accountDao.acquireInLockTable(ownerId);
        if (owner == null) {
          ConcurrentOperationException ex=new ConcurrentOperationException(""String_Node_Str"");
          throw ex;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ownerId + ""String_Node_Str"");
        }
        PublicIp ip=fetchNewPublicIp(dcId,null,null,owner,VlanType.VirtualNetwork,guestNtwkId,isSourceNat,false,null,false,vpcId);
        IPAddressVO publicIp=ip.ip();
        markPublicIpAsAllocated(publicIp);
        _ipAddressDao.update(publicIp.getId(),publicIp);
        return ip;
      }
    }
);
    return ip;
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + ownerId);
    }
    _accountDao.releaseFromLockTable(ownerId);
    if (ip == null) {
      s_logger.error(""String_Node_Str"" + ownerId);
    }
  }
}",0.9425133689839572
106011,"@Override public Map<Service,Set<Provider>> getNetworkOfferingServiceProvidersMap(long networkOfferingId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<NetworkOfferingServiceMapVO> map=_ntwkOfferingSrvcDao.listByNetworkOfferingId(networkOfferingId);
  for (  NetworkOfferingServiceMapVO instance : map) {
    String service=instance.getService();
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(Service.getService(service),providers);
  }
  return serviceProviderMap;
}","@Override public Map<Service,Set<Provider>> getNetworkOfferingServiceProvidersMap(long networkOfferingId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<NetworkOfferingServiceMapVO> map=_ntwkOfferingSrvcDao.listByNetworkOfferingId(networkOfferingId);
  for (  NetworkOfferingServiceMapVO instance : map) {
    Service service=Network.Service.getService(instance.getService());
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(service,providers);
  }
  return serviceProviderMap;
}",0.9212543554006968
106012,"@Override public void checkNetworkPermissions(Account owner,Network network){
  if (network.getGuestType() != Network.GuestType.Shared || (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Account)) {
    AccountVO networkOwner=_accountDao.findById(network.getAccountId());
    if (networkOwner == null)     throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
    if (owner.getType() != Account.ACCOUNT_TYPE_PROJECT && networkOwner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      if (!_projectAccountDao.canAccessProjectAccount(owner.getAccountId(),network.getAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else {
      List<NetworkVO> networkMap=_networksDao.listBy(owner.getId(),network.getId());
      if (networkMap == null || networkMap.isEmpty()) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    if (!isNetworkAvailableInDomain(network.getId(),owner.getDomainId())) {
      throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str""+ owner.getDomainId());
    }
  }
}","@Override public void checkNetworkPermissions(Account owner,Network network){
  if (network == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (network.getGuestType() != Network.GuestType.Shared || (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Account)) {
    AccountVO networkOwner=_accountDao.findById(network.getAccountId());
    if (networkOwner == null)     throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
    if (owner.getType() != Account.ACCOUNT_TYPE_PROJECT && networkOwner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      if (!_projectAccountDao.canAccessProjectAccount(owner.getAccountId(),network.getAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else {
      List<NetworkVO> networkMap=_networksDao.listBy(owner.getId(),network.getId());
      if (networkMap == null || networkMap.isEmpty()) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    if (!isNetworkAvailableInDomain(network.getId(),owner.getDomainId())) {
      throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str""+ owner.getDomainId());
    }
  }
}",0.9721949623814196
106013,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> dbParams=_configDao.getConfiguration(params);
  _cidr=dbParams.get(Config.ControlCidr);
  if (_cidr == null) {
    _cidr=""String_Node_Str"";
  }
  _gateway=dbParams.get(Config.ControlGateway);
  if (_gateway == null) {
    _gateway=NetUtils.getLinkLocalGateway();
  }
  s_logger.info(""String_Node_Str"" + _cidr + ""String_Node_Str""+ _gateway);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> dbParams=_configDao.getConfiguration(params);
  _cidr=dbParams.get(Config.ControlCidr.toString());
  if (_cidr == null) {
    _cidr=""String_Node_Str"";
  }
  _gateway=dbParams.get(Config.ControlGateway.toString());
  if (_gateway == null) {
    _gateway=NetUtils.getLinkLocalGateway();
  }
  s_logger.info(""String_Node_Str"" + _cidr + ""String_Node_Str""+ _gateway);
  return true;
}",0.9791271347248576
106014,"@Override public Map<Service,Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<VpcOfferingServiceMapVO> map=_vpcOffSvcMapDao.listByVpcOffId(vpcOffId);
  for (  VpcOfferingServiceMapVO instance : map) {
    String service=instance.getService();
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(Service.getService(service),providers);
  }
  return serviceProviderMap;
}","@Override public Map<Service,Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<VpcOfferingServiceMapVO> map=_vpcOffSvcMapDao.listByVpcOffId(vpcOffId);
  for (  VpcOfferingServiceMapVO instance : map) {
    Service service=Service.getService(instance.getService());
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(service,providers);
  }
  return serviceProviderMap;
}",0.9206349206349206
106015,"private VMTemplateVO updateTemplateOrIso(BaseUpdateTemplateOrIsoCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isDynamicallyScalable=cmd.isDynamicallyScalable();
  Boolean isRoutingTemplate=cmd.isRoutingType();
  Boolean bootable=cmd.isBootable();
  Integer sortKey=cmd.getSortKey();
  Account account=CallContext.current().getCallingAccount();
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null || template.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  if (id == Long.valueOf(1)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  _accountMgr.checkAccess(account,AccessType.ModifyEntry,true,template);
  if (cmd.isRoutingType() != null) {
    if (!_accountService.isRootAdmin(account.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  boolean updateNeeded=!(name == null && displayText == null && format == null && guestOSId == null && passwordEnabled == null && bootable == null && sortKey == null && isDynamicallyScalable == null && isRoutingTemplate == null);
  if (!updateNeeded) {
    return template;
  }
  template=_tmpltDao.createForUpdate(id);
  if (name != null) {
    template.setName(name);
  }
  if (displayText != null) {
    template.setDisplayText(displayText);
  }
  if (sortKey != null) {
    template.setSortKey(sortKey);
  }
  ImageFormat imageFormat=null;
  if (format != null) {
    try {
      imageFormat=ImageFormat.valueOf(format.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    template.setFormat(imageFormat);
  }
  if (guestOSId != null) {
    GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
    if (guestOS == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      template.setGuestOSId(guestOSId);
    }
  }
  if (passwordEnabled != null) {
    template.setEnablePassword(passwordEnabled);
  }
  if (bootable != null) {
    template.setBootable(bootable);
  }
  if (isDynamicallyScalable != null) {
    template.setDynamicallyScalable(isDynamicallyScalable);
  }
  if (isRoutingTemplate != null) {
    if (isRoutingTemplate) {
      template.setTemplateType(TemplateType.ROUTING);
    }
 else {
      template.setTemplateType(TemplateType.USER);
    }
  }
  _tmpltDao.update(id,template);
  return _tmpltDao.findById(id);
}","private VMTemplateVO updateTemplateOrIso(BaseUpdateTemplateOrIsoCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isDynamicallyScalable=cmd.isDynamicallyScalable();
  Boolean isRoutingTemplate=cmd.isRoutingType();
  Boolean bootable=cmd.isBootable();
  Integer sortKey=cmd.getSortKey();
  Account account=CallContext.current().getCallingAccount();
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null || template.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  if (Long.valueOf(1).equals(id)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  _accountMgr.checkAccess(account,AccessType.ModifyEntry,true,template);
  if (cmd.isRoutingType() != null) {
    if (!_accountService.isRootAdmin(account.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  boolean updateNeeded=!(name == null && displayText == null && format == null && guestOSId == null && passwordEnabled == null && bootable == null && sortKey == null && isDynamicallyScalable == null && isRoutingTemplate == null);
  if (!updateNeeded) {
    return template;
  }
  template=_tmpltDao.createForUpdate(id);
  if (name != null) {
    template.setName(name);
  }
  if (displayText != null) {
    template.setDisplayText(displayText);
  }
  if (sortKey != null) {
    template.setSortKey(sortKey);
  }
  ImageFormat imageFormat=null;
  if (format != null) {
    try {
      imageFormat=ImageFormat.valueOf(format.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    template.setFormat(imageFormat);
  }
  if (guestOSId != null) {
    GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
    if (guestOS == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      template.setGuestOSId(guestOSId);
    }
  }
  if (passwordEnabled != null) {
    template.setEnablePassword(passwordEnabled);
  }
  if (bootable != null) {
    template.setBootable(bootable);
  }
  if (isDynamicallyScalable != null) {
    template.setDynamicallyScalable(isDynamicallyScalable);
  }
  if (isRoutingTemplate != null) {
    if (isRoutingTemplate) {
      template.setTemplateType(TemplateType.ROUTING);
    }
 else {
      template.setTemplateType(TemplateType.USER);
    }
  }
  _tmpltDao.update(id,template);
  return _tmpltDao.findById(id);
}",0.997064410291832
106016,"private String extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId != null && _dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,template);
  List<DataStore> ssStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
  TemplateDataStoreVO tmpltStoreRef=null;
  ImageStoreEntity tmpltStore=null;
  if (ssStores != null) {
    for (    DataStore store : ssStores) {
      tmpltStoreRef=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      if (tmpltStoreRef != null) {
        if (tmpltStoreRef.getDownloadState() == com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltStore=(ImageStoreEntity)store;
          break;
        }
      }
    }
  }
  if (tmpltStore == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  _tmpltSvr.syncTemplateToRegionStore(templateId,tmpltStore);
  TemplateInfo templateObject=_tmplFactory.getTemplate(templateId,tmpltStore);
  return tmpltStore.createEntityExtractUrl(templateObject.getInstallPath(),template.getFormat(),templateObject);
}","private String extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=(eventId == null ? 0 : eventId);
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId != null && _dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,template);
  List<DataStore> ssStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
  TemplateDataStoreVO tmpltStoreRef=null;
  ImageStoreEntity tmpltStore=null;
  if (ssStores != null) {
    for (    DataStore store : ssStores) {
      tmpltStoreRef=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      if (tmpltStoreRef != null) {
        if (tmpltStoreRef.getDownloadState() == com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltStore=(ImageStoreEntity)store;
          break;
        }
      }
    }
  }
  if (tmpltStore == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  _tmpltSvr.syncTemplateToRegionStore(templateId,tmpltStore);
  TemplateInfo templateObject=_tmplFactory.getTemplate(templateId,tmpltStore);
  return tmpltStore.createEntityExtractUrl(templateObject.getInstallPath(),template.getFormat(),templateObject);
}",0.99961962723469
106017,"PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficType,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel);","PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficType,String isolationMethod,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel);",0.9471264367816092
106018,"@Override public void create() throws ResourceAllocationException {
  PhysicalNetworkTrafficType result=_networkService.addTrafficTypeToPhysicalNetwork(getPhysicalNetworkId(),getTrafficType(),getXenLabel(),getKvmLabel(),getVmwareLabel(),getSimulatorLabel(),getVlan(),getHypervLabel());
  if (result != null) {
    setEntityId(result.getId());
    setEntityUuid(result.getUuid());
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void create() throws ResourceAllocationException {
  PhysicalNetworkTrafficType result=_networkService.addTrafficTypeToPhysicalNetwork(getPhysicalNetworkId(),getTrafficType(),getIsolationMethod(),getXenLabel(),getKvmLabel(),getVmwareLabel(),getSimulatorLabel(),getVlan(),getHypervLabel());
  if (result != null) {
    setEntityId(result.getId());
    setEntityUuid(result.getUuid());
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.978505629477994
106019,"private void locatePhysicalNetwork(){
  try {
    long id=_networkService.findPhysicalNetworkId(_zone.getId(),""String_Node_Str"",TrafficType.Guest);
    _znet=_networkService.getPhysicalNetwork(id);
    List<PhysicalNetworkVO> nets=_physicalNetworkDao.listByZoneAndTrafficType(_zone.getId(),TrafficType.Public);
    if (nets == null || nets.isEmpty()) {
      _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Public.toString(),null,null,null,null,null,null);
    }
  }
 catch (  InvalidParameterValueException e) {
    List<String> isolationMethods=new ArrayList<String>();
    isolationMethods.add(""String_Node_Str"");
    _znet=_networkService.createPhysicalNetwork(_zone.getId(),null,null,isolationMethods,BroadcastDomainRange.ZONE.toString(),_zone.getDomainId(),null,""String_Node_Str"");
    List<PhysicalNetworkVO> nets=_physicalNetworkDao.listByZoneAndTrafficType(_zone.getId(),TrafficType.Public);
    if (nets == null || nets.isEmpty()) {
      _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Public.toString(),null,null,null,null,null,null);
    }
  }
  if (_znet.getState() != PhysicalNetwork.State.Enabled) {
    _znet=_networkService.updatePhysicalNetwork(_znet.getId(),null,null,null,PhysicalNetwork.State.Enabled.toString());
  }
  Pair<List<? extends PhysicalNetworkTrafficType>,Integer> trafficTypes=_networkService.listTrafficTypes(_znet.getId());
  boolean found=false;
  for (  PhysicalNetworkTrafficType ttype : trafficTypes.first()) {
    if (ttype.getTrafficType() == TrafficType.Guest) {
      found=true;
    }
  }
  if (!found) {
    _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Guest.toString(),null,null,null,null,null,null);
  }
  Pair<List<? extends PhysicalNetworkServiceProvider>,Integer> providers=_networkService.listNetworkServiceProviders(_znet.getId(),Provider.JuniperContrailRouter.getName(),null,null,null);
  if (providers.second() == 0) {
    s_logger.debug(""String_Node_Str"" + Provider.JuniperContrailRouter.getName() + ""String_Node_Str""+ _znet.getName());
    PhysicalNetworkServiceProvider provider=_networkService.addProviderToPhysicalNetwork(_znet.getId(),Provider.JuniperContrailRouter.getName(),null,null);
    _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Enabled.toString(),null);
  }
 else {
    PhysicalNetworkServiceProvider provider=providers.first().get(0);
    if (provider.getState() != PhysicalNetworkServiceProvider.State.Enabled) {
      _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Enabled.toString(),null);
    }
  }
  providers=_networkService.listNetworkServiceProviders(_znet.getId(),null,PhysicalNetworkServiceProvider.State.Enabled.toString(),null,null);
  s_logger.debug(_znet.getName() + ""String_Node_Str"" + providers.second().toString()+ ""String_Node_Str"");
  for (  PhysicalNetworkServiceProvider provider : providers.first()) {
    if (provider.getProviderName().equals(Provider.JuniperContrailRouter.getName())) {
      continue;
    }
    s_logger.debug(""String_Node_Str"" + provider.getProviderName());
    _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Disabled.toString(),null);
  }
}","private void locatePhysicalNetwork(){
  try {
    long id=_networkService.findPhysicalNetworkId(_zone.getId(),""String_Node_Str"",TrafficType.Guest);
    _znet=_networkService.getPhysicalNetwork(id);
    List<PhysicalNetworkVO> nets=_physicalNetworkDao.listByZoneAndTrafficType(_zone.getId(),TrafficType.Public);
    if (nets == null || nets.isEmpty()) {
      _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Public.toString(),""String_Node_Str"",null,null,null,null,null,null);
    }
  }
 catch (  InvalidParameterValueException e) {
    List<String> isolationMethods=new ArrayList<String>();
    isolationMethods.add(""String_Node_Str"");
    _znet=_networkService.createPhysicalNetwork(_zone.getId(),null,null,isolationMethods,BroadcastDomainRange.ZONE.toString(),_zone.getDomainId(),null,""String_Node_Str"");
    List<PhysicalNetworkVO> nets=_physicalNetworkDao.listByZoneAndTrafficType(_zone.getId(),TrafficType.Public);
    if (nets == null || nets.isEmpty()) {
      _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Public.toString(),""String_Node_Str"",null,null,null,null,null,null);
    }
  }
  if (_znet.getState() != PhysicalNetwork.State.Enabled) {
    _znet=_networkService.updatePhysicalNetwork(_znet.getId(),null,null,null,PhysicalNetwork.State.Enabled.toString());
  }
  Pair<List<? extends PhysicalNetworkTrafficType>,Integer> trafficTypes=_networkService.listTrafficTypes(_znet.getId());
  boolean found=false;
  for (  PhysicalNetworkTrafficType ttype : trafficTypes.first()) {
    if (ttype.getTrafficType() == TrafficType.Guest) {
      found=true;
    }
  }
  if (!found) {
    _networkService.addTrafficTypeToPhysicalNetwork(_znet.getId(),TrafficType.Guest.toString(),""String_Node_Str"",null,null,null,null,null,null);
  }
  Pair<List<? extends PhysicalNetworkServiceProvider>,Integer> providers=_networkService.listNetworkServiceProviders(_znet.getId(),Provider.JuniperContrailRouter.getName(),null,null,null);
  if (providers.second() == 0) {
    s_logger.debug(""String_Node_Str"" + Provider.JuniperContrailRouter.getName() + ""String_Node_Str""+ _znet.getName());
    PhysicalNetworkServiceProvider provider=_networkService.addProviderToPhysicalNetwork(_znet.getId(),Provider.JuniperContrailRouter.getName(),null,null);
    _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Enabled.toString(),null);
  }
 else {
    PhysicalNetworkServiceProvider provider=providers.first().get(0);
    if (provider.getState() != PhysicalNetworkServiceProvider.State.Enabled) {
      _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Enabled.toString(),null);
    }
  }
  providers=_networkService.listNetworkServiceProviders(_znet.getId(),null,PhysicalNetworkServiceProvider.State.Enabled.toString(),null,null);
  s_logger.debug(_znet.getName() + ""String_Node_Str"" + providers.second().toString()+ ""String_Node_Str"");
  for (  PhysicalNetworkServiceProvider provider : providers.first()) {
    if (provider.getProviderName().equals(Provider.JuniperContrailRouter.getName())) {
      continue;
    }
    s_logger.debug(""String_Node_Str"" + provider.getProviderName());
    _networkService.updateNetworkServiceProvider(provider.getId(),PhysicalNetworkServiceProvider.State.Disabled.toString(),null);
  }
}",0.9918723660445514
106020,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  final Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String ip6Dns1=cmd.getIp6Dns1();
  String ip6Dns2=cmd.getIp6Dns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String guestCidr=cmd.getGuestCidrAddress();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  final Boolean isPublic=cmd.isPublic();
  final String allocationStateStr=cmd.getAllocationState();
  final String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Boolean localStorageEnabled=cmd.getLocalStorageEnabled();
  final Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  final DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (ip6Dns1 == null) {
    ip6Dns1=zone.getIp6Dns1();
  }
  if (ip6Dns2 == null) {
    ip6Dns2=zone.getIp6Dns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (internalDns2 == null) {
    internalDns2=zone.getInternalDns2();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr,ip6Dns1,ip6Dns2);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setIp6Dns1(ip6Dns1);
  zone.setIp6Dns2(ip6Dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (localStorageEnabled != null) {
    zone.setLocalStorageEnabled(localStorageEnabled.booleanValue());
  }
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      zone.setDomain(null);
    }
 else {
      zone.setDomain(networkDomain);
    }
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      Map<String,String> updatedDetails=new HashMap<String,String>();
      _zoneDao.loadDetails(zone);
      if (zone.getDetails() != null) {
        updatedDetails.putAll(zone.getDetails());
      }
      updatedDetails.putAll(newDetails);
      zone.setDetails(updatedDetails);
      if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
        Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
        if (allocationState == Grouping.AllocationState.Enabled) {
          try {
            PhysicalNetwork mgmtPhyNetwork;
            mgmtPhyNetwork=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Management);
            if (NetworkType.Advanced == zone.getNetworkType() && !zone.isSecurityGroupEnabled()) {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Public);
            }
            try {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Storage);
            }
 catch (            InvalidParameterValueException noStorage) {
              PhysicalNetworkTrafficTypeVO mgmtTraffic=_trafficTypeDao.findBy(mgmtPhyNetwork.getId(),TrafficType.Management);
              _networkSvc.addTrafficTypeToPhysicalNetwork(mgmtPhyNetwork.getId(),TrafficType.Storage.toString(),mgmtTraffic.getXenNetworkLabel(),mgmtTraffic.getKvmNetworkLabel(),mgmtTraffic.getVmwareNetworkLabel(),mgmtTraffic.getSimulatorNetworkLabel(),mgmtTraffic.getVlan(),mgmtTraffic.getHypervNetworkLabel());
              s_logger.info(""String_Node_Str"" + mgmtPhyNetwork.getId() + ""String_Node_Str"");
            }
          }
 catch (          InvalidParameterValueException ex) {
            throw new InvalidParameterValueException(""String_Node_Str"" + ex.getMessage());
          }
        }
        _capacityDao.updateCapacityState(zone.getId(),null,null,null,allocationStateStr);
        zone.setAllocationState(allocationState);
      }
      if (dhcpProvider != null) {
        zone.setDhcpProvider(dhcpProvider);
      }
      if (isPublic != null && isPublic) {
        zone.setDomainId(null);
        zone.setDomain(null);
        DedicatedResourceVO resource=_dedicatedDao.findByZoneId(zoneId);
        Long resourceId=null;
        if (resource != null) {
          resourceId=resource.getId();
          if (!_dedicatedDao.remove(resourceId)) {
            throw new CloudRuntimeException(""String_Node_Str"" + resourceId);
          }
          List<DedicatedResourceVO> resourcesInGroup=_dedicatedDao.listByAffinityGroupId(resource.getAffinityGroupId());
          if (resourcesInGroup.isEmpty()) {
            _affinityGroupService.deleteAffinityGroup(resource.getAffinityGroupId(),null,null,null);
          }
        }
      }
      if (!_zoneDao.update(zoneId,zone)) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
);
  return zone;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  final Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String ip6Dns1=cmd.getIp6Dns1();
  String ip6Dns2=cmd.getIp6Dns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String guestCidr=cmd.getGuestCidrAddress();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  final Boolean isPublic=cmd.isPublic();
  final String allocationStateStr=cmd.getAllocationState();
  final String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Boolean localStorageEnabled=cmd.getLocalStorageEnabled();
  final Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  final DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (ip6Dns1 == null) {
    ip6Dns1=zone.getIp6Dns1();
  }
  if (ip6Dns2 == null) {
    ip6Dns2=zone.getIp6Dns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (internalDns2 == null) {
    internalDns2=zone.getInternalDns2();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr,ip6Dns1,ip6Dns2);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setIp6Dns1(ip6Dns1);
  zone.setIp6Dns2(ip6Dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (localStorageEnabled != null) {
    zone.setLocalStorageEnabled(localStorageEnabled.booleanValue());
  }
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      zone.setDomain(null);
    }
 else {
      zone.setDomain(networkDomain);
    }
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      Map<String,String> updatedDetails=new HashMap<String,String>();
      _zoneDao.loadDetails(zone);
      if (zone.getDetails() != null) {
        updatedDetails.putAll(zone.getDetails());
      }
      updatedDetails.putAll(newDetails);
      zone.setDetails(updatedDetails);
      if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
        Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
        if (allocationState == Grouping.AllocationState.Enabled) {
          try {
            PhysicalNetwork mgmtPhyNetwork;
            mgmtPhyNetwork=_networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Management);
            if (NetworkType.Advanced == zone.getNetworkType() && !zone.isSecurityGroupEnabled()) {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Public);
            }
            try {
              _networkModel.getDefaultPhysicalNetworkByZoneAndTrafficType(zoneId,TrafficType.Storage);
            }
 catch (            InvalidParameterValueException noStorage) {
              PhysicalNetworkTrafficTypeVO mgmtTraffic=_trafficTypeDao.findBy(mgmtPhyNetwork.getId(),TrafficType.Management);
              _networkSvc.addTrafficTypeToPhysicalNetwork(mgmtPhyNetwork.getId(),TrafficType.Storage.toString(),""String_Node_Str"",mgmtTraffic.getXenNetworkLabel(),mgmtTraffic.getKvmNetworkLabel(),mgmtTraffic.getVmwareNetworkLabel(),mgmtTraffic.getSimulatorNetworkLabel(),mgmtTraffic.getVlan(),mgmtTraffic.getHypervNetworkLabel());
              s_logger.info(""String_Node_Str"" + mgmtPhyNetwork.getId() + ""String_Node_Str"");
            }
          }
 catch (          InvalidParameterValueException ex) {
            throw new InvalidParameterValueException(""String_Node_Str"" + ex.getMessage());
          }
        }
        _capacityDao.updateCapacityState(zone.getId(),null,null,null,allocationStateStr);
        zone.setAllocationState(allocationState);
      }
      if (dhcpProvider != null) {
        zone.setDhcpProvider(dhcpProvider);
      }
      if (isPublic != null && isPublic) {
        zone.setDomainId(null);
        zone.setDomain(null);
        DedicatedResourceVO resource=_dedicatedDao.findByZoneId(zoneId);
        Long resourceId=null;
        if (resource != null) {
          resourceId=resource.getId();
          if (!_dedicatedDao.remove(resourceId)) {
            throw new CloudRuntimeException(""String_Node_Str"" + resourceId);
          }
          List<DedicatedResourceVO> resourcesInGroup=_dedicatedDao.listByAffinityGroupId(resource.getAffinityGroupId());
          if (resourcesInGroup.isEmpty()) {
            _affinityGroupService.deleteAffinityGroup(resource.getAffinityGroupId(),null,null,null);
          }
        }
      }
      if (!_zoneDao.update(zoneId,zone)) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
);
  return zone;
}",0.9986670616113744
106021,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TRAFFIC_TYPE_CREATE,eventDescription=""String_Node_Str"",create=true) public PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficTypeStr,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(physicalNetworkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  Networks.TrafficType trafficType=null;
  if (trafficTypeStr != null && !trafficTypeStr.isEmpty()) {
    try {
      trafficType=Networks.TrafficType.valueOf(trafficTypeStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + trafficTypeStr + ""String_Node_Str"");
    }
  }
  if (_pNTrafficTypeDao.isTrafficTypeSupported(physicalNetworkId,trafficType)) {
    throw new CloudRuntimeException(""String_Node_Str"" + trafficType);
  }
  if (TrafficType.isSystemNetwork(trafficType) || TrafficType.Public.equals(trafficType) || TrafficType.Storage.equals(trafficType)) {
    if (!_physicalNetworkDao.listByZoneAndTrafficType(network.getDataCenterId(),trafficType).isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + trafficType);
    }
  }
  if (TrafficType.Storage.equals(trafficType)) {
    List<SecondaryStorageVmVO> ssvms=_stnwMgr.getSSVMWithNoStorageNetwork(network.getDataCenterId());
    if (!ssvms.isEmpty()) {
      StringBuilder sb=new StringBuilder(""String_Node_Str"" + trafficType + ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (      SecondaryStorageVmVO ssvm : ssvms) {
        sb.append(ssvm.getInstanceName()).append(""String_Node_Str"").append(ssvm.getState());
      }
      throw new CloudRuntimeException(sb.toString());
    }
  }
  try {
    if (xenLabel == null) {
      xenLabel=getDefaultXenNetworkLabel(trafficType);
    }
    PhysicalNetworkTrafficTypeVO pNetworktrafficType=new PhysicalNetworkTrafficTypeVO(physicalNetworkId,trafficType,xenLabel,kvmLabel,vmwareLabel,simulatorLabel,vlan,hypervLabel);
    pNetworktrafficType=_pNTrafficTypeDao.persist(pNetworktrafficType);
    return pNetworktrafficType;
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TRAFFIC_TYPE_CREATE,eventDescription=""String_Node_Str"",create=true) public PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficTypeStr,String isolationMethod,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(physicalNetworkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  Networks.TrafficType trafficType=null;
  if (trafficTypeStr != null && !trafficTypeStr.isEmpty()) {
    try {
      trafficType=Networks.TrafficType.valueOf(trafficTypeStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + trafficTypeStr + ""String_Node_Str"");
    }
  }
  if (_pNTrafficTypeDao.isTrafficTypeSupported(physicalNetworkId,trafficType)) {
    throw new CloudRuntimeException(""String_Node_Str"" + trafficType);
  }
  if (TrafficType.isSystemNetwork(trafficType) || TrafficType.Public.equals(trafficType) || TrafficType.Storage.equals(trafficType)) {
    if (!_physicalNetworkDao.listByZoneAndTrafficType(network.getDataCenterId(),trafficType).isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + trafficType);
    }
  }
  if (TrafficType.Storage.equals(trafficType)) {
    List<SecondaryStorageVmVO> ssvms=_stnwMgr.getSSVMWithNoStorageNetwork(network.getDataCenterId());
    if (!ssvms.isEmpty()) {
      StringBuilder sb=new StringBuilder(""String_Node_Str"" + trafficType + ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (      SecondaryStorageVmVO ssvm : ssvms) {
        sb.append(ssvm.getInstanceName()).append(""String_Node_Str"").append(ssvm.getState());
      }
      throw new CloudRuntimeException(sb.toString());
    }
  }
  try {
    if (xenLabel == null) {
      xenLabel=getDefaultXenNetworkLabel(trafficType);
    }
    PhysicalNetworkTrafficTypeVO pNetworktrafficType=new PhysicalNetworkTrafficTypeVO(physicalNetworkId,trafficType,xenLabel,kvmLabel,vmwareLabel,simulatorLabel,vlan,hypervLabel);
    pNetworktrafficType=_pNTrafficTypeDao.persist(pNetworktrafficType);
    List<String> isolationMethods=network.getIsolationMethods();
    if ((isolationMethods.size() == 1 && isolationMethods.get(0).toLowerCase().equals(""String_Node_Str"")) || (isolationMethod != null && isolationMethods.contains(isolationMethod) && isolationMethod.toLowerCase().equals(""String_Node_Str""))) {
      NetworkVO publicNetwork=_networksDao.listByZoneAndTrafficType(network.getDataCenterId(),TrafficType.Public).get(0);
      if (publicNetwork != null) {
        s_logger.debug(""String_Node_Str"" + publicNetwork + ""String_Node_Str"");
        publicNetwork.setBroadcastDomainType(BroadcastDomainType.Vxlan);
        _networksDao.persist(publicNetwork);
      }
    }
    return pNetworktrafficType;
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.8733007069059271
106022,"protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_ipAddrMgr.assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.VirtualNetwork,null,null,false);
    nic.setIp4Address(ip.getAddress().toString());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastType(BroadcastDomainType.Vlan);
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}","protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_ipAddrMgr.assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.VirtualNetwork,null,null,false);
    nic.setIp4Address(ip.getAddress().toString());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    if (network.getBroadcastDomainType() == BroadcastDomainType.Vxlan) {
      nic.setIsolationUri(BroadcastDomainType.Vxlan.toUri(ip.getVlanTag()));
      nic.setBroadcastUri(BroadcastDomainType.Vxlan.toUri(ip.getVlanTag()));
      nic.setBroadcastType(BroadcastDomainType.Vxlan);
    }
 else {
      nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
      nic.setBroadcastType(BroadcastDomainType.Vlan);
    }
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}",0.8231357552581262
106023,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network network,Account owner){
  if (!canHandle(offering)) {
    return null;
  }
  if (offering.getTrafficType() == TrafficType.Public) {
    NetworkVO ntwk=new NetworkVO(offering.getTrafficType(),Mode.Static,BroadcastDomainType.Vlan,offering.getId(),State.Setup,plan.getDataCenterId(),plan.getPhysicalNetworkId());
    return ntwk;
  }
 else {
    return null;
  }
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network network,Account owner){
  if (!canHandle(offering)) {
    return null;
  }
  if (offering.getTrafficType() == TrafficType.Public) {
    NetworkVO ntwk=new NetworkVO(offering.getTrafficType(),Mode.Static,network.getBroadcastDomainType(),offering.getId(),State.Setup,plan.getDataCenterId(),plan.getPhysicalNetworkId());
    return ntwk;
  }
 else {
    return null;
  }
}",0.98
106024,"protected LinkedHashMap<Network,NicProfile> createRouterNetworks(Account owner,boolean isRedundant,DeploymentPlan plan,Network guestNetwork,Pair<Boolean,PublicIp> publicNetwork) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  boolean setupPublicNetwork=false;
  if (publicNetwork != null) {
    setupPublicNetwork=publicNetwork.first();
  }
  LinkedHashMap<Network,NicProfile> networks=new LinkedHashMap<Network,NicProfile>(3);
  boolean hasGuestNetwork=false;
  if (guestNetwork != null) {
    s_logger.debug(""String_Node_Str"" + guestNetwork);
    String defaultNetworkStartIp=null, defaultNetworkStartIpv6=null;
    if (!setupPublicNetwork) {
      Nic placeholder=_networkModel.getPlaceholderNicForRouter(guestNetwork,plan.getPodId());
      if (guestNetwork.getCidr() != null) {
        if (placeholder != null && placeholder.getIp4Address() != null) {
          s_logger.debug(""String_Node_Str"" + placeholder.getIp4Address() + ""String_Node_Str""+ guestNetwork);
          defaultNetworkStartIp=placeholder.getIp4Address();
        }
 else {
          String startIp=_networkModel.getStartIpAddress(guestNetwork.getId());
          if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
            defaultNetworkStartIp=startIp;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
          }
        }
      }
      if (guestNetwork.getIp6Cidr() != null) {
        if (placeholder != null && placeholder.getIp6Address() != null) {
          s_logger.debug(""String_Node_Str"" + placeholder.getIp6Address() + ""String_Node_Str""+ guestNetwork);
          defaultNetworkStartIpv6=placeholder.getIp6Address();
        }
 else {
          String startIpv6=_networkModel.getStartIpv6Address(guestNetwork.getId());
          if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(),startIpv6) == null) {
            defaultNetworkStartIpv6=startIpv6;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + startIpv6 + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
          }
        }
      }
    }
    NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp,defaultNetworkStartIpv6);
    if (setupPublicNetwork) {
      if (isRedundant) {
        gatewayNic.setIp4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork,null));
      }
 else {
        gatewayNic.setIp4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    }
 else {
      gatewayNic.setDefaultNic(true);
    }
    networks.put(guestNetwork,gatewayNic);
    hasGuestNetwork=true;
  }
  s_logger.debug(""String_Node_Str"");
  List<? extends NetworkOffering> offerings=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork);
  NetworkOffering controlOffering=offerings.get(0);
  Network controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
  networks.put(controlConfig,null);
  if (setupPublicNetwork) {
    PublicIp sourceNatIp=publicNetwork.second();
    s_logger.debug(""String_Node_Str"");
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    if (hasGuestNetwork) {
      defaultNic.setDeviceId(2);
    }
    NetworkOffering publicOffering=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork).get(0);
    List<? extends Network> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
    String publicIp=defaultNic.getIp4Address();
    NicVO peerNic=_nicDao.findByIp4AddressAndNetworkId(publicIp,publicNetworks.get(0).getId());
    if (peerNic != null) {
      s_logger.info(""String_Node_Str"" + peerNic.getMacAddress());
      defaultNic.setMacAddress(peerNic.getMacAddress());
    }
    networks.put(publicNetworks.get(0),defaultNic);
  }
  return networks;
}","protected LinkedHashMap<Network,NicProfile> createRouterNetworks(Account owner,boolean isRedundant,DeploymentPlan plan,Network guestNetwork,Pair<Boolean,PublicIp> publicNetwork) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  boolean setupPublicNetwork=false;
  if (publicNetwork != null) {
    setupPublicNetwork=publicNetwork.first();
  }
  LinkedHashMap<Network,NicProfile> networks=new LinkedHashMap<Network,NicProfile>(3);
  boolean hasGuestNetwork=false;
  if (guestNetwork != null) {
    s_logger.debug(""String_Node_Str"" + guestNetwork);
    String defaultNetworkStartIp=null, defaultNetworkStartIpv6=null;
    if (!setupPublicNetwork) {
      Nic placeholder=_networkModel.getPlaceholderNicForRouter(guestNetwork,plan.getPodId());
      if (guestNetwork.getCidr() != null) {
        if (placeholder != null && placeholder.getIp4Address() != null) {
          s_logger.debug(""String_Node_Str"" + placeholder.getIp4Address() + ""String_Node_Str""+ guestNetwork);
          defaultNetworkStartIp=placeholder.getIp4Address();
        }
 else {
          String startIp=_networkModel.getStartIpAddress(guestNetwork.getId());
          if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
            defaultNetworkStartIp=startIp;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
          }
        }
      }
      if (guestNetwork.getIp6Cidr() != null) {
        if (placeholder != null && placeholder.getIp6Address() != null) {
          s_logger.debug(""String_Node_Str"" + placeholder.getIp6Address() + ""String_Node_Str""+ guestNetwork);
          defaultNetworkStartIpv6=placeholder.getIp6Address();
        }
 else {
          String startIpv6=_networkModel.getStartIpv6Address(guestNetwork.getId());
          if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(),startIpv6) == null) {
            defaultNetworkStartIpv6=startIpv6;
          }
 else           if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + startIpv6 + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
          }
        }
      }
    }
    NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp,defaultNetworkStartIpv6);
    if (setupPublicNetwork) {
      if (isRedundant) {
        gatewayNic.setIp4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork,null));
      }
 else {
        gatewayNic.setIp4Address(guestNetwork.getGateway());
      }
      gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
      gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
      gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
      gatewayNic.setMode(guestNetwork.getMode());
      String gatewayCidr=guestNetwork.getCidr();
      gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    }
 else {
      gatewayNic.setDefaultNic(true);
    }
    networks.put(guestNetwork,gatewayNic);
    hasGuestNetwork=true;
  }
  s_logger.debug(""String_Node_Str"");
  List<? extends NetworkOffering> offerings=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork);
  NetworkOffering controlOffering=offerings.get(0);
  Network controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
  networks.put(controlConfig,null);
  if (setupPublicNetwork) {
    PublicIp sourceNatIp=publicNetwork.second();
    s_logger.debug(""String_Node_Str"");
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    Network pubNet=_networkDao.findById(sourceNatIp.getNetworkId());
    if (pubNet.getBroadcastDomainType() == BroadcastDomainType.Vxlan) {
      defaultNic.setBroadcastType(BroadcastDomainType.Vxlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vxlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(BroadcastDomainType.Vxlan.toUri(sourceNatIp.getVlanTag()));
    }
 else {
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    }
    if (hasGuestNetwork) {
      defaultNic.setDeviceId(2);
    }
    NetworkOffering publicOffering=_networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork).get(0);
    List<? extends Network> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
    String publicIp=defaultNic.getIp4Address();
    NicVO peerNic=_nicDao.findByIp4AddressAndNetworkId(publicIp,publicNetworks.get(0).getId());
    if (peerNic != null) {
      s_logger.info(""String_Node_Str"" + peerNic.getMacAddress());
      defaultNic.setMacAddress(peerNic.getMacAddress());
    }
    networks.put(publicNetworks.get(0),defaultNic);
  }
  return networks;
}",0.929669675627418
106025,"@Override public PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficType,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel){
  return null;
}","@Override public PhysicalNetworkTrafficType addTrafficTypeToPhysicalNetwork(Long physicalNetworkId,String trafficType,String isolationMethod,String xenLabel,String kvmLabel,String vmwareLabel,String simulatorLabel,String vlan,String hypervLabel){
  return null;
}",0.9542743538767396
106026,"@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid,KVMStoragePool pool){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=this.getVolume(libvirtPool.getPool(),volumeUuid);
    KVMPhysicalDisk disk;
    LibvirtStorageVolumeDef voldef=getStorageVolumeDef(libvirtPool.getPool().getConnect(),vol);
    disk=new KVMPhysicalDisk(vol.getPath(),vol.getName(),pool);
    disk.setSize(vol.getInfo().allocation);
    disk.setVirtualSize(vol.getInfo().capacity);
    if (pool.getType() == StoragePoolType.RBD) {
      disk.setFormat(PhysicalDiskFormat.RAW);
    }
 else     if (voldef.getFormat() == null) {
      File diskDir=new File(disk.getPath());
      if (diskDir.exists() && diskDir.isDirectory()) {
        disk.setFormat(PhysicalDiskFormat.DIR);
      }
 else       if (volumeUuid.endsWith(""String_Node_Str"") || volumeUuid.endsWith((""String_Node_Str""))) {
        disk.setFormat(PhysicalDiskFormat.TAR);
      }
 else       if (volumeUuid.endsWith(""String_Node_Str"") || volumeUuid.endsWith((""String_Node_Str""))) {
        disk.setFormat(PhysicalDiskFormat.RAW);
      }
 else {
        disk.setFormat(pool.getDefaultFormat());
      }
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.QCOW2) {
      disk.setFormat(PhysicalDiskFormat.QCOW2);
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.RAW) {
      disk.setFormat(PhysicalDiskFormat.RAW);
    }
    return disk;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid,KVMStoragePool pool){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=getVolume(libvirtPool.getPool(),volumeUuid);
    KVMPhysicalDisk disk;
    LibvirtStorageVolumeDef voldef=getStorageVolumeDef(libvirtPool.getPool().getConnect(),vol);
    disk=new KVMPhysicalDisk(vol.getPath(),vol.getName(),pool);
    disk.setSize(vol.getInfo().allocation);
    disk.setVirtualSize(vol.getInfo().capacity);
    if (pool.getType() == StoragePoolType.RBD) {
      disk.setFormat(PhysicalDiskFormat.RAW);
    }
 else     if (voldef.getFormat() == null) {
      File diskDir=new File(disk.getPath());
      if (diskDir.exists() && diskDir.isDirectory()) {
        disk.setFormat(PhysicalDiskFormat.DIR);
      }
 else       if (volumeUuid.endsWith(""String_Node_Str"") || volumeUuid.endsWith((""String_Node_Str""))) {
        disk.setFormat(PhysicalDiskFormat.TAR);
      }
 else       if (volumeUuid.endsWith(""String_Node_Str"") || volumeUuid.endsWith((""String_Node_Str""))) {
        disk.setFormat(PhysicalDiskFormat.RAW);
      }
 else {
        disk.setFormat(pool.getDefaultFormat());
      }
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.QCOW2) {
      disk.setFormat(PhysicalDiskFormat.QCOW2);
    }
 else     if (voldef.getFormat() == LibvirtStorageVolumeDef.volFormat.RAW) {
      disk.setFormat(PhysicalDiskFormat.RAW);
    }
    return disk;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(e.toString());
  }
}",0.9984389634717452
106027,"/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool,int timeout){
  String newUuid=name;
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  try {
    if (destPool.getType() != StoragePoolType.RBD) {
      disk=destPool.createPhysicalDisk(newUuid,format,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath());
        QemuImg qemu=new QemuImg(timeout);
        qemu.create(destFile,backingFile);
      }
 else       if (format == PhysicalDiskFormat.RAW) {
        QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
        QemuImg qemu=new QemuImg(timeout);
        qemu.convert(sourceFile,destFile);
      }
    }
 else {
      format=PhysicalDiskFormat.RAW;
      disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
      disk.setFormat(format);
      disk.setSize(template.getVirtualSize());
      disk.setVirtualSize(disk.getSize());
      QemuImg qemu=new QemuImg(timeout);
      QemuImgFile srcFile;
      QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
      destFile.setFormat(format);
      if (srcPool.getType() != StoragePoolType.RBD) {
        srcFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.convert(srcFile,destFile);
      }
 else {
        try {
          if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
            s_logger.debug(""String_Node_Str"");
            Rados r=new Rados(srcPool.getAuthUserName());
            r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            r.connect();
            s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
            IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
            Rbd rbd=new Rbd(io);
            RbdImage srcImage=rbd.open(template.getName());
            if (srcImage.isOldFormat()) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ template.getVirtualSize()+ ""String_Node_Str"");
              rbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
              RbdImage destImage=rbd.open(disk.getName());
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.copy(srcImage,destImage);
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.close(destImage);
            }
 else {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ this.rbdTemplateSnapName);
              rbd.clone(template.getName(),this.rbdTemplateSnapName,io,disk.getName(),this.rbdFeatures,this.rbdOrder);
              s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ this.rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
            }
            rbd.close(srcImage);
            r.ioCtxDestroy(io);
          }
 else {
            s_logger.debug(""String_Node_Str"");
            Rados rSrc=new Rados(srcPool.getAuthUserName());
            rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            rSrc.connect();
            s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
            Rados rDest=new Rados(destPool.getAuthUserName());
            rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
            rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
            rDest.connect();
            s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
            IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
            Rbd sRbd=new Rbd(sIO);
            IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
            Rbd dRbd=new Rbd(dIO);
            s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
            dRbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
            RbdImage srcImage=sRbd.open(template.getName());
            RbdImage destImage=dRbd.open(disk.getName());
            s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
            sRbd.copy(srcImage,destImage);
            sRbd.close(srcImage);
            dRbd.close(destImage);
            rSrc.ioCtxDestroy(sIO);
            rDest.ioCtxDestroy(dIO);
          }
        }
 catch (        RadosException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
catch (        RbdException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
      }
    }
  }
 catch (  QemuImgException e) {
    s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
  }
  if (disk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ template.getName());
  }
  return disk;
}","/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool,int timeout){
  String newUuid=name;
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  try {
    if (destPool.getType() != StoragePoolType.RBD) {
      disk=destPool.createPhysicalDisk(newUuid,format,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath());
        QemuImg qemu=new QemuImg(timeout);
        qemu.create(destFile,backingFile);
      }
 else       if (format == PhysicalDiskFormat.RAW) {
        QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
        QemuImg qemu=new QemuImg(timeout);
        qemu.convert(sourceFile,destFile);
      }
    }
 else {
      format=PhysicalDiskFormat.RAW;
      disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
      disk.setFormat(format);
      disk.setSize(template.getVirtualSize());
      disk.setVirtualSize(disk.getSize());
      QemuImg qemu=new QemuImg(timeout);
      QemuImgFile srcFile;
      QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
      destFile.setFormat(format);
      if (srcPool.getType() != StoragePoolType.RBD) {
        srcFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.convert(srcFile,destFile);
      }
 else {
        try {
          if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
            s_logger.debug(""String_Node_Str"");
            Rados r=new Rados(srcPool.getAuthUserName());
            r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            r.connect();
            s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
            IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
            Rbd rbd=new Rbd(io);
            RbdImage srcImage=rbd.open(template.getName());
            if (srcImage.isOldFormat()) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ template.getVirtualSize()+ ""String_Node_Str"");
              rbd.create(disk.getName(),template.getVirtualSize(),rbdFeatures,rbdOrder);
              RbdImage destImage=rbd.open(disk.getName());
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.copy(srcImage,destImage);
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.close(destImage);
            }
 else {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName);
              rbd.clone(template.getName(),rbdTemplateSnapName,io,disk.getName(),rbdFeatures,rbdOrder);
              s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
            }
            rbd.close(srcImage);
            r.ioCtxDestroy(io);
          }
 else {
            s_logger.debug(""String_Node_Str"");
            Rados rSrc=new Rados(srcPool.getAuthUserName());
            rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            rSrc.connect();
            s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
            Rados rDest=new Rados(destPool.getAuthUserName());
            rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
            rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
            rDest.connect();
            s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
            IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
            Rbd sRbd=new Rbd(sIO);
            IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
            Rbd dRbd=new Rbd(dIO);
            s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
            dRbd.create(disk.getName(),template.getVirtualSize(),rbdFeatures,rbdOrder);
            RbdImage srcImage=sRbd.open(template.getName());
            RbdImage destImage=dRbd.open(disk.getName());
            s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
            sRbd.copy(srcImage,destImage);
            sRbd.close(srcImage);
            dRbd.close(destImage);
            rSrc.ioCtxDestroy(sIO);
            rDest.ioCtxDestroy(dIO);
          }
        }
 catch (        RadosException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
catch (        RbdException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
      }
    }
  }
 catch (  QemuImgException e) {
    s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
  }
  if (disk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + template.getName());
  }
  return disk;
}",0.988917059036581
106028,"@Override public boolean disconnectPhysicalDiskByPath(String localPath){
  String poolUuid=null;
  if (localPath != null && localPath.startsWith(_mountPoint) && localPath.endsWith(""String_Node_Str"")) {
    String[] token=localPath.split(""String_Node_Str"");
    if (token.length > 3) {
      poolUuid=token[2];
    }
  }
 else {
    return false;
  }
  if (poolUuid == null) {
    return false;
  }
  try {
    Connect conn=LibvirtConnection.getConnection();
    StoragePool pool=conn.storagePoolLookupByUUIDString(poolUuid);
    deleteStoragePool(poolUuid);
    return true;
  }
 catch (  LibvirtException ex) {
    return false;
  }
catch (  CloudRuntimeException ex) {
    return false;
  }
}","@Override public boolean disconnectPhysicalDiskByPath(String localPath){
  String poolUuid=null;
  if (localPath != null && localPath.startsWith(_mountPoint) && localPath.endsWith(""String_Node_Str"")) {
    String[] token=localPath.split(""String_Node_Str"");
    if (token.length > 3) {
      poolUuid=token[2];
    }
  }
 else {
    return false;
  }
  if (poolUuid == null) {
    return false;
  }
  try {
    Connect conn=LibvirtConnection.getConnection();
    conn.storagePoolLookupByUUIDString(poolUuid);
    deleteStoragePool(poolUuid);
    return true;
  }
 catch (  LibvirtException ex) {
    return false;
  }
catch (  CloudRuntimeException ex) {
    return false;
  }
}",0.987600291757841
106029,"@Override public boolean deletePhysicalDisk(String uuid,KVMStoragePool pool){
  if (pool.getType() == StoragePoolType.RBD) {
    try {
      s_logger.info(""String_Node_Str"" + pool.getSourcePort() + ""String_Node_Str""+ uuid+ ""String_Node_Str"");
      Rados r=new Rados(pool.getAuthUserName());
      r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
      r.confSet(""String_Node_Str"",pool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(pool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(uuid);
      List<RbdSnapInfo> snaps=image.snapList();
      for (      RbdSnapInfo snap : snaps) {
        image.snapUnprotect(snap.name);
        image.snapRemove(snap.name);
      }
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    RadosException e) {
      throw new CloudRuntimeException(e.toString());
    }
catch (    RbdException e) {
      throw new CloudRuntimeException(e.toString());
    }
  }
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=this.getVolume(libvirtPool.getPool(),uuid);
    deleteVol(libvirtPool,vol);
    vol.free();
    return true;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public boolean deletePhysicalDisk(String uuid,KVMStoragePool pool){
  if (pool.getType() == StoragePoolType.RBD) {
    try {
      s_logger.info(""String_Node_Str"" + pool.getSourcePort() + ""String_Node_Str""+ uuid+ ""String_Node_Str"");
      Rados r=new Rados(pool.getAuthUserName());
      r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
      r.confSet(""String_Node_Str"",pool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(pool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(uuid);
      List<RbdSnapInfo> snaps=image.snapList();
      for (      RbdSnapInfo snap : snaps) {
        image.snapUnprotect(snap.name);
        image.snapRemove(snap.name);
      }
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    RadosException e) {
      throw new CloudRuntimeException(e.toString());
    }
catch (    RbdException e) {
      throw new CloudRuntimeException(e.toString());
    }
  }
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  try {
    StorageVol vol=getVolume(libvirtPool.getPool(),uuid);
    deleteVol(libvirtPool,vol);
    vol.free();
    return true;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}",0.9981570217471434
106030,"/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  s_logger.debug(""String_Node_Str"" + disk.getSize() + ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str""+ disk.getFormat());
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,sourceFormat,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null && sourcePath.endsWith(""String_Node_Str"")) {
          String result=Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException(""String_Node_Str"" + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    String sourceFile;
    boolean useTmpFile=false;
    try {
      if (sourceFormat != destFormat) {
        srcFile=new QemuImgFile(sourcePath,sourceFormat);
        destFile=new QemuImgFile(""String_Node_Str"" + name);
        s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str"");
        qemu.convert(srcFile,destFile);
        sourceFile=destFile.getFileName();
        useTmpFile=true;
      }
 else {
        sourceFile=sourcePath;
      }
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      s_logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str"");
      rbd.create(name,disk.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
      RbdImage image=rbd.open(name);
      File fh=new File(sourceFile);
      BufferedInputStream bis=new BufferedInputStream(new FileInputStream(fh));
      int chunkSize=4194304;
      long offset=0;
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ fh.length()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ chunkSize+ ""String_Node_Str"");
      while (true) {
        byte[] buf=new byte[chunkSize];
        int bytes=bis.read(buf);
        if (bytes <= 0) {
          break;
        }
        image.write(buf,offset,bytes);
        offset+=bytes;
      }
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ name+ ""String_Node_Str""+ offset);
      bis.close();
      if (useTmpFile) {
        s_logger.debug(""String_Node_Str"" + sourceFile);
        fh.delete();
      }
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapCreate(this.rbdTemplateSnapName);
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapProtect(this.rbdTemplateSnapName);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    IOException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}","/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  s_logger.debug(""String_Node_Str"" + disk.getSize() + ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str""+ disk.getFormat());
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,sourceFormat,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null && sourcePath.endsWith(""String_Node_Str"")) {
          String result=Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException(""String_Node_Str"" + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    String sourceFile;
    boolean useTmpFile=false;
    try {
      if (sourceFormat != destFormat) {
        srcFile=new QemuImgFile(sourcePath,sourceFormat);
        destFile=new QemuImgFile(""String_Node_Str"" + name);
        s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str"");
        qemu.convert(srcFile,destFile);
        sourceFile=destFile.getFileName();
        useTmpFile=true;
      }
 else {
        sourceFile=sourcePath;
      }
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      s_logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str"");
      rbd.create(name,disk.getVirtualSize(),rbdFeatures,rbdOrder);
      RbdImage image=rbd.open(name);
      File fh=new File(sourceFile);
      BufferedInputStream bis=new BufferedInputStream(new FileInputStream(fh));
      int chunkSize=4194304;
      long offset=0;
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ fh.length()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ chunkSize+ ""String_Node_Str"");
      while (true) {
        byte[] buf=new byte[chunkSize];
        int bytes=bis.read(buf);
        if (bytes <= 0) {
          break;
        }
        image.write(buf,offset,bytes);
        offset+=bytes;
      }
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ name+ ""String_Node_Str""+ offset);
      bis.close();
      if (useTmpFile) {
        s_logger.debug(""String_Node_Str"" + sourceFile);
        fh.delete();
      }
      s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapCreate(rbdTemplateSnapName);
      s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapProtect(rbdTemplateSnapName);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    IOException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}",0.9978364344439636
106031,"@Override public KVMPhysicalDisk createPhysicalDisk(String name,KVMStoragePool pool,PhysicalDiskFormat format,long size){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  StoragePool virtPool=libvirtPool.getPool();
  LibvirtStorageVolumeDef.volFormat libvirtformat=null;
  String volPath=null;
  String volName=null;
  long volAllocation=0;
  long volCapacity=0;
  if (pool.getType() == StoragePoolType.RBD) {
    format=PhysicalDiskFormat.RAW;
    try {
      s_logger.info(""String_Node_Str"" + pool.getSourceDir() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
      Rados r=new Rados(pool.getAuthUserName());
      r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
      r.confSet(""String_Node_Str"",pool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(pool.getSourceDir());
      Rbd rbd=new Rbd(io);
      rbd.create(name,size,this.rbdFeatures,this.rbdOrder);
      r.ioCtxDestroy(io);
    }
 catch (    RadosException e) {
      throw new CloudRuntimeException(e.toString());
    }
catch (    RbdException e) {
      throw new CloudRuntimeException(e.toString());
    }
    volPath=pool.getSourceDir() + ""String_Node_Str"" + name;
    volName=name;
    volCapacity=size;
    volAllocation=size;
  }
 else {
    if (format == PhysicalDiskFormat.QCOW2) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.QCOW2;
    }
 else     if (format == PhysicalDiskFormat.RAW) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.RAW;
    }
 else     if (format == PhysicalDiskFormat.DIR) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.DIR;
    }
 else     if (format == PhysicalDiskFormat.TAR) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.TAR;
    }
    LibvirtStorageVolumeDef volDef=new LibvirtStorageVolumeDef(name,size,libvirtformat,null,null);
    s_logger.debug(volDef.toString());
    try {
      StorageVol vol=virtPool.storageVolCreateXML(volDef.toString(),0);
      volPath=vol.getPath();
      volName=vol.getName();
      volAllocation=vol.getInfo().allocation;
      volCapacity=vol.getInfo().capacity;
    }
 catch (    LibvirtException e) {
      throw new CloudRuntimeException(e.toString());
    }
  }
  KVMPhysicalDisk disk=new KVMPhysicalDisk(volPath,volName,pool);
  disk.setFormat(format);
  disk.setSize(volAllocation);
  disk.setVirtualSize(volCapacity);
  return disk;
}","@Override public KVMPhysicalDisk createPhysicalDisk(String name,KVMStoragePool pool,PhysicalDiskFormat format,long size){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  StoragePool virtPool=libvirtPool.getPool();
  LibvirtStorageVolumeDef.volFormat libvirtformat=null;
  String volPath=null;
  String volName=null;
  long volAllocation=0;
  long volCapacity=0;
  if (pool.getType() == StoragePoolType.RBD) {
    format=PhysicalDiskFormat.RAW;
    try {
      s_logger.info(""String_Node_Str"" + pool.getSourceDir() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
      Rados r=new Rados(pool.getAuthUserName());
      r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
      r.confSet(""String_Node_Str"",pool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(pool.getSourceDir());
      Rbd rbd=new Rbd(io);
      rbd.create(name,size,rbdFeatures,rbdOrder);
      r.ioCtxDestroy(io);
    }
 catch (    RadosException e) {
      throw new CloudRuntimeException(e.toString());
    }
catch (    RbdException e) {
      throw new CloudRuntimeException(e.toString());
    }
    volPath=pool.getSourceDir() + ""String_Node_Str"" + name;
    volName=name;
    volCapacity=size;
    volAllocation=size;
  }
 else {
    if (format == PhysicalDiskFormat.QCOW2) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.QCOW2;
    }
 else     if (format == PhysicalDiskFormat.RAW) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.RAW;
    }
 else     if (format == PhysicalDiskFormat.DIR) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.DIR;
    }
 else     if (format == PhysicalDiskFormat.TAR) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.TAR;
    }
    LibvirtStorageVolumeDef volDef=new LibvirtStorageVolumeDef(name,size,libvirtformat,null,null);
    s_logger.debug(volDef.toString());
    try {
      StorageVol vol=virtPool.storageVolCreateXML(volDef.toString(),0);
      volPath=vol.getPath();
      volName=vol.getName();
      volAllocation=vol.getInfo().allocation;
      volCapacity=vol.getInfo().capacity;
    }
 catch (    LibvirtException e) {
      throw new CloudRuntimeException(e.toString());
    }
  }
  KVMPhysicalDisk disk=new KVMPhysicalDisk(volPath,volName,pool);
  disk.setFormat(format);
  disk.setSize(volAllocation);
  disk.setVirtualSize(volCapacity);
  return disk;
}",0.9979666531110208
106032,"@Override public List<KVMPhysicalDisk> listPhysicalDisks(String storagePoolUuid,KVMStoragePool pool){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  StoragePool virtPool=libvirtPool.getPool();
  List<KVMPhysicalDisk> disks=new ArrayList<KVMPhysicalDisk>();
  try {
    String[] vols=virtPool.listVolumes();
    for (    String volName : vols) {
      KVMPhysicalDisk disk=this.getPhysicalDisk(volName,pool);
      disks.add(disk);
    }
    return disks;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public List<KVMPhysicalDisk> listPhysicalDisks(String storagePoolUuid,KVMStoragePool pool){
  LibvirtStoragePool libvirtPool=(LibvirtStoragePool)pool;
  StoragePool virtPool=libvirtPool.getPool();
  List<KVMPhysicalDisk> disks=new ArrayList<KVMPhysicalDisk>();
  try {
    String[] vols=virtPool.listVolumes();
    for (    String volName : vols) {
      KVMPhysicalDisk disk=getPhysicalDisk(volName,pool);
      disks.add(disk);
    }
    return disks;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}",0.9955237242614146
106033,"public static supersetOrSubset isNetowrkASubsetOrSupersetOfNetworkB(String cidrA,String cidrB){
  Long[] cidrALong=cidrToLong(cidrA);
  Long[] cidrBLong=cidrToLong(cidrB);
  long shift=0;
  if (cidrALong == null || cidrBLong == null) {
    return supersetOrSubset.errorInCidrFormat;
  }
  if (cidrALong[1] >= cidrBLong[1]) {
    shift=32 - cidrBLong[1];
  }
 else {
    shift=32 - cidrALong[1];
  }
  long result=(cidrALong[0] >> shift) - (cidrBLong[0] >> shift);
  if (result == 0) {
    if (cidrALong[1] < cidrBLong[1]) {
      return supersetOrSubset.isSuperset;
    }
 else     if (cidrALong[1] == cidrBLong[1]) {
      return supersetOrSubset.sameSubnet;
    }
    return supersetOrSubset.isSubset;
  }
  return supersetOrSubset.neitherSubetNorSuperset;
}","public static supersetOrSubset isNetowrkASubsetOrSupersetOfNetworkB(String cidrA,String cidrB){
  Long[] cidrALong=cidrToLong(cidrA);
  Long[] cidrBLong=cidrToLong(cidrB);
  long shift=0;
  if (cidrALong == null || cidrBLong == null) {
    return supersetOrSubset.errorInCidrFormat;
  }
  if (cidrALong[1] >= cidrBLong[1]) {
    shift=32 - cidrBLong[1];
  }
 else {
    shift=32 - cidrALong[1];
  }
  long result=(cidrALong[0] >> shift) - (cidrBLong[0] >> shift);
  if (result == 0) {
    if (cidrALong[1] < cidrBLong[1]) {
      return supersetOrSubset.isSuperset;
    }
 else     if (cidrALong[1].equals(cidrBLong[1])) {
      return supersetOrSubset.sameSubnet;
    }
    return supersetOrSubset.isSubset;
  }
  return supersetOrSubset.neitherSubetNorSuperset;
}",0.9914754098360656
106034,"public static boolean isValidIp6Cidr(String ip6Cidr){
  try {
    IPv6Network network=IPv6Network.fromString(ip6Cidr);
  }
 catch (  IllegalArgumentException ex) {
    return false;
  }
  return true;
}","public static boolean isValidIp6Cidr(String ip6Cidr){
  try {
    IPv6Network.fromString(ip6Cidr);
  }
 catch (  IllegalArgumentException ex) {
    return false;
  }
  return true;
}",0.9479166666666666
106035,"public static boolean isValidIpv6(String ip){
  try {
    IPv6Address address=IPv6Address.fromString(ip);
  }
 catch (  IllegalArgumentException ex) {
    return false;
  }
  return true;
}","public static boolean isValidIpv6(String ip){
  try {
    IPv6Address.fromString(ip);
  }
 catch (  IllegalArgumentException ex) {
    return false;
  }
  return true;
}",0.9441340782122905
106036,"public String searchFileInSubFolders(String fileName,boolean caseInsensitive) throws Exception {
  String datastorePath=""String_Node_Str"" + getName() + ""String_Node_Str"";
  String rootDirectoryFilePath=String.format(""String_Node_Str"",datastorePath,fileName);
  if (fileExists(rootDirectoryFilePath)) {
    return rootDirectoryFilePath;
  }
  String parentFolderPath=null;
  String absoluteFileName=null;
  s_logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ datastorePath);
  HostDatastoreBrowserMO browserMo=getHostDatastoreBrowserMO();
  ArrayList<HostDatastoreBrowserSearchResults> results=browserMo.searchDatastoreSubFolders(""String_Node_Str"" + getName() + ""String_Node_Str"",fileName,caseInsensitive);
  if (results != null && results.size() > 1) {
    s_logger.warn(""String_Node_Str"" + fileName + ""String_Node_Str""+ datastorePath+ ""String_Node_Str"");
  }
  for (  HostDatastoreBrowserSearchResults result : results) {
    List<FileInfo> info=result.getFile();
    if (info != null && info.size() > 0) {
      for (      FileInfo fi : info) {
        absoluteFileName=parentFolderPath=result.getFolderPath();
        s_logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ absoluteFileName);
        if (parentFolderPath.endsWith(""String_Node_Str""))         absoluteFileName+=""String_Node_Str"";
        absoluteFileName+=fi.getPath();
        break;
      }
    }
  }
  return absoluteFileName;
}","public String searchFileInSubFolders(String fileName,boolean caseInsensitive) throws Exception {
  String datastorePath=""String_Node_Str"" + getName() + ""String_Node_Str"";
  String rootDirectoryFilePath=String.format(""String_Node_Str"",datastorePath,fileName);
  if (fileExists(rootDirectoryFilePath)) {
    return rootDirectoryFilePath;
  }
  String parentFolderPath=null;
  String absoluteFileName=null;
  s_logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ datastorePath);
  HostDatastoreBrowserMO browserMo=getHostDatastoreBrowserMO();
  ArrayList<HostDatastoreBrowserSearchResults> results=browserMo.searchDatastoreSubFolders(""String_Node_Str"" + getName() + ""String_Node_Str"",fileName,caseInsensitive);
  if (results != null && results.size() > 1) {
    s_logger.warn(""String_Node_Str"" + fileName + ""String_Node_Str""+ datastorePath+ ""String_Node_Str"");
  }
 else   if (results == null) {
    String msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ datastorePath;
    s_logger.error(msg);
    throw new CloudException(msg);
  }
  for (  HostDatastoreBrowserSearchResults result : results) {
    List<FileInfo> info=result.getFile();
    if (info != null && info.size() > 0) {
      for (      FileInfo fi : info) {
        absoluteFileName=parentFolderPath=result.getFolderPath();
        s_logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ absoluteFileName);
        if (parentFolderPath.endsWith(""String_Node_Str""))         absoluteFileName+=""String_Node_Str"";
        absoluteFileName+=fi.getPath();
        break;
      }
    }
  }
  return absoluteFileName;
}",0.9419568822553898
106037,"@Override public int compare(DiskTO arg0,DiskTO arg1){
  if (arg0.getDiskSeq() < arg1.getDiskSeq()) {
    return -1;
  }
 else   if (arg0.getDiskSeq() == arg1.getDiskSeq()) {
    return 0;
  }
  return 1;
}","@Override public int compare(DiskTO arg0,DiskTO arg1){
  if (arg0.getDiskSeq() < arg1.getDiskSeq()) {
    return -1;
  }
 else   if (arg0.getDiskSeq().equals(arg1.getDiskSeq())) {
    return 0;
  }
  return 1;
}",0.8920863309352518
106038,"private static DiskTO[] sortVolumesByDeviceId(DiskTO[] volumes){
  List<DiskTO> listForSort=new ArrayList<DiskTO>();
  for (  DiskTO vol : volumes) {
    listForSort.add(vol);
  }
  Collections.sort(listForSort,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      if (arg0.getDiskSeq() < arg1.getDiskSeq()) {
        return -1;
      }
 else       if (arg0.getDiskSeq() == arg1.getDiskSeq()) {
        return 0;
      }
      return 1;
    }
  }
);
  return listForSort.toArray(new DiskTO[0]);
}","private static DiskTO[] sortVolumesByDeviceId(DiskTO[] volumes){
  List<DiskTO> listForSort=new ArrayList<DiskTO>();
  for (  DiskTO vol : volumes) {
    listForSort.add(vol);
  }
  Collections.sort(listForSort,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      if (arg0.getDiskSeq() < arg1.getDiskSeq()) {
        return -1;
      }
 else       if (arg0.getDiskSeq().equals(arg1.getDiskSeq())) {
        return 0;
      }
      return 1;
    }
  }
);
  return listForSort.toArray(new DiskTO[0]);
}",0.9880404783808648
106039,"@Override public Void copyAsync(Map<VolumeInfo,DataStore> volumeMap,VirtualMachineTO vmTo,Host srcHost,Host destHost,AsyncCompletionCallback<CopyCommandResult> callback){
  Answer answer=null;
  String errMsg=null;
  try {
    VMInstanceVO instance=instanceDao.findById(vmTo.getId());
    if (instance != null) {
      if (srcHost.getClusterId() == destHost.getClusterId()) {
        answer=migrateVmWithVolumesWithinCluster(instance,vmTo,srcHost,destHost,volumeMap);
      }
 else {
        answer=migrateVmWithVolumesAcrossCluster(instance,vmTo,srcHost,destHost,volumeMap);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
    errMsg=e.toString();
  }
  CopyCommandResult result=new CopyCommandResult(null,answer);
  result.setResult(errMsg);
  callback.complete(result);
  return null;
}","@Override public Void copyAsync(Map<VolumeInfo,DataStore> volumeMap,VirtualMachineTO vmTo,Host srcHost,Host destHost,AsyncCompletionCallback<CopyCommandResult> callback){
  Answer answer=null;
  String errMsg=null;
  try {
    VMInstanceVO instance=instanceDao.findById(vmTo.getId());
    if (instance != null) {
      if (srcHost.getClusterId().equals(destHost.getClusterId())) {
        answer=migrateVmWithVolumesWithinCluster(instance,vmTo,srcHost,destHost,volumeMap);
      }
 else {
        answer=migrateVmWithVolumesAcrossCluster(instance,vmTo,srcHost,destHost,volumeMap);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
    errMsg=e.toString();
  }
  CopyCommandResult result=new CopyCommandResult(null,answer);
  result.setResult(errMsg);
  callback.complete(result);
  return null;
}",0.9927737632017788
106040,"protected void advanceExpunge(VMInstanceVO vm) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  advanceStop(vm.getUuid(),false);
  vm=_vmDao.findByUuid(vm.getUuid());
  try {
    if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
      s_logger.debug(""String_Node_Str"" + vm);
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + vm);
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  s_logger.debug(""String_Node_Str"");
  List<Command> nicExpungeCommands=hvGuru.finalizeExpungeNics(vm,profile.getNics());
  _networkMgr.cleanupNics(profile);
  s_logger.debug(""String_Node_Str"");
  List<Command> volumeExpungeCommands=hvGuru.finalizeExpungeVolumes(vm);
  Long hostId=vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();
  if (volumeExpungeCommands != null && hostId != null) {
    Commands cmds=new Commands(Command.OnError.Stop);
    for (    Command volumeExpungeCommand : volumeExpungeCommands) {
      cmds.addCommand(volumeExpungeCommand);
    }
    _agentMgr.send(hostId,cmds);
    if (!cmds.isSuccessful()) {
      for (      Answer answer : cmds.getAnswers()) {
        if (!answer.getResult()) {
          s_logger.warn(""String_Node_Str"" + answer.getDetails());
          throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ answer.getDetails());
        }
      }
    }
  }
  if (hostId != null) {
    volumeMgr.disconnectVolumesFromHost(vm.getId(),hostId);
  }
  volumeMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  _uservmDetailsDao.removeDetails(vm.getId());
  List<Command> finalizeExpungeCommands=hvGuru.finalizeExpunge(vm);
  if (finalizeExpungeCommands != null && finalizeExpungeCommands.size() > 0) {
    if (hostId != null) {
      Commands cmds=new Commands(Command.OnError.Stop);
      for (      Command command : finalizeExpungeCommands) {
        cmds.addCommand(command);
      }
      if (nicExpungeCommands != null) {
        for (        Command command : nicExpungeCommands) {
          cmds.addCommand(command);
        }
      }
      _agentMgr.send(hostId,cmds);
      if (!cmds.isSuccessful()) {
        for (        Answer answer : cmds.getAnswers()) {
          if (!answer.getResult()) {
            s_logger.warn(""String_Node_Str"" + answer.getDetails());
            throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ answer.getDetails());
          }
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
}","protected void advanceExpunge(VMInstanceVO vm) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  advanceStop(vm.getUuid(),false);
  vm=_vmDao.findByUuid(vm.getUuid());
  try {
    if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
      s_logger.debug(""String_Node_Str"" + vm);
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + vm);
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  s_logger.debug(""String_Node_Str"");
  List<Command> nicExpungeCommands=hvGuru.finalizeExpungeNics(vm,profile.getNics());
  _networkMgr.cleanupNics(profile);
  s_logger.debug(""String_Node_Str"");
  List<Command> volumeExpungeCommands=hvGuru.finalizeExpungeVolumes(vm);
  Long hostId=vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();
  if (volumeExpungeCommands != null && volumeExpungeCommands.size() > 0 && hostId != null) {
    Commands cmds=new Commands(Command.OnError.Stop);
    for (    Command volumeExpungeCommand : volumeExpungeCommands) {
      cmds.addCommand(volumeExpungeCommand);
    }
    _agentMgr.send(hostId,cmds);
    if (!cmds.isSuccessful()) {
      for (      Answer answer : cmds.getAnswers()) {
        if (!answer.getResult()) {
          s_logger.warn(""String_Node_Str"" + answer.getDetails());
          throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ answer.getDetails());
        }
      }
    }
  }
  if (hostId != null) {
    volumeMgr.disconnectVolumesFromHost(vm.getId(),hostId);
  }
  volumeMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  _uservmDetailsDao.removeDetails(vm.getId());
  List<Command> finalizeExpungeCommands=hvGuru.finalizeExpunge(vm);
  if (finalizeExpungeCommands != null && finalizeExpungeCommands.size() > 0) {
    if (hostId != null) {
      Commands cmds=new Commands(Command.OnError.Stop);
      for (      Command command : finalizeExpungeCommands) {
        cmds.addCommand(command);
      }
      if (nicExpungeCommands != null) {
        for (        Command command : nicExpungeCommands) {
          cmds.addCommand(command);
        }
      }
      _agentMgr.send(hostId,cmds);
      if (!cmds.isSuccessful()) {
        for (        Answer answer : cmds.getAnswers()) {
          if (!answer.getResult()) {
            s_logger.warn(""String_Node_Str"" + answer.getDetails());
            throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ answer.getDetails());
          }
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
}",0.9941785252263908
106041,"private Pair<ManagedObjectReference,String> prepareNetworkFromNicInfo(HostMO hostMo,NicTO nicTo,boolean configureVServiceInNexus,VirtualMachine.Type vmType) throws Exception {
  Ternary<String,String,String> switchDetails=getTargetSwitch(nicTo);
  nicTo.getType();
  VirtualSwitchType switchType=VirtualSwitchType.getType(switchDetails.second());
  String switchName=switchDetails.first();
  String vlanToken=switchDetails.third();
  String namePrefix=getNetworkNamePrefix(nicTo);
  Pair<ManagedObjectReference,String> networkInfo=null;
  s_logger.info(""String_Node_Str"" + switchType + ""String_Node_Str""+ switchName+ ""String_Node_Str""+ namePrefix);
  if (VirtualSwitchType.StandardVirtualSwitch == switchType) {
synchronized (hostMo.getMor().getValue().intern()) {
      networkInfo=HypervisorHostHelper.prepareNetwork(switchName,namePrefix,hostMo,getVlanInfo(nicTo,vlanToken),nicTo.getNetworkRateMbps(),nicTo.getNetworkRateMulticastMbps(),_ops_timeout,!namePrefix.startsWith(""String_Node_Str""),nicTo.getBroadcastType(),nicTo.getUuid());
    }
  }
 else {
    String vlanId=getVlanInfo(nicTo,vlanToken);
    String svlanId=null;
    boolean pvlannetwork=(getPvlanInfo(nicTo) == null) ? false : true;
    if (vmType != null && vmType.equals(VirtualMachine.Type.DomainRouter) && pvlannetwork) {
      svlanId=vlanId;
    }
 else {
      svlanId=getPvlanInfo(nicTo);
    }
    networkInfo=HypervisorHostHelper.prepareNetwork(switchName,namePrefix,hostMo,vlanId,svlanId,nicTo.getNetworkRateMbps(),nicTo.getNetworkRateMulticastMbps(),_ops_timeout,switchType,_portsPerDvPortGroup,nicTo.getGateway(),configureVServiceInNexus,nicTo.getBroadcastType());
  }
  return networkInfo;
}","private Pair<ManagedObjectReference,String> prepareNetworkFromNicInfo(HostMO hostMo,NicTO nicTo,boolean configureVServiceInNexus,VirtualMachine.Type vmType) throws Exception {
  Ternary<String,String,String> switchDetails=getTargetSwitch(nicTo);
  nicTo.getType();
  VirtualSwitchType switchType=VirtualSwitchType.getType(switchDetails.second());
  String switchName=switchDetails.first();
  String vlanToken=switchDetails.third();
  String namePrefix=getNetworkNamePrefix(nicTo);
  Pair<ManagedObjectReference,String> networkInfo=null;
  s_logger.info(""String_Node_Str"" + switchType + ""String_Node_Str""+ switchName+ ""String_Node_Str""+ namePrefix);
  if (VirtualSwitchType.StandardVirtualSwitch == switchType) {
synchronized (hostMo.getMor().getValue().intern()) {
      networkInfo=HypervisorHostHelper.prepareNetwork(switchName,namePrefix,hostMo,getVlanInfo(nicTo,vlanToken),nicTo.getNetworkRateMbps(),nicTo.getNetworkRateMulticastMbps(),_opsTimeout,!namePrefix.startsWith(""String_Node_Str""),nicTo.getBroadcastType(),nicTo.getUuid());
    }
  }
 else {
    String vlanId=getVlanInfo(nicTo,vlanToken);
    String svlanId=null;
    boolean pvlannetwork=(getPvlanInfo(nicTo) == null) ? false : true;
    if (vmType != null && vmType.equals(VirtualMachine.Type.DomainRouter) && pvlannetwork) {
      svlanId=vlanId;
    }
 else {
      svlanId=getPvlanInfo(nicTo);
    }
    networkInfo=HypervisorHostHelper.prepareNetwork(switchName,namePrefix,hostMo,vlanId,svlanId,nicTo.getNetworkRateMbps(),nicTo.getNetworkRateMulticastMbps(),_opsTimeout,switchType,_portsPerDvPortGroup,nicTo.getGateway(),configureVServiceInNexus,nicTo.getBroadcastType());
  }
  return networkInfo;
}",0.9874326750448832
106042,"private boolean manageSecurityPolicy(SecurityPolicyType type,SrxCommand command,Long accountId,String username,String privateIp,List<String> applicationNames,List<String> cidrs,String ipsecVpnName,boolean defaultEgressAction) throws ExecutionException {
  String fromZone=_publicZone;
  String toZone=_privateZone;
  String securityPolicyName;
  String addressBookEntryName=null;
  if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
    securityPolicyName=ipsecVpnName;
    addressBookEntryName=ipsecVpnName;
  }
 else   if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
    fromZone=_privateZone;
    toZone=_publicZone;
    securityPolicyName=genSecurityPolicyName(type,accountId,username,fromZone,toZone,privateIp);
  }
 else {
    securityPolicyName=genSecurityPolicyName(type,accountId,username,fromZone,toZone,privateIp);
    addressBookEntryName=genAddressBookEntryName(privateIp);
  }
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
return sendRequestAndCheckResponse(command,xml,""String_Node_Str"",securityPolicyName);
case CHECK_IF_IN_USE:
List<String[]> rulesToCheck=null;
if (type.equals(SecurityPolicyType.STATIC_NAT)) {
rulesToCheck=getStaticNatRules(RuleMatchCondition.ALL,null,null);
}
 else if (type.equals(SecurityPolicyType.DESTINATION_NAT)) {
rulesToCheck=getDestNatRules(RuleMatchCondition.ALL,null,null,null,null);
}
 else {
return false;
}
for (String[] rule : rulesToCheck) {
String rulePrivateIp=rule[1];
if (privateIp.equals(rulePrivateIp)) {
return true;
}
}
return false;
case ADD:
if (!(type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT))) {
if (!manageAddressBookEntry(SrxCommand.CHECK_IF_EXISTS,toZone,privateIp,addressBookEntryName)) {
throw new ExecutionException(""String_Node_Str"" + securityPolicyName);
}
}
String srcAddrs=""String_Node_Str"";
String dstAddrs=""String_Node_Str"";
String action=""String_Node_Str"";
xml=SrxXml.SECURITY_POLICY_ADD.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
xml=replaceXmlValue(xml,""String_Node_Str"",_privateZone);
xml=replaceXmlValue(xml,""String_Node_Str"",_publicZone);
if (cidrs == null) {
srcAddrs=""String_Node_Str"";
}
 else {
for (String cidr : cidrs) {
srcAddrs+=""String_Node_Str"" + genAddressBookEntryName(cidr) + ""String_Node_Str"";
}
}
xml=replaceXmlValue(xml,""String_Node_Str"",srcAddrs);
dstAddrs=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",dstAddrs);
if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
if (defaultEgressAction == false) {
action=""String_Node_Str"";
}
 else {
action=""String_Node_Str"";
}
}
 else {
if (defaultEgressAction == true) {
action=""String_Node_Str"";
}
 else {
action=""String_Node_Str"";
}
xml=replaceXmlValue(xml,""String_Node_Str"",action);
}
}
 else {
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
srcAddrs=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",srcAddrs);
dstAddrs=""String_Node_Str"" + addressBookEntryName + ""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",dstAddrs);
}
if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
xml=replaceXmlValue(xml,""String_Node_Str"",""String_Node_Str"" + ipsecVpnName + ""String_Node_Str"");
}
 else {
xml=replaceXmlValue(xml,""String_Node_Str"",""String_Node_Str"");
if (!(type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS))) {
action=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",action);
}
}
String applications;
if (applicationNames == null || applicationNames.size() == 0) {
applications=""String_Node_Str"";
}
 else {
applications=""String_Node_Str"";
for (String applicationName : applicationNames) {
applications+=""String_Node_Str"" + applicationName + ""String_Node_Str"";
}
}
xml=replaceXmlValue(xml,""String_Node_Str"",applications);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ applicationNames);
}
 else {
return true;
}
case DELETE:
if (!manageSecurityPolicy(type,SrxCommand.CHECK_IF_EXISTS,null,null,privateIp,applicationNames,cidrs,ipsecVpnName,defaultEgressAction)) {
return true;
}
if (manageSecurityPolicy(type,SrxCommand.CHECK_IF_IN_USE,null,null,privateIp,applicationNames,cidrs,ipsecVpnName,defaultEgressAction)) {
return true;
}
xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
boolean success=sendRequestAndCheckResponse(command,xml);
if (success) {
xml=SrxXml.SECURITY_POLICY_GETALL.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
String getAllResponseXml=sendRequest(xml);
if (getAllResponseXml == null) {
throw new ExecutionException(""String_Node_Str"");
}
if (!getAllResponseXml.contains(fromZone) || !getAllResponseXml.contains(toZone)) {
return true;
}
 else if (!getAllResponseXml.contains(""String_Node_Str"") && !getAllResponseXml.contains(""String_Node_Str"")) {
xml=SrxXml.SECURITY_POLICY_GROUP.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=setDelete(xml,true);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"");
}
 else {
return true;
}
}
 else {
return true;
}
}
 else {
throw new ExecutionException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ applicationNames);
}
default :
s_logger.debug(""String_Node_Str"");
return false;
}
}","private boolean manageSecurityPolicy(SecurityPolicyType type,SrxCommand command,Long accountId,String username,String privateIp,List<String> applicationNames,List<String> cidrs,String ipsecVpnName,boolean defaultEgressAction) throws ExecutionException {
  String fromZone=_publicZone;
  String toZone=_privateZone;
  String securityPolicyName;
  String addressBookEntryName=null;
  if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
    securityPolicyName=ipsecVpnName;
    addressBookEntryName=ipsecVpnName;
  }
 else   if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
    fromZone=_privateZone;
    toZone=_publicZone;
    securityPolicyName=genSecurityPolicyName(type,accountId,username,fromZone,toZone,privateIp);
  }
 else {
    securityPolicyName=genSecurityPolicyName(type,accountId,username,fromZone,toZone,privateIp);
    addressBookEntryName=genAddressBookEntryName(privateIp);
  }
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
return sendRequestAndCheckResponse(command,xml,""String_Node_Str"",securityPolicyName);
case CHECK_IF_IN_USE:
List<String[]> rulesToCheck=null;
if (type.equals(SecurityPolicyType.STATIC_NAT)) {
rulesToCheck=getStaticNatRules(RuleMatchCondition.ALL,null,null);
}
 else if (type.equals(SecurityPolicyType.DESTINATION_NAT)) {
rulesToCheck=getDestNatRules(RuleMatchCondition.ALL,null,null,null,null);
}
 else {
return false;
}
for (String[] rule : rulesToCheck) {
String rulePrivateIp=rule[1];
if (privateIp.equals(rulePrivateIp)) {
return true;
}
}
return false;
case ADD:
if (!(type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT))) {
if (!manageAddressBookEntry(SrxCommand.CHECK_IF_EXISTS,toZone,privateIp,addressBookEntryName)) {
throw new ExecutionException(""String_Node_Str"" + securityPolicyName);
}
}
String srcAddrs=""String_Node_Str"";
String dstAddrs=""String_Node_Str"";
String action=""String_Node_Str"";
xml=SrxXml.SECURITY_POLICY_ADD.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
xml=replaceXmlValue(xml,""String_Node_Str"",_privateZone);
xml=replaceXmlValue(xml,""String_Node_Str"",_publicZone);
if (cidrs == null || cidrs.size() == 0) {
srcAddrs=""String_Node_Str"";
}
 else {
for (String cidr : cidrs) {
srcAddrs+=""String_Node_Str"" + genAddressBookEntryName(cidr) + ""String_Node_Str"";
}
}
xml=replaceXmlValue(xml,""String_Node_Str"",srcAddrs);
dstAddrs=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",dstAddrs);
if (type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT)) {
if (defaultEgressAction == false) {
action=""String_Node_Str"";
}
 else {
action=""String_Node_Str"";
}
}
 else {
if (defaultEgressAction == true) {
action=""String_Node_Str"";
}
 else {
action=""String_Node_Str"";
}
xml=replaceXmlValue(xml,""String_Node_Str"",action);
}
}
 else {
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
srcAddrs=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",srcAddrs);
dstAddrs=""String_Node_Str"" + addressBookEntryName + ""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",dstAddrs);
}
if (type.equals(SecurityPolicyType.VPN) && ipsecVpnName != null) {
xml=replaceXmlValue(xml,""String_Node_Str"",""String_Node_Str"" + ipsecVpnName + ""String_Node_Str"");
}
 else {
xml=replaceXmlValue(xml,""String_Node_Str"",""String_Node_Str"");
if (!(type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS_DEFAULT) || type.equals(SecurityPolicyType.SECURITYPOLICY_EGRESS))) {
action=""String_Node_Str"";
xml=replaceXmlValue(xml,""String_Node_Str"",action);
}
}
String applications;
if (applicationNames == null || applicationNames.size() == 0) {
applications=""String_Node_Str"";
}
 else {
applications=""String_Node_Str"";
for (String applicationName : applicationNames) {
applications+=""String_Node_Str"" + applicationName + ""String_Node_Str"";
}
}
xml=replaceXmlValue(xml,""String_Node_Str"",applications);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ applicationNames);
}
 else {
return true;
}
case DELETE:
if (!manageSecurityPolicy(type,SrxCommand.CHECK_IF_EXISTS,null,null,privateIp,applicationNames,cidrs,ipsecVpnName,defaultEgressAction)) {
return true;
}
if (manageSecurityPolicy(type,SrxCommand.CHECK_IF_IN_USE,null,null,privateIp,applicationNames,cidrs,ipsecVpnName,defaultEgressAction)) {
return true;
}
xml=SrxXml.SECURITY_POLICY_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=replaceXmlValue(xml,""String_Node_Str"",securityPolicyName);
boolean success=sendRequestAndCheckResponse(command,xml);
if (success) {
xml=SrxXml.SECURITY_POLICY_GETALL.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
String getAllResponseXml=sendRequest(xml);
if (getAllResponseXml == null) {
throw new ExecutionException(""String_Node_Str"");
}
if (!getAllResponseXml.contains(fromZone) || !getAllResponseXml.contains(toZone)) {
return true;
}
 else if (!getAllResponseXml.contains(""String_Node_Str"") && !getAllResponseXml.contains(""String_Node_Str"")) {
xml=SrxXml.SECURITY_POLICY_GROUP.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",fromZone);
xml=replaceXmlValue(xml,""String_Node_Str"",toZone);
xml=setDelete(xml,true);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"");
}
 else {
return true;
}
}
 else {
return true;
}
}
 else {
throw new ExecutionException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ applicationNames);
}
default :
s_logger.debug(""String_Node_Str"");
return false;
}
}",0.9982869728362836
106043,"private void handlePowerOffReportWithNoPendingJobsOnVM(VMInstanceVO vm){
switch (vm.getState()) {
case Starting:
case Stopping:
case Stopped:
case Migrating:
    try {
      stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOffReport,vm.getPowerHostId());
    }
 catch (    NoTransitionException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_SYNC,vm.getDataCenterId(),vm.getPodIdToDeployIn(),VM_SYNC_ALERT_SUBJECT,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getInstanceName()+ ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
break;
case Running:
case Destroyed:
case Expunging:
break;
case Error:
default :
break;
}
}","private void handlePowerOffReportWithNoPendingJobsOnVM(VMInstanceVO vm){
switch (vm.getState()) {
case Starting:
case Stopping:
case Running:
case Stopped:
case Migrating:
    try {
      stateTransitTo(vm,VirtualMachine.Event.FollowAgentPowerOffReport,vm.getPowerHostId());
    }
 catch (    NoTransitionException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_SYNC,vm.getDataCenterId(),vm.getPodIdToDeployIn(),VM_SYNC_ALERT_SUBJECT,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getInstanceName()+ ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
break;
case Destroyed:
case Expunging:
break;
case Error:
default :
break;
}
}",0.980225988700565
106044,"@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  ReservationContextImpl.init(_entityMgr);
  VirtualMachineProfileImpl.init(_entityMgr);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=ManagementServerNode.getManagementServerId();
  _agentMgr.registerForHostEvents(this,true,true,true);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  ReservationContextImpl.init(_entityMgr);
  VirtualMachineProfileImpl.init(_entityMgr);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=ManagementServerNode.getManagementServerId();
  _agentMgr.registerForHostEvents(this,true,true,true);
  if (VmJobEnabled.value()) {
    _messageBus.subscribe(VirtualMachineManager.Topics.VM_POWER_STATE,MessageDispatcher.getDispatcher(this));
  }
  return true;
}",0.8261758691206544
106045,"@Override public void processHostVmStatePingReport(long hostId,Map<String,HostVmStateReportEntry> report){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
  Map<Long,VirtualMachine.PowerState> translatedInfo=convertToInfos(report);
  processReport(hostId,translatedInfo);
}","@Override public void processHostVmStatePingReport(long hostId,Map<String,HostVmStateReportEntry> report){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
  Map<Long,VirtualMachine.PowerState> translatedInfo=convertVmStateReport(report);
  processReport(hostId,translatedInfo);
}",0.96742671009772
106046,"private void processReport(long hostId,Map<Long,VirtualMachine.PowerState> translatedInfo){
  for (  Map.Entry<Long,VirtualMachine.PowerState> entry : translatedInfo.entrySet()) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
    if (_instanceDao.updatePowerState(entry.getKey(),hostId,entry.getValue())) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
      _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,entry.getKey());
    }
  }
}","private void processReport(long hostId,Map<Long,VirtualMachine.PowerState> translatedInfo){
  for (  Map.Entry<Long,VirtualMachine.PowerState> entry : translatedInfo.entrySet()) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
    if (_instanceDao.updatePowerState(entry.getKey(),hostId,entry.getValue())) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
      _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,entry.getKey());
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + entry.getKey());
    }
  }
}",0.927766732935719
106047,"@Override public void processHostVmStateReport(long hostId,Map<String,HostVmStateReportEntry> report){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
  Map<Long,VirtualMachine.PowerState> translatedInfo=convertToInfos(report);
  processReport(hostId,translatedInfo);
}","@Override public void processHostVmStateReport(long hostId,Map<String,HostVmStateReportEntry> report){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
  Map<Long,VirtualMachine.PowerState> translatedInfo=convertVmStateReport(report);
  processReport(hostId,translatedInfo);
}",0.966996699669967
106048,"@Override @DB public void resetHostPowerStateTracking(long hostId){
  SearchCriteria<VMInstanceVO> sc=createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  VMInstanceVO instance=this.createForUpdate();
  instance.setPowerStateUpdateCount(0);
  instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
  this.update(instance,sc);
}","@Override @DB public void resetHostPowerStateTracking(final long hostId){
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      SearchCriteria<VMInstanceVO> sc=createSearchCriteria();
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
      VMInstanceVO instance=createForUpdate();
      instance.setPowerStateUpdateCount(0);
      instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
      update(instance,sc);
    }
  }
);
}",0.7841409691629956
106049,"@Override public void resetVmPowerStateTracking(long instanceId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  txn.start();
  VMInstanceVO instance=findById(instanceId);
  if (instance != null) {
    instance.setPowerStateUpdateCount(0);
    instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
    update(instanceId,instance);
  }
  txn.commit();
}","@Override public void resetVmPowerStateTracking(final long instanceId){
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      VMInstanceVO instance=findById(instanceId);
      if (instance != null) {
        instance.setPowerStateUpdateCount(0);
        instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
        update(instanceId,instance);
      }
    }
  }
);
}",0.7199046483909416
106050,"@Override public boolean updatePowerState(long instanceId,long powerHostId,VirtualMachine.PowerState powerState){
  boolean needToUpdate=false;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  txn.start();
  VMInstanceVO instance=findById(instanceId);
  if (instance != null) {
    Long savedPowerHostId=instance.getPowerHostId();
    if (instance.getPowerState() != powerState || savedPowerHostId == null || savedPowerHostId.longValue() != powerHostId) {
      instance.setPowerState(powerState);
      instance.setPowerHostId(powerHostId);
      instance.setPowerStateUpdateCount(1);
      instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
      needToUpdate=true;
      update(instanceId,instance);
    }
 else {
      if (instance.getPowerStateUpdateCount() < MAX_CONSECUTIVE_SAME_STATE_UPDATE_COUNT) {
        instance.setPowerStateUpdateCount(instance.getPowerStateUpdateCount() + 1);
        instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
        needToUpdate=true;
        update(instanceId,instance);
      }
    }
  }
  txn.commit();
  return needToUpdate;
}","@Override public boolean updatePowerState(final long instanceId,final long powerHostId,final VirtualMachine.PowerState powerState){
  return Transaction.execute(new TransactionCallback<Boolean>(){
    @Override public Boolean doInTransaction(    TransactionStatus status){
      boolean needToUpdate=false;
      VMInstanceVO instance=findById(instanceId);
      if (instance != null) {
        Long savedPowerHostId=instance.getPowerHostId();
        if (instance.getPowerState() != powerState || savedPowerHostId == null || savedPowerHostId.longValue() != powerHostId) {
          instance.setPowerState(powerState);
          instance.setPowerHostId(powerHostId);
          instance.setPowerStateUpdateCount(1);
          instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
          needToUpdate=true;
          update(instanceId,instance);
        }
 else {
          if (instance.getPowerStateUpdateCount() < MAX_CONSECUTIVE_SAME_STATE_UPDATE_COUNT) {
            instance.setPowerStateUpdateCount(instance.getPowerStateUpdateCount() + 1);
            instance.setPowerStateUpdateTime(DateUtil.currentGMTTime());
            needToUpdate=true;
            update(instanceId,instance);
          }
        }
      }
      return needToUpdate;
    }
  }
);
}",0.809102402022756
106051,"@Override public void deleteController(DeleteOpenDaylightControllerCmd cmd) throws InvalidParameterValueException {
  OpenDaylightControllerVO controller=openDaylightControllerMappingDao.findById(cmd.getId());
  if (controller == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getId());
  }
  Long physicalNetworkId=controller.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork != null) {
    List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
    for (    NetworkVO network : networkList) {
      if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.OpenDaylight) {
        if ((network.getState() != Network.State.Shutdown) && (network.getState() != Network.State.Destroy)) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  HostVO host=hostDao.findById(controller.getHostId());
  Long hostId=host.getId();
  host.setResourceState(ResourceState.Maintenance);
  hostDao.update(hostId,host);
  resourceManager.deleteHost(hostId,false,false);
  openDaylightControllerMappingDao.remove(cmd.getId());
}","@Override public void deleteController(DeleteOpenDaylightControllerCmd cmd) throws InvalidParameterValueException {
  OpenDaylightControllerVO controller=openDaylightControllerMappingDao.findById(cmd.getId());
  if (controller == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getId());
  }
  Long physicalNetworkId=controller.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork != null) {
    List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
    if (networkList != null) {
      for (      NetworkVO network : networkList) {
        if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.OpenDaylight) {
          if ((network.getState() != Network.State.Shutdown) && (network.getState() != Network.State.Destroy)) {
            throw new CloudRuntimeException(""String_Node_Str"");
          }
        }
      }
    }
  }
  HostVO host=hostDao.findById(controller.getHostId());
  Long hostId=host.getId();
  host.setResourceState(ResourceState.Maintenance);
  hostDao.update(hostId,host);
  resourceManager.deleteHost(hostId,false,false);
  openDaylightControllerMappingDao.remove(cmd.getId());
}",0.975071516142215
106052,"@Override public OpenDaylightControllerVO addController(AddOpenDaylightControllerCmd cmd){
  ServerResource odlController=new OpenDaylightControllerResource();
  final String deviceName=NetworkDevice.OpenDaylightController.getName();
  NetworkDevice networkDevice=NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  final Map<String,String> hostParams=new HashMap<String,String>();
  hostParams.put(""String_Node_Str"",UUID.randomUUID().toString());
  hostParams.put(""String_Node_Str"",String.valueOf(physicalNetwork.getDataCenterId()));
  hostParams.put(""String_Node_Str"",String.valueOf(physicalNetwork.getId()));
  hostParams.put(""String_Node_Str"",""String_Node_Str"" + hostParams.get(""String_Node_Str""));
  hostParams.put(""String_Node_Str"",cmd.getUrl());
  hostParams.put(""String_Node_Str"",cmd.getUsername());
  hostParams.put(""String_Node_Str"",cmd.getPassword());
  Map<String,Object> hostdetails=new HashMap<String,Object>();
  hostdetails.putAll(hostParams);
  try {
    odlController.configure(hostParams.get(""String_Node_Str""),hostdetails);
    final Host host=resourceManager.addHost(zoneId,odlController,Host.Type.L2Networking,hostParams);
    if (host != null) {
      return Transaction.execute(new TransactionCallback<OpenDaylightControllerVO>(){
        @Override public OpenDaylightControllerVO doInTransaction(        TransactionStatus status){
          OpenDaylightControllerVO controller=new OpenDaylightControllerVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),hostParams.get(""String_Node_Str""));
          openDaylightControllerMappingDao.persist(controller);
          return controller;
        }
      }
);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","@Override public OpenDaylightControllerVO addController(AddOpenDaylightControllerCmd cmd){
  ServerResource odlController=new OpenDaylightControllerResource();
  final String deviceName=NetworkDevice.OpenDaylightController.getName();
  NetworkDevice networkDevice=NetworkDevice.getNetworkDevice(deviceName);
  if (networkDevice == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + deviceName);
  }
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  final Map<String,String> hostParams=new HashMap<String,String>();
  hostParams.put(""String_Node_Str"",UUID.randomUUID().toString());
  hostParams.put(""String_Node_Str"",String.valueOf(physicalNetwork.getDataCenterId()));
  hostParams.put(""String_Node_Str"",String.valueOf(physicalNetwork.getId()));
  hostParams.put(""String_Node_Str"",""String_Node_Str"" + hostParams.get(""String_Node_Str""));
  hostParams.put(""String_Node_Str"",cmd.getUrl());
  hostParams.put(""String_Node_Str"",cmd.getUsername());
  hostParams.put(""String_Node_Str"",cmd.getPassword());
  Map<String,Object> hostdetails=new HashMap<String,Object>();
  hostdetails.putAll(hostParams);
  try {
    odlController.configure(hostParams.get(""String_Node_Str""),hostdetails);
    final Host host=resourceManager.addHost(zoneId,odlController,Host.Type.L2Networking,hostParams);
    if (host != null) {
      return Transaction.execute(new TransactionCallback<OpenDaylightControllerVO>(){
        @Override public OpenDaylightControllerVO doInTransaction(        TransactionStatus status){
          OpenDaylightControllerVO controller=new OpenDaylightControllerVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),hostParams.get(""String_Node_Str""));
          openDaylightControllerMappingDao.persist(controller);
          return controller;
        }
      }
);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9814814814814816
106053,"@Override public boolean deleteNiciraNvpDevice(DeleteNiciraNvpDeviceCmd cmd){
  Long niciraDeviceId=cmd.getNiciraNvpDeviceId();
  NiciraNvpDeviceVO niciraNvpDevice=niciraNvpDao.findById(niciraDeviceId);
  if (niciraNvpDevice == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + niciraDeviceId);
  }
  Long physicalNetworkId=niciraNvpDevice.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork != null) {
    List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
    for (    NetworkVO network : networkList) {
      if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Lswitch) {
        if ((network.getState() != Network.State.Shutdown) && (network.getState() != Network.State.Destroy)) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  HostVO niciraHost=hostDao.findById(niciraNvpDevice.getHostId());
  Long hostId=niciraHost.getId();
  niciraHost.setResourceState(ResourceState.Maintenance);
  hostDao.update(hostId,niciraHost);
  resourceMgr.deleteHost(hostId,false,false);
  niciraNvpDao.remove(niciraDeviceId);
  return true;
}","@Override public boolean deleteNiciraNvpDevice(DeleteNiciraNvpDeviceCmd cmd){
  Long niciraDeviceId=cmd.getNiciraNvpDeviceId();
  NiciraNvpDeviceVO niciraNvpDevice=niciraNvpDao.findById(niciraDeviceId);
  if (niciraNvpDevice == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + niciraDeviceId);
  }
  Long physicalNetworkId=niciraNvpDevice.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork != null) {
    List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
    if (networkList != null) {
      for (      NetworkVO network : networkList) {
        if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Lswitch) {
          if ((network.getState() != Network.State.Shutdown) && (network.getState() != Network.State.Destroy)) {
            throw new CloudRuntimeException(""String_Node_Str"");
          }
        }
      }
    }
  }
  HostVO niciraHost=hostDao.findById(niciraNvpDevice.getHostId());
  Long hostId=niciraHost.getId();
  niciraHost.setResourceState(ResourceState.Maintenance);
  hostDao.update(hostId,niciraHost);
  resourceMgr.deleteHost(hostId,false,false);
  niciraNvpDao.remove(niciraDeviceId);
  return true;
}",0.9755511022044088
106054,"@Override @DB public NiciraNvpDeviceVO addNiciraNvpDevice(AddNiciraNvpDeviceCmd cmd){
  ServerResource resource=new NiciraNvpResource();
  final String deviceName=Network.Provider.NiciraNvp.getName();
  NetworkDevice networkDevice=NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (niciraNvpDao.listByPhysicalNetwork(physicalNetworkId).size() != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",UUID.randomUUID().toString());
  params.put(""String_Node_Str"",String.valueOf(physicalNetwork.getDataCenterId()));
  params.put(""String_Node_Str"",String.valueOf(physicalNetwork.getId()));
  params.put(""String_Node_Str"",""String_Node_Str"" + cmd.getHost());
  params.put(""String_Node_Str"",cmd.getHost());
  params.put(""String_Node_Str"",cmd.getUsername());
  params.put(""String_Node_Str"",cmd.getPassword());
  params.put(""String_Node_Str"",cmd.getTransportzoneUuid());
  params.put(""String_Node_Str"",physicalNetwork.getIsolationMethods().get(0).toLowerCase());
  if (cmd.getL3GatewayServiceUuid() != null) {
    params.put(""String_Node_Str"",cmd.getL3GatewayServiceUuid());
  }
  Map<String,Object> hostdetails=new HashMap<String,Object>();
  hostdetails.putAll(params);
  try {
    resource.configure(cmd.getHost(),hostdetails);
    final Host host=resourceMgr.addHost(zoneId,resource,Host.Type.L2Networking,params);
    if (host != null) {
      return Transaction.execute(new TransactionCallback<NiciraNvpDeviceVO>(){
        @Override public NiciraNvpDeviceVO doInTransaction(        TransactionStatus status){
          NiciraNvpDeviceVO niciraNvpDevice=new NiciraNvpDeviceVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),deviceName);
          niciraNvpDao.persist(niciraNvpDevice);
          DetailVO detail=new DetailVO(host.getId(),""String_Node_Str"",String.valueOf(niciraNvpDevice.getId()));
          hostDetailsDao.persist(detail);
          return niciraNvpDevice;
        }
      }
);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
}","@Override @DB public NiciraNvpDeviceVO addNiciraNvpDevice(AddNiciraNvpDeviceCmd cmd){
  ServerResource resource=new NiciraNvpResource();
  final String deviceName=Network.Provider.NiciraNvp.getName();
  NetworkDevice networkDevice=NetworkDevice.getNetworkDevice(deviceName);
  if (networkDevice == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + deviceName);
  }
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (niciraNvpDao.listByPhysicalNetwork(physicalNetworkId).size() != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",UUID.randomUUID().toString());
  params.put(""String_Node_Str"",String.valueOf(physicalNetwork.getDataCenterId()));
  params.put(""String_Node_Str"",String.valueOf(physicalNetwork.getId()));
  params.put(""String_Node_Str"",""String_Node_Str"" + cmd.getHost());
  params.put(""String_Node_Str"",cmd.getHost());
  params.put(""String_Node_Str"",cmd.getUsername());
  params.put(""String_Node_Str"",cmd.getPassword());
  params.put(""String_Node_Str"",cmd.getTransportzoneUuid());
  params.put(""String_Node_Str"",physicalNetwork.getIsolationMethods().get(0).toLowerCase());
  if (cmd.getL3GatewayServiceUuid() != null) {
    params.put(""String_Node_Str"",cmd.getL3GatewayServiceUuid());
  }
  Map<String,Object> hostdetails=new HashMap<String,Object>();
  hostdetails.putAll(params);
  try {
    resource.configure(cmd.getHost(),hostdetails);
    final Host host=resourceMgr.addHost(zoneId,resource,Host.Type.L2Networking,params);
    if (host != null) {
      return Transaction.execute(new TransactionCallback<NiciraNvpDeviceVO>(){
        @Override public NiciraNvpDeviceVO doInTransaction(        TransactionStatus status){
          NiciraNvpDeviceVO niciraNvpDevice=new NiciraNvpDeviceVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),deviceName);
          niciraNvpDao.persist(niciraNvpDevice);
          DetailVO detail=new DetailVO(host.getId(),""String_Node_Str"",String.valueOf(niciraNvpDevice.getId()));
          hostDetailsDao.persist(detail);
          return niciraNvpDevice;
        }
      }
);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
}",0.9836065573770492
106055,"@Override public List<? extends Network> listNiciraNvpDeviceNetworks(ListNiciraNvpDeviceNetworksCmd cmd){
  Long niciraDeviceId=cmd.getNiciraNvpDeviceId();
  NiciraNvpDeviceVO niciraNvpDevice=niciraNvpDao.findById(niciraDeviceId);
  if (niciraNvpDevice == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + niciraDeviceId);
  }
  Long physicalNetworkId=niciraNvpDevice.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    return Collections.emptyList();
  }
  List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
  List<NetworkVO> responseList=new ArrayList<NetworkVO>();
  for (  NetworkVO network : networkList) {
    if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Lswitch) {
      responseList.add(network);
    }
  }
  return responseList;
}","@Override public List<? extends Network> listNiciraNvpDeviceNetworks(ListNiciraNvpDeviceNetworksCmd cmd){
  Long niciraDeviceId=cmd.getNiciraNvpDeviceId();
  NiciraNvpDeviceVO niciraNvpDevice=niciraNvpDao.findById(niciraDeviceId);
  if (niciraNvpDevice == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + niciraDeviceId);
  }
  Long physicalNetworkId=niciraNvpDevice.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    return Collections.emptyList();
  }
  List<NetworkVO> networkList=networkDao.listByPhysicalNetwork(physicalNetworkId);
  if (networkList == null) {
    return Collections.emptyList();
  }
  List<NetworkVO> responseList=new ArrayList<NetworkVO>();
  for (  NetworkVO network : networkList) {
    if (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Lswitch) {
      responseList.add(network);
    }
  }
  return responseList;
}",0.9634340222575516
106056,"public NiciraNvpApi(){
  client=createHttpClient();
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  try {
    Protocol.registerProtocol(""String_Node_Str"",new Protocol(""String_Node_Str"",(ProtocolSocketFactory)new TrustingProtocolSocketFactory(),HTTPS_PORT));
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  gson=new GsonBuilder().registerTypeAdapter(NatRule.class,new NatRuleAdapter()).setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
  buildTypeSpecificStructures();
}","public NiciraNvpApi(){
  client=createHttpClient();
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  try {
    Protocol.registerProtocol(""String_Node_Str"",new Protocol(""String_Node_Str"",(ProtocolSocketFactory)new TrustingProtocolSocketFactory(),HTTPS_PORT));
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  gson=new GsonBuilder().registerTypeAdapter(NatRule.class,new NatRuleAdapter()).setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
}",0.969641214351426
106057,"public Outcome<VirtualMachine> addVmToNetworkThroughJobQueue(final VirtualMachine vm,final Network network,final NicProfile requested){
  final CallContext context=CallContext.current();
  final User user=context.getCallingUser();
  final Account account=context.getCallingAccount();
  Object[] result=Transaction.execute(new TransactionCallback<Object[]>(){
    @Override public Object[] doInTransaction(    TransactionStatus status){
      List<VmWorkJobVO> pendingWorkJobs=_workJobDao.listPendingWorkJobs(VirtualMachine.Type.Instance,vm.getId(),VmWorkAddVmToNetwork.class.getName());
      VmWorkJobVO workJob=null;
      if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {
        assert(pendingWorkJobs.size() == 1);
        workJob=pendingWorkJobs.get(0);
      }
 else {
        workJob=new VmWorkJobVO(context.getContextId());
        workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
        workJob.setCmd(VmWorkAddVmToNetwork.class.getName());
        workJob.setAccountId(account.getId());
        workJob.setUserId(user.getId());
        workJob.setVmType(vm.getType());
        workJob.setVmInstanceId(vm.getId());
        workJob.setRelated(AsyncJobExecutionContext.getOriginJobContextId());
        VmWorkAddVmToNetwork workInfo=new VmWorkAddVmToNetwork(user.getId(),account.getId(),vm.getId(),VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER,network,requested);
        workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
        _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
      }
      return new Object[]{workJob,new Long(workJob.getId())};
    }
  }
);
  final long jobId=(Long)result[1];
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmJobVirtualMachineOutcome((VmWorkJobVO)result[0],vm.getId());
}","public Outcome<VirtualMachine> addVmToNetworkThroughJobQueue(final VirtualMachine vm,final Network network,final NicProfile requested){
  final CallContext context=CallContext.current();
  final User user=context.getCallingUser();
  final Account account=context.getCallingAccount();
  Object[] result=Transaction.execute(new TransactionCallback<Object[]>(){
    @Override public Object[] doInTransaction(    TransactionStatus status){
      List<VmWorkJobVO> pendingWorkJobs=_workJobDao.listPendingWorkJobs(VirtualMachine.Type.Instance,vm.getId(),VmWorkAddVmToNetwork.class.getName());
      VmWorkJobVO workJob=null;
      if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {
        assert(pendingWorkJobs.size() == 1);
        workJob=pendingWorkJobs.get(0);
      }
 else {
        workJob=new VmWorkJobVO(context.getContextId());
        workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
        workJob.setCmd(VmWorkAddVmToNetwork.class.getName());
        workJob.setAccountId(account.getId());
        workJob.setUserId(user.getId());
        workJob.setVmType(vm.getType());
        workJob.setVmInstanceId(vm.getId());
        workJob.setRelated(AsyncJobExecutionContext.getOriginJobContextId());
        VmWorkAddVmToNetwork workInfo=new VmWorkAddVmToNetwork(user.getId(),account.getId(),vm.getId(),VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER,network.getId(),requested);
        workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
        _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
      }
      return new Object[]{workJob,new Long(workJob.getId())};
    }
  }
);
  final long jobId=(Long)result[1];
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmJobVirtualMachineOutcome((VmWorkJobVO)result[0],vm.getId());
}",0.9977997799779978
106058,"@Override public NicProfile addVmToNetwork(VirtualMachine vm,Network network,NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateAddVmToNetwork(vm,network,requested);
  }
 else {
    Outcome<VirtualMachine> outcome=addVmToNetworkThroughJobQueue(vm,network,requested);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    AsyncJobVO jobVo=_entityMgr.findById(AsyncJobVO.class,outcome.getJob().getId());
    if (jobVo.getResultCode() == JobInfo.Status.SUCCEEDED.ordinal()) {
      NicProfile nic=(NicProfile)JobSerializerHelper.fromObjectSerializedString(jobVo.getResult());
      return nic;
    }
 else {
      Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
      if (jobException != null) {
        if (jobException instanceof ResourceUnavailableException)         throw (ResourceUnavailableException)jobException;
 else         if (jobException instanceof ConcurrentOperationException)         throw (ConcurrentOperationException)jobException;
 else         if (jobException instanceof InsufficientCapacityException)         throw (InsufficientCapacityException)jobException;
 else         if (jobException instanceof RuntimeException)         throw (RuntimeException)jobException;
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}","@Override public NicProfile addVmToNetwork(VirtualMachine vm,Network network,NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateAddVmToNetwork(vm,network,requested);
  }
 else {
    Outcome<VirtualMachine> outcome=addVmToNetworkThroughJobQueue(vm,network,requested);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobException;
 else       if (jobException instanceof RuntimeException)       throw (RuntimeException)jobException;
 else       if (jobException instanceof Long)       return requested;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.8566221142162819
106059,"private Pair<JobInfo.Status,String> orchestrateRemoveNicFromVm(VmWorkRemoveNicFromVm work) throws Exception {
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info(""String_Node_Str"" + work.getVmId());
  }
  assert(vm != null);
  boolean result=orchestrateRemoveNicFromVm(vm,work.getNic());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,_jobMgr.marshallResultObject(new Boolean(result)));
}","private Pair<JobInfo.Status,String> orchestrateRemoveNicFromVm(VmWorkRemoveNicFromVm work) throws Exception {
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info(""String_Node_Str"" + work.getVmId());
  }
  assert(vm != null);
  NicVO nic=_entityMgr.findById(NicVO.class,work.getNicId());
  boolean result=orchestrateRemoveNicFromVm(vm,nic);
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,_jobMgr.marshallResultObject(new Boolean(result)));
}",0.920892494929006
106060,"@Override public boolean removeNicFromVm(VirtualMachine vm,Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateRemoveNicFromVm(vm,nic);
  }
 else {
    Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    AsyncJobVO jobVo=_entityMgr.findById(AsyncJobVO.class,outcome.getJob().getId());
    if (jobVo.getResultCode() == JobInfo.Status.SUCCEEDED.ordinal()) {
      Boolean result=(Boolean)JobSerializerHelper.fromObjectSerializedString(jobVo.getResult());
      return result;
    }
 else {
      Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
      if (jobResult != null) {
        if (jobResult instanceof ResourceUnavailableException)         throw (ResourceUnavailableException)jobResult;
 else         if (jobResult instanceof ConcurrentOperationException)         throw (ConcurrentOperationException)jobResult;
 else         if (jobResult instanceof RuntimeException)         throw (RuntimeException)jobResult;
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}","@Override public boolean removeNicFromVm(VirtualMachine vm,Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    return orchestrateRemoveNicFromVm(vm,nic);
  }
 else {
    Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Boolean)       return (Boolean)jobResult;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.832800851970181
106061,"private Pair<JobInfo.Status,String> orchestrateAddVmToNetwork(VmWorkAddVmToNetwork work) throws Exception {
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info(""String_Node_Str"" + work.getVmId());
  }
  assert(vm != null);
  NicProfile nic=orchestrateAddVmToNetwork(vm,work.getNetwork(),work.getRequestedNicProfile());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,_jobMgr.marshallResultObject(nic));
}","private Pair<JobInfo.Status,String> orchestrateAddVmToNetwork(VmWorkAddVmToNetwork work) throws Exception {
  VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info(""String_Node_Str"" + work.getVmId());
  }
  assert(vm != null);
  Network network=_networkDao.findById(work.getNetworkId());
  NicProfile nic=orchestrateAddVmToNetwork(vm,network,work.getRequestedNicProfile());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,_jobMgr.marshallResultObject(new Long(nic.getId())));
}",0.8964181994191674
106062,"public Outcome<VirtualMachine> removeNicFromVmThroughJobQueue(final VirtualMachine vm,final Nic nic){
  final CallContext context=CallContext.current();
  final User user=context.getCallingUser();
  final Account account=context.getCallingAccount();
  Object[] result=Transaction.execute(new TransactionCallback<Object[]>(){
    @Override public Object[] doInTransaction(    TransactionStatus status){
      List<VmWorkJobVO> pendingWorkJobs=_workJobDao.listPendingWorkJobs(VirtualMachine.Type.Instance,vm.getId(),VmWorkRemoveNicFromVm.class.getName());
      VmWorkJobVO workJob=null;
      if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {
        assert(pendingWorkJobs.size() == 1);
        workJob=pendingWorkJobs.get(0);
      }
 else {
        workJob=new VmWorkJobVO(context.getContextId());
        workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
        workJob.setCmd(VmWorkRemoveNicFromVm.class.getName());
        workJob.setAccountId(account.getId());
        workJob.setUserId(user.getId());
        workJob.setVmType(vm.getType());
        workJob.setVmInstanceId(vm.getId());
        workJob.setRelated(AsyncJobExecutionContext.getOriginJobContextId());
        VmWorkRemoveNicFromVm workInfo=new VmWorkRemoveNicFromVm(user.getId(),account.getId(),vm.getId(),VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER,nic);
        workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
        _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
      }
      return new Object[]{workJob,new Long(workJob.getId())};
    }
  }
);
  final long jobId=(Long)result[1];
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmJobVirtualMachineOutcome((VmWorkJobVO)result[0],vm.getId());
}","public Outcome<VirtualMachine> removeNicFromVmThroughJobQueue(final VirtualMachine vm,final Nic nic){
  final CallContext context=CallContext.current();
  final User user=context.getCallingUser();
  final Account account=context.getCallingAccount();
  Object[] result=Transaction.execute(new TransactionCallback<Object[]>(){
    @Override public Object[] doInTransaction(    TransactionStatus status){
      List<VmWorkJobVO> pendingWorkJobs=_workJobDao.listPendingWorkJobs(VirtualMachine.Type.Instance,vm.getId(),VmWorkRemoveNicFromVm.class.getName());
      VmWorkJobVO workJob=null;
      if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {
        assert(pendingWorkJobs.size() == 1);
        workJob=pendingWorkJobs.get(0);
      }
 else {
        workJob=new VmWorkJobVO(context.getContextId());
        workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);
        workJob.setCmd(VmWorkRemoveNicFromVm.class.getName());
        workJob.setAccountId(account.getId());
        workJob.setUserId(user.getId());
        workJob.setVmType(vm.getType());
        workJob.setVmInstanceId(vm.getId());
        workJob.setRelated(AsyncJobExecutionContext.getOriginJobContextId());
        VmWorkRemoveNicFromVm workInfo=new VmWorkRemoveNicFromVm(user.getId(),account.getId(),vm.getId(),VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER,nic.getId());
        workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));
        _jobMgr.submitAsyncJob(workJob,VmWorkConstants.VM_WORK_QUEUE,vm.getId());
      }
      return new Object[]{workJob,new Long(workJob.getId())};
    }
  }
);
  final long jobId=(Long)result[1];
  AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(jobId);
  return new VmJobVirtualMachineOutcome((VmWorkJobVO)result[0],vm.getId());
}",0.9977452085682076
106063,"public VmWorkAddVmToNetwork(long userId,long accountId,long vmId,String handlerName,Network network,NicProfile requested){
  super(userId,accountId,vmId,handlerName);
  this.network=network;
  requstedNicProfile=requested;
}","public VmWorkAddVmToNetwork(long userId,long accountId,long vmId,String handlerName,Long networkId,NicProfile requested){
  super(userId,accountId,vmId,handlerName);
  this.networkId=networkId;
  requstedNicProfile=requested;
}",0.926829268292683
106064,"public VmWorkRemoveNicFromVm(long userId,long accountId,long vmId,String handlerName,Nic nic){
  super(userId,accountId,vmId,handlerName);
  this.nic=nic;
}","public VmWorkRemoveNicFromVm(long userId,long accountId,long vmId,String handlerName,Long nicId){
  super(userId,accountId,vmId,handlerName);
  this.nicId=nicId;
}",0.9592476489028212
106065,"@Override public void saveUsageRecords(List<UsageVO> usageRecords){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    txn.start();
    String sql=INSERT_USGAE_RECORDS;
    PreparedStatement pstmt=null;
    pstmt=txn.prepareAutoCloseStatement(sql);
    for (    UsageVO usageRecord : usageRecords) {
      pstmt.setLong(1,usageRecord.getZoneId());
      pstmt.setLong(2,usageRecord.getAccountId());
      pstmt.setLong(3,usageRecord.getDomainId());
      pstmt.setString(4,usageRecord.getDescription());
      pstmt.setString(5,usageRecord.getUsageDisplay());
      pstmt.setInt(6,usageRecord.getUsageType());
      pstmt.setDouble(7,usageRecord.getRawUsage());
      if (usageRecord.getVmInstanceId() != null) {
        pstmt.setLong(8,usageRecord.getVmInstanceId());
      }
 else {
        pstmt.setNull(8,Types.BIGINT);
      }
      pstmt.setString(9,usageRecord.getVmName());
      if (usageRecord.getOfferingId() != null) {
        pstmt.setLong(10,usageRecord.getOfferingId());
      }
 else {
        pstmt.setNull(10,Types.BIGINT);
      }
      if (usageRecord.getTemplateId() != null) {
        pstmt.setLong(11,usageRecord.getTemplateId());
      }
 else {
        pstmt.setNull(11,Types.BIGINT);
      }
      if (usageRecord.getUsageId() != null) {
        pstmt.setLong(12,usageRecord.getUsageId());
      }
 else {
        pstmt.setNull(12,Types.BIGINT);
      }
      pstmt.setString(13,usageRecord.getType());
      if (usageRecord.getSize() != null) {
        pstmt.setLong(14,usageRecord.getSize());
      }
 else {
        pstmt.setNull(14,Types.BIGINT);
      }
      if (usageRecord.getNetworkId() != null) {
        pstmt.setLong(15,usageRecord.getNetworkId());
      }
 else {
        pstmt.setNull(15,Types.BIGINT);
      }
      pstmt.setTimestamp(16,new Timestamp(usageRecord.getStartDate().getTime()));
      pstmt.setTimestamp(17,new Timestamp(usageRecord.getEndDate().getTime()));
      if (usageRecord.getVirtualSize() != null) {
        pstmt.setLong(18,usageRecord.getSize());
      }
 else {
        pstmt.setNull(18,Types.BIGINT);
      }
      pstmt.addBatch();
    }
    pstmt.executeBatch();
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error(""String_Node_Str"",ex);
    throw new CloudRuntimeException(ex.getMessage());
  }
}","@Override public void saveUsageRecords(List<UsageVO> usageRecords){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    txn.start();
    String sql=INSERT_USGAE_RECORDS;
    PreparedStatement pstmt=null;
    pstmt=txn.prepareAutoCloseStatement(sql);
    for (    UsageVO usageRecord : usageRecords) {
      pstmt.setLong(1,usageRecord.getZoneId());
      pstmt.setLong(2,usageRecord.getAccountId());
      pstmt.setLong(3,usageRecord.getDomainId());
      pstmt.setString(4,usageRecord.getDescription());
      pstmt.setString(5,usageRecord.getUsageDisplay());
      pstmt.setInt(6,usageRecord.getUsageType());
      pstmt.setDouble(7,usageRecord.getRawUsage());
      if (usageRecord.getVmInstanceId() != null) {
        pstmt.setLong(8,usageRecord.getVmInstanceId());
      }
 else {
        pstmt.setNull(8,Types.BIGINT);
      }
      pstmt.setString(9,usageRecord.getVmName());
      if (usageRecord.getOfferingId() != null) {
        pstmt.setLong(10,usageRecord.getOfferingId());
      }
 else {
        pstmt.setNull(10,Types.BIGINT);
      }
      if (usageRecord.getTemplateId() != null) {
        pstmt.setLong(11,usageRecord.getTemplateId());
      }
 else {
        pstmt.setNull(11,Types.BIGINT);
      }
      if (usageRecord.getUsageId() != null) {
        pstmt.setLong(12,usageRecord.getUsageId());
      }
 else {
        pstmt.setNull(12,Types.BIGINT);
      }
      pstmt.setString(13,usageRecord.getType());
      if (usageRecord.getSize() != null) {
        pstmt.setLong(14,usageRecord.getSize());
      }
 else {
        pstmt.setNull(14,Types.BIGINT);
      }
      if (usageRecord.getNetworkId() != null) {
        pstmt.setLong(15,usageRecord.getNetworkId());
      }
 else {
        pstmt.setNull(15,Types.BIGINT);
      }
      pstmt.setString(16,DateUtil.getDateDisplayString(s_gmtTimeZone,usageRecord.getStartDate()));
      pstmt.setString(17,DateUtil.getDateDisplayString(s_gmtTimeZone,usageRecord.getEndDate()));
      if (usageRecord.getVirtualSize() != null) {
        pstmt.setLong(18,usageRecord.getSize());
      }
 else {
        pstmt.setNull(18,Types.BIGINT);
      }
      pstmt.addBatch();
    }
    pstmt.executeBatch();
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error(""String_Node_Str"",ex);
    throw new CloudRuntimeException(ex.getMessage());
  }
}",0.9597430406852248
106066,"@SuppressWarnings(""String_Node_Str"") @Override public Pair<JobInfo.Status,String> handleVmWorkJob(VmWork work) throws Exception {
  Method method=getHandlerMethod(work.getClass());
  if (method != null) {
    try {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      Object obj=method.invoke(_target,work);
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      assert(obj instanceof Pair);
      return (Pair<JobInfo.Status,String>)obj;
    }
 catch (    InvocationTargetException e) {
      s_logger.error(""String_Node_Str"" + e.getCause());
      if (e.getCause() != null && e.getCause() instanceof Exception) {
        s_logger.info(""String_Node_Str"" + e.getCause());
        throw (Exception)e.getCause();
      }
      throw e;
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    RuntimeException ex=new RuntimeException(""String_Node_Str"" + work.getClass().getName());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,JobSerializerHelper.toObjectSerializedString(ex));
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public Pair<JobInfo.Status,String> handleVmWorkJob(VmWork work) throws Exception {
  Method method=getHandlerMethod(work.getClass());
  if (method != null) {
    try {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      Object obj=method.invoke(_target,work);
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      assert(obj instanceof Pair);
      return (Pair<JobInfo.Status,String>)obj;
    }
 catch (    InvocationTargetException e) {
      s_logger.error(""String_Node_Str"" + e.getCause());
      if (e.getCause() != null && e.getCause() instanceof Exception)       throw (Exception)e.getCause();
      throw e;
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    RuntimeException ex=new RuntimeException(""String_Node_Str"" + work.getClass().getName());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,JobSerializerHelper.toObjectSerializedString(ex));
  }
}",0.9711417816813048
106067,"private Pair<JobInfo.Status,String> orchestrateDetachVolumeFromVM(VmWorkAttachVolume work) throws Exception {
  orchestrateDetachVolumeFromVM(work.getVmId(),work.getVolumeId());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
}","private Pair<JobInfo.Status,String> orchestrateDetachVolumeFromVM(VmWorkDetachVolume work) throws Exception {
  orchestrateDetachVolumeFromVM(work.getVmId(),work.getVolumeId());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
}",0.992063492063492
106068,"@SuppressWarnings(""String_Node_Str"") @Override public Pair<JobInfo.Status,String> handleVmWorkJob(VmWork work) throws Exception {
  Method method=getHandlerMethod(work.getClass());
  if (method != null) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    Object obj=method.invoke(_target,work);
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    assert(obj instanceof Pair);
    return (Pair<JobInfo.Status,String>)obj;
  }
 else {
    s_logger.error(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    RuntimeException e=new RuntimeException(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    String exceptionJson=JobSerializerHelper.toSerializedString(e);
    s_logger.error(""String_Node_Str"" + exceptionJson);
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,exceptionJson);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public Pair<JobInfo.Status,String> handleVmWorkJob(VmWork work) throws Exception {
  Method method=getHandlerMethod(work.getClass());
  if (method != null) {
    try {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      Object obj=method.invoke(_target,work);
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
      assert(obj instanceof Pair);
      return (Pair<JobInfo.Status,String>)obj;
    }
 catch (    InvocationTargetException e) {
      s_logger.error(""String_Node_Str"" + e.getCause());
      if (e.getCause() != null && e.getCause() instanceof Exception) {
        s_logger.info(""String_Node_Str"" + e.getCause());
        throw (Exception)e.getCause();
      }
      throw e;
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + work.getClass().getName() + _gsonLogger.toJson(work));
    RuntimeException ex=new RuntimeException(""String_Node_Str"" + work.getClass().getName());
    return new Pair<JobInfo.Status,String>(JobInfo.Status.FAILED,JobSerializerHelper.toObjectSerializedString(ex));
  }
}",0.7114273010226767
106069,"private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Account> permittedAccounts,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags){
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
    if (hypers == null || hypers.isEmpty()) {
      return new Pair<List<TemplateJoinVO>,Integer>(new ArrayList<TemplateJoinVO>(),0);
    }
  }
  VMTemplateVO template=null;
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchBuilder<TemplateJoinVO> sb=_templateJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getTempZonePair());
  SearchCriteria<TemplateJoinVO> sc=sb.create();
  if (templateId != null) {
    template=_templateDao.findById(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && !_accountMgr.isRootAdmin(caller.getId())) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else {
    DomainVO domain=null;
    if (!permittedAccounts.isEmpty()) {
      domain=_domainDao.findById(permittedAccounts.get(0).getDomainId());
    }
 else {
      domain=_domainDao.findById(DomainVO.ROOT_DOMAIN);
    }
    if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Account.ACCOUNT_TYPE_PROJECT);
    }
 else     if (listProjectResourcesCriteria == ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
    }
    if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (_accountMgr.isDomainAdmin(caller.getId()) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,domain.getPath() + ""String_Node_Str"");
    }
    List<Long> relatedDomainIds=new ArrayList<Long>();
    List<Long> permittedAccountIds=new ArrayList<Long>();
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        permittedAccountIds.add(account.getId());
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        relatedDomainIds.add(domainTreeNode.getId());
        while (domainTreeNode.getParent() != null) {
          domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          relatedDomainIds.add(domainTreeNode.getId());
        }
        if (_accountMgr.isAdmin(account.getType()) || (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community)) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.add(childDomain.getId());
          }
        }
      }
    }
    if (!isIso) {
      if (hypers != null && !hypers.isEmpty()) {
        String[] relatedHypers=new String[hypers.size()];
        for (int i=0; i < hypers.size(); i++) {
          relatedHypers[i]=hypers.get(i).toString();
        }
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
      }
    }
    if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (templateFilter == TemplateFilter.featured) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      }
      if (!permittedAccounts.isEmpty()) {
        SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,relatedDomainIds.toArray());
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      if (!permittedAccounts.isEmpty()) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
 else     if (templateFilter == TemplateFilter.executable) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (!permittedAccounts.isEmpty()) {
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (tags != null && !tags.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      int count=0;
      for (      String key : tags.keySet()) {
        SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
        if (isIso) {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.ISO);
        }
 else {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.Template);
        }
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
        count++;
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (keyword != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    }
 else     if (name != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
    }
    if (isIso) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
    }
    if (!hyperType.equals(HypervisorType.None)) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
    }
    if (bootable != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
    }
    if (onlyReady) {
      SearchCriteria<TemplateJoinVO> readySc=_templateJoinDao.createSearchCriteria();
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateState.Ready);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.BAREMETAL);
      SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,readySc);
    }
    if (!showDomr) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
    }
  }
  if (zoneId != null) {
    SearchCriteria<TemplateJoinVO> zoneSc=_templateJoinDao.createSearchCriteria();
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
    SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,zoneSc);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  String[] tzIds=new String[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    tzIds[i++]=v.getTempZonePair();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByTemplateZonePair(tzIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}","private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,boolean isRecursive,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags){
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
    if (hypers == null || hypers.isEmpty()) {
      return new Pair<List<TemplateJoinVO>,Integer>(new ArrayList<TemplateJoinVO>(),0);
    }
  }
  VMTemplateVO template=null;
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchBuilder<TemplateJoinVO> sb=_templateJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getTempZonePair());
  SearchCriteria<TemplateJoinVO> sc=sb.create();
  if (templateId != null) {
    template=_templateDao.findById(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && !_accountMgr.isRootAdmin(caller.getId())) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else {
    if (!isIso) {
      if (hypers != null && !hypers.isEmpty()) {
        String[] relatedHypers=new String[hypers.size()];
        for (int i=0; i < hypers.size(); i++) {
          relatedHypers[i]=hypers.get(i).toString();
        }
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
      }
    }
    DomainVO callerDomain=_domainDao.findById(caller.getDomainId());
    if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (templateFilter == TemplateFilter.featured) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      }
      List<Long> domainTree=new ArrayList<Long>();
      DomainVO domainTreeNode=callerDomain;
      domainTree.add(domainTreeNode.getId());
      while (domainTreeNode.getParent() != null) {
        domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
        domainTree.add(domainTreeNode.getId());
      }
      List<DomainVO> allChildDomains=_domainDao.findAllChildren(callerDomain.getPath(),callerDomain.getId());
      for (      DomainVO childDomain : allChildDomains) {
        domainTree.add(childDomain.getId());
      }
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,domainTree.toArray());
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      permittedDomains.remove(caller.getDomainId());
      permittedAccounts.remove(caller.getAccountId());
      SearchCriteria<TemplateJoinVO> aclSc=_templateJoinDao.createSearchCriteria();
      _accountMgr.buildACLViewSearchCriteria(sc,aclSc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
    }
 else     if (templateFilter == TemplateFilter.executable) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (tags != null && !tags.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      int count=0;
      for (      String key : tags.keySet()) {
        SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
        if (isIso) {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.ISO);
        }
 else {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.Template);
        }
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
        count++;
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (keyword != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    }
 else     if (name != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
    }
    if (isIso) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
    }
    if (!hyperType.equals(HypervisorType.None)) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
    }
    if (bootable != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
    }
    if (onlyReady) {
      SearchCriteria<TemplateJoinVO> readySc=_templateJoinDao.createSearchCriteria();
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateState.Ready);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.BAREMETAL);
      SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,readySc);
    }
    if (!showDomr) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
    }
  }
  if (zoneId != null) {
    SearchCriteria<TemplateJoinVO> zoneSc=_templateJoinDao.createSearchCriteria();
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
    SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,zoneSc);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  String[] tzIds=new String[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    tzIds[i++]=v.getTempZonePair();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByTemplateZonePair(tzIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}",0.6806028196402528
106070,"private Pair<List<TemplateJoinVO>,Integer> searchForIsosInternal(ListIsosCmd cmd){
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Long id=cmd.getId();
  Map<String,String> tags=cmd.getTags();
  Account caller=CallContext.current().getCallingAccount();
  boolean listAll=false;
  if (isoFilter != null && isoFilter == TemplateFilter.all) {
    if (_accountMgr.isNormalUser(caller.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + TemplateFilter.all + ""String_Node_Str"");
    }
    listAll=true;
  }
  List<Long> permittedAccountIds=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccountIds,domainIdRecursiveListProject,listAll,false);
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  List<Account> permittedAccounts=new ArrayList<Account>();
  for (  Long accountId : permittedAccountIds) {
    permittedAccounts.add(_accountMgr.getAccount(accountId));
  }
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return searchForTemplatesInternal(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedAccounts,caller,listProjectResourcesCriteria,tags);
}","private Pair<List<TemplateJoinVO>,Integer> searchForIsosInternal(ListIsosCmd cmd){
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Long id=cmd.getId();
  Map<String,String> tags=cmd.getTags();
  Account caller=CallContext.current().getCallingAccount();
  boolean listAll=false;
  if (isoFilter != null && isoFilter == TemplateFilter.all) {
    if (_accountMgr.isNormalUser(caller.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + TemplateFilter.all + ""String_Node_Str"");
    }
    listAll=true;
  }
  List<Long> permittedDomains=new ArrayList<Long>();
  List<Long> permittedAccounts=new ArrayList<Long>();
  List<Long> permittedResources=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedDomains,permittedAccounts,permittedResources,domainIdRecursiveListProject,cmd.listAll(),false,""String_Node_Str"");
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return searchForTemplatesInternal(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedDomains,permittedAccounts,permittedResources,isRecursive,caller,listProjectResourcesCriteria,tags);
}",0.8498145859085291
106071,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (id != null) {
    permittedResources.add(id);
    return;
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    List<Long> grantedDomains=_aclService.getGrantedDomains(caller.getId(),action);
    List<Long> grantedAccounts=_aclService.getGrantedAccounts(caller.getId(),action);
    List<Long> grantedResources=_aclService.getGrantedResources(caller.getId(),action);
    if (domainId != null) {
      if (grantedDomains.contains(domainId)) {
        permittedDomains.add(domainId);
      }
 else {
        for (        Long acctId : grantedAccounts) {
          Account acct=_accountDao.findById(acctId);
          if (acct != null && acct.getDomainId() == domainId) {
            permittedAccounts.add(acctId);
          }
        }
        permittedResources.addAll(grantedResources);
      }
    }
 else     if (permittedAccounts.isEmpty()) {
      permittedDomains.addAll(grantedDomains);
      permittedAccounts.addAll(grantedAccounts);
      permittedResources.addAll(grantedResources);
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (id != null) {
    permittedResources.add(id);
    return;
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    boolean grantedAll=_aclService.isGrantedAll(caller.getId(),action);
    if (grantedAll) {
      if (domainId != null) {
        permittedDomains.add(domainId);
      }
    }
 else {
      List<Long> grantedDomains=_aclService.getGrantedDomains(caller.getId(),action);
      List<Long> grantedAccounts=_aclService.getGrantedAccounts(caller.getId(),action);
      List<Long> grantedResources=_aclService.getGrantedResources(caller.getId(),action);
      if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else       if (permittedAccounts.isEmpty()) {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
      }
    }
  }
}",0.9654667837284168
106072,"@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,SearchCriteria<? extends ControlledEntity> aclSc,boolean isRecursive,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,ListProjectResourcesCriteria listProjectResourcesCriteria){
  if (listProjectResourcesCriteria != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedDomains.isEmpty()) {
    if (isRecursive) {
      for (int i=0; i < permittedDomains.size(); i++) {
        Domain domain=_domainDao.findById(permittedDomains.get(i));
        aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,domain.getPath() + ""String_Node_Str"");
      }
    }
 else {
      aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedDomains.toArray());
    }
  }
  if (!permittedAccounts.isEmpty()) {
    aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  if (!permittedResources.isEmpty()) {
    aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedResources.toArray());
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,aclSc);
}","@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,SearchCriteria<? extends ControlledEntity> aclSc,boolean isRecursive,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,ListProjectResourcesCriteria listProjectResourcesCriteria){
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Account.ACCOUNT_TYPE_PROJECT);
    }
 else     if (listProjectResourcesCriteria == ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
    }
  }
  if (permittedDomains.isEmpty() && permittedAccounts.isEmpty() && permittedResources.isEmpty())   return;
  if (!permittedDomains.isEmpty()) {
    if (isRecursive) {
      for (int i=0; i < permittedDomains.size(); i++) {
        Domain domain=_domainDao.findById(permittedDomains.get(i));
        aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,domain.getPath() + ""String_Node_Str"");
      }
    }
 else {
      aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedDomains.toArray());
    }
  }
  if (!permittedAccounts.isEmpty()) {
    aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  if (!permittedResources.isEmpty()) {
    aclSc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedResources.toArray());
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,aclSc);
}",0.852014652014652
106073,"@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile profile,DeployDestination dest,ReservationContext context){
  UserVmVO userVm=_vmDao.findById(profile.getId());
  List<NicVO> nics=_nicDao.listByVmId(userVm.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest || network.getTrafficType() == TrafficType.Public) {
      userVm.setPrivateIpAddress(nic.getIp4Address());
      userVm.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(userVm.getId());
  VmDiskStatisticsVO diskstats=null;
  for (  VolumeVO volume : volumes) {
    diskstats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
  }
  return true;
}","@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile profile,DeployDestination dest,ReservationContext context){
  UserVmVO userVm=_vmDao.findById(profile.getId());
  List<NicVO> nics=_nicDao.listByVmId(userVm.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest || network.getTrafficType() == TrafficType.Public) {
      userVm.setPrivateIpAddress(nic.getIp4Address());
      userVm.setPrivateMacAddress(nic.getMacAddress());
      _vmDao.update(userVm.getId(),userVm);
    }
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(userVm.getId());
  VmDiskStatisticsVO diskstats=null;
  for (  VolumeVO volume : volumes) {
    diskstats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
  }
  return true;
}",0.9792843691148776
106074,"@Override public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd){
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultCacheDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  ScopeType scopeType=null;
  String scope=cmd.getScope();
  if (scope != null) {
    try {
      scopeType=Enum.valueOf(ScopeType.class,scope.toUpperCase());
    }
 catch (    Exception e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + scope);
    }
    if (scopeType != ScopeType.ZONE) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (scopeType == ScopeType.ZONE && dcId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
    ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
    throw ex;
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getDetails());
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.ImageCache);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.ImageCache);
}","@Override public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd){
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultCacheDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  ScopeType scopeType=null;
  String scope=cmd.getScope();
  if (scope != null) {
    try {
      scopeType=Enum.valueOf(ScopeType.class,scope.toUpperCase());
    }
 catch (    Exception e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + scope);
    }
    if (scopeType != ScopeType.ZONE) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (scopeType == ScopeType.ZONE && dcId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
    ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
    throw ex;
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getDetails());
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.ImageCache);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.ImageCache);
}",0.992471213463242
106075,"@Override public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  String providerName=cmd.getStorageProviderName();
  DataStoreProvider storeProvider=dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Long zoneId=cmd.getZoneId();
  ScopeType scopeType=ScopeType.CLUSTER;
  String scope=cmd.getScope();
  if (scope != null) {
    try {
      scopeType=Enum.valueOf(ScopeType.class,scope.toUpperCase());
    }
 catch (    Exception e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + scope);
    }
  }
  if (scopeType == ScopeType.CLUSTER && clusterId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (scopeType == ScopeType.ZONE && zoneId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  HypervisorType hypervisorType=HypervisorType.KVM;
  if (scopeType == ScopeType.ZONE) {
    clusterId=null;
    podId=null;
    String hypervisor=cmd.getHypervisor();
    if (hypervisor != null) {
      try {
        hypervisorType=HypervisorType.getType(hypervisor);
      }
 catch (      Exception e) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
      }
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Any) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
    }
  }
  Map<String,String> details=extractApiParamAsMap(cmd.getDetails());
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",zone.getId());
  params.put(""String_Node_Str"",clusterId);
  params.put(""String_Node_Str"",podId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getTags());
  params.put(""String_Node_Str"",cmd.getStoragePoolName());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",cmd.isManaged());
  params.put(""String_Node_Str"",cmd.getCapacityBytes());
  params.put(""String_Node_Str"",cmd.getCapacityIops());
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
    if (scopeType == ScopeType.CLUSTER) {
      ClusterScope clusterScope=new ClusterScope(clusterId,podId,zoneId);
      lifeCycle.attachCluster(store,clusterScope);
    }
 else     if (scopeType == ScopeType.ZONE) {
      ZoneScope zoneScope=new ZoneScope(zoneId);
      lifeCycle.attachZone(store,zoneScope,hypervisorType);
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    if (store != null) {
      lifeCycle.deleteDataStore(store);
    }
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return (PrimaryDataStoreInfo)dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Primary);
}","@Override public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  String providerName=cmd.getStorageProviderName();
  DataStoreProvider storeProvider=dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Long zoneId=cmd.getZoneId();
  ScopeType scopeType=ScopeType.CLUSTER;
  String scope=cmd.getScope();
  if (scope != null) {
    try {
      scopeType=Enum.valueOf(ScopeType.class,scope.toUpperCase());
    }
 catch (    Exception e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + scope);
    }
  }
  if (scopeType == ScopeType.CLUSTER && clusterId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (scopeType == ScopeType.ZONE && zoneId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  HypervisorType hypervisorType=HypervisorType.KVM;
  if (scopeType == ScopeType.ZONE) {
    clusterId=null;
    podId=null;
    String hypervisor=cmd.getHypervisor();
    if (hypervisor != null) {
      try {
        hypervisorType=HypervisorType.getType(hypervisor);
      }
 catch (      Exception e) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
      }
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Any) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
    }
  }
  Map<String,String> details=extractApiParamAsMap(cmd.getDetails());
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=CallContext.current().getCallingAccount();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",zone.getId());
  params.put(""String_Node_Str"",clusterId);
  params.put(""String_Node_Str"",podId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getTags());
  params.put(""String_Node_Str"",cmd.getStoragePoolName());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",cmd.isManaged());
  params.put(""String_Node_Str"",cmd.getCapacityBytes());
  params.put(""String_Node_Str"",cmd.getCapacityIops());
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
    if (scopeType == ScopeType.CLUSTER) {
      ClusterScope clusterScope=new ClusterScope(clusterId,podId,zoneId);
      lifeCycle.attachCluster(store,clusterScope);
    }
 else     if (scopeType == ScopeType.ZONE) {
      ZoneScope zoneScope=new ZoneScope(zoneId);
      lifeCycle.attachZone(store,zoneScope,hypervisorType);
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage(),e);
    if (store != null) {
      lifeCycle.deleteDataStore(store);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
  return (PrimaryDataStoreInfo)dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Primary);
}",0.9954954954954957
106076,"@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
    providerName=storeProvider.getName();
  }
  Long dcId=cmd.getZoneId();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listImageStores();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=CallContext.current().getCallingAccount();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getName());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  if (((ImageStoreProvider)storeProvider).needDownloadSysTemplate()) {
    _imageSrv.downloadBootstrapSysTemplate(store);
  }
 else {
    _imageSrv.addSystemVMTemplatesToSecondary(store);
  }
  associateCrosszoneTemplatesToZone(dcId);
  if (scopeType == ScopeType.REGION) {
    duplicateCacheStoreRecordsToRegionStore(store.getId());
  }
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}","@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
    providerName=storeProvider.getName();
  }
  Long dcId=cmd.getZoneId();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listImageStores();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=CallContext.current().getCallingAccount();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getName());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
  if (((ImageStoreProvider)storeProvider).needDownloadSysTemplate()) {
    _imageSrv.downloadBootstrapSysTemplate(store);
  }
 else {
    _imageSrv.addSystemVMTemplatesToSecondary(store);
  }
  associateCrosszoneTemplatesToZone(dcId);
  if (scopeType == ScopeType.REGION) {
    duplicateCacheStoreRecordsToRegionStore(store.getId());
  }
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}",0.9939950547509714
106077,"/** 
 * @param router
 * @param add
 * @param privateNic
 * @return
 * @throws ResourceUnavailableException
 */
protected boolean setupVpcPrivateNetwork(VirtualRouter router,boolean add,NicProfile privateNic) throws ResourceUnavailableException {
  if (router.getState() == State.Running) {
    PrivateIpVO ipVO=_privateIpDao.findByIpAndSourceNetworkId(privateNic.getNetworkId(),privateNic.getIp4Address());
    Network network=_networkDao.findById(privateNic.getNetworkId());
    String vlanTag=BroadcastDomainType.getValue(network.getBroadcastUri());
    String netmask=NetUtils.getCidrNetmask(network.getCidr());
    PrivateIpAddress ip=new PrivateIpAddress(ipVO,vlanTag,network.getGateway(),netmask,privateNic.getMacAddress());
    List<PrivateIpAddress> privateIps=new ArrayList<PrivateIpAddress>(1);
    privateIps.add(ip);
    Commands cmds=new Commands(Command.OnError.Stop);
    createVpcAssociatePrivateIPCommands(router,privateIps,cmds,add);
    if (sendCommandsToRouter(router,cmds)) {
      s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ network);
      return true;
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip + ""String_Node_Str""+ network);
      return false;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
  }
 else {
    s_logger.warn(""String_Node_Str"" + router + ""String_Node_Str""+ router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"" + ""String_Node_Str"" + router + ""String_Node_Str"",DataCenter.class,router.getDataCenterId());
  }
  return true;
}","/** 
 * @param router
 * @param add
 * @param privateNic
 * @return
 * @throws ResourceUnavailableException
 */
protected boolean setupVpcPrivateNetwork(VirtualRouter router,boolean add,NicProfile privateNic) throws ResourceUnavailableException {
  if (router.getState() == State.Running) {
    PrivateIpVO ipVO=_privateIpDao.findByIpAndSourceNetworkId(privateNic.getNetworkId(),privateNic.getIp4Address());
    Network network=_networkDao.findById(privateNic.getNetworkId());
    String vlanTag=BroadcastDomainType.getValue(network.getBroadcastUri());
    String netmask=NetUtils.getCidrNetmask(network.getCidr());
    PrivateIpAddress ip=new PrivateIpAddress(ipVO,network.getBroadcastUri().toString(),network.getGateway(),netmask,privateNic.getMacAddress());
    List<PrivateIpAddress> privateIps=new ArrayList<PrivateIpAddress>(1);
    privateIps.add(ip);
    Commands cmds=new Commands(Command.OnError.Stop);
    createVpcAssociatePrivateIPCommands(router,privateIps,cmds,add);
    if (sendCommandsToRouter(router,cmds)) {
      s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ network);
      return true;
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip + ""String_Node_Str""+ network);
      return false;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
  }
 else {
    s_logger.warn(""String_Node_Str"" + router + ""String_Node_Str""+ router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"" + ""String_Node_Str"" + router + ""String_Node_Str"",DataCenter.class,router.getDataCenterId());
  }
  return true;
}",0.987423223164668
106078,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile profile){
  DomainRouterVO router=_routerDao.findById(profile.getId());
  boolean isVpc=(router.getVpcId() != null);
  if (!isVpc) {
    return super.finalizeCommandsOnStart(cmds,profile);
  }
  NicProfile controlNic=getControlNic(profile);
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  finalizeSshAndVersionAndNetworkUsageOnStart(cmds,profile,router,controlNic);
  List<Pair<Nic,Network>> guestNics=new ArrayList<Pair<Nic,Network>>();
  List<Pair<Nic,Network>> publicNics=new ArrayList<Pair<Nic,Network>>();
  Map<String,String> vlanMacAddress=new HashMap<String,String>();
  List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  Nic routerNic : routerNics) {
    Network network=_networkModel.getNetwork(routerNic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      Pair<Nic,Network> guestNic=new Pair<Nic,Network>(routerNic,network);
      guestNics.add(guestNic);
    }
 else     if (network.getTrafficType() == TrafficType.Public) {
      Pair<Nic,Network> publicNic=new Pair<Nic,Network>(routerNic,network);
      publicNics.add(publicNic);
      String vlanTag=BroadcastDomainType.getValue(routerNic.getBroadcastUri());
      vlanMacAddress.put(vlanTag,routerNic.getMacAddress());
    }
  }
  List<Command> usageCmds=new ArrayList<Command>();
  try {
    List<PublicIp> sourceNat=new ArrayList<PublicIp>(1);
    for (    Pair<Nic,Network> nicNtwk : publicNics) {
      Nic publicNic=nicNtwk.first();
      Network publicNtwk=nicNtwk.second();
      IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(publicNtwk.getId(),publicNic.getIp4Address());
      if (userIp.isSourceNat()) {
        PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
        sourceNat.add(publicIp);
        if (router.getPublicIpAddress() == null) {
          DomainRouterVO routerVO=_routerDao.findById(router.getId());
          routerVO.setPublicIpAddress(publicNic.getIp4Address());
          routerVO.setPublicNetmask(publicNic.getNetmask());
          routerVO.setPublicMacAddress(publicNic.getMacAddress());
          _routerDao.update(routerVO.getId(),routerVO);
        }
      }
      PlugNicCommand plugNicCmd=new PlugNicCommand(getNicTO(router,publicNic.getNetworkId(),publicNic.getBroadcastUri().toString()),router.getInstanceName(),router.getType());
      cmds.addCommand(plugNicCmd);
      VpcVO vpc=_vpcDao.findById(router.getVpcId());
      NetworkUsageCommand netUsageCmd=new NetworkUsageCommand(router.getPrivateIpAddress(),router.getInstanceName(),true,publicNic.getIp4Address(),vpc.getCidr());
      usageCmds.add(netUsageCmd);
      UserStatisticsVO stats=_userStatsDao.findBy(router.getAccountId(),router.getDataCenterId(),publicNtwk.getId(),publicNic.getIp4Address(),router.getId(),router.getType().toString());
      if (stats == null) {
        stats=new UserStatisticsVO(router.getAccountId(),router.getDataCenterId(),publicNic.getIp4Address(),router.getId(),router.getType().toString(),publicNtwk.getId());
        _userStatsDao.persist(stats);
      }
    }
    if (!sourceNat.isEmpty()) {
      createVpcAssociatePublicIPCommands(router,sourceNat,cmds,vlanMacAddress);
    }
    for (    Pair<Nic,Network> nicNtwk : guestNics) {
      Nic guestNic=nicNtwk.first();
      PlugNicCommand plugNicCmd=new PlugNicCommand(getNicTO(router,guestNic.getNetworkId(),null),router.getInstanceName(),router.getType());
      cmds.addCommand(plugNicCmd);
      if (!_networkModel.isPrivateGateway(guestNic)) {
        VirtualMachine vm=_vmDao.findById(router.getId());
        NicProfile nicProfile=_networkModel.getNicProfile(vm,guestNic.getNetworkId(),null);
        SetupGuestNetworkCommand setupCmd=createSetupGuestNetworkCommand(router,true,nicProfile);
        cmds.addCommand(setupCmd);
      }
 else {
        PrivateIpVO ipVO=_privateIpDao.findByIpAndSourceNetworkId(guestNic.getNetworkId(),guestNic.getIp4Address());
        Network network=_networkDao.findById(guestNic.getNetworkId());
        String vlanTag=BroadcastDomainType.getValue(network.getBroadcastUri());
        String netmask=NetUtils.getCidrNetmask(network.getCidr());
        PrivateIpAddress ip=new PrivateIpAddress(ipVO,vlanTag,network.getGateway(),netmask,guestNic.getMacAddress());
        List<PrivateIpAddress> privateIps=new ArrayList<PrivateIpAddress>(1);
        privateIps.add(ip);
        createVpcAssociatePrivateIPCommands(router,privateIps,cmds,true);
        Long privateGwAclId=_vpcGatewayDao.getNetworkAclIdForPrivateIp(ipVO.getVpcId(),ipVO.getNetworkId(),ipVO.getIpAddress());
        if (privateGwAclId != null) {
          List<NetworkACLItemVO> networkACLs=_networkACLItemDao.listByACL(privateGwAclId);
          s_logger.debug(""String_Node_Str"" + networkACLs.size() + ""String_Node_Str""+ router+ ""String_Node_Str""+ ipVO.getIpAddress());
          createNetworkACLsCommands(networkACLs,router,cmds,ipVO.getNetworkId(),true);
        }
      }
    }
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + router + ""String_Node_Str"",ex);
    return false;
  }
  List<? extends StaticRoute> routes=_staticRouteDao.listByVpcId(router.getVpcId());
  List<StaticRouteProfile> staticRouteProfiles=new ArrayList<StaticRouteProfile>(routes.size());
  Map<Long,VpcGateway> gatewayMap=new HashMap<Long,VpcGateway>();
  for (  StaticRoute route : routes) {
    VpcGateway gateway=gatewayMap.get(route.getVpcGatewayId());
    if (gateway == null) {
      gateway=_entityMgr.findById(VpcGateway.class,route.getVpcGatewayId());
      gatewayMap.put(gateway.getId(),gateway);
    }
    staticRouteProfiles.add(new StaticRouteProfile(route,gateway));
  }
  s_logger.debug(""String_Node_Str"" + staticRouteProfiles.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
  if (!staticRouteProfiles.isEmpty()) {
    createStaticRouteCommands(staticRouteProfiles,router,cmds);
  }
  RemoteAccessVpnVO vpn=_vpnDao.findByAccountAndVpc(router.getAccountId(),router.getVpcId());
  if (vpn != null) {
    createApplyVpnCommands(true,vpn,router,cmds);
  }
  boolean reprogramGuestNtwks=true;
  if (profile.getParameter(Param.ReProgramGuestNetworks) != null && (Boolean)profile.getParameter(Param.ReProgramGuestNetworks) == false) {
    reprogramGuestNtwks=false;
  }
  VirtualRouterProvider vrProvider=_vrProviderDao.findById(router.getElementId());
  if (vrProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + router.getHostName());
  }
  Provider provider=Network.Provider.getProvider(vrProvider.getType().toString());
  if (provider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vrProvider.getType().toString());
  }
  for (  Pair<Nic,Network> nicNtwk : guestNics) {
    Nic guestNic=nicNtwk.first();
    if (reprogramGuestNtwks) {
      finalizeIpAssocForNetwork(cmds,router,provider,guestNic.getNetworkId(),vlanMacAddress);
      finalizeNetworkRulesForNetwork(cmds,router,provider,guestNic.getNetworkId());
    }
    finalizeUserDataAndDhcpOnStart(cmds,router,provider,guestNic.getNetworkId());
  }
  cmds.addCommands(usageCmds);
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile profile){
  DomainRouterVO router=_routerDao.findById(profile.getId());
  boolean isVpc=(router.getVpcId() != null);
  if (!isVpc) {
    return super.finalizeCommandsOnStart(cmds,profile);
  }
  NicProfile controlNic=getControlNic(profile);
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  finalizeSshAndVersionAndNetworkUsageOnStart(cmds,profile,router,controlNic);
  List<Pair<Nic,Network>> guestNics=new ArrayList<Pair<Nic,Network>>();
  List<Pair<Nic,Network>> publicNics=new ArrayList<Pair<Nic,Network>>();
  Map<String,String> vlanMacAddress=new HashMap<String,String>();
  List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  Nic routerNic : routerNics) {
    Network network=_networkModel.getNetwork(routerNic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      Pair<Nic,Network> guestNic=new Pair<Nic,Network>(routerNic,network);
      guestNics.add(guestNic);
    }
 else     if (network.getTrafficType() == TrafficType.Public) {
      Pair<Nic,Network> publicNic=new Pair<Nic,Network>(routerNic,network);
      publicNics.add(publicNic);
      String vlanTag=BroadcastDomainType.getValue(routerNic.getBroadcastUri());
      vlanMacAddress.put(vlanTag,routerNic.getMacAddress());
    }
  }
  List<Command> usageCmds=new ArrayList<Command>();
  try {
    List<PublicIp> sourceNat=new ArrayList<PublicIp>(1);
    for (    Pair<Nic,Network> nicNtwk : publicNics) {
      Nic publicNic=nicNtwk.first();
      Network publicNtwk=nicNtwk.second();
      IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(publicNtwk.getId(),publicNic.getIp4Address());
      if (userIp.isSourceNat()) {
        PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
        sourceNat.add(publicIp);
        if (router.getPublicIpAddress() == null) {
          DomainRouterVO routerVO=_routerDao.findById(router.getId());
          routerVO.setPublicIpAddress(publicNic.getIp4Address());
          routerVO.setPublicNetmask(publicNic.getNetmask());
          routerVO.setPublicMacAddress(publicNic.getMacAddress());
          _routerDao.update(routerVO.getId(),routerVO);
        }
      }
      PlugNicCommand plugNicCmd=new PlugNicCommand(getNicTO(router,publicNic.getNetworkId(),publicNic.getBroadcastUri().toString()),router.getInstanceName(),router.getType());
      cmds.addCommand(plugNicCmd);
      VpcVO vpc=_vpcDao.findById(router.getVpcId());
      NetworkUsageCommand netUsageCmd=new NetworkUsageCommand(router.getPrivateIpAddress(),router.getInstanceName(),true,publicNic.getIp4Address(),vpc.getCidr());
      usageCmds.add(netUsageCmd);
      UserStatisticsVO stats=_userStatsDao.findBy(router.getAccountId(),router.getDataCenterId(),publicNtwk.getId(),publicNic.getIp4Address(),router.getId(),router.getType().toString());
      if (stats == null) {
        stats=new UserStatisticsVO(router.getAccountId(),router.getDataCenterId(),publicNic.getIp4Address(),router.getId(),router.getType().toString(),publicNtwk.getId());
        _userStatsDao.persist(stats);
      }
    }
    if (!sourceNat.isEmpty()) {
      createVpcAssociatePublicIPCommands(router,sourceNat,cmds,vlanMacAddress);
    }
    for (    Pair<Nic,Network> nicNtwk : guestNics) {
      Nic guestNic=nicNtwk.first();
      PlugNicCommand plugNicCmd=new PlugNicCommand(getNicTO(router,guestNic.getNetworkId(),null),router.getInstanceName(),router.getType());
      cmds.addCommand(plugNicCmd);
      if (!_networkModel.isPrivateGateway(guestNic)) {
        VirtualMachine vm=_vmDao.findById(router.getId());
        NicProfile nicProfile=_networkModel.getNicProfile(vm,guestNic.getNetworkId(),null);
        SetupGuestNetworkCommand setupCmd=createSetupGuestNetworkCommand(router,true,nicProfile);
        cmds.addCommand(setupCmd);
      }
 else {
        PrivateIpVO ipVO=_privateIpDao.findByIpAndSourceNetworkId(guestNic.getNetworkId(),guestNic.getIp4Address());
        Network network=_networkDao.findById(guestNic.getNetworkId());
        String vlanTag=BroadcastDomainType.getValue(network.getBroadcastUri());
        String netmask=NetUtils.getCidrNetmask(network.getCidr());
        PrivateIpAddress ip=new PrivateIpAddress(ipVO,network.getBroadcastUri().toString(),network.getGateway(),netmask,guestNic.getMacAddress());
        List<PrivateIpAddress> privateIps=new ArrayList<PrivateIpAddress>(1);
        privateIps.add(ip);
        createVpcAssociatePrivateIPCommands(router,privateIps,cmds,true);
        Long privateGwAclId=_vpcGatewayDao.getNetworkAclIdForPrivateIp(ipVO.getVpcId(),ipVO.getNetworkId(),ipVO.getIpAddress());
        if (privateGwAclId != null) {
          List<NetworkACLItemVO> networkACLs=_networkACLItemDao.listByACL(privateGwAclId);
          s_logger.debug(""String_Node_Str"" + networkACLs.size() + ""String_Node_Str""+ router+ ""String_Node_Str""+ ipVO.getIpAddress());
          createNetworkACLsCommands(networkACLs,router,cmds,ipVO.getNetworkId(),true);
        }
      }
    }
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + router + ""String_Node_Str"",ex);
    return false;
  }
  List<? extends StaticRoute> routes=_staticRouteDao.listByVpcId(router.getVpcId());
  List<StaticRouteProfile> staticRouteProfiles=new ArrayList<StaticRouteProfile>(routes.size());
  Map<Long,VpcGateway> gatewayMap=new HashMap<Long,VpcGateway>();
  for (  StaticRoute route : routes) {
    VpcGateway gateway=gatewayMap.get(route.getVpcGatewayId());
    if (gateway == null) {
      gateway=_entityMgr.findById(VpcGateway.class,route.getVpcGatewayId());
      gatewayMap.put(gateway.getId(),gateway);
    }
    staticRouteProfiles.add(new StaticRouteProfile(route,gateway));
  }
  s_logger.debug(""String_Node_Str"" + staticRouteProfiles.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
  if (!staticRouteProfiles.isEmpty()) {
    createStaticRouteCommands(staticRouteProfiles,router,cmds);
  }
  RemoteAccessVpnVO vpn=_vpnDao.findByAccountAndVpc(router.getAccountId(),router.getVpcId());
  if (vpn != null) {
    createApplyVpnCommands(true,vpn,router,cmds);
  }
  boolean reprogramGuestNtwks=true;
  if (profile.getParameter(Param.ReProgramGuestNetworks) != null && (Boolean)profile.getParameter(Param.ReProgramGuestNetworks) == false) {
    reprogramGuestNtwks=false;
  }
  VirtualRouterProvider vrProvider=_vrProviderDao.findById(router.getElementId());
  if (vrProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + router.getHostName());
  }
  Provider provider=Network.Provider.getProvider(vrProvider.getType().toString());
  if (provider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vrProvider.getType().toString());
  }
  for (  Pair<Nic,Network> nicNtwk : guestNics) {
    Nic guestNic=nicNtwk.first();
    if (reprogramGuestNtwks) {
      finalizeIpAssocForNetwork(cmds,router,provider,guestNic.getNetworkId(),vlanMacAddress);
      finalizeNetworkRulesForNetwork(cmds,router,provider,guestNic.getNetworkId());
    }
    finalizeUserDataAndDhcpOnStart(cmds,router,provider,guestNic.getNetworkId());
  }
  cmds.addCommands(usageCmds);
  return true;
}",0.9970281291036008
106079,"@Override public boolean applyNetworkACL(long aclId) throws ResourceUnavailableException {
  boolean handled=true;
  boolean aclApplyStatus=true;
  List<NetworkACLItemVO> rules=_networkACLItemDao.listByACL(aclId);
  List<NetworkVO> networks=_networkDao.listByAclId(aclId);
  for (  NetworkVO network : networks) {
    if (!applyACLItemsToNetwork(network.getId(),rules)) {
      handled=false;
      break;
    }
  }
  List<VpcGatewayVO> vpcGateways=_vpcGatewayDao.listByAclIdAndType(aclId,VpcGateway.Type.Private);
  for (  VpcGatewayVO vpcGateway : vpcGateways) {
    PrivateGateway privateGateway=_entityMgr.findById(PrivateGateway.class,vpcGateway.getId());
    if (!applyACLToPrivateGw(privateGateway)) {
      aclApplyStatus=false;
      s_logger.debug(""String_Node_Str"" + privateGateway.getId() + ""String_Node_Str""+ aclId);
      break;
    }
  }
  if (handled && aclApplyStatus) {
    for (    NetworkACLItem rule : rules) {
      if (rule.getState() == NetworkACLItem.State.Revoke) {
        removeRule(rule);
      }
 else       if (rule.getState() == NetworkACLItem.State.Add) {
        NetworkACLItemVO ruleVO=_networkACLItemDao.findById(rule.getId());
        ruleVO.setState(NetworkACLItem.State.Active);
        _networkACLItemDao.update(ruleVO.getId(),ruleVO);
      }
    }
  }
  return handled && aclApplyStatus;
}","@Override public boolean applyNetworkACL(long aclId) throws ResourceUnavailableException {
  boolean handled=true;
  boolean aclApplyStatus=true;
  List<NetworkACLItemVO> rules=_networkACLItemDao.listByACL(aclId);
  List<NetworkVO> networks=_networkDao.listByAclId(aclId);
  for (  NetworkVO network : networks) {
    if (!applyACLItemsToNetwork(network.getId(),rules)) {
      handled=false;
      break;
    }
  }
  List<VpcGatewayVO> vpcGateways=_vpcGatewayDao.listByAclIdAndType(aclId,VpcGateway.Type.Private);
  for (  VpcGatewayVO vpcGateway : vpcGateways) {
    PrivateGateway privateGateway=_vpcSvc.getVpcPrivateGateway(vpcGateway.getId());
    if (!applyACLToPrivateGw(privateGateway)) {
      aclApplyStatus=false;
      s_logger.debug(""String_Node_Str"" + privateGateway.getId() + ""String_Node_Str""+ aclId);
      break;
    }
  }
  if (handled && aclApplyStatus) {
    for (    NetworkACLItem rule : rules) {
      if (rule.getState() == NetworkACLItem.State.Revoke) {
        removeRule(rule);
      }
 else       if (rule.getState() == NetworkACLItem.State.Add) {
        NetworkACLItemVO ruleVO=_networkACLItemDao.findById(rule.getId());
        ruleVO.setState(NetworkACLItem.State.Active);
        _networkACLItemDao.update(ruleVO.getId(),ruleVO);
      }
    }
  }
  return handled && aclApplyStatus;
}",0.9856603773584904
106080,"@Override public boolean replaceNetworkACLonPrivateGw(long aclId,long privateGatewayId) throws ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  VpcGateway gateway=_vpcGatewayDao.findById(privateGatewayId);
  if (gateway == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VpcGatewayVO vo=_vpcGatewayDao.findById(privateGatewayId);
  if (vo.getState() != VpcGateway.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkACL acl=_networkACLDao.findById(aclId);
  if (acl == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (gateway.getVpcId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (aclId != NetworkACL.DEFAULT_DENY && aclId != NetworkACL.DEFAULT_ALLOW) {
    Vpc vpc=_entityMgr.findById(Vpc.class,acl.getVpcId());
    if (vpc == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,vpc);
    if (!gateway.getVpcId().equals(acl.getVpcId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + privateGatewayId + ""String_Node_Str""+ aclId+ ""String_Node_Str"");
    }
  }
  PrivateGateway privateGateway=_entityMgr.findById(PrivateGateway.class,privateGatewayId);
  _accountMgr.checkAccess(caller,null,true,privateGateway);
  return _networkAclMgr.replaceNetworkACLForPrivateGw(acl,privateGateway);
}","@Override public boolean replaceNetworkACLonPrivateGw(long aclId,long privateGatewayId) throws ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  VpcGateway gateway=_vpcGatewayDao.findById(privateGatewayId);
  if (gateway == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VpcGatewayVO vo=_vpcGatewayDao.findById(privateGatewayId);
  if (vo.getState() != VpcGateway.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkACL acl=_networkACLDao.findById(aclId);
  if (acl == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (gateway.getVpcId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (aclId != NetworkACL.DEFAULT_DENY && aclId != NetworkACL.DEFAULT_ALLOW) {
    Vpc vpc=_entityMgr.findById(Vpc.class,acl.getVpcId());
    if (vpc == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,vpc);
    if (!gateway.getVpcId().equals(acl.getVpcId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + privateGatewayId + ""String_Node_Str""+ aclId+ ""String_Node_Str"");
    }
  }
  PrivateGateway privateGateway=_vpcSvc.getVpcPrivateGateway(gateway.getId());
  _accountMgr.checkAccess(caller,null,true,privateGateway);
  return _networkAclMgr.replaceNetworkACLForPrivateGw(acl,privateGateway);
}",0.9758421231711466
106081,"/** 
 * Delete an acl group.
 * @param aclGroupId
 */
boolean deleteAclGroup(Long aclGroupId);",boolean deleteAclGroup(Long aclGroupId);,0.5970149253731343
106082,"/** 
 * Creates an acl group for the given domain.
 * @param domainId
 * @param name
 * @param description
 * @return AclGroup
 */
AclGroup createAclGroup(Long domainId,String aclGroupName,String description);","AclGroup createAclGroup(Account caller,String aclGroupName,String description);",0.4791666666666667
106083,"private String getBroadcastUriFromBridge(String brName){
  String pif=matchPifFileInDirectory(brName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(pif);
  if (matcher.find()) {
    if (brName.startsWith(""String_Node_Str"")) {
      return BroadcastDomainType.Vxlan.toUri(matcher.group(2)).toString();
    }
 else {
      return BroadcastDomainType.Vlan.toUri(matcher.group(2)).toString();
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif);
    return ""String_Node_Str"";
  }
}","private String getBroadcastUriFromBridge(String brName){
  String pif=matchPifFileInDirectory(brName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(pif);
  if (matcher.find()) {
    if (brName.startsWith(""String_Node_Str"")) {
      return BroadcastDomainType.Vxlan.toUri(matcher.group(2)).toString();
    }
 else {
      return BroadcastDomainType.Vlan.toUri(matcher.group(4)).toString();
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif);
    return ""String_Node_Str"";
  }
}",0.9982078853046596
106084,"private void configDnsMasq(VirtualRouter router,Network network,Commands cmds){
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  List<NicIpAliasVO> ipAliasVOList=_nicIpAliasDao.listByNetworkIdAndState(network.getId(),NicIpAlias.state.active);
  List<DhcpTO> ipList=new ArrayList<DhcpTO>();
  NicVO router_guest_nic=_nicDao.findByNtwkIdAndInstanceId(network.getId(),router.getId());
  String cidr=NetUtils.getCidrFromGatewayAndNetmask(router_guest_nic.getGateway(),router_guest_nic.getNetmask());
  String[] cidrPair=cidr.split(""String_Node_Str"");
  String cidrAddress=cidrPair[0];
  long cidrSize=Long.parseLong(cidrPair[1]);
  String startIpOfSubnet=NetUtils.getIpRangeStartIpFromCidr(cidrAddress,cidrSize);
  ipList.add(new DhcpTO(router_guest_nic.getIp4Address(),router_guest_nic.getGateway(),router_guest_nic.getNetmask(),startIpOfSubnet));
  for (  NicIpAliasVO ipAliasVO : ipAliasVOList) {
    DhcpTO DhcpTO=new DhcpTO(ipAliasVO.getIp4Address(),ipAliasVO.getGateway(),ipAliasVO.getNetmask(),ipAliasVO.getStartIpOfSubnet());
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + DhcpTO.getGateway() + ""String_Node_Str""+ DhcpTO.getNetmask()+ ""String_Node_Str""+ DhcpTO.getRouterIp()+ ""String_Node_Str""+ DhcpTO.getStartIpOfSubnet()+ ""String_Node_Str"");
    }
    ipList.add(DhcpTO);
    ipAliasVO.setVmId(router.getId());
  }
  DataCenterVO dcvo=_dcDao.findById(router.getDataCenterId());
  DnsMasqConfigCommand dnsMasqConfigCmd=new DnsMasqConfigCommand(ipList);
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(network.getId(),router.getId()));
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(""String_Node_Str"",dnsMasqConfigCmd);
}","private void configDnsMasq(VirtualRouter router,Network network,Commands cmds){
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  List<NicIpAliasVO> ipAliasVOList=_nicIpAliasDao.listByNetworkIdAndState(network.getId(),NicIpAlias.state.active);
  List<DhcpTO> ipList=new ArrayList<DhcpTO>();
  NicVO router_guest_nic=_nicDao.findByNtwkIdAndInstanceId(network.getId(),router.getId());
  String cidr=NetUtils.getCidrFromGatewayAndNetmask(router_guest_nic.getGateway(),router_guest_nic.getNetmask());
  String[] cidrPair=cidr.split(""String_Node_Str"");
  String cidrAddress=cidrPair[0];
  long cidrSize=Long.parseLong(cidrPair[1]);
  String startIpOfSubnet=NetUtils.getIpRangeStartIpFromCidr(cidrAddress,cidrSize);
  ipList.add(new DhcpTO(router_guest_nic.getIp4Address(),router_guest_nic.getGateway(),router_guest_nic.getNetmask(),startIpOfSubnet));
  for (  NicIpAliasVO ipAliasVO : ipAliasVOList) {
    DhcpTO DhcpTO=new DhcpTO(ipAliasVO.getIp4Address(),ipAliasVO.getGateway(),ipAliasVO.getNetmask(),ipAliasVO.getStartIpOfSubnet());
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + DhcpTO.getGateway() + ""String_Node_Str""+ DhcpTO.getNetmask()+ ""String_Node_Str""+ DhcpTO.getRouterIp()+ ""String_Node_Str""+ DhcpTO.getStartIpOfSubnet()+ ""String_Node_Str"");
    }
    ipList.add(DhcpTO);
    ipAliasVO.setVmId(router.getId());
  }
  _dcDao.findById(router.getDataCenterId());
  DnsMasqConfigCommand dnsMasqConfigCmd=new DnsMasqConfigCommand(ipList);
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(network.getId(),router.getId()));
  dnsMasqConfigCmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(""String_Node_Str"",dnsMasqConfigCmd);
}",0.9954773869346734
106085,"@Override public boolean configDhcpForSubnet(Network network,final NicProfile nic,VirtualMachineProfile profile,DeployDestination dest,List<DomainRouterVO> routers) throws ResourceUnavailableException {
  UserVmVO vm=_userVmDao.findById(profile.getId());
  _userVmDao.loadDetails(vm);
  final boolean isZoneBasic=(dest.getDataCenter().getNetworkType() == NetworkType.Basic);
  final Long podId=isZoneBasic ? dest.getPod().getId() : null;
  DomainRouterVO router=routers.get(0);
  if (router.getState() != State.Running) {
    s_logger.warn(""String_Node_Str"");
    throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
  }
  NicVO domr_guest_nic=_nicDao.findByInstanceIdAndIpAddressAndVmtype(router.getId(),_nicDao.getIpAddress(nic.getNetworkId(),router.getId()),VirtualMachine.Type.DomainRouter);
  if (!NetUtils.sameSubnet(domr_guest_nic.getIp4Address(),nic.getIp4Address(),nic.getNetmask())) {
    List<NicIpAliasVO> aliasIps=_nicIpAliasDao.listByNetworkIdAndState(domr_guest_nic.getNetworkId(),NicIpAlias.state.active);
    boolean ipInVmsubnet=false;
    for (    NicIpAliasVO alias : aliasIps) {
      if (NetUtils.sameSubnet(alias.getIp4Address(),nic.getIp4Address(),nic.getNetmask())) {
        ipInVmsubnet=true;
        break;
      }
    }
    PublicIp routerPublicIP=null;
    String routerAliasIp=null;
    DataCenter dc=_dcDao.findById(router.getDataCenterId());
    if (ipInVmsubnet == false) {
      try {
        if (network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestType.Shared) {
          Pod pod=_podDao.findById(vm.getPodIdToDeployIn());
          Account caller=CallContext.current().getCallingAccount();
          List<VlanVO> vlanList=_vlanDao.listVlansByNetworkIdAndGateway(network.getId(),nic.getGateway());
          List<Long> vlanDbIdList=new ArrayList<Long>();
          for (          VlanVO vlan : vlanList) {
            vlanDbIdList.add(vlan.getId());
          }
          if (dc.getNetworkType() == NetworkType.Basic) {
            routerPublicIP=_ipAddrMgr.assignPublicIpAddressFromVlans(router.getDataCenterId(),vm.getPodIdToDeployIn(),caller,Vlan.VlanType.DirectAttached,vlanDbIdList,nic.getNetworkId(),null,false);
          }
 else {
            routerPublicIP=_ipAddrMgr.assignPublicIpAddressFromVlans(router.getDataCenterId(),null,caller,Vlan.VlanType.DirectAttached,vlanDbIdList,nic.getNetworkId(),null,false);
          }
          routerAliasIp=routerPublicIP.getAddress().addr();
        }
      }
 catch (      InsufficientAddressCapacityException e) {
        s_logger.info(e.getMessage());
        s_logger.info(""String_Node_Str"");
        return false;
      }
      NicIpAliasVO alias=new NicIpAliasVO(domr_guest_nic.getId(),routerAliasIp,router.getId(),CallContext.current().getCallingAccountId(),network.getDomainId(),nic.getNetworkId(),nic.getGateway(),nic.getNetmask());
      alias.setAliasCount((routerPublicIP.getIpMacAddress()));
      _nicIpAliasDao.persist(alias);
      List<IpAliasTO> ipaliasTo=new ArrayList<IpAliasTO>();
      ipaliasTo.add(new IpAliasTO(routerAliasIp,alias.getNetmask(),alias.getAliasCount().toString()));
      Commands cmds=new Commands(Command.OnError.Stop);
      createIpAlias(router,ipaliasTo,alias.getNetworkId(),cmds);
      configDnsMasq(router,network,cmds);
      boolean result=sendCommandsToRouter(router,cmds);
      if (result == false) {
        final NicIpAliasVO ipAliasVO=_nicIpAliasDao.findByInstanceIdAndNetworkId(network.getId(),router.getId());
        final PublicIp routerPublicIPFinal=routerPublicIP;
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _nicIpAliasDao.expunge(ipAliasVO.getId());
            _ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());
          }
        }
);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
    return true;
  }
  return true;
}","@Override public boolean configDhcpForSubnet(Network network,final NicProfile nic,VirtualMachineProfile profile,DeployDestination dest,List<DomainRouterVO> routers) throws ResourceUnavailableException {
  UserVmVO vm=_userVmDao.findById(profile.getId());
  _userVmDao.loadDetails(vm);
  DomainRouterVO router=routers.get(0);
  if (router.getState() != State.Running) {
    s_logger.warn(""String_Node_Str"");
    throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
  }
  NicVO domr_guest_nic=_nicDao.findByInstanceIdAndIpAddressAndVmtype(router.getId(),_nicDao.getIpAddress(nic.getNetworkId(),router.getId()),VirtualMachine.Type.DomainRouter);
  if (!NetUtils.sameSubnet(domr_guest_nic.getIp4Address(),nic.getIp4Address(),nic.getNetmask())) {
    List<NicIpAliasVO> aliasIps=_nicIpAliasDao.listByNetworkIdAndState(domr_guest_nic.getNetworkId(),NicIpAlias.state.active);
    boolean ipInVmsubnet=false;
    for (    NicIpAliasVO alias : aliasIps) {
      if (NetUtils.sameSubnet(alias.getIp4Address(),nic.getIp4Address(),nic.getNetmask())) {
        ipInVmsubnet=true;
        break;
      }
    }
    PublicIp routerPublicIP=null;
    String routerAliasIp=null;
    DataCenter dc=_dcDao.findById(router.getDataCenterId());
    if (ipInVmsubnet == false) {
      try {
        if (network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestType.Shared) {
          _podDao.findById(vm.getPodIdToDeployIn());
          Account caller=CallContext.current().getCallingAccount();
          List<VlanVO> vlanList=_vlanDao.listVlansByNetworkIdAndGateway(network.getId(),nic.getGateway());
          List<Long> vlanDbIdList=new ArrayList<Long>();
          for (          VlanVO vlan : vlanList) {
            vlanDbIdList.add(vlan.getId());
          }
          if (dc.getNetworkType() == NetworkType.Basic) {
            routerPublicIP=_ipAddrMgr.assignPublicIpAddressFromVlans(router.getDataCenterId(),vm.getPodIdToDeployIn(),caller,Vlan.VlanType.DirectAttached,vlanDbIdList,nic.getNetworkId(),null,false);
          }
 else {
            routerPublicIP=_ipAddrMgr.assignPublicIpAddressFromVlans(router.getDataCenterId(),null,caller,Vlan.VlanType.DirectAttached,vlanDbIdList,nic.getNetworkId(),null,false);
          }
          routerAliasIp=routerPublicIP.getAddress().addr();
        }
      }
 catch (      InsufficientAddressCapacityException e) {
        s_logger.info(e.getMessage());
        s_logger.info(""String_Node_Str"");
        return false;
      }
      NicIpAliasVO alias=new NicIpAliasVO(domr_guest_nic.getId(),routerAliasIp,router.getId(),CallContext.current().getCallingAccountId(),network.getDomainId(),nic.getNetworkId(),nic.getGateway(),nic.getNetmask());
      alias.setAliasCount((routerPublicIP.getIpMacAddress()));
      _nicIpAliasDao.persist(alias);
      List<IpAliasTO> ipaliasTo=new ArrayList<IpAliasTO>();
      ipaliasTo.add(new IpAliasTO(routerAliasIp,alias.getNetmask(),alias.getAliasCount().toString()));
      Commands cmds=new Commands(Command.OnError.Stop);
      createIpAlias(router,ipaliasTo,alias.getNetworkId(),cmds);
      configDnsMasq(router,network,cmds);
      boolean result=sendCommandsToRouter(router,cmds);
      if (result == false) {
        final NicIpAliasVO ipAliasVO=_nicIpAliasDao.findByInstanceIdAndNetworkId(network.getId(),router.getId());
        final PublicIp routerPublicIPFinal=routerPublicIP;
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _nicIpAliasDao.expunge(ipAliasVO.getId());
            _ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());
          }
        }
);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
    return true;
  }
  return true;
}",0.9796434441775193
106086,"static Set<Class<?>> getFromJARFile(String jar,String packageName) throws IOException, ClassNotFoundException {
  Set<Class<?>> classes=new HashSet<Class<?>>();
  JarInputStream jarFile=new JarInputStream(new FileInputStream(jar));
  JarEntry jarEntry;
  do {
    jarEntry=jarFile.getNextJarEntry();
    if (jarEntry != null) {
      String className=jarEntry.getName();
      if (className.endsWith(""String_Node_Str"")) {
        className=stripFilenameExtension(className);
        if (className.startsWith(packageName)) {
          try {
            Class<?> clz=Class.forName(className.replace('/','.'));
            classes.add(clz);
          }
 catch (          ClassNotFoundException e) {
          }
catch (          NoClassDefFoundError e) {
          }
        }
      }
    }
  }
 while (jarEntry != null);
  return classes;
}","static Set<Class<?>> getFromJARFile(String jar,String packageName) throws IOException, ClassNotFoundException {
  Set<Class<?>> classes=new HashSet<Class<?>>();
  JarInputStream jarFile=new JarInputStream(new FileInputStream(jar));
  JarEntry jarEntry;
  do {
    jarEntry=jarFile.getNextJarEntry();
    if (jarEntry != null) {
      String className=jarEntry.getName();
      if (className.endsWith(""String_Node_Str"")) {
        className=stripFilenameExtension(className);
        if (className.startsWith(packageName)) {
          try {
            Class<?> clz=Class.forName(className.replace('/','.'));
            classes.add(clz);
          }
 catch (          ClassNotFoundException e) {
          }
catch (          NoClassDefFoundError e) {
          }
        }
      }
      IOUtils.closeQuietly(jarFile);
    }
  }
 while (jarEntry != null);
  IOUtils.closeQuietly(jarFile);
  return classes;
}",0.9598623853211008
106087,"public static void main(String[] args){
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{""String_Node_Str"",""String_Node_Str""});
  for (  Class<?> cmdClass : cmdClasses) {
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (_apiNameCmdClassMap.containsKey(apiName)) {
      System.out.println(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
      continue;
    }
    _apiNameCmdClassMap.put(apiName,cmdClass);
  }
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      fileNames=iter.next().split(""String_Node_Str"");
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println(""String_Node_Str"");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try {
      FileInputStream in=new FileInputStream(fileName);
      preProcessedCommands.load(in);
    }
 catch (    FileNotFoundException ex) {
      System.out.println(""String_Node_Str"" + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println(""String_Node_Str"" + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    int splitIndex=preProcessedCommand.lastIndexOf(""String_Node_Str"");
    String commandRoleMask=preProcessedCommand.substring(splitIndex + 1);
    Class<?> cmdClass=_apiNameCmdClassMap.get(key);
    if (cmdClass == null) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ preProcessedCommand);
      continue;
    }
    String commandName=cmdClass.getName();
    all_api_commands.put(key,commandName);
    short cmdPermissions=1;
    if (commandRoleMask != null) {
      cmdPermissions=Short.parseShort(commandRoleMask);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      domain_admin_api_commands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      regular_user_api_commands.put(key,commandName);
    }
  }
  all_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  domain_admin_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  regular_user_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  all_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  domain_admin_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  regular_user_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  all_api_commands_sorted.putAll(all_api_commands);
  domain_admin_api_commands_sorted.putAll(domain_admin_api_commands);
  regular_user_api_commands_sorted.putAll(regular_user_api_commands);
  try {
    XStream xs=new XStream();
    xs.alias(""String_Node_Str"",Command.class);
    xs.alias(""String_Node_Str"",Argument.class);
    String xmlDocDir=dirName + ""String_Node_Str"";
    String rootAdminDirName=xmlDocDir + ""String_Node_Str"";
    String domainAdminDirName=xmlDocDir + ""String_Node_Str"";
    String regularUserDirName=xmlDocDir + ""String_Node_Str"";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    Iterator<?> it=all_api_commands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(out);
        writeLoginCommand(rootAdmin);
        writeLoginCommand(domainAdmin);
        writeLoginCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(out);
        writeLogoutCommand(rootAdmin);
        writeLogoutCommand(domainAdmin);
        writeLogoutCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else {
        writeCommand(out,key);
        writeCommand(rootAdmin,key);
        if (!key.equals(""String_Node_Str"")) {
          ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRootAdminCommandOs,key);
          singleRootAdminCommandOs.close();
        }
        if (domain_admin_api_commands.containsKey(key)) {
          writeCommand(domainAdmin,key);
          ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleDomainAdminCommandOs,key);
          singleDomainAdminCommandOs.close();
        }
        if (regular_user_api_commands.containsKey(key)) {
          writeCommand(regularUser,key);
          ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRegularUserCommandOs,key);
          singleRegularUserCommandOs.close();
        }
      }
    }
    it=all_api_commands_sorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(rootAdminSorted);
        writeLoginCommand(outDomainAdminSorted);
        writeLoginCommand(regularUserSorted);
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(rootAdminSorted);
        writeLogoutCommand(outDomainAdminSorted);
        writeLogoutCommand(regularUserSorted);
      }
 else {
        writeCommand(rootAdminSorted,key);
        if (domain_admin_api_commands.containsKey(key)) {
          writeCommand(outDomainAdminSorted,key);
        }
        if (regular_user_api_commands.containsKey(key)) {
          writeCommand(regularUserSorted,key);
        }
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}","public static void main(String[] args){
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{""String_Node_Str"",""String_Node_Str""});
  for (  Class<?> cmdClass : cmdClasses) {
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (_apiNameCmdClassMap.containsKey(apiName)) {
      System.out.println(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
      continue;
    }
    _apiNameCmdClassMap.put(apiName,cmdClass);
  }
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      fileNames=iter.next().split(""String_Node_Str"");
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println(""String_Node_Str"");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try {
      FileInputStream in=new FileInputStream(fileName);
      preProcessedCommands.load(in);
      in.close();
    }
 catch (    FileNotFoundException ex) {
      System.out.println(""String_Node_Str"" + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println(""String_Node_Str"" + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    int splitIndex=preProcessedCommand.lastIndexOf(""String_Node_Str"");
    String commandRoleMask=preProcessedCommand.substring(splitIndex + 1);
    Class<?> cmdClass=_apiNameCmdClassMap.get(key);
    if (cmdClass == null) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ preProcessedCommand);
      continue;
    }
    String commandName=cmdClass.getName();
    all_api_commands.put(key,commandName);
    short cmdPermissions=1;
    if (commandRoleMask != null) {
      cmdPermissions=Short.parseShort(commandRoleMask);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      domain_admin_api_commands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      regular_user_api_commands.put(key,commandName);
    }
  }
  all_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  domain_admin_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  regular_user_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  all_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  domain_admin_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  regular_user_api_commands.put(""String_Node_Str"",""String_Node_Str"");
  all_api_commands_sorted.putAll(all_api_commands);
  domain_admin_api_commands_sorted.putAll(domain_admin_api_commands);
  regular_user_api_commands_sorted.putAll(regular_user_api_commands);
  try {
    XStream xs=new XStream();
    xs.alias(""String_Node_Str"",Command.class);
    xs.alias(""String_Node_Str"",Argument.class);
    String xmlDocDir=dirName + ""String_Node_Str"";
    String rootAdminDirName=xmlDocDir + ""String_Node_Str"";
    String domainAdminDirName=xmlDocDir + ""String_Node_Str"";
    String regularUserDirName=xmlDocDir + ""String_Node_Str"";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    Iterator<?> it=all_api_commands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(out);
        writeLoginCommand(rootAdmin);
        writeLoginCommand(domainAdmin);
        writeLoginCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(out);
        writeLogoutCommand(rootAdmin);
        writeLogoutCommand(domainAdmin);
        writeLogoutCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else {
        writeCommand(out,key);
        writeCommand(rootAdmin,key);
        if (!key.equals(""String_Node_Str"")) {
          ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRootAdminCommandOs,key);
          singleRootAdminCommandOs.close();
        }
        if (domain_admin_api_commands.containsKey(key)) {
          writeCommand(domainAdmin,key);
          ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleDomainAdminCommandOs,key);
          singleDomainAdminCommandOs.close();
        }
        if (regular_user_api_commands.containsKey(key)) {
          writeCommand(regularUser,key);
          ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRegularUserCommandOs,key);
          singleRegularUserCommandOs.close();
        }
      }
    }
    it=all_api_commands_sorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(rootAdminSorted);
        writeLoginCommand(outDomainAdminSorted);
        writeLoginCommand(regularUserSorted);
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(rootAdminSorted);
        writeLogoutCommand(outDomainAdminSorted);
        writeLogoutCommand(regularUserSorted);
      }
 else {
        writeCommand(rootAdminSorted,key);
        if (domain_admin_api_commands.containsKey(key)) {
          writeCommand(outDomainAdminSorted,key);
        }
        if (regular_user_api_commands.containsKey(key)) {
          writeCommand(regularUserSorted,key);
        }
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}",0.9990196078431371
106088,"void loadProperties() throws ConfigurationException {
  final File file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (file == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + file.getAbsolutePath());
  InputStream propertiesStream=null;
  try {
    propertiesStream=new FileInputStream(file);
    _properties.load(propertiesStream);
  }
 catch (  final FileNotFoundException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),ex);
  }
catch (  final IOException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),ex);
  }
 finally {
    IOUtils.closeQuietly(propertiesStream);
  }
}","void loadProperties() throws ConfigurationException {
  final File file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (null == file) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + file.getAbsolutePath());
  InputStream propertiesStream=null;
  try {
    propertiesStream=new FileInputStream(file);
    _properties.load(propertiesStream);
  }
 catch (  final FileNotFoundException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),ex);
  }
catch (  final IOException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),ex);
  }
 finally {
    IOUtils.closeQuietly(propertiesStream);
  }
}",0.988826815642458
106089,"public void init(String[] args) throws ConfigurationException {
  File file=new File(""String_Node_Str"");
  if (!file.exists()) {
    file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  }
  DOMConfigurator.configureAndWatch(file.getAbsolutePath());
  s_logger.info(""String_Node_Str"");
  final Class<?> c=this.getClass();
  _version=c.getPackage().getImplementationVersion();
  if (_version == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + _version);
  loadProperties();
  parseCommand(args);
  if (s_logger.isDebugEnabled()) {
    List<String> properties=Collections.list((Enumeration<String>)_properties.propertyNames());
    for (    String property : properties) {
      s_logger.debug(""String_Node_Str"" + property);
    }
  }
  s_logger.info(""String_Node_Str"");
  _storage=new PropertiesStorage();
  _storage.configure(""String_Node_Str"",new HashMap<String,Object>());
  for (  Map.Entry<String,Object> cmdLineProp : getCmdLineProperties().entrySet()) {
    _properties.put(cmdLineProp.getKey(),cmdLineProp.getValue());
  }
  s_logger.info(""String_Node_Str"");
  _backoff=new ConstantTimeBackoff();
  _backoff.configure(""String_Node_Str"",new HashMap<String,Object>());
}","public void init(String[] args) throws ConfigurationException {
  File file=new File(""String_Node_Str"");
  if (!file.exists()) {
    file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  }
  if (null != file) {
    DOMConfigurator.configureAndWatch(file.getAbsolutePath());
    s_logger.info(""String_Node_Str"");
  }
 else {
    s_logger.error(""String_Node_Str"");
  }
  final Class<?> c=this.getClass();
  _version=c.getPackage().getImplementationVersion();
  if (_version == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + _version);
  loadProperties();
  parseCommand(args);
  if (s_logger.isDebugEnabled()) {
    List<String> properties=Collections.list((Enumeration<String>)_properties.propertyNames());
    for (    String property : properties) {
      s_logger.debug(""String_Node_Str"" + property);
    }
  }
  s_logger.info(""String_Node_Str"");
  _storage=new PropertiesStorage();
  _storage.configure(""String_Node_Str"",new HashMap<String,Object>());
  for (  Map.Entry<String,Object> cmdLineProp : getCmdLineProperties().entrySet()) {
    _properties.put(cmdLineProp.getKey(),cmdLineProp.getValue());
  }
  s_logger.info(""String_Node_Str"");
  _backoff=new ConstantTimeBackoff();
  _backoff.configure(""String_Node_Str"",new HashMap<String,Object>());
}",0.9682228324833267
106090,"/** 
 * Link the virtual machine with the service instance when recovering state from database.
 * @param controller
 * @param serviceUuid
 */
private void buildServiceInstance(ModelController controller,String serviceUuid){
  ContrailManager manager=controller.getManager();
  ApiConnector api=controller.getApiAccessor();
  _serviceUuid=serviceUuid;
  ServiceInstanceModel siModel=manager.getDatabase().lookupServiceInstance(serviceUuid);
  if (siModel == null) {
    ServiceInstance siObj;
    try {
      siObj=(ServiceInstance)api.findById(ServiceInstance.class,serviceUuid);
    }
 catch (    IOException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"",ex);
    }
    if (siObj == null) {
      siModel=new ServiceInstanceModel(serviceUuid);
      siModel.build(controller,siObj);
    }
  }
  _serviceModel=siModel;
}","/** 
 * Link the virtual machine with the service instance when recovering state from database.
 * @param controller
 * @param serviceUuid
 */
private void buildServiceInstance(ModelController controller,String serviceUuid){
  ContrailManager manager=controller.getManager();
  ApiConnector api=controller.getApiAccessor();
  _serviceUuid=serviceUuid;
  ServiceInstanceModel siModel=manager.getDatabase().lookupServiceInstance(serviceUuid);
  if (siModel == null) {
    ServiceInstance siObj;
    try {
      siObj=(ServiceInstance)api.findById(ServiceInstance.class,serviceUuid);
    }
 catch (    IOException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"",ex);
    }
    if (siObj == null) {
      siModel=new ServiceInstanceModel(serviceUuid);
      siModel.update(controller);
      siObj=siModel.getServiceInstance();
    }
  }
  _serviceModel=siModel;
}",0.9604897050639956
106091,"private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    return Base64.encode(bytes).toString();
  }
 catch (  final NoSuchAlgorithmException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    String encodedPassword=new String(Base64.encode(bytes));
    return encodedPassword;
  }
 catch (  final NoSuchAlgorithmException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9034564958283672
106092,"@Override public void doInTransactionWithoutResult(TransactionStatus status){
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Status.Up.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NIN,ResourceState.Maintenance,ResourceState.PrepareForMaintenance,ResourceState.ErrorInMaintenance);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Host.Type.Routing.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,HypervisorType.KVM);
  List<HostVO> hosts=_hostDao.search(sc,null);
  for (  HostVO host : hosts) {
    List<UserVmVO> vms=_userVmDao.listRunningByHostId(host.getId());
    List<Long> vmIds=new ArrayList<Long>();
    for (    UserVmVO vm : vms) {
      if (vm.getType() == VirtualMachine.Type.User)       vmIds.add(vm.getId());
    }
    HashMap<Long,List<VmDiskStatsEntry>> vmDiskStatsById=_userVmMgr.getVmDiskStatistics(host.getId(),host.getName(),vmIds);
    if (vmDiskStatsById == null)     continue;
    Set<Long> vmIdSet=vmDiskStatsById.keySet();
    for (    Long vmId : vmIdSet) {
      List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsById.get(vmId);
      if (vmDiskStats == null)       continue;
      UserVmVO userVm=_userVmDao.findById(vmId);
      for (      VmDiskStatsEntry vmDiskStat : vmDiskStats) {
        SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
        sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
        VolumeVO volume=_volsDao.search(sc_volume,null).get(0);
        VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),vmId,volume.getId());
        VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),vmId,volume.getId());
        if ((vmDiskStat.getBytesRead() == 0) && (vmDiskStat.getBytesWrite() == 0) && (vmDiskStat.getIORead() == 0)&& (vmDiskStat.getIOWrite() == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (vmDiskStat_lock == null) {
          s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
          continue;
        }
        if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite()) || (previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead())|| (previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()))) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite());
          continue;
        }
        if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
          }
          vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
        }
        vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
        if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
          }
          vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
        if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
          }
          vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
        if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
          }
          vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
        }
        vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
        if (!_dailyOrHourly) {
          vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
          vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
          vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
          vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
      }
    }
  }
}","@Override public void doInTransactionWithoutResult(TransactionStatus status){
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Status.Up.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NIN,ResourceState.Maintenance,ResourceState.PrepareForMaintenance,ResourceState.ErrorInMaintenance);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Host.Type.Routing.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,HypervisorType.KVM);
  List<HostVO> hosts=_hostDao.search(sc,null);
  for (  HostVO host : hosts) {
    List<UserVmVO> vms=_userVmDao.listRunningByHostId(host.getId());
    List<Long> vmIds=new ArrayList<Long>();
    for (    UserVmVO vm : vms) {
      if (vm.getType() == VirtualMachine.Type.User)       vmIds.add(vm.getId());
    }
    HashMap<Long,List<VmDiskStatsEntry>> vmDiskStatsById=_userVmMgr.getVmDiskStatistics(host.getId(),host.getName(),vmIds);
    if (vmDiskStatsById == null)     continue;
    Set<Long> vmIdSet=vmDiskStatsById.keySet();
    for (    Long vmId : vmIdSet) {
      List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsById.get(vmId);
      if (vmDiskStats == null)       continue;
      UserVmVO userVm=_userVmDao.findById(vmId);
      for (      VmDiskStatsEntry vmDiskStat : vmDiskStats) {
        SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
        sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
        List<VolumeVO> volumes=_volsDao.search(sc_volume,null);
        if ((volumes == null) || (volumes.size() == 0))         break;
        VolumeVO volume=volumes.get(0);
        VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),vmId,volume.getId());
        VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),vmId,volume.getId());
        if ((vmDiskStat.getBytesRead() == 0) && (vmDiskStat.getBytesWrite() == 0) && (vmDiskStat.getIORead() == 0)&& (vmDiskStat.getIOWrite() == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (vmDiskStat_lock == null) {
          s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
          continue;
        }
        if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite()) || (previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead())|| (previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()))) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite());
          continue;
        }
        if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
          }
          vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
        }
        vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
        if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
          }
          vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
        if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
          }
          vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
        if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
          }
          vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
        }
        vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
        if (!_dailyOrHourly) {
          vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
          vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
          vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
          vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
      }
    }
  }
}",0.9859010510125608
106093,"@Override public void collectVmDiskStatistics(final UserVmVO userVm){
  if (!userVm.getHypervisorType().equals(HypervisorType.KVM))   return;
  s_logger.debug(""String_Node_Str"");
  long hostId=userVm.getHostId();
  List<String> vmNames=new ArrayList<String>();
  vmNames.add(userVm.getInstanceName());
  final HostVO host=_hostDao.findById(hostId);
  GetVmDiskStatsAnswer diskStatsAnswer=null;
  try {
    diskStatsAnswer=(GetVmDiskStatsAnswer)_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,host.getGuid(),host.getName()));
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName(),e);
    return;
  }
  if (diskStatsAnswer != null) {
    if (!diskStatsAnswer.getResult()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ diskStatsAnswer.getDetails());
      return;
    }
    try {
      final GetVmDiskStatsAnswer diskStatsAnswerFinal=diskStatsAnswer;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=diskStatsAnswerFinal.getVmDiskStatsMap();
          if (vmDiskStatsByName == null)           return;
          List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsByName.get(userVm.getInstanceName());
          if (vmDiskStats == null)           return;
          for (          VmDiskStatsEntry vmDiskStat : vmDiskStats) {
            SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
            sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
            VolumeVO volume=_volsDao.search(sc_volume,null).get(0);
            VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
            VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
            if ((vmDiskStat.getIORead() == 0) && (vmDiskStat.getIOWrite() == 0) && (vmDiskStat.getBytesRead() == 0)&& (vmDiskStat.getBytesWrite() == 0)) {
              s_logger.debug(""String_Node_Str"");
              continue;
            }
            if (vmDiskStat_lock == null) {
              s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
              continue;
            }
            if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead()) || ((previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()) || (previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite())))) {
              s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite());
              continue;
            }
            if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
              }
              vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
            }
            vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
            if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
              }
              vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
            }
            vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
            if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
              }
              vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
            }
            vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
            if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
              }
              vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
            }
            vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
            if (!_dailyOrHourly) {
              vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
              vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
              vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
              vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
            }
            _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
          }
        }
      }
);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + userVm.getId() + ""String_Node_Str""+ hostId,e);
    }
  }
}","@Override public void collectVmDiskStatistics(final UserVmVO userVm){
  if (!userVm.getHypervisorType().equals(HypervisorType.KVM))   return;
  s_logger.debug(""String_Node_Str"");
  long hostId=userVm.getHostId();
  List<String> vmNames=new ArrayList<String>();
  vmNames.add(userVm.getInstanceName());
  final HostVO host=_hostDao.findById(hostId);
  GetVmDiskStatsAnswer diskStatsAnswer=null;
  try {
    diskStatsAnswer=(GetVmDiskStatsAnswer)_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,host.getGuid(),host.getName()));
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName(),e);
    return;
  }
  if (diskStatsAnswer != null) {
    if (!diskStatsAnswer.getResult()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ diskStatsAnswer.getDetails());
      return;
    }
    try {
      final GetVmDiskStatsAnswer diskStatsAnswerFinal=diskStatsAnswer;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=diskStatsAnswerFinal.getVmDiskStatsMap();
          if (vmDiskStatsByName == null)           return;
          List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsByName.get(userVm.getInstanceName());
          if (vmDiskStats == null)           return;
          for (          VmDiskStatsEntry vmDiskStat : vmDiskStats) {
            SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
            sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
            List<VolumeVO> volumes=_volsDao.search(sc_volume,null);
            if ((volumes == null) || (volumes.size() == 0))             break;
            VolumeVO volume=volumes.get(0);
            VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
            VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
            if ((vmDiskStat.getIORead() == 0) && (vmDiskStat.getIOWrite() == 0) && (vmDiskStat.getBytesRead() == 0)&& (vmDiskStat.getBytesWrite() == 0)) {
              s_logger.debug(""String_Node_Str"");
              continue;
            }
            if (vmDiskStat_lock == null) {
              s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
              continue;
            }
            if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead()) || ((previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()) || (previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite())))) {
              s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite());
              continue;
            }
            if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
              }
              vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
            }
            vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
            if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
              }
              vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
            }
            vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
            if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
              }
              vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
            }
            vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
            if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
              }
              vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
            }
            vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
            if (!_dailyOrHourly) {
              vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
              vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
              vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
              vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
            }
            _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
          }
        }
      }
);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + userVm.getId() + ""String_Node_Str""+ hostId,e);
    }
  }
}",0.9894069434779248
106094,"/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override public void init(ServletConfig config) throws ServletException {
  SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  Properties EC2Prop=null;
  if (null != propertiesFile) {
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
    EC2Prop=new Properties();
    try {
      EC2Prop.load(new FileInputStream(propertiesFile));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
    String keystore=EC2Prop.getProperty(""String_Node_Str"");
    keystorePassword=EC2Prop.getProperty(""String_Node_Str"");
    wsdlVersion=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    version=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    String installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getProperty(""String_Node_Str"");
    String webappPath=config.getServletContext().getRealPath(""String_Node_Str"");
    pathToKeystore=new String(webappPath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ keystore);
  }
}","/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override public void init(ServletConfig config) throws ServletException {
  SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  Properties EC2Prop=null;
  if (null != propertiesFile) {
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
    EC2Prop=new Properties();
    FileInputStream ec2PropFile=null;
    try {
      ec2PropFile=new FileInputStream(propertiesFile);
      EC2Prop.load(ec2PropFile);
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
 finally {
      IOUtils.closeQuietly(ec2PropFile);
    }
    String keystore=EC2Prop.getProperty(""String_Node_Str"");
    keystorePassword=EC2Prop.getProperty(""String_Node_Str"");
    wsdlVersion=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    version=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    String installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getProperty(""String_Node_Str"");
    String webappPath=config.getServletContext().getRealPath(""String_Node_Str"");
    pathToKeystore=new String(webappPath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ keystore);
  }
}",0.9389903995044906
106095,"private void loadStartupProperties(){
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  properties=new Properties();
  if (propertiesFile != null) {
    try {
      properties.load(new FileInputStream(propertiesFile));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
  }
 else {
    if (logger.isInfoEnabled())     logger.info(""String_Node_Str"");
  }
}","private void loadStartupProperties(){
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  properties=new Properties();
  if (propertiesFile != null) {
    FileInputStream startProps=null;
    try {
      startProps=new FileInputStream(propertiesFile);
      properties.load(startProps);
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
 finally {
      IOUtils.closeQuietly(startProps);
    }
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
  }
 else {
    if (logger.isInfoEnabled())     logger.info(""String_Node_Str"");
  }
}",0.8904593639575972
106096,"public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  initialize();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  initialize();
  return true;
}",0.962406015037594
106097,"public void removeDetail(long resourceId,String key){
  if (key != null) {
    SearchCriteria<R> sc=AllFieldsSearch.create();
    sc.setParameters(""String_Node_Str"",key);
    remove(sc);
  }
}","public void removeDetail(long resourceId,String key){
  if (key != null) {
    SearchCriteria<R> sc=AllFieldsSearch.create();
    sc.setParameters(""String_Node_Str"",resourceId);
    sc.setParameters(""String_Node_Str"",key);
    remove(sc);
  }
}",0.8807339449541285
106098,"@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledViewEntity> arg0,Long arg1,boolean arg2,List<Long> arg3,ListProjectResourcesCriteria arg4){
}","@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds){
}",0.6136363636363636
106099,"private Pair<List<UserVmJoinVO>,Integer> searchForUserVMsInternal(ListVMsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Pair<List<Long>,List<Long>> idPair=_aclService.getAclEntityPermission(caller.getId(),AclEntityType.VM.toString(),AccessType.ListEntry);
  List<Long> grantedIds=idPair.first();
  List<Long> revokedIds=idPair.second();
  boolean listAll=cmd.listAll();
  Long id=cmd.getId();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,listAll,false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(UserVmJoinVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<UserVmJoinVO> sb=_userVmJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  _accountMgr.buildACLViewSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria,grantedIds,revokedIds);
  Map<String,String> tags=cmd.getTags();
  String hypervisor=cmd.getHypervisor();
  Object name=cmd.getName();
  Object state=cmd.getState();
  Object zoneId=cmd.getZoneId();
  Object keyword=cmd.getKeyword();
  boolean isAdmin=false;
  boolean isRootAdmin=false;
  if (_accountMgr.isAdmin(caller.getType())) {
    isAdmin=true;
  }
  if (_accountMgr.isRootAdmin(caller.getId())) {
    isRootAdmin=true;
  }
  Object groupId=cmd.getGroupId();
  Object networkId=cmd.getNetworkId();
  if (HypervisorType.getType(hypervisor) == HypervisorType.None && hypervisor != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
  }
  Object templateId=cmd.getTemplateId();
  Object isoId=cmd.getIsoId();
  Object vpcId=cmd.getVpcId();
  Object affinityGroupId=cmd.getAffinityGroupId();
  Object pod=null;
  Object hostId=null;
  Object storageId=null;
  if (cmd instanceof ListVMsCmdByAdmin) {
    ListVMsCmdByAdmin adCmd=(ListVMsCmdByAdmin)cmd;
    pod=adCmd.getPodId();
    hostId=adCmd.getHostId();
    storageId=adCmd.getStorageId();
  }
  sb.and(""String_Node_Str"",sb.entity().getDisplayName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NIN);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getTemplateId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getIsoId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getInstanceGroupId(),SearchCriteria.Op.EQ);
  if (groupId != null && (Long)groupId != -1) {
    sb.and(""String_Node_Str"",sb.entity().getInstanceGroupId(),SearchCriteria.Op.EQ);
  }
  if (networkId != null) {
    sb.and(""String_Node_Str"",sb.entity().getNetworkId(),SearchCriteria.Op.EQ);
  }
  if (vpcId != null && networkId == null) {
    sb.and(""String_Node_Str"",sb.entity().getVpcId(),SearchCriteria.Op.EQ);
  }
  if (storageId != null) {
    sb.and(""String_Node_Str"",sb.entity().getPoolId(),SearchCriteria.Op.EQ);
  }
  if (affinityGroupId != null) {
    sb.and(""String_Node_Str"",sb.entity().getAffinityGroupId(),SearchCriteria.Op.EQ);
  }
  if (!isRootAdmin) {
    sb.and(""String_Node_Str"",sb.entity().isDisplayVm(),SearchCriteria.Op.EQ);
  }
  SearchCriteria<UserVmJoinVO> sc=sb.create();
  _accountMgr.buildACLViewSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<UserVmJoinVO> tagSc=_userVmJoinDao.createSearchCriteria();
    for (    String key : tags.keySet()) {
      SearchCriteria<UserVmJoinVO> tsc=_userVmJoinDao.createSearchCriteria();
      tsc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
      tsc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
      tagSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,tsc);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,tagSc);
  }
  if (groupId != null && (Long)groupId != -1) {
    sc.setParameters(""String_Node_Str"",groupId);
  }
  if (keyword != null) {
    SearchCriteria<UserVmJoinVO> ssc=_userVmJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,keyword);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (templateId != null) {
    sc.setParameters(""String_Node_Str"",templateId);
  }
  if (isoId != null) {
    sc.setParameters(""String_Node_Str"",isoId);
  }
  if (networkId != null) {
    sc.setParameters(""String_Node_Str"",networkId);
  }
  if (vpcId != null && networkId == null) {
    sc.setParameters(""String_Node_Str"",vpcId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (hypervisor != null) {
    sc.setParameters(""String_Node_Str"",hypervisor);
  }
  if (!isAdmin) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
    if (state == null) {
      sc.setParameters(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (affinityGroupId != null) {
    sc.setParameters(""String_Node_Str"",affinityGroupId);
  }
  if (cmd instanceof ListVMsCmdByAdmin) {
    ListVMsCmdByAdmin aCmd=(ListVMsCmdByAdmin)cmd;
    if (aCmd.getPodId() != null) {
      sc.setParameters(""String_Node_Str"",pod);
      if (state == null) {
        sc.setParameters(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (hostId != null) {
      sc.setParameters(""String_Node_Str"",hostId);
    }
    if (storageId != null) {
      sc.setParameters(""String_Node_Str"",storageId);
    }
  }
  if (!isRootAdmin) {
    sc.setParameters(""String_Node_Str"",1);
  }
  Pair<List<UserVmJoinVO>,Integer> uniqueVmPair=_userVmJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueVmPair.second();
  if (count.intValue() == 0) {
    return uniqueVmPair;
  }
  List<UserVmJoinVO> uniqueVms=uniqueVmPair.first();
  Long[] vmIds=new Long[uniqueVms.size()];
  int i=0;
  for (  UserVmJoinVO v : uniqueVms) {
    vmIds[i++]=v.getId();
  }
  List<UserVmJoinVO> vms=_userVmJoinDao.searchByIds(vmIds);
  return new Pair<List<UserVmJoinVO>,Integer>(vms,count);
}","private Pair<List<UserVmJoinVO>,Integer> searchForUserVMsInternal(ListVMsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Pair<List<Long>,List<Long>> idPair=_aclService.getAclEntityPermission(caller.getId(),AclEntityType.VM.toString(),AccessType.ListEntry);
  List<Long> grantedIds=idPair.first();
  List<Long> revokedIds=idPair.second();
  boolean listAll=cmd.listAll();
  Long id=cmd.getId();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,listAll,false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(UserVmJoinVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<UserVmJoinVO> sb=_userVmJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  _accountMgr.buildACLViewSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria,grantedIds,revokedIds);
  Map<String,String> tags=cmd.getTags();
  String hypervisor=cmd.getHypervisor();
  Object name=cmd.getName();
  Object state=cmd.getState();
  Object zoneId=cmd.getZoneId();
  Object keyword=cmd.getKeyword();
  boolean isAdmin=false;
  boolean isRootAdmin=false;
  if (_accountMgr.isAdmin(caller.getType())) {
    isAdmin=true;
  }
  if (_accountMgr.isRootAdmin(caller.getId())) {
    isRootAdmin=true;
  }
  Object groupId=cmd.getGroupId();
  Object networkId=cmd.getNetworkId();
  if (HypervisorType.getType(hypervisor) == HypervisorType.None && hypervisor != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
  }
  Object templateId=cmd.getTemplateId();
  Object isoId=cmd.getIsoId();
  Object vpcId=cmd.getVpcId();
  Object affinityGroupId=cmd.getAffinityGroupId();
  Object pod=null;
  Object hostId=null;
  Object storageId=null;
  if (cmd instanceof ListVMsCmdByAdmin) {
    ListVMsCmdByAdmin adCmd=(ListVMsCmdByAdmin)cmd;
    pod=adCmd.getPodId();
    hostId=adCmd.getHostId();
    storageId=adCmd.getStorageId();
  }
  sb.and(""String_Node_Str"",sb.entity().getDisplayName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NIN);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getTemplateId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getIsoId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getInstanceGroupId(),SearchCriteria.Op.EQ);
  if (groupId != null && (Long)groupId != -1) {
    sb.and(""String_Node_Str"",sb.entity().getInstanceGroupId(),SearchCriteria.Op.EQ);
  }
  if (networkId != null) {
    sb.and(""String_Node_Str"",sb.entity().getNetworkId(),SearchCriteria.Op.EQ);
  }
  if (vpcId != null && networkId == null) {
    sb.and(""String_Node_Str"",sb.entity().getVpcId(),SearchCriteria.Op.EQ);
  }
  if (storageId != null) {
    sb.and(""String_Node_Str"",sb.entity().getPoolId(),SearchCriteria.Op.EQ);
  }
  if (affinityGroupId != null) {
    sb.and(""String_Node_Str"",sb.entity().getAffinityGroupId(),SearchCriteria.Op.EQ);
  }
  if (!isRootAdmin) {
    sb.and(""String_Node_Str"",sb.entity().isDisplayVm(),SearchCriteria.Op.EQ);
  }
  SearchCriteria<UserVmJoinVO> sc=sb.create();
  _accountMgr.buildACLViewSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria,grantedIds,revokedIds);
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<UserVmJoinVO> tagSc=_userVmJoinDao.createSearchCriteria();
    for (    String key : tags.keySet()) {
      SearchCriteria<UserVmJoinVO> tsc=_userVmJoinDao.createSearchCriteria();
      tsc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
      tsc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
      tagSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,tsc);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,tagSc);
  }
  if (groupId != null && (Long)groupId != -1) {
    sc.setParameters(""String_Node_Str"",groupId);
  }
  if (keyword != null) {
    SearchCriteria<UserVmJoinVO> ssc=_userVmJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,keyword);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (templateId != null) {
    sc.setParameters(""String_Node_Str"",templateId);
  }
  if (isoId != null) {
    sc.setParameters(""String_Node_Str"",isoId);
  }
  if (networkId != null) {
    sc.setParameters(""String_Node_Str"",networkId);
  }
  if (vpcId != null && networkId == null) {
    sc.setParameters(""String_Node_Str"",vpcId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (hypervisor != null) {
    sc.setParameters(""String_Node_Str"",hypervisor);
  }
  if (!isAdmin) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
    if (state == null) {
      sc.setParameters(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (affinityGroupId != null) {
    sc.setParameters(""String_Node_Str"",affinityGroupId);
  }
  if (cmd instanceof ListVMsCmdByAdmin) {
    ListVMsCmdByAdmin aCmd=(ListVMsCmdByAdmin)cmd;
    if (aCmd.getPodId() != null) {
      sc.setParameters(""String_Node_Str"",pod);
      if (state == null) {
        sc.setParameters(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (hostId != null) {
      sc.setParameters(""String_Node_Str"",hostId);
    }
    if (storageId != null) {
      sc.setParameters(""String_Node_Str"",storageId);
    }
  }
  if (!isRootAdmin) {
    sc.setParameters(""String_Node_Str"",1);
  }
  Pair<List<UserVmJoinVO>,Integer> uniqueVmPair=_userVmJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueVmPair.second();
  if (count.intValue() == 0) {
    return uniqueVmPair;
  }
  List<UserVmJoinVO> uniqueVms=uniqueVmPair.first();
  Long[] vmIds=new Long[uniqueVms.size()];
  int i=0;
  for (  UserVmJoinVO v : uniqueVms) {
    vmIds[i++]=v.getId();
  }
  List<UserVmJoinVO> vms=_userVmJoinDao.searchByIds(vmIds);
  return new Pair<List<UserVmJoinVO>,Integer>(vms,count);
}",0.99853684490556
106100,"void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledViewEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria);","void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds);",0.8928571428571429
106101,"@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledViewEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria){
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setParameters(""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
}","@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds){
  if (!revokedIds.isEmpty()) {
    sc.setParameters(""String_Node_Str"",revokedIds.toArray());
  }
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setParameters(""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (!grantedIds.isEmpty()) {
    sc.setParameters(""String_Node_Str"",grantedIds.toArray());
  }
}",0.8547418967587035
106102,"@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledViewEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria){
}","@Override public void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledEntity> sc,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds){
}",0.9012345679012346
106103,"@Override public ConfigKey<?>[] getConfigKeys(){
  return new ConfigKey<?>[]{ClusterDeltaSyncInterval,StartRetry,VmDestroyForcestop,VmOpCancelInterval,VmOpCleanupInterval,VmOpCleanupWait,VmOpLockStateRetry,VmOpWaitInterval};
}","@Override public ConfigKey<?>[] getConfigKeys(){
  return new ConfigKey<?>[]{ClusterDeltaSyncInterval,StartRetry,VmDestroyForcestop,VmOpCancelInterval,VmOpCleanupInterval,VmOpCleanupWait,VmOpLockStateRetry,VmOpWaitInterval,ExecuteInSequence};
}",0.9617021276595744
106104,"@Inject public void setStoragePoolAllocators(List<StoragePoolAllocator> storagePoolAllocators){
  this._storagePoolAllocators=storagePoolAllocators;
}","@Inject public void setStoragePoolAllocators(List<StoragePoolAllocator> storagePoolAllocators){
  _storagePoolAllocators=storagePoolAllocators;
}",0.9830508474576272
106105,"public Command cleanup(String vmName){
  return new StopCommand(vmName,getExecuteInSequence());
}","public Command cleanup(String vmName){
  return new StopCommand(vmName,ExecuteInSequence.value());
}",0.9543147208121828
106106,"@Override public void advanceStart(String vmUuid,Map<VirtualMachineProfile.Param,Object> params,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  CallContext cctxt=CallContext.current();
  Account account=cctxt.getCallingAccount();
  User caller=cctxt.getCallingUser();
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  Ternary<VMInstanceVO,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return;
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  VMInstanceVO startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getId(),vm.getServiceOfferingId());
  VirtualMachineTemplate template=_entityMgr.findById(VirtualMachineTemplate.class,vm.getTemplateId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm.getDataCenterId() + ""String_Node_Str""+ vm.getPodIdToDeployIn());
  }
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodIdToDeployIn(),null,null,null,null,ctx);
  if (planToDeploy != null && planToDeploy.getDataCenterId() != 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + planToDeploy.getDataCenterId() + ""String_Node_Str""+ planToDeploy.getPodId()+ ""String_Node_Str""+ planToDeploy.getClusterId()+ ""String_Node_Str""+ planToDeploy.getHostId()+ ""String_Node_Str""+ planToDeploy.getPoolId());
    }
    plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),planToDeploy.getPoolId(),planToDeploy.getPhysicalNetworkId(),ctx);
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  ExcludeList avoids=null;
  try {
    Journal journal=start.second().getJournal();
    if (planToDeploy != null) {
      avoids=planToDeploy.getAvoids();
    }
    if (avoids == null) {
      avoids=new ExcludeList();
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + avoids.getPodsToAvoid() + ""String_Node_Str""+ avoids.getClustersToAvoid()+ ""String_Node_Str""+ avoids.getHostsToAvoid());
    }
    boolean planChangedByVolume=false;
    boolean reuseVolume=true;
    DataCenterDeployment originalPlan=plan;
    int retry=StartRetry.value();
    while (retry-- != 0) {
      if (reuseVolume) {
        List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
        for (        VolumeVO vol : vols) {
          Long volTemplateId=vol.getTemplateId();
          if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
            }
            continue;
          }
          StoragePool pool=(StoragePool)dataStoreMgr.getPrimaryDataStore(vol.getPoolId());
          if (!pool.isInMaintenance()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"");
            }
            long rootVolDcId=pool.getDataCenterId();
            Long rootVolPodId=pool.getPodId();
            Long rootVolClusterId=pool.getClusterId();
            if (planToDeploy != null && planToDeploy.getDataCenterId() != 0) {
              Long clusterIdSpecified=planToDeploy.getClusterId();
              if (clusterIdSpecified != null && rootVolClusterId != null) {
                if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                  }
                  throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
                }
              }
              plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId(),null,ctx);
            }
 else {
              plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId(),null,ctx);
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
              }
              planChangedByVolume=true;
            }
          }
        }
      }
      VirtualMachineProfileImpl vmProfile=new VirtualMachineProfileImpl(vm,template,offering,account,params);
      DeployDestination dest=null;
      try {
        dest=_dpMgr.planDeployment(vmProfile,plan,avoids);
      }
 catch (      AffinityConflictException e2) {
        s_logger.warn(""String_Node_Str"",e2);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      if (dest == null) {
        if (planChangedByVolume) {
          plan=originalPlan;
          planChangedByVolume=false;
          reuseVolume=false;
          continue;
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId(),areAffinityGroupsAssociated(vmProfile));
      }
      if (dest != null) {
        avoids.addHost(dest.getHost().getId());
        journal.record(""String_Node_Str"",vmProfile,dest);
      }
      long destHostId=dest.getHost().getId();
      vm.setPodId(dest.getPod().getId());
      Long cluster_id=dest.getCluster().getId();
      ClusterDetailsVO cluster_detail_cpu=_clusterDetailsDao.findDetail(cluster_id,""String_Node_Str"");
      ClusterDetailsVO cluster_detail_ram=_clusterDetailsDao.findDetail(cluster_id,""String_Node_Str"");
      if (_uservmDetailsDao.findDetail(vm.getId(),""String_Node_Str"") == null && ((Float.parseFloat(cluster_detail_cpu.getValue()) > 1f || Float.parseFloat(cluster_detail_ram.getValue()) > 1f))) {
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_cpu.getValue());
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_ram.getValue());
      }
 else       if (_uservmDetailsDao.findDetail(vm.getId(),""String_Node_Str"") != null) {
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_cpu.getValue());
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_ram.getValue());
      }
      vmProfile.setCpuOvercommitRatio(Float.parseFloat(cluster_detail_cpu.getValue()));
      vmProfile.setMemoryOvercommitRatio(Float.parseFloat(cluster_detail_ram.getValue()));
      StartAnswer startAnswer=null;
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm.getPodIdToDeployIn());
        }
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          volumeMgr.prepare(vmProfile,dest);
        }
        if (!reuseVolume) {
          reuseVolume=true;
        }
        Commands cmds=null;
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        handlePath(vmTO.getDisks(),vm.getHypervisorType());
        cmds=new Commands(Command.OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO,dest.getHost(),getExecuteInSequence()));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          handlePath(vmTO.getDisks(),startAnswer.getIqnToPath());
          String host_guid=startAnswer.getHost_guid();
          if (host_guid != null) {
            HostVO finalHost=_resourceMgr.findHostByGuid(host_guid);
            if (finalHost == null) {
              throw new CloudRuntimeException(""String_Node_Str"" + host_guid + ""String_Node_Str"");
            }
            destHostId=finalHost.getId();
          }
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            syncDiskChainChange(startAnswer);
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm,getExecuteInSequence());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer != null) {
              String hypervisortoolsversion=answer.getHypervisorToolsVersion();
              if (hypervisortoolsversion != null) {
                if (vm.getType() == VirtualMachine.Type.User) {
                  UserVmVO userVm=_userVmDao.findById(vm.getId());
                  _userVmDao.loadDetails(userVm);
                  userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
                  _userVmDao.saveDetails(userVm);
                }
              }
            }
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
            throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"" + e.getMessage(),destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          Step prevStep=work.getStep();
          _workDao.updateStep(work,Step.Release);
          if ((prevStep == Step.Started || prevStep == Step.Starting) && (startAnswer != null && startAnswer.getResult())) {
            cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false);
          }
 else {
            cleanup(vmGuru,vmProfile,work,Event.OperationFailed,true);
          }
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
    if (planToDeploy != null) {
      planToDeploy.setAvoids(avoids);
    }
  }
  if (startedVm == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getUuid()+ ""String_Node_Str"");
  }
}","@Override public void advanceStart(String vmUuid,Map<VirtualMachineProfile.Param,Object> params,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  CallContext cctxt=CallContext.current();
  Account account=cctxt.getCallingAccount();
  User caller=cctxt.getCallingUser();
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  Ternary<VMInstanceVO,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return;
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  VMInstanceVO startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getId(),vm.getServiceOfferingId());
  VirtualMachineTemplate template=_entityMgr.findById(VirtualMachineTemplate.class,vm.getTemplateId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm.getDataCenterId() + ""String_Node_Str""+ vm.getPodIdToDeployIn());
  }
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodIdToDeployIn(),null,null,null,null,ctx);
  if (planToDeploy != null && planToDeploy.getDataCenterId() != 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + planToDeploy.getDataCenterId() + ""String_Node_Str""+ planToDeploy.getPodId()+ ""String_Node_Str""+ planToDeploy.getClusterId()+ ""String_Node_Str""+ planToDeploy.getHostId()+ ""String_Node_Str""+ planToDeploy.getPoolId());
    }
    plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),planToDeploy.getPoolId(),planToDeploy.getPhysicalNetworkId(),ctx);
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  ExcludeList avoids=null;
  try {
    Journal journal=start.second().getJournal();
    if (planToDeploy != null) {
      avoids=planToDeploy.getAvoids();
    }
    if (avoids == null) {
      avoids=new ExcludeList();
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + avoids.getPodsToAvoid() + ""String_Node_Str""+ avoids.getClustersToAvoid()+ ""String_Node_Str""+ avoids.getHostsToAvoid());
    }
    boolean planChangedByVolume=false;
    boolean reuseVolume=true;
    DataCenterDeployment originalPlan=plan;
    int retry=StartRetry.value();
    while (retry-- != 0) {
      if (reuseVolume) {
        List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
        for (        VolumeVO vol : vols) {
          Long volTemplateId=vol.getTemplateId();
          if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
            }
            continue;
          }
          StoragePool pool=(StoragePool)dataStoreMgr.getPrimaryDataStore(vol.getPoolId());
          if (!pool.isInMaintenance()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"");
            }
            long rootVolDcId=pool.getDataCenterId();
            Long rootVolPodId=pool.getPodId();
            Long rootVolClusterId=pool.getClusterId();
            if (planToDeploy != null && planToDeploy.getDataCenterId() != 0) {
              Long clusterIdSpecified=planToDeploy.getClusterId();
              if (clusterIdSpecified != null && rootVolClusterId != null) {
                if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                  }
                  throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
                }
              }
              plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId(),null,ctx);
            }
 else {
              plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId(),null,ctx);
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
              }
              planChangedByVolume=true;
            }
          }
        }
      }
      VirtualMachineProfileImpl vmProfile=new VirtualMachineProfileImpl(vm,template,offering,account,params);
      DeployDestination dest=null;
      try {
        dest=_dpMgr.planDeployment(vmProfile,plan,avoids);
      }
 catch (      AffinityConflictException e2) {
        s_logger.warn(""String_Node_Str"",e2);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      if (dest == null) {
        if (planChangedByVolume) {
          plan=originalPlan;
          planChangedByVolume=false;
          reuseVolume=false;
          continue;
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId(),areAffinityGroupsAssociated(vmProfile));
      }
      if (dest != null) {
        avoids.addHost(dest.getHost().getId());
        journal.record(""String_Node_Str"",vmProfile,dest);
      }
      long destHostId=dest.getHost().getId();
      vm.setPodId(dest.getPod().getId());
      Long cluster_id=dest.getCluster().getId();
      ClusterDetailsVO cluster_detail_cpu=_clusterDetailsDao.findDetail(cluster_id,""String_Node_Str"");
      ClusterDetailsVO cluster_detail_ram=_clusterDetailsDao.findDetail(cluster_id,""String_Node_Str"");
      if (_uservmDetailsDao.findDetail(vm.getId(),""String_Node_Str"") == null && ((Float.parseFloat(cluster_detail_cpu.getValue()) > 1f || Float.parseFloat(cluster_detail_ram.getValue()) > 1f))) {
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_cpu.getValue());
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_ram.getValue());
      }
 else       if (_uservmDetailsDao.findDetail(vm.getId(),""String_Node_Str"") != null) {
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_cpu.getValue());
        _uservmDetailsDao.addDetail(vm.getId(),""String_Node_Str"",cluster_detail_ram.getValue());
      }
      vmProfile.setCpuOvercommitRatio(Float.parseFloat(cluster_detail_cpu.getValue()));
      vmProfile.setMemoryOvercommitRatio(Float.parseFloat(cluster_detail_ram.getValue()));
      StartAnswer startAnswer=null;
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm.getPodIdToDeployIn());
        }
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          volumeMgr.prepare(vmProfile,dest);
        }
        if (!reuseVolume) {
          reuseVolume=true;
        }
        Commands cmds=null;
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        handlePath(vmTO.getDisks(),vm.getHypervisorType());
        cmds=new Commands(Command.OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO,dest.getHost(),ExecuteInSequence.value()));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          handlePath(vmTO.getDisks(),startAnswer.getIqnToPath());
          String host_guid=startAnswer.getHost_guid();
          if (host_guid != null) {
            HostVO finalHost=_resourceMgr.findHostByGuid(host_guid);
            if (finalHost == null) {
              throw new CloudRuntimeException(""String_Node_Str"" + host_guid + ""String_Node_Str"");
            }
            destHostId=finalHost.getId();
          }
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            syncDiskChainChange(startAnswer);
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm,ExecuteInSequence.value());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer != null) {
              String hypervisortoolsversion=answer.getHypervisorToolsVersion();
              if (hypervisortoolsversion != null) {
                if (vm.getType() == VirtualMachine.Type.User) {
                  UserVmVO userVm=_userVmDao.findById(vm.getId());
                  _userVmDao.loadDetails(userVm);
                  userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
                  _userVmDao.saveDetails(userVm);
                }
              }
            }
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
            throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"" + e.getMessage(),destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          Step prevStep=work.getStep();
          _workDao.updateStep(work,Step.Release);
          if ((prevStep == Step.Started || prevStep == Step.Starting) && (startAnswer != null && startAnswer.getResult())) {
            cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false);
          }
 else {
            cleanup(vmGuru,vmProfile,work,Event.OperationFailed,true);
          }
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
    if (planToDeploy != null) {
      planToDeploy.setAvoids(avoids);
    }
  }
  if (startedVm == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getUuid()+ ""String_Node_Str"");
  }
}",0.9992931196983976
106107,"private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if (state == State.Starting || state == State.Migrating) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
 else     if (state == State.Stopping) {
      doCleanup=true;
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,getExecuteInSequence());
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      String hypervisortoolsversion=answer.getHypervisorToolsVersion();
      if (hypervisortoolsversion != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    stopped=answer.getResult();
    if (!stopped) {
      throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
    }
 else {
      Integer timeoffset=answer.getTimeOffset();
      if (timeoffset != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",timeoffset.toString());
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    vmGuru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}","private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if (state == State.Starting || state == State.Migrating) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
 else     if (state == State.Stopping) {
      doCleanup=true;
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,ExecuteInSequence.value());
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      String hypervisortoolsversion=answer.getHypervisorToolsVersion();
      if (hypervisortoolsversion != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    stopped=answer.getResult();
    if (!stopped) {
      throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
    }
 else {
      Integer timeoffset=answer.getTimeOffset();
      if (timeoffset != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",timeoffset.toString());
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    vmGuru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}",0.999293397189291
106108,"protected boolean sendStop(VirtualMachineGuru guru,VirtualMachineProfile profile,boolean force){
  VirtualMachine vm=profile.getVirtualMachine();
  StopCommand stop=new StopCommand(vm,getExecuteInSequence());
  try {
    StopAnswer answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      String hypervisortoolsversion=answer.getHypervisorToolsVersion();
      if (hypervisortoolsversion != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + answer.getDetails());
      return false;
    }
    guru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}","protected boolean sendStop(VirtualMachineGuru guru,VirtualMachineProfile profile,boolean force){
  VirtualMachine vm=profile.getVirtualMachine();
  StopCommand stop=new StopCommand(vm,ExecuteInSequence.value());
  try {
    StopAnswer answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      String hypervisortoolsversion=answer.getHypervisorToolsVersion();
      if (hypervisortoolsversion != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",hypervisortoolsversion);
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + answer.getDetails());
      return false;
    }
    guru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}",0.9958391123439668
106109,"@DB protected Answer createTemplateFromSnapshot(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CreatePrivateTemplateFromSnapshotWait.toString());
  int _createprivatetemplatefromsnapshotwait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreatePrivateTemplateFromSnapshotWait.getDefaultValue()));
  boolean needCache=false;
  if (needCacheStorage(srcData,destData)) {
    needCache=true;
    SnapshotInfo snapshot=(SnapshotInfo)srcData;
    srcData=cacheSnapshotChain(snapshot);
  }
  EndPoint ep=null;
  if (srcData.getDataStore().getRole() == DataStoreRole.Primary) {
    ep=selector.select(destData);
  }
 else {
    ep=selector.select(srcData,destData);
  }
  CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_createprivatetemplatefromsnapshotwait,_mgmtServer.getExecuteInSequence());
  Answer answer=null;
  if (ep == null) {
    String errMsg=""String_Node_Str"";
    s_logger.error(errMsg);
    answer=new Answer(cmd,false,errMsg);
  }
 else {
    answer=ep.sendMessage(cmd);
  }
  if (needCache && srcData != null) {
    cacheMgr.releaseCacheObject(srcData);
  }
  return answer;
}","@DB protected Answer createTemplateFromSnapshot(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CreatePrivateTemplateFromSnapshotWait.toString());
  int _createprivatetemplatefromsnapshotwait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreatePrivateTemplateFromSnapshotWait.getDefaultValue()));
  boolean needCache=false;
  if (needCacheStorage(srcData,destData)) {
    needCache=true;
    SnapshotInfo snapshot=(SnapshotInfo)srcData;
    srcData=cacheSnapshotChain(snapshot);
  }
  EndPoint ep=null;
  if (srcData.getDataStore().getRole() == DataStoreRole.Primary) {
    ep=selector.select(destData);
  }
 else {
    ep=selector.select(srcData,destData);
  }
  CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_createprivatetemplatefromsnapshotwait,VirtualMachineManager.ExecuteInSequence.value());
  Answer answer=null;
  if (ep == null) {
    String errMsg=""String_Node_Str"";
    s_logger.error(errMsg);
    answer=new Answer(cmd,false,errMsg);
  }
 else {
    answer=ep.sendMessage(cmd);
  }
  if (needCache && srcData != null) {
    cacheMgr.releaseCacheObject(srcData);
  }
  return answer;
}",0.9812799303439268
106110,"protected Answer copyVolumeFromSnapshot(DataObject snapObj,DataObject volObj){
  SnapshotInfo snapshot=(SnapshotInfo)snapObj;
  StoragePool pool=(StoragePool)volObj.getDataStore();
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  DataStore store=snapObj.getDataStore();
  DataStoreTO storTO=store.getTO();
  DataObject srcData=snapObj;
  try {
    if (!(storTO instanceof NfsTO)) {
      srcData=cacheSnapshotChain(snapshot);
    }
    String value=configDao.getValue(Config.CreateVolumeFromSnapshotWait.toString());
    int _createVolumeFromSnapshotWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreateVolumeFromSnapshotWait.getDefaultValue()));
    EndPoint ep=null;
    if (srcData.getDataStore().getRole() == DataStoreRole.Primary) {
      ep=selector.select(volObj);
    }
 else {
      ep=selector.select(snapObj,volObj);
    }
    CopyCommand cmd=new CopyCommand(srcData.getTO(),volObj.getTO(),_createVolumeFromSnapshotWait,_mgmtServer.getExecuteInSequence());
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.error(basicErrMsg,e);
    throw new CloudRuntimeException(basicErrMsg);
  }
 finally {
    if (!(storTO instanceof NfsTO)) {
      releaseSnapshotCacheChain((SnapshotInfo)srcData);
    }
  }
}","protected Answer copyVolumeFromSnapshot(DataObject snapObj,DataObject volObj){
  SnapshotInfo snapshot=(SnapshotInfo)snapObj;
  StoragePool pool=(StoragePool)volObj.getDataStore();
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  DataStore store=snapObj.getDataStore();
  DataStoreTO storTO=store.getTO();
  DataObject srcData=snapObj;
  try {
    if (!(storTO instanceof NfsTO)) {
      srcData=cacheSnapshotChain(snapshot);
    }
    String value=configDao.getValue(Config.CreateVolumeFromSnapshotWait.toString());
    int _createVolumeFromSnapshotWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreateVolumeFromSnapshotWait.getDefaultValue()));
    EndPoint ep=null;
    if (srcData.getDataStore().getRole() == DataStoreRole.Primary) {
      ep=selector.select(volObj);
    }
 else {
      ep=selector.select(snapObj,volObj);
    }
    CopyCommand cmd=new CopyCommand(srcData.getTO(),volObj.getTO(),_createVolumeFromSnapshotWait,VirtualMachineManager.ExecuteInSequence.value());
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.error(basicErrMsg,e);
    throw new CloudRuntimeException(basicErrMsg);
  }
 finally {
    if (!(storTO instanceof NfsTO)) {
      releaseSnapshotCacheChain((SnapshotInfo)srcData);
    }
  }
}",0.98555592878737
106111,"protected Answer cloneVolume(DataObject template,DataObject volume){
  CopyCommand cmd=new CopyCommand(template.getTO(),volume.getTO(),0,_mgmtServer.getExecuteInSequence());
  try {
    EndPoint ep=selector.select(volume.getDataStore());
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","protected Answer cloneVolume(DataObject template,DataObject volume){
  CopyCommand cmd=new CopyCommand(template.getTO(),volume.getTO(),0,VirtualMachineManager.ExecuteInSequence.value());
  try {
    EndPoint ep=selector.select(volume.getDataStore());
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9646672144617912
106112,"protected Answer copyVolumeBetweenPools(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CopyVolumeWait.key());
  int _copyvolumewait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));
  Scope destScope=getZoneScope(destData.getDataStore().getScope());
  DataStore cacheStore=cacheMgr.getCacheStorage(destScope);
  if (cacheStore == null) {
    ImageStoreEntity imageStore=(ImageStoreEntity)dataStoreMgr.getImageStore(destScope.getScopeId());
    if (!imageStore.getProtocol().equalsIgnoreCase(""String_Node_Str"") && !imageStore.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    DataObject objOnImageStore=imageStore.create(srcData);
    objOnImageStore.processEvent(Event.CreateOnlyRequested);
    Answer answer=copyObject(srcData,objOnImageStore);
    if (answer == null || !answer.getResult()) {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
      objOnImageStore.processEvent(Event.OperationFailed);
      imageStore.delete(objOnImageStore);
      return answer;
    }
    objOnImageStore.processEvent(Event.OperationSuccessed,answer);
    objOnImageStore.processEvent(Event.CopyingRequested);
    CopyCommand cmd=new CopyCommand(objOnImageStore.getTO(),destData.getTO(),_copyvolumewait,_mgmtServer.getExecuteInSequence());
    EndPoint ep=selector.select(objOnImageStore,destData);
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (answer == null || !answer.getResult()) {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
      objOnImageStore.processEvent(Event.OperationFailed);
      imageStore.delete(objOnImageStore);
      return answer;
    }
    objOnImageStore.processEvent(Event.OperationSuccessed);
    imageStore.delete(objOnImageStore);
    return answer;
  }
 else {
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destScope);
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_copyvolumewait,_mgmtServer.getExecuteInSequence());
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    return answer;
  }
}","protected Answer copyVolumeBetweenPools(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CopyVolumeWait.key());
  int _copyvolumewait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));
  Scope destScope=getZoneScope(destData.getDataStore().getScope());
  DataStore cacheStore=cacheMgr.getCacheStorage(destScope);
  if (cacheStore == null) {
    ImageStoreEntity imageStore=(ImageStoreEntity)dataStoreMgr.getImageStore(destScope.getScopeId());
    if (!imageStore.getProtocol().equalsIgnoreCase(""String_Node_Str"") && !imageStore.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    DataObject objOnImageStore=imageStore.create(srcData);
    objOnImageStore.processEvent(Event.CreateOnlyRequested);
    Answer answer=copyObject(srcData,objOnImageStore);
    if (answer == null || !answer.getResult()) {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
      objOnImageStore.processEvent(Event.OperationFailed);
      imageStore.delete(objOnImageStore);
      return answer;
    }
    objOnImageStore.processEvent(Event.OperationSuccessed,answer);
    objOnImageStore.processEvent(Event.CopyingRequested);
    CopyCommand cmd=new CopyCommand(objOnImageStore.getTO(),destData.getTO(),_copyvolumewait,VirtualMachineManager.ExecuteInSequence.value());
    EndPoint ep=selector.select(objOnImageStore,destData);
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (answer == null || !answer.getResult()) {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
      objOnImageStore.processEvent(Event.OperationFailed);
      imageStore.delete(objOnImageStore);
      return answer;
    }
    objOnImageStore.processEvent(Event.OperationSuccessed);
    imageStore.delete(objOnImageStore);
    return answer;
  }
 else {
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destScope);
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_copyvolumewait,VirtualMachineManager.ExecuteInSequence.value());
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=null;
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    return answer;
  }
}",0.9838224228743416
106113,"protected Answer copySnapshot(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.BackupSnapshotWait.toString());
  int _backupsnapshotwait=NumbersUtil.parseInt(value,Integer.parseInt(Config.BackupSnapshotWait.getDefaultValue()));
  DataObject cacheData=null;
  Answer answer=null;
  try {
    if (needCacheStorage(srcData,destData)) {
      Scope selectedScope=pickCacheScopeForCopy(srcData,destData);
      cacheData=cacheMgr.getCacheObject(srcData,selectedScope);
      CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_backupsnapshotwait,_mgmtServer.getExecuteInSequence());
      cmd.setCacheTO(cacheData.getTO());
      EndPoint ep=selector.select(srcData,destData);
      if (ep == null) {
        String errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        answer=new Answer(cmd,false,errMsg);
      }
 else {
        answer=ep.sendMessage(cmd);
      }
    }
 else {
      CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_backupsnapshotwait,_mgmtServer.getExecuteInSequence());
      EndPoint ep=selector.select(srcData,destData);
      if (ep == null) {
        String errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        answer=new Answer(cmd,false,errMsg);
      }
 else {
        answer=ep.sendMessage(cmd);
      }
    }
    if (answer == null || !answer.getResult()) {
      if (cacheData != null) {
        cacheMgr.deleteCacheObject(cacheData);
      }
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    throw new CloudRuntimeException(e.toString());
  }
}","protected Answer copySnapshot(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.BackupSnapshotWait.toString());
  int _backupsnapshotwait=NumbersUtil.parseInt(value,Integer.parseInt(Config.BackupSnapshotWait.getDefaultValue()));
  DataObject cacheData=null;
  Answer answer=null;
  try {
    if (needCacheStorage(srcData,destData)) {
      Scope selectedScope=pickCacheScopeForCopy(srcData,destData);
      cacheData=cacheMgr.getCacheObject(srcData,selectedScope);
      CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_backupsnapshotwait,VirtualMachineManager.ExecuteInSequence.value());
      cmd.setCacheTO(cacheData.getTO());
      EndPoint ep=selector.select(srcData,destData);
      if (ep == null) {
        String errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        answer=new Answer(cmd,false,errMsg);
      }
 else {
        answer=ep.sendMessage(cmd);
      }
    }
 else {
      CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_backupsnapshotwait,VirtualMachineManager.ExecuteInSequence.value());
      EndPoint ep=selector.select(srcData,destData);
      if (ep == null) {
        String errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        answer=new Answer(cmd,false,errMsg);
      }
 else {
        answer=ep.sendMessage(cmd);
      }
    }
    if (answer == null || !answer.getResult()) {
      if (cacheData != null) {
        cacheMgr.deleteCacheObject(cacheData);
      }
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    throw new CloudRuntimeException(e.toString());
  }
}",0.9749417249417248
106114,"protected Answer copyObject(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  int _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  Answer answer=null;
  DataObject cacheData=null;
  DataObject srcForCopy=srcData;
  try {
    if (needCacheStorage(srcData,destData)) {
      Scope destScope=pickCacheScopeForCopy(srcData,destData);
      srcForCopy=cacheData=cacheMgr.createCacheObject(srcData,destScope);
    }
    CopyCommand cmd=new CopyCommand(srcForCopy.getTO(),destData.getTO(),_primaryStorageDownloadWait,_mgmtServer.getExecuteInSequence());
    EndPoint ep=selector.select(srcForCopy,destData);
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (cacheData != null) {
      if (srcData.getType() == DataObjectType.VOLUME && destData.getType() == DataObjectType.VOLUME) {
        cacheMgr.deleteCacheObject(srcForCopy);
      }
 else {
        if ((answer == null || !answer.getResult()) && srcForCopy.getRefCount() < 2) {
          cacheMgr.deleteCacheObject(srcForCopy);
        }
 else {
          cacheMgr.releaseCacheObject(srcForCopy);
        }
      }
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    throw new CloudRuntimeException(e.toString());
  }
}","protected Answer copyObject(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  int _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  Answer answer=null;
  DataObject cacheData=null;
  DataObject srcForCopy=srcData;
  try {
    if (needCacheStorage(srcData,destData)) {
      Scope destScope=pickCacheScopeForCopy(srcData,destData);
      srcForCopy=cacheData=cacheMgr.createCacheObject(srcData,destScope);
    }
    CopyCommand cmd=new CopyCommand(srcForCopy.getTO(),destData.getTO(),_primaryStorageDownloadWait,VirtualMachineManager.ExecuteInSequence.value());
    EndPoint ep=selector.select(srcForCopy,destData);
    if (ep == null) {
      String errMsg=""String_Node_Str"";
      s_logger.error(errMsg);
      answer=new Answer(cmd,false,errMsg);
    }
 else {
      answer=ep.sendMessage(cmd);
    }
    if (cacheData != null) {
      if (srcData.getType() == DataObjectType.VOLUME && destData.getType() == DataObjectType.VOLUME) {
        cacheMgr.deleteCacheObject(srcForCopy);
      }
 else {
        if ((answer == null || !answer.getResult()) && srcForCopy.getRefCount() < 2) {
          cacheMgr.deleteCacheObject(srcForCopy);
        }
 else {
          cacheMgr.releaseCacheObject(srcForCopy);
        }
      }
    }
    return answer;
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    if (cacheData != null) {
      cacheMgr.deleteCacheObject(cacheData);
    }
    throw new CloudRuntimeException(e.toString());
  }
}",0.986566697906904
106115,"@Override @DB public void allocateDirectIp(final NicProfile nic,final DataCenter dc,final VirtualMachineProfile vm,final Network network,final String requestedIpv4,final String requestedIpv6) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientAddressCapacityException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws InsufficientAddressCapacityException {
      boolean ipv4=false;
      if (network.getGateway() != null) {
        if (nic.getIp4Address() == null) {
          ipv4=true;
          PublicIp ip=null;
          if (requestedIpv4 != null && vm.getType() == VirtualMachine.Type.DomainRouter) {
            Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
            if (placeholderNic != null) {
              IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),placeholderNic.getIp4Address());
              ip=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
              s_logger.debug(""String_Node_Str"" + placeholderNic.getIp4Address() + ""String_Node_Str""+ network);
            }
          }
          if (ip == null) {
            ip=assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.DirectAttached,network.getId(),requestedIpv4,false);
          }
          nic.setIp4Address(ip.getAddress().toString());
          nic.setGateway(ip.getGateway());
          nic.setNetmask(ip.getNetmask());
          nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
          nic.setBroadcastType(network.getBroadcastDomainType());
          nic.setBroadcastUri(network.getBroadcastUri());
          nic.setFormat(AddressFormat.Ip4);
          nic.setReservationId(String.valueOf(ip.getVlanTag()));
          nic.setMacAddress(ip.getMacAddress());
        }
        nic.setDns1(dc.getDns1());
        nic.setDns2(dc.getDns2());
      }
      if (network.getIp6Gateway() != null) {
        if (nic.getIp6Address() == null) {
          UserIpv6Address ip=_ipv6Mgr.assignDirectIp6Address(dc.getId(),vm.getOwner(),network.getId(),requestedIpv6);
          Vlan vlan=_vlanDao.findById(ip.getVlanId());
          nic.setIp6Address(ip.getAddress().toString());
          nic.setIp6Gateway(vlan.getIp6Gateway());
          nic.setIp6Cidr(vlan.getIp6Cidr());
          if (ipv4) {
            nic.setFormat(AddressFormat.DualStack);
          }
 else {
            nic.setIsolationUri(IsolationType.Vlan.toUri(vlan.getVlanTag()));
            nic.setBroadcastType(BroadcastDomainType.Vlan);
            nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlan.getVlanTag()));
            nic.setFormat(AddressFormat.Ip6);
            nic.setReservationId(String.valueOf(vlan.getVlanTag()));
            nic.setMacAddress(ip.getMacAddress());
          }
        }
        nic.setIp6Dns1(dc.getIp6Dns1());
        nic.setIp6Dns2(dc.getIp6Dns2());
      }
    }
  }
);
}","@Override @DB public void allocateDirectIp(final NicProfile nic,final DataCenter dc,final VirtualMachineProfile vm,final Network network,final String requestedIpv4,final String requestedIpv6) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientAddressCapacityException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws InsufficientAddressCapacityException {
      boolean ipv4=false;
      if (network.getGateway() != null) {
        if (nic.getIp4Address() == null) {
          ipv4=true;
          PublicIp ip=null;
          if (requestedIpv4 != null && vm.getType() == VirtualMachine.Type.DomainRouter) {
            Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
            if (placeholderNic != null) {
              IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),placeholderNic.getIp4Address());
              ip=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
              s_logger.debug(""String_Node_Str"" + placeholderNic.getIp4Address() + ""String_Node_Str""+ network);
            }
          }
          if (ip == null) {
            ip=assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.DirectAttached,network.getId(),requestedIpv4,false);
          }
          nic.setIp4Address(ip.getAddress().toString());
          nic.setGateway(ip.getGateway());
          nic.setNetmask(ip.getNetmask());
          nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
          nic.setBroadcastType(network.getBroadcastDomainType());
          if (network.getBroadcastUri() != null)           nic.setBroadcastUri(network.getBroadcastUri());
 else           nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
          nic.setFormat(AddressFormat.Ip4);
          nic.setReservationId(String.valueOf(ip.getVlanTag()));
          nic.setMacAddress(ip.getMacAddress());
        }
        nic.setDns1(dc.getDns1());
        nic.setDns2(dc.getDns2());
      }
      if (network.getIp6Gateway() != null) {
        if (nic.getIp6Address() == null) {
          UserIpv6Address ip=_ipv6Mgr.assignDirectIp6Address(dc.getId(),vm.getOwner(),network.getId(),requestedIpv6);
          Vlan vlan=_vlanDao.findById(ip.getVlanId());
          nic.setIp6Address(ip.getAddress().toString());
          nic.setIp6Gateway(vlan.getIp6Gateway());
          nic.setIp6Cidr(vlan.getIp6Cidr());
          if (ipv4) {
            nic.setFormat(AddressFormat.DualStack);
          }
 else {
            nic.setIsolationUri(IsolationType.Vlan.toUri(vlan.getVlanTag()));
            nic.setBroadcastType(BroadcastDomainType.Vlan);
            nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlan.getVlanTag()));
            nic.setFormat(AddressFormat.Ip6);
            nic.setReservationId(String.valueOf(vlan.getVlanTag()));
            nic.setMacAddress(ip.getMacAddress());
          }
        }
        nic.setIp6Dns1(dc.getIp6Dns1());
        nic.setIp6Dns2(dc.getIp6Dns2());
      }
    }
  }
);
}",0.9766242140899564
106116,"@Override public void doInTransactionWithoutResult(TransactionStatus status) throws InsufficientAddressCapacityException {
  boolean ipv4=false;
  if (network.getGateway() != null) {
    if (nic.getIp4Address() == null) {
      ipv4=true;
      PublicIp ip=null;
      if (requestedIpv4 != null && vm.getType() == VirtualMachine.Type.DomainRouter) {
        Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
        if (placeholderNic != null) {
          IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),placeholderNic.getIp4Address());
          ip=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
          s_logger.debug(""String_Node_Str"" + placeholderNic.getIp4Address() + ""String_Node_Str""+ network);
        }
      }
      if (ip == null) {
        ip=assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.DirectAttached,network.getId(),requestedIpv4,false);
      }
      nic.setIp4Address(ip.getAddress().toString());
      nic.setGateway(ip.getGateway());
      nic.setNetmask(ip.getNetmask());
      nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
      nic.setBroadcastType(network.getBroadcastDomainType());
      nic.setBroadcastUri(network.getBroadcastUri());
      nic.setFormat(AddressFormat.Ip4);
      nic.setReservationId(String.valueOf(ip.getVlanTag()));
      nic.setMacAddress(ip.getMacAddress());
    }
    nic.setDns1(dc.getDns1());
    nic.setDns2(dc.getDns2());
  }
  if (network.getIp6Gateway() != null) {
    if (nic.getIp6Address() == null) {
      UserIpv6Address ip=_ipv6Mgr.assignDirectIp6Address(dc.getId(),vm.getOwner(),network.getId(),requestedIpv6);
      Vlan vlan=_vlanDao.findById(ip.getVlanId());
      nic.setIp6Address(ip.getAddress().toString());
      nic.setIp6Gateway(vlan.getIp6Gateway());
      nic.setIp6Cidr(vlan.getIp6Cidr());
      if (ipv4) {
        nic.setFormat(AddressFormat.DualStack);
      }
 else {
        nic.setIsolationUri(IsolationType.Vlan.toUri(vlan.getVlanTag()));
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlan.getVlanTag()));
        nic.setFormat(AddressFormat.Ip6);
        nic.setReservationId(String.valueOf(vlan.getVlanTag()));
        nic.setMacAddress(ip.getMacAddress());
      }
    }
    nic.setIp6Dns1(dc.getIp6Dns1());
    nic.setIp6Dns2(dc.getIp6Dns2());
  }
}","@Override public void doInTransactionWithoutResult(TransactionStatus status) throws InsufficientAddressCapacityException {
  boolean ipv4=false;
  if (network.getGateway() != null) {
    if (nic.getIp4Address() == null) {
      ipv4=true;
      PublicIp ip=null;
      if (requestedIpv4 != null && vm.getType() == VirtualMachine.Type.DomainRouter) {
        Nic placeholderNic=_networkModel.getPlaceholderNicForRouter(network,null);
        if (placeholderNic != null) {
          IPAddressVO userIp=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),placeholderNic.getIp4Address());
          ip=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
          s_logger.debug(""String_Node_Str"" + placeholderNic.getIp4Address() + ""String_Node_Str""+ network);
        }
      }
      if (ip == null) {
        ip=assignPublicIpAddress(dc.getId(),null,vm.getOwner(),VlanType.DirectAttached,network.getId(),requestedIpv4,false);
      }
      nic.setIp4Address(ip.getAddress().toString());
      nic.setGateway(ip.getGateway());
      nic.setNetmask(ip.getNetmask());
      nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
      nic.setBroadcastType(network.getBroadcastDomainType());
      if (network.getBroadcastUri() != null)       nic.setBroadcastUri(network.getBroadcastUri());
 else       nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
      nic.setFormat(AddressFormat.Ip4);
      nic.setReservationId(String.valueOf(ip.getVlanTag()));
      nic.setMacAddress(ip.getMacAddress());
    }
    nic.setDns1(dc.getDns1());
    nic.setDns2(dc.getDns2());
  }
  if (network.getIp6Gateway() != null) {
    if (nic.getIp6Address() == null) {
      UserIpv6Address ip=_ipv6Mgr.assignDirectIp6Address(dc.getId(),vm.getOwner(),network.getId(),requestedIpv6);
      Vlan vlan=_vlanDao.findById(ip.getVlanId());
      nic.setIp6Address(ip.getAddress().toString());
      nic.setIp6Gateway(vlan.getIp6Gateway());
      nic.setIp6Cidr(vlan.getIp6Cidr());
      if (ipv4) {
        nic.setFormat(AddressFormat.DualStack);
      }
 else {
        nic.setIsolationUri(IsolationType.Vlan.toUri(vlan.getVlanTag()));
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlan.getVlanTag()));
        nic.setFormat(AddressFormat.Ip6);
        nic.setReservationId(String.valueOf(vlan.getVlanTag()));
        nic.setMacAddress(ip.getMacAddress());
      }
    }
    nic.setIp6Dns1(dc.getIp6Dns1());
    nic.setIp6Dns2(dc.getIp6Dns2());
  }
}",0.9724512366780615
106117,"@Override public void execute(){
  try {
    UserVm userVm=_userVmService.moveVMToUser(this);
    if (userVm == null) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",userVm).get(0);
    response.setResponseName(DeployVMCmd.getResultObjectName());
    this.setResponseObject(response);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + e.getMessage());
  }
}","@Override public void execute(){
  try {
    UserVm userVm=_userVmService.moveVMToUser(this);
    if (userVm == null) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",userVm).get(0);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + e.getMessage());
  }
}",0.9173333333333332
106118,"public MonitoringServiceDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDefault(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getProcessname(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServiceName(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServicePath(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPidFile(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
}","public MonitoringServiceDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isDefaultService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getProcessname(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServiceName(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServicePath(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPidFile(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
}",0.9918367346938776
106119,"private void finalizeMonitorServiceOnStrat(Commands cmds,DomainRouterVO router,Provider provider,long networkId){
  NetworkVO network=_networkDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  List<MonitoringServiceVO> services=new ArrayList<MonitoringServiceVO>();
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,Provider.VirtualRouter) || _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dns,Provider.VirtualRouter)) {
    MonitoringServiceVO dhcpService=_monitorServiceDao.getServiceByName(MonitoringService.Service.Dhcp.toString());
    if (dhcpService != null) {
      services.add(dhcpService);
    }
  }
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Lb,Provider.VirtualRouter)) {
    MonitoringServiceVO lbService=_monitorServiceDao.getServiceByName(MonitoringService.Service.LoadBalancing.toString());
    if (lbService != null) {
      services.add(lbService);
    }
  }
  List<MonitoringServiceVO> defaultServices=_monitorServiceDao.listDefaultServices(true);
  services.addAll(defaultServices);
  List<MonitorServiceTO> servicesTO=new ArrayList<MonitorServiceTO>();
  for (  MonitoringServiceVO service : services) {
    MonitorServiceTO serviceTO=new MonitorServiceTO(service.getService(),service.getProcessname(),service.getServiceName(),service.getServicePath(),service.getPidFile(),service.getDefault());
    servicesTO.add(serviceTO);
  }
  SetMonitorServiceCommand command=new SetMonitorServiceCommand(servicesTO);
  command.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(networkId,router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  cmds.addCommand(""String_Node_Str"",command);
}","private void finalizeMonitorServiceOnStrat(Commands cmds,DomainRouterVO router,Provider provider,long networkId){
  NetworkVO network=_networkDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  List<MonitoringServiceVO> services=new ArrayList<MonitoringServiceVO>();
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,Provider.VirtualRouter) || _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dns,Provider.VirtualRouter)) {
    MonitoringServiceVO dhcpService=_monitorServiceDao.getServiceByName(MonitoringService.Service.Dhcp.toString());
    if (dhcpService != null) {
      services.add(dhcpService);
    }
  }
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Lb,Provider.VirtualRouter)) {
    MonitoringServiceVO lbService=_monitorServiceDao.getServiceByName(MonitoringService.Service.LoadBalancing.toString());
    if (lbService != null) {
      services.add(lbService);
    }
  }
  List<MonitoringServiceVO> defaultServices=_monitorServiceDao.listDefaultServices(true);
  services.addAll(defaultServices);
  List<MonitorServiceTO> servicesTO=new ArrayList<MonitorServiceTO>();
  for (  MonitoringServiceVO service : services) {
    MonitorServiceTO serviceTO=new MonitorServiceTO(service.getService(),service.getProcessname(),service.getServiceName(),service.getServicePath(),service.getPidFile(),service.isDefaultService());
    servicesTO.add(serviceTO);
  }
  SetMonitorServiceCommand command=new SetMonitorServiceCommand(servicesTO);
  command.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(networkId,router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  cmds.addCommand(""String_Node_Str"",command);
}",0.996856993190152
106120,"@Override public boolean equals(Object other){
  try {
    ModelReference rhs=(ModelReference)other;
    return compareTo(rhs) == 0;
  }
 catch (  ClassCastException ex) {
  }
  return false;
}","@Override public boolean equals(Object other){
  if (this == other)   return true;
  if (other == null)   return false;
  try {
    ModelReference rhs=(ModelReference)other;
    return compareTo(rhs) == 0;
  }
 catch (  ClassCastException ex) {
  }
  return false;
}",0.840958605664488
106121,"@Override public boolean equals(Object rhs){
  ModelObject other;
  try {
    other=(ModelObject)rhs;
  }
 catch (  ClassCastException ex) {
    return false;
  }
  return compareTo(other) == 0;
}","@Override public boolean equals(Object rhs){
  if (this == rhs)   return true;
  if (rhs == null)   return false;
  ModelObject other;
  try {
    other=(ModelObject)rhs;
  }
 catch (  ClassCastException ex) {
    return false;
  }
  return compareTo(other) == 0;
}",0.8503253796095445
106122,"@Override @DB public boolean destroyNetwork(long networkId,final ReservationContext context){
  final Account callerAccount=context.getAccount();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  List<UserVmVO> userVms=_userVmDao.listByNetworkIdAndStates(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null)) {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
      return false;
    }
  }
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    _networksDao.changeActiveNicsBy(networkId,(-1 * nicCount));
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (zone.getNetworkType() == NetworkType.Basic) {
    List<VMInstanceVO> systemVms=_vmDao.listNonRemovedVmsByTypeAndNetwork(network.getId(),Type.ConsoleProxy,Type.SecondaryStorageVm);
    if (systemVms != null && !systemVms.isEmpty()) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
  }
  shutdownNetwork(networkId,context,false);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  if (!cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId())) {
    s_logger.warn(""String_Node_Str"" + networkId + ""String_Node_Str"");
    return false;
  }
  List<Provider> providersToDestroy=getNetworkProviders(network.getId());
  for (  NetworkElement element : _networkElements) {
    if (providersToDestroy.contains(element.getProvider())) {
      try {
        if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
          s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ _networkModel.getPhysicalNetworkId(network));
          success=false;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + element);
        }
        if (!element.destroy(network,context)) {
          success=false;
          s_logger.warn(""String_Node_Str"" + element.getName());
        }
      }
 catch (      ResourceUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
catch (      ConcurrentOperationException e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    final NetworkVO networkFinal=network;
    try {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          NetworkGuru guru=AdapterBase.getAdapterByName(_networkGurus,networkFinal.getGuruName());
          guru.trash(networkFinal,_networkOfferingDao.findById(networkFinal.getNetworkOfferingId()));
          if (!deleteVlansInNetwork(networkFinal.getId(),context.getCaller().getId(),callerAccount)) {
            s_logger.warn(""String_Node_Str"" + networkFinal + ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + networkFinal + ""String_Node_Str"");
          }
 else {
            try {
              stateTransitTo(networkFinal,Event.DestroyNetwork);
            }
 catch (            NoTransitionException e) {
              s_logger.debug(e.getMessage());
            }
            if (_networksDao.remove(networkFinal.getId())) {
              NetworkDomainVO networkDomain=_networkDomainDao.getDomainNetworkMapByNetworkId(networkFinal.getId());
              if (networkDomain != null)               _networkDomainDao.remove(networkDomain.getId());
              NetworkAccountVO networkAccount=_networkAccountDao.getAccountNetworkMapByNetworkId(networkFinal.getId());
              if (networkAccount != null)               _networkAccountDao.remove(networkAccount.getId());
            }
            NetworkOffering ntwkOff=_entityMgr.findById(NetworkOffering.class,networkFinal.getNetworkOfferingId());
            boolean updateResourceCount=resourceCountNeedsUpdate(ntwkOff,networkFinal.getAclType());
            if (updateResourceCount) {
              _resourceLimitMgr.decrementResourceCount(networkFinal.getAccountId(),ResourceType.network);
            }
          }
        }
      }
);
      return false;
    }
 catch (    CloudRuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      return false;
    }
  }
  return success;
}","@Override @DB public boolean destroyNetwork(long networkId,final ReservationContext context){
  final Account callerAccount=context.getAccount();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  List<UserVmVO> userVms=_userVmDao.listByNetworkIdAndStates(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null)) {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
      return false;
    }
  }
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    _networksDao.changeActiveNicsBy(networkId,(-1 * nicCount));
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (zone.getNetworkType() == NetworkType.Basic) {
    List<VMInstanceVO> systemVms=_vmDao.listNonRemovedVmsByTypeAndNetwork(network.getId(),Type.ConsoleProxy,Type.SecondaryStorageVm);
    if (systemVms != null && !systemVms.isEmpty()) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
  }
  shutdownNetwork(networkId,context,false);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  if (!cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId())) {
    s_logger.warn(""String_Node_Str"" + networkId + ""String_Node_Str"");
    return false;
  }
  List<Provider> providersToDestroy=getNetworkProviders(network.getId());
  for (  NetworkElement element : _networkElements) {
    if (providersToDestroy.contains(element.getProvider())) {
      try {
        if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
          s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ _networkModel.getPhysicalNetworkId(network));
          success=false;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + element);
        }
        if (!element.destroy(network,context)) {
          success=false;
          s_logger.warn(""String_Node_Str"" + element.getName());
        }
      }
 catch (      ResourceUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
catch (      ConcurrentOperationException e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + element.getName(),e);
        success=false;
      }
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    final NetworkVO networkFinal=network;
    try {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          NetworkGuru guru=AdapterBase.getAdapterByName(_networkGurus,networkFinal.getGuruName());
          guru.trash(networkFinal,_networkOfferingDao.findById(networkFinal.getNetworkOfferingId()));
          if (!deleteVlansInNetwork(networkFinal.getId(),context.getCaller().getId(),callerAccount)) {
            s_logger.warn(""String_Node_Str"" + networkFinal + ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + networkFinal + ""String_Node_Str"");
          }
 else {
            try {
              stateTransitTo(networkFinal,Event.DestroyNetwork);
            }
 catch (            NoTransitionException e) {
              s_logger.debug(e.getMessage());
            }
            if (_networksDao.remove(networkFinal.getId())) {
              NetworkDomainVO networkDomain=_networkDomainDao.getDomainNetworkMapByNetworkId(networkFinal.getId());
              if (networkDomain != null)               _networkDomainDao.remove(networkDomain.getId());
              NetworkAccountVO networkAccount=_networkAccountDao.getAccountNetworkMapByNetworkId(networkFinal.getId());
              if (networkAccount != null)               _networkAccountDao.remove(networkAccount.getId());
            }
            NetworkOffering ntwkOff=_entityMgr.findById(NetworkOffering.class,networkFinal.getNetworkOfferingId());
            boolean updateResourceCount=resourceCountNeedsUpdate(ntwkOff,networkFinal.getAclType());
            if (updateResourceCount) {
              _resourceLimitMgr.decrementResourceCount(networkFinal.getAccountId(),ResourceType.network);
            }
          }
        }
      }
);
      return true;
    }
 catch (    CloudRuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      return false;
    }
  }
  return success;
}",0.9993031358885016
106123,"@Override public ListResponse<UserResponse> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Pair<List<UserAccountJoinVO>,Integer> result=searchForUsersInternal(cmd);
  ListResponse<UserResponse> response=new ListResponse<UserResponse>();
  List<UserResponse> userResponses=ViewResponseHelper.createUserResponse(UserContext.current().getCaller().getDomainId(),result.first().toArray(new UserAccountJoinVO[result.first().size()]));
  response.setResponses(userResponses,result.second());
  return response;
}","@Override public ListResponse<UserResponse> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Pair<List<UserAccountJoinVO>,Integer> result=searchForUsersInternal(cmd);
  ListResponse<UserResponse> response=new ListResponse<UserResponse>();
  List<UserResponse> userResponses=ViewResponseHelper.createUserResponse(CallContext.current().getCallingAccount().getDomainId(),result.first().toArray(new UserAccountJoinVO[result.first().size()]));
  response.setResponses(userResponses,result.second());
  return response;
}",0.981203007518797
106124,"@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && CallContext.current().getCallingAccount().getType() == Account.ACCOUNT_TYPE_ADMIN) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
    if (BroadcastDomainType.Vlan.scheme().equals(BroadcastDomainType.getSchemeValue(network.getBroadcastUri()))) {
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    }
    response.setVlan(vlan);
  }
  DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
  if (zone != null) {
    response.setZoneId(zone.getUuid());
    response.setZoneName(zone.getName());
  }
  if (network.getPhysicalNetworkId() != null) {
    PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
    response.setPhysicalNetworkId(pnet.getUuid());
  }
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getUuid());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
    response.setIsPersistent(networkOffering.getIsPersistent());
  }
  if (network.getAclType() != null) {
    response.setAclType(network.getAclType().toString());
  }
  response.setDisplayNetwork(network.getDisplayNetwork());
  response.setState(network.getState().toString());
  response.setRestartRequired(network.isRestartRequired());
  NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
  if (nw != null) {
    response.setRelated(nw.getUuid());
  }
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      if (service == Service.Gateway) {
        continue;
      }
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
    populateOwner(response,network);
  }
 else {
    Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
    if (domainNetworkDetails.first() != null) {
      Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
      if (domain != null) {
        response.setDomainId(domain.getUuid());
      }
    }
    response.setSubdomainAccess(domainNetworkDetails.second());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    if (domain != null) {
      response.setDomainId(domain.getUuid());
    }
    response.setDomainName(domain.getName());
  }
  response.setSpecifyIpRanges(network.getSpecifyIpRanges());
  if (network.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
    if (vpc != null) {
      response.setVpcId(vpc.getUuid());
    }
  }
  response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  if (network.getNetworkACLId() != null) {
    NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
    if (acl != null) {
      response.setAclId(acl.getUuid());
    }
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && CallContext.current().getCallingAccount().getType() == Account.ACCOUNT_TYPE_ADMIN) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Service service : serviceCapabilitiesMap.keySet()) {
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
  if (serviceCapabilities != null) {
    for (    Capability capability : serviceCapabilities.keySet()) {
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=serviceCapabilities.get(capability);
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.9649191444966092
106125,"@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _checkExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _networkStatsUpdateExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _routerRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_ROUTER_VM_RAMSIZE);
  _routerCpuMHz=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_ROUTER_CPU_MHZ);
  _routerExtraPublicNics=NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()),2);
  String guestOSString=configs.get(""String_Node_Str"");
  if (guestOSString != null) {
    String[] guestOSList=guestOSString.split(""String_Node_Str"");
    for (    String os : guestOSList) {
      _guestOSNeedGatewayOnNonDefaultNetwork.add(os);
    }
  }
  String value=configs.get(""String_Node_Str"");
  _retry=NumbersUtil.parseInt(value,2);
  value=configs.get(""String_Node_Str"");
  _routerStatsInterval=NumbersUtil.parseInt(value,300);
  value=configs.get(""String_Node_Str"");
  _routerCheckInterval=NumbersUtil.parseInt(value,30);
  value=configs.get(""String_Node_Str"");
  _rvrStatusUpdatePoolSize=NumbersUtil.parseInt(value,10);
  _vrUpdateQueue=new LinkedBlockingQueue<Long>(_rvrStatusUpdatePoolSize * 1000);
  _rvrStatusUpdateExecutor=Executors.newFixedThreadPool(_rvrStatusUpdatePoolSize,new NamedThreadFactory(""String_Node_Str""));
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  String rpValue=configs.get(""String_Node_Str"");
  if (rpValue != null && rpValue.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  _dnsBasicZoneUpdates=String.valueOf(_configDao.getValue(Config.DnsBasicZoneUpdates.key()));
  s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + _routerRamSize);
  _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(_agentMgr,_hostDao,_configDao),true,false,false);
  _itMgr.registerGuru(VirtualMachine.Type.DomainRouter,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _offering=new ServiceOfferingVO(""String_Node_Str"",1,_routerRamSize,_routerCpuMHz,null,null,true,null,useLocalStorage,true,null,true,VirtualMachine.Type.DomainRouter,true);
  _offering.setUniqueName(ServiceOffering.routerDefaultOffUniqueName);
  _offering=_serviceOfferingDao.persistSystemServiceOffering(_offering);
  if (_offering == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new ConfigurationException(msg);
  }
  _systemAcct=_accountMgr.getSystemAccount();
  String aggregationRange=configs.get(""String_Node_Str"");
  _usageAggregationRange=NumbersUtil.parseInt(aggregationRange,1440);
  _usageTimeZone=configs.get(""String_Node_Str"");
  if (_usageTimeZone == null) {
    _usageTimeZone=""String_Node_Str"";
  }
  _agentMgr.registerForHostEvents(this,true,false,false);
  s_logger.info(""String_Node_Str"");
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _checkExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _networkStatsUpdateExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _routerRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_ROUTER_VM_RAMSIZE);
  _routerCpuMHz=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_ROUTER_CPU_MHZ);
  _routerExtraPublicNics=NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()),2);
  String guestOSString=configs.get(""String_Node_Str"");
  if (guestOSString != null) {
    String[] guestOSList=guestOSString.split(""String_Node_Str"");
    for (    String os : guestOSList) {
      _guestOSNeedGatewayOnNonDefaultNetwork.add(os);
    }
  }
  String value=configs.get(""String_Node_Str"");
  _retry=NumbersUtil.parseInt(value,2);
  value=configs.get(""String_Node_Str"");
  _routerStatsInterval=NumbersUtil.parseInt(value,300);
  value=configs.get(""String_Node_Str"");
  _routerCheckInterval=NumbersUtil.parseInt(value,30);
  value=configs.get(""String_Node_Str"");
  _rvrStatusUpdatePoolSize=NumbersUtil.parseInt(value,10);
  _vrUpdateQueue=new LinkedBlockingQueue<Long>(_rvrStatusUpdatePoolSize * 1000);
  _rvrStatusUpdateExecutor=Executors.newFixedThreadPool(_rvrStatusUpdatePoolSize,new NamedThreadFactory(""String_Node_Str""));
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  String rpValue=configs.get(""String_Node_Str"");
  if (rpValue != null && rpValue.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  _dnsBasicZoneUpdates=String.valueOf(_configDao.getValue(Config.DnsBasicZoneUpdates.key()));
  s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + _routerRamSize);
  _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(_agentMgr,_hostDao,_configDao),true,false,false);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _offering=new ServiceOfferingVO(""String_Node_Str"",1,_routerRamSize,_routerCpuMHz,null,null,true,null,useLocalStorage,true,null,true,VirtualMachine.Type.DomainRouter,true);
  _offering.setUniqueName(ServiceOffering.routerDefaultOffUniqueName);
  _offering=_serviceOfferingDao.persistSystemServiceOffering(_offering);
  if (_offering == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new ConfigurationException(msg);
  }
  _systemAcct=_accountMgr.getSystemAccount();
  String aggregationRange=configs.get(""String_Node_Str"");
  _usageAggregationRange=NumbersUtil.parseInt(aggregationRange,1440);
  _usageTimeZone=configs.get(""String_Node_Str"");
  if (_usageTimeZone == null) {
    _usageTimeZone=""String_Node_Str"";
  }
  _agentMgr.registerForHostEvents(this,true,false,false);
  s_logger.info(""String_Node_Str"");
  return true;
}",0.9902022756005056
106126,"/** 
 * Establishes session with the virtual center server.
 * @throws Exception the exception
 */
public void connect(String url,String userName,String password) throws Exception {
  SVC_INST_REF.setType(SVC_INST_NAME);
  SVC_INST_REF.setValue(SVC_INST_NAME);
  vimPort=vimService.getVimPort();
  Map<String,Object> ctxt=((BindingProvider)vimPort).getRequestContext();
  ctxt.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,url);
  ctxt.put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  ctxt.put(""String_Node_Str"",600000);
  ctxt.put(""String_Node_Str"",600000);
  ServiceContent serviceContent=vimPort.retrieveServiceContent(SVC_INST_REF);
  Map<String,List<String>> headers=(Map<String,List<String>>)((BindingProvider)vimPort).getResponseContext().get(MessageContext.HTTP_RESPONSE_HEADERS);
  List<String> cookies=(List<String>)headers.get(""String_Node_Str"");
  String cookieValue=cookies.get(0);
  StringTokenizer tokenizer=new StringTokenizer(cookieValue,""String_Node_Str"");
  cookieValue=tokenizer.nextToken();
  String pathData=""String_Node_Str"" + tokenizer.nextToken();
  serviceCookie=""String_Node_Str"" + cookieValue + ""String_Node_Str""+ pathData;
  vimPort.login(serviceContent.getSessionManager(),userName,password,null);
  isConnected=true;
}","/** 
 * Establishes session with the virtual center server.
 * @throws Exception the exception
 */
public void connect(String url,String userName,String password) throws Exception {
  SVC_INST_REF.setType(SVC_INST_NAME);
  SVC_INST_REF.setValue(SVC_INST_NAME);
  vimService=new VimService();
  vimPort=vimService.getVimPort();
  Map<String,Object> ctxt=((BindingProvider)vimPort).getRequestContext();
  ctxt.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,url);
  ctxt.put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  ctxt.put(""String_Node_Str"",600000);
  ctxt.put(""String_Node_Str"",600000);
  ServiceContent serviceContent=vimPort.retrieveServiceContent(SVC_INST_REF);
  Map<String,List<String>> headers=(Map<String,List<String>>)((BindingProvider)vimPort).getResponseContext().get(MessageContext.HTTP_RESPONSE_HEADERS);
  List<String> cookies=(List<String>)headers.get(""String_Node_Str"");
  String cookieValue=cookies.get(0);
  StringTokenizer tokenizer=new StringTokenizer(cookieValue,""String_Node_Str"");
  cookieValue=tokenizer.nextToken();
  String pathData=""String_Node_Str"" + tokenizer.nextToken();
  serviceCookie=""String_Node_Str"" + cookieValue + ""String_Node_Str""+ pathData;
  vimPort.login(serviceContent.getSessionManager(),userName,password,null);
  isConnected=true;
}",0.9878000787091696
106127,"public Object AopTestMethod(ProceedingJoinPoint call) throws Throwable {
  Transaction txn=Transaction.open(call.getSignature().getName());
  Object ret=null;
  try {
    ret=call.proceed();
  }
  finally {
    txn.close();
  }
  return ret;
}","public Object AopTestMethod(ProceedingJoinPoint call) throws Throwable {
  TransactionLegacy txn=TransactionLegacy.open(call.getSignature().getName());
  Object ret=null;
  try {
    ret=call.proceed();
  }
  finally {
    txn.close();
  }
  return ret;
}",0.9759036144578314
106128,"@BeforeMethod(alwaysRun=true) protected void injectDB(Method testMethod) throws Exception {
  txn=Transaction.open(testMethod.getName());
}","@BeforeMethod(alwaysRun=true) protected void injectDB(Method testMethod) throws Exception {
  txn=TransactionLegacy.open(testMethod.getName());
}",0.9788732394366196
106129,"@Override public Priority canHandle(Map<VolumeInfo,DataStore> volumeMap,Host srcHost,Host destHost){
  return Priority.HIGHEST;
}","@Override public StrategyPriority canHandle(Map<VolumeInfo,DataStore> volumeMap,Host srcHost,Host destHost){
  return StrategyPriority.HIGHEST;
}",0.9416058394160584
106130,"@Test public void deleteSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  SnapshotInfo newSnapshot=null;
  SnapshotStrategy snapshotStrategy=StrategyPriority.pickStrategy(snapshotStrategies,snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    newSnapshot=snapshotStrategy.takeSnapshot(snapshot);
  }
  AssertJUnit.assertNotNull(newSnapshot);
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot,SnapshotOperation.DELETE) != Priority.CANT_HANDLE) {
      strategy.deleteSnapshot(newSnapshot.getId());
    }
  }
}","@Test public void deleteSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  SnapshotInfo newSnapshot=null;
  SnapshotStrategy snapshotStrategy=storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    newSnapshot=snapshotStrategy.takeSnapshot(snapshot);
  }
  AssertJUnit.assertNotNull(newSnapshot);
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot,SnapshotOperation.DELETE) != StrategyPriority.CANT_HANDLE) {
      strategy.deleteSnapshot(newSnapshot.getId());
    }
  }
}",0.9356499356499356
106131,"@Test public void createTemplateFromSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  SnapshotStrategy snapshotStrategy=StrategyPriority.pickStrategy(snapshotStrategies,snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    snapshot=snapshotStrategy.takeSnapshot(snapshot);
    result=true;
  }
  AssertJUnit.assertTrue(result);
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Matchers.any(DataObject.class),Matchers.any(DataObject.class))).thenReturn(ep);
  try {
    VMTemplateVO templateVO=createTemplateInDb();
    TemplateInfo tmpl=this.templateFactory.getTemplate(templateVO.getId(),DataStoreRole.Image);
    DataStore imageStore=this.dataStoreMgr.getImageStore(this.dcId);
    AsyncCallFuture<TemplateApiResult> templateFuture=this.imageService.createTemplateFromSnapshotAsync(snapshot,tmpl,imageStore);
    TemplateApiResult apiResult=templateFuture.get();
    Assert.assertTrue(apiResult.isSuccess());
  }
  finally {
    Mockito.when(epSelector.select(Matchers.any(DataObject.class),Matchers.any(DataObject.class))).thenReturn(remoteEp);
  }
}","@Test public void createTemplateFromSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  SnapshotStrategy snapshotStrategy=storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    snapshot=snapshotStrategy.takeSnapshot(snapshot);
    result=true;
  }
  AssertJUnit.assertTrue(result);
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Matchers.any(DataObject.class),Matchers.any(DataObject.class))).thenReturn(ep);
  try {
    VMTemplateVO templateVO=createTemplateInDb();
    TemplateInfo tmpl=this.templateFactory.getTemplate(templateVO.getId(),DataStoreRole.Image);
    DataStore imageStore=this.dataStoreMgr.getImageStore(this.dcId);
    AsyncCallFuture<TemplateApiResult> templateFuture=this.imageService.createTemplateFromSnapshotAsync(snapshot,tmpl,imageStore);
    TemplateApiResult apiResult=templateFuture.get();
    Assert.assertTrue(apiResult.isSuccess());
  }
  finally {
    Mockito.when(epSelector.select(Matchers.any(DataObject.class),Matchers.any(DataObject.class))).thenReturn(remoteEp);
  }
}",0.9667870036101084
106132,"@Test public void createVolumeFromSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  SnapshotStrategy snapshotStrategy=StrategyPriority.pickStrategy(snapshotStrategies,snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    snapshot=snapshotStrategy.takeSnapshot(snapshot);
    result=true;
  }
  AssertJUnit.assertTrue(result);
  VolumeVO volVO=createVolume(vol.getTemplateId(),vol.getPoolId());
  VolumeInfo newVol=this.volFactory.getVolume(volVO.getId());
  AsyncCallFuture<VolumeApiResult> volFuture=this.volumeService.createVolumeFromSnapshot(newVol,newVol.getDataStore(),snapshot);
  VolumeApiResult apiResult=volFuture.get();
  Assert.assertTrue(apiResult.isSuccess());
}","@Test public void createVolumeFromSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  SnapshotStrategy snapshotStrategy=storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    snapshot=snapshotStrategy.takeSnapshot(snapshot);
    result=true;
  }
  AssertJUnit.assertTrue(result);
  VolumeVO volVO=createVolume(vol.getTemplateId(),vol.getPoolId());
  VolumeInfo newVol=this.volFactory.getVolume(volVO.getId());
  AsyncCallFuture<VolumeApiResult> volFuture=this.volumeService.createVolumeFromSnapshot(newVol,newVol.getDataStore(),snapshot);
  VolumeApiResult apiResult=volFuture.get();
  Assert.assertTrue(apiResult.isSuccess());
}",0.9496166484118292
106133,"@Test public void createSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  SnapshotInfo newSnapshot=null;
  SnapshotStrategy snapshotStrategy=StrategyPriority.pickStrategy(snapshotStrategies,snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    newSnapshot=snapshotStrategy.takeSnapshot(snapshot);
  }
  AssertJUnit.assertNotNull(newSnapshot);
  LocalHostEndpoint ep=new MockLocalHostEndPoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);
  try {
    for (    SnapshotStrategy strategy : this.snapshotStrategies) {
      if (strategy.canHandle(snapshot,SnapshotOperation.DELETE) != Priority.CANT_HANDLE) {
        boolean res=strategy.deleteSnapshot(newSnapshot.getId());
        Assert.assertTrue(res);
      }
    }
  }
  finally {
    Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(remoteEp);
  }
}","@Test public void createSnapshot() throws InterruptedException, ExecutionException {
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  SnapshotInfo newSnapshot=null;
  SnapshotStrategy snapshotStrategy=storageStrategyFactory.getSnapshotStrategy(snapshot,SnapshotOperation.TAKE);
  if (snapshotStrategy != null) {
    newSnapshot=snapshotStrategy.takeSnapshot(snapshot);
  }
  AssertJUnit.assertNotNull(newSnapshot);
  LocalHostEndpoint ep=new MockLocalHostEndPoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);
  try {
    for (    SnapshotStrategy strategy : this.snapshotStrategies) {
      if (strategy.canHandle(snapshot,SnapshotOperation.DELETE) != StrategyPriority.CANT_HANDLE) {
        boolean res=strategy.deleteSnapshot(newSnapshot.getId());
        Assert.assertTrue(res);
      }
    }
  }
  finally {
    Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(remoteEp);
  }
}",0.9563318777292577
106134,"@Override public List<IMethodInstance> intercept(List<IMethodInstance> methods,ITestContext context){
  for (  IMethodInstance methodIns : methods) {
    ITestNGMethod method=methodIns.getMethod();
    ConstructorOrMethod meth=method.getConstructorOrMethod();
    Method m=meth.getMethod();
    if (m != null) {
      DB db=m.getAnnotation(DB.class);
      if (db != null) {
        Transaction txn=Transaction.open(m.getName());
      }
    }
  }
  return methods;
}","@Override public List<IMethodInstance> intercept(List<IMethodInstance> methods,ITestContext context){
  for (  IMethodInstance methodIns : methods) {
    ITestNGMethod method=methodIns.getMethod();
    ConstructorOrMethod meth=method.getConstructorOrMethod();
    Method m=meth.getMethod();
    if (m != null) {
      DB db=m.getAnnotation(DB.class);
      if (db != null) {
        TransactionLegacy txn=TransactionLegacy.open(m.getName());
      }
    }
  }
  return methods;
}",0.9873150105708244
106135,"private Pair<List<ServiceOfferingJoinVO>,Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(ServiceOfferingJoinVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=CallContext.current().getCallingAccount();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vmTypeStr=cmd.getSystemVmType();
  Map<String,String> resourceTags=cmd.getResourceTags();
  SearchBuilder<ServiceOfferingJoinVO> sb=_srvOfferingJoinDao.createSearchBuilder();
  if (resourceTags != null && !resourceTags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < resourceTags.size(); count++) {
      tagSearch.or().op(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and(""String_Node_Str"",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join(""String_Node_Str"",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ServiceOfferingJoinVO> sc=sb.create();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    List<Long> domainIds=new ArrayList<Long>();
    DomainVO domainRecord=_domainDao.findById(caller.getDomainId());
    if (domainRecord == null) {
      s_logger.error(""String_Node_Str"" + caller.getAccountName());
      throw new CloudAuthenticationException(""String_Node_Str"" + caller.getAccountName());
    }
    domainIds.add(domainRecord.getId());
    while (domainRecord.getParent() != null) {
      domainRecord=_domainDao.findById(domainRecord.getParent());
      domainIds.add(domainRecord.getId());
    }
    SearchCriteria<ServiceOfferingJoinVO> spc=_srvOfferingJoinDao.createSearchCriteria();
    spc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,domainIds.toArray());
    spc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,spc);
  }
 else {
    if (caller.getDomainId() != 1 && isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (domainId != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingJoinVO> ssc=_srvOfferingJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(vmId.toString(),""String_Node_Str"");
      throw ex;
    }
    _accountMgr.checkAccess(caller,null,true,vmInstance);
    ServiceOfferingVO offering=_srvOfferingDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (vmTypeStr != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmTypeStr);
  }
  if (resourceTags != null && !resourceTags.isEmpty()) {
    int count=0;
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TaggedResourceType.ServiceOffering.toString());
    for (    String key : resourceTags.keySet()) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),key);
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),resourceTags.get(key));
      count++;
    }
  }
  return _srvOfferingJoinDao.searchAndCount(sc,searchFilter);
}","private Pair<List<ServiceOfferingJoinVO>,Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(ServiceOfferingJoinVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=CallContext.current().getCallingAccount();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vmTypeStr=cmd.getSystemVmType();
  Map<String,String> resourceTags=cmd.getResourceTags();
  SearchBuilder<ServiceOfferingJoinVO> sb=_srvOfferingJoinDao.createSearchBuilder();
  if (resourceTags != null && !resourceTags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < resourceTags.size(); count++) {
      tagSearch.or().op(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and(""String_Node_Str"",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join(""String_Node_Str"",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ServiceOfferingJoinVO> sc=sb.create();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(vmId.toString(),""String_Node_Str"");
      throw ex;
    }
    _accountMgr.checkAccess(caller,null,true,vmInstance);
    ServiceOfferingVO offering=_srvOfferingDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    List<Long> domainIds=new ArrayList<Long>();
    DomainVO domainRecord;
    if (vmId != null) {
      UserVmVO vmInstance=_userVmDao.findById(vmId);
      domainRecord=_domainDao.findById(vmInstance.getDomainId());
      if (domainRecord == null) {
        s_logger.error(""String_Node_Str"" + vmId);
        throw new CloudAuthenticationException(""String_Node_Str"" + vmId);
      }
    }
 else {
      domainRecord=_domainDao.findById(caller.getDomainId());
      if (domainRecord == null) {
        s_logger.error(""String_Node_Str"" + caller.getAccountName());
        throw new CloudAuthenticationException(""String_Node_Str"" + caller.getAccountName());
      }
    }
    domainIds.add(domainRecord.getId());
    while (domainRecord.getParent() != null) {
      domainRecord=_domainDao.findById(domainRecord.getParent());
      domainIds.add(domainRecord.getId());
    }
    SearchCriteria<ServiceOfferingJoinVO> spc=_srvOfferingJoinDao.createSearchCriteria();
    spc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,domainIds.toArray());
    spc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,spc);
  }
 else {
    if (caller.getDomainId() != 1 && isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (domainId != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingJoinVO> ssc=_srvOfferingJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (vmTypeStr != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmTypeStr);
  }
  if (resourceTags != null && !resourceTags.isEmpty()) {
    int count=0;
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TaggedResourceType.ServiceOffering.toString());
    for (    String key : resourceTags.keySet()) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),key);
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),resourceTags.get(key));
      count++;
    }
  }
  return _srvOfferingJoinDao.searchAndCount(sc,searchFilter);
}",0.8371878743204644
106136,"@Override public List<DomainVO> findAllChildren(String path,Long parentId){
  SearchCriteria<DomainVO> sc=FindAllChildrenSearch.create();
  sc.setParameters(""String_Node_Str"",""String_Node_Str"" + path + ""String_Node_Str"");
  sc.setParameters(""String_Node_Str"",parentId);
  return listBy(sc);
}","@Override public List<DomainVO> findAllChildren(String path,Long parentId){
  SearchCriteria<DomainVO> sc=FindAllChildrenSearch.create();
  sc.setParameters(""String_Node_Str"",path + ""String_Node_Str"");
  sc.setParameters(""String_Node_Str"",parentId);
  return listBy(sc);
}",0.9645390070921984
106137,"@DB @Override public boolean deleteDataStore(DataStore store){
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(store.getId());
  StoragePool pool=(StoragePool)store;
  boolean deleteFlag=false;
  HypervisorType hType=null;
  if (hostPoolRecords.size() > 0) {
    hType=getHypervisorType(hostPoolRecords.get(0).getHostId());
  }
  for (  StoragePoolHostVO host : hostPoolRecords) {
    DeleteStoragePoolCommand deleteCmd=new DeleteStoragePoolCommand(pool);
    final Answer answer=agentMgr.easySend(host.getHostId(),deleteCmd);
    if (answer != null && answer.getResult()) {
      deleteFlag=true;
      if (HypervisorType.KVM != hType) {
        break;
      }
    }
 else {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getResult());
      }
    }
  }
  if (!deleteFlag) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return dataStoreHelper.deletePrimaryDataStore(store);
}","@DB @Override public boolean deleteDataStore(DataStore store){
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(store.getId());
  StoragePool pool=(StoragePool)store;
  boolean deleteFlag=false;
  HypervisorType hType=null;
  if (hostPoolRecords.size() > 0) {
    hType=getHypervisorType(hostPoolRecords.get(0).getHostId());
  }
 else {
    return false;
  }
  for (  StoragePoolHostVO host : hostPoolRecords) {
    DeleteStoragePoolCommand deleteCmd=new DeleteStoragePoolCommand(pool);
    final Answer answer=agentMgr.easySend(host.getHostId(),deleteCmd);
    if (answer != null && answer.getResult()) {
      deleteFlag=true;
      if (HypervisorType.KVM != hType) {
        break;
      }
    }
 else {
      if (answer != null) {
        s_logger.debug(""String_Node_Str"" + answer.getResult());
      }
    }
  }
  if (!deleteFlag) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return dataStoreHelper.deletePrimaryDataStore(store);
}",0.984472049689441
106138,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (id != null) {
    return;
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    AclRolePermission rolePerm=_aclService.getAclRolePermission(caller.getId(),AclEntityType.VM.toString(),AccessType.ListEntry);
    if (rolePerm == null) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (permittedAccounts.isEmpty()) {
      if (rolePerm.getScope() == PermissionScope.ACCOUNT || !listAll) {
        permittedAccounts.add(caller.getId());
      }
 else {
        domainIdRecursiveListProject.first(caller.getDomainId());
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (id != null) {
    return;
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    AclRolePermission rolePerm=_aclService.getAclRolePermission(caller.getId(),AclEntityType.VM.toString(),AccessType.ListEntry);
    if (rolePerm == null) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (permittedAccounts.isEmpty()) {
      if (rolePerm.getScope() == PermissionScope.ACCOUNT || !listAll) {
        permittedAccounts.add(caller.getId());
      }
 else       if (rolePerm.getScope() == PermissionScope.DOMAIN) {
        domainIdRecursiveListProject.first(caller.getDomainId());
      }
    }
  }
}",0.9899382171226832
106139,"@Override public void buildACLViewSearchBuilder(SearchBuilder<? extends ControlledViewEntity> sb,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds){
  sb.and().op(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    sb.and(""String_Node_Str"",sb.entity().getDomainPath(),SearchCriteria.Op.LIKE);
  }
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
    }
  }
  if (!grantedIds.isEmpty()) {
    sb.or(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.IN);
  }
  sb.cp();
  if (!revokedIds.isEmpty()) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NIN);
  }
}","@Override public void buildACLViewSearchBuilder(SearchBuilder<? extends ControlledViewEntity> sb,Long domainId,boolean isRecursive,List<Long> permittedAccounts,ListProjectResourcesCriteria listProjectResourcesCriteria,List<Long> grantedIds,List<Long> revokedIds){
  if (!revokedIds.isEmpty()) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NIN);
  }
  if (permittedAccounts.isEmpty() && domainId == null && listProjectResourcesCriteria == null) {
    return;
  }
  boolean hasOp=true;
  if (!permittedAccounts.isEmpty()) {
    sb.and().op(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  }
 else   if (domainId != null) {
    if (isRecursive) {
      sb.and().op(""String_Node_Str"",sb.entity().getDomainPath(),SearchCriteria.Op.LIKE);
    }
 else {
      sb.and().op(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
    }
  }
 else {
    hasOp=false;
  }
  if (listProjectResourcesCriteria != null) {
    if (hasOp) {
      if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
        sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
      }
 else       if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
        sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
      }
    }
 else {
      if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
        sb.and().op(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
      }
 else       if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
        sb.and().op(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
      }
    }
  }
  if (!grantedIds.isEmpty()) {
    sb.or(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.IN);
  }
  sb.cp();
}",0.6698024459078081
106140,"@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getId(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getId(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getId(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getId(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getId(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getId(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getId(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getId(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getId(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getId(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}","@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getType(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getType(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getType(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getType(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getType(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getType(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getType(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getType(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getType(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getType(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}",0.9957740526834764
106141,"@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getType(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getType(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getType(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getType(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getType(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getType(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getType(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getType(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getType(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getType(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}","@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getId(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getId(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getId(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getId(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getId(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getId(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getId(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getId(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getId(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getId(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}",0.9957740526834764
106142,"@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  AclRole result=_aclService.grantPermissionToAclRole(id,apiList);
  if (result != null) {
    AclRoleResponse response=_responseGenerator.createAclRoleResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + getId());
  }
}","@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  AclRole result=_aclService.grantApiPermissionToAclRole(id,apiList);
  if (result != null) {
    AclRoleResponse response=_responseGenerator.createAclRoleResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + getId());
  }
}",0.99728014505893
106143,"@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  AclRole result=_aclService.revokePermissionFromAclRole(id,apiList);
  if (result != null) {
    AclRoleResponse response=_responseGenerator.createAclRoleResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + getId());
  }
}","@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  AclRole result=_aclService.revokeApiPermissionFromAclRole(id,apiList);
  if (result != null) {
    AclRoleResponse response=_responseGenerator.createAclRoleResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"" + getId());
  }
}",0.9972948602344456
106144,"@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getType(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getType(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getType(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getType(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getType(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getType(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getType(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getType(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getType(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getType(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}","@Override public void setResourceLimits(AccountJoinVO account,boolean accountIsAdmin,ResourceLimitAndCountResponse response){
  long vmLimit=ApiDBUtils.findCorrectResourceLimit(account.getVmLimit(),account.getId(),ResourceType.user_vm);
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  long vmTotal=(account.getVmTotal() == null) ? 0 : account.getVmTotal();
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  response.setVmLimit(vmLimitDisplay);
  response.setVmTotal(vmTotal);
  response.setVmAvailable(vmAvail);
  long ipLimit=ApiDBUtils.findCorrectResourceLimit(account.getIpLimit(),account.getId(),ResourceType.public_ip);
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  long ipTotal=(account.getIpTotal() == null) ? 0 : account.getIpTotal();
  Long ips=ipLimit - ipTotal;
  Long ipsLeft=account.getIpFree();
  boolean unlimited=true;
  if (ips.longValue() > ipsLeft.longValue()) {
    ips=ipsLeft;
    unlimited=false;
  }
  String ipAvail=((accountIsAdmin || ipLimit == -1) && unlimited) ? ""String_Node_Str"" : String.valueOf(ips);
  response.setIpLimit(ipLimitDisplay);
  response.setIpTotal(ipTotal);
  response.setIpAvailable(ipAvail);
  long volumeLimit=ApiDBUtils.findCorrectResourceLimit(account.getVolumeLimit(),account.getId(),ResourceType.volume);
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  long volumeTotal=(account.getVolumeTotal() == 0) ? 0 : account.getVolumeTotal();
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  response.setVolumeLimit(volumeLimitDisplay);
  response.setVolumeTotal(volumeTotal);
  response.setVolumeAvailable(volumeAvail);
  long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(account.getSnapshotLimit(),account.getId(),ResourceType.snapshot);
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  long snapshotTotal=(account.getSnapshotTotal() == null) ? 0 : account.getSnapshotTotal();
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  response.setSnapshotLimit(snapshotLimitDisplay);
  response.setSnapshotTotal(snapshotTotal);
  response.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(account.getTemplateLimit(),account.getId(),ResourceType.template);
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=(account.getTemplateTotal() == null) ? 0 : account.getTemplateTotal();
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  response.setTemplateLimit(templateLimitDisplay);
  response.setTemplateTotal(templateTotal);
  response.setTemplateAvailable(templateAvail);
  response.setVmStopped(account.getVmStopped());
  response.setVmRunning(account.getVmRunning());
  long networkLimit=ApiDBUtils.findCorrectResourceLimit(account.getNetworkLimit(),account.getId(),ResourceType.network);
  String networkLimitDisplay=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit);
  long networkTotal=(account.getNetworkTotal() == null) ? 0 : account.getNetworkTotal();
  String networkAvail=(accountIsAdmin || networkLimit == -1) ? ""String_Node_Str"" : String.valueOf(networkLimit - networkTotal);
  response.setNetworkLimit(networkLimitDisplay);
  response.setNetworkTotal(networkTotal);
  response.setNetworkAvailable(networkAvail);
  long vpcLimit=ApiDBUtils.findCorrectResourceLimit(account.getVpcLimit(),account.getId(),ResourceType.vpc);
  String vpcLimitDisplay=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit);
  long vpcTotal=(account.getVpcTotal() == null) ? 0 : account.getVpcTotal();
  String vpcAvail=(accountIsAdmin || vpcLimit == -1) ? ""String_Node_Str"" : String.valueOf(vpcLimit - vpcTotal);
  response.setVpcLimit(vpcLimitDisplay);
  response.setVpcTotal(vpcTotal);
  response.setVpcAvailable(vpcAvail);
  long cpuLimit=ApiDBUtils.findCorrectResourceLimit(account.getCpuLimit(),account.getId(),ResourceType.cpu);
  String cpuLimitDisplay=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit);
  long cpuTotal=(account.getCpuTotal() == null) ? 0 : account.getCpuTotal();
  String cpuAvail=(accountIsAdmin || cpuLimit == -1) ? ""String_Node_Str"" : String.valueOf(cpuLimit - cpuTotal);
  response.setCpuLimit(cpuLimitDisplay);
  response.setCpuTotal(cpuTotal);
  response.setCpuAvailable(cpuAvail);
  long memoryLimit=ApiDBUtils.findCorrectResourceLimit(account.getMemoryLimit(),account.getId(),ResourceType.memory);
  String memoryLimitDisplay=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit);
  long memoryTotal=(account.getMemoryTotal() == null) ? 0 : account.getMemoryTotal();
  String memoryAvail=(accountIsAdmin || memoryLimit == -1) ? ""String_Node_Str"" : String.valueOf(memoryLimit - memoryTotal);
  response.setMemoryLimit(memoryLimitDisplay);
  response.setMemoryTotal(memoryTotal);
  response.setMemoryAvailable(memoryAvail);
  long primaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getPrimaryStorageLimit(),account.getId(),ResourceType.primary_storage);
  String primaryStorageLimitDisplay=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(primaryStorageLimit / ResourceType.bytesToGiB);
  long primaryStorageTotal=(account.getPrimaryStorageTotal() == null) ? 0 : (account.getPrimaryStorageTotal() / ResourceType.bytesToGiB);
  String primaryStorageAvail=(accountIsAdmin || primaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((primaryStorageLimit / ResourceType.bytesToGiB) - primaryStorageTotal);
  response.setPrimaryStorageLimit(primaryStorageLimitDisplay);
  response.setPrimaryStorageTotal(primaryStorageTotal);
  response.setPrimaryStorageAvailable(primaryStorageAvail);
  long secondaryStorageLimit=ApiDBUtils.findCorrectResourceLimit(account.getSecondaryStorageLimit(),account.getId(),ResourceType.secondary_storage);
  String secondaryStorageLimitDisplay=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf(secondaryStorageLimit / ResourceType.bytesToGiB);
  long secondaryStorageTotal=(account.getSecondaryStorageTotal() == null) ? 0 : (account.getSecondaryStorageTotal() / ResourceType.bytesToGiB);
  String secondaryStorageAvail=(accountIsAdmin || secondaryStorageLimit == -1) ? ""String_Node_Str"" : String.valueOf((secondaryStorageLimit / ResourceType.bytesToGiB) - secondaryStorageTotal);
  response.setSecondaryStorageLimit(secondaryStorageLimitDisplay);
  response.setSecondaryStorageTotal(secondaryStorageTotal);
  response.setSecondaryStorageAvailable(secondaryStorageAvail);
}",0.9957740526834764
106145,"@Override public DataObject chooseOneToBeReplaced(DataStore store){
  Calendar cal=Calendar.getInstance();
  cal.setTime(DateUtil.now());
  cal.add(Calendar.DAY_OF_MONTH,-unusedTimeInterval.intValue());
  Date bef=cal.getTime();
  QueryBuilder<TemplateDataStoreVO> sc=QueryBuilder.create(TemplateDataStoreVO.class);
  sc.and(sc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  sc.and(sc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  sc.and(sc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  sc.and(sc.entity().getDataStoreRole(),SearchCriteria.Op.EQ,store.getRole());
  sc.and(sc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  TemplateDataStoreVO template=sc.find();
  if (template != null) {
    return templateFactory.getTemplate(template.getTemplateId(),store);
  }
  QueryBuilder<VolumeDataStoreVO> volSc=QueryBuilder.create(VolumeDataStoreVO.class);
  volSc.and(volSc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  volSc.and(volSc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  volSc.and(volSc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  volSc.and(volSc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  VolumeDataStoreVO volume=volSc.find();
  if (volume != null) {
    return volumeFactory.getVolume(volume.getVolumeId(),store);
  }
  QueryBuilder<SnapshotDataStoreVO> snapshotSc=QueryBuilder.create(SnapshotDataStoreVO.class);
  snapshotSc.and(snapshotSc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  snapshotSc.and(snapshotSc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  snapshotSc.and(snapshotSc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  snapshotSc.and(snapshotSc.entity().getRole(),SearchCriteria.Op.EQ,store.getRole());
  snapshotSc.and(snapshotSc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  SnapshotDataStoreVO snapshot=snapshotSc.find();
  if (snapshot != null) {
    return snapshotFactory.getSnapshot(snapshot.getSnapshotId(),store);
  }
  return null;
}","@Override public DataObject chooseOneToBeReplaced(DataStore store){
  if (unusedTimeInterval == null) {
    unusedTimeInterval=NumbersUtil.parseInt(configDao.getValue(Config.StorageCacheReplacementLRUTimeInterval.key()),30);
  }
  Calendar cal=Calendar.getInstance();
  cal.setTime(DateUtil.now());
  cal.add(Calendar.DAY_OF_MONTH,-unusedTimeInterval.intValue());
  Date bef=cal.getTime();
  QueryBuilder<TemplateDataStoreVO> sc=QueryBuilder.create(TemplateDataStoreVO.class);
  sc.and(sc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  sc.and(sc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  sc.and(sc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  sc.and(sc.entity().getDataStoreRole(),SearchCriteria.Op.EQ,store.getRole());
  sc.and(sc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  TemplateDataStoreVO template=sc.find();
  if (template != null) {
    return templateFactory.getTemplate(template.getTemplateId(),store);
  }
  QueryBuilder<VolumeDataStoreVO> volSc=QueryBuilder.create(VolumeDataStoreVO.class);
  volSc.and(volSc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  volSc.and(volSc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  volSc.and(volSc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  volSc.and(volSc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  VolumeDataStoreVO volume=volSc.find();
  if (volume != null) {
    return volumeFactory.getVolume(volume.getVolumeId(),store);
  }
  QueryBuilder<SnapshotDataStoreVO> snapshotSc=QueryBuilder.create(SnapshotDataStoreVO.class);
  snapshotSc.and(snapshotSc.entity().getLastUpdated(),SearchCriteria.Op.LT,bef);
  snapshotSc.and(snapshotSc.entity().getState(),SearchCriteria.Op.EQ,ObjectInDataStoreStateMachine.State.Ready);
  snapshotSc.and(snapshotSc.entity().getDataStoreId(),SearchCriteria.Op.EQ,store.getId());
  snapshotSc.and(snapshotSc.entity().getRole(),SearchCriteria.Op.EQ,store.getRole());
  snapshotSc.and(snapshotSc.entity().getRefCnt(),SearchCriteria.Op.EQ,0);
  SnapshotDataStoreVO snapshot=snapshotSc.find();
  if (snapshot != null) {
    return snapshotFactory.getSnapshot(snapshot.getSnapshotId(),store);
  }
  return null;
}",0.9627401064568388
106146,"@PostConstruct public void initialize(){
  unusedTimeInterval=NumbersUtil.parseInt(configDao.getValue(Config.StorageCacheReplacementLRUTimeInterval.key()),30);
}","@PostConstruct public void initialize(){
}",0.4137931034482758
106147,"protected KVMPhysicalDisk templateToPrimaryDownload(String templateUrl,KVMStoragePool primaryPool){
  int index=templateUrl.lastIndexOf(""String_Node_Str"");
  String mountpoint=templateUrl.substring(0,index);
  String templateName=null;
  if (index < templateUrl.length() - 1) {
    templateName=templateUrl.substring(index + 1);
  }
  KVMPhysicalDisk templateVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=_storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (templateName == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          templateVol=disk;
          break;
        }
      }
      if (templateVol == null) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
    }
 else {
      templateVol=secondaryPool.getPhysicalDisk(templateName);
    }
    KVMPhysicalDisk primaryVol=_storagePoolMgr.copyPhysicalDisk(templateVol,UUID.randomUUID().toString(),primaryPool);
    return primaryVol;
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (secondaryPool != null) {
      _storagePoolMgr.deleteStoragePool(secondaryPool.getType(),secondaryPool.getUuid());
    }
  }
}","protected KVMPhysicalDisk templateToPrimaryDownload(String templateUrl,KVMStoragePool primaryPool){
  int index=templateUrl.lastIndexOf(""String_Node_Str"");
  String mountpoint=templateUrl.substring(0,index);
  String templateName=null;
  if (index < templateUrl.length() - 1) {
    templateName=templateUrl.substring(index + 1);
  }
  KVMPhysicalDisk templateVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=_storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (templateName == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          templateVol=disk;
          break;
        }
      }
      if (templateVol == null) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
    }
 else {
      templateVol=secondaryPool.getPhysicalDisk(templateName);
    }
    KVMPhysicalDisk primaryVol=_storagePoolMgr.copyPhysicalDisk(templateVol,UUID.randomUUID().toString(),primaryPool,0);
    return primaryVol;
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (secondaryPool != null) {
      _storagePoolMgr.deleteStoragePool(secondaryPool.getType(),secondaryPool.getUuid());
    }
  }
}",0.9993472584856395
106148,"public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,KVMStoragePool destPool){
  StorageAdaptor adaptor=getStorageAdaptor(destPool.getType());
  if (destPool.getType() == StoragePoolType.RBD) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.RAW,template.getSize(),destPool);
  }
 else   if (destPool.getType() == StoragePoolType.CLVM) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.RAW,template.getSize(),destPool);
  }
 else   if (template.getFormat() == PhysicalDiskFormat.DIR) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.DIR,template.getSize(),destPool);
  }
 else {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.QCOW2,template.getSize(),destPool);
  }
}","public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,KVMStoragePool destPool,int timeout){
  StorageAdaptor adaptor=getStorageAdaptor(destPool.getType());
  if (destPool.getType() == StoragePoolType.RBD) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.RAW,template.getSize(),destPool,timeout);
  }
 else   if (destPool.getType() == StoragePoolType.CLVM) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.RAW,template.getSize(),destPool,timeout);
  }
 else   if (template.getFormat() == PhysicalDiskFormat.DIR) {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.DIR,template.getSize(),destPool,timeout);
  }
 else {
    return adaptor.createDiskFromTemplate(template,name,PhysicalDiskFormat.QCOW2,template.getSize(),destPool,timeout);
  }
}",0.9734620024125452
106149,"public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool){
  StorageAdaptor adaptor=getStorageAdaptor(destPool.getType());
  return adaptor.copyPhysicalDisk(disk,name,destPool);
}","public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  StorageAdaptor adaptor=getStorageAdaptor(destPool.getType());
  return adaptor.copyPhysicalDisk(disk,name,destPool,timeout);
}",0.9563318777292577
106150,"@Override public Answer backupSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)snapshot.getDataStore();
  SnapshotObjectTO destSnapshot=(SnapshotObjectTO)destData;
  DataStoreTO imageStore=destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return backupSnapshotForObjectStore(cmd);
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String secondaryStoragePoolUrl=nfsImageStore.getUrl();
  int index=snapshot.getPath().lastIndexOf(""String_Node_Str"");
  String snapshotName=snapshot.getPath().substring(index + 1);
  String volumePath=snapshot.getVolume().getPath();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  String vmName=snapshot.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  try {
    Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=destSnapshot.getPath();
    snapshotDestPath=ssPmountPath + File.separator + snapshotRelPath;
    KVMPhysicalDisk snapshotDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),volumePath);
    KVMStoragePool primaryPool=snapshotDisk.getPool();
    if (primaryPool.getType() == StoragePoolType.RBD) {
      try {
        Rados r=new Rados(primaryPool.getAuthUserName());
        r.confSet(""String_Node_Str"",primaryPool.getSourceHost() + ""String_Node_Str"" + primaryPool.getSourcePort());
        r.confSet(""String_Node_Str"",primaryPool.getAuthSecret());
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
        Rbd rbd=new Rbd(io);
        RbdImage image=rbd.open(snapshotDisk.getName(),snapshotName);
        long startTime=System.currentTimeMillis() / 1000;
        File snapDir=new File(snapshotDestPath);
        s_logger.debug(""String_Node_Str"" + snapDir.getAbsolutePath() + ""String_Node_Str"");
        FileUtils.forceMkdir(snapDir);
        File snapFile=new File(snapshotDestPath + ""String_Node_Str"" + snapshotName);
        s_logger.debug(""String_Node_Str"" + snapFile.getAbsolutePath());
        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(snapFile));
        int chunkSize=4194304;
        long offset=0;
        while (true) {
          byte[] buf=new byte[chunkSize];
          int bytes=image.read(offset,buf,chunkSize);
          if (bytes <= 0) {
            break;
          }
          bos.write(buf,0,bytes);
          offset+=bytes;
        }
        s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapFile.getAbsolutePath()+ ""String_Node_Str""+ offset);
        bos.close();
        s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDisk.getName());
        image.snapRemove(snapshotName);
        r.ioCtxDestroy(io);
      }
 catch (      RadosException e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      RbdException e) {
        s_logger.error(""String_Node_Str"" + snapshotDisk.getName() + ""String_Node_Str""+ e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      FileNotFoundException e) {
        s_logger.error(""String_Node_Str"" + snapshotDestPath + ""String_Node_Str""+ e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      IOException e) {
        s_logger.debug(""String_Node_Str"" + snapshotDestPath);
        return new CopyCmdAnswer(e.toString());
      }
    }
 else {
      Script command=new Script(_manageSnapshotPath,cmd.getWait() * 1000,s_logger);
      command.add(""String_Node_Str"",snapshotDisk.getPath());
      command.add(""String_Node_Str"",snapshotName);
      command.add(""String_Node_Str"",snapshotDestPath);
      command.add(""String_Node_Str"",snapshotName);
      String result=command.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CopyCmdAnswer(result);
      }
    }
    DomainInfo.DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=this.resource.getDomain(conn,vmName);
        state=vm.getInfo().state;
      }
 catch (      LibvirtException e) {
        s_logger.trace(""String_Node_Str"",e);
      }
    }
    KVMStoragePool primaryStorage=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      snap.delete(0);
      vm=this.resource.getDomain(conn,vmName);
      state=vm.getInfo().state;
      if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      if (primaryPool.getType() != StoragePoolType.RBD) {
        Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
        command.add(""String_Node_Str"",snapshotDisk.getPath());
        command.add(""String_Node_Str"",snapshotName);
        String result=command.execute();
        if (result != null) {
          s_logger.debug(""String_Node_Str"" + result);
          return new CopyCmdAnswer(""String_Node_Str"" + result);
        }
      }
    }
    SnapshotObjectTO newSnapshot=new SnapshotObjectTO();
    newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);
    return new CopyCmdAnswer(newSnapshot);
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
catch (  CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      secondaryStoragePool.delete();
    }
  }
}","@Override public Answer backupSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)snapshot.getDataStore();
  SnapshotObjectTO destSnapshot=(SnapshotObjectTO)destData;
  DataStoreTO imageStore=destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return backupSnapshotForObjectStore(cmd);
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String secondaryStoragePoolUrl=nfsImageStore.getUrl();
  int index=snapshot.getPath().lastIndexOf(""String_Node_Str"");
  String snapshotName=snapshot.getPath().substring(index + 1);
  String volumePath=snapshot.getVolume().getPath();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  String vmName=snapshot.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  try {
    Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=destSnapshot.getPath();
    snapshotDestPath=ssPmountPath + File.separator + snapshotRelPath;
    KVMPhysicalDisk snapshotDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),volumePath);
    KVMStoragePool primaryPool=snapshotDisk.getPool();
    if (primaryPool.getType() == StoragePoolType.RBD) {
      try {
        Rados r=new Rados(primaryPool.getAuthUserName());
        r.confSet(""String_Node_Str"",primaryPool.getSourceHost() + ""String_Node_Str"" + primaryPool.getSourcePort());
        r.confSet(""String_Node_Str"",primaryPool.getAuthSecret());
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
        Rbd rbd=new Rbd(io);
        RbdImage image=rbd.open(snapshotDisk.getName(),snapshotName);
        long startTime=System.currentTimeMillis() / 1000;
        File snapDir=new File(snapshotDestPath);
        s_logger.debug(""String_Node_Str"" + snapDir.getAbsolutePath() + ""String_Node_Str"");
        FileUtils.forceMkdir(snapDir);
        File snapFile=new File(snapshotDestPath + ""String_Node_Str"" + snapshotName);
        s_logger.debug(""String_Node_Str"" + snapFile.getAbsolutePath());
        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(snapFile));
        int chunkSize=4194304;
        long offset=0;
        while (true) {
          byte[] buf=new byte[chunkSize];
          int bytes=image.read(offset,buf,chunkSize);
          if (bytes <= 0) {
            break;
          }
          bos.write(buf,0,bytes);
          offset+=bytes;
        }
        s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapFile.getAbsolutePath()+ ""String_Node_Str""+ offset);
        bos.close();
        s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDisk.getName());
        image.snapRemove(snapshotName);
        r.ioCtxDestroy(io);
      }
 catch (      RadosException e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      RbdException e) {
        s_logger.error(""String_Node_Str"" + snapshotDisk.getName() + ""String_Node_Str""+ e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      FileNotFoundException e) {
        s_logger.error(""String_Node_Str"" + snapshotDestPath + ""String_Node_Str""+ e.getMessage());
        return new CopyCmdAnswer(e.toString());
      }
catch (      IOException e) {
        s_logger.debug(""String_Node_Str"" + snapshotDestPath);
        return new CopyCmdAnswer(e.toString());
      }
    }
 else {
      Script command=new Script(_manageSnapshotPath,cmd.getWaitInMillSeconds(),s_logger);
      command.add(""String_Node_Str"",snapshotDisk.getPath());
      command.add(""String_Node_Str"",snapshotName);
      command.add(""String_Node_Str"",snapshotDestPath);
      command.add(""String_Node_Str"",snapshotName);
      String result=command.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CopyCmdAnswer(result);
      }
    }
    DomainInfo.DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=this.resource.getDomain(conn,vmName);
        state=vm.getInfo().state;
      }
 catch (      LibvirtException e) {
        s_logger.trace(""String_Node_Str"",e);
      }
    }
    KVMStoragePool primaryStorage=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      snap.delete(0);
      vm=this.resource.getDomain(conn,vmName);
      state=vm.getInfo().state;
      if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      if (primaryPool.getType() != StoragePoolType.RBD) {
        Script command=new Script(_manageSnapshotPath,_cmdsTimeout,s_logger);
        command.add(""String_Node_Str"",snapshotDisk.getPath());
        command.add(""String_Node_Str"",snapshotName);
        String result=command.execute();
        if (result != null) {
          s_logger.debug(""String_Node_Str"" + result);
          return new CopyCmdAnswer(""String_Node_Str"" + result);
        }
      }
    }
    SnapshotObjectTO newSnapshot=new SnapshotObjectTO();
    newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);
    return new CopyCmdAnswer(newSnapshot);
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
catch (  CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      secondaryStoragePool.delete();
    }
  }
}",0.998013573911604
106151,"private KVMPhysicalDisk templateToPrimaryDownload(String templateUrl,KVMStoragePool primaryPool){
  int index=templateUrl.lastIndexOf(""String_Node_Str"");
  String mountpoint=templateUrl.substring(0,index);
  String templateName=null;
  if (index < templateUrl.length() - 1) {
    templateName=templateUrl.substring(index + 1);
  }
  KVMPhysicalDisk templateVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (templateName == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          templateVol=disk;
          break;
        }
      }
      if (templateVol == null) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
    }
 else {
      templateVol=secondaryPool.getPhysicalDisk(templateName);
    }
    KVMPhysicalDisk primaryVol=storagePoolMgr.copyPhysicalDisk(templateVol,UUID.randomUUID().toString(),primaryPool);
    return primaryVol;
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (secondaryPool != null) {
      secondaryPool.delete();
    }
  }
}","private KVMPhysicalDisk templateToPrimaryDownload(String templateUrl,KVMStoragePool primaryPool,int timeout){
  int index=templateUrl.lastIndexOf(""String_Node_Str"");
  String mountpoint=templateUrl.substring(0,index);
  String templateName=null;
  if (index < templateUrl.length() - 1) {
    templateName=templateUrl.substring(index + 1);
  }
  KVMPhysicalDisk templateVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (templateName == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          templateVol=disk;
          break;
        }
      }
      if (templateVol == null) {
        s_logger.error(""String_Node_Str"" + secondaryPool.getUuid());
        return null;
      }
    }
 else {
      templateVol=secondaryPool.getPhysicalDisk(templateName);
    }
    KVMPhysicalDisk primaryVol=storagePoolMgr.copyPhysicalDisk(templateVol,UUID.randomUUID().toString(),primaryPool,timeout);
    return primaryVol;
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (secondaryPool != null) {
      secondaryPool.delete();
    }
  }
}",0.99322951929587
106152,"@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  DataStoreTO srcStore=srcData.getDataStore();
  DataStoreTO destStore=destData.getDataStore();
  VolumeObjectTO srcVol=(VolumeObjectTO)srcData;
  ImageFormat srcFormat=srcVol.getFormat();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)destStore;
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsStore=(NfsTO)srcStore;
  String srcVolumePath=srcData.getPath();
  String secondaryStorageUrl=nfsStore.getUrl();
  KVMStoragePool secondaryStoragePool=null;
  KVMStoragePool primaryPool=null;
  try {
    try {
      primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    }
 catch (    CloudRuntimeException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        primaryPool=storagePoolMgr.createStoragePool(primaryStore.getUuid(),primaryStore.getHost(),primaryStore.getPort(),primaryStore.getPath(),null,primaryStore.getPoolType());
      }
 else {
        return new CopyCmdAnswer(e.getMessage());
      }
    }
    String volumeName=UUID.randomUUID().toString();
    int index=srcVolumePath.lastIndexOf(File.separator);
    String volumeDir=srcVolumePath.substring(0,index);
    String srcVolumeName=srcVolumePath.substring(index + 1);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl + File.separator + volumeDir);
    if (!srcVolumeName.endsWith(""String_Node_Str"") && srcFormat == ImageFormat.QCOW2) {
      srcVolumeName=srcVolumeName + ""String_Node_Str"";
    }
    KVMPhysicalDisk volume=secondaryStoragePool.getPhysicalDisk(srcVolumeName);
    volume.setFormat(PhysicalDiskFormat.valueOf(srcFormat.toString()));
    KVMPhysicalDisk newDisk=storagePoolMgr.copyPhysicalDisk(volume,volumeName,primaryPool);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setFormat(ImageFormat.valueOf(newDisk.getFormat().toString().toUpperCase()));
    newVol.setPath(volumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
}","@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  DataStoreTO srcStore=srcData.getDataStore();
  DataStoreTO destStore=destData.getDataStore();
  VolumeObjectTO srcVol=(VolumeObjectTO)srcData;
  ImageFormat srcFormat=srcVol.getFormat();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)destStore;
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsStore=(NfsTO)srcStore;
  String srcVolumePath=srcData.getPath();
  String secondaryStorageUrl=nfsStore.getUrl();
  KVMStoragePool secondaryStoragePool=null;
  KVMStoragePool primaryPool=null;
  try {
    try {
      primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    }
 catch (    CloudRuntimeException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        primaryPool=storagePoolMgr.createStoragePool(primaryStore.getUuid(),primaryStore.getHost(),primaryStore.getPort(),primaryStore.getPath(),null,primaryStore.getPoolType());
      }
 else {
        return new CopyCmdAnswer(e.getMessage());
      }
    }
    String volumeName=UUID.randomUUID().toString();
    int index=srcVolumePath.lastIndexOf(File.separator);
    String volumeDir=srcVolumePath.substring(0,index);
    String srcVolumeName=srcVolumePath.substring(index + 1);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl + File.separator + volumeDir);
    if (!srcVolumeName.endsWith(""String_Node_Str"") && srcFormat == ImageFormat.QCOW2) {
      srcVolumeName=srcVolumeName + ""String_Node_Str"";
    }
    KVMPhysicalDisk volume=secondaryStoragePool.getPhysicalDisk(srcVolumeName);
    volume.setFormat(PhysicalDiskFormat.valueOf(srcFormat.toString()));
    KVMPhysicalDisk newDisk=storagePoolMgr.copyPhysicalDisk(volume,volumeName,primaryPool,cmd.getWaitInMillSeconds());
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setFormat(ImageFormat.valueOf(newDisk.getFormat().toString().toUpperCase()));
    newVol.setPath(volumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
}",0.9943121971771646
106153,"@Override public Answer copyVolumeFromPrimaryToSecondary(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  VolumeObjectTO srcVol=(VolumeObjectTO)srcData;
  VolumeObjectTO destVol=(VolumeObjectTO)destData;
  ImageFormat srcFormat=srcVol.getFormat();
  ImageFormat destFormat=destVol.getFormat();
  DataStoreTO srcStore=srcData.getDataStore();
  DataStoreTO destStore=destData.getDataStore();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)srcStore;
  if (!(destStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsStore=(NfsTO)destStore;
  String srcVolumePath=srcData.getPath();
  String destVolumePath=destData.getPath();
  String secondaryStorageUrl=nfsStore.getUrl();
  KVMStoragePool secondaryStoragePool=null;
  try {
    String volumeName=UUID.randomUUID().toString();
    String destVolumeName=volumeName + ""String_Node_Str"" + destFormat.getFileExtension();
    KVMPhysicalDisk volume=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),srcVolumePath);
    volume.setFormat(PhysicalDiskFormat.valueOf(srcFormat.toString()));
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl);
    secondaryStoragePool.createFolder(destVolumePath);
    storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl + File.separator + destVolumePath);
    storagePoolMgr.copyPhysicalDisk(volume,destVolumeName,secondaryStoragePool);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(destVolumePath + File.separator + destVolumeName);
    newVol.setFormat(destFormat);
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
}","@Override public Answer copyVolumeFromPrimaryToSecondary(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  VolumeObjectTO srcVol=(VolumeObjectTO)srcData;
  VolumeObjectTO destVol=(VolumeObjectTO)destData;
  ImageFormat srcFormat=srcVol.getFormat();
  ImageFormat destFormat=destVol.getFormat();
  DataStoreTO srcStore=srcData.getDataStore();
  DataStoreTO destStore=destData.getDataStore();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)srcStore;
  if (!(destStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsStore=(NfsTO)destStore;
  String srcVolumePath=srcData.getPath();
  String destVolumePath=destData.getPath();
  String secondaryStorageUrl=nfsStore.getUrl();
  KVMStoragePool secondaryStoragePool=null;
  try {
    String volumeName=UUID.randomUUID().toString();
    String destVolumeName=volumeName + ""String_Node_Str"" + destFormat.getFileExtension();
    KVMPhysicalDisk volume=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),srcVolumePath);
    volume.setFormat(PhysicalDiskFormat.valueOf(srcFormat.toString()));
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl);
    secondaryStoragePool.createFolder(destVolumePath);
    storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl + File.separator + destVolumePath);
    storagePoolMgr.copyPhysicalDisk(volume,destVolumeName,secondaryStoragePool,cmd.getWaitInMillSeconds());
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(destVolumePath + File.separator + destVolumeName);
    newVol.setFormat(destFormat);
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
}",0.9933709796219004
106154,"protected Answer backupSnapshotForObjectStore(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataStoreTO imageStore=destData.getDataStore();
  DataTO cacheData=cmd.getCacheTO();
  if (cacheData == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  DataStoreTO cacheStore=cacheData.getDataStore();
  ((SnapshotObjectTO)destData).setDataStore(cacheStore);
  CopyCmdAnswer answer=(CopyCmdAnswer)backupSnapshot(cmd);
  if (!answer.getResult()) {
    return answer;
  }
  SnapshotObjectTO snapshotOnCacheStore=(SnapshotObjectTO)answer.getNewData();
  snapshotOnCacheStore.setDataStore(cacheStore);
  ((SnapshotObjectTO)destData).setDataStore(imageStore);
  CopyCommand newCpyCmd=new CopyCommand(snapshotOnCacheStore,destData,cmd.getWait(),cmd.executeInSequence());
  return copyToObjectStore(newCpyCmd);
}","protected Answer backupSnapshotForObjectStore(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataStoreTO imageStore=destData.getDataStore();
  DataTO cacheData=cmd.getCacheTO();
  if (cacheData == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  DataStoreTO cacheStore=cacheData.getDataStore();
  ((SnapshotObjectTO)destData).setDataStore(cacheStore);
  CopyCmdAnswer answer=(CopyCmdAnswer)backupSnapshot(cmd);
  if (!answer.getResult()) {
    return answer;
  }
  SnapshotObjectTO snapshotOnCacheStore=(SnapshotObjectTO)answer.getNewData();
  snapshotOnCacheStore.setDataStore(cacheStore);
  ((SnapshotObjectTO)destData).setDataStore(imageStore);
  CopyCommand newCpyCmd=new CopyCommand(snapshotOnCacheStore,destData,cmd.getWaitInMillSeconds(),cmd.executeInSequence());
  return copyToObjectStore(newCpyCmd);
}",0.9928922908693276
106155,"@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  try {
    DataTO srcData=cmd.getSrcTO();
    SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
    DataTO destData=cmd.getDestTO();
    PrimaryDataStoreTO pool=(PrimaryDataStoreTO)destData.getDataStore();
    DataStoreTO imageStore=srcData.getDataStore();
    VolumeObjectTO volume=snapshot.getVolume();
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsImageStore=(NfsTO)imageStore;
    String snapshotFullPath=snapshot.getPath();
    int index=snapshotFullPath.lastIndexOf(""String_Node_Str"");
    String snapshotPath=snapshotFullPath.substring(0,index);
    String snapshotName=snapshotFullPath.substring(index + 1);
    KVMStoragePool secondaryPool=storagePoolMgr.getStoragePoolByURI(nfsImageStore.getUrl() + File.separator + snapshotPath);
    KVMPhysicalDisk snapshotDisk=secondaryPool.getPhysicalDisk(snapshotName);
    if (volume.getFormat() == ImageFormat.RAW) {
      snapshotDisk.setFormat(PhysicalDiskFormat.RAW);
    }
 else     if (volume.getFormat() == ImageFormat.QCOW2) {
      snapshotDisk.setFormat(PhysicalDiskFormat.QCOW2);
    }
    String primaryUuid=pool.getUuid();
    KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(pool.getPoolType(),primaryUuid);
    String volUuid=UUID.randomUUID().toString();
    KVMPhysicalDisk disk=storagePoolMgr.copyPhysicalDisk(snapshotDisk,volUuid,primaryPool);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(disk.getName());
    newVol.setSize(disk.getVirtualSize());
    if (primaryPool.getType() == StoragePoolType.RBD) {
      newVol.setFormat(ImageFormat.RAW);
    }
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
}","@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  try {
    DataTO srcData=cmd.getSrcTO();
    SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
    DataTO destData=cmd.getDestTO();
    PrimaryDataStoreTO pool=(PrimaryDataStoreTO)destData.getDataStore();
    DataStoreTO imageStore=srcData.getDataStore();
    VolumeObjectTO volume=snapshot.getVolume();
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsImageStore=(NfsTO)imageStore;
    String snapshotFullPath=snapshot.getPath();
    int index=snapshotFullPath.lastIndexOf(""String_Node_Str"");
    String snapshotPath=snapshotFullPath.substring(0,index);
    String snapshotName=snapshotFullPath.substring(index + 1);
    KVMStoragePool secondaryPool=storagePoolMgr.getStoragePoolByURI(nfsImageStore.getUrl() + File.separator + snapshotPath);
    KVMPhysicalDisk snapshotDisk=secondaryPool.getPhysicalDisk(snapshotName);
    if (volume.getFormat() == ImageFormat.RAW) {
      snapshotDisk.setFormat(PhysicalDiskFormat.RAW);
    }
 else     if (volume.getFormat() == ImageFormat.QCOW2) {
      snapshotDisk.setFormat(PhysicalDiskFormat.QCOW2);
    }
    String primaryUuid=pool.getUuid();
    KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(pool.getPoolType(),primaryUuid);
    String volUuid=UUID.randomUUID().toString();
    KVMPhysicalDisk disk=storagePoolMgr.copyPhysicalDisk(snapshotDisk,volUuid,primaryPool,cmd.getWaitInMillSeconds());
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(disk.getName());
    newVol.setSize(disk.getVirtualSize());
    if (primaryPool.getType() == StoragePoolType.RBD) {
      newVol.setFormat(ImageFormat.RAW);
    }
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
}",0.992620934681607
106156,"@Override public Answer createTemplateFromVolume(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  int wait=cmd.getWait();
  TemplateObjectTO template=(TemplateObjectTO)destData;
  DataStoreTO imageStore=template.getDataStore();
  VolumeObjectTO volume=(VolumeObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  KVMStoragePool secondaryStorage=null;
  KVMStoragePool primary=null;
  try {
    String templateFolder=template.getPath();
    secondaryStorage=storagePoolMgr.getStoragePoolByURI(nfsImageStore.getUrl());
    primary=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk disk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),volume.getPath());
    String tmpltPath=secondaryStorage.getLocalPath() + File.separator + templateFolder;
    this.storageLayer.mkdirs(tmpltPath);
    String templateName=UUID.randomUUID().toString();
    if (primary.getType() != StoragePoolType.RBD) {
      Script command=new Script(_createTmplPath,wait * 1000,s_logger);
      command.add(""String_Node_Str"",disk.getPath());
      command.add(""String_Node_Str"",tmpltPath);
      command.add(""String_Node_Str"",templateName + ""String_Node_Str"");
      String result=command.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CopyCmdAnswer(result);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ templateName);
      QemuImgFile srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(),primary.getSourcePort(),primary.getAuthUserName(),primary.getAuthSecret(),disk.getPath()));
      srcFile.setFormat(PhysicalDiskFormat.RAW);
      QemuImgFile destFile=new QemuImgFile(tmpltPath + ""String_Node_Str"" + templateName+ ""String_Node_Str"");
      destFile.setFormat(PhysicalDiskFormat.QCOW2);
      QemuImg q=new QemuImg();
      try {
        q.convert(srcFile,destFile);
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      }
      File templateProp=new File(tmpltPath + ""String_Node_Str"");
      if (!templateProp.exists()) {
        templateProp.createNewFile();
      }
      String templateContent=""String_Node_Str"" + templateName + ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      Date date=new Date();
      templateContent+=""String_Node_Str"" + dateFormat.format(date) + System.getProperty(""String_Node_Str"");
      FileOutputStream templFo=new FileOutputStream(templateProp);
      templFo.write(templateContent.getBytes());
      templFo.flush();
      templFo.close();
    }
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,this.storageLayer);
    Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure(""String_Node_Str"",params);
    FormatInfo info=qcow2Processor.process(tmpltPath,null,templateName);
    TemplateLocation loc=new TemplateLocation(this.storageLayer,tmpltPath);
    loc.create(1,true,templateName);
    loc.addFormat(info);
    loc.save();
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(templateFolder + File.separator + templateName+ ""String_Node_Str"");
    newTemplate.setSize(info.virtualSize);
    newTemplate.setPhysicalSize(info.size);
    newTemplate.setFormat(ImageFormat.QCOW2);
    newTemplate.setName(templateName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStorage != null) {
      secondaryStorage.delete();
    }
  }
}","@Override public Answer createTemplateFromVolume(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  int wait=cmd.getWaitInMillSeconds();
  TemplateObjectTO template=(TemplateObjectTO)destData;
  DataStoreTO imageStore=template.getDataStore();
  VolumeObjectTO volume=(VolumeObjectTO)srcData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  KVMStoragePool secondaryStorage=null;
  KVMStoragePool primary=null;
  try {
    String templateFolder=template.getPath();
    secondaryStorage=storagePoolMgr.getStoragePoolByURI(nfsImageStore.getUrl());
    primary=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk disk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),volume.getPath());
    String tmpltPath=secondaryStorage.getLocalPath() + File.separator + templateFolder;
    this.storageLayer.mkdirs(tmpltPath);
    String templateName=UUID.randomUUID().toString();
    if (primary.getType() != StoragePoolType.RBD) {
      Script command=new Script(_createTmplPath,wait,s_logger);
      command.add(""String_Node_Str"",disk.getPath());
      command.add(""String_Node_Str"",tmpltPath);
      command.add(""String_Node_Str"",templateName + ""String_Node_Str"");
      String result=command.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CopyCmdAnswer(result);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ templateName);
      QemuImgFile srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(),primary.getSourcePort(),primary.getAuthUserName(),primary.getAuthSecret(),disk.getPath()));
      srcFile.setFormat(PhysicalDiskFormat.RAW);
      QemuImgFile destFile=new QemuImgFile(tmpltPath + ""String_Node_Str"" + templateName+ ""String_Node_Str"");
      destFile.setFormat(PhysicalDiskFormat.QCOW2);
      QemuImg q=new QemuImg(cmd.getWaitInMillSeconds());
      try {
        q.convert(srcFile,destFile);
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      }
      File templateProp=new File(tmpltPath + ""String_Node_Str"");
      if (!templateProp.exists()) {
        templateProp.createNewFile();
      }
      String templateContent=""String_Node_Str"" + templateName + ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      Date date=new Date();
      templateContent+=""String_Node_Str"" + dateFormat.format(date) + System.getProperty(""String_Node_Str"");
      FileOutputStream templFo=new FileOutputStream(templateProp);
      templFo.write(templateContent.getBytes());
      templFo.flush();
      templFo.close();
    }
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,this.storageLayer);
    Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure(""String_Node_Str"",params);
    FormatInfo info=qcow2Processor.process(tmpltPath,null,templateName);
    TemplateLocation loc=new TemplateLocation(this.storageLayer,tmpltPath);
    loc.create(1,true,templateName);
    loc.addFormat(info);
    loc.save();
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(templateFolder + File.separator + templateName+ ""String_Node_Str"");
    newTemplate.setSize(info.virtualSize);
    newTemplate.setPhysicalSize(info.size);
    newTemplate.setFormat(ImageFormat.QCOW2);
    newTemplate.setName(templateName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryStorage != null) {
      secondaryStorage.delete();
    }
  }
}",0.9943737769080236
106157,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO imageStore=template.getDataStore();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String tmplturl=nfsImageStore.getUrl() + File.separator + template.getPath();
  int index=tmplturl.lastIndexOf(""String_Node_Str"");
  String mountpoint=tmplturl.substring(0,index);
  String tmpltname=null;
  if (index < tmplturl.length() - 1) {
    tmpltname=tmplturl.substring(index + 1);
  }
  KVMPhysicalDisk tmplVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (tmpltname == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        return new PrimaryStorageDownloadAnswer(""String_Node_Str"" + secondaryPool.getUuid());
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          tmplVol=disk;
          break;
        }
      }
      if (tmplVol == null) {
        return new PrimaryStorageDownloadAnswer(""String_Node_Str"" + secondaryPool.getUuid());
      }
    }
 else {
      tmplVol=secondaryPool.getPhysicalDisk(tmpltname);
    }
    KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,UUID.randomUUID().toString(),primaryPool);
    DataTO data=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplate=new TemplateObjectTO();
      newTemplate.setPath(primaryVol.getName());
      if (primaryPool.getType() == StoragePoolType.RBD) {
        newTemplate.setFormat(ImageFormat.RAW);
      }
 else {
        newTemplate.setFormat(ImageFormat.QCOW2);
      }
      data=newTemplate;
    }
 else     if (destData.getObjectType() == DataObjectType.VOLUME) {
      VolumeObjectTO volumeObjectTO=new VolumeObjectTO();
      volumeObjectTO.setPath(primaryVol.getName());
      if (primaryVol.getFormat() == PhysicalDiskFormat.RAW)       volumeObjectTO.setFormat(ImageFormat.RAW);
 else       if (primaryVol.getFormat() == PhysicalDiskFormat.QCOW2) {
        volumeObjectTO.setFormat(ImageFormat.QCOW2);
      }
      data=volumeObjectTO;
    }
    return new CopyCmdAnswer(data);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryPool != null) {
      secondaryPool.delete();
    }
  }
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO imageStore=template.getDataStore();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)destData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String tmplturl=nfsImageStore.getUrl() + File.separator + template.getPath();
  int index=tmplturl.lastIndexOf(""String_Node_Str"");
  String mountpoint=tmplturl.substring(0,index);
  String tmpltname=null;
  if (index < tmplturl.length() - 1) {
    tmpltname=tmplturl.substring(index + 1);
  }
  KVMPhysicalDisk tmplVol=null;
  KVMStoragePool secondaryPool=null;
  try {
    secondaryPool=storagePoolMgr.getStoragePoolByURI(mountpoint);
    if (tmpltname == null) {
      secondaryPool.refresh();
      List<KVMPhysicalDisk> disks=secondaryPool.listPhysicalDisks();
      if (disks == null || disks.isEmpty()) {
        return new PrimaryStorageDownloadAnswer(""String_Node_Str"" + secondaryPool.getUuid());
      }
      for (      KVMPhysicalDisk disk : disks) {
        if (disk.getName().endsWith(""String_Node_Str"")) {
          tmplVol=disk;
          break;
        }
      }
      if (tmplVol == null) {
        return new PrimaryStorageDownloadAnswer(""String_Node_Str"" + secondaryPool.getUuid());
      }
    }
 else {
      tmplVol=secondaryPool.getPhysicalDisk(tmpltname);
    }
    KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    KVMPhysicalDisk primaryVol=storagePoolMgr.copyPhysicalDisk(tmplVol,UUID.randomUUID().toString(),primaryPool,cmd.getWaitInMillSeconds());
    DataTO data=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplate=new TemplateObjectTO();
      newTemplate.setPath(primaryVol.getName());
      if (primaryPool.getType() == StoragePoolType.RBD) {
        newTemplate.setFormat(ImageFormat.RAW);
      }
 else {
        newTemplate.setFormat(ImageFormat.QCOW2);
      }
      data=newTemplate;
    }
 else     if (destData.getObjectType() == DataObjectType.VOLUME) {
      VolumeObjectTO volumeObjectTO=new VolumeObjectTO();
      volumeObjectTO.setPath(primaryVol.getName());
      if (primaryVol.getFormat() == PhysicalDiskFormat.RAW)       volumeObjectTO.setFormat(ImageFormat.RAW);
 else       if (primaryVol.getFormat() == PhysicalDiskFormat.QCOW2) {
        volumeObjectTO.setFormat(ImageFormat.QCOW2);
      }
      data=volumeObjectTO;
    }
    return new CopyCmdAnswer(data);
  }
 catch (  CloudRuntimeException e) {
    return new CopyCmdAnswer(e.toString());
  }
 finally {
    if (secondaryPool != null) {
      secondaryPool.delete();
    }
  }
}",0.995260663507109
106158,"@Override public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO imageStore=template.getDataStore();
  VolumeObjectTO volume=(VolumeObjectTO)destData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMPhysicalDisk BaseVol=null;
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    String templatePath=template.getPath();
    if (primaryPool.getType() == StoragePoolType.CLVM) {
      templatePath=((NfsTO)imageStore).getUrl() + File.separator + templatePath;
      vol=templateToPrimaryDownload(templatePath,primaryPool);
    }
 else {
      if (templatePath.contains(""String_Node_Str"")) {
        templatePath=templatePath.substring(templatePath.lastIndexOf(File.separator) + 1);
      }
      BaseVol=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),templatePath);
      vol=storagePoolMgr.createDiskFromTemplate(BaseVol,UUID.randomUUID().toString(),BaseVol.getPool());
    }
    if (vol == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(vol.getName());
    newVol.setSize(volume.getSize());
    if (vol.getFormat() == PhysicalDiskFormat.RAW) {
      newVol.setFormat(ImageFormat.RAW);
    }
 else     if (vol.getFormat() == PhysicalDiskFormat.QCOW2) {
      newVol.setFormat(ImageFormat.QCOW2);
    }
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
}","@Override public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  DataTO destData=cmd.getDestTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO imageStore=template.getDataStore();
  VolumeObjectTO volume=(VolumeObjectTO)destData;
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMPhysicalDisk BaseVol=null;
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    String templatePath=template.getPath();
    if (primaryPool.getType() == StoragePoolType.CLVM) {
      templatePath=((NfsTO)imageStore).getUrl() + File.separator + templatePath;
      vol=templateToPrimaryDownload(templatePath,primaryPool,cmd.getWaitInMillSeconds());
    }
 else {
      if (templatePath.contains(""String_Node_Str"")) {
        templatePath=templatePath.substring(templatePath.lastIndexOf(File.separator) + 1);
      }
      BaseVol=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),templatePath);
      vol=storagePoolMgr.createDiskFromTemplate(BaseVol,UUID.randomUUID().toString(),BaseVol.getPool(),cmd.getWaitInMillSeconds());
    }
    if (vol == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(vol.getName());
    newVol.setSize(volume.getSize());
    if (vol.getFormat() == PhysicalDiskFormat.RAW) {
      newVol.setFormat(ImageFormat.RAW);
    }
 else     if (vol.getFormat() == PhysicalDiskFormat.QCOW2) {
      newVol.setFormat(ImageFormat.QCOW2);
    }
    return new CopyCmdAnswer(newVol);
  }
 catch (  CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CopyCmdAnswer(e.toString());
  }
}",0.9851973684210528
106159,"/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool){
  String newUuid=UUID.randomUUID().toString();
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  try {
    if (destPool.getType() != StoragePoolType.RBD) {
      disk=destPool.createPhysicalDisk(newUuid,format,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath());
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath());
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath());
        QemuImg qemu=new QemuImg();
        qemu.create(destFile,backingFile);
      }
 else       if (format == PhysicalDiskFormat.RAW) {
        QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
        QemuImg qemu=new QemuImg();
        qemu.convert(sourceFile,destFile);
      }
    }
 else {
      format=PhysicalDiskFormat.RAW;
      disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
      disk.setFormat(format);
      disk.setSize(template.getVirtualSize());
      disk.setVirtualSize(disk.getSize());
      QemuImg qemu=new QemuImg();
      QemuImgFile srcFile;
      QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
      destFile.setFormat(format);
      if (srcPool.getType() != StoragePoolType.RBD) {
        srcFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.convert(srcFile,destFile);
      }
 else {
        try {
          if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
            s_logger.debug(""String_Node_Str"");
            Rados r=new Rados(srcPool.getAuthUserName());
            r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            r.connect();
            s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
            IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
            Rbd rbd=new Rbd(io);
            RbdImage srcImage=rbd.open(template.getName());
            if (srcImage.isOldFormat()) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ template.getVirtualSize()+ ""String_Node_Str"");
              rbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
              RbdImage destImage=rbd.open(disk.getName());
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.copy(srcImage,destImage);
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.close(destImage);
            }
 else {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ this.rbdTemplateSnapName);
              rbd.clone(template.getName(),this.rbdTemplateSnapName,io,disk.getName(),this.rbdFeatures,this.rbdOrder);
              s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ this.rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
            }
            rbd.close(srcImage);
            r.ioCtxDestroy(io);
          }
 else {
            s_logger.debug(""String_Node_Str"");
            Rados rSrc=new Rados(srcPool.getAuthUserName());
            rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            rSrc.connect();
            s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
            Rados rDest=new Rados(destPool.getAuthUserName());
            rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
            rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
            rDest.connect();
            s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
            IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
            Rbd sRbd=new Rbd(sIO);
            IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
            Rbd dRbd=new Rbd(dIO);
            s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
            dRbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
            RbdImage srcImage=sRbd.open(template.getName());
            RbdImage destImage=dRbd.open(disk.getName());
            s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
            sRbd.copy(srcImage,destImage);
            sRbd.close(srcImage);
            dRbd.close(destImage);
            rSrc.ioCtxDestroy(sIO);
            rDest.ioCtxDestroy(dIO);
          }
        }
 catch (        RadosException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
catch (        RbdException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
      }
    }
  }
 catch (  QemuImgException e) {
    s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
  }
  if (disk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ template.getName());
  }
  return disk;
}","/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool,int timeout){
  String newUuid=UUID.randomUUID().toString();
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  try {
    if (destPool.getType() != StoragePoolType.RBD) {
      disk=destPool.createPhysicalDisk(newUuid,format,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath());
        QemuImg qemu=new QemuImg(timeout);
        qemu.create(destFile,backingFile);
      }
 else       if (format == PhysicalDiskFormat.RAW) {
        QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
        QemuImg qemu=new QemuImg(timeout);
        qemu.convert(sourceFile,destFile);
      }
    }
 else {
      format=PhysicalDiskFormat.RAW;
      disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
      disk.setFormat(format);
      disk.setSize(template.getVirtualSize());
      disk.setVirtualSize(disk.getSize());
      QemuImg qemu=new QemuImg(timeout);
      QemuImgFile srcFile;
      QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
      destFile.setFormat(format);
      if (srcPool.getType() != StoragePoolType.RBD) {
        srcFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.convert(srcFile,destFile);
      }
 else {
        try {
          if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
            s_logger.debug(""String_Node_Str"");
            Rados r=new Rados(srcPool.getAuthUserName());
            r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            r.connect();
            s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
            IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
            Rbd rbd=new Rbd(io);
            RbdImage srcImage=rbd.open(template.getName());
            if (srcImage.isOldFormat()) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ template.getVirtualSize()+ ""String_Node_Str"");
              rbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
              RbdImage destImage=rbd.open(disk.getName());
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.copy(srcImage,destImage);
              s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
              rbd.close(destImage);
            }
 else {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ this.rbdTemplateSnapName);
              rbd.clone(template.getName(),this.rbdTemplateSnapName,io,disk.getName(),this.rbdFeatures,this.rbdOrder);
              s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ this.rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
            }
            rbd.close(srcImage);
            r.ioCtxDestroy(io);
          }
 else {
            s_logger.debug(""String_Node_Str"");
            Rados rSrc=new Rados(srcPool.getAuthUserName());
            rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
            rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
            rSrc.connect();
            s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
            Rados rDest=new Rados(destPool.getAuthUserName());
            rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
            rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
            rDest.connect();
            s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
            IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
            Rbd sRbd=new Rbd(sIO);
            IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
            Rbd dRbd=new Rbd(dIO);
            s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
            dRbd.create(disk.getName(),template.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
            RbdImage srcImage=sRbd.open(template.getName());
            RbdImage destImage=dRbd.open(disk.getName());
            s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
            sRbd.copy(srcImage,destImage);
            sRbd.close(srcImage);
            dRbd.close(destImage);
            rSrc.ioCtxDestroy(sIO);
            rDest.ioCtxDestroy(dIO);
          }
        }
 catch (        RadosException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
catch (        RbdException e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          disk=null;
        }
      }
    }
  }
 catch (  QemuImgException e) {
    s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
  }
  if (disk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ template.getName());
  }
  return disk;
}",0.9964710118833272
106160,"/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,sourceFormat,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg();
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null) {
          Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath);
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    String sourceFile;
    boolean useTmpFile=false;
    try {
      if (sourceFormat != destFormat) {
        srcFile=new QemuImgFile(sourcePath,sourceFormat);
        destFile=new QemuImgFile(""String_Node_Str"" + name);
        s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str"");
        qemu.convert(srcFile,destFile);
        sourceFile=destFile.getFileName();
        useTmpFile=true;
      }
 else {
        sourceFile=sourcePath;
      }
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      s_logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str"");
      rbd.create(name,disk.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
      RbdImage image=rbd.open(name);
      File fh=new File(sourceFile);
      BufferedInputStream bis=new BufferedInputStream(new FileInputStream(fh));
      int chunkSize=4194304;
      long offset=0;
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ fh.length()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ chunkSize+ ""String_Node_Str"");
      while (true) {
        byte[] buf=new byte[chunkSize];
        int bytes=bis.read(buf);
        if (bytes <= 0) {
          break;
        }
        image.write(buf,offset,bytes);
        offset+=bytes;
      }
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ name+ ""String_Node_Str""+ offset);
      bis.close();
      if (useTmpFile) {
        s_logger.debug(""String_Node_Str"" + sourceFile);
        fh.delete();
      }
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapCreate(this.rbdTemplateSnapName);
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapProtect(this.rbdTemplateSnapName);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    IOException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}","/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,sourceFormat,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null) {
          String result=Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException(""String_Node_Str"" + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    String sourceFile;
    boolean useTmpFile=false;
    try {
      if (sourceFormat != destFormat) {
        srcFile=new QemuImgFile(sourcePath,sourceFormat);
        destFile=new QemuImgFile(""String_Node_Str"" + name);
        s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str"");
        qemu.convert(srcFile,destFile);
        sourceFile=destFile.getFileName();
        useTmpFile=true;
      }
 else {
        sourceFile=sourcePath;
      }
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      s_logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str"");
      rbd.create(name,disk.getVirtualSize(),this.rbdFeatures,this.rbdOrder);
      RbdImage image=rbd.open(name);
      File fh=new File(sourceFile);
      BufferedInputStream bis=new BufferedInputStream(new FileInputStream(fh));
      int chunkSize=4194304;
      long offset=0;
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ fh.length()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ chunkSize+ ""String_Node_Str"");
      while (true) {
        byte[] buf=new byte[chunkSize];
        int bytes=bis.read(buf);
        if (bytes <= 0) {
          break;
        }
        image.write(buf,offset,bytes);
        offset+=bytes;
      }
      s_logger.debug(""String_Node_Str"" + sourceFile + ""String_Node_Str""+ name+ ""String_Node_Str""+ offset);
      bis.close();
      if (useTmpFile) {
        s_logger.debug(""String_Node_Str"" + sourceFile);
        fh.delete();
      }
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapCreate(this.rbdTemplateSnapName);
      s_logger.debug(""String_Node_Str"" + this.rbdTemplateSnapName + ""String_Node_Str""+ name);
      image.snapProtect(this.rbdTemplateSnapName);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    IOException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}",0.9866866118175018
106161,"public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool);","public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,long size,KVMStoragePool destPool,int timeout);",0.96
106162,"public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPools);","public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPools,int timeout);",0.9428571428571428
106163,"@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid){
  KVMPhysicalDisk disk=null;
  try {
    disk=this._storageAdaptor.getPhysicalDisk(volumeUuid,this);
  }
 catch (  CloudRuntimeException e) {
    if ((this.getStoragePoolType() != StoragePoolType.NetworkFilesystem) || (this.getStoragePoolType() != StoragePoolType.Filesystem)) {
      throw e;
    }
  }
  if (disk != null) {
    return disk;
  }
  s_logger.debug(""String_Node_Str"");
  String localPoolPath=this.getLocalPath();
  File f=new File(localPoolPath + File.separator + volumeUuid);
  if (!f.exists()) {
    s_logger.debug(""String_Node_Str"" + volumeUuid + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + volumeUuid);
  }
  disk=new KVMPhysicalDisk(f.getPath(),volumeUuid,this);
  disk.setFormat(PhysicalDiskFormat.QCOW2);
  disk.setSize(f.length());
  disk.setVirtualSize(f.length());
  return disk;
}","@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid){
  KVMPhysicalDisk disk=null;
  try {
    disk=this._storageAdaptor.getPhysicalDisk(volumeUuid,this);
  }
 catch (  CloudRuntimeException e) {
    if ((this.getStoragePoolType() != StoragePoolType.NetworkFilesystem) && (this.getStoragePoolType() != StoragePoolType.Filesystem)) {
      throw e;
    }
  }
  if (disk != null) {
    return disk;
  }
  s_logger.debug(""String_Node_Str"");
  String localPoolPath=this.getLocalPath();
  File f=new File(localPoolPath + File.separator + volumeUuid);
  if (!f.exists()) {
    s_logger.debug(""String_Node_Str"" + volumeUuid + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + volumeUuid);
  }
  disk=new KVMPhysicalDisk(f.getPath(),volumeUuid,this);
  disk.setFormat(PhysicalDiskFormat.QCOW2);
  disk.setSize(f.length());
  disk.setVirtualSize(f.length());
  return disk;
}",0.9977949283351708
106164,"private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if (state == State.Starting || state == State.Migrating) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
 else     if (state == State.Stopping) {
      doCleanup=true;
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,getExecuteInSequence());
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    stopped=answer.getResult();
    if (!stopped) {
      throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
    }
 else {
      Integer timeoffset=answer.getTimeOffset();
      if (timeoffset != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",timeoffset.toString());
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    vmGuru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
    if (!forced) {
      throw e;
    }
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
    if (!forced) {
      throw e;
    }
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}","private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if (state == State.Starting || state == State.Migrating) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
 else     if (state == State.Stopping) {
      doCleanup=true;
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,getExecuteInSequence());
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    stopped=answer.getResult();
    if (!stopped) {
      throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
    }
 else {
      Integer timeoffset=answer.getTimeOffset();
      if (timeoffset != null) {
        if (vm.getType() == VirtualMachine.Type.User) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",timeoffset.toString());
          _userVmDao.saveDetails(userVm);
        }
      }
    }
    vmGuru.finalizeStop(profile,answer);
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}",0.9933020763563296
106165,"public Pair<List<HostJoinVO>,Integer> searchForServersInternal(ListHostsCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),cmd.getZoneId());
  Object name=cmd.getHostName();
  Object type=cmd.getType();
  Object state=cmd.getState();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object resourceState=cmd.getResourceState();
  Object haHosts=cmd.getHaHost();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(HostJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<HostJoinVO> sb=_hostJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getResourceState(),SearchCriteria.Op.EQ);
  String haTag=_haMgr.getHaTag();
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    if ((Boolean)haHosts) {
      sb.and(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.EQ);
    }
 else {
      sb.and().op(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.NEQ);
      sb.or(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.NULL);
      sb.cp();
    }
  }
  SearchCriteria<HostJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<HostJoinVO> ssc=_hostJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",cluster);
  }
  if (resourceState != null) {
    sc.setParameters(""String_Node_Str"",resourceState);
  }
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",haTag);
  }
  Pair<List<HostJoinVO>,Integer> uniqueHostPair=_hostJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueHostPair.second();
  if (count.intValue() == 0) {
    return uniqueHostPair;
  }
  List<HostJoinVO> uniqueHosts=uniqueHostPair.first();
  Long[] hostIds=new Long[uniqueHosts.size()];
  int i=0;
  for (  HostJoinVO v : uniqueHosts) {
    hostIds[i++]=v.getId();
  }
  List<HostJoinVO> hosts=_hostJoinDao.searchByIds(hostIds);
  return new Pair<List<HostJoinVO>,Integer>(hosts,count);
}","public Pair<List<HostJoinVO>,Integer> searchForServersInternal(ListHostsCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),cmd.getZoneId());
  Object name=cmd.getHostName();
  Object type=cmd.getType();
  Object state=cmd.getState();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object resourceState=cmd.getResourceState();
  Object haHosts=cmd.getHaHost();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(HostJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<HostJoinVO> sb=_hostJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getResourceState(),SearchCriteria.Op.EQ);
  String haTag=_haMgr.getHaTag();
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    if ((Boolean)haHosts) {
      sb.and(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.EQ);
    }
 else {
      sb.and().op(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.NEQ);
      sb.or(""String_Node_Str"",sb.entity().getTag(),SearchCriteria.Op.NULL);
      sb.cp();
    }
  }
  SearchCriteria<HostJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<HostJoinVO> ssc=_hostJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",cluster);
  }
  if (resourceState != null) {
    sc.setParameters(""String_Node_Str"",resourceState);
  }
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    sc.setParameters(""String_Node_Str"",haTag);
  }
  Pair<List<HostJoinVO>,Integer> uniqueHostPair=_hostJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueHostPair.second();
  if (count.intValue() == 0) {
    return uniqueHostPair;
  }
  List<HostJoinVO> uniqueHosts=uniqueHostPair.first();
  Long[] hostIds=new Long[uniqueHosts.size()];
  int i=0;
  for (  HostJoinVO v : uniqueHosts) {
    hostIds[i++]=v.getId();
  }
  List<HostJoinVO> hosts=_hostJoinDao.searchByIds(hostIds);
  return new Pair<List<HostJoinVO>,Integer>(hosts,count);
}",0.9969401947148818
106166,"@Override public List<VlanVO> listZoneWideNonDedicatedVlans(long zoneId){
  SearchCriteria<VlanVO> sc=ZoneWideNonDedicatedVlanSearch.create();
  sc.setParameters(""String_Node_Str"",""String_Node_Str"",zoneId);
  return listBy(sc);
}","@Override public List<VlanVO> listZoneWideNonDedicatedVlans(long zoneId){
  SearchCriteria<VlanVO> sc=ZoneWideNonDedicatedVlanSearch.create();
  sc.setParameters(""String_Node_Str"",zoneId);
  return listBy(sc);
}",0.9590909090909092
106167,"@Override @DB public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  _configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _networkLockTimeout=NumbersUtil.parseInt(_configs.get(Config.NetworkLockTimeout.key()),600);
  Map<Network.Service,Set<Network.Provider>> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Set<Provider> sgProviders=new HashSet<Provider>();
  sgProviders.add(Provider.SecurityGroupProvider);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup,sgProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultVPCOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultVPCOffProviders.put(Service.Dhcp,defaultProviders);
  defaultVPCOffProviders.put(Service.Dns,defaultProviders);
  defaultVPCOffProviders.put(Service.UserData,defaultProviders);
  defaultVPCOffProviders.put(Service.NetworkACL,defaultProviders);
  defaultVPCOffProviders.put(Service.Gateway,defaultProviders);
  defaultVPCOffProviders.put(Service.Lb,defaultProviders);
  defaultVPCOffProviders.put(Service.SourceNat,defaultProviders);
  defaultVPCOffProviders.put(Service.StaticNat,defaultProviders);
  defaultVPCOffProviders.put(Service.PortForwarding,defaultProviders);
  defaultVPCOffProviders.put(Service.Vpn,defaultProviders);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkOfferingVO offering=null;
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,new HashMap<Network.Service,Set<Network.Provider>>(),true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Required,null,defaultIsolatedSourceNatEnabledNetworkOfferingProviders,true,Network.GuestType.Isolated,false,null,true,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {
    defaultVPCOffProviders.remove(Service.Lb);
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultIsolatedNetworkOfferingProviders,true,Network.GuestType.Isolated,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> internalLbOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultVpcProvider=new HashSet<Network.Provider>();
  defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);
  Set<Network.Provider> defaultInternalLbProvider=new HashSet<Network.Provider>();
  defaultInternalLbProvider.add(Network.Provider.InternalLbVm);
  internalLbOffProviders.put(Service.Dhcp,defaultVpcProvider);
  internalLbOffProviders.put(Service.Dns,defaultVpcProvider);
  internalLbOffProviders.put(Service.UserData,defaultVpcProvider);
  internalLbOffProviders.put(Service.NetworkACL,defaultVpcProvider);
  internalLbOffProviders.put(Service.Gateway,defaultVpcProvider);
  internalLbOffProviders.put(Service.Lb,defaultInternalLbProvider);
  internalLbOffProviders.put(Service.SourceNat,defaultVpcProvider);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,internalLbOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    offering.setInternalLb(true);
    offering.setPublicLb(false);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> netscalerServiceProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> vrProvider=new HashSet<Network.Provider>();
  vrProvider.add(Provider.VirtualRouter);
  Set<Network.Provider> sgProvider=new HashSet<Network.Provider>();
  sgProvider.add(Provider.SecurityGroupProvider);
  Set<Network.Provider> nsProvider=new HashSet<Network.Provider>();
  nsProvider.add(Provider.Netscaler);
  netscalerServiceProviders.put(Service.Dhcp,vrProvider);
  netscalerServiceProviders.put(Service.Dns,vrProvider);
  netscalerServiceProviders.put(Service.UserData,vrProvider);
  netscalerServiceProviders.put(Service.SecurityGroup,sgProvider);
  netscalerServiceProviders.put(Service.StaticNat,nsProvider);
  netscalerServiceProviders.put(Service.Lb,nsProvider);
  Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> elb=new HashMap<Capability,String>();
  elb.put(Capability.ElasticLb,""String_Node_Str"");
  Map<Capability,String> eip=new HashMap<Capability,String>();
  eip.put(Capability.ElasticIp,""String_Node_Str"");
  serviceCapabilityMap.put(Service.Lb,elb);
  serviceCapabilityMap.put(Service.StaticNat,eip);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,netscalerServiceProviders,true,Network.GuestType.Shared,false,null,true,serviceCapabilityMap,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    offering.setDedicatedLB(false);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  txn.commit();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getVlanId(),Op.IN);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join(""String_Node_Str"",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and(""String_Node_Str"",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and(""String_Node_Str"",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and(""String_Node_Str"",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and(""String_Node_Str"",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and(""String_Node_Str"",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join(""String_Node_Str"",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join(""String_Node_Str"",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _agentMgr.registerForHostEvents(this,true,false,true);
  Network.State.getStateMachine().registerListener(new NetworkStateListener(_usageEventDao,_networksDao));
  s_logger.info(""String_Node_Str"");
  return true;
}","@Override @DB public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _networkGcWait=NumbersUtil.parseInt(_configs.get(Config.NetworkGcWait.key()),600);
  _networkGcInterval=NumbersUtil.parseInt(_configs.get(Config.NetworkGcInterval.key()),600);
  _configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _networkLockTimeout=NumbersUtil.parseInt(_configs.get(Config.NetworkLockTimeout.key()),600);
  Map<Network.Service,Set<Network.Provider>> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultProviders=new HashSet<Network.Provider>();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  Set<Provider> sgProviders=new HashSet<Provider>();
  sgProviders.add(Provider.SecurityGroupProvider);
  defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup,sgProviders);
  Map<Network.Service,Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,defaultProviders);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,defaultProviders);
  Map<Network.Service,Set<Network.Provider>> defaultVPCOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  defaultProviders.clear();
  defaultProviders.add(Network.Provider.VirtualRouter);
  defaultVPCOffProviders.put(Service.Dhcp,defaultProviders);
  defaultVPCOffProviders.put(Service.Dns,defaultProviders);
  defaultVPCOffProviders.put(Service.UserData,defaultProviders);
  defaultVPCOffProviders.put(Service.NetworkACL,defaultProviders);
  defaultVPCOffProviders.put(Service.Gateway,defaultProviders);
  defaultVPCOffProviders.put(Service.Lb,defaultProviders);
  defaultVPCOffProviders.put(Service.SourceNat,defaultProviders);
  defaultVPCOffProviders.put(Service.StaticNat,defaultProviders);
  defaultVPCOffProviders.put(Service.PortForwarding,defaultProviders);
  defaultVPCOffProviders.put(Service.Vpn,defaultProviders);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkOfferingVO offering=null;
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,new HashMap<Network.Service,Set<Network.Provider>>(),true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultSharedNetworkOfferingProviders,true,Network.GuestType.Shared,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Required,null,defaultIsolatedSourceNatEnabledNetworkOfferingProviders,true,Network.GuestType.Isolated,false,null,true,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {
    defaultVPCOffProviders.remove(Service.Lb);
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,defaultVPCOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,defaultIsolatedNetworkOfferingProviders,true,Network.GuestType.Isolated,false,null,true,null,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> internalLbOffProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> defaultVpcProvider=new HashSet<Network.Provider>();
  defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);
  Set<Network.Provider> defaultInternalLbProvider=new HashSet<Network.Provider>();
  defaultInternalLbProvider.add(Network.Provider.InternalLbVm);
  internalLbOffProviders.put(Service.Dhcp,defaultVpcProvider);
  internalLbOffProviders.put(Service.Dns,defaultVpcProvider);
  internalLbOffProviders.put(Service.UserData,defaultVpcProvider);
  internalLbOffProviders.put(Service.NetworkACL,defaultVpcProvider);
  internalLbOffProviders.put(Service.Gateway,defaultVpcProvider);
  internalLbOffProviders.put(Service.Lb,defaultInternalLbProvider);
  internalLbOffProviders.put(Service.SourceNat,defaultVpcProvider);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,""String_Node_Str"",TrafficType.Guest,null,false,Availability.Optional,null,internalLbOffProviders,true,Network.GuestType.Isolated,false,null,false,null,false,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    offering.setInternalLb(true);
    offering.setPublicLb(false);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  Map<Network.Service,Set<Network.Provider>> netscalerServiceProviders=new HashMap<Network.Service,Set<Network.Provider>>();
  Set<Network.Provider> vrProvider=new HashSet<Network.Provider>();
  vrProvider.add(Provider.VirtualRouter);
  Set<Network.Provider> sgProvider=new HashSet<Network.Provider>();
  sgProvider.add(Provider.SecurityGroupProvider);
  Set<Network.Provider> nsProvider=new HashSet<Network.Provider>();
  nsProvider.add(Provider.Netscaler);
  netscalerServiceProviders.put(Service.Dhcp,vrProvider);
  netscalerServiceProviders.put(Service.Dns,vrProvider);
  netscalerServiceProviders.put(Service.UserData,vrProvider);
  netscalerServiceProviders.put(Service.SecurityGroup,sgProvider);
  netscalerServiceProviders.put(Service.StaticNat,nsProvider);
  netscalerServiceProviders.put(Service.Lb,nsProvider);
  Map<Service,Map<Capability,String>> serviceCapabilityMap=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> elb=new HashMap<Capability,String>();
  elb.put(Capability.ElasticLb,""String_Node_Str"");
  Map<Capability,String> eip=new HashMap<Capability,String>();
  eip.put(Capability.ElasticIp,""String_Node_Str"");
  serviceCapabilityMap.put(Service.Lb,elb);
  serviceCapabilityMap.put(Service.StaticNat,eip);
  if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {
    offering=_configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,""String_Node_Str"",TrafficType.Guest,null,true,Availability.Optional,null,netscalerServiceProviders,true,Network.GuestType.Shared,false,null,true,serviceCapabilityMap,true,false,null,false,null);
    offering.setState(NetworkOffering.State.Enabled);
    offering.setDedicatedLB(false);
    _networkOfferingDao.update(offering.getId(),offering);
  }
  txn.commit();
  AssignIpAddressSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressSearch.and(""String_Node_Str"",AssignIpAddressSearch.entity().getVlanId(),Op.IN);
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),Op.EQ);
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getNetworkId(),Op.EQ);
  AssignIpAddressSearch.join(""String_Node_Str"",vlanSearch,vlanSearch.entity().getId(),AssignIpAddressSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressSearch.done();
  AssignIpAddressFromPodVlanSearch=_ipAddressDao.createSearchBuilder();
  AssignIpAddressFromPodVlanSearch.and(""String_Node_Str"",AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.and(""String_Node_Str"",AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(),Op.NULL);
  AssignIpAddressFromPodVlanSearch.and(""String_Node_Str"",AssignIpAddressFromPodVlanSearch.entity().getVlanId(),Op.IN);
  SearchBuilder<VlanVO> podVlanSearch=_vlanDao.createSearchBuilder();
  podVlanSearch.and(""String_Node_Str"",podVlanSearch.entity().getVlanType(),Op.EQ);
  podVlanSearch.and(""String_Node_Str"",podVlanSearch.entity().getNetworkId(),Op.EQ);
  SearchBuilder<PodVlanMapVO> podVlanMapSB=_podVlanMapDao.createSearchBuilder();
  podVlanMapSB.and(""String_Node_Str"",podVlanMapSB.entity().getPodId(),Op.EQ);
  AssignIpAddressFromPodVlanSearch.join(""String_Node_Str"",podVlanMapSB,podVlanMapSB.entity().getVlanDbId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.join(""String_Node_Str"",podVlanSearch,podVlanSearch.entity().getId(),AssignIpAddressFromPodVlanSearch.entity().getVlanId(),JoinType.INNER);
  AssignIpAddressFromPodVlanSearch.done();
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _agentMgr.registerForHostEvents(this,true,false,true);
  Network.State.getStateMachine().registerListener(new NetworkStateListener(_usageEventDao,_networksDao));
  s_logger.info(""String_Node_Str"");
  return true;
}",0.9957084640628944
106168,"@Override public void collectVmDiskStatistics(UserVmVO userVm){
  if (!userVm.getHypervisorType().equals(HypervisorType.KVM))   return;
  long hostId=userVm.getHostId();
  List<String> vmNames=new ArrayList<String>();
  vmNames.add(userVm.getInstanceName());
  HostVO host=_hostDao.findById(hostId);
  GetVmDiskStatsAnswer diskStatsAnswer=null;
  try {
    diskStatsAnswer=(GetVmDiskStatsAnswer)_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,host.getGuid(),host.getName()));
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName(),e);
    return;
  }
  if (diskStatsAnswer != null) {
    if (!diskStatsAnswer.getResult()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ diskStatsAnswer.getDetails());
      return;
    }
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=diskStatsAnswer.getVmDiskStatsMap();
      List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsByName.get(userVm.getInstanceName());
      if (vmDiskStats == null)       return;
      for (      VmDiskStatsEntry vmDiskStat : vmDiskStats) {
        SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
        sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
        VolumeVO volume=_volsDao.search(sc_volume,null).get(0);
        VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
        VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
        if ((vmDiskStat.getIORead() == 0) && (vmDiskStat.getIOWrite() == 0) && (vmDiskStat.getBytesRead() == 0)&& (vmDiskStat.getBytesWrite() == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (vmDiskStat_lock == null) {
          s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
          continue;
        }
        if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead()) || ((previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()) || (previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite())))) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite());
          continue;
        }
        if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
          }
          vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
        if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
          }
          vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
        }
        vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
        if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
          }
          vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
        }
        vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
        if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
          }
          vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
        if (!_dailyOrHourly) {
          vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
          vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
          vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
          vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
      }
      txn.commit();
    }
 catch (    Exception e) {
      txn.rollback();
      s_logger.warn(""String_Node_Str"" + userVm.getId() + ""String_Node_Str""+ hostId,e);
    }
 finally {
      txn.close();
    }
  }
}","@Override public void collectVmDiskStatistics(UserVmVO userVm){
  if (!userVm.getHypervisorType().equals(HypervisorType.KVM))   return;
  s_logger.debug(""String_Node_Str"");
  long hostId=userVm.getHostId();
  List<String> vmNames=new ArrayList<String>();
  vmNames.add(userVm.getInstanceName());
  HostVO host=_hostDao.findById(hostId);
  GetVmDiskStatsAnswer diskStatsAnswer=null;
  try {
    diskStatsAnswer=(GetVmDiskStatsAnswer)_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,host.getGuid(),host.getName()));
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName(),e);
    return;
  }
  if (diskStatsAnswer != null) {
    if (!diskStatsAnswer.getResult()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ diskStatsAnswer.getDetails());
      return;
    }
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=diskStatsAnswer.getVmDiskStatsMap();
      if (vmDiskStatsByName == null)       return;
      List<VmDiskStatsEntry> vmDiskStats=vmDiskStatsByName.get(userVm.getInstanceName());
      if (vmDiskStats == null)       return;
      for (      VmDiskStatsEntry vmDiskStat : vmDiskStats) {
        SearchCriteria<VolumeVO> sc_volume=_volsDao.createSearchCriteria();
        sc_volume.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vmDiskStat.getPath());
        VolumeVO volume=_volsDao.search(sc_volume,null).get(0);
        VmDiskStatisticsVO previousVmDiskStats=_vmDiskStatsDao.findBy(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
        VmDiskStatisticsVO vmDiskStat_lock=_vmDiskStatsDao.lock(userVm.getAccountId(),userVm.getDataCenterId(),userVm.getId(),volume.getId());
        if ((vmDiskStat.getIORead() == 0) && (vmDiskStat.getIOWrite() == 0) && (vmDiskStat.getBytesRead() == 0)&& (vmDiskStat.getBytesWrite() == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (vmDiskStat_lock == null) {
          s_logger.warn(""String_Node_Str"" + userVm.getAccountId() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ volume.getId());
          continue;
        }
        if (previousVmDiskStats != null && ((previousVmDiskStats.getCurrentIORead() != vmDiskStat_lock.getCurrentIORead()) || ((previousVmDiskStats.getCurrentIOWrite() != vmDiskStat_lock.getCurrentIOWrite()) || (previousVmDiskStats.getCurrentBytesRead() != vmDiskStat_lock.getCurrentBytesRead()) || (previousVmDiskStats.getCurrentBytesWrite() != vmDiskStat_lock.getCurrentBytesWrite())))) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite());
          continue;
        }
        if (vmDiskStat_lock.getCurrentIORead() > vmDiskStat.getIORead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIORead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIORead());
          }
          vmDiskStat_lock.setNetIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
        }
        vmDiskStat_lock.setCurrentIORead(vmDiskStat.getIORead());
        if (vmDiskStat_lock.getCurrentIOWrite() > vmDiskStat.getIOWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getIOWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentIOWrite());
          }
          vmDiskStat_lock.setNetIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
        }
        vmDiskStat_lock.setCurrentIOWrite(vmDiskStat.getIOWrite());
        if (vmDiskStat_lock.getCurrentBytesRead() > vmDiskStat.getBytesRead()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesRead()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesRead());
          }
          vmDiskStat_lock.setNetBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
        }
        vmDiskStat_lock.setCurrentBytesRead(vmDiskStat.getBytesRead());
        if (vmDiskStat_lock.getCurrentBytesWrite() > vmDiskStat.getBytesWrite()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + host.getName() + ""String_Node_Str""+ vmDiskStat.getVmName()+ ""String_Node_Str""+ vmDiskStat.getBytesWrite()+ ""String_Node_Str""+ vmDiskStat_lock.getCurrentBytesWrite());
          }
          vmDiskStat_lock.setNetBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        vmDiskStat_lock.setCurrentBytesWrite(vmDiskStat.getBytesWrite());
        if (!_dailyOrHourly) {
          vmDiskStat_lock.setAggIORead(vmDiskStat_lock.getNetIORead() + vmDiskStat_lock.getCurrentIORead());
          vmDiskStat_lock.setAggIOWrite(vmDiskStat_lock.getNetIOWrite() + vmDiskStat_lock.getCurrentIOWrite());
          vmDiskStat_lock.setAggBytesRead(vmDiskStat_lock.getNetBytesRead() + vmDiskStat_lock.getCurrentBytesRead());
          vmDiskStat_lock.setAggBytesWrite(vmDiskStat_lock.getNetBytesWrite() + vmDiskStat_lock.getCurrentBytesWrite());
        }
        _vmDiskStatsDao.update(vmDiskStat_lock.getId(),vmDiskStat_lock);
      }
      txn.commit();
    }
 catch (    Exception e) {
      txn.rollback();
      s_logger.warn(""String_Node_Str"" + userVm.getId() + ""String_Node_Str""+ hostId,e);
    }
 finally {
      txn.close();
    }
  }
}",0.9926788685524126
106169,"@Override public void prepareStop(VirtualMachineProfile profile){
  UserVmVO vm=_vmDao.findById(profile.getId());
  if (vm.getState() == State.Running)   collectVmDiskStatistics(vm);
}","@Override public void prepareStop(VirtualMachineProfile profile){
  UserVmVO vm=_vmDao.findById(profile.getId());
  if (vm != null && vm.getState() == State.Stopping)   collectVmDiskStatistics(vm);
}",0.9399477806788512
106170,"public ChapInfo getChapInfo(VolumeInfo volumeInfo,DataStore dataStore){
  DataStoreDriver dataStoreDriver=dataStore.getDriver();
  if (dataStoreDriver instanceof PrimaryDataStoreDriver) {
    return ((PrimaryDataStoreDriver)dataStoreDriver).getChapInfo(volumeInfo);
  }
  return null;
}","@Override public ChapInfo getChapInfo(VolumeInfo volumeInfo,DataStore dataStore){
  DataStoreDriver dataStoreDriver=dataStore.getDriver();
  if (dataStoreDriver instanceof PrimaryDataStoreDriver) {
    return ((PrimaryDataStoreDriver)dataStoreDriver).getChapInfo(volumeInfo);
  }
  return null;
}",0.9828178694158076
106171,"@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VirtualMachine result=null;
  try {
    result=_mgr.upgradeSystemVM(this);
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  ManagementServerException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  VirtualMachineMigrationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
  if (result != null) {
    SystemVmResponse response=_responseGenerator.createSystemVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VirtualMachine result=null;
  try {
    result=_mgr.upgradeSystemVM(this);
  }
 catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  ManagementServerException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  VirtualMachineMigrationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
  if (result != null) {
    SystemVmResponse response=_responseGenerator.createSystemVmResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.97117840204305
106172,"@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VirtualMachine result=_mgr.upgradeSystemVM(this);
  if (result != null) {
    SystemVmResponse response=_responseGenerator.createSystemVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VirtualMachine result=_mgr.upgradeSystemVM(this);
  if (result != null) {
    SystemVmResponse response=_responseGenerator.createSystemVmResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9397406559877955
106173,"@Override public long getEntityOwnerId(){
  Account caller=CallContext.current().getCallingAccount();
  if (accountName != null && domainId != null) {
    Account account=_accountService.finalizeOwner(caller,accountName,domainId,projectId);
    return account.getId();
  }
 else   if (projectId != null) {
    Project project=_projectService.getProject(projectId);
    if (project != null) {
      if (project.getState() == Project.State.Active) {
        return project.getProjectAccountId();
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + project.getState() + ""String_Node_Str"");
      }
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (networkId != null) {
    Network network=_networkService.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkOffering offering=_configService.getNetworkOffering(network.getNetworkOfferingId());
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Basic && offering.getElasticIp() && offering.getElasticLb()) {
      return caller.getAccountId();
    }
    return network.getAccountId();
  }
 else   if (vpcId != null) {
    Vpc vpc=_vpcService.getVpc(getVpcId());
    if (vpc == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return vpc.getAccountId();
  }
  return caller.getAccountId();
}","@Override public long getEntityOwnerId(){
  Account caller=CallContext.current().getCallingAccount();
  if (accountName != null && domainId != null) {
    Account account=_accountService.finalizeOwner(caller,accountName,domainId,projectId);
    return account.getId();
  }
 else   if (projectId != null) {
    Project project=_projectService.getProject(projectId);
    if (project != null) {
      if (project.getState() == Project.State.Active) {
        return project.getProjectAccountId();
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + project.getState() + ""String_Node_Str"");
      }
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (networkId != null) {
    Network network=_networkService.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkOffering offering=_entityMgr.findById(NetworkOffering.class,network.getNetworkOfferingId());
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Basic && offering.getElasticIp() && offering.getElasticLb()) {
      return caller.getAccountId();
    }
    return network.getAccountId();
  }
 else   if (vpcId != null) {
    Vpc vpc=_vpcService.getVpc(getVpcId());
    if (vpc == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return vpc.getAccountId();
  }
  return caller.getAccountId();
}",0.930784442979565
106174,"@Override public void execute() throws ResourceUnavailableException, ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
  IpAddress result=null;
  if (getVpcId() != null) {
    result=_vpcService.associateIPToVpc(getEntityId(),getVpcId());
  }
 else   if (getNetworkId() != null) {
    result=_networkService.associateIPToNetwork(getEntityId(),getNetworkId());
  }
  if (result != null) {
    IPAddressResponse ipResponse=_responseGenerator.createIPAddressResponse(result);
    ipResponse.setResponseName(getCommandName());
    this.setResponseObject(ipResponse);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceUnavailableException, ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
  IpAddress result=null;
  if (getVpcId() != null) {
    result=_vpcService.associateIPToVpc(getEntityId(),getVpcId());
  }
 else   if (getNetworkId() != null) {
    result=_networkService.associateIPToNetwork(getEntityId(),getNetworkId());
  }
  if (result != null) {
    IPAddressResponse ipResponse=_responseGenerator.createIPAddressResponse(result);
    ipResponse.setResponseName(getCommandName());
    setResponseObject(ipResponse);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.996776273372018
106175,"@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=null;
    if (!isPortable()) {
      ip=_networkService.allocateIP(_accountService.getAccount(getEntityOwnerId()),getZoneId(),getNetworkId());
    }
 else {
      ip=_networkService.allocatePortableIP(_accountService.getAccount(getEntityOwnerId()),1,getZoneId(),getNetworkId(),getVpcId());
    }
    if (ip != null) {
      this.setEntityId(ip.getId());
      this.setEntityUuid(ip.getUuid());
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=null;
    if (!isPortable()) {
      ip=_networkService.allocateIP(_accountService.getAccount(getEntityOwnerId()),getZoneId(),getNetworkId());
    }
 else {
      ip=_networkService.allocatePortableIP(_accountService.getAccount(getEntityOwnerId()),1,getZoneId(),getNetworkId(),getVpcId());
    }
    if (ip != null) {
      setEntityId(ip.getId());
      setEntityUuid(ip.getUuid());
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}",0.9947589098532494
106176,"public Long getPhysicalNetworkId(){
  NetworkOffering offering=_configService.getNetworkOffering(networkOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  if (physicalNetworkId != null) {
    if (offering.getGuestType() == GuestType.Shared) {
      return physicalNetworkId;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str"");
    }
  }
 else {
    if (zoneId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return _networkService.findPhysicalNetworkId(zoneId,offering.getTags(),offering.getTrafficType());
  }
}","public Long getPhysicalNetworkId(){
  NetworkOffering offering=_entityMgr.findById(NetworkOffering.class,networkOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  if (physicalNetworkId != null) {
    if (offering.getGuestType() == GuestType.Shared) {
      return physicalNetworkId;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str"");
    }
  }
 else {
    if (zoneId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return _networkService.findPhysicalNetworkId(zoneId,offering.getTags(),offering.getTrafficType());
  }
}",0.9701280227596016
106177,"@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException, ResourceAllocationException {
  Network result=_networkService.createGuestNetwork(this);
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException, ResourceAllocationException {
  Network result=_networkService.createGuestNetwork(this);
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9947201689545936
106178,"@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccountById(getEntityOwnerId());
    DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    DiskOffering diskOffering=null;
    if (diskOfferingId != null) {
      diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    if (!zone.isLocalStorageEnabled()) {
      if (serviceOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getName() + ""String_Node_Str"");
      }
      if (diskOffering != null && diskOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"");
      }
    }
    UserVm vm=null;
    IpAddresses addrs=new IpAddresses(ipAddress,getIp6Address());
    if (zone.getNetworkType() == NetworkType.Basic) {
      if (getNetworkIds() != null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
 else {
        vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),this.getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
    }
 else {
      if (zone.isSecurityGroupEnabled()) {
        vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),this.getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
 else {
        if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),this.getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
      setEntityUuid(vm.getUuid());
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex.getMessage(),ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccountById(getEntityOwnerId());
    DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    DiskOffering diskOffering=null;
    if (diskOfferingId != null) {
      diskOffering=_entityMgr.findById(DiskOffering.class,diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    if (!zone.isLocalStorageEnabled()) {
      if (serviceOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getName() + ""String_Node_Str"");
      }
      if (diskOffering != null && diskOffering.getUseLocalStorage()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"");
      }
    }
    UserVm vm=null;
    IpAddresses addrs=new IpAddresses(ipAddress,getIp6Address());
    if (zone.getNetworkType() == NetworkType.Basic) {
      if (getNetworkIds() != null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
 else {
        vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
    }
 else {
      if (zone.isSecurityGroupEnabled()) {
        vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
 else {
        if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),getHttpMethod(),userData,sshKeyPairName,getIpToNetworkMap(),addrs,displayVm,keyboard,getAffinityGroupIdList());
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
      setEntityUuid(vm.getUuid());
    }
 else {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex.getMessage(),ex);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
  }
}",0.98625190945702
106179,"@Override public void execute(){
  UserVm result;
  if (getStartVm()) {
    try {
      CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
      result=_userVmService.startVirtualMachine(this);
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
    }
catch (    ConcurrentOperationException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
    }
catch (    InsufficientCapacityException ex) {
      StringBuilder message=new StringBuilder(ex.getMessage());
      if (ex instanceof InsufficientServerCapacityException) {
        if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {
          message.append(""String_Node_Str"");
        }
      }
      s_logger.info(ex);
      s_logger.info(message.toString(),ex);
      throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,message.toString());
    }
  }
 else {
    result=_userVmService.getUserVm(getEntityId());
  }
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",result).get(0);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  UserVm result;
  if (getStartVm()) {
    try {
      CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
      result=_userVmService.startVirtualMachine(this);
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
    }
catch (    ConcurrentOperationException ex) {
      s_logger.warn(""String_Node_Str"",ex);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());
    }
catch (    InsufficientCapacityException ex) {
      StringBuilder message=new StringBuilder(ex.getMessage());
      if (ex instanceof InsufficientServerCapacityException) {
        if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {
          message.append(""String_Node_Str"");
        }
      }
      s_logger.info(ex);
      s_logger.info(message.toString(),ex);
      throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,message.toString());
    }
  }
 else {
    result=_userVmService.getUserVm(getEntityId());
  }
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",result).get(0);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9982752673335632
106180,"@Override public void execute() throws ResourceAllocationException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  UserVm result=_userVmService.upgradeVirtualMachine(this);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",result).get(0);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceAllocationException {
  CallContext.current().setEventDetails(""String_Node_Str"" + getId());
  ServiceOffering serviceOffering=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  UserVm result=_userVmService.upgradeVirtualMachine(this);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(""String_Node_Str"",result).get(0);
    response.setResponseName(getCommandName());
    setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.945176960444136
106181,"@Override public VMInstanceVO reConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, ConcurrentOperationException {
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  long newServiceofferingId=vm.getServiceOfferingId();
  ServiceOffering newServiceOffering=_configMgr.getServiceOffering(newServiceofferingId);
  HostVO hostVo=_hostDao.findById(vm.getHostId());
  Float memoryOvercommitRatio=Float.parseFloat(_configServer.getConfigValue(Config.MemOverprovisioningFactor.key(),Config.ConfigurationParameterScope.cluster.toString(),hostVo.getClusterId()));
  Float cpuOvercommitRatio=Float.parseFloat(_configServer.getConfigValue(Config.CPUOverprovisioningFactor.key(),Config.ConfigurationParameterScope.cluster.toString(),hostVo.getClusterId()));
  long minMemory=(long)(newServiceOffering.getRamSize() / memoryOvercommitRatio);
  ScaleVmCommand reconfigureCmd=new ScaleVmCommand(vm.getInstanceName(),newServiceOffering.getCpu(),(int)(newServiceOffering.getSpeed() / cpuOvercommitRatio),newServiceOffering.getSpeed(),minMemory * 1024L * 1024L,newServiceOffering.getRamSize() * 1024L * 1024L,newServiceOffering.getLimitCpuUse());
  Long dstHostId=vm.getHostId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Running,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(vm.getHostId());
  work=_workDao.persist(work);
  boolean success=false;
  try {
    if (reconfiguringOnExistingHost) {
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(newServiceofferingId);
      _capacityMgr.allocateVmCapacity(vm,false);
    }
    Answer reconfigureAnswer=_agentMgr.send(vm.getHostId(),reconfigureCmd);
    if (reconfigureAnswer == null || !reconfigureAnswer.getResult()) {
      s_logger.error(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
      throw new CloudRuntimeException(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
    }
    success=true;
  }
 catch (  OperationTimedoutException e) {
    throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
  }
catch (  AgentUnavailableException e) {
    throw e;
  }
 finally {
    if (!success) {
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.allocateVmCapacity(vm,false);
    }
  }
  return vm;
}","@Override public VMInstanceVO reConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, ConcurrentOperationException {
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  long newServiceofferingId=vm.getServiceOfferingId();
  ServiceOffering newServiceOffering=_entityMgr.findById(ServiceOffering.class,newServiceofferingId);
  HostVO hostVo=_hostDao.findById(vm.getHostId());
  Float memoryOvercommitRatio=Float.parseFloat(_configServer.getConfigValue(Config.MemOverprovisioningFactor.key(),Config.ConfigurationParameterScope.cluster.toString(),hostVo.getClusterId()));
  Float cpuOvercommitRatio=Float.parseFloat(_configServer.getConfigValue(Config.CPUOverprovisioningFactor.key(),Config.ConfigurationParameterScope.cluster.toString(),hostVo.getClusterId()));
  long minMemory=(long)(newServiceOffering.getRamSize() / memoryOvercommitRatio);
  ScaleVmCommand reconfigureCmd=new ScaleVmCommand(vm.getInstanceName(),newServiceOffering.getCpu(),(int)(newServiceOffering.getSpeed() / cpuOvercommitRatio),newServiceOffering.getSpeed(),minMemory * 1024L * 1024L,newServiceOffering.getRamSize() * 1024L * 1024L,newServiceOffering.getLimitCpuUse());
  Long dstHostId=vm.getHostId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Running,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(vm.getHostId());
  work=_workDao.persist(work);
  boolean success=false;
  try {
    if (reconfiguringOnExistingHost) {
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(newServiceofferingId);
      _capacityMgr.allocateVmCapacity(vm,false);
    }
    Answer reconfigureAnswer=_agentMgr.send(vm.getHostId(),reconfigureCmd);
    if (reconfigureAnswer == null || !reconfigureAnswer.getResult()) {
      s_logger.error(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
      throw new CloudRuntimeException(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
    }
    success=true;
  }
 catch (  OperationTimedoutException e) {
    throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
  }
catch (  AgentUnavailableException e) {
    throw e;
  }
 finally {
    if (!success) {
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.allocateVmCapacity(vm,false);
    }
  }
  return vm;
}",0.988345864661654
106182,"@Override public boolean upgradeVmDb(long vmId,long serviceOfferingId){
  VMInstanceVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  ServiceOffering newSvcOff=_configMgr.getServiceOffering(serviceOfferingId);
  vmForUpdate.setHaEnabled(newSvcOff.getOfferHA());
  vmForUpdate.setLimitCpuUse(newSvcOff.getLimitCpuUse());
  vmForUpdate.setServiceOfferingId(newSvcOff.getId());
  return _vmDao.update(vmId,vmForUpdate);
}","@Override public boolean upgradeVmDb(long vmId,long serviceOfferingId){
  VMInstanceVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  ServiceOffering newSvcOff=_entityMgr.findById(ServiceOffering.class,serviceOfferingId);
  vmForUpdate.setHaEnabled(newSvcOff.getOfferHA());
  vmForUpdate.setLimitCpuUse(newSvcOff.getLimitCpuUse());
  vmForUpdate.setServiceOfferingId(newSvcOff.getId());
  return _vmDao.update(vmId,vmForUpdate);
}",0.934322033898305
106183,"public static void pidCheck(String pidDir,String run) throws ConfigurationException {
  String dir=pidDir == null ? ""String_Node_Str"" : pidDir;
  try {
    final File propsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
    if (propsFile == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      final FileInputStream finputstream=new FileInputStream(propsFile);
      final Properties props=new Properties();
      props.load(finputstream);
      finputstream.close();
      dir=props.getProperty(""String_Node_Str"");
      if (dir == null) {
        dir=""String_Node_Str"";
      }
    }
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"");
  }
  final File pidFile=new File(dir + File.separator + run);
  try {
    if (!pidFile.createNewFile()) {
      if (!pidFile.exists()) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath() + ""String_Node_Str"");
      }
      final String pidLine=FileUtils.readFileToString(pidFile).trim();
      if (pidLine.isEmpty()) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
      }
      try {
        final long pid=Long.parseLong(pidLine);
        final Script script=new Script(""String_Node_Str"",120000,s_logger);
        script.add(""String_Node_Str"",""String_Node_Str"" + pid);
        final String result=script.execute();
        if (result == null) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
        if (!pidFile.delete()) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
        if (!pidFile.createNewFile()) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
      }
 catch (      final NumberFormatException e) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
      }
    }
    pidFile.deleteOnExit();
    final Script script=new Script(""String_Node_Str"",120000,s_logger);
    script.add(""String_Node_Str"",""String_Node_Str"");
    final OutputInterpreter.OneLineParser parser=new OutputInterpreter.OneLineParser();
    script.execute(parser);
    final String pid=parser.getLine();
    FileUtils.writeStringToFile(pidFile,pid + ""String_Node_Str"");
  }
 catch (  final IOException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pidFile.getAbsolutePath() + ""String_Node_Str"",e);
  }
}","public static void pidCheck(String pidDir,String run) throws ConfigurationException {
  String dir=pidDir == null ? ""String_Node_Str"" : pidDir;
  try {
    final File propsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
    if (propsFile == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      final FileInputStream finputstream=new FileInputStream(propsFile);
      final Properties props=new Properties();
      props.load(finputstream);
      finputstream.close();
      dir=props.getProperty(""String_Node_Str"");
      if (dir == null) {
        dir=pidDir == null ? ""String_Node_Str"" : pidDir;
      }
    }
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"");
  }
  final File pidFile=new File(dir + File.separator + run);
  try {
    if (!pidFile.createNewFile()) {
      if (!pidFile.exists()) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath() + ""String_Node_Str"");
      }
      final String pidLine=FileUtils.readFileToString(pidFile).trim();
      if (pidLine.isEmpty()) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
      }
      try {
        final long pid=Long.parseLong(pidLine);
        final Script script=new Script(""String_Node_Str"",120000,s_logger);
        script.add(""String_Node_Str"",""String_Node_Str"" + pid);
        final String result=script.execute();
        if (result == null) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
        if (!pidFile.delete()) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
        if (!pidFile.createNewFile()) {
          throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
        }
      }
 catch (      final NumberFormatException e) {
        throw new ConfigurationException(""String_Node_Str"" + pidFile.getAbsolutePath());
      }
    }
    pidFile.deleteOnExit();
    final Script script=new Script(""String_Node_Str"",120000,s_logger);
    script.add(""String_Node_Str"",""String_Node_Str"");
    final OutputInterpreter.OneLineParser parser=new OutputInterpreter.OneLineParser();
    script.execute(parser);
    final String pid=parser.getLine();
    FileUtils.writeStringToFile(pidFile,pid + ""String_Node_Str"");
  }
 catch (  final IOException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pidFile.getAbsolutePath() + ""String_Node_Str"",e);
  }
}",0.9947474747474748
106184,"@Before public void setup() throws IOException {
  pidFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str""));
}","@Before public void setup() throws IOException {
  pidFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
}",0.8939393939393939
106185,"private Pair<List<UserVmJoinVO>,Integer> searchForUserVMsInternal(ListVMsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String hypervisor=cmd.getHypervisor();
  boolean listAll=cmd.listAll();
  Long id=cmd.getId();
  Map<String,String> tags=cmd.getTags();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,listAll,false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Criteria c=new Criteria(""String_Node_Str"",Boolean.TRUE,cmd.getStartIndex(),cmd.getPageSizeVal());
  c.addCriteria(Criteria.KEYWORD,cmd.getKeyword());
  c.addCriteria(Criteria.ID,cmd.getId());
  c.addCriteria(Criteria.NAME,cmd.getInstanceName());
  c.addCriteria(Criteria.STATE,cmd.getState());
  c.addCriteria(Criteria.DATACENTERID,cmd.getZoneId());
  c.addCriteria(Criteria.GROUPID,cmd.getGroupId());
  c.addCriteria(Criteria.FOR_VIRTUAL_NETWORK,cmd.getForVirtualNetwork());
  c.addCriteria(Criteria.NETWORKID,cmd.getNetworkId());
  c.addCriteria(Criteria.TEMPLATE_ID,cmd.getTemplateId());
  c.addCriteria(Criteria.ISO_ID,cmd.getIsoId());
  c.addCriteria(Criteria.VPC_ID,cmd.getVpcId());
  c.addCriteria(Criteria.AFFINITY_GROUP_ID,cmd.getAffinityGroupId());
  if (domainId != null) {
    c.addCriteria(Criteria.DOMAINID,domainId);
  }
  if (HypervisorType.getType(hypervisor) != HypervisorType.None) {
    c.addCriteria(Criteria.HYPERVISOR,hypervisor);
  }
 else   if (hypervisor != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    c.addCriteria(Criteria.PODID,cmd.getPodId());
    c.addCriteria(Criteria.HOSTID,cmd.getHostId());
    c.addCriteria(Criteria.STORAGE_ID,cmd.getStorageId());
  }
  if (!permittedAccounts.isEmpty()) {
    c.addCriteria(Criteria.ACCOUNTID,permittedAccounts.toArray());
  }
  c.addCriteria(Criteria.ISADMIN,_accountMgr.isAdmin(caller.getType()));
  return searchForUserVMsByCriteria(c,caller,domainId,isRecursive,permittedAccounts,listAll,listProjectResourcesCriteria,tags);
}","private Pair<List<UserVmJoinVO>,Integer> searchForUserVMsInternal(ListVMsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String hypervisor=cmd.getHypervisor();
  boolean listAll=cmd.listAll();
  Long id=cmd.getId();
  Map<String,String> tags=cmd.getTags();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,listAll,false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Criteria c=new Criteria(""String_Node_Str"",Boolean.TRUE,cmd.getStartIndex(),cmd.getPageSizeVal());
  c.addCriteria(Criteria.KEYWORD,cmd.getKeyword());
  c.addCriteria(Criteria.ID,cmd.getId());
  c.addCriteria(Criteria.NAME,cmd.getName());
  c.addCriteria(Criteria.STATE,cmd.getState());
  c.addCriteria(Criteria.DATACENTERID,cmd.getZoneId());
  c.addCriteria(Criteria.GROUPID,cmd.getGroupId());
  c.addCriteria(Criteria.FOR_VIRTUAL_NETWORK,cmd.getForVirtualNetwork());
  c.addCriteria(Criteria.NETWORKID,cmd.getNetworkId());
  c.addCriteria(Criteria.TEMPLATE_ID,cmd.getTemplateId());
  c.addCriteria(Criteria.ISO_ID,cmd.getIsoId());
  c.addCriteria(Criteria.VPC_ID,cmd.getVpcId());
  c.addCriteria(Criteria.AFFINITY_GROUP_ID,cmd.getAffinityGroupId());
  if (domainId != null) {
    c.addCriteria(Criteria.DOMAINID,domainId);
  }
  if (HypervisorType.getType(hypervisor) != HypervisorType.None) {
    c.addCriteria(Criteria.HYPERVISOR,hypervisor);
  }
 else   if (hypervisor != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    c.addCriteria(Criteria.PODID,cmd.getPodId());
    c.addCriteria(Criteria.HOSTID,cmd.getHostId());
    c.addCriteria(Criteria.STORAGE_ID,cmd.getStorageId());
  }
  if (!permittedAccounts.isEmpty()) {
    c.addCriteria(Criteria.ACCOUNTID,permittedAccounts.toArray());
  }
  c.addCriteria(Criteria.ISADMIN,_accountMgr.isAdmin(caller.getType()));
  return searchForUserVMsByCriteria(c,caller,domainId,isRecursive,permittedAccounts,listAll,listProjectResourcesCriteria,tags);
}",0.9983838383838384
106186,"@Override public String toString(){
  if (toString == null) {
    toString=new StringBuilder(""String_Node_Str"").append(id).append(""String_Node_Str"").append(hostName).append(""String_Node_Str"").toString();
  }
  return toString;
}","@Override public String toString(){
  if (toString == null) {
    toString=new StringBuilder(""String_Node_Str"").append(id).append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString();
  }
  return toString;
}",0.8982300884955752
106187,"/** 
 * Give hypervisor guru opportunity to decide if certain command needs to be delegated to other host, mainly to secondary storage VM host
 * @param hostId original hypervisor host
 * @param cmd command that is going to be sent, hypervisor guru usually needs to register various context objects into the command object
 * @return delegated host id if the command will be delegated
 */
long getCommandHostDelegation(long hostId,Command cmd);","/** 
 * Give hypervisor guru opportunity to decide if certain command needs to be delegated to other host, mainly to secondary storage VM host
 * @param hostId original hypervisor host
 * @param cmd command that is going to be sent, hypervisor guru usually needs to register various context objects into the command object
 * @return delegated host id if the command will be delegated
 */
Pair<Boolean,Long> getCommandHostDelegation(long hostId,Command cmd);",0.975609756097561
106188,"public HypervisorType getHypervisorType(){
  return hypervisorType;
}","@Override public HypervisorType getHypervisorType(){
  return hypervisorType;
}",0.9324324324324323
106189,"public TemplateObjectTO(TemplateInfo template){
  this.path=template.getInstallPath();
  this.uuid=template.getUuid();
  this.id=template.getId();
  this.origUrl=template.getUrl();
  this.displayText=template.getDisplayText();
  this.checksum=template.getChecksum();
  this.hvm=template.isRequiresHvm();
  this.accountId=template.getAccountId();
  this.name=template.getUniqueName();
  this.format=template.getFormat();
  if (template.getDataStore() != null) {
    this.imageDataStore=template.getDataStore().getTO();
  }
}","public TemplateObjectTO(TemplateInfo template){
  this.path=template.getInstallPath();
  this.uuid=template.getUuid();
  this.id=template.getId();
  this.origUrl=template.getUrl();
  this.displayText=template.getDisplayText();
  this.checksum=template.getChecksum();
  this.hvm=template.isRequiresHvm();
  this.accountId=template.getAccountId();
  this.name=template.getUniqueName();
  this.format=template.getFormat();
  if (template.getDataStore() != null) {
    this.imageDataStore=template.getDataStore().getTO();
  }
  this.hypervisorType=template.getHypervisorType();
}",0.9526411657559198
106190,"public VolumeObjectTO(VolumeInfo volume){
  this.uuid=volume.getUuid();
  this.path=volume.getPath();
  this.accountId=volume.getAccountId();
  if (volume.getDataStore() != null) {
    this.dataStore=volume.getDataStore().getTO();
  }
 else {
    this.dataStore=null;
  }
  this.vmName=volume.getAttachedVmName();
  this.size=volume.getSize();
  this.setVolumeId(volume.getId());
  this.chainInfo=volume.getChainInfo();
  this.volumeType=volume.getVolumeType();
  this.name=volume.getName();
  this.setId(volume.getId());
  this.format=volume.getFormat();
  this.bytesReadRate=volume.getBytesReadRate();
  this.bytesWriteRate=volume.getBytesWriteRate();
  this.iopsReadRate=volume.getIopsReadRate();
  this.iopsWriteRate=volume.getIopsWriteRate();
}","public VolumeObjectTO(VolumeInfo volume){
  this.uuid=volume.getUuid();
  this.path=volume.getPath();
  this.accountId=volume.getAccountId();
  if (volume.getDataStore() != null) {
    this.dataStore=volume.getDataStore().getTO();
  }
 else {
    this.dataStore=null;
  }
  this.vmName=volume.getAttachedVmName();
  this.size=volume.getSize();
  this.setVolumeId(volume.getId());
  this.chainInfo=volume.getChainInfo();
  this.volumeType=volume.getVolumeType();
  this.name=volume.getName();
  this.setId(volume.getId());
  this.format=volume.getFormat();
  this.bytesReadRate=volume.getBytesReadRate();
  this.bytesWriteRate=volume.getBytesWriteRate();
  this.iopsReadRate=volume.getIopsReadRate();
  this.iopsWriteRate=volume.getIopsWriteRate();
  this.hypervisorType=volume.getHypervisorType();
}",0.9677002583979328
106191,"@Override @DB public long getCommandHostDelegation(long hostId,Command cmd){
  boolean needDelegation=false;
  if (cmd instanceof PrimaryStorageDownloadCommand || cmd instanceof BackupSnapshotCommand || cmd instanceof CreatePrivateTemplateFromVolumeCommand|| cmd instanceof CreatePrivateTemplateFromSnapshotCommand|| cmd instanceof CopyVolumeCommand|| cmd instanceof CreateVolumeOVACommand|| cmd instanceof PrepareOVAPackingCommand|| cmd instanceof CreateVolumeFromSnapshotCommand|| cmd instanceof CopyCommand) {
    if (cmd instanceof CopyCommand) {
      CopyCommand cpyCommand=(CopyCommand)cmd;
      DataTO srcData=cpyCommand.getSrcTO();
      DataStoreTO srcStoreTO=srcData.getDataStore();
      DataTO destData=cpyCommand.getDestTO();
      DataStoreTO destStoreTO=destData.getDataStore();
      if (destData.getObjectType() == DataObjectType.VOLUME && destStoreTO.getRole() == DataStoreRole.Primary && srcData.getObjectType() == DataObjectType.TEMPLATE && srcStoreTO.getRole() == DataStoreRole.Primary) {
        needDelegation=false;
      }
 else {
        needDelegation=true;
      }
    }
 else {
      needDelegation=true;
    }
  }
  if (cmd instanceof PrepareOVAPackingCommand || cmd instanceof CreateVolumeOVACommand) {
    cmd.setContextParam(""String_Node_Str"",HypervisorType.VMware.toString());
  }
  if (needDelegation) {
    HostVO host=_hostDao.findById(hostId);
    assert(host != null);
    assert(host.getHypervisorType() == HypervisorType.VMware);
    long dcId=host.getDataCenterId();
    Pair<HostVO,SecondaryStorageVmVO> cmdTarget=_secStorageMgr.assignSecStorageVm(dcId,cmd);
    if (cmdTarget != null) {
      cmd.setContextParam(""String_Node_Str"",HypervisorType.VMware.toString());
      Map<String,String> hostDetails=_hostDetailsDao.findDetails(hostId);
      cmd.setContextParam(""String_Node_Str"",resolveNameInGuid(hostDetails.get(""String_Node_Str"")));
      cmd.setContextParam(""String_Node_Str"",hostDetails.get(""String_Node_Str""));
      cmd.setContextParam(""String_Node_Str"",hostDetails.get(""String_Node_Str""));
      cmd.setContextParam(""String_Node_Str"",_vmwareMgr.getServiceConsolePortGroupName());
      cmd.setContextParam(""String_Node_Str"",_vmwareMgr.getManagementPortGroupName());
      CommandExecLogVO execLog=new CommandExecLogVO(cmdTarget.first().getId(),cmdTarget.second().getId(),cmd.getClass().getSimpleName(),1);
      _cmdExecLogDao.persist(execLog);
      cmd.setContextParam(""String_Node_Str"",String.valueOf(execLog.getId()));
      if (cmd instanceof BackupSnapshotCommand || cmd instanceof CreatePrivateTemplateFromVolumeCommand || cmd instanceof CreatePrivateTemplateFromSnapshotCommand|| cmd instanceof CopyVolumeCommand|| cmd instanceof CopyCommand|| cmd instanceof CreateVolumeOVACommand|| cmd instanceof PrepareOVAPackingCommand|| cmd instanceof CreateVolumeFromSnapshotCommand) {
        String workerName=_vmwareMgr.composeWorkerName();
        long checkPointId=1;
        cmd.setContextParam(""String_Node_Str"",workerName);
        cmd.setContextParam(""String_Node_Str"",String.valueOf(checkPointId));
        String workerName2=_vmwareMgr.composeWorkerName();
        long checkPointId2=1;
        cmd.setContextParam(""String_Node_Str"",workerName2);
        cmd.setContextParam(""String_Node_Str"",String.valueOf(checkPointId2));
      }
      return cmdTarget.first().getId();
    }
  }
  return hostId;
}","@Override @DB public Pair<Boolean,Long> getCommandHostDelegation(long hostId,Command cmd){
  boolean needDelegation=false;
  if (cmd instanceof CopyCommand) {
    CopyCommand cpyCommand=(CopyCommand)cmd;
    DataTO srcData=cpyCommand.getSrcTO();
    DataStoreTO srcStoreTO=srcData.getDataStore();
    DataTO destData=cpyCommand.getDestTO();
    DataStoreTO destStoreTO=destData.getDataStore();
    if (!(HypervisorType.VMware == srcData.getHypervisorType() || HypervisorType.VMware == destData.getHypervisorType())) {
      return new Pair<Boolean,Long>(Boolean.FALSE,new Long(hostId));
    }
    if (destData.getObjectType() == DataObjectType.VOLUME && destStoreTO.getRole() == DataStoreRole.Primary && srcData.getObjectType() == DataObjectType.TEMPLATE && srcStoreTO.getRole() == DataStoreRole.Primary) {
      needDelegation=false;
    }
 else {
      needDelegation=true;
    }
  }
  if (!needDelegation) {
    return new Pair<Boolean,Long>(Boolean.FALSE,new Long(hostId));
  }
  HostVO host=_hostDao.findById(hostId);
  long dcId=host.getDataCenterId();
  Pair<HostVO,SecondaryStorageVmVO> cmdTarget=_secStorageMgr.assignSecStorageVm(dcId,cmd);
  if (cmdTarget != null) {
    cmd.setContextParam(""String_Node_Str"",HypervisorType.VMware.toString());
    if (host.getType() == Host.Type.Routing) {
      Map<String,String> hostDetails=_hostDetailsDao.findDetails(hostId);
      cmd.setContextParam(""String_Node_Str"",resolveNameInGuid(hostDetails.get(""String_Node_Str"")));
      cmd.setContextParam(""String_Node_Str"",hostDetails.get(""String_Node_Str""));
      cmd.setContextParam(""String_Node_Str"",hostDetails.get(""String_Node_Str""));
      cmd.setContextParam(""String_Node_Str"",_vmwareMgr.getServiceConsolePortGroupName());
      cmd.setContextParam(""String_Node_Str"",_vmwareMgr.getManagementPortGroupName());
    }
    CommandExecLogVO execLog=new CommandExecLogVO(cmdTarget.first().getId(),cmdTarget.second().getId(),cmd.getClass().getSimpleName(),1);
    _cmdExecLogDao.persist(execLog);
    cmd.setContextParam(""String_Node_Str"",String.valueOf(execLog.getId()));
    if (cmd instanceof BackupSnapshotCommand || cmd instanceof CreatePrivateTemplateFromVolumeCommand || cmd instanceof CreatePrivateTemplateFromSnapshotCommand|| cmd instanceof CopyVolumeCommand|| cmd instanceof CopyCommand|| cmd instanceof CreateVolumeOVACommand|| cmd instanceof PrepareOVAPackingCommand|| cmd instanceof CreateVolumeFromSnapshotCommand) {
      String workerName=_vmwareMgr.composeWorkerName();
      long checkPointId=1;
      cmd.setContextParam(""String_Node_Str"",workerName);
      cmd.setContextParam(""String_Node_Str"",String.valueOf(checkPointId));
      String workerName2=_vmwareMgr.composeWorkerName();
      long checkPointId2=1;
      cmd.setContextParam(""String_Node_Str"",workerName2);
      cmd.setContextParam(""String_Node_Str"",String.valueOf(checkPointId2));
    }
    return new Pair<Boolean,Long>(Boolean.TRUE,cmdTarget.first().getId());
  }
  return new Pair<Boolean,Long>(Boolean.FALSE,new Long(hostId));
}",0.3008461297398934
106192,"public Boolean getDisplayVolume(){
  return displayVolume != null ? displayVolume : Boolean.TRUE;
}","public Boolean getDisplayVolume(){
  return displayVolume;
}",0.7547169811320755
106193,"public AsyncJob.Type getInstanceType(){
  return AsyncJob.Type.Volume;
}","@Override public AsyncJob.Type getInstanceType(){
  return AsyncJob.Type.Volume;
}",0.935064935064935
106194,"@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + this.getClass().getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    Class<? extends Command> clz=cmd.getClass();
    if (clz == CreateCommand.class) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (clz == SetPortForwardingRulesCommand.class) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (clz == SetStaticNatRulesCommand.class) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (clz == LoadBalancerConfigCommand.class) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (clz == IpAssocCommand.class) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (clz == SavePasswordCommand.class) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (clz == DhcpEntryCommand.class) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (clz == CreateIpAliasCommand.class) {
      return execute((CreateIpAliasCommand)cmd);
    }
 else     if (clz == DnsMasqConfigCommand.class) {
      return execute((DnsMasqConfigCommand)cmd);
    }
 else     if (clz == DeleteIpAliasCommand.class) {
      return execute((DeleteIpAliasCommand)cmd);
    }
 else     if (clz == VmDataCommand.class) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (clz == ReadyCommand.class) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (clz == GetHostStatsCommand.class) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (clz == GetVmStatsCommand.class) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (clz == CheckHealthCommand.class) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (clz == StopCommand.class) {
      answer=execute((StopCommand)cmd);
    }
 else     if (clz == RebootRouterCommand.class) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (clz == RebootCommand.class) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (clz == CheckVirtualMachineCommand.class) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (clz == PrepareForMigrationCommand.class) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (clz == MigrateCommand.class) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (clz == MigrateWithStorageCommand.class) {
      answer=execute((MigrateWithStorageCommand)cmd);
    }
 else     if (clz == MigrateVolumeCommand.class) {
      answer=execute((MigrateVolumeCommand)cmd);
    }
 else     if (clz == DestroyCommand.class) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (clz == CreateStoragePoolCommand.class) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (clz == ModifyStoragePoolCommand.class) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (clz == DeleteStoragePoolCommand.class) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (clz == CopyVolumeCommand.class) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (clz == CreateVolumeOVACommand.class) {
      answer=execute((CreateVolumeOVACommand)cmd);
    }
 else     if (clz == PrepareOVAPackingCommand.class) {
      answer=execute((PrepareOVAPackingCommand)cmd);
    }
 else     if (clz == AttachVolumeCommand.class) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (clz == AttachIsoCommand.class) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (clz == ValidateSnapshotCommand.class) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (clz == ManageSnapshotCommand.class) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (clz == BackupSnapshotCommand.class) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (clz == CreateVolumeFromSnapshotCommand.class) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (clz == CreatePrivateTemplateFromVolumeCommand.class) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (clz == CreatePrivateTemplateFromSnapshotCommand.class) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (clz == UpgradeSnapshotCommand.class) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (clz == GetStorageStatsCommand.class) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (clz == PrimaryStorageDownloadCommand.class) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (clz == GetVncPortCommand.class) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (clz == SetupCommand.class) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (clz == MaintainCommand.class) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (clz == PingTestCommand.class) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (clz == CheckOnHostCommand.class) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (clz == ModifySshKeysCommand.class) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (clz == PoolEjectCommand.class) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (clz == NetworkUsageCommand.class) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (clz == StartCommand.class) {
      answer=execute((StartCommand)cmd);
    }
 else     if (clz == RemoteAccessVpnCfgCommand.class) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (clz == VpnUsersCfgCommand.class) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (clz == CheckSshCommand.class) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (clz == CheckRouterCommand.class) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (clz == SetFirewallRulesCommand.class) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (clz == BumpUpPriorityCommand.class) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (clz == GetDomRVersionCmd.class) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else     if (clz == CheckNetworkCommand.class) {
      answer=execute((CheckNetworkCommand)cmd);
    }
 else     if (clz == SetupGuestNetworkCommand.class) {
      answer=execute((SetupGuestNetworkCommand)cmd);
    }
 else     if (clz == IpAssocVpcCommand.class) {
      answer=execute((IpAssocVpcCommand)cmd);
    }
 else     if (clz == PlugNicCommand.class) {
      answer=execute((PlugNicCommand)cmd);
    }
 else     if (clz == UnPlugNicCommand.class) {
      answer=execute((UnPlugNicCommand)cmd);
    }
 else     if (clz == SetSourceNatCommand.class) {
      answer=execute((SetSourceNatCommand)cmd);
    }
 else     if (clz == SetNetworkACLCommand.class) {
      answer=execute((SetNetworkACLCommand)cmd);
    }
 else     if (cmd instanceof CreateVMSnapshotCommand) {
      return execute((CreateVMSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteVMSnapshotCommand) {
      return execute((DeleteVMSnapshotCommand)cmd);
    }
 else     if (cmd instanceof RevertToVMSnapshotCommand) {
      return execute((RevertToVMSnapshotCommand)cmd);
    }
 else     if (clz == SetPortForwardingRulesVpcCommand.class) {
      answer=execute((SetPortForwardingRulesVpcCommand)cmd);
    }
 else     if (clz == Site2SiteVpnCfgCommand.class) {
      answer=execute((Site2SiteVpnCfgCommand)cmd);
    }
 else     if (clz == CheckS2SVpnConnectionsCommand.class) {
      answer=execute((CheckS2SVpnConnectionsCommand)cmd);
    }
 else     if (clz == ResizeVolumeCommand.class) {
      return execute((ResizeVolumeCommand)cmd);
    }
 else     if (clz == UnregisterVMCommand.class) {
      return execute((UnregisterVMCommand)cmd);
    }
 else     if (cmd instanceof StorageSubSystemCommand) {
      return storageHandler.handleStorageCommands((StorageSubSystemCommand)cmd);
    }
 else     if (clz == ScaleVmCommand.class) {
      return execute((ScaleVmCommand)cmd);
    }
 else     if (clz == PvlanSetupCommand.class) {
      return execute((PvlanSetupCommand)cmd);
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.getValue(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.getValue(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}","@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + this.getClass().getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    Class<? extends Command> clz=cmd.getClass();
    if (clz == CreateCommand.class) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (clz == SetPortForwardingRulesCommand.class) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (clz == SetStaticNatRulesCommand.class) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (clz == LoadBalancerConfigCommand.class) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (clz == IpAssocCommand.class) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (clz == SavePasswordCommand.class) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (clz == DhcpEntryCommand.class) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (clz == CreateIpAliasCommand.class) {
      return execute((CreateIpAliasCommand)cmd);
    }
 else     if (clz == DnsMasqConfigCommand.class) {
      return execute((DnsMasqConfigCommand)cmd);
    }
 else     if (clz == DeleteIpAliasCommand.class) {
      return execute((DeleteIpAliasCommand)cmd);
    }
 else     if (clz == VmDataCommand.class) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (clz == ReadyCommand.class) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (clz == GetHostStatsCommand.class) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (clz == GetVmStatsCommand.class) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (clz == CheckHealthCommand.class) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (clz == StopCommand.class) {
      answer=execute((StopCommand)cmd);
    }
 else     if (clz == RebootRouterCommand.class) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (clz == RebootCommand.class) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (clz == CheckVirtualMachineCommand.class) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (clz == PrepareForMigrationCommand.class) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (clz == MigrateCommand.class) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (clz == MigrateWithStorageCommand.class) {
      answer=execute((MigrateWithStorageCommand)cmd);
    }
 else     if (clz == MigrateVolumeCommand.class) {
      answer=execute((MigrateVolumeCommand)cmd);
    }
 else     if (clz == DestroyCommand.class) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (clz == CreateStoragePoolCommand.class) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (clz == ModifyStoragePoolCommand.class) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (clz == DeleteStoragePoolCommand.class) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (clz == CopyVolumeCommand.class) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (clz == CreateVolumeOVACommand.class) {
      answer=execute((CreateVolumeOVACommand)cmd);
    }
 else     if (clz == PrepareOVAPackingCommand.class) {
      answer=execute((PrepareOVAPackingCommand)cmd);
    }
 else     if (clz == AttachVolumeCommand.class) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (clz == AttachIsoCommand.class) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (clz == ValidateSnapshotCommand.class) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (clz == ManageSnapshotCommand.class) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (clz == BackupSnapshotCommand.class) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (clz == CreateVolumeFromSnapshotCommand.class) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (clz == CreatePrivateTemplateFromVolumeCommand.class) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (clz == CreatePrivateTemplateFromSnapshotCommand.class) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (clz == UpgradeSnapshotCommand.class) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (clz == GetStorageStatsCommand.class) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (clz == PrimaryStorageDownloadCommand.class) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (clz == GetVncPortCommand.class) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (clz == SetupCommand.class) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (clz == MaintainCommand.class) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (clz == PingTestCommand.class) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (clz == CheckOnHostCommand.class) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (clz == ModifySshKeysCommand.class) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (clz == PoolEjectCommand.class) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (clz == NetworkUsageCommand.class) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (clz == StartCommand.class) {
      answer=execute((StartCommand)cmd);
    }
 else     if (clz == RemoteAccessVpnCfgCommand.class) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (clz == VpnUsersCfgCommand.class) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (clz == CheckSshCommand.class) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (clz == CheckRouterCommand.class) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (clz == SetFirewallRulesCommand.class) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (clz == BumpUpPriorityCommand.class) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (clz == GetDomRVersionCmd.class) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else     if (clz == CheckNetworkCommand.class) {
      answer=execute((CheckNetworkCommand)cmd);
    }
 else     if (clz == SetupGuestNetworkCommand.class) {
      answer=execute((SetupGuestNetworkCommand)cmd);
    }
 else     if (clz == IpAssocVpcCommand.class) {
      answer=execute((IpAssocVpcCommand)cmd);
    }
 else     if (clz == PlugNicCommand.class) {
      answer=execute((PlugNicCommand)cmd);
    }
 else     if (clz == UnPlugNicCommand.class) {
      answer=execute((UnPlugNicCommand)cmd);
    }
 else     if (clz == SetSourceNatCommand.class) {
      answer=execute((SetSourceNatCommand)cmd);
    }
 else     if (clz == SetNetworkACLCommand.class) {
      answer=execute((SetNetworkACLCommand)cmd);
    }
 else     if (cmd instanceof CreateVMSnapshotCommand) {
      return execute((CreateVMSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteVMSnapshotCommand) {
      return execute((DeleteVMSnapshotCommand)cmd);
    }
 else     if (cmd instanceof RevertToVMSnapshotCommand) {
      return execute((RevertToVMSnapshotCommand)cmd);
    }
 else     if (clz == SetPortForwardingRulesVpcCommand.class) {
      answer=execute((SetPortForwardingRulesVpcCommand)cmd);
    }
 else     if (clz == Site2SiteVpnCfgCommand.class) {
      answer=execute((Site2SiteVpnCfgCommand)cmd);
    }
 else     if (clz == CheckS2SVpnConnectionsCommand.class) {
      answer=execute((CheckS2SVpnConnectionsCommand)cmd);
    }
 else     if (clz == ResizeVolumeCommand.class) {
      return execute((ResizeVolumeCommand)cmd);
    }
 else     if (clz == UnregisterVMCommand.class) {
      return execute((UnregisterVMCommand)cmd);
    }
 else     if (cmd instanceof StorageSubSystemCommand) {
      return storageHandler.handleStorageCommands((StorageSubSystemCommand)cmd);
    }
 else     if (clz == ScaleVmCommand.class) {
      return execute((ScaleVmCommand)cmd);
    }
 else     if (clz == PvlanSetupCommand.class) {
      return execute((PvlanSetupCommand)cmd);
    }
 else     if (clz == SetStaticRouteCommand.class) {
      answer=execute((SetStaticRouteCommand)cmd);
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.getValue(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.getValue(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}",0.9947234707836624
106195,"@Override public S3TO toS3TO(){
  Boolean httpsFlag=null;
  if (this.httpsFlag != null) {
    httpsFlag=this.httpsFlag == 0 ? false : true;
  }
  return new S3TO(this.id,this.uuid,this.accessKey,this.secretKey,this.endPoint,this.bucketName,httpsFlag,this.connectionTimeout,this.maxErrorRetry,this.socketTimeout,this.created);
}","@Override public S3TO toS3TO(){
  Boolean httpsFlag=null;
  if (this.httpsFlag != null) {
    httpsFlag=this.httpsFlag == 0 ? false : true;
  }
  return new S3TO(this.id,this.uuid,this.accessKey,this.secretKey,this.endPoint,this.bucketName,httpsFlag,this.connectionTimeout,this.maxErrorRetry,this.socketTimeout,this.created,false);
}",0.990909090909091
106196,"private void updateSystemVmTemplates(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  boolean xenserver=false;
  boolean kvm=false;
  boolean VMware=false;
  boolean Hyperv=false;
  boolean LXC=false;
  s_logger.debug(""String_Node_Str"");
  try {
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      while (rs.next()) {
        if (""String_Node_Str"".equals(rs.getString(1))) {
          xenserver=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          kvm=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          VMware=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          Hyperv=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          LXC=true;
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (xenserver) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (kvm) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (VMware) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (Hyperv) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (LXC) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
  }
  finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","private void updateSystemVmTemplates(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  boolean xenserver=false;
  boolean kvm=false;
  boolean VMware=false;
  boolean Hyperv=false;
  boolean LXC=false;
  s_logger.debug(""String_Node_Str"");
  try {
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      while (rs.next()) {
        if (""String_Node_Str"".equals(rs.getString(1))) {
          xenserver=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          kvm=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          VMware=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          Hyperv=true;
        }
 else         if (""String_Node_Str"".equals(rs.getString(1))) {
          LXC=true;
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (xenserver) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (kvm) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (VMware) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (Hyperv) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
    try {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (rs.next()) {
        long templateId=rs.getLong(1);
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,templateId);
        pstmt.executeUpdate();
        pstmt.close();
      }
 else {
        if (LXC) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"");
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    s_logger.debug(""String_Node_Str"");
  }
  finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}",0.9689943877081608
106197,"protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath);
    final File downloadDirectory=_storage.getFile(downloadPath);
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
 else {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
    List<File> files=getDirectory(s3,s3.getBucketName(),destPath,downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    File destFile=null;
    for (    File f : files) {
      if (!f.getName().endsWith(""String_Node_Str"")) {
        destFile=f;
        break;
      }
    }
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    String scriptsDir=""String_Node_Str"";
    String createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createTmpltScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createTmpltScr);
    String createVolScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createVolScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createVolScr);
    String script=srcData.getObjectType() == DataObjectType.TEMPLATE ? createTmpltScr : createVolScr;
    int installTimeoutPerGig=180 * 60 * 1000;
    int imgSizeGigs=(int)Math.ceil(destFile.length() * 1.0d / (1024 * 1024 * 1024));
    imgSizeGigs++;
    long timeout=imgSizeGigs * installTimeoutPerGig;
    String origPath=destFile.getAbsolutePath();
    String extension=null;
    if (srcData.getObjectType() == DataObjectType.TEMPLATE) {
      extension=((TemplateObjectTO)srcData).getFormat().getFileExtension();
    }
 else {
      extension=((VolumeObjectTO)srcData).getFormat().getFileExtension();
    }
    String templateName=UUID.randomUUID().toString();
    String templateFilename=templateName + ""String_Node_Str"" + extension;
    Script scr=new Script(script,timeout,s_logger);
    scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
    scr.add(""String_Node_Str"",templateFilename);
    scr.add(""String_Node_Str"",downloadPath);
    scr.add(""String_Node_Str"",origPath);
    String result;
    result=scr.execute();
    if (result != null) {
      throw new CloudRuntimeException(""String_Node_Str"" + script);
    }
    String finalFileName=templateFilename;
    String finalDownloadPath=destPath + File.separator + templateFilename;
    long size=this._storage.getSize(downloadPath + File.separator + templateFilename);
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(finalDownloadPath);
      newTemplTO.setName(finalFileName);
      newTemplTO.setSize(size);
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}","protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath);
    final File downloadDirectory=_storage.getFile(downloadPath);
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
 else {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
    File destFile=S3Utils.getFile(s3,s3.getBucketName(),srcData.getPath(),downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    String scriptsDir=""String_Node_Str"";
    String createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createTmpltScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createTmpltScr);
    String createVolScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createVolScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createVolScr);
    String script=srcData.getObjectType() == DataObjectType.TEMPLATE ? createTmpltScr : createVolScr;
    int installTimeoutPerGig=180 * 60 * 1000;
    int imgSizeGigs=(int)Math.ceil(destFile.length() * 1.0d / (1024 * 1024 * 1024));
    imgSizeGigs++;
    long timeout=imgSizeGigs * installTimeoutPerGig;
    String origPath=destFile.getAbsolutePath();
    String extension=null;
    if (srcData.getObjectType() == DataObjectType.TEMPLATE) {
      extension=((TemplateObjectTO)srcData).getFormat().getFileExtension();
    }
 else {
      extension=((VolumeObjectTO)srcData).getFormat().getFileExtension();
    }
    String templateName=UUID.randomUUID().toString();
    String templateFilename=templateName + ""String_Node_Str"" + extension;
    Script scr=new Script(script,timeout,s_logger);
    scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
    scr.add(""String_Node_Str"",templateFilename);
    scr.add(""String_Node_Str"",downloadPath);
    scr.add(""String_Node_Str"",origPath);
    String result;
    result=scr.execute();
    if (result != null) {
      throw new CloudRuntimeException(""String_Node_Str"" + script);
    }
    String finalFileName=templateFilename;
    String finalDownloadPath=destPath + File.separator + templateFilename;
    long size=this._storage.getSize(downloadPath + File.separator + templateFilename);
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(finalDownloadPath);
      newTemplTO.setName(finalFileName);
      newTemplTO.setSize(size);
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}",0.9683553285085852
106198,"Map<String,TemplateProp> s3ListTemplate(S3TO s3){
  String bucket=s3.getBucketName();
  final List<S3ObjectSummary> objectSummaries=S3Utils.getDirectory(s3,bucket,this.TEMPLATE_ROOT_DIR);
  if (objectSummaries == null)   return null;
  Map<String,TemplateProp> tmpltInfos=new HashMap<String,TemplateProp>();
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String key=objectSummary.getKey();
    String installPath=StringUtils.substringBeforeLast(key,S3Utils.SEPARATOR);
    String uniqueName=this.determineS3TemplateNameFromKey(key);
    TemplateProp tInfo=new TemplateProp(uniqueName,installPath,objectSummary.getSize(),objectSummary.getSize(),true,false);
    tmpltInfos.put(uniqueName,tInfo);
  }
  return tmpltInfos;
}","Map<String,TemplateProp> s3ListTemplate(S3TO s3){
  String bucket=s3.getBucketName();
  final List<S3ObjectSummary> objectSummaries=S3Utils.getDirectory(s3,bucket,this.TEMPLATE_ROOT_DIR);
  if (objectSummaries == null)   return null;
  Map<String,TemplateProp> tmpltInfos=new HashMap<String,TemplateProp>();
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String key=objectSummary.getKey();
    String uniqueName=this.determineS3TemplateNameFromKey(key);
    TemplateProp tInfo=new TemplateProp(uniqueName,key,objectSummary.getSize(),objectSummary.getSize(),true,false);
    tmpltInfos.put(uniqueName,tInfo);
  }
  return tmpltInfos;
}",0.6479481641468683
106199,"Map<Long,TemplateProp> s3ListVolume(S3TO s3){
  String bucket=s3.getBucketName();
  final List<S3ObjectSummary> objectSummaries=S3Utils.getDirectory(s3,bucket,this.VOLUME_ROOT_DIR);
  if (objectSummaries == null)   return null;
  Map<Long,TemplateProp> tmpltInfos=new HashMap<Long,TemplateProp>();
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String key=objectSummary.getKey();
    String installPath=StringUtils.substringBeforeLast(key,S3Utils.SEPARATOR);
    Long id=this.determineS3VolumeIdFromKey(key);
    TemplateProp tInfo=new TemplateProp(id.toString(),installPath,objectSummary.getSize(),objectSummary.getSize(),true,false);
    tmpltInfos.put(id,tInfo);
  }
  return tmpltInfos;
}","Map<Long,TemplateProp> s3ListVolume(S3TO s3){
  String bucket=s3.getBucketName();
  final List<S3ObjectSummary> objectSummaries=S3Utils.getDirectory(s3,bucket,this.VOLUME_ROOT_DIR);
  if (objectSummaries == null)   return null;
  Map<Long,TemplateProp> tmpltInfos=new HashMap<Long,TemplateProp>();
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String key=objectSummary.getKey();
    Long id=this.determineS3VolumeIdFromKey(key);
    TemplateProp tInfo=new TemplateProp(id.toString(),key,objectSummary.getSize(),objectSummary.getSize(),true,false);
    tmpltInfos.put(id,tInfo);
  }
  return tmpltInfos;
}",0.9301277235161532
106200,"@Override public void prepareStop(VirtualMachineProfile<UserVmVO> profile){
  UserVmVO vm=profile.getVirtualMachine();
  if (vm.getState() == State.Running)   collectVmDiskStatistics(vm);
}","@Override public void prepareStop(VirtualMachineProfile<UserVmVO> profile){
  UserVmVO vm=_vmDao.findById(profile.getId());
  if (vm.getState() == State.Running)   collectVmDiskStatistics(vm);
}",0.9138381201044388
106201,"public boolean stateTransit(Volume.Event event){
  boolean result=false;
  try {
    volumeVO=volumeDao.findById(volumeVO.getId());
    result=_volStateMachine.transitTo(volumeVO,event,null,volumeDao);
    volumeVO=volumeDao.findById(volumeVO.getId());
  }
 catch (  NoTransitionException e) {
    String errorMessage=""String_Node_Str"" + this.getVolumeId() + ""String_Node_Str""+ e.toString();
    s_logger.debug(errorMessage);
    throw new CloudRuntimeException(errorMessage);
  }
  return result;
}","@Override public boolean stateTransit(Volume.Event event){
  boolean result=false;
  try {
    volumeVO=volumeDao.findById(volumeVO.getId());
    result=_volStateMachine.transitTo(volumeVO,event,null,volumeDao);
    volumeVO=volumeDao.findById(volumeVO.getId());
  }
 catch (  NoTransitionException e) {
    String errorMessage=""String_Node_Str"" + this.getVolumeId() + ""String_Node_Str""+ e.toString();
    s_logger.debug(errorMessage);
    throw new CloudRuntimeException(errorMessage);
  }
  return result;
}",0.9900793650793652
106202,"protected Void copyVolumeFromImageToPrimaryCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CopyVolumeContext<VolumeApiResult> context){
  VolumeInfo srcVolume=context.srcVolume;
  VolumeInfo destVolume=context.destVolume;
  CopyCommandResult result=callback.getResult();
  AsyncCallFuture<VolumeApiResult> future=context.future;
  VolumeApiResult res=new VolumeApiResult(destVolume);
  try {
    if (res.isFailed()) {
      destVolume.processEvent(Event.OperationFailed);
      srcVolume.processEvent(Event.OperationFailed);
      res.setResult(result.getResult());
      future.complete(res);
    }
    srcVolume.processEvent(Event.OperationSuccessed);
    destVolume.processEvent(Event.OperationSuccessed,result.getAnswer());
    srcVolume.getDataStore().delete(srcVolume);
    future.complete(res);
  }
 catch (  Exception e) {
    res.setResult(e.toString());
    future.complete(res);
  }
  return null;
}","protected Void copyVolumeFromImageToPrimaryCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CopyVolumeContext<VolumeApiResult> context){
  VolumeInfo srcVolume=context.srcVolume;
  VolumeInfo destVolume=context.destVolume;
  CopyCommandResult result=callback.getResult();
  AsyncCallFuture<VolumeApiResult> future=context.future;
  VolumeApiResult res=new VolumeApiResult(destVolume);
  try {
    if (res.isFailed()) {
      destVolume.processEvent(Event.OperationFailed);
      srcVolume.processEvent(Event.OperationFailed);
      res.setResult(result.getResult());
      future.complete(res);
      return null;
    }
    srcVolume.processEvent(Event.OperationSuccessed);
    destVolume.processEvent(Event.OperationSuccessed,result.getAnswer());
    srcVolume.getDataStore().delete(srcVolume);
    future.complete(res);
  }
 catch (  Exception e) {
    res.setResult(e.toString());
    future.complete(res);
  }
  return null;
}",0.9900052603892688
106203,"protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CopyVolumeContext<VolumeApiResult> context){
  VolumeInfo srcVolume=context.srcVolume;
  VolumeInfo destVolume=context.destVolume;
  CopyCommandResult result=callback.getResult();
  AsyncCallFuture<VolumeApiResult> future=context.future;
  VolumeApiResult res=new VolumeApiResult(destVolume);
  try {
    if (res.isFailed()) {
      destVolume.processEvent(Event.OperationFailed);
      srcVolume.processEvent(Event.OperationFailed);
      res.setResult(result.getResult());
      future.complete(res);
    }
 else {
      srcVolume.processEvent(Event.OperationSuccessed);
      destVolume.processEvent(Event.OperationSuccessed,result.getAnswer());
      future.complete(res);
    }
  }
 catch (  Exception e) {
    res.setResult(e.toString());
    future.complete(res);
  }
  return null;
}","protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CopyVolumeContext<VolumeApiResult> context){
  VolumeInfo srcVolume=context.srcVolume;
  VolumeInfo destVolume=context.destVolume;
  CopyCommandResult result=callback.getResult();
  AsyncCallFuture<VolumeApiResult> future=context.future;
  VolumeApiResult res=new VolumeApiResult(destVolume);
  try {
    if (res.isFailed()) {
      srcVolume.processEvent(Event.OperationFailed);
      destVolume.processEventOnly(Event.OperationFailed);
      res.setResult(result.getResult());
      future.complete(res);
    }
 else {
      srcVolume.processEvent(Event.OperationSuccessed);
      destVolume.processEventOnly(Event.OperationSuccessed,result.getAnswer());
      future.complete(res);
    }
  }
 catch (  Exception e) {
    res.setResult(e.toString());
    future.complete(res);
  }
  return null;
}",0.9880043620501636
106204,"protected AsyncCallFuture<VolumeApiResult> copyVolumeFromPrimaryToImage(VolumeInfo srcVolume,DataStore destStore){
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  VolumeApiResult res=new VolumeApiResult(srcVolume);
  VolumeInfo destVolume=null;
  try {
    destVolume=(VolumeInfo)destStore.create(srcVolume);
    destVolume.processEvent(Event.CreateOnlyRequested);
    srcVolume.processEvent(Event.CopyingRequested);
    CopyVolumeContext<VolumeApiResult> context=new CopyVolumeContext<VolumeApiResult>(null,future,srcVolume,destVolume,destStore);
    AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().copyVolumeFromPrimaryToImageCallback(null,null)).setContext(context);
    motionSrv.copyAsync(srcVolume,destVolume,caller);
    return future;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
    if (destVolume != null) {
      destVolume.processEvent(Event.OperationFailed);
    }
    srcVolume.processEvent(Event.OperationFailed);
    res.setResult(e.toString());
    future.complete(res);
    return future;
  }
}","protected AsyncCallFuture<VolumeApiResult> copyVolumeFromPrimaryToImage(VolumeInfo srcVolume,DataStore destStore){
  AsyncCallFuture<VolumeApiResult> future=new AsyncCallFuture<VolumeApiResult>();
  VolumeApiResult res=new VolumeApiResult(srcVolume);
  VolumeInfo destVolume=null;
  try {
    destVolume=(VolumeInfo)destStore.create(srcVolume);
    srcVolume.processEvent(Event.MigrationRequested);
    destVolume.processEventOnly(Event.CreateOnlyRequested);
    CopyVolumeContext<VolumeApiResult> context=new CopyVolumeContext<VolumeApiResult>(null,future,srcVolume,destVolume,destStore);
    AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
    caller.setCallback(caller.getTarget().copyVolumeFromPrimaryToImageCallback(null,null)).setContext(context);
    motionSrv.copyAsync(srcVolume,destVolume,caller);
    return future;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
    if (destVolume != null) {
      destVolume.getDataStore().delete(destVolume);
    }
    srcVolume.processEvent(Event.OperationFailed);
    res.setResult(e.toString());
    future.complete(res);
    return future;
  }
}",0.865531914893617
106205,"void runAssignToGlobalLoadBalancerRuleTestSameZoneLb() throws Exception {
  Transaction txn=Transaction.open(""String_Node_Str"");
  GlobalLoadBalancingRulesServiceImpl gslbServiceImpl=new GlobalLoadBalancingRulesServiceImpl();
  gslbServiceImpl._accountMgr=Mockito.mock(AccountManager.class);
  gslbServiceImpl._gslbRuleDao=Mockito.mock(GlobalLoadBalancerRuleDao.class);
  gslbServiceImpl._gslbLbMapDao=Mockito.mock(GlobalLoadBalancerLbRuleMapDao.class);
  gslbServiceImpl._regionDao=Mockito.mock(RegionDao.class);
  gslbServiceImpl._rulesMgr=Mockito.mock(RulesManager.class);
  gslbServiceImpl._lbDao=Mockito.mock(LoadBalancerDao.class);
  gslbServiceImpl._networkDao=Mockito.mock(NetworkDao.class);
  gslbServiceImpl._globalConfigDao=Mockito.mock(ConfigurationDao.class);
  gslbServiceImpl._ipAddressDao=Mockito.mock(IPAddressDao.class);
  gslbServiceImpl._agentMgr=Mockito.mock(AgentManager.class);
  AssignToGlobalLoadBalancerRuleCmd assignCmd=new AssignToGlobalLoadBalancerRuleCmdExtn();
  Class<?> _class=assignCmd.getClass().getSuperclass();
  Account account=(Account)new AccountVO(""String_Node_Str"",3,""String_Node_Str"",(short)0,UUID.randomUUID().toString());
  when(gslbServiceImpl._accountMgr.getAccount(anyLong())).thenReturn(account);
  UserContext.registerContext(1,account,null,true);
  Field gslbRuleId=_class.getDeclaredField(""String_Node_Str"");
  gslbRuleId.setAccessible(true);
  gslbRuleId.set(assignCmd,new Long(1));
  GlobalLoadBalancerRuleVO gslbRule=new GlobalLoadBalancerRuleVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1,3,1,GlobalLoadBalancerRule.State.Active);
  when(gslbServiceImpl._gslbRuleDao.findById(new Long(1))).thenReturn(gslbRule);
  LoadBalancerVO lbRule1=new LoadBalancerVO();
  lbRule1.setState(FirewallRule.State.Active);
  Field networkIdField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  networkIdField1.setAccessible(true);
  networkIdField1.set(lbRule1,new Long(1));
  Field idField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  idField1.setAccessible(true);
  idField1.set(lbRule1,new Long(1));
  LoadBalancerVO lbRule2=new LoadBalancerVO();
  lbRule2.setState(FirewallRule.State.Active);
  Field networkIdField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  networkIdField2.setAccessible(true);
  networkIdField2.set(lbRule2,new Long(1));
  Field idField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  idField2.setAccessible(true);
  idField2.set(lbRule2,new Long(2));
  when(gslbServiceImpl._lbDao.findById(new Long(1))).thenReturn(lbRule1);
  when(gslbServiceImpl._lbDao.findById(new Long(2))).thenReturn(lbRule2);
  Field lbRules=_class.getDeclaredField(""String_Node_Str"");
  lbRules.setAccessible(true);
  List<Long> lbRuleIds=new ArrayList<Long>();
  lbRuleIds.add(new Long(1));
  lbRuleIds.add(new Long(2));
  lbRules.set(assignCmd,lbRuleIds);
  NetworkVO networkVo=new NetworkVO();
  Field dcID=NetworkVO.class.getDeclaredField(""String_Node_Str"");
  dcID.setAccessible(true);
  dcID.set(networkVo,new Long(1));
  when(gslbServiceImpl._networkDao.findById(new Long(1))).thenReturn(networkVo);
  try {
    gslbServiceImpl.assignToGlobalLoadBalancerRule(assignCmd);
  }
 catch (  InvalidParameterValueException e) {
    Assert.assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}","void runAssignToGlobalLoadBalancerRuleTestSameZoneLb() throws Exception {
  Transaction txn=Transaction.open(""String_Node_Str"");
  GlobalLoadBalancingRulesServiceImpl gslbServiceImpl=new GlobalLoadBalancingRulesServiceImpl();
  gslbServiceImpl._accountMgr=Mockito.mock(AccountManager.class);
  gslbServiceImpl._gslbRuleDao=Mockito.mock(GlobalLoadBalancerRuleDao.class);
  gslbServiceImpl._gslbLbMapDao=Mockito.mock(GlobalLoadBalancerLbRuleMapDao.class);
  gslbServiceImpl._regionDao=Mockito.mock(RegionDao.class);
  gslbServiceImpl._rulesMgr=Mockito.mock(RulesManager.class);
  gslbServiceImpl._lbDao=Mockito.mock(LoadBalancerDao.class);
  gslbServiceImpl._networkDao=Mockito.mock(NetworkDao.class);
  gslbServiceImpl._globalConfigDao=Mockito.mock(ConfigurationDao.class);
  gslbServiceImpl._ipAddressDao=Mockito.mock(IPAddressDao.class);
  gslbServiceImpl._agentMgr=Mockito.mock(AgentManager.class);
  AssignToGlobalLoadBalancerRuleCmd assignCmd=new AssignToGlobalLoadBalancerRuleCmdExtn();
  Class<?> _class=assignCmd.getClass().getSuperclass();
  Account account=(Account)new AccountVO(""String_Node_Str"",3,""String_Node_Str"",(short)0,UUID.randomUUID().toString());
  when(gslbServiceImpl._accountMgr.getAccount(anyLong())).thenReturn(account);
  UserContext.registerContext(1,account,null,true);
  Field gslbRuleId=_class.getDeclaredField(""String_Node_Str"");
  gslbRuleId.setAccessible(true);
  gslbRuleId.set(assignCmd,new Long(1));
  GlobalLoadBalancerRuleVO gslbRule=new GlobalLoadBalancerRuleVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1,3,1,GlobalLoadBalancerRule.State.Active);
  when(gslbServiceImpl._gslbRuleDao.findById(new Long(1))).thenReturn(gslbRule);
  LoadBalancerVO lbRule1=new LoadBalancerVO();
  lbRule1.setState(FirewallRule.State.Active);
  Field networkIdField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  Field accountIdField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  Field domainIdField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  networkIdField1.setAccessible(true);
  accountIdField1.setAccessible(true);
  domainIdField1.setAccessible(true);
  networkIdField1.set(lbRule1,new Long(1));
  accountIdField1.set(lbRule1,new Long(3));
  domainIdField1.set(lbRule1,new Long(1));
  Field idField1=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  idField1.setAccessible(true);
  idField1.set(lbRule1,new Long(1));
  LoadBalancerVO lbRule2=new LoadBalancerVO();
  lbRule2.setState(FirewallRule.State.Active);
  Field networkIdField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  Field accountIdField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  Field domainIdField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  networkIdField2.setAccessible(true);
  accountIdField2.setAccessible(true);
  domainIdField2.setAccessible(true);
  networkIdField2.set(lbRule2,new Long(1));
  accountIdField2.set(lbRule2,new Long(3));
  domainIdField2.set(lbRule2,new Long(1));
  Field idField2=LoadBalancerVO.class.getSuperclass().getDeclaredField(""String_Node_Str"");
  idField2.setAccessible(true);
  idField2.set(lbRule2,new Long(2));
  when(gslbServiceImpl._lbDao.findById(new Long(1))).thenReturn(lbRule1);
  when(gslbServiceImpl._lbDao.findById(new Long(2))).thenReturn(lbRule2);
  Field lbRules=_class.getDeclaredField(""String_Node_Str"");
  lbRules.setAccessible(true);
  List<Long> lbRuleIds=new ArrayList<Long>();
  lbRuleIds.add(new Long(1));
  lbRuleIds.add(new Long(2));
  lbRules.set(assignCmd,lbRuleIds);
  NetworkVO networkVo=new NetworkVO();
  Field dcID=NetworkVO.class.getDeclaredField(""String_Node_Str"");
  dcID.setAccessible(true);
  dcID.set(networkVo,new Long(1));
  when(gslbServiceImpl._networkDao.findById(new Long(1))).thenReturn(networkVo);
  try {
    gslbServiceImpl.assignToGlobalLoadBalancerRule(assignCmd);
  }
 catch (  InvalidParameterValueException e) {
    s_logger.info(e.getMessage());
    Assert.assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}",0.901012225581701
106206,"@Override public Answer copyVolumeFromPrimaryToSecondary(CopyCommand cmd){
  Connection conn=hypervisorResource.getConnection();
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  int wait=cmd.getWait();
  DataStoreTO destStore=destVolume.getDataStore();
  if (destStore instanceof NfsTO) {
    SR secondaryStorage=null;
    try {
      NfsTO nfsStore=(NfsTO)destStore;
      URI uri=new URI(nfsStore.getUrl());
      if (!hypervisorResource.createSecondaryStorageFolder(conn,uri.getHost() + ""String_Node_Str"" + uri.getPath(),destVolume.getPath())) {
        throw new InternalErrorException(""String_Node_Str"");
      }
      secondaryStorage=hypervisorResource.createNfsSRbyURI(conn,new URI(nfsStore.getUrl() + destVolume.getPath()),false);
      VDI srcVdi=getVDIbyUuid(conn,srcVolume.getPath());
      VDI destVdi=hypervisorResource.cloudVDIcopy(conn,srcVdi,secondaryStorage,wait);
      String destVolumeUUID=destVdi.getUuid(conn);
      VolumeObjectTO newVol=new VolumeObjectTO();
      newVol.setPath(destVolume.getPath() + File.separator + destVolumeUUID+ ""String_Node_Str"");
      newVol.setSize(srcVolume.getSize());
      return new CopyCmdAnswer(newVol);
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.toString());
      return new CopyCmdAnswer(""String_Node_Str"" + e.toString());
    }
 finally {
      hypervisorResource.removeSR(conn,secondaryStorage);
    }
  }
  return new CopyCmdAnswer(""String_Node_Str"");
}","@Override public Answer copyVolumeFromPrimaryToSecondary(CopyCommand cmd){
  Connection conn=hypervisorResource.getConnection();
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  int wait=cmd.getWait();
  DataStoreTO destStore=destVolume.getDataStore();
  if (destStore instanceof NfsTO) {
    SR secondaryStorage=null;
    try {
      NfsTO nfsStore=(NfsTO)destStore;
      URI uri=new URI(nfsStore.getUrl());
      if (!hypervisorResource.createSecondaryStorageFolder(conn,uri.getHost() + ""String_Node_Str"" + uri.getPath(),destVolume.getPath())) {
        throw new InternalErrorException(""String_Node_Str"");
      }
      secondaryStorage=hypervisorResource.createNfsSRbyURI(conn,new URI(nfsStore.getUrl() + File.separator + destVolume.getPath()),false);
      VDI srcVdi=getVDIbyUuid(conn,srcVolume.getPath());
      VDI destVdi=hypervisorResource.cloudVDIcopy(conn,srcVdi,secondaryStorage,wait);
      String destVolumeUUID=destVdi.getUuid(conn);
      VolumeObjectTO newVol=new VolumeObjectTO();
      newVol.setPath(destVolume.getPath() + File.separator + destVolumeUUID+ ""String_Node_Str"");
      newVol.setSize(srcVolume.getSize());
      return new CopyCmdAnswer(newVol);
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.toString());
      return new CopyCmdAnswer(""String_Node_Str"" + e.toString());
    }
 finally {
      hypervisorResource.removeSR(conn,secondaryStorage);
    }
  }
  return new CopyCmdAnswer(""String_Node_Str"");
}",0.9944571242256276
106207,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace(""String_Node_Str"" + vmId + ""String_Node_Str"");
    return vm;
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  User userCaller=_userDao.findById(userId);
  boolean status;
  State vmState=vm.getState();
  try {
    VirtualMachineEntity vmEntity=_orchSrvc.getVirtualMachine(vm.getUuid());
    status=vmEntity.destroy(new Long(userId).toString());
  }
 catch (  CloudException e) {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"",e);
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid());
      }
    }
    if (vmState != State.Error) {
      ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getServiceOfferingId());
      resourceCountDecrement(vm.getAccountId(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace(""String_Node_Str"" + vmId + ""String_Node_Str"");
    return vm;
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  User userCaller=_userDao.findById(userId);
  boolean status;
  State vmState=vm.getState();
  try {
    VirtualMachineEntity vmEntity=_orchSrvc.getVirtualMachine(vm.getUuid());
    status=vmEntity.destroy(new Long(userId).toString());
  }
 catch (  CloudException e) {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"",e);
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid());
      }
    }
    if (vmState != State.Error) {
      ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getServiceOfferingId());
      resourceCountDecrement(vm.getAccountId(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
}",0.9868212967843965
106208,"@Override public void createVolumeDownloadURL(Long entityId,String path,Type type,Long dataCenterId,Long uploadId){
  String errorString=""String_Node_Str"";
  boolean success=false;
  try {
    List<HostVO> storageServers=_resourceMgr.listAllHostsInOneZoneByType(Host.Type.SecondaryStorage,dataCenterId);
    if (storageServers == null) {
      errorString=""String_Node_Str"" + dataCenterId;
      throw new CloudRuntimeException(errorString);
    }
    UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
    uploadJob.setUploadState(Status.DOWNLOAD_URL_NOT_CREATED);
    uploadJob.setLastUpdated(new Date());
    _uploadDao.update(uploadJob.getId(),uploadJob);
    String uuid=UUID.randomUUID().toString() + path.substring(path.length() - 4);
    DataStore secStore=this.storeMgr.getDataStore(ApiDBUtils.findUploadById(uploadId).getDataStoreId(),DataStoreRole.Image);
    EndPoint ep=_epSelector.select(secStore);
    if (ep == null) {
      errorString=""String_Node_Str"" + secStore.getName();
      throw new CloudRuntimeException(errorString);
    }
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(((ImageStoreVO)secStore).getParent(),path,uuid);
    Answer ans=ep.sendMessage(cmd);
    if (ans == null || !ans.getResult()) {
      errorString=""String_Node_Str"" + type + ""String_Node_Str""+ entityId+ ""String_Node_Str""+ ans.getDetails();
      s_logger.warn(errorString);
      throw new CloudRuntimeException(errorString);
    }
    List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,dataCenterId,State.Running);
    if (ssVms.size() > 0) {
      SecondaryStorageVmVO ssVm=ssVms.get(0);
      if (ssVm.getPublicIpAddress() == null) {
        errorString=""String_Node_Str"";
        s_logger.error(errorString);
        throw new CloudRuntimeException(errorString);
      }
      String extractURL=generateCopyUrl(ssVm.getPublicIpAddress(),uuid);
      UploadVO vo=_uploadDao.createForUpdate();
      vo.setLastUpdated(new Date());
      vo.setUploadUrl(extractURL);
      vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
      _uploadDao.update(uploadId,vo);
      success=true;
      return;
    }
    errorString=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    throw new CloudRuntimeException(errorString);
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadId,uploadJob);
    }
  }
}","@Override public void createVolumeDownloadURL(Long entityId,String path,Type type,Long dataCenterId,Long uploadId){
  String errorString=""String_Node_Str"";
  boolean success=false;
  try {
    List<HostVO> storageServers=_resourceMgr.listAllHostsInOneZoneByType(Host.Type.SecondaryStorage,dataCenterId);
    if (storageServers == null) {
      errorString=""String_Node_Str"" + dataCenterId;
      throw new CloudRuntimeException(errorString);
    }
    UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
    uploadJob.setUploadState(Status.DOWNLOAD_URL_NOT_CREATED);
    uploadJob.setLastUpdated(new Date());
    _uploadDao.update(uploadJob.getId(),uploadJob);
    String uuid=UUID.randomUUID().toString() + path.substring(path.length() - 4);
    DataStore secStore=this.storeMgr.getDataStore(ApiDBUtils.findUploadById(uploadId).getDataStoreId(),DataStoreRole.Image);
    EndPoint ep=_epSelector.select(secStore);
    if (ep == null) {
      errorString=""String_Node_Str"" + secStore.getName();
      throw new CloudRuntimeException(errorString);
    }
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(((ImageStoreEntity)secStore).getMountPoint(),path,uuid);
    Answer ans=ep.sendMessage(cmd);
    if (ans == null || !ans.getResult()) {
      errorString=""String_Node_Str"" + type + ""String_Node_Str""+ entityId+ ""String_Node_Str""+ ans.getDetails();
      s_logger.warn(errorString);
      throw new CloudRuntimeException(errorString);
    }
    List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor,dataCenterId,State.Running);
    if (ssVms.size() > 0) {
      SecondaryStorageVmVO ssVm=ssVms.get(0);
      if (ssVm.getPublicIpAddress() == null) {
        errorString=""String_Node_Str"";
        s_logger.error(errorString);
        throw new CloudRuntimeException(errorString);
      }
      String extractURL=generateCopyUrl(ssVm.getPublicIpAddress(),uuid);
      UploadVO vo=_uploadDao.createForUpdate();
      vo.setLastUpdated(new Date());
      vo.setUploadUrl(extractURL);
      vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
      _uploadDao.update(uploadId,vo);
      success=true;
      return;
    }
    errorString=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    throw new CloudRuntimeException(errorString);
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadId);
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadId,uploadJob);
    }
  }
}",0.9915805587447378
106209,"private void deleteNetworkBridges(Network network){
  long accountID=network.getAccountId();
  long networkID=network.getId();
  Bridge netBridge=getNetworkBridge(networkID,accountID);
  if (netBridge != null) {
    cleanBridge(netBridge);
    for (    Object dhcpSubnet : netBridge.getDhcpSubnets()) {
      DhcpSubnet sub=(DhcpSubnet)dhcpSubnet;
      sub.delete();
    }
    netBridge.delete();
  }
}","private void deleteNetworkBridges(Network network){
  String accountUuid=getAccountUuid(network);
  long networkID=network.getId();
  Bridge netBridge=getNetworkBridge(networkID,accountUuid);
  if (netBridge != null) {
    cleanBridge(netBridge);
    for (    Object dhcpSubnet : netBridge.getDhcpSubnets()) {
      DhcpSubnet sub=(DhcpSubnet)dhcpSubnet;
      sub.delete();
    }
    netBridge.delete();
  }
}",0.949569495694957
106210,"private void deleteGuestNetworkRouters(Network network){
  long accountID=network.getAccountId();
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  Router tenantRouter=getGuestNetworkRouter(id,accountID,isVpc);
  for (  Port peerPort : tenantRouter.getPeerPorts((new MultivaluedMapImpl()))) {
    if (peerPort != null && peerPort instanceof RouterPort) {
      RouterPort checkPort=(RouterPort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
 else     if (peerPort != null && peerPort instanceof BridgePort) {
      BridgePort checkPort=(BridgePort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
  }
  if (tenantRouter != null) {
    for (    RouterPort p : tenantRouter.getPorts(new MultivaluedMapImpl())) {
      if (p.getType().equals(""String_Node_Str"")) {
        p.vifId(null).update();
      }
      if (p.getType().equals(""String_Node_Str"")) {
        p.unlink();
      }
      p.delete();
    }
    String accountIdStr=String.valueOf(accountID);
    String routerName=getRouterName(isVpc,id);
    RuleChain pre=api.getChain(tenantRouter.getInboundFilterId());
    RuleChain preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
    RuleChain post=api.getChain(tenantRouter.getOutboundFilterId());
    pre.delete();
    preFilter.delete();
    preNat.delete();
    post.delete();
    for (    Route r : tenantRouter.getRoutes(new MultivaluedMapImpl())) {
      r.delete();
    }
    tenantRouter.delete();
  }
}","private void deleteGuestNetworkRouters(Network network){
  String accountUuid=getAccountUuid(network);
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  Router tenantRouter=getGuestNetworkRouter(id,accountUuid,isVpc);
  for (  Port peerPort : tenantRouter.getPeerPorts((new MultivaluedMapImpl()))) {
    if (peerPort != null && peerPort instanceof RouterPort) {
      RouterPort checkPort=(RouterPort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
 else     if (peerPort != null && peerPort instanceof BridgePort) {
      BridgePort checkPort=(BridgePort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
  }
  if (tenantRouter != null) {
    for (    RouterPort p : tenantRouter.getPorts(new MultivaluedMapImpl())) {
      if (p.getType().equals(""String_Node_Str"")) {
        p.vifId(null).update();
      }
      if (p.getType().equals(""String_Node_Str"")) {
        p.unlink();
      }
      p.delete();
    }
    String accountIdStr=String.valueOf(accountUuid);
    String routerName=getRouterName(isVpc,id);
    RuleChain pre=api.getChain(tenantRouter.getInboundFilterId());
    RuleChain preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
    RuleChain post=api.getChain(tenantRouter.getOutboundFilterId());
    pre.delete();
    preFilter.delete();
    preNat.delete();
    post.delete();
    for (    Route r : tenantRouter.getRoutes(new MultivaluedMapImpl())) {
      r.delete();
    }
    tenantRouter.delete();
  }
}",0.9238656754678288
106211,"public boolean associatePublicIP(Network network,final List<? extends PublicIpAddress> ipAddress) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=null;
  String routerName=null;
  for (  PublicIpAddress ip : ipAddress) {
    if (ip.isSourceNat()) {
      if (resources == false) {
        tenantRouter=getOrCreateGuestNetworkRouter(network);
        providerRouter=api.getRouter(_providerRouterId);
        ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
        tenantUplink=ports[0];
        providerDownlink=ports[1];
        accountIdStr=String.valueOf(network.getAccountId());
        boolean isVpc=getIsVpc(network);
        long id=getRouterId(network,isVpc);
        routerName=getRouterName(isVpc,id);
        preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
        post=api.getChain(tenantRouter.getOutboundFilterId());
        resources=true;
      }
      applySourceNat(tenantRouter,providerRouter,tenantUplink,providerDownlink,preNat,post,ip);
    }
  }
  return true;
}","public boolean associatePublicIP(Network network,final List<? extends PublicIpAddress> ipAddress) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=null;
  String routerName=null;
  for (  PublicIpAddress ip : ipAddress) {
    if (ip.isSourceNat()) {
      if (resources == false) {
        tenantRouter=getOrCreateGuestNetworkRouter(network);
        providerRouter=api.getRouter(_providerRouterId);
        ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
        tenantUplink=ports[0];
        providerDownlink=ports[1];
        accountIdStr=getAccountUuid(network);
        boolean isVpc=getIsVpc(network);
        long id=getRouterId(network,isVpc);
        routerName=getRouterName(isVpc,id);
        preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
        post=api.getChain(tenantRouter.getOutboundFilterId());
        resources=true;
      }
      applySourceNat(tenantRouter,providerRouter,tenantUplink,providerDownlink,preNat,post,ip);
    }
  }
  return true;
}",0.9836065573770492
106212,"@Override public boolean applyFWRules(Network config,List<? extends FirewallRule> rulesToApply) throws ResourceUnavailableException {
  if (!midoInNetwork(config)) {
    return false;
  }
  if (canHandle(config,Service.Firewall)) {
    String accountIdStr=String.valueOf(config.getAccountId());
    String networkUUIDStr=String.valueOf(config.getId());
    RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
    Map<String,Rule> existingRules=new HashMap<String,Rule>();
    for (    Rule existingRule : preFilter.getRules()) {
      if (existingRule.getType().equals(DtoRule.Jump) && existingRule.getNwSrcAddress() != null) {
        String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
        existingRules.put(ruleString,existingRule);
      }
    }
    for (    FirewallRule rule : rulesToApply) {
      IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,dstIp.getAddress().addr());
      SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
      String[] ruleStrings=fwRule.toStringArray();
      if (rule.getState() == FirewallRule.State.Revoke) {
        for (        String revokeRuleString : ruleStrings) {
          Rule foundRule=existingRules.get(revokeRuleString);
          if (foundRule != null) {
            foundRule.delete();
          }
        }
      }
 else       if (rule.getState() == FirewallRule.State.Add) {
        for (int i=0; i < ruleStrings.length; i++) {
          String ruleString=ruleStrings[i];
          Rule foundRule=existingRules.get(ruleString);
          if (foundRule == null) {
            String relatedCidr=fwRule.sourceCidrs.get(i);
            Pair<String,Integer> cidrParts=NetUtils.getCidr(relatedCidr);
            Rule toApply=preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(1).nwSrcAddress(cidrParts.first()).nwSrcLength(cidrParts.second()).nwDstAddress(ruleTO.getSrcIp()).nwDstLength(32).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));
            if (rule.getProtocol().equals(""String_Node_Str"")) {
              toApply.tpSrcStart(fwRule.icmpType).tpSrcEnd(fwRule.icmpType).tpDstStart(fwRule.icmpCode).tpDstEnd(fwRule.icmpCode);
            }
 else {
              toApply.tpDstStart(fwRule.dstPortStart).tpDstEnd(fwRule.dstPortEnd);
            }
            toApply.create();
          }
        }
      }
    }
    return true;
  }
 else {
    return true;
  }
}","@Override public boolean applyFWRules(Network config,List<? extends FirewallRule> rulesToApply) throws ResourceUnavailableException {
  if (!midoInNetwork(config)) {
    return false;
  }
  if (canHandle(config,Service.Firewall)) {
    String accountIdStr=getAccountUuid(config);
    String networkUUIDStr=String.valueOf(config.getId());
    RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
    Map<String,Rule> existingRules=new HashMap<String,Rule>();
    for (    Rule existingRule : preFilter.getRules()) {
      if (existingRule.getType().equals(DtoRule.Jump) && existingRule.getNwSrcAddress() != null) {
        String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
        existingRules.put(ruleString,existingRule);
      }
    }
    for (    FirewallRule rule : rulesToApply) {
      IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,dstIp.getAddress().addr());
      SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
      String[] ruleStrings=fwRule.toStringArray();
      if (rule.getState() == FirewallRule.State.Revoke) {
        for (        String revokeRuleString : ruleStrings) {
          Rule foundRule=existingRules.get(revokeRuleString);
          if (foundRule != null) {
            foundRule.delete();
          }
        }
      }
 else       if (rule.getState() == FirewallRule.State.Add) {
        for (int i=0; i < ruleStrings.length; i++) {
          String ruleString=ruleStrings[i];
          Rule foundRule=existingRules.get(ruleString);
          if (foundRule == null) {
            String relatedCidr=fwRule.sourceCidrs.get(i);
            Pair<String,Integer> cidrParts=NetUtils.getCidr(relatedCidr);
            Rule toApply=preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(1).nwSrcAddress(cidrParts.first()).nwSrcLength(cidrParts.second()).nwDstAddress(ruleTO.getSrcIp()).nwDstLength(32).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));
            if (rule.getProtocol().equals(""String_Node_Str"")) {
              toApply.tpSrcStart(fwRule.icmpType).tpSrcEnd(fwRule.icmpType).tpDstStart(fwRule.icmpCode).tpDstEnd(fwRule.icmpCode);
            }
 else {
              toApply.tpDstStart(fwRule.dstPortStart).tpDstEnd(fwRule.dstPortEnd);
            }
            toApply.create();
          }
        }
      }
    }
    return true;
  }
 else {
    return true;
  }
}",0.9928502415458936
106213,"private Router getGuestNetworkRouter(long id,long accountID,boolean isVpc){
  MultivaluedMap qNetRouter=new MultivaluedMapImpl();
  String accountIdStr=String.valueOf(accountID);
  String routerName=getRouterName(isVpc,id);
  qNetRouter.add(""String_Node_Str"",accountIdStr);
  for (  Router router : api.getRouters(qNetRouter)) {
    if (router.getName().equals(routerName)) {
      return router;
    }
  }
  return null;
}","private Router getGuestNetworkRouter(long id,String accountUuid,boolean isVpc){
  MultivaluedMap qNetRouter=new MultivaluedMapImpl();
  String routerName=getRouterName(isVpc,id);
  qNetRouter.add(""String_Node_Str"",accountUuid);
  for (  Router router : api.getRouters(qNetRouter)) {
    if (router.getName().equals(routerName)) {
      return router;
    }
  }
  return null;
}",0.8875
106214,"private void connectBridgeToRouter(Network network,Bridge netBridge,Router netRouter){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  String accountIdStr=String.valueOf(network.getAccountId());
  BridgePort bridgePort=netBridge.addInteriorPort().create();
  RouterPort routerPort=netRouter.addInteriorRouterPort();
  String cidr=network.getCidr();
  String cidrSubnet=NetUtils.getCidrSubNet(cidr);
  int cidrSize=(int)NetUtils.getCidrSize(NetUtils.cidr2Netmask(cidr));
  routerPort.networkAddress(cidrSubnet);
  routerPort.networkLength(cidrSize);
  routerPort.portAddress(network.getGateway());
  if (getIsVpc(network)) {
    int pos=1;
    RuleChain inc=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_INGRESS)).tenantId(accountIdStr).create();
    inc.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).matchReturnFlow(true).position(pos++).create();
    inc.addRule().type(DtoRule.Drop).position(pos).create();
    RuleChain out=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_EGRESS)).tenantId(accountIdStr).create();
    out.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
    routerPort.outboundFilterId(inc.getId());
    routerPort.inboundFilterId(out.getId());
  }
  routerPort.create();
  bridgePort.link(routerPort.getId()).update();
  netRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(cidrSubnet).dstNetworkLength(cidrSize).nextHopPort(routerPort.getId()).nextHopGateway(null).create();
}","private void connectBridgeToRouter(Network network,Bridge netBridge,Router netRouter){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  String accountIdStr=getAccountUuid(network);
  BridgePort bridgePort=netBridge.addInteriorPort().create();
  RouterPort routerPort=netRouter.addInteriorRouterPort();
  String cidr=network.getCidr();
  String cidrSubnet=NetUtils.getCidrSubNet(cidr);
  int cidrSize=(int)NetUtils.getCidrSize(NetUtils.cidr2Netmask(cidr));
  routerPort.networkAddress(cidrSubnet);
  routerPort.networkLength(cidrSize);
  routerPort.portAddress(network.getGateway());
  if (getIsVpc(network)) {
    int pos=1;
    RuleChain inc=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_INGRESS)).tenantId(accountIdStr).create();
    inc.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).nwProto(SimpleFirewallRule.stringToProtocolNumber(""String_Node_Str"")).nwDstAddress(network.getGateway()).nwDstLength(32).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).matchReturnFlow(true).position(pos++).create();
    inc.addRule().type(DtoRule.Drop).position(pos).create();
    RuleChain out=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_EGRESS)).tenantId(accountIdStr).create();
    out.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
    routerPort.outboundFilterId(inc.getId());
    routerPort.inboundFilterId(out.getId());
  }
  routerPort.create();
  bridgePort.link(routerPort.getId()).update();
  netRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(cidrSubnet).dstNetworkLength(cidrSize).nextHopPort(routerPort.getId()).nextHopGateway(null).create();
}",0.93713972001098
106215,"@Override public boolean applyPFRules(Network network,List<PortForwardingRule> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.PortForwarding)) {
    return false;
  }
  String accountIdStr=String.valueOf(network.getAccountId());
  String networkUUIDStr=String.valueOf(network.getId());
  RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
  RuleChain postNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_POST);
  RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
  Router providerRouter=api.getRouter(_providerRouterId);
  Router tenantRouter=getOrCreateGuestNetworkRouter(network);
  RouterPort[] ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
  RouterPort providerDownlink=ports[1];
  Map<String,Rule> existingPreNatRules=new HashMap<String,Rule>();
  for (  Rule existingRule : preNat.getRules()) {
    String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
    existingPreNatRules.put(ruleString,existingRule);
  }
  Map<String,Integer> ipRuleCounts=new HashMap<String,Integer>();
  for (  Rule rule : preNat.getRules()) {
    String ip=rule.getNwDstAddress();
    if (ip != null && rule.getNwDstLength() == 32) {
      if (ipRuleCounts.containsKey(ip)) {
        ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() + 1));
      }
 else {
        ipRuleCounts.put(ip,new Integer(1));
      }
    }
  }
  Map<String,Route> routes=new HashMap<String,Route>();
  for (  Route route : providerRouter.getRoutes(new MultivaluedMapImpl())) {
    String ip=route.getDstNetworkAddr();
    if (ip != null && route.getDstNetworkLength() == 32) {
      routes.put(ip,route);
    }
  }
  for (  PortForwardingRule rule : rules) {
    IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
    PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,dstIp.getAddress().addr());
    SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
    String[] ruleStrings=fwRule.toStringArray();
    if (rule.getState() == FirewallRule.State.Revoke) {
      for (      String revokeRuleString : ruleStrings) {
        Rule foundPreNatRule=existingPreNatRules.get(revokeRuleString);
        if (foundPreNatRule != null) {
          String ip=foundPreNatRule.getNwDstAddress();
          Integer cnt=ipRuleCounts.get(ip);
          if (cnt != null) {
            if (cnt == 1) {
              ipRuleCounts.remove(ip);
              Route route=routes.remove(ip);
              route.delete();
            }
 else {
              ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() - 1));
            }
          }
          foundPreNatRule.delete();
        }
      }
    }
 else     if (rule.getState() == FirewallRule.State.Add) {
      for (int i=0; i < ruleStrings.length; i++) {
        String ruleString=ruleStrings[i];
        Rule foundRule=existingPreNatRules.get(ruleString);
        if (foundRule == null) {
          String vmIp=ruleTO.getDstIp();
          String publicIp=dstIp.getAddress().addr();
          int privPortStart=ruleTO.getDstPortRange()[0];
          int privPortEnd=ruleTO.getDstPortRange()[1];
          int pubPortStart=ruleTO.getSrcPortRange()[0];
          int pubPortEnd=ruleTO.getSrcPortRange()[1];
          DtoRule.DtoNatTarget[] preTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(vmIp,vmIp,privPortStart,privPortEnd)};
          Rule preNatRule=preNat.addRule().type(DtoRule.DNAT).flowAction(DtoRule.Accept).nwDstAddress(publicIp).nwDstLength(32).tpDstStart(pubPortStart).tpDstEnd(pubPortEnd).natTargets(preTargets).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol())).position(1);
          Integer cnt=ipRuleCounts.get(publicIp);
          if (cnt != null) {
            ipRuleCounts.put(publicIp,new Integer(cnt.intValue() + 1));
          }
 else {
            ipRuleCounts.put(publicIp,new Integer(1));
          }
          String preNatRuleStr=new SimpleFirewallRule(preNatRule).toStringArray()[0];
          existingPreNatRules.put(preNatRuleStr,preNatRule);
          preNatRule.create();
          if (routes.get(publicIp) == null) {
            Route route=providerRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(publicIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId());
            route.create();
            routes.put(publicIp,route);
          }
          if (canHandle(network,Service.Firewall)) {
            boolean defaultBlock=false;
            for (            Rule filterRule : preFilter.getRules()) {
              String pfDstIp=filterRule.getNwDstAddress();
              if (pfDstIp != null && filterRule.getNwDstAddress().equals(publicIp)) {
                defaultBlock=true;
                break;
              }
            }
            if (!defaultBlock) {
              preFilter.addRule().type(DtoRule.Drop).nwDstAddress(publicIp).nwDstLength(32).create();
            }
          }
        }
      }
    }
  }
  return true;
}","@Override public boolean applyPFRules(Network network,List<PortForwardingRule> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.PortForwarding)) {
    return false;
  }
  String accountIdStr=getAccountUuid(network);
  String networkUUIDStr=String.valueOf(network.getId());
  RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
  RuleChain postNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_POST);
  RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
  Router providerRouter=api.getRouter(_providerRouterId);
  Router tenantRouter=getOrCreateGuestNetworkRouter(network);
  RouterPort[] ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
  RouterPort providerDownlink=ports[1];
  Map<String,Rule> existingPreNatRules=new HashMap<String,Rule>();
  for (  Rule existingRule : preNat.getRules()) {
    String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
    existingPreNatRules.put(ruleString,existingRule);
  }
  Map<String,Integer> ipRuleCounts=new HashMap<String,Integer>();
  for (  Rule rule : preNat.getRules()) {
    String ip=rule.getNwDstAddress();
    if (ip != null && rule.getNwDstLength() == 32) {
      if (ipRuleCounts.containsKey(ip)) {
        ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() + 1));
      }
 else {
        ipRuleCounts.put(ip,new Integer(1));
      }
    }
  }
  Map<String,Route> routes=new HashMap<String,Route>();
  for (  Route route : providerRouter.getRoutes(new MultivaluedMapImpl())) {
    String ip=route.getDstNetworkAddr();
    if (ip != null && route.getDstNetworkLength() == 32) {
      routes.put(ip,route);
    }
  }
  for (  PortForwardingRule rule : rules) {
    IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
    PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,dstIp.getAddress().addr());
    SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
    String[] ruleStrings=fwRule.toStringArray();
    if (rule.getState() == FirewallRule.State.Revoke) {
      for (      String revokeRuleString : ruleStrings) {
        Rule foundPreNatRule=existingPreNatRules.get(revokeRuleString);
        if (foundPreNatRule != null) {
          String ip=foundPreNatRule.getNwDstAddress();
          Integer cnt=ipRuleCounts.get(ip);
          if (cnt != null) {
            if (cnt == 1) {
              ipRuleCounts.remove(ip);
              Route route=routes.remove(ip);
              route.delete();
            }
 else {
              ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() - 1));
            }
          }
          foundPreNatRule.delete();
        }
      }
    }
 else     if (rule.getState() == FirewallRule.State.Add) {
      for (int i=0; i < ruleStrings.length; i++) {
        String ruleString=ruleStrings[i];
        Rule foundRule=existingPreNatRules.get(ruleString);
        if (foundRule == null) {
          String vmIp=ruleTO.getDstIp();
          String publicIp=dstIp.getAddress().addr();
          int privPortStart=ruleTO.getDstPortRange()[0];
          int privPortEnd=ruleTO.getDstPortRange()[1];
          int pubPortStart=ruleTO.getSrcPortRange()[0];
          int pubPortEnd=ruleTO.getSrcPortRange()[1];
          DtoRule.DtoNatTarget[] preTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(vmIp,vmIp,privPortStart,privPortEnd)};
          Rule preNatRule=preNat.addRule().type(DtoRule.DNAT).flowAction(DtoRule.Accept).nwDstAddress(publicIp).nwDstLength(32).tpDstStart(pubPortStart).tpDstEnd(pubPortEnd).natTargets(preTargets).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol())).position(1);
          Integer cnt=ipRuleCounts.get(publicIp);
          if (cnt != null) {
            ipRuleCounts.put(publicIp,new Integer(cnt.intValue() + 1));
          }
 else {
            ipRuleCounts.put(publicIp,new Integer(1));
          }
          String preNatRuleStr=new SimpleFirewallRule(preNatRule).toStringArray()[0];
          existingPreNatRules.put(preNatRuleStr,preNatRule);
          preNatRule.create();
          if (routes.get(publicIp) == null) {
            Route route=providerRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(publicIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId());
            route.create();
            routes.put(publicIp,route);
          }
          if (canHandle(network,Service.Firewall)) {
            boolean defaultBlock=false;
            for (            Rule filterRule : preFilter.getRules()) {
              String pfDstIp=filterRule.getNwDstAddress();
              if (pfDstIp != null && filterRule.getNwDstAddress().equals(publicIp)) {
                defaultBlock=true;
                break;
              }
            }
            if (!defaultBlock) {
              preFilter.addRule().type(DtoRule.Drop).nwDstAddress(publicIp).nwDstLength(32).create();
            }
          }
        }
      }
    }
  }
  return true;
}",0.9962453066332916
106216,"private Router getOrCreateGuestNetworkRouter(long id,long accountID,boolean isVpc){
  Router tenantRouter=getGuestNetworkRouter(id,accountID,isVpc);
  if (tenantRouter == null) {
    tenantRouter=createRouter(id,accountID,isVpc);
  }
  return tenantRouter;
}","private Router getOrCreateGuestNetworkRouter(long id,String accountUuid,boolean isVpc){
  Router tenantRouter=getGuestNetworkRouter(id,accountUuid,isVpc);
  if (tenantRouter == null) {
    tenantRouter=createRouter(id,accountUuid,isVpc);
  }
  return tenantRouter;
}",0.916030534351145
106217,"/** 
 * From interface StaticNatServiceProvider
 */
@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.StaticNat)) {
    return false;
  }
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preFilter=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=String.valueOf(network.getAccountId());
  String networkUUIDStr=String.valueOf(network.getId());
  for (  StaticNat rule : rules) {
    IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
    String sourceIpAddr=sourceIp.getAddress().addr();
    if (resources == false) {
      tenantRouter=getOrCreateGuestNetworkRouter(network);
      providerRouter=api.getRouter(_providerRouterId);
      ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
      tenantUplink=ports[0];
      providerDownlink=ports[1];
      boolean isVpc=getIsVpc(network);
      long id=getRouterId(network,isVpc);
      String routerName=getRouterName(isVpc,id);
      preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
      preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
      post=api.getChain(tenantRouter.getOutboundFilterId());
      resources=true;
    }
    if (rule.isForRevoke()) {
      removeMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),providerRouter);
    }
 else {
      addMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),tenantUplink,providerDownlink,providerRouter,network);
    }
  }
  return true;
}","/** 
 * From interface StaticNatServiceProvider
 */
@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.StaticNat)) {
    return false;
  }
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preFilter=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=getAccountUuid(network);
  String networkUUIDStr=String.valueOf(network.getId());
  for (  StaticNat rule : rules) {
    IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
    String sourceIpAddr=sourceIp.getAddress().addr();
    if (resources == false) {
      tenantRouter=getOrCreateGuestNetworkRouter(network);
      providerRouter=api.getRouter(_providerRouterId);
      ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
      tenantUplink=ports[0];
      providerDownlink=ports[1];
      boolean isVpc=getIsVpc(network);
      long id=getRouterId(network,isVpc);
      String routerName=getRouterName(isVpc,id);
      preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
      preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
      post=api.getChain(tenantRouter.getOutboundFilterId());
      resources=true;
    }
    if (rule.isForRevoke()) {
      removeMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),providerRouter);
    }
 else {
      addMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),tenantUplink,providerDownlink,providerRouter,network);
    }
  }
  return true;
}",0.9884065785926126
106218,"protected RuleChain getChain(String networkId,String accountID,String routerName,RuleChainCode chainCode){
  String chainName=getChainName(networkId,routerName,chainCode);
  MultivaluedMap findChain=new MultivaluedMapImpl();
  findChain.add(""String_Node_Str"",accountID);
  ResourceCollection<RuleChain> ruleChains=api.getChains(findChain);
  for (  RuleChain chain : ruleChains) {
    if (chain.getName().equals(chainName)) {
      return chain;
    }
  }
  return null;
}","protected RuleChain getChain(String networkId,String accountUuid,String routerName,RuleChainCode chainCode){
  String chainName=getChainName(networkId,routerName,chainCode);
  MultivaluedMap findChain=new MultivaluedMapImpl();
  findChain.add(""String_Node_Str"",accountUuid);
  ResourceCollection<RuleChain> ruleChains=api.getChains(findChain);
  for (  RuleChain chain : ruleChains) {
    if (chain.getName().equals(chainName)) {
      return chain;
    }
  }
  return null;
}",0.9873417721518988
106219,"protected void resetEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),String.valueOf(network.getAccountId()),routerName,RuleChainCode.ACL_EGRESS);
  for (  Rule rule : egressChain.getRules()) {
    rule.delete();
  }
  egressChain.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
}","protected void resetEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),getAccountUuid(network),routerName,RuleChainCode.ACL_EGRESS);
  for (  Rule rule : egressChain.getRules()) {
    rule.delete();
  }
  egressChain.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
}",0.958288770053476
106220,"public boolean midoInNetwork(Network network){
  for (  String pname : _ntwkSrvcDao.getDistinctProviders(network.getId())) {
    if (pname.equals(getProvider().getName())) {
      return true;
    }
  }
  return false;
}","public boolean midoInNetwork(Network network){
  if ((network.getTrafficType() == Networks.TrafficType.Public) && (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Mido)) {
    return true;
  }
  if ((network.getTrafficType() == Networks.TrafficType.Guest) && (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Mido)) {
    return true;
  }
  return false;
}",0.2364532019704433
106221,"protected RuleChain getOrInitEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),String.valueOf(network.getAccountId()),routerName,RuleChainCode.ACL_EGRESS);
  int totalRules=0;
  for (  Rule rule : egressChain.getRules()) {
    if (rule.getNwProto() != 0) {
      totalRules++;
    }
  }
  if (totalRules > 0) {
    return egressChain;
  }
 else {
    for (    Rule rule : egressChain.getRules()) {
      rule.delete();
    }
  }
  int pos=1;
  egressChain.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
  egressChain.addRule().type(DtoRule.Drop).position(pos).create();
  return egressChain;
}","protected RuleChain getOrInitEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),getAccountUuid(network),routerName,RuleChainCode.ACL_EGRESS);
  int totalRules=0;
  for (  Rule rule : egressChain.getRules()) {
    if (rule.getNwProto() != 0) {
      totalRules++;
    }
  }
  if (totalRules > 0) {
    return egressChain;
  }
 else {
    for (    Rule rule : egressChain.getRules()) {
      rule.delete();
    }
  }
  int pos=1;
  egressChain.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
  egressChain.addRule().type(DtoRule.Accept).nwProto(SimpleFirewallRule.stringToProtocolNumber(""String_Node_Str"")).nwDstAddress(network.getGateway()).nwDstLength(32).position(pos++).create();
  egressChain.addRule().type(DtoRule.Drop).position(pos).create();
  return egressChain;
}",0.8665530948324816
106222,"private Bridge getNetworkBridge(long networkID,long accountID){
  MultivaluedMap qNetBridge=new MultivaluedMapImpl();
  String accountIdStr=String.valueOf(accountID);
  String networkUUIDStr=String.valueOf(networkID);
  qNetBridge.add(""String_Node_Str"",accountIdStr);
  for (  Bridge b : this.api.getBridges(qNetBridge)) {
    if (b.getName().equals(networkUUIDStr)) {
      return b;
    }
  }
  return null;
}","private Bridge getNetworkBridge(long networkID,String accountUuid){
  MultivaluedMap qNetBridge=new MultivaluedMapImpl();
  String networkUUIDStr=String.valueOf(networkID);
  qNetBridge.add(""String_Node_Str"",accountUuid);
  for (  Bridge b : this.api.getBridges(qNetBridge)) {
    if (b.getName().equals(networkUUIDStr)) {
      return b;
    }
  }
  return null;
}",0.2963917525773196
106223,"protected Router createRouter(long id,long accountID,boolean isVpc){
  String accountIdStr=String.valueOf(accountID);
  String routerName=getRouterName(isVpc,id);
  RuleChain pre=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRE)).tenantId(accountIdStr).create();
  RuleChain post=api.addChain().name(getChainName(routerName,RuleChainCode.TR_POST)).tenantId(accountIdStr).create();
  RuleChain preFilter=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PREFILTER)).tenantId(accountIdStr).create();
  RuleChain preNat=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRENAT)).tenantId(accountIdStr).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preFilter.getId()).position(1).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(2).create();
  return api.addRouter().tenantId(accountIdStr).name(routerName).inboundFilterId(pre.getId()).outboundFilterId(post.getId()).create();
}","protected Router createRouter(long id,String accountUuid,boolean isVpc){
  String routerName=getRouterName(isVpc,id);
  RuleChain pre=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRE)).tenantId(accountUuid).create();
  RuleChain post=api.addChain().name(getChainName(routerName,RuleChainCode.TR_POST)).tenantId(accountUuid).create();
  RuleChain preFilter=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PREFILTER)).tenantId(accountUuid).create();
  RuleChain preNat=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRENAT)).tenantId(accountUuid).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preFilter.getId()).position(1).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(2).create();
  return api.addRouter().tenantId(accountUuid).name(routerName).inboundFilterId(pre.getId()).outboundFilterId(post.getId()).create();
}",0.8979591836734694
106224,"private Bridge getOrCreateNetworkBridge(long networkID,long accountID){
  Bridge netBridge=getNetworkBridge(networkID,accountID);
  if (netBridge == null) {
    String accountIdStr=String.valueOf(accountID);
    String networkUUIDStr=String.valueOf(networkID);
    netBridge=api.addBridge().tenantId(accountIdStr).name(networkUUIDStr).create();
  }
  return netBridge;
}","private Bridge getOrCreateNetworkBridge(long networkID,String accountUuid){
  Bridge netBridge=getNetworkBridge(networkID,accountUuid);
  if (netBridge == null) {
    String networkUUIDStr=String.valueOf(networkID);
    netBridge=api.addBridge().tenantId(accountUuid).name(networkUUIDStr).create();
  }
  return netBridge;
}",0.5417867435158501
106225,"public void setSize(long size){
  this.size=size;
}","public void setSize(Long size){
  this.size=size;
}",0.9803921568627452
106226,"@Override public void addSystemVMTemplatesToSecondary(DataStore store){
  long storeId=store.getId();
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  for (  VMTemplateVO tmplt : rtngTmplts) {
    TemplateDataStoreVO tmpltStore=_vmTemplateStoreDao.findByStoreTemplate(storeId,tmplt.getId());
    if (tmpltStore == null) {
      tmpltStore=new TemplateDataStoreVO(storeId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,TemplateConstants.DEFAULT_SYSTEM_VM_TEMPLATE_PATH + tmplt.getId() + File.separator,tmplt.getUrl());
      tmpltStore.setSize(0);
      tmpltStore.setPhysicalSize(0);
      tmpltStore.setDataStoreRole(store.getRole());
      _vmTemplateStoreDao.persist(tmpltStore);
    }
  }
}","@Override public void addSystemVMTemplatesToSecondary(DataStore store){
  long storeId=store.getId();
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  for (  VMTemplateVO tmplt : rtngTmplts) {
    TemplateDataStoreVO tmpltStore=_vmTemplateStoreDao.findByStoreTemplate(storeId,tmplt.getId());
    if (tmpltStore == null) {
      tmpltStore=new TemplateDataStoreVO(storeId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,TemplateConstants.DEFAULT_SYSTEM_VM_TEMPLATE_PATH + tmplt.getId() + File.separator,tmplt.getUrl());
      tmpltStore.setSize(0L);
      tmpltStore.setPhysicalSize(0);
      tmpltStore.setDataStoreRole(store.getRole());
      _vmTemplateStoreDao.persist(tmpltStore);
    }
  }
}",0.9993201903467028
106227,"@DB protected void createBaseImageAsync(VolumeInfo volume,PrimaryDataStore dataStore,TemplateInfo template,AsyncCallFuture<VolumeApiResult> future){
  DataObject templateOnPrimaryStoreObj=dataStore.create(template);
  CreateBaseImageContext<CreateCmdResult> context=new CreateBaseImageContext<CreateCmdResult>(null,volume,dataStore,template,future,templateOnPrimaryStoreObj);
  AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
  caller.setCallback(caller.getTarget().copyBaseImageCallback(null,null)).setContext(context);
  try {
    templateOnPrimaryStoreObj.processEvent(Event.CreateOnlyRequested);
  }
 catch (  Exception e) {
    try {
      templateOnPrimaryStoreObj=waitForTemplateDownloaded(dataStore,template);
    }
 catch (    Exception e1) {
      s_logger.debug(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      VolumeApiResult result=new VolumeApiResult(volume);
      result.setResult(e1.toString());
      future.complete(result);
      return;
    }
    if (templateOnPrimaryStoreObj == null) {
      VolumeApiResult result=new VolumeApiResult(volume);
      result.setResult(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      future.complete(result);
      return;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      createVolumeFromBaseImageAsync(volume,templateOnPrimaryStoreObj,dataStore,future);
      return;
    }
  }
  try {
    motionSrv.copyAsync(template,templateOnPrimaryStoreObj,caller);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    templateOnPrimaryStoreObj.processEvent(Event.OperationFailed);
    VolumeApiResult result=new VolumeApiResult(volume);
    result.setResult(e.toString());
    future.complete(result);
  }
  return;
}","@DB protected void createBaseImageAsync(VolumeInfo volume,PrimaryDataStore dataStore,TemplateInfo template,AsyncCallFuture<VolumeApiResult> future){
  DataObject templateOnPrimaryStoreObj=dataStore.create(template);
  CreateBaseImageContext<CreateCmdResult> context=new CreateBaseImageContext<CreateCmdResult>(null,volume,dataStore,template,future,templateOnPrimaryStoreObj);
  AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> caller=AsyncCallbackDispatcher.create(this);
  caller.setCallback(caller.getTarget().copyBaseImageCallback(null,null)).setContext(context);
  try {
    templateOnPrimaryStoreObj.processEvent(Event.CreateOnlyRequested);
  }
 catch (  Exception e) {
    s_logger.info(""String_Node_Str"");
    try {
      templateOnPrimaryStoreObj=waitForTemplateDownloaded(dataStore,template);
    }
 catch (    Exception e1) {
      s_logger.debug(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      VolumeApiResult result=new VolumeApiResult(volume);
      result.setResult(e1.toString());
      future.complete(result);
      return;
    }
    if (templateOnPrimaryStoreObj == null) {
      VolumeApiResult result=new VolumeApiResult(volume);
      result.setResult(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      future.complete(result);
      return;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getId() + ""String_Node_Str"");
      createVolumeFromBaseImageAsync(volume,templateOnPrimaryStoreObj,dataStore,future);
      return;
    }
  }
  try {
    motionSrv.copyAsync(template,templateOnPrimaryStoreObj,caller);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    templateOnPrimaryStoreObj.processEvent(Event.OperationFailed);
    VolumeApiResult result=new VolumeApiResult(volume);
    result.setResult(e.toString());
    future.complete(result);
  }
  return;
}",0.9896907216494846
106228,"@Override public boolean generateSetupCommand(Long ssHostId){
  HostVO cssHost=_hostDao.findById(ssHostId);
  Long zoneId=cssHost.getDataCenterId();
  if (cssHost.getType() == Host.Type.SecondaryStorageVM) {
    SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findByInstanceName(cssHost.getName());
    if (secStorageVm == null) {
      s_logger.warn(""String_Node_Str"" + cssHost.getName() + ""String_Node_Str"");
      return false;
    }
    List<DataStore> ssStores=this._dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
    for (    DataStore ssStore : ssStores) {
      String secUrl=ssStore.getUri();
      SecStorageSetupCommand setupCmd=null;
      if (!_useSSlCopy) {
        setupCmd=new SecStorageSetupCommand(ssStore.getTO(),secUrl,null);
      }
 else {
        Certificates certs=_keystoreMgr.getCertificates(ConsoleProxyManager.CERTIFICATE_NAME);
        setupCmd=new SecStorageSetupCommand(ssStore.getTO(),secUrl,certs);
      }
      Answer answer=_agentMgr.easySend(ssHostId,setupCmd);
      if (answer != null && answer.getResult()) {
        SecStorageSetupAnswer an=(SecStorageSetupAnswer)answer;
        if (an.get_dir() != null) {
          ImageStoreVO svo=this._imageStoreDao.findById(ssStore.getId());
          svo.setParent(an.get_dir());
          _imageStoreDao.update(ssStore.getId(),svo);
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ssStore.getName() + ""String_Node_Str""+ secStorageVm.getInstanceName());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ssStore.getName() + ""String_Node_Str""+ secStorageVm.getInstanceName());
        }
        return false;
      }
    }
  }
  return true;
}","@Override public boolean generateSetupCommand(Long ssHostId){
  HostVO cssHost=_hostDao.findById(ssHostId);
  Long zoneId=cssHost.getDataCenterId();
  if (cssHost.getType() == Host.Type.SecondaryStorageVM) {
    SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findByInstanceName(cssHost.getName());
    if (secStorageVm == null) {
      s_logger.warn(""String_Node_Str"" + cssHost.getName() + ""String_Node_Str"");
      return false;
    }
    List<DataStore> ssStores=this._dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
    for (    DataStore ssStore : ssStores) {
      if (!(ssStore.getTO() instanceof NfsTO))       continue;
      String secUrl=ssStore.getUri();
      SecStorageSetupCommand setupCmd=null;
      if (!_useSSlCopy) {
        setupCmd=new SecStorageSetupCommand(ssStore.getTO(),secUrl,null);
      }
 else {
        Certificates certs=_keystoreMgr.getCertificates(ConsoleProxyManager.CERTIFICATE_NAME);
        setupCmd=new SecStorageSetupCommand(ssStore.getTO(),secUrl,certs);
      }
      Answer answer=_agentMgr.easySend(ssHostId,setupCmd);
      if (answer != null && answer.getResult()) {
        SecStorageSetupAnswer an=(SecStorageSetupAnswer)answer;
        if (an.get_dir() != null) {
          ImageStoreVO svo=this._imageStoreDao.findById(ssStore.getId());
          svo.setParent(an.get_dir());
          _imageStoreDao.update(ssStore.getId(),svo);
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ssStore.getName() + ""String_Node_Str""+ secStorageVm.getInstanceName());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ssStore.getName() + ""String_Node_Str""+ secStorageVm.getInstanceName());
        }
        return false;
      }
    }
  }
  return true;
}",0.9823083403538332
106229,"protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath);
    final File downloadDirectory=_storage.getFile(downloadPath);
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",downloadDirectory.getName());
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
    List<File> files=getDirectory(s3,s3.getBucketName(),destPath,downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    File destFile=null;
    for (    File f : files) {
      if (!f.getName().endsWith(""String_Node_Str"")) {
        destFile=f;
        break;
      }
    }
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    String scriptsDir=""String_Node_Str"";
    String createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createTmpltScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createTmpltScr);
    String createVolScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createVolScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createVolScr);
    String script=srcData.getObjectType() == DataObjectType.TEMPLATE ? createTmpltScr : createVolScr;
    int installTimeoutPerGig=180 * 60 * 1000;
    int imgSizeGigs=(int)Math.ceil(destFile.length() * 1.0d / (1024 * 1024 * 1024));
    imgSizeGigs++;
    long timeout=imgSizeGigs * installTimeoutPerGig;
    String origPath=destFile.getAbsolutePath();
    String extension=null;
    if (srcData.getObjectType() == DataObjectType.TEMPLATE) {
      extension=((TemplateObjectTO)srcData).getFormat().getFileExtension();
    }
 else {
      extension=((VolumeObjectTO)srcData).getDiskType().toString().toLowerCase();
    }
    String templateName=UUID.randomUUID().toString();
    String templateFilename=templateName + ""String_Node_Str"" + extension;
    Script scr=new Script(script,timeout,s_logger);
    scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
    scr.add(""String_Node_Str"",templateFilename);
    scr.add(""String_Node_Str"",downloadPath);
    scr.add(""String_Node_Str"",origPath);
    String result;
    result=scr.execute();
    if (result != null) {
      throw new CloudRuntimeException(""String_Node_Str"" + script);
    }
    String finalFileName=templateFilename;
    String finalDownloadPath=destPath + File.separator + templateFilename;
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(finalDownloadPath);
      newTemplTO.setName(finalFileName);
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}","protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath);
    final File downloadDirectory=_storage.getFile(downloadPath);
    downloadDirectory.mkdirs();
    if (!downloadDirectory.exists()) {
      final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",downloadDirectory.getName());
      s_logger.error(errMsg);
      return new CopyCmdAnswer(errMsg);
    }
    List<File> files=getDirectory(s3,s3.getBucketName(),destPath,downloadDirectory,new FileNamingStrategy(){
      @Override public String determineFileName(      final String key){
        return substringAfterLast(key,S3Utils.SEPARATOR);
      }
    }
);
    File destFile=null;
    for (    File f : files) {
      if (!f.getName().endsWith(""String_Node_Str"")) {
        destFile=f;
        break;
      }
    }
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    String scriptsDir=""String_Node_Str"";
    String createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createTmpltScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createTmpltScr);
    String createVolScr=Script.findScript(scriptsDir,""String_Node_Str"");
    if (createVolScr == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    s_logger.info(""String_Node_Str"" + createVolScr);
    String script=srcData.getObjectType() == DataObjectType.TEMPLATE ? createTmpltScr : createVolScr;
    int installTimeoutPerGig=180 * 60 * 1000;
    int imgSizeGigs=(int)Math.ceil(destFile.length() * 1.0d / (1024 * 1024 * 1024));
    imgSizeGigs++;
    long timeout=imgSizeGigs * installTimeoutPerGig;
    String origPath=destFile.getAbsolutePath();
    String extension=null;
    if (srcData.getObjectType() == DataObjectType.TEMPLATE) {
      extension=((TemplateObjectTO)srcData).getFormat().getFileExtension();
    }
 else {
      extension=((VolumeObjectTO)srcData).getDiskType().toString().toLowerCase();
    }
    String templateName=UUID.randomUUID().toString();
    String templateFilename=templateName + ""String_Node_Str"" + extension;
    Script scr=new Script(script,timeout,s_logger);
    scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
    scr.add(""String_Node_Str"",templateFilename);
    scr.add(""String_Node_Str"",downloadPath);
    scr.add(""String_Node_Str"",origPath);
    String result;
    result=scr.execute();
    if (result != null) {
      throw new CloudRuntimeException(""String_Node_Str"" + script);
    }
    String finalFileName=templateFilename;
    String finalDownloadPath=destPath + File.separator + templateFilename;
    long size=this._storage.getSize(downloadPath + File.separator + templateFilename);
    DataTO newDestTO=null;
    if (destData.getObjectType() == DataObjectType.TEMPLATE) {
      TemplateObjectTO newTemplTO=new TemplateObjectTO();
      newTemplTO.setPath(finalDownloadPath);
      newTemplTO.setName(finalFileName);
      newTemplTO.setSize(size);
      newDestTO=newTemplTO;
    }
 else {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return new CopyCmdAnswer(newDestTO);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}",0.9828900071890726
106230,"private void deleteNetworkBridges(Network network){
  long accountID=network.getAccountId();
  long networkID=network.getId();
  Bridge netBridge=getNetworkBridge(networkID,accountID);
  if (netBridge != null) {
    cleanBridge(netBridge);
    for (    Object dhcpSubnet : netBridge.getDhcpSubnets()) {
      DhcpSubnet sub=(DhcpSubnet)dhcpSubnet;
      sub.delete();
    }
    netBridge.delete();
  }
}","private void deleteNetworkBridges(Network network){
  String accountUuid=getAccountUuid(network);
  long networkID=network.getId();
  Bridge netBridge=getNetworkBridge(networkID,accountUuid);
  if (netBridge != null) {
    cleanBridge(netBridge);
    for (    Object dhcpSubnet : netBridge.getDhcpSubnets()) {
      DhcpSubnet sub=(DhcpSubnet)dhcpSubnet;
      sub.delete();
    }
    netBridge.delete();
  }
}",0.949569495694957
106231,"private void deleteGuestNetworkRouters(Network network){
  long accountID=network.getAccountId();
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  Router tenantRouter=getGuestNetworkRouter(id,accountID,isVpc);
  for (  Port peerPort : tenantRouter.getPeerPorts((new MultivaluedMapImpl()))) {
    if (peerPort != null && peerPort instanceof RouterPort) {
      RouterPort checkPort=(RouterPort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
 else     if (peerPort != null && peerPort instanceof BridgePort) {
      BridgePort checkPort=(BridgePort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
  }
  if (tenantRouter != null) {
    for (    RouterPort p : tenantRouter.getPorts(new MultivaluedMapImpl())) {
      if (p.getType().equals(""String_Node_Str"")) {
        p.vifId(null).update();
      }
      if (p.getType().equals(""String_Node_Str"")) {
        p.unlink();
      }
      p.delete();
    }
    String accountIdStr=String.valueOf(accountID);
    String routerName=getRouterName(isVpc,id);
    RuleChain pre=api.getChain(tenantRouter.getInboundFilterId());
    RuleChain preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
    RuleChain post=api.getChain(tenantRouter.getOutboundFilterId());
    pre.delete();
    preFilter.delete();
    preNat.delete();
    post.delete();
    for (    Route r : tenantRouter.getRoutes(new MultivaluedMapImpl())) {
      r.delete();
    }
    tenantRouter.delete();
  }
}","private void deleteGuestNetworkRouters(Network network){
  String accountUuid=getAccountUuid(network);
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  Router tenantRouter=getGuestNetworkRouter(id,accountUuid,isVpc);
  for (  Port peerPort : tenantRouter.getPeerPorts((new MultivaluedMapImpl()))) {
    if (peerPort != null && peerPort instanceof RouterPort) {
      RouterPort checkPort=(RouterPort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
 else     if (peerPort != null && peerPort instanceof BridgePort) {
      BridgePort checkPort=(BridgePort)peerPort;
      if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.vifId(null).update();
      }
 else       if (checkPort.getType().equals(""String_Node_Str"")) {
        checkPort.unlink();
      }
      checkPort.delete();
    }
  }
  if (tenantRouter != null) {
    for (    RouterPort p : tenantRouter.getPorts(new MultivaluedMapImpl())) {
      if (p.getType().equals(""String_Node_Str"")) {
        p.vifId(null).update();
      }
      if (p.getType().equals(""String_Node_Str"")) {
        p.unlink();
      }
      p.delete();
    }
    String accountIdStr=String.valueOf(accountUuid);
    String routerName=getRouterName(isVpc,id);
    RuleChain pre=api.getChain(tenantRouter.getInboundFilterId());
    RuleChain preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
    RuleChain post=api.getChain(tenantRouter.getOutboundFilterId());
    pre.delete();
    preFilter.delete();
    preNat.delete();
    post.delete();
    for (    Route r : tenantRouter.getRoutes(new MultivaluedMapImpl())) {
      r.delete();
    }
    tenantRouter.delete();
  }
}",0.9238656754678288
106232,"public boolean associatePublicIP(Network network,final List<? extends PublicIpAddress> ipAddress) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=null;
  String routerName=null;
  for (  PublicIpAddress ip : ipAddress) {
    if (ip.isSourceNat()) {
      if (resources == false) {
        tenantRouter=getOrCreateGuestNetworkRouter(network);
        providerRouter=api.getRouter(_providerRouterId);
        ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
        tenantUplink=ports[0];
        providerDownlink=ports[1];
        accountIdStr=String.valueOf(network.getAccountId());
        boolean isVpc=getIsVpc(network);
        long id=getRouterId(network,isVpc);
        routerName=getRouterName(isVpc,id);
        preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
        post=api.getChain(tenantRouter.getOutboundFilterId());
        resources=true;
      }
      applySourceNat(tenantRouter,providerRouter,tenantUplink,providerDownlink,preNat,post,ip);
    }
  }
  return true;
}","public boolean associatePublicIP(Network network,final List<? extends PublicIpAddress> ipAddress) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=null;
  String routerName=null;
  for (  PublicIpAddress ip : ipAddress) {
    if (ip.isSourceNat()) {
      if (resources == false) {
        tenantRouter=getOrCreateGuestNetworkRouter(network);
        providerRouter=api.getRouter(_providerRouterId);
        ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
        tenantUplink=ports[0];
        providerDownlink=ports[1];
        accountIdStr=getAccountUuid(network);
        boolean isVpc=getIsVpc(network);
        long id=getRouterId(network,isVpc);
        routerName=getRouterName(isVpc,id);
        preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
        post=api.getChain(tenantRouter.getOutboundFilterId());
        resources=true;
      }
      applySourceNat(tenantRouter,providerRouter,tenantUplink,providerDownlink,preNat,post,ip);
    }
  }
  return true;
}",0.9836065573770492
106233,"@Override public boolean applyFWRules(Network config,List<? extends FirewallRule> rulesToApply) throws ResourceUnavailableException {
  if (!midoInNetwork(config)) {
    return false;
  }
  if (canHandle(config,Service.Firewall)) {
    String accountIdStr=String.valueOf(config.getAccountId());
    String networkUUIDStr=String.valueOf(config.getId());
    RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
    Map<String,Rule> existingRules=new HashMap<String,Rule>();
    for (    Rule existingRule : preFilter.getRules()) {
      if (existingRule.getType().equals(DtoRule.Jump) && existingRule.getNwSrcAddress() != null) {
        String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
        existingRules.put(ruleString,existingRule);
      }
    }
    for (    FirewallRule rule : rulesToApply) {
      IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,dstIp.getAddress().addr());
      SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
      String[] ruleStrings=fwRule.toStringArray();
      if (rule.getState() == FirewallRule.State.Revoke) {
        for (        String revokeRuleString : ruleStrings) {
          Rule foundRule=existingRules.get(revokeRuleString);
          if (foundRule != null) {
            foundRule.delete();
          }
        }
      }
 else       if (rule.getState() == FirewallRule.State.Add) {
        for (int i=0; i < ruleStrings.length; i++) {
          String ruleString=ruleStrings[i];
          Rule foundRule=existingRules.get(ruleString);
          if (foundRule == null) {
            String relatedCidr=fwRule.sourceCidrs.get(i);
            Pair<String,Integer> cidrParts=NetUtils.getCidr(relatedCidr);
            Rule toApply=preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(1).nwSrcAddress(cidrParts.first()).nwSrcLength(cidrParts.second()).nwDstAddress(ruleTO.getSrcIp()).nwDstLength(32).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));
            if (rule.getProtocol().equals(""String_Node_Str"")) {
              toApply.tpSrcStart(fwRule.icmpType).tpSrcEnd(fwRule.icmpType).tpDstStart(fwRule.icmpCode).tpDstEnd(fwRule.icmpCode);
            }
 else {
              toApply.tpDstStart(fwRule.dstPortStart).tpDstEnd(fwRule.dstPortEnd);
            }
            toApply.create();
          }
        }
      }
    }
    return true;
  }
 else {
    return true;
  }
}","@Override public boolean applyFWRules(Network config,List<? extends FirewallRule> rulesToApply) throws ResourceUnavailableException {
  if (!midoInNetwork(config)) {
    return false;
  }
  if (canHandle(config,Service.Firewall)) {
    String accountIdStr=getAccountUuid(config);
    String networkUUIDStr=String.valueOf(config.getId());
    RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
    RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
    Map<String,Rule> existingRules=new HashMap<String,Rule>();
    for (    Rule existingRule : preFilter.getRules()) {
      if (existingRule.getType().equals(DtoRule.Jump) && existingRule.getNwSrcAddress() != null) {
        String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
        existingRules.put(ruleString,existingRule);
      }
    }
    for (    FirewallRule rule : rulesToApply) {
      IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,dstIp.getAddress().addr());
      SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
      String[] ruleStrings=fwRule.toStringArray();
      if (rule.getState() == FirewallRule.State.Revoke) {
        for (        String revokeRuleString : ruleStrings) {
          Rule foundRule=existingRules.get(revokeRuleString);
          if (foundRule != null) {
            foundRule.delete();
          }
        }
      }
 else       if (rule.getState() == FirewallRule.State.Add) {
        for (int i=0; i < ruleStrings.length; i++) {
          String ruleString=ruleStrings[i];
          Rule foundRule=existingRules.get(ruleString);
          if (foundRule == null) {
            String relatedCidr=fwRule.sourceCidrs.get(i);
            Pair<String,Integer> cidrParts=NetUtils.getCidr(relatedCidr);
            Rule toApply=preFilter.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(1).nwSrcAddress(cidrParts.first()).nwSrcLength(cidrParts.second()).nwDstAddress(ruleTO.getSrcIp()).nwDstLength(32).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));
            if (rule.getProtocol().equals(""String_Node_Str"")) {
              toApply.tpSrcStart(fwRule.icmpType).tpSrcEnd(fwRule.icmpType).tpDstStart(fwRule.icmpCode).tpDstEnd(fwRule.icmpCode);
            }
 else {
              toApply.tpDstStart(fwRule.dstPortStart).tpDstEnd(fwRule.dstPortEnd);
            }
            toApply.create();
          }
        }
      }
    }
    return true;
  }
 else {
    return true;
  }
}",0.9928502415458936
106234,"private Router getGuestNetworkRouter(long id,long accountID,boolean isVpc){
  MultivaluedMap qNetRouter=new MultivaluedMapImpl();
  String accountIdStr=String.valueOf(accountID);
  String routerName=getRouterName(isVpc,id);
  qNetRouter.add(""String_Node_Str"",accountIdStr);
  for (  Router router : api.getRouters(qNetRouter)) {
    if (router.getName().equals(routerName)) {
      return router;
    }
  }
  return null;
}","private Router getGuestNetworkRouter(long id,String accountUuid,boolean isVpc){
  MultivaluedMap qNetRouter=new MultivaluedMapImpl();
  String routerName=getRouterName(isVpc,id);
  qNetRouter.add(""String_Node_Str"",accountUuid);
  for (  Router router : api.getRouters(qNetRouter)) {
    if (router.getName().equals(routerName)) {
      return router;
    }
  }
  return null;
}",0.8875
106235,"private void connectBridgeToRouter(Network network,Bridge netBridge,Router netRouter){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  String accountIdStr=String.valueOf(network.getAccountId());
  BridgePort bridgePort=netBridge.addInteriorPort().create();
  RouterPort routerPort=netRouter.addInteriorRouterPort();
  String cidr=network.getCidr();
  String cidrSubnet=NetUtils.getCidrSubNet(cidr);
  int cidrSize=(int)NetUtils.getCidrSize(NetUtils.cidr2Netmask(cidr));
  routerPort.networkAddress(cidrSubnet);
  routerPort.networkLength(cidrSize);
  routerPort.portAddress(network.getGateway());
  if (getIsVpc(network)) {
    int pos=1;
    RuleChain inc=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_INGRESS)).tenantId(accountIdStr).create();
    inc.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).matchReturnFlow(true).position(pos++).create();
    inc.addRule().type(DtoRule.Drop).position(pos).create();
    RuleChain out=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_EGRESS)).tenantId(accountIdStr).create();
    out.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
    routerPort.outboundFilterId(inc.getId());
    routerPort.inboundFilterId(out.getId());
  }
  routerPort.create();
  bridgePort.link(routerPort.getId()).update();
  netRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(cidrSubnet).dstNetworkLength(cidrSize).nextHopPort(routerPort.getId()).nextHopGateway(null).create();
}","private void connectBridgeToRouter(Network network,Bridge netBridge,Router netRouter){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  String accountIdStr=getAccountUuid(network);
  BridgePort bridgePort=netBridge.addInteriorPort().create();
  RouterPort routerPort=netRouter.addInteriorRouterPort();
  String cidr=network.getCidr();
  String cidrSubnet=NetUtils.getCidrSubNet(cidr);
  int cidrSize=(int)NetUtils.getCidrSize(NetUtils.cidr2Netmask(cidr));
  routerPort.networkAddress(cidrSubnet);
  routerPort.networkLength(cidrSize);
  routerPort.portAddress(network.getGateway());
  if (getIsVpc(network)) {
    int pos=1;
    RuleChain inc=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_INGRESS)).tenantId(accountIdStr).create();
    inc.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).nwProto(SimpleFirewallRule.stringToProtocolNumber(""String_Node_Str"")).nwDstAddress(network.getGateway()).nwDstLength(32).position(pos++).create();
    inc.addRule().type(DtoRule.Accept).matchReturnFlow(true).position(pos++).create();
    inc.addRule().type(DtoRule.Drop).position(pos).create();
    RuleChain out=api.addChain().name(getChainName(String.valueOf(network.getId()),routerName,RuleChainCode.ACL_EGRESS)).tenantId(accountIdStr).create();
    out.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
    routerPort.outboundFilterId(inc.getId());
    routerPort.inboundFilterId(out.getId());
  }
  routerPort.create();
  bridgePort.link(routerPort.getId()).update();
  netRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(cidrSubnet).dstNetworkLength(cidrSize).nextHopPort(routerPort.getId()).nextHopGateway(null).create();
}",0.93713972001098
106236,"@Override public boolean applyPFRules(Network network,List<PortForwardingRule> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.PortForwarding)) {
    return false;
  }
  String accountIdStr=String.valueOf(network.getAccountId());
  String networkUUIDStr=String.valueOf(network.getId());
  RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
  RuleChain postNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_POST);
  RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
  Router providerRouter=api.getRouter(_providerRouterId);
  Router tenantRouter=getOrCreateGuestNetworkRouter(network);
  RouterPort[] ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
  RouterPort providerDownlink=ports[1];
  Map<String,Rule> existingPreNatRules=new HashMap<String,Rule>();
  for (  Rule existingRule : preNat.getRules()) {
    String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
    existingPreNatRules.put(ruleString,existingRule);
  }
  Map<String,Integer> ipRuleCounts=new HashMap<String,Integer>();
  for (  Rule rule : preNat.getRules()) {
    String ip=rule.getNwDstAddress();
    if (ip != null && rule.getNwDstLength() == 32) {
      if (ipRuleCounts.containsKey(ip)) {
        ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() + 1));
      }
 else {
        ipRuleCounts.put(ip,new Integer(1));
      }
    }
  }
  Map<String,Route> routes=new HashMap<String,Route>();
  for (  Route route : providerRouter.getRoutes(new MultivaluedMapImpl())) {
    String ip=route.getDstNetworkAddr();
    if (ip != null && route.getDstNetworkLength() == 32) {
      routes.put(ip,route);
    }
  }
  for (  PortForwardingRule rule : rules) {
    IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
    PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,dstIp.getAddress().addr());
    SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
    String[] ruleStrings=fwRule.toStringArray();
    if (rule.getState() == FirewallRule.State.Revoke) {
      for (      String revokeRuleString : ruleStrings) {
        Rule foundPreNatRule=existingPreNatRules.get(revokeRuleString);
        if (foundPreNatRule != null) {
          String ip=foundPreNatRule.getNwDstAddress();
          Integer cnt=ipRuleCounts.get(ip);
          if (cnt != null) {
            if (cnt == 1) {
              ipRuleCounts.remove(ip);
              Route route=routes.remove(ip);
              route.delete();
            }
 else {
              ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() - 1));
            }
          }
          foundPreNatRule.delete();
        }
      }
    }
 else     if (rule.getState() == FirewallRule.State.Add) {
      for (int i=0; i < ruleStrings.length; i++) {
        String ruleString=ruleStrings[i];
        Rule foundRule=existingPreNatRules.get(ruleString);
        if (foundRule == null) {
          String vmIp=ruleTO.getDstIp();
          String publicIp=dstIp.getAddress().addr();
          int privPortStart=ruleTO.getDstPortRange()[0];
          int privPortEnd=ruleTO.getDstPortRange()[1];
          int pubPortStart=ruleTO.getSrcPortRange()[0];
          int pubPortEnd=ruleTO.getSrcPortRange()[1];
          DtoRule.DtoNatTarget[] preTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(vmIp,vmIp,privPortStart,privPortEnd)};
          Rule preNatRule=preNat.addRule().type(DtoRule.DNAT).flowAction(DtoRule.Accept).nwDstAddress(publicIp).nwDstLength(32).tpDstStart(pubPortStart).tpDstEnd(pubPortEnd).natTargets(preTargets).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol())).position(1);
          Integer cnt=ipRuleCounts.get(publicIp);
          if (cnt != null) {
            ipRuleCounts.put(publicIp,new Integer(cnt.intValue() + 1));
          }
 else {
            ipRuleCounts.put(publicIp,new Integer(1));
          }
          String preNatRuleStr=new SimpleFirewallRule(preNatRule).toStringArray()[0];
          existingPreNatRules.put(preNatRuleStr,preNatRule);
          preNatRule.create();
          if (routes.get(publicIp) == null) {
            Route route=providerRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(publicIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId());
            route.create();
            routes.put(publicIp,route);
          }
          if (canHandle(network,Service.Firewall)) {
            boolean defaultBlock=false;
            for (            Rule filterRule : preFilter.getRules()) {
              String pfDstIp=filterRule.getNwDstAddress();
              if (pfDstIp != null && filterRule.getNwDstAddress().equals(publicIp)) {
                defaultBlock=true;
                break;
              }
            }
            if (!defaultBlock) {
              preFilter.addRule().type(DtoRule.Drop).nwDstAddress(publicIp).nwDstLength(32).create();
            }
          }
        }
      }
    }
  }
  return true;
}","@Override public boolean applyPFRules(Network network,List<PortForwardingRule> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.PortForwarding)) {
    return false;
  }
  String accountIdStr=getAccountUuid(network);
  String networkUUIDStr=String.valueOf(network.getId());
  RuleChain preNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PRENAT);
  RuleChain postNat=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_POST);
  RuleChain preFilter=getChain(accountIdStr,networkUUIDStr,RuleChainCode.TR_PREFILTER);
  Router providerRouter=api.getRouter(_providerRouterId);
  Router tenantRouter=getOrCreateGuestNetworkRouter(network);
  RouterPort[] ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
  RouterPort providerDownlink=ports[1];
  Map<String,Rule> existingPreNatRules=new HashMap<String,Rule>();
  for (  Rule existingRule : preNat.getRules()) {
    String ruleString=new SimpleFirewallRule(existingRule).toStringArray()[0];
    existingPreNatRules.put(ruleString,existingRule);
  }
  Map<String,Integer> ipRuleCounts=new HashMap<String,Integer>();
  for (  Rule rule : preNat.getRules()) {
    String ip=rule.getNwDstAddress();
    if (ip != null && rule.getNwDstLength() == 32) {
      if (ipRuleCounts.containsKey(ip)) {
        ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() + 1));
      }
 else {
        ipRuleCounts.put(ip,new Integer(1));
      }
    }
  }
  Map<String,Route> routes=new HashMap<String,Route>();
  for (  Route route : providerRouter.getRoutes(new MultivaluedMapImpl())) {
    String ip=route.getDstNetworkAddr();
    if (ip != null && route.getDstNetworkLength() == 32) {
      routes.put(ip,route);
    }
  }
  for (  PortForwardingRule rule : rules) {
    IpAddress dstIp=_networkModel.getIp(rule.getSourceIpAddressId());
    PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,dstIp.getAddress().addr());
    SimpleFirewallRule fwRule=new SimpleFirewallRule(ruleTO);
    String[] ruleStrings=fwRule.toStringArray();
    if (rule.getState() == FirewallRule.State.Revoke) {
      for (      String revokeRuleString : ruleStrings) {
        Rule foundPreNatRule=existingPreNatRules.get(revokeRuleString);
        if (foundPreNatRule != null) {
          String ip=foundPreNatRule.getNwDstAddress();
          Integer cnt=ipRuleCounts.get(ip);
          if (cnt != null) {
            if (cnt == 1) {
              ipRuleCounts.remove(ip);
              Route route=routes.remove(ip);
              route.delete();
            }
 else {
              ipRuleCounts.put(ip,new Integer(ipRuleCounts.get(ip).intValue() - 1));
            }
          }
          foundPreNatRule.delete();
        }
      }
    }
 else     if (rule.getState() == FirewallRule.State.Add) {
      for (int i=0; i < ruleStrings.length; i++) {
        String ruleString=ruleStrings[i];
        Rule foundRule=existingPreNatRules.get(ruleString);
        if (foundRule == null) {
          String vmIp=ruleTO.getDstIp();
          String publicIp=dstIp.getAddress().addr();
          int privPortStart=ruleTO.getDstPortRange()[0];
          int privPortEnd=ruleTO.getDstPortRange()[1];
          int pubPortStart=ruleTO.getSrcPortRange()[0];
          int pubPortEnd=ruleTO.getSrcPortRange()[1];
          DtoRule.DtoNatTarget[] preTargets=new DtoRule.DtoNatTarget[]{new DtoRule.DtoNatTarget(vmIp,vmIp,privPortStart,privPortEnd)};
          Rule preNatRule=preNat.addRule().type(DtoRule.DNAT).flowAction(DtoRule.Accept).nwDstAddress(publicIp).nwDstLength(32).tpDstStart(pubPortStart).tpDstEnd(pubPortEnd).natTargets(preTargets).nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol())).position(1);
          Integer cnt=ipRuleCounts.get(publicIp);
          if (cnt != null) {
            ipRuleCounts.put(publicIp,new Integer(cnt.intValue() + 1));
          }
 else {
            ipRuleCounts.put(publicIp,new Integer(1));
          }
          String preNatRuleStr=new SimpleFirewallRule(preNatRule).toStringArray()[0];
          existingPreNatRules.put(preNatRuleStr,preNatRule);
          preNatRule.create();
          if (routes.get(publicIp) == null) {
            Route route=providerRouter.addRoute().type(""String_Node_Str"").weight(100).srcNetworkAddr(""String_Node_Str"").srcNetworkLength(0).dstNetworkAddr(publicIp).dstNetworkLength(32).nextHopPort(providerDownlink.getId());
            route.create();
            routes.put(publicIp,route);
          }
          if (canHandle(network,Service.Firewall)) {
            boolean defaultBlock=false;
            for (            Rule filterRule : preFilter.getRules()) {
              String pfDstIp=filterRule.getNwDstAddress();
              if (pfDstIp != null && filterRule.getNwDstAddress().equals(publicIp)) {
                defaultBlock=true;
                break;
              }
            }
            if (!defaultBlock) {
              preFilter.addRule().type(DtoRule.Drop).nwDstAddress(publicIp).nwDstLength(32).create();
            }
          }
        }
      }
    }
  }
  return true;
}",0.9962453066332916
106237,"private Router getOrCreateGuestNetworkRouter(long id,long accountID,boolean isVpc){
  Router tenantRouter=getGuestNetworkRouter(id,accountID,isVpc);
  if (tenantRouter == null) {
    tenantRouter=createRouter(id,accountID,isVpc);
  }
  return tenantRouter;
}","private Router getOrCreateGuestNetworkRouter(long id,String accountUuid,boolean isVpc){
  Router tenantRouter=getGuestNetworkRouter(id,accountUuid,isVpc);
  if (tenantRouter == null) {
    tenantRouter=createRouter(id,accountUuid,isVpc);
  }
  return tenantRouter;
}",0.916030534351145
106238,"/** 
 * From interface StaticNatServiceProvider
 */
@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.StaticNat)) {
    return false;
  }
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preFilter=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=String.valueOf(network.getAccountId());
  String networkUUIDStr=String.valueOf(network.getId());
  for (  StaticNat rule : rules) {
    IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
    String sourceIpAddr=sourceIp.getAddress().addr();
    if (resources == false) {
      tenantRouter=getOrCreateGuestNetworkRouter(network);
      providerRouter=api.getRouter(_providerRouterId);
      ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
      tenantUplink=ports[0];
      providerDownlink=ports[1];
      boolean isVpc=getIsVpc(network);
      long id=getRouterId(network,isVpc);
      String routerName=getRouterName(isVpc,id);
      preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
      preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
      post=api.getChain(tenantRouter.getOutboundFilterId());
      resources=true;
    }
    if (rule.isForRevoke()) {
      removeMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),providerRouter);
    }
 else {
      addMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),tenantUplink,providerDownlink,providerRouter,network);
    }
  }
  return true;
}","/** 
 * From interface StaticNatServiceProvider
 */
@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  s_logger.debug(""String_Node_Str"" + network.toString());
  if (!midoInNetwork(network)) {
    return false;
  }
  if (!canHandle(network,Service.StaticNat)) {
    return false;
  }
  boolean resources=false;
  Router tenantRouter=null;
  Router providerRouter=null;
  RouterPort[] ports=null;
  RouterPort tenantUplink=null;
  RouterPort providerDownlink=null;
  RuleChain preFilter=null;
  RuleChain preNat=null;
  RuleChain post=null;
  String accountIdStr=getAccountUuid(network);
  String networkUUIDStr=String.valueOf(network.getId());
  for (  StaticNat rule : rules) {
    IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
    String sourceIpAddr=sourceIp.getAddress().addr();
    if (resources == false) {
      tenantRouter=getOrCreateGuestNetworkRouter(network);
      providerRouter=api.getRouter(_providerRouterId);
      ports=getOrCreateProviderRouterPorts(tenantRouter,providerRouter);
      tenantUplink=ports[0];
      providerDownlink=ports[1];
      boolean isVpc=getIsVpc(network);
      long id=getRouterId(network,isVpc);
      String routerName=getRouterName(isVpc,id);
      preFilter=getChain(accountIdStr,routerName,RuleChainCode.TR_PREFILTER);
      preNat=getChain(accountIdStr,routerName,RuleChainCode.TR_PRENAT);
      post=api.getChain(tenantRouter.getOutboundFilterId());
      resources=true;
    }
    if (rule.isForRevoke()) {
      removeMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),providerRouter);
    }
 else {
      addMidonetStaticNAT(preFilter,preNat,post,sourceIpAddr,rule.getDestIpAddress(),tenantUplink,providerDownlink,providerRouter,network);
    }
  }
  return true;
}",0.9884065785926126
106239,"protected RuleChain getChain(String networkId,String accountID,String routerName,RuleChainCode chainCode){
  String chainName=getChainName(networkId,routerName,chainCode);
  MultivaluedMap findChain=new MultivaluedMapImpl();
  findChain.add(""String_Node_Str"",accountID);
  ResourceCollection<RuleChain> ruleChains=api.getChains(findChain);
  for (  RuleChain chain : ruleChains) {
    if (chain.getName().equals(chainName)) {
      return chain;
    }
  }
  return null;
}","protected RuleChain getChain(String networkId,String accountUuid,String routerName,RuleChainCode chainCode){
  String chainName=getChainName(networkId,routerName,chainCode);
  MultivaluedMap findChain=new MultivaluedMapImpl();
  findChain.add(""String_Node_Str"",accountUuid);
  ResourceCollection<RuleChain> ruleChains=api.getChains(findChain);
  for (  RuleChain chain : ruleChains) {
    if (chain.getName().equals(chainName)) {
      return chain;
    }
  }
  return null;
}",0.9873417721518988
106240,"protected void resetEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),String.valueOf(network.getAccountId()),routerName,RuleChainCode.ACL_EGRESS);
  for (  Rule rule : egressChain.getRules()) {
    rule.delete();
  }
  egressChain.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
}","protected void resetEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),getAccountUuid(network),routerName,RuleChainCode.ACL_EGRESS);
  for (  Rule rule : egressChain.getRules()) {
    rule.delete();
  }
  egressChain.addRule().type(DtoRule.Accept).matchForwardFlow(true).position(1).create();
}",0.958288770053476
106241,"public boolean midoInNetwork(Network network){
  for (  String pname : _ntwkSrvcDao.getDistinctProviders(network.getId())) {
    if (pname.equals(getProvider().getName())) {
      return true;
    }
  }
  return false;
}","public boolean midoInNetwork(Network network){
  if ((network.getTrafficType() == Networks.TrafficType.Public) && (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Mido)) {
    return true;
  }
  if ((network.getTrafficType() == Networks.TrafficType.Guest) && (network.getBroadcastDomainType() == Networks.BroadcastDomainType.Mido)) {
    return true;
  }
  return false;
}",0.2364532019704433
106242,"protected RuleChain getOrInitEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),String.valueOf(network.getAccountId()),routerName,RuleChainCode.ACL_EGRESS);
  int totalRules=0;
  for (  Rule rule : egressChain.getRules()) {
    if (rule.getNwProto() != 0) {
      totalRules++;
    }
  }
  if (totalRules > 0) {
    return egressChain;
  }
 else {
    for (    Rule rule : egressChain.getRules()) {
      rule.delete();
    }
  }
  int pos=1;
  egressChain.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
  egressChain.addRule().type(DtoRule.Drop).position(pos).create();
  return egressChain;
}","protected RuleChain getOrInitEgressACLFilter(Network network){
  boolean isVpc=getIsVpc(network);
  long id=getRouterId(network,isVpc);
  String routerName=getRouterName(isVpc,id);
  RuleChain egressChain=getChain(String.valueOf(network.getId()),getAccountUuid(network),routerName,RuleChainCode.ACL_EGRESS);
  int totalRules=0;
  for (  Rule rule : egressChain.getRules()) {
    if (rule.getNwProto() != 0) {
      totalRules++;
    }
  }
  if (totalRules > 0) {
    return egressChain;
  }
 else {
    for (    Rule rule : egressChain.getRules()) {
      rule.delete();
    }
  }
  int pos=1;
  egressChain.addRule().type(DtoRule.Accept).dlType((short)0x0806).position(pos++).create();
  egressChain.addRule().type(DtoRule.Accept).nwProto(SimpleFirewallRule.stringToProtocolNumber(""String_Node_Str"")).nwDstAddress(network.getGateway()).nwDstLength(32).position(pos++).create();
  egressChain.addRule().type(DtoRule.Drop).position(pos).create();
  return egressChain;
}",0.8665530948324816
106243,"private Bridge getNetworkBridge(long networkID,long accountID){
  MultivaluedMap qNetBridge=new MultivaluedMapImpl();
  String accountIdStr=String.valueOf(accountID);
  String networkUUIDStr=String.valueOf(networkID);
  qNetBridge.add(""String_Node_Str"",accountIdStr);
  for (  Bridge b : this.api.getBridges(qNetBridge)) {
    if (b.getName().equals(networkUUIDStr)) {
      return b;
    }
  }
  return null;
}","private Bridge getNetworkBridge(long networkID,String accountUuid){
  MultivaluedMap qNetBridge=new MultivaluedMapImpl();
  String networkUUIDStr=String.valueOf(networkID);
  qNetBridge.add(""String_Node_Str"",accountUuid);
  for (  Bridge b : this.api.getBridges(qNetBridge)) {
    if (b.getName().equals(networkUUIDStr)) {
      return b;
    }
  }
  return null;
}",0.2963917525773196
106244,"protected Router createRouter(long id,long accountID,boolean isVpc){
  String accountIdStr=String.valueOf(accountID);
  String routerName=getRouterName(isVpc,id);
  RuleChain pre=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRE)).tenantId(accountIdStr).create();
  RuleChain post=api.addChain().name(getChainName(routerName,RuleChainCode.TR_POST)).tenantId(accountIdStr).create();
  RuleChain preFilter=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PREFILTER)).tenantId(accountIdStr).create();
  RuleChain preNat=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRENAT)).tenantId(accountIdStr).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preFilter.getId()).position(1).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(2).create();
  return api.addRouter().tenantId(accountIdStr).name(routerName).inboundFilterId(pre.getId()).outboundFilterId(post.getId()).create();
}","protected Router createRouter(long id,String accountUuid,boolean isVpc){
  String routerName=getRouterName(isVpc,id);
  RuleChain pre=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRE)).tenantId(accountUuid).create();
  RuleChain post=api.addChain().name(getChainName(routerName,RuleChainCode.TR_POST)).tenantId(accountUuid).create();
  RuleChain preFilter=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PREFILTER)).tenantId(accountUuid).create();
  RuleChain preNat=api.addChain().name(getChainName(routerName,RuleChainCode.TR_PRENAT)).tenantId(accountUuid).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preFilter.getId()).position(1).create();
  pre.addRule().type(DtoRule.Jump).jumpChainId(preNat.getId()).position(2).create();
  return api.addRouter().tenantId(accountUuid).name(routerName).inboundFilterId(pre.getId()).outboundFilterId(post.getId()).create();
}",0.8979591836734694
106245,"private Bridge getOrCreateNetworkBridge(long networkID,long accountID){
  Bridge netBridge=getNetworkBridge(networkID,accountID);
  if (netBridge == null) {
    String accountIdStr=String.valueOf(accountID);
    String networkUUIDStr=String.valueOf(networkID);
    netBridge=api.addBridge().tenantId(accountIdStr).name(networkUUIDStr).create();
  }
  return netBridge;
}","private Bridge getOrCreateNetworkBridge(long networkID,String accountUuid){
  Bridge netBridge=getNetworkBridge(networkID,accountUuid);
  if (netBridge == null) {
    String networkUUIDStr=String.valueOf(networkID);
    netBridge=api.addBridge().tenantId(accountUuid).name(networkUUIDStr).create();
  }
  return netBridge;
}",0.5417867435158501
106246,"protected Answer copyVolumeFromSnapshot(DataObject snapObj,DataObject volObj){
  SnapshotInfo snapshot=(SnapshotInfo)snapObj;
  StoragePool pool=(StoragePool)volObj.getDataStore();
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  DataStore store=snapObj.getDataStore();
  DataStoreTO storTO=store.getTO();
  DataObject srcData=snapObj;
  try {
    if (!(storTO instanceof NfsTO)) {
      srcData=cacheSnapshotChain(snapshot);
    }
    String value=configDao.getValue(Config.CreateVolumeFromSnapshotWait.toString());
    int _createVolumeFromSnapshotWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreateVolumeFromSnapshotWait.getDefaultValue()));
    CopyCommand cmd=new CopyCommand(srcData.getTO(),volObj.getTO(),_createVolumeFromSnapshotWait);
    Answer answer=storageMgr.sendToPool(pool,cmd);
    return answer;
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg,e);
    throw new CloudRuntimeException(basicErrMsg);
  }
 finally {
    if (!(storTO instanceof NfsTO)) {
      deleteSnapshotCacheChain((SnapshotInfo)srcData);
    }
  }
}","protected Answer copyVolumeFromSnapshot(DataObject snapObj,DataObject volObj){
  SnapshotInfo snapshot=(SnapshotInfo)snapObj;
  StoragePool pool=(StoragePool)volObj.getDataStore();
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  DataStore store=snapObj.getDataStore();
  DataStoreTO storTO=store.getTO();
  DataObject srcData=snapObj;
  try {
    if (!(storTO instanceof NfsTO)) {
      srcData=cacheSnapshotChain(snapshot);
    }
    String value=configDao.getValue(Config.CreateVolumeFromSnapshotWait.toString());
    int _createVolumeFromSnapshotWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CreateVolumeFromSnapshotWait.getDefaultValue()));
    CopyCommand cmd=new CopyCommand(srcData.getTO(),volObj.getTO(),_createVolumeFromSnapshotWait);
    EndPoint ep=selector.select(snapObj,volObj);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
 catch (  Exception e) {
    s_logger.error(basicErrMsg,e);
    throw new CloudRuntimeException(basicErrMsg);
  }
 finally {
    if (!(storTO instanceof NfsTO)) {
      deleteSnapshotCacheChain((SnapshotInfo)srcData);
    }
  }
}",0.9506885828520656
106247,"@Test public void createTemplateFromSnapshot(){
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot)) {
      snapshot=strategy.takeSnapshot(snapshot);
      result=true;
    }
  }
  AssertJUnit.assertTrue(result);
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Mockito.any(DataObject.class),Mockito.any(DataObject.class))).thenReturn(ep);
  VMTemplateVO templateVO=createTemplateInDb();
  TemplateInfo tmpl=this.templateFactory.getTemplate(templateVO.getId(),DataStoreRole.Image);
  DataStore imageStore=this.dataStoreMgr.getImageStore(this.dcId);
  this.imageService.createTemplateFromSnapshotAsync(snapshot,tmpl,imageStore);
}","public void createTemplateFromSnapshot(){
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  boolean result=false;
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot)) {
      snapshot=strategy.takeSnapshot(snapshot);
      result=true;
    }
  }
  AssertJUnit.assertTrue(result);
  LocalHostEndpoint ep=new LocalHostEndpoint();
  ep.setResource(new MockLocalNfsSecondaryStorageResource());
  Mockito.when(epSelector.select(Mockito.any(DataObject.class),Mockito.any(DataObject.class))).thenReturn(ep);
  VMTemplateVO templateVO=createTemplateInDb();
  TemplateInfo tmpl=this.templateFactory.getTemplate(templateVO.getId(),DataStoreRole.Image);
  DataStore imageStore=this.dataStoreMgr.getImageStore(this.dcId);
  this.imageService.createTemplateFromSnapshotAsync(snapshot,tmpl,imageStore);
}",0.996938775510204
106248,"@Test public void createSnapshot(){
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot)) {
      strategy.takeSnapshot(snapshot);
    }
  }
}","public void createSnapshot(){
  VolumeInfo vol=createCopyBaseImage();
  SnapshotVO snapshotVO=createSnapshotInDb(vol);
  SnapshotInfo snapshot=this.snapshotFactory.getSnapshot(snapshotVO.getId(),vol.getDataStore());
  for (  SnapshotStrategy strategy : this.snapshotStrategies) {
    if (strategy.canHandle(snapshot)) {
      strategy.takeSnapshot(snapshot);
    }
  }
}",0.9919571045576407
106249,"protected Void createVolumeFromSnapshotCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CreateVolumeFromBaseImageContext<VolumeApiResult> context){
  CopyCommandResult result=callback.getResult();
  VolumeInfo volume=(VolumeInfo)context.vo;
  SnapshotInfo snapshot=context.snapshot;
  VolumeApiResult apiResult=new VolumeApiResult(volume);
  Event event=null;
  if (result.isFailed()) {
    apiResult.setResult(result.getResult());
    event=Event.OperationFailed;
  }
 else {
    event=Event.OperationSuccessed;
  }
  try {
    volume.processEvent(event);
    snapshot.processEvent(event);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    apiResult.setResult(e.toString());
  }
  AsyncCallFuture<VolumeApiResult> future=context.future;
  future.complete(apiResult);
  return null;
}","protected Void createVolumeFromSnapshotCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CreateVolumeFromBaseImageContext<VolumeApiResult> context){
  CopyCommandResult result=callback.getResult();
  VolumeInfo volume=(VolumeInfo)context.vo;
  SnapshotInfo snapshot=context.snapshot;
  VolumeApiResult apiResult=new VolumeApiResult(volume);
  Event event=null;
  if (result.isFailed()) {
    apiResult.setResult(result.getResult());
    event=Event.OperationFailed;
  }
 else {
    event=Event.OperationSuccessed;
  }
  try {
    if (result.isSuccess()) {
      volume.processEvent(event,result.getAnswer());
    }
 else {
      volume.processEvent(event);
    }
    snapshot.processEvent(event);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    apiResult.setResult(e.toString());
  }
  AsyncCallFuture<VolumeApiResult> future=context.future;
  future.complete(apiResult);
  return null;
}",0.9387984278495228
106250,"@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  try {
    VmwareContext context=this.hostService.getServiceContext(null);
    VmwareHypervisorHost hyperHost=this.hostService.getHyperHost(context,null);
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStore.getUuid());
    if (morDatastore == null)     throw new Exception(""String_Node_Str"");
    DatastoreMO dsMo=new DatastoreMO(context,morDatastore);
    VirtualMachineMO vmMo=null;
    String volumeUuid=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
    String volumeDatastorePath=String.format(""String_Node_Str"",dsMo.getName(),volumeUuid);
    String dummyVmName=this.hostService.getWorkerName(context,cmd,0);
    try {
      vmMo=prepareVolumeHostDummyVm(hyperHost,dsMo,dummyVmName);
      if (vmMo == null) {
        throw new Exception(""String_Node_Str"");
      }
synchronized (this) {
        VmwareHelper.deleteVolumeVmdkFiles(dsMo,volumeUuid.toString(),dcMo);
        vmMo.createDisk(volumeDatastorePath,(int)(volume.getSize() / (1024L * 1024L)),morDatastore,vmMo.getScsiDeviceControllerKey());
        vmMo.detachDisk(volumeDatastorePath,false);
      }
      VolumeObjectTO newVol=new VolumeObjectTO();
      newVol.setPath(volumeUuid);
      return new CreateObjectAnswer(newVol);
    }
  finally {
      s_logger.info(""String_Node_Str"");
      vmMo.detachAllDisks();
      vmMo.destroy();
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      this.hostService.invalidateServiceContext(null);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CreateObjectAnswer(e.toString());
  }
}","@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  try {
    VmwareContext context=this.hostService.getServiceContext(null);
    VmwareHypervisorHost hyperHost=this.hostService.getHyperHost(context,null);
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStore.getUuid());
    if (morDatastore == null)     throw new Exception(""String_Node_Str"");
    DatastoreMO dsMo=new DatastoreMO(context,morDatastore);
    VirtualMachineMO vmMo=null;
    String volumeUuid=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
    String volumeDatastorePath=String.format(""String_Node_Str"",dsMo.getName(),volumeUuid);
    String dummyVmName=this.hostService.getWorkerName(context,cmd,0);
    try {
      vmMo=prepareVolumeHostDummyVm(hyperHost,dsMo,dummyVmName);
      if (vmMo == null) {
        throw new Exception(""String_Node_Str"");
      }
synchronized (this) {
        VmwareHelper.deleteVolumeVmdkFiles(dsMo,volumeUuid.toString(),dcMo);
        vmMo.createDisk(volumeDatastorePath,(int)(volume.getSize() / (1024L * 1024L)),morDatastore,vmMo.getScsiDeviceControllerKey());
        vmMo.detachDisk(volumeDatastorePath,false);
      }
      VolumeObjectTO newVol=new VolumeObjectTO();
      newVol.setPath(volumeUuid);
      newVol.setSize(volume.getSize() / (1024L * 1024L));
      return new CreateObjectAnswer(newVol);
    }
  finally {
      s_logger.info(""String_Node_Str"");
      vmMo.detachAllDisks();
      vmMo.destroy();
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      this.hostService.invalidateServiceContext(null);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CreateObjectAnswer(e.toString());
  }
}",0.9857982370225268
106251,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSuccess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSuccess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSuccess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSuccess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
 else {
    s_logger.debug(""String_Node_Str"");
    CommandResult result=new CommandResult();
    result.setResult(""String_Node_Str"");
    callback.complete(result);
  }
}",0.9600378340033104
106252,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSuccess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSuccess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSuccess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSuccess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
 else {
    s_logger.debug(""String_Node_Str"");
    CommandResult result=new CommandResult();
    result.setResult(""String_Node_Str"");
    callback.complete(result);
  }
}",0.9600378340033104
106253,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
 else {
    s_logger.debug(""String_Node_Str"");
    CommandResult result=new CommandResult();
    result.setResult(""String_Node_Str"");
    callback.complete(result);
  }
}",0.9587301587301588
106254,"public TemplateProp getTemplateInfo(){
  TemplateProp tmplInfo=new TemplateProp();
  tmplInfo.id=Long.parseLong(_props.getProperty(""String_Node_Str""));
  tmplInfo.installPath=_templatePath + File.separator + _props.getProperty(""String_Node_Str"");
  if (_resourceType == ResourceType.VOLUME) {
    tmplInfo.installPath=tmplInfo.installPath.substring(tmplInfo.installPath.indexOf(""String_Node_Str""));
  }
 else {
    tmplInfo.installPath=tmplInfo.installPath.substring(tmplInfo.installPath.indexOf(""String_Node_Str""));
  }
  tmplInfo.isCorrupted=_isCorrupted;
  tmplInfo.isPublic=Boolean.parseBoolean(_props.getProperty(""String_Node_Str""));
  tmplInfo.templateName=_props.getProperty(""String_Node_Str"");
  tmplInfo.size=Long.parseLong(_props.getProperty(""String_Node_Str""));
  tmplInfo.physicalSize=Long.parseLong(_props.getProperty(""String_Node_Str""));
  return tmplInfo;
}","public TemplateProp getTemplateInfo(){
  TemplateProp tmplInfo=new TemplateProp();
  tmplInfo.id=Long.parseLong(_props.getProperty(""String_Node_Str""));
  tmplInfo.installPath=_templatePath + File.separator + _props.getProperty(""String_Node_Str"");
  if (_resourceType == ResourceType.VOLUME) {
    tmplInfo.installPath=tmplInfo.installPath.substring(tmplInfo.installPath.indexOf(""String_Node_Str""));
  }
 else {
    tmplInfo.installPath=tmplInfo.installPath.substring(tmplInfo.installPath.indexOf(""String_Node_Str""));
  }
  tmplInfo.isCorrupted=_isCorrupted;
  tmplInfo.isPublic=Boolean.parseBoolean(_props.getProperty(""String_Node_Str""));
  tmplInfo.templateName=_props.getProperty(""String_Node_Str"");
  if (_props.getProperty(""String_Node_Str"") != null) {
    tmplInfo.size=Long.parseLong(_props.getProperty(""String_Node_Str""));
  }
  if (_props.getProperty(""String_Node_Str"") != null) {
    tmplInfo.physicalSize=Long.parseLong(_props.getProperty(""String_Node_Str""));
  }
  return tmplInfo;
}",0.9163987138263664
106255,"@Override public void processEvent(ObjectInDataStoreStateMachine.Event event,Answer answer){
  try {
    if (this.getDataStore().getRole() == DataStoreRole.Primary) {
      if (answer instanceof CopyCmdAnswer) {
        CopyCmdAnswer cpyAnswer=(CopyCmdAnswer)answer;
        TemplateObjectTO newTemplate=(TemplateObjectTO)cpyAnswer.getNewData();
        VMTemplateStoragePoolVO templatePoolRef=templatePoolDao.findByPoolTemplate(this.getDataStore().getId(),this.getId());
        templatePoolRef.setDownloadPercent(100);
        templatePoolRef.setDownloadState(Status.DOWNLOADED);
        templatePoolRef.setLocalDownloadPath(newTemplate.getPath());
        templatePoolRef.setInstallPath(newTemplate.getPath());
        templatePoolDao.update(templatePoolRef.getId(),templatePoolRef);
      }
    }
 else     if (this.getDataStore().getRole() == DataStoreRole.Image || this.getDataStore().getRole() == DataStoreRole.ImageCache) {
      if (answer instanceof CopyCmdAnswer) {
        CopyCmdAnswer cpyAnswer=(CopyCmdAnswer)answer;
        TemplateObjectTO newTemplate=(TemplateObjectTO)cpyAnswer.getNewData();
        TemplateDataStoreVO templateStoreRef=this.templateStoreDao.findByStoreTemplate(this.getDataStore().getId(),this.getId());
        templateStoreRef.setInstallPath(newTemplate.getPath());
        templateStoreRef.setDownloadPercent(100);
        templateStoreRef.setDownloadState(Status.DOWNLOADED);
        templateStoreDao.update(templateStoreRef.getId(),templateStoreRef);
        if (this.getDataStore().getRole() == DataStoreRole.Image) {
          VMTemplateVO templateVO=this.imageDao.findById(this.getId());
          templateVO.setFormat(newTemplate.getFormat());
          templateVO.setSize(newTemplate.getSize());
          this.imageDao.update(templateVO.getId(),templateVO);
        }
      }
      TemplateEvent templEvent=null;
      if (event == ObjectInDataStoreStateMachine.Event.CreateOnlyRequested) {
        templEvent=TemplateEvent.CreateRequested;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.DestroyRequested) {
        templEvent=TemplateEvent.DestroyRequested;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.OperationSuccessed) {
        templEvent=TemplateEvent.OperationSucceeded;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.OperationFailed) {
        templEvent=TemplateEvent.OperationFailed;
      }
      if (templEvent != null && this.getDataStore().getRole() == DataStoreRole.Image) {
        this.stateTransit(templEvent);
      }
    }
    ojbectInStoreMgr.update(this,event);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
}","@Override public void processEvent(ObjectInDataStoreStateMachine.Event event,Answer answer){
  try {
    if (this.getDataStore().getRole() == DataStoreRole.Primary) {
      if (answer instanceof CopyCmdAnswer) {
        CopyCmdAnswer cpyAnswer=(CopyCmdAnswer)answer;
        TemplateObjectTO newTemplate=(TemplateObjectTO)cpyAnswer.getNewData();
        VMTemplateStoragePoolVO templatePoolRef=templatePoolDao.findByPoolTemplate(this.getDataStore().getId(),this.getId());
        templatePoolRef.setDownloadPercent(100);
        templatePoolRef.setDownloadState(Status.DOWNLOADED);
        templatePoolRef.setLocalDownloadPath(newTemplate.getPath());
        templatePoolRef.setInstallPath(newTemplate.getPath());
        templatePoolDao.update(templatePoolRef.getId(),templatePoolRef);
      }
    }
 else     if (this.getDataStore().getRole() == DataStoreRole.Image || this.getDataStore().getRole() == DataStoreRole.ImageCache) {
      if (answer instanceof CopyCmdAnswer) {
        CopyCmdAnswer cpyAnswer=(CopyCmdAnswer)answer;
        TemplateObjectTO newTemplate=(TemplateObjectTO)cpyAnswer.getNewData();
        TemplateDataStoreVO templateStoreRef=this.templateStoreDao.findByStoreTemplate(this.getDataStore().getId(),this.getId());
        templateStoreRef.setInstallPath(newTemplate.getPath());
        templateStoreRef.setDownloadPercent(100);
        templateStoreRef.setDownloadState(Status.DOWNLOADED);
        templateStoreRef.setSize(newTemplate.getSize());
        templateStoreDao.update(templateStoreRef.getId(),templateStoreRef);
        if (this.getDataStore().getRole() == DataStoreRole.Image) {
          VMTemplateVO templateVO=this.imageDao.findById(this.getId());
          templateVO.setFormat(newTemplate.getFormat());
          templateVO.setSize(newTemplate.getSize());
          this.imageDao.update(templateVO.getId(),templateVO);
        }
      }
      TemplateEvent templEvent=null;
      if (event == ObjectInDataStoreStateMachine.Event.CreateOnlyRequested) {
        templEvent=TemplateEvent.CreateRequested;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.DestroyRequested) {
        templEvent=TemplateEvent.DestroyRequested;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.OperationSuccessed) {
        templEvent=TemplateEvent.OperationSucceeded;
      }
 else       if (event == ObjectInDataStoreStateMachine.Event.OperationFailed) {
        templEvent=TemplateEvent.OperationFailed;
      }
      if (templEvent != null && this.getDataStore().getRole() == DataStoreRole.Image) {
        this.stateTransit(templEvent);
      }
    }
    ojbectInStoreMgr.update(this,event);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
}",0.9897757847533633
106256,"@Override public List<ImageStoreVO> findByScope(ZoneScope scope){
  SearchCriteria<ImageStoreVO> sc=createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,DataStoreRole.Image);
  SearchCriteria<ImageStoreVO> scc=createSearchCriteria();
  scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
  scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,scope.getScopeId());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  return listBy(sc);
}","@Override public List<ImageStoreVO> findByScope(ZoneScope scope){
  SearchCriteria<ImageStoreVO> sc=createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,DataStoreRole.Image);
  if (scope.getScopeId() != null) {
    SearchCriteria<ImageStoreVO> scc=createSearchCriteria();
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,scope.getScopeId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
  return listBy(sc);
}",0.9520958083832336
106257,"public LocalNfsSecondaryStorageResource(){
  this._dlMgr=new DownloadManagerImpl();
  ((DownloadManagerImpl)_dlMgr).setThreadPool(Executors.newFixedThreadPool(10));
}","public LocalNfsSecondaryStorageResource(){
  this._dlMgr=new DownloadManagerImpl();
  ((DownloadManagerImpl)_dlMgr).setThreadPool(Executors.newFixedThreadPool(10));
  _storage=new JavaStorageLayer();
  this._inSystemVM=false;
}",0.8447837150127226
106258,"public HostScope(Long hostId){
  this.hostId=hostId;
}","public HostScope(Long hostId,Long zoneId){
  this.hostId=hostId;
  this.zoneId=zoneId;
}",0.7605633802816901
106259,"@Test public void testHostScope(){
  HostScope hostScope=new HostScope(1L);
  HostScope hostScope2=new HostScope(1L);
  HostScope hostScope3=new HostScope(2L);
  Assert.assertTrue(hostScope.isSameScope(hostScope2));
  Assert.assertFalse(hostScope.isSameScope(hostScope3));
}","@Test public void testHostScope(){
  HostScope hostScope=new HostScope(1L,1L);
  HostScope hostScope2=new HostScope(1L,1L);
  HostScope hostScope3=new HostScope(2L,1L);
  Assert.assertTrue(hostScope.isSameScope(hostScope2));
  Assert.assertFalse(hostScope.isSameScope(hostScope3));
}",0.9838420107719928
106260,"@DB protected Answer copyVolumeFromImage(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CopyVolumeWait.key());
  int _copyvolumewait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));
  if (needCacheStorage(srcData,destData)) {
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destData.getDataStore().getScope());
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_copyvolumewait);
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
 else {
    CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_copyvolumewait);
    EndPoint ep=selector.select(srcData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
}","@DB protected Answer copyVolumeFromImage(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.CopyVolumeWait.key());
  int _copyvolumewait=NumbersUtil.parseInt(value,Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));
  if (needCacheStorage(srcData,destData)) {
    Scope destScope=destData.getDataStore().getScope();
    if (destScope instanceof ClusterScope) {
      ClusterScope clusterScope=(ClusterScope)destScope;
      destScope=new ZoneScope(clusterScope.getZoneId());
    }
 else     if (destScope instanceof HostScope) {
      HostScope hostScope=(HostScope)destScope;
      destScope=new ZoneScope(hostScope.getZoneId());
    }
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destScope);
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_copyvolumewait);
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
 else {
    CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_copyvolumewait);
    EndPoint ep=selector.select(srcData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
}",0.7908629441624365
106261,"private Answer copyTemplate(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  int _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  if (needCacheStorage(srcData,destData)) {
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destData.getDataStore().getScope());
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_primaryStorageDownloadWait);
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
 else {
    CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_primaryStorageDownloadWait);
    EndPoint ep=selector.select(srcData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
}","private Answer copyTemplate(DataObject srcData,DataObject destData){
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  int _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  if (needCacheStorage(srcData,destData)) {
    Scope destScope=destData.getDataStore().getScope();
    if (destScope instanceof ClusterScope) {
      ClusterScope clusterScope=(ClusterScope)destScope;
      destScope=new ZoneScope(clusterScope.getZoneId());
    }
 else     if (destScope instanceof HostScope) {
      HostScope hostScope=(HostScope)destScope;
      destScope=new ZoneScope(hostScope.getZoneId());
    }
    DataObject cacheData=cacheMgr.createCacheObject(srcData,destScope);
    CopyCommand cmd=new CopyCommand(cacheData.getTO(),destData.getTO(),_primaryStorageDownloadWait);
    EndPoint ep=selector.select(cacheData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
 else {
    CopyCommand cmd=new CopyCommand(srcData.getTO(),destData.getTO(),_primaryStorageDownloadWait);
    EndPoint ep=selector.select(srcData,destData);
    Answer answer=ep.sendMessage(cmd);
    return answer;
  }
}",0.8013500482160077
106262,"@Override public DataObject create(DataObject obj,DataStore dataStore){
  if (dataStore.getRole() == DataStoreRole.Primary) {
    if (obj.getType() == DataObjectType.TEMPLATE) {
      VMTemplateStoragePoolVO vo=new VMTemplateStoragePoolVO(dataStore.getId(),obj.getId());
      vo=templatePoolDao.persist(vo);
    }
 else     if (obj.getType() == DataObjectType.SNAPSHOT) {
      SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
      ss.setSnapshotId(obj.getId());
      ss.setDataStoreId(dataStore.getId());
      ss.setRole(dataStore.getRole());
      ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
      ss=snapshotDataStoreDao.persist(ss);
    }
  }
 else {
switch (obj.getType()) {
case TEMPLATE:
      TemplateDataStoreVO ts=new TemplateDataStoreVO();
    ts.setTemplateId(obj.getId());
  ts.setDataStoreId(dataStore.getId());
ts.setInstallPath(TemplateConstants.DEFAULT_TMPLT_ROOT_DIR + ""String_Node_Str"" + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR+ templateDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
ts.setState(ObjectInDataStoreStateMachine.State.Allocated);
ts=templateDataStoreDao.persist(ts);
break;
case SNAPSHOT:
SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
ss.setSnapshotId(obj.getId());
ss.setDataStoreId(dataStore.getId());
ss.setRole(dataStore.getRole());
ss.setInstallPath(TemplateConstants.DEFAULT_SNAPSHOT_ROOT_DIR + ""String_Node_Str"" + snapshotDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
ss=snapshotDataStoreDao.persist(ss);
break;
case VOLUME:
VolumeDataStoreVO vs=new VolumeDataStoreVO();
vs.setVolumeId(obj.getId());
vs.setDataStoreId(dataStore.getId());
vs.setInstallPath(TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + ""String_Node_Str"" + volumeDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
vs.setState(ObjectInDataStoreStateMachine.State.Allocated);
vs=volumeDataStoreDao.persist(vs);
break;
}
}
return this.get(obj,dataStore);
}","@Override public DataObject create(DataObject obj,DataStore dataStore){
  if (dataStore.getRole() == DataStoreRole.Primary) {
    if (obj.getType() == DataObjectType.TEMPLATE) {
      VMTemplateStoragePoolVO vo=new VMTemplateStoragePoolVO(dataStore.getId(),obj.getId());
      vo=templatePoolDao.persist(vo);
    }
 else     if (obj.getType() == DataObjectType.SNAPSHOT) {
      SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
      ss.setSnapshotId(obj.getId());
      ss.setDataStoreId(dataStore.getId());
      ss.setRole(dataStore.getRole());
      ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
      ss=snapshotDataStoreDao.persist(ss);
    }
  }
 else {
switch (obj.getType()) {
case TEMPLATE:
      TemplateDataStoreVO ts=new TemplateDataStoreVO();
    ts.setTemplateId(obj.getId());
  ts.setDataStoreId(dataStore.getId());
ts.setDataStoreRole(dataStore.getRole());
ts.setInstallPath(TemplateConstants.DEFAULT_TMPLT_ROOT_DIR + ""String_Node_Str"" + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR+ templateDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
ts.setState(ObjectInDataStoreStateMachine.State.Allocated);
ts=templateDataStoreDao.persist(ts);
break;
case SNAPSHOT:
SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
ss.setSnapshotId(obj.getId());
ss.setDataStoreId(dataStore.getId());
ss.setRole(dataStore.getRole());
ss.setRole(dataStore.getRole());
ss.setInstallPath(TemplateConstants.DEFAULT_SNAPSHOT_ROOT_DIR + ""String_Node_Str"" + snapshotDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
ss=snapshotDataStoreDao.persist(ss);
break;
case VOLUME:
VolumeDataStoreVO vs=new VolumeDataStoreVO();
vs.setVolumeId(obj.getId());
vs.setDataStoreId(dataStore.getId());
vs.setInstallPath(TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + ""String_Node_Str"" + volumeDao.findById(obj.getId()).getAccountId()+ ""String_Node_Str""+ obj.getId());
vs.setState(ObjectInDataStoreStateMachine.State.Allocated);
vs=volumeDataStoreDao.persist(vs);
break;
}
}
return this.get(obj,dataStore);
}",0.9818621523579202
106263,"@Override public Scope getScope(){
  StoragePoolVO vo=dataStoreDao.findById(this.pdsv.getId());
  if (vo.getScope() == ScopeType.CLUSTER) {
    return new ClusterScope(vo.getClusterId(),vo.getPodId(),vo.getDataCenterId());
  }
 else   if (vo.getScope() == ScopeType.ZONE) {
    return new ZoneScope(vo.getDataCenterId());
  }
 else   if (vo.getScope() == ScopeType.HOST) {
    List<StoragePoolHostVO> poolHosts=poolHostDao.listByPoolId(vo.getId());
    if (poolHosts.size() > 0) {
      return new HostScope(poolHosts.get(0).getHostId());
    }
    s_logger.debug(""String_Node_Str"" + vo.getId());
  }
  return null;
}","@Override public Scope getScope(){
  StoragePoolVO vo=dataStoreDao.findById(this.pdsv.getId());
  if (vo.getScope() == ScopeType.CLUSTER) {
    return new ClusterScope(vo.getClusterId(),vo.getPodId(),vo.getDataCenterId());
  }
 else   if (vo.getScope() == ScopeType.ZONE) {
    return new ZoneScope(vo.getDataCenterId());
  }
 else   if (vo.getScope() == ScopeType.HOST) {
    List<StoragePoolHostVO> poolHosts=poolHostDao.listByPoolId(vo.getId());
    if (poolHosts.size() > 0) {
      return new HostScope(poolHosts.get(0).getHostId(),vo.getDataCenterId());
    }
    s_logger.debug(""String_Node_Str"" + vo.getId());
  }
  return null;
}",0.9832669322709164
106264,"@DB @Override public DataStore createLocalStorage(Host host,StoragePoolInfo pInfo) throws ConnectionException {
  DataCenterVO dc=_dcDao.findById(host.getDataCenterId());
  if (dc == null || !dc.isLocalStorageEnabled()) {
    return null;
  }
  DataStore store=null;
  try {
    StoragePoolVO pool=_storagePoolDao.findPoolByHostPath(host.getDataCenterId(),host.getPodId(),pInfo.getHost(),pInfo.getHostPath(),pInfo.getUuid());
    if (pool == null && host.getHypervisorType() == HypervisorType.VMware) {
      if (pInfo.getHostPath().length() > 0) {
        pool=_storagePoolDao.findPoolByHostPath(host.getDataCenterId(),host.getPodId(),pInfo.getHost(),""String_Node_Str"",pInfo.getUuid());
      }
    }
    DataStoreProvider provider=this.dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();
    DataStoreLifeCycle lifeCycle=provider.getDataStoreLifeCycle();
    if (pool == null) {
      Map<String,Object> params=new HashMap<String,Object>();
      String name=(host.getName() + ""String_Node_Str"");
      params.put(""String_Node_Str"",host.getDataCenterId());
      params.put(""String_Node_Str"",host.getClusterId());
      params.put(""String_Node_Str"",host.getPodId());
      params.put(""String_Node_Str"",pInfo.getPoolType().toString() + ""String_Node_Str"" + pInfo.getHost()+ ""String_Node_Str""+ pInfo.getHostPath());
      params.put(""String_Node_Str"",name);
      params.put(""String_Node_Str"",true);
      params.put(""String_Node_Str"",pInfo.getDetails());
      params.put(""String_Node_Str"",pInfo.getUuid());
      params.put(""String_Node_Str"",provider.getName());
      store=lifeCycle.initialize(params);
    }
 else {
      store=(DataStore)dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
    }
    HostScope scope=new HostScope(host.getId());
    lifeCycle.attachHost(store,scope,pInfo);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + host,e);
    throw new ConnectionException(true,""String_Node_Str"" + host,e);
  }
  return (DataStore)dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Primary);
}","@DB @Override public DataStore createLocalStorage(Host host,StoragePoolInfo pInfo) throws ConnectionException {
  DataCenterVO dc=_dcDao.findById(host.getDataCenterId());
  if (dc == null || !dc.isLocalStorageEnabled()) {
    return null;
  }
  DataStore store=null;
  try {
    StoragePoolVO pool=_storagePoolDao.findPoolByHostPath(host.getDataCenterId(),host.getPodId(),pInfo.getHost(),pInfo.getHostPath(),pInfo.getUuid());
    if (pool == null && host.getHypervisorType() == HypervisorType.VMware) {
      if (pInfo.getHostPath().length() > 0) {
        pool=_storagePoolDao.findPoolByHostPath(host.getDataCenterId(),host.getPodId(),pInfo.getHost(),""String_Node_Str"",pInfo.getUuid());
      }
    }
    DataStoreProvider provider=this.dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();
    DataStoreLifeCycle lifeCycle=provider.getDataStoreLifeCycle();
    if (pool == null) {
      Map<String,Object> params=new HashMap<String,Object>();
      String name=(host.getName() + ""String_Node_Str"");
      params.put(""String_Node_Str"",host.getDataCenterId());
      params.put(""String_Node_Str"",host.getClusterId());
      params.put(""String_Node_Str"",host.getPodId());
      params.put(""String_Node_Str"",pInfo.getPoolType().toString() + ""String_Node_Str"" + pInfo.getHost()+ ""String_Node_Str""+ pInfo.getHostPath());
      params.put(""String_Node_Str"",name);
      params.put(""String_Node_Str"",true);
      params.put(""String_Node_Str"",pInfo.getDetails());
      params.put(""String_Node_Str"",pInfo.getUuid());
      params.put(""String_Node_Str"",provider.getName());
      store=lifeCycle.initialize(params);
    }
 else {
      store=(DataStore)dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
    }
    HostScope scope=new HostScope(host.getId(),pool.getDataCenterId());
    lifeCycle.attachHost(store,scope,pInfo);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + host,e);
    throw new ConnectionException(true,""String_Node_Str"" + host,e);
  }
  return (DataStore)dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Primary);
}",0.9944106925880924
106265,"@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  String url=cmd.getUrl();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listAll();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=UserContext.current().getCaller();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone,dcId,""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  if (((ImageStoreProvider)storeProvider).needDownloadSysTemplate()) {
    this._imageSrv.downloadBootstrapSysTemplate(store);
  }
 else {
    this._imageSrv.addSystemVMTemplatesToSecondary(store);
  }
  this.associateCrosszoneTemplatesToZone(dcId);
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}","@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  String url=cmd.getUrl();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listImageStores();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=UserContext.current().getCaller();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone,dcId,""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  if (((ImageStoreProvider)storeProvider).needDownloadSysTemplate()) {
    this._imageSrv.downloadBootstrapSysTemplate(store);
  }
 else {
    this._imageSrv.addSystemVMTemplatesToSecondary(store);
  }
  this.associateCrosszoneTemplatesToZone(dcId);
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}",0.997405485544848
106266,"private Pair<List<ImageStoreJoinVO>,Integer> searchForImageStoresInternal(ListImageStoresCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  Object id=cmd.getId();
  Object name=cmd.getStoreName();
  String provider=cmd.getProvider();
  String protocol=cmd.getProtocol();
  Object keyword=cmd.getKeyword();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(ImageStoreJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<ImageStoreJoinVO> sb=_imageStoreJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProtocol(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProviderName(),SearchCriteria.Op.EQ);
  SearchCriteria<ImageStoreJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<ImageStoreJoinVO> ssc=_imageStoreJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",name);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (provider != null) {
    sc.setParameters(""String_Node_Str"",provider);
  }
  if (protocol != null) {
    sc.setParameters(""String_Node_Str"",protocol);
  }
  Pair<List<ImageStoreJoinVO>,Integer> uniqueStorePair=_imageStoreJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueStorePair.second();
  if (count.intValue() == 0) {
    return uniqueStorePair;
  }
  List<ImageStoreJoinVO> uniqueStores=uniqueStorePair.first();
  Long[] vrIds=new Long[uniqueStores.size()];
  int i=0;
  for (  ImageStoreJoinVO v : uniqueStores) {
    vrIds[i++]=v.getId();
  }
  List<ImageStoreJoinVO> vrs=_imageStoreJoinDao.searchByIds(vrIds);
  return new Pair<List<ImageStoreJoinVO>,Integer>(vrs,count);
}","private Pair<List<ImageStoreJoinVO>,Integer> searchForImageStoresInternal(ListImageStoresCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  Object id=cmd.getId();
  Object name=cmd.getStoreName();
  String provider=cmd.getProvider();
  String protocol=cmd.getProtocol();
  Object keyword=cmd.getKeyword();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(ImageStoreJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<ImageStoreJoinVO> sb=_imageStoreJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProtocol(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProviderName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getRole(),SearchCriteria.Op.EQ);
  SearchCriteria<ImageStoreJoinVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",DataStoreRole.Image);
  if (keyword != null) {
    SearchCriteria<ImageStoreJoinVO> ssc=_imageStoreJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",name);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (provider != null) {
    sc.setParameters(""String_Node_Str"",provider);
  }
  if (protocol != null) {
    sc.setParameters(""String_Node_Str"",protocol);
  }
  Pair<List<ImageStoreJoinVO>,Integer> uniqueStorePair=_imageStoreJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueStorePair.second();
  if (count.intValue() == 0) {
    return uniqueStorePair;
  }
  List<ImageStoreJoinVO> uniqueStores=uniqueStorePair.first();
  Long[] vrIds=new Long[uniqueStores.size()];
  int i=0;
  for (  ImageStoreJoinVO v : uniqueStores) {
    vrIds[i++]=v.getId();
  }
  List<ImageStoreJoinVO> vrs=_imageStoreJoinDao.searchByIds(vrIds);
  return new Pair<List<ImageStoreJoinVO>,Integer>(vrs,count);
}",0.9735833837467232
106267,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(false);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}",0.9982745871333496
106268,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(false);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}",0.9982745871333496
106269,"private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(false);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}","private void deleteTemplate(DataObject data,AsyncCompletionCallback<CommandResult> callback){
  TemplateObject templateObj=(TemplateObject)data;
  VMTemplateVO template=templateObj.getImage();
  ImageStoreImpl store=(ImageStoreImpl)templateObj.getDataStore();
  long storeId=store.getId();
  Long sZoneId=store.getDataCenterId();
  long templateId=template.getId();
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  UsageEventUtils.publishUsageEvent(eventType,account.getId(),sZoneId,templateId,null,null,null);
  List<UserVmVO> userVmUsingIso=_userVmDao.listByIsoId(templateId);
  if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {
    TemplateDataStoreVO tmplStore=_templateStoreDao.findByStoreTemplate(storeId,templateId);
    String installPath=tmplStore.getInstallPath();
    if (installPath != null) {
      DeleteTemplateCommand cmd=new DeleteTemplateCommand(store.getTO(),installPath,template.getId(),template.getAccountId());
      EndPoint ep=_epSelector.select(templateObj);
      Answer answer=ep.sendMessage(cmd);
      if (answer == null || !answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + store.getName());
        CommandResult result=new CommandResult();
        result.setSucess(false);
        result.setResult(""String_Node_Str"");
        callback.complete(result);
      }
 else {
        s_logger.debug(""String_Node_Str"" + installPath);
        CommandResult result=new CommandResult();
        result.setSucess(true);
        callback.complete(result);
      }
      List<VMTemplateZoneVO> templateZones=templateZoneDao.listByZoneTemplate(sZoneId,templateId);
      if (templateZones != null) {
        for (        VMTemplateZoneVO templateZone : templateZones) {
          templateZoneDao.remove(templateZone.getId());
        }
      }
    }
  }
}",0.9982745871333496
106270,"@Override public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, CloudRuntimeException {
  Long vmId=cmd.getVmId();
  Long networkId=cmd.getNetworkId();
  String ipAddress=cmd.getIpAddress();
  Account caller=UserContext.current().getCaller();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  NetworkVO network=_networkDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  NicProfile profile=new NicProfile(null,null);
  if (ipAddress != null) {
    profile=new NicProfile(ipAddress,null);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance.getDataCenterId() + ""String_Node_Str"");
  }
  if (network.getGuestType() != Network.GuestType.Shared) {
    List<NetworkVO> networkMap=_networkDao.listBy(caller.getId(),network.getId());
    if ((networkMap == null || networkMap.isEmpty()) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
    }
  }
  if (network.getDataCenterId() != vmInstance.getDataCenterId()) {
    throw new CloudRuntimeException(vmInstance + ""String_Node_Str"" + vmInstance.getDataCenterId()+ ""String_Node_Str""+ network+ ""String_Node_Str""+ network.getDataCenterId());
  }
  if (_networkModel.getNicInNetwork(vmInstance.getId(),network.getId()) != null) {
    s_logger.debug(vmInstance + ""String_Node_Str"" + network+ ""String_Node_Str"");
  }
 else {
    List<String> hostNames=_vmInstanceDao.listDistinctHostNames(network.getId());
    if (hostNames.contains(vmInstance.getHostName())) {
      throw new CloudRuntimeException(network + ""String_Node_Str"" + vmInstance.getHostName());
    }
  }
  NicProfile guestNic=null;
  try {
    guestNic=_itMgr.addVmToNetwork(vmInstance,network,profile);
  }
 catch (  ResourceUnavailableException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
catch (  InsufficientCapacityException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
  if (guestNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance);
  }
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str""+ vmInstance);
  return _vmDao.findById(vmInstance.getId());
}","@Override public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, CloudRuntimeException {
  Long vmId=cmd.getVmId();
  Long networkId=cmd.getNetworkId();
  String ipAddress=cmd.getIpAddress();
  Account caller=UserContext.current().getCaller();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  NetworkVO network=_networkDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  List<NicVO> allNics=_nicDao.listByVmId(vmInstance.getId());
  for (  NicVO nic : allNics) {
    if (nic.getNetworkId() == network.getId())     throw new CloudRuntimeException(""String_Node_Str"" + vmInstance.getInstanceName() + ""String_Node_Str""+ network.getUuid());
  }
  NicProfile profile=new NicProfile(null,null);
  if (ipAddress != null) {
    profile=new NicProfile(ipAddress,null);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance.getDataCenterId() + ""String_Node_Str"");
  }
  if (network.getGuestType() != Network.GuestType.Shared) {
    List<NetworkVO> networkMap=_networkDao.listBy(caller.getId(),network.getId());
    if ((networkMap == null || networkMap.isEmpty()) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
    }
  }
  if (network.getDataCenterId() != vmInstance.getDataCenterId()) {
    throw new CloudRuntimeException(vmInstance + ""String_Node_Str"" + vmInstance.getDataCenterId()+ ""String_Node_Str""+ network+ ""String_Node_Str""+ network.getDataCenterId());
  }
  if (_networkModel.getNicInNetwork(vmInstance.getId(),network.getId()) != null) {
    s_logger.debug(vmInstance + ""String_Node_Str"" + network+ ""String_Node_Str"");
  }
 else {
    List<String> hostNames=_vmInstanceDao.listDistinctHostNames(network.getId());
    if (hostNames.contains(vmInstance.getHostName())) {
      throw new CloudRuntimeException(network + ""String_Node_Str"" + vmInstance.getHostName());
    }
  }
  NicProfile guestNic=null;
  try {
    guestNic=_itMgr.addVmToNetwork(vmInstance,network,profile);
  }
 catch (  ResourceUnavailableException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
catch (  InsufficientCapacityException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str""+ e);
  }
  if (guestNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance);
  }
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str""+ vmInstance);
  return _vmDao.findById(vmInstance.getId());
}",0.9539350671426144
106271,"@Override public boolean removeNicFromVm(VirtualMachine vm,NicVO nic) throws ConcurrentOperationException, ResourceUnavailableException {
  VMInstanceVO vmVO=_vmDao.findById(vm.getId());
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  ReservationContext context=new ReservationContextImpl(null,null,_accountMgr.getActiveUser(User.UID_SYSTEM),_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM));
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmVO,null,null,null,null);
  DataCenter dc=_configMgr.getZone(network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  VirtualMachineGuru<VMInstanceVO> vmGuru=getVmGuru(vmVO);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());
  VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
  if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {
    s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network+ ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ network+ ""String_Node_Str"");
  }
  NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),_networkModel.getNetworkRate(network.getId(),vm.getId()),_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(),network));
  if (vm.getState() == State.Running) {
    NicTO nicTO=toNicTO(nicProfile,vmProfile.getVirtualMachine().getHypervisorType());
    s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm+ ""String_Node_Str""+ network);
    boolean result=vmGuru.unplugNic(network,nicTO,vmTO,context,dest);
    if (result) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
      long isDefault=(nic.isDefaultNic()) ? 1 : 0;
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),Long.toString(nic.getId()),network.getNetworkOfferingId(),null,isDefault,VirtualMachine.class.getName(),vm.getUuid());
    }
 else {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
      return false;
    }
  }
 else   if (vm.getState() != State.Stopped) {
    s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
    throw new ResourceUnavailableException(""String_Node_Str"" + vm + ""String_Node_Str"",DataCenter.class,vm.getDataCenterId());
  }
  _networkMgr.releaseNic(vmProfile,nic);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
  _networkMgr.removeNic(vmProfile,nic);
  _nicsDao.expunge(nic.getId());
  return true;
}","@Override public boolean removeNicFromVm(VirtualMachine vm,NicVO nic) throws ConcurrentOperationException, ResourceUnavailableException {
  VMInstanceVO vmVO=_vmDao.findById(vm.getId());
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  ReservationContext context=new ReservationContextImpl(null,null,_accountMgr.getActiveUser(User.UID_SYSTEM),_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM));
  VirtualMachineProfileImpl<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vmVO,null,null,null,null);
  DataCenter dc=_configMgr.getZone(network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  VirtualMachineGuru<VMInstanceVO> vmGuru=getVmGuru(vmVO);
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());
  VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
  if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {
    s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network+ ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ network+ ""String_Node_Str"");
  }
  if (rulesMgr.listAssociatedRulesForGuestNic(nic).size() > 0) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ network+ ""String_Node_Str"");
  }
  NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),_networkModel.getNetworkRate(network.getId(),vm.getId()),_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(),network));
  if (vm.getState() == State.Running) {
    NicTO nicTO=toNicTO(nicProfile,vmProfile.getVirtualMachine().getHypervisorType());
    s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm+ ""String_Node_Str""+ network);
    boolean result=vmGuru.unplugNic(network,nicTO,vmTO,context,dest);
    if (result) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
      long isDefault=(nic.isDefaultNic()) ? 1 : 0;
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),Long.toString(nic.getId()),network.getNetworkOfferingId(),null,isDefault,VirtualMachine.class.getName(),vm.getUuid());
    }
 else {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
      return false;
    }
  }
 else   if (vm.getState() != State.Stopped) {
    s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
    throw new ResourceUnavailableException(""String_Node_Str"" + vm + ""String_Node_Str"",DataCenter.class,vm.getDataCenterId());
  }
  _networkMgr.releaseNic(vmProfile,nic);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
  _networkMgr.removeNic(vmProfile,nic);
  _nicsDao.expunge(nic.getId());
  return true;
}",0.968562345460968
106272,"private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Account> permittedAccounts,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags){
  VMTemplateVO template=null;
  if (templateId != null) {
    template=_templateDao.findById(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template,templateId,""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template,templateId,""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
  }
  DomainVO domain=null;
  if (!permittedAccounts.isEmpty()) {
    domain=_domainDao.findById(permittedAccounts.get(0).getDomainId());
  }
 else {
    domain=_domainDao.findById(DomainVO.ROOT_DOMAIN);
  }
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
  }
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchCriteria<TemplateJoinVO> sc=_templateJoinDao.createSearchCriteria();
  if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Account.ACCOUNT_TYPE_PROJECT);
  }
 else   if (listProjectResourcesCriteria == ListProjectResourcesCriteria.ListProjectResourcesOnly) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
  }
  if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,domain.getPath() + ""String_Node_Str"");
  }
  List<Long> relatedDomainIds=new ArrayList<Long>();
  List<Long> permittedAccountIds=new ArrayList<Long>();
  if (!permittedAccounts.isEmpty()) {
    for (    Account account : permittedAccounts) {
      permittedAccountIds.add(account.getId());
      DomainVO accountDomain=_domainDao.findById(account.getDomainId());
      DomainVO domainTreeNode=accountDomain;
      relatedDomainIds.add(domainTreeNode.getId());
      while (domainTreeNode.getParent() != null) {
        domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
        relatedDomainIds.add(domainTreeNode.getId());
      }
      if (_accountMgr.isAdmin(account.getType())) {
        List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
        for (        DomainVO childDomain : allChildDomains) {
          relatedDomainIds.add(childDomain.getId());
        }
      }
    }
  }
  if (hypers != null && !hypers.isEmpty()) {
    String[] relatedHypers=new String[hypers.size()];
    for (int i=0; i < hypers.size(); i++) {
      relatedHypers[i]=hypers.get(i).toString();
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
  }
  if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    if (templateFilter == TemplateFilter.featured) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
    }
    if (!permittedAccounts.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,relatedDomainIds.toArray());
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
      if (!_accountMgr.isAdmin(caller.getType())) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
    }
  }
 else   if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
    if (!permittedAccounts.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    }
  }
 else   if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
 else   if (templateFilter == TemplateFilter.executable) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    if (!permittedAccounts.isEmpty()) {
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    int count=0;
    for (    String key : tags.keySet()) {
      SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
      scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
      scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
      if (isIso) {
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TaggedResourceType.ISO);
      }
 else {
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TaggedResourceType.Template);
      }
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
      count++;
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
  if (templateId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else   if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
 else   if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (isIso) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
  }
 else {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
  }
  if (!hyperType.equals(HypervisorType.None)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
  }
  if (bootable != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
  }
  if (onlyReady) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Status.DOWNLOADED);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (!showDomr) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  Long[] vrIds=new Long[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    vrIds[i++]=v.getId();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByIds(vrIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}","private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Account> permittedAccounts,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags){
  VMTemplateVO template=null;
  if (templateId != null) {
    template=_templateDao.findById(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template,templateId,""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template,templateId,""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
  }
  DomainVO domain=null;
  if (!permittedAccounts.isEmpty()) {
    domain=_domainDao.findById(permittedAccounts.get(0).getDomainId());
  }
 else {
    domain=_domainDao.findById(DomainVO.ROOT_DOMAIN);
  }
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
  }
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchCriteria<TemplateJoinVO> sc=_templateJoinDao.createSearchCriteria();
  if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Account.ACCOUNT_TYPE_PROJECT);
  }
 else   if (listProjectResourcesCriteria == ListProjectResourcesCriteria.ListProjectResourcesOnly) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Account.ACCOUNT_TYPE_PROJECT);
  }
  if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,domain.getPath() + ""String_Node_Str"");
  }
  List<Long> relatedDomainIds=new ArrayList<Long>();
  List<Long> permittedAccountIds=new ArrayList<Long>();
  if (!permittedAccounts.isEmpty()) {
    for (    Account account : permittedAccounts) {
      permittedAccountIds.add(account.getId());
      DomainVO accountDomain=_domainDao.findById(account.getDomainId());
      DomainVO domainTreeNode=accountDomain;
      relatedDomainIds.add(domainTreeNode.getId());
      while (domainTreeNode.getParent() != null) {
        domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
        relatedDomainIds.add(domainTreeNode.getId());
      }
      if (_accountMgr.isAdmin(account.getType())) {
        List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
        for (        DomainVO childDomain : allChildDomains) {
          relatedDomainIds.add(childDomain.getId());
        }
      }
    }
  }
  if (hypers != null && !hypers.isEmpty()) {
    String[] relatedHypers=new String[hypers.size()];
    for (int i=0; i < hypers.size(); i++) {
      relatedHypers[i]=hypers.get(i).toString();
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
  }
  if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    if (templateFilter == TemplateFilter.featured) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
    }
    if (!permittedAccounts.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,relatedDomainIds.toArray());
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.NULL);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
      if (!_accountMgr.isAdmin(caller.getType())) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
      }
    }
  }
 else   if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
    if (!permittedAccounts.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    }
  }
 else   if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
 else   if (templateFilter == TemplateFilter.executable) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
    if (!permittedAccounts.isEmpty()) {
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccountIds.toArray());
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
  if (tags != null && !tags.isEmpty()) {
    SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
    int count=0;
    for (    String key : tags.keySet()) {
      SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
      scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
      scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
      if (isIso) {
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TaggedResourceType.ISO);
      }
 else {
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TaggedResourceType.Template);
      }
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
      count++;
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
  }
  if (templateId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else   if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
 else   if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (isIso) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
  }
 else {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
  }
  if (!hyperType.equals(HypervisorType.None)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
  }
  if (bootable != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
  }
  if (onlyReady) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Status.DOWNLOADED);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (!showDomr) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  Long[] vrIds=new Long[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    vrIds[i++]=v.getId();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByIds(vrIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}",0.9966857487194938
106273,"protected Void createAsyncCallback(AsyncCallbackDispatcher<CloudStackImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
  updateBuilder.setDownloadPercent(answer.getDownloadPct());
  updateBuilder.setDownloadState(answer.getDownloadStatus());
  updateBuilder.setLastUpdated(new Date());
  updateBuilder.setErrorString(answer.getErrorString());
  updateBuilder.setJobId(answer.getJobId());
  updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
  updateBuilder.setInstallPath(answer.getInstallPath());
  updateBuilder.setSize(answer.getTemplateSize());
  updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
  _templateStoreDao.update(store.getId(),updateBuilder);
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}","protected Void createAsyncCallback(AsyncCallbackDispatcher<CloudStackImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO tmpltStoreVO=_templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());
  if (tmpltStoreVO != null) {
    TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
    updateBuilder.setDownloadPercent(answer.getDownloadPct());
    updateBuilder.setDownloadState(answer.getDownloadStatus());
    updateBuilder.setLastUpdated(new Date());
    updateBuilder.setErrorString(answer.getErrorString());
    updateBuilder.setJobId(answer.getJobId());
    updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
    updateBuilder.setInstallPath(answer.getInstallPath());
    updateBuilder.setSize(answer.getTemplateSize());
    updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
    _templateStoreDao.update(tmpltStoreVO.getId(),updateBuilder);
  }
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}",0.948051948051948
106274,"protected Void createAsyncCallback(AsyncCallbackDispatcher<S3ImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
  updateBuilder.setDownloadPercent(answer.getDownloadPct());
  updateBuilder.setDownloadState(answer.getDownloadStatus());
  updateBuilder.setLastUpdated(new Date());
  updateBuilder.setErrorString(answer.getErrorString());
  updateBuilder.setJobId(answer.getJobId());
  updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
  updateBuilder.setInstallPath(answer.getInstallPath());
  updateBuilder.setSize(answer.getTemplateSize());
  updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
  _templateStoreDao.update(store.getId(),updateBuilder);
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}","protected Void createAsyncCallback(AsyncCallbackDispatcher<S3ImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO tmpltStoreVO=_templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());
  if (tmpltStoreVO != null) {
    TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
    updateBuilder.setDownloadPercent(answer.getDownloadPct());
    updateBuilder.setDownloadState(answer.getDownloadStatus());
    updateBuilder.setLastUpdated(new Date());
    updateBuilder.setErrorString(answer.getErrorString());
    updateBuilder.setJobId(answer.getJobId());
    updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
    updateBuilder.setInstallPath(answer.getInstallPath());
    updateBuilder.setSize(answer.getTemplateSize());
    updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
    _templateStoreDao.update(tmpltStoreVO.getId(),updateBuilder);
  }
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}",0.9478351591027648
106275,"protected Void createAsyncCallback(AsyncCallbackDispatcher<SwiftImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
  updateBuilder.setDownloadPercent(answer.getDownloadPct());
  updateBuilder.setDownloadState(answer.getDownloadStatus());
  updateBuilder.setLastUpdated(new Date());
  updateBuilder.setErrorString(answer.getErrorString());
  updateBuilder.setJobId(answer.getJobId());
  updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
  updateBuilder.setInstallPath(answer.getInstallPath());
  updateBuilder.setSize(answer.getTemplateSize());
  updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
  _templateStoreDao.update(store.getId(),updateBuilder);
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}","protected Void createAsyncCallback(AsyncCallbackDispatcher<SwiftImageStoreDriverImpl,DownloadAnswer> callback,CreateContext<CreateCmdResult> context){
  DownloadAnswer answer=callback.getResult();
  DataObject obj=context.data;
  DataStore store=obj.getDataStore();
  TemplateDataStoreVO tmpltStoreVO=_templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());
  if (tmpltStoreVO != null) {
    TemplateDataStoreVO updateBuilder=_templateStoreDao.createForUpdate();
    updateBuilder.setDownloadPercent(answer.getDownloadPct());
    updateBuilder.setDownloadState(answer.getDownloadStatus());
    updateBuilder.setLastUpdated(new Date());
    updateBuilder.setErrorString(answer.getErrorString());
    updateBuilder.setJobId(answer.getJobId());
    updateBuilder.setLocalDownloadPath(answer.getDownloadPath());
    updateBuilder.setInstallPath(answer.getInstallPath());
    updateBuilder.setSize(answer.getTemplateSize());
    updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());
    _templateStoreDao.update(tmpltStoreVO.getId(),updateBuilder);
  }
  AsyncCompletionCallback<CreateCmdResult> caller=context.getParentCallback();
  if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED || answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {
    CreateCmdResult result=new CreateCmdResult(null,null);
    result.setSucess(false);
    result.setResult(answer.getErrorString());
    caller.complete(result);
  }
 else   if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
    if (answer.getCheckSum() != null) {
      VMTemplateVO templateDaoBuilder=templateDao.createForUpdate();
      templateDaoBuilder.setChecksum(answer.getCheckSum());
      templateDao.update(obj.getId(),templateDaoBuilder);
    }
    CreateCmdResult result=new CreateCmdResult(null,null);
    caller.complete(result);
  }
  return null;
}",0.9479166666666666
106276,"@Override @DB public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId,String url,String username,String password,String deviceName,ServerResource resource,boolean gslbProvider,String gslbSitePublicIp,String gslbSitePrivateIp){
  PhysicalNetworkVO pNetwork=null;
  NetworkDevice ntwkDevice=NetworkDevice.getNetworkDevice(deviceName);
  long zoneId;
  if ((ntwkDevice == null) || (url == null) || (username == null)|| (resource == null)|| (password == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  zoneId=pNetwork.getDataCenterId();
  PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(),ntwkDevice.getNetworkServiceProvder());
  if (gslbProvider) {
    ExternalLoadBalancerDeviceVO zoneGslbProvider=_externalLoadBalancerDeviceDao.findGslbServiceProvider(physicalNetworkId,ntwkDevice.getNetworkServiceProvder());
    if (zoneGslbProvider != null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(),ntwkDevice.getNetworkServiceProvder());
    if (ntwkSvcProvider == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + ntwkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
    }
 else     if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
    }
  }
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new InvalidParameterValueException(e.getMessage());
  }
  String ipAddress=uri.getHost();
  Map hostDetails=new HashMap<String,String>();
  String hostName=getExternalLoadBalancerResourceGuid(pNetwork.getId(),deviceName,ipAddress);
  hostDetails.put(""String_Node_Str"",hostName);
  hostDetails.put(""String_Node_Str"",UUID.randomUUID().toString());
  hostDetails.put(""String_Node_Str"",String.valueOf(pNetwork.getDataCenterId()));
  hostDetails.put(""String_Node_Str"",ipAddress);
  hostDetails.put(""String_Node_Str"",String.valueOf(pNetwork.getId()));
  hostDetails.put(""String_Node_Str"",username);
  hostDetails.put(""String_Node_Str"",password);
  hostDetails.put(""String_Node_Str"",deviceName);
  Map<String,String> configParams=new HashMap<String,String>();
  UrlUtil.parseQueryParameters(uri.getQuery(),false,configParams);
  hostDetails.putAll(configParams);
  Transaction txn=Transaction.currentTxn();
  try {
    resource.configure(hostName,hostDetails);
    Host host=_resourceMgr.addHost(zoneId,resource,Host.Type.ExternalLoadBalancer,hostDetails);
    if (host != null) {
      boolean dedicatedUse=(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED) != null) ? Boolean.parseBoolean(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED)) : false;
      long capacity=NumbersUtil.parseLong(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_CAPACITY),0);
      if (capacity == 0) {
        capacity=_defaultLbCapacity;
      }
      ExternalLoadBalancerDeviceVO lbDeviceVO;
      txn.start();
      lbDeviceVO=new ExternalLoadBalancerDeviceVO(host.getId(),pNetwork.getId(),ntwkDevice.getNetworkServiceProvder(),deviceName,capacity,dedicatedUse,gslbProvider);
      if (gslbProvider) {
        lbDeviceVO.setGslbSitePrivateIP(gslbSitePublicIp);
        lbDeviceVO.setGslbSitePrivateIP(gslbSitePrivateIp);
      }
      _externalLoadBalancerDeviceDao.persist(lbDeviceVO);
      DetailVO hostDetail=new DetailVO(host.getId(),ApiConstants.LOAD_BALANCER_DEVICE_ID,String.valueOf(lbDeviceVO.getId()));
      _hostDetailDao.persist(hostDetail);
      txn.commit();
      return lbDeviceVO;
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    txn.rollback();
    throw new CloudRuntimeException(e.getMessage());
  }
}","@Override @DB public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId,String url,String username,String password,String deviceName,ServerResource resource,boolean gslbProvider,String gslbSitePublicIp,String gslbSitePrivateIp){
  PhysicalNetworkVO pNetwork=null;
  NetworkDevice ntwkDevice=NetworkDevice.getNetworkDevice(deviceName);
  long zoneId;
  if ((ntwkDevice == null) || (url == null) || (username == null)|| (resource == null)|| (password == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  zoneId=pNetwork.getDataCenterId();
  PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(),ntwkDevice.getNetworkServiceProvder());
  if (gslbProvider) {
    ExternalLoadBalancerDeviceVO zoneGslbProvider=_externalLoadBalancerDeviceDao.findGslbServiceProvider(physicalNetworkId,ntwkDevice.getNetworkServiceProvder());
    if (zoneGslbProvider != null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(),ntwkDevice.getNetworkServiceProvder());
    if (ntwkSvcProvider == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + ntwkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
    }
 else     if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
    }
  }
  URI uri;
  try {
    uri=new URI(url);
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new InvalidParameterValueException(e.getMessage());
  }
  String ipAddress=uri.getHost();
  Map hostDetails=new HashMap<String,String>();
  String hostName=getExternalLoadBalancerResourceGuid(pNetwork.getId(),deviceName,ipAddress);
  hostDetails.put(""String_Node_Str"",hostName);
  hostDetails.put(""String_Node_Str"",UUID.randomUUID().toString());
  hostDetails.put(""String_Node_Str"",String.valueOf(pNetwork.getDataCenterId()));
  hostDetails.put(""String_Node_Str"",ipAddress);
  hostDetails.put(""String_Node_Str"",String.valueOf(pNetwork.getId()));
  hostDetails.put(""String_Node_Str"",username);
  hostDetails.put(""String_Node_Str"",password);
  hostDetails.put(""String_Node_Str"",deviceName);
  Map<String,String> configParams=new HashMap<String,String>();
  UrlUtil.parseQueryParameters(uri.getQuery(),false,configParams);
  hostDetails.putAll(configParams);
  Transaction txn=Transaction.currentTxn();
  try {
    resource.configure(hostName,hostDetails);
    Host host=_resourceMgr.addHost(zoneId,resource,Host.Type.ExternalLoadBalancer,hostDetails);
    if (host != null) {
      boolean dedicatedUse=(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED) != null) ? Boolean.parseBoolean(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED)) : false;
      long capacity=NumbersUtil.parseLong(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_CAPACITY),0);
      if (capacity == 0) {
        capacity=_defaultLbCapacity;
      }
      ExternalLoadBalancerDeviceVO lbDeviceVO;
      txn.start();
      lbDeviceVO=new ExternalLoadBalancerDeviceVO(host.getId(),pNetwork.getId(),ntwkDevice.getNetworkServiceProvder(),deviceName,capacity,dedicatedUse,gslbProvider);
      if (gslbProvider) {
        lbDeviceVO.setGslbSitePublicIP(gslbSitePublicIp);
        lbDeviceVO.setGslbSitePrivateIP(gslbSitePrivateIp);
      }
      _externalLoadBalancerDeviceDao.persist(lbDeviceVO);
      DetailVO hostDetail=new DetailVO(host.getId(),ApiConstants.LOAD_BALANCER_DEVICE_ID,String.valueOf(lbDeviceVO.getId()));
      _hostDetailDao.persist(hostDetail);
      txn.commit();
      return lbDeviceVO;
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 catch (  ConfigurationException e) {
    txn.rollback();
    throw new CloudRuntimeException(e.getMessage());
  }
}",0.9987023711218592
106277,"@Override public Set<Long> getAvailableIps(Network network,String requestedIp){
  String[] cidr=network.getCidr().split(""String_Node_Str"");
  List<String> ips=_nicDao.listIpAddressInNetwork(network.getId());
  List<String> secondaryIps=_nicSecondaryIpDao.listSecondaryIpAddressInNetwork(network.getId());
  ips.addAll(secondaryIps);
  Set<Long> allPossibleIps=NetUtils.getAllIpsFromCidr(cidr[0],Integer.parseInt(cidr[1]));
  Set<Long> usedIps=new TreeSet<Long>();
  for (  String ip : ips) {
    if (requestedIp != null && requestedIp.equals(ip)) {
      s_logger.warn(""String_Node_Str"" + requestedIp + ""String_Node_Str""+ network);
      return null;
    }
    usedIps.add(NetUtils.ip2Long(ip));
  }
  if (usedIps.size() != 0) {
    allPossibleIps.removeAll(usedIps);
  }
  String gateway=network.getGateway();
  if ((gateway != null) && (allPossibleIps.contains(NetUtils.ip2Long(gateway))))   allPossibleIps.remove(NetUtils.ip2Long(gateway));
  return allPossibleIps;
}","@Override public Set<Long> getAvailableIps(Network network,String requestedIp){
  String[] cidr=network.getCidr().split(""String_Node_Str"");
  List<String> ips=_nicDao.listIpAddressInNetwork(network.getId());
  List<String> secondaryIps=_nicSecondaryIpDao.listSecondaryIpAddressInNetwork(network.getId());
  ips.addAll(secondaryIps);
  Set<Long> usedIps=new TreeSet<Long>();
  for (  String ip : ips) {
    if (requestedIp != null && requestedIp.equals(ip)) {
      s_logger.warn(""String_Node_Str"" + requestedIp + ""String_Node_Str""+ network);
      return null;
    }
    usedIps.add(NetUtils.ip2Long(ip));
  }
  Set<Long> allPossibleIps=NetUtils.getAllIpsFromCidr(cidr[0],Integer.parseInt(cidr[1]),usedIps);
  String gateway=network.getGateway();
  if ((gateway != null) && (allPossibleIps.contains(NetUtils.ip2Long(gateway))))   allPossibleIps.remove(NetUtils.ip2Long(gateway));
  return allPossibleIps;
}",0.5575692963752665
106278,"protected Set<Long> getAvailableIps(Network network,String requestedIp){
  String[] cidr=network.getCidr().split(""String_Node_Str"");
  List<String> ips=_nicDao.listIpAddressInNetwork(network.getId());
  Set<Long> allPossibleIps=NetUtils.getAllIpsFromCidr(cidr[0],Integer.parseInt(cidr[1]));
  Set<Long> usedIps=new TreeSet<Long>();
  for (  String ip : ips) {
    if (requestedIp != null && requestedIp.equals(ip)) {
      s_logger.warn(""String_Node_Str"" + requestedIp + ""String_Node_Str""+ network);
      return null;
    }
    usedIps.add(NetUtils.ip2Long(ip));
  }
  if (usedIps.size() != 0) {
    allPossibleIps.removeAll(usedIps);
  }
  String gateway=network.getGateway();
  if ((gateway != null) && (allPossibleIps.contains(NetUtils.ip2Long(gateway))))   allPossibleIps.remove(NetUtils.ip2Long(gateway));
  return allPossibleIps;
}","protected Set<Long> getAvailableIps(Network network,String requestedIp){
  String[] cidr=network.getCidr().split(""String_Node_Str"");
  List<String> ips=_nicDao.listIpAddressInNetwork(network.getId());
  Set<Long> usedIps=new TreeSet<Long>();
  for (  String ip : ips) {
    if (requestedIp != null && requestedIp.equals(ip)) {
      s_logger.warn(""String_Node_Str"" + requestedIp + ""String_Node_Str""+ network);
      return null;
    }
    usedIps.add(NetUtils.ip2Long(ip));
  }
  Set<Long> allPossibleIps=NetUtils.getAllIpsFromCidr(cidr[0],Integer.parseInt(cidr[1]),usedIps);
  String gateway=network.getGateway();
  if ((gateway != null) && (allPossibleIps.contains(NetUtils.ip2Long(gateway))))   allPossibleIps.remove(NetUtils.ip2Long(gateway));
  return allPossibleIps;
}",0.4851116625310174
106279,"public static Set<Long> getAllIpsFromCidr(String cidr,long size){
}","public static Set<Long> getAllIpsFromCidr(String cidr,long size,Set<Long> usedIps){
}",0.881578947368421
106280,"@Override public InterfaceDef plug(NicTO nic,String guestOsType) throws InternalErrorException, LibvirtException {
  s_logger.debug(""String_Node_Str"" + nic);
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  intf.setVirtualPortType(""String_Node_Str"");
  String vlanId=null;
  String logicalSwitchUuid=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    URI broadcastUri=nic.getBroadcastUri();
    vlanId=broadcastUri.getHost();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    logicalSwitchUuid=nic.getBroadcastUri().getSchemeSpecificPart();
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
      s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ logicalSwitchUuid);
      intf.setVirtualPortInterfaceId(nic.getUuid());
      String brName=(trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(""String_Node_Str"");
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType));
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork(_bridges.get(""String_Node_Str""));
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType));
  }
  return intf;
}","@Override public InterfaceDef plug(NicTO nic,String guestOsType) throws InternalErrorException, LibvirtException {
  s_logger.debug(""String_Node_Str"" + nic);
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  intf.setVirtualPortType(""String_Node_Str"");
  String vlanId=null;
  String logicalSwitchUuid=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    URI broadcastUri=nic.getBroadcastUri();
    vlanId=broadcastUri.getHost();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    logicalSwitchUuid=nic.getBroadcastUri().getSchemeSpecificPart();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {
    vlanId=NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
      s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ logicalSwitchUuid);
      intf.setVirtualPortInterfaceId(nic.getUuid());
      String brName=(trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(""String_Node_Str"");
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType));
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork(_bridges.get(""String_Node_Str""));
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType));
  }
  return intf;
}",0.9784615384615384
106281,"@Override public DataObject create(DataObject obj,DataStore dataStore){
  if (dataStore.getRole() == DataStoreRole.Primary) {
    if (obj.getType() == DataObjectType.TEMPLATE) {
      VMTemplateStoragePoolVO vo=new VMTemplateStoragePoolVO(dataStore.getId(),obj.getId());
      vo=templatePoolDao.persist(vo);
    }
 else     if (obj.getType() == DataObjectType.SNAPSHOT) {
      SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
      ss.setSnapshotId(obj.getId());
      ss.setDataStoreId(dataStore.getId());
      ss.setRole(dataStore.getRole());
      ss=snapshotDataStoreDao.persist(ss);
    }
  }
 else {
switch (obj.getType()) {
case TEMPLATE:
      TemplateDataStoreVO ts=new TemplateDataStoreVO();
    ts.setTemplateId(obj.getId());
  ts.setDataStoreId(dataStore.getId());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
  ts.setInstallPath(""String_Node_Str"" + templateDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
ts=templateDataStoreDao.persist(ts);
break;
case SNAPSHOT:
SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
ss.setSnapshotId(obj.getId());
ss.setDataStoreId(dataStore.getId());
ss.setRole(dataStore.getRole());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
ss.setInstallPath(""String_Node_Str"" + snapshotDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
ss=snapshotDataStoreDao.persist(ss);
break;
case VOLUME:
VolumeDataStoreVO vs=new VolumeDataStoreVO();
vs.setVolumeId(obj.getId());
vs.setDataStoreId(dataStore.getId());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
vs.setInstallPath(""String_Node_Str"" + volumeDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
vs=volumeDataStoreDao.persist(vs);
break;
}
}
return this.get(obj,dataStore);
}","@Override public DataObject create(DataObject obj,DataStore dataStore){
  if (dataStore.getRole() == DataStoreRole.Primary) {
    if (obj.getType() == DataObjectType.TEMPLATE) {
      VMTemplateStoragePoolVO vo=new VMTemplateStoragePoolVO(dataStore.getId(),obj.getId());
      vo=templatePoolDao.persist(vo);
    }
 else     if (obj.getType() == DataObjectType.SNAPSHOT) {
      SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
      ss.setSnapshotId(obj.getId());
      ss.setDataStoreId(dataStore.getId());
      ss.setRole(dataStore.getRole());
      ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
      ss=snapshotDataStoreDao.persist(ss);
    }
  }
 else {
switch (obj.getType()) {
case TEMPLATE:
      TemplateDataStoreVO ts=new TemplateDataStoreVO();
    ts.setTemplateId(obj.getId());
  ts.setDataStoreId(dataStore.getId());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
  ts.setInstallPath(""String_Node_Str"" + templateDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
ts.setState(ObjectInDataStoreStateMachine.State.Allocated);
ts=templateDataStoreDao.persist(ts);
break;
case SNAPSHOT:
SnapshotDataStoreVO ss=new SnapshotDataStoreVO();
ss.setSnapshotId(obj.getId());
ss.setDataStoreId(dataStore.getId());
ss.setRole(dataStore.getRole());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
ss.setInstallPath(""String_Node_Str"" + snapshotDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
ss.setState(ObjectInDataStoreStateMachine.State.Allocated);
ss=snapshotDataStoreDao.persist(ss);
break;
case VOLUME:
VolumeDataStoreVO vs=new VolumeDataStoreVO();
vs.setVolumeId(obj.getId());
vs.setDataStoreId(dataStore.getId());
if (dataStore.getRole() == DataStoreRole.ImageCache) {
vs.setInstallPath(""String_Node_Str"" + volumeDao.findById(obj.getId()).getAccountId() + ""String_Node_Str""+ obj.getId());
}
vs.setState(ObjectInDataStoreStateMachine.State.Allocated);
vs=volumeDataStoreDao.persist(vs);
break;
}
}
return this.get(obj,dataStore);
}",0.9352972119936876
106282,"public ImageStoreVO createImageStore(Map<String,Object> params,Map<String,String> details){
  ImageStoreVO store=imageStoreDao.findByName((String)params.get(""String_Node_Str""));
  if (store != null) {
    return store;
  }
  store=new ImageStoreVO();
  store.setName((String)params.get(""String_Node_Str""));
  store.setProtocol((String)params.get(""String_Node_Str""));
  store.setProviderName((String)params.get(""String_Node_Str""));
  store.setScope((ScopeType)params.get(""String_Node_Str""));
  store.setUuid((String)params.get(""String_Node_Str""));
  store.setUrl((String)params.get(""String_Node_Str""));
  store.setRole(DataStoreRole.getRole((String)params.get(""String_Node_Str"")));
  store=imageStoreDao.persist(store);
  if (details != null) {
    Iterator<String> keyIter=details.keySet().iterator();
    while (keyIter.hasNext()) {
      String key=keyIter.next();
      ImageStoreDetailVO detail=new ImageStoreDetailVO();
      detail.setStoreId(store.getId());
      detail.setName(key);
      detail.setValue(details.get(key));
      imageStoreDetailsDao.persist(detail);
    }
  }
  return store;
}","public ImageStoreVO createImageStore(Map<String,Object> params,Map<String,String> details){
  ImageStoreVO store=imageStoreDao.findByName((String)params.get(""String_Node_Str""));
  if (store != null) {
    return store;
  }
  store=new ImageStoreVO();
  store.setName((String)params.get(""String_Node_Str""));
  store.setProtocol((String)params.get(""String_Node_Str""));
  store.setProviderName((String)params.get(""String_Node_Str""));
  store.setScope((ScopeType)params.get(""String_Node_Str""));
  store.setUuid((String)params.get(""String_Node_Str""));
  store.setUrl((String)params.get(""String_Node_Str""));
  store.setRole((DataStoreRole)params.get(""String_Node_Str""));
  store=imageStoreDao.persist(store);
  if (details != null) {
    Iterator<String> keyIter=details.keySet().iterator();
    while (keyIter.hasNext()) {
      String key=keyIter.next();
      ImageStoreDetailVO detail=new ImageStoreDetailVO();
      detail.setStoreId(store.getId());
      detail.setName(key);
      detail.setValue(details.get(key));
      imageStoreDetailsDao.persist(detail);
    }
  }
  return store;
}",0.9653284671532848
106283,"@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ dcId);
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  if (dcId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",uri.getScheme().toLowerCase());
  imageStoreParameters.put(""String_Node_Str"",ScopeType.ZONE);
  imageStoreParameters.put(""String_Node_Str"",providerName);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters,details);
  return imageStoreMgr.getImageStore(ids.getId());
}","@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  DataStoreRole role=(DataStoreRole)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ dcId);
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  if (dcId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",uri.getScheme().toLowerCase());
  imageStoreParameters.put(""String_Node_Str"",ScopeType.ZONE);
  imageStoreParameters.put(""String_Node_Str"",providerName);
  imageStoreParameters.put(""String_Node_Str"",role);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters,details);
  return imageStoreMgr.getImageStore(ids.getId());
}",0.9653779572994806
106284,"@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  ScopeType scope=(ScopeType)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + dcId);
  try {
    _s3Mgr.verifyS3Fields(details);
  }
 catch (  DiscoveryException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  String protocol=""String_Node_Str"";
  String useHttps=details.get(ApiConstants.S3_HTTPS_FLAG);
  if (useHttps != null && Boolean.parseBoolean(useHttps)) {
    protocol=""String_Node_Str"";
  }
  imageStoreParameters.put(""String_Node_Str"",protocol);
  if (scope != null) {
    imageStoreParameters.put(""String_Node_Str"",scope);
  }
 else {
    imageStoreParameters.put(""String_Node_Str"",ScopeType.REGION);
  }
  imageStoreParameters.put(""String_Node_Str"",providerName);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters,details);
  return imageStoreMgr.getImageStore(ids.getId());
}","@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  ScopeType scope=(ScopeType)dsInfos.get(""String_Node_Str"");
  DataStoreRole role=(DataStoreRole)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + dcId);
  try {
    _s3Mgr.verifyS3Fields(details);
  }
 catch (  DiscoveryException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  String protocol=""String_Node_Str"";
  String useHttps=details.get(ApiConstants.S3_HTTPS_FLAG);
  if (useHttps != null && Boolean.parseBoolean(useHttps)) {
    protocol=""String_Node_Str"";
  }
  imageStoreParameters.put(""String_Node_Str"",protocol);
  if (scope != null) {
    imageStoreParameters.put(""String_Node_Str"",scope);
  }
 else {
    imageStoreParameters.put(""String_Node_Str"",ScopeType.REGION);
  }
  imageStoreParameters.put(""String_Node_Str"",providerName);
  imageStoreParameters.put(""String_Node_Str"",role);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters,details);
  return imageStoreMgr.getImageStore(ids.getId());
}",0.9588759424263192
106285,"@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  ScopeType scope=(ScopeType)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ dcId);
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",""String_Node_Str"");
  if (scope != null) {
    imageStoreParameters.put(""String_Node_Str"",scope);
  }
 else {
    imageStoreParameters.put(""String_Node_Str"",ScopeType.REGION);
  }
  imageStoreParameters.put(""String_Node_Str"",providerName);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters);
  return imageStoreMgr.getImageStore(ids.getId());
}","@Override public DataStore initialize(Map<String,Object> dsInfos){
  Long dcId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  ScopeType scope=(ScopeType)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  DataStoreRole role=(DataStoreRole)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ dcId);
  Map<String,Object> imageStoreParameters=new HashMap<String,Object>();
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",dcId);
  imageStoreParameters.put(""String_Node_Str"",url);
  imageStoreParameters.put(""String_Node_Str"",""String_Node_Str"");
  if (scope != null) {
    imageStoreParameters.put(""String_Node_Str"",scope);
  }
 else {
    imageStoreParameters.put(""String_Node_Str"",ScopeType.REGION);
  }
  imageStoreParameters.put(""String_Node_Str"",providerName);
  imageStoreParameters.put(""String_Node_Str"",role);
  ImageStoreVO ids=imageStoreHelper.createImageStore(imageStoreParameters,details);
  return imageStoreMgr.getImageStore(ids.getId());
}",0.9441048034934498
106286,"@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  String url=cmd.getUrl();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listAll();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=UserContext.current().getCaller();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone,dcId,""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  this._imageSrv.downloadBootstrapSysTemplate(store);
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}","@Override public ImageStore discoverImageStore(AddImageStoreCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  String providerName=cmd.getProviderName();
  DataStoreProvider storeProvider=_dataStoreProviderMgr.getDataStoreProvider(providerName);
  if (storeProvider == null) {
    storeProvider=_dataStoreProviderMgr.getDefaultImageDataStoreProvider();
    if (storeProvider == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + providerName);
    }
  }
  Long dcId=cmd.getZoneId();
  String url=cmd.getUrl();
  Map details=cmd.getDetails();
  ScopeType scopeType=ScopeType.ZONE;
  if (dcId == null) {
    scopeType=ScopeType.REGION;
  }
  if (!((ImageStoreProvider)storeProvider).isScopeSupported(scopeType)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + providerName + ""String_Node_Str""+ scopeType);
  }
  List<ImageStoreVO> imageStores=_imageStoreDao.listAll();
  for (  ImageStoreVO store : imageStores) {
    if (!store.getProviderName().equalsIgnoreCase(providerName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + store.getProviderName() + ""String_Node_Str"");
    }
  }
  if (dcId != null) {
    DataCenterVO zone=_dcDao.findById(dcId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
    }
    Account account=UserContext.current().getCaller();
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
      PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
      ex.addProxyObject(zone,dcId,""String_Node_Str"");
      throw ex;
    }
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",dcId);
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",cmd.getUrl());
  params.put(""String_Node_Str"",details);
  params.put(""String_Node_Str"",scopeType);
  params.put(""String_Node_Str"",storeProvider.getName());
  params.put(""String_Node_Str"",DataStoreRole.Image);
  DataStoreLifeCycle lifeCycle=storeProvider.getDataStoreLifeCycle();
  DataStore store=null;
  try {
    store=lifeCycle.initialize(params);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  if (((ImageStoreProvider)storeProvider).needDownloadSysTemplate()) {
    this._imageSrv.downloadBootstrapSysTemplate(store);
  }
  return (ImageStore)_dataStoreMgr.getDataStore(store.getId(),DataStoreRole.Image);
}",0.9848216045732308
106287,"@Override public void downloadVolumeToStorage(DataObject volume,DataStore store,String url,String checkSum,ImageFormat format,AsyncCompletionCallback<DownloadAnswer> callback){
  boolean downloadJobExists=false;
  VolumeDataStoreVO volumeHost=null;
  volumeHost=_volumeStoreDao.findByStoreVolume(store.getId(),volume.getId());
  if (volumeHost == null) {
    volumeHost=new VolumeDataStoreVO(store.getId(),volume.getId(),new Date(),0,VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED,null,null,""String_Node_Str"",null,url,checkSum,format);
    _volumeStoreDao.persist(volumeHost);
  }
 else   if ((volumeHost.getJobId() != null) && (volumeHost.getJobId().length() > 2)) {
    downloadJobExists=true;
  }
  Long maxVolumeSizeInBytes=getMaxVolumeSizeInBytes();
  if (volumeHost != null) {
    start();
    Volume vol=this._volumeDao.findById(volume.getId());
    DownloadCommand dcmd=new DownloadCommand(store.getTO(),vol,maxVolumeSizeInBytes,checkSum,url,format);
    dcmd.setProxy(getHttpProxy());
    if (downloadJobExists) {
      dcmd=new DownloadProgressCommand(dcmd,volumeHost.getJobId(),RequestType.GET_OR_RESTART);
      dcmd.setResourceType(ResourceType.VOLUME);
    }
    EndPoint ep=this._epSelector.select(volume);
    if (ep == null) {
      s_logger.warn(""String_Node_Str"" + store.getName());
      return;
    }
    DownloadListener dl=new DownloadListener(ep,store,volume,_timer,this,dcmd,callback);
    if (downloadJobExists) {
      dl.setCurrState(volumeHost.getDownloadState());
    }
    DownloadListener old=null;
synchronized (_listenerVolMap) {
      old=_listenerVolMap.put(volumeHost,dl);
    }
    if (old != null) {
      old.abandon();
    }
    try {
      ep.sendMessageAsyncWithListener(dcmd,dl);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ store.getName(),e);
      dl.setDisconnected();
      dl.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
  }
}","@Override public void downloadVolumeToStorage(DataObject volume,DataStore store,String url,String checkSum,ImageFormat format,AsyncCompletionCallback<DownloadAnswer> callback){
  boolean downloadJobExists=false;
  VolumeDataStoreVO volumeHost=null;
  volumeHost=_volumeStoreDao.findByStoreVolume(store.getId(),volume.getId());
  if (volumeHost == null) {
    volumeHost=new VolumeDataStoreVO(store.getId(),volume.getId(),new Date(),0,VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED,null,null,""String_Node_Str"",null,url,checkSum,format);
    _volumeStoreDao.persist(volumeHost);
  }
 else   if ((volumeHost.getJobId() != null) && (volumeHost.getJobId().length() > 2)) {
    downloadJobExists=true;
  }
  Long maxVolumeSizeInBytes=getMaxVolumeSizeInBytes();
  if (volumeHost != null) {
    start();
    Volume vol=this._volumeDao.findById(volume.getId());
    DownloadCommand dcmd=new DownloadCommand(store.getTO(),vol,maxVolumeSizeInBytes,checkSum,url,format);
    dcmd.setProxy(getHttpProxy());
    if (downloadJobExists) {
      dcmd=new DownloadProgressCommand(dcmd,volumeHost.getJobId(),RequestType.GET_OR_RESTART);
      dcmd.setResourceType(ResourceType.VOLUME);
    }
    EndPoint ep=this._epSelector.select(volume);
    if (ep == null) {
      s_logger.warn(""String_Node_Str"" + store.getName());
      return;
    }
    DownloadListener dl=new DownloadListener(ep,store,volume,_timer,this,dcmd,callback);
    ComponentContext.inject(dl);
    if (downloadJobExists) {
      dl.setCurrState(volumeHost.getDownloadState());
    }
    DownloadListener old=null;
synchronized (_listenerVolMap) {
      old=_listenerVolMap.put(volumeHost,dl);
    }
    if (old != null) {
      old.abandon();
    }
    try {
      ep.sendMessageAsyncWithListener(dcmd,dl);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ store.getName(),e);
      dl.setDisconnected();
      dl.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
  }
}",0.9916349809885932
106288,"@Override public boolean configure(String name,Map<String,Object> params){
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _sslCopy=Boolean.parseBoolean(configs.get(""String_Node_Str""));
  _proxy=configs.get(Config.SecStorageProxy.key());
  String cert=configs.get(""String_Node_Str"");
  if (!""String_Node_Str"".equalsIgnoreCase(cert)) {
    s_logger.warn(""String_Node_Str"");
  }
  _copyAuthPasswd=configs.get(""String_Node_Str"");
  _agentMgr.registerForHostEvents(new DownloadListener(this),true,false,false);
  ReadyTemplateStatesSearch=_vmTemplateStoreDao.createSearchBuilder();
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getState(),SearchCriteria.Op.EQ);
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getDestroyed(),SearchCriteria.Op.EQ);
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getDataStoreId(),SearchCriteria.Op.EQ);
  SearchBuilder<VMTemplateVO> TemplatesWithNoChecksumSearch=_templateDao.createSearchBuilder();
  TemplatesWithNoChecksumSearch.and(""String_Node_Str"",TemplatesWithNoChecksumSearch.entity().getChecksum(),SearchCriteria.Op.NULL);
  ReadyTemplateStatesSearch.join(""String_Node_Str"",TemplatesWithNoChecksumSearch,TemplatesWithNoChecksumSearch.entity().getId(),ReadyTemplateStatesSearch.entity().getTemplateId(),JoinBuilder.JoinType.INNER);
  TemplatesWithNoChecksumSearch.done();
  ReadyTemplateStatesSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params){
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _sslCopy=Boolean.parseBoolean(configs.get(""String_Node_Str""));
  _proxy=configs.get(Config.SecStorageProxy.key());
  String cert=configs.get(""String_Node_Str"");
  if (!""String_Node_Str"".equalsIgnoreCase(cert)) {
    s_logger.warn(""String_Node_Str"");
  }
  _copyAuthPasswd=configs.get(""String_Node_Str"");
  DownloadListener dl=new DownloadListener(this);
  ComponentContext.inject(dl);
  _agentMgr.registerForHostEvents(dl,true,false,false);
  ReadyTemplateStatesSearch=_vmTemplateStoreDao.createSearchBuilder();
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getState(),SearchCriteria.Op.EQ);
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getDestroyed(),SearchCriteria.Op.EQ);
  ReadyTemplateStatesSearch.and(""String_Node_Str"",ReadyTemplateStatesSearch.entity().getDataStoreId(),SearchCriteria.Op.EQ);
  SearchBuilder<VMTemplateVO> TemplatesWithNoChecksumSearch=_templateDao.createSearchBuilder();
  TemplatesWithNoChecksumSearch.and(""String_Node_Str"",TemplatesWithNoChecksumSearch.entity().getChecksum(),SearchCriteria.Op.NULL);
  ReadyTemplateStatesSearch.join(""String_Node_Str"",TemplatesWithNoChecksumSearch,TemplatesWithNoChecksumSearch.entity().getId(),ReadyTemplateStatesSearch.entity().getTemplateId(),JoinBuilder.JoinType.INNER);
  TemplatesWithNoChecksumSearch.done();
  ReadyTemplateStatesSearch.done();
  return true;
}",0.964736331284374
106289,"private void initiateTemplateDownload(DataObject template,DataStore store,AsyncCompletionCallback<DownloadAnswer> callback){
  boolean downloadJobExists=false;
  TemplateDataStoreVO vmTemplateStore=null;
  vmTemplateStore=_vmTemplateStoreDao.findByStoreTemplate(store.getId(),template.getId());
  if (vmTemplateStore == null) {
    vmTemplateStore=new TemplateDataStoreVO(store.getId(),template.getId(),new Date(),0,VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED,null,null,""String_Node_Str"",null,template.getUri());
    _vmTemplateStoreDao.persist(vmTemplateStore);
  }
 else   if ((vmTemplateStore.getJobId() != null) && (vmTemplateStore.getJobId().length() > 2)) {
    downloadJobExists=true;
  }
  Long maxTemplateSizeInBytes=getMaxTemplateSizeInBytes();
  if (vmTemplateStore != null) {
    start();
    VirtualMachineTemplate tmpl=this._templateDao.findById(template.getId());
    DownloadCommand dcmd=new DownloadCommand(store.getTO(),tmpl,maxTemplateSizeInBytes);
    dcmd.setProxy(getHttpProxy());
    if (downloadJobExists) {
      dcmd=new DownloadProgressCommand(dcmd,vmTemplateStore.getJobId(),RequestType.GET_OR_RESTART);
    }
    if (vmTemplateStore.isCopy()) {
      dcmd.setCreds(TemplateConstants.DEFAULT_HTTP_AUTH_USER,_copyAuthPasswd);
    }
    EndPoint ep=_epSelector.select(template);
    if (ep == null) {
      s_logger.warn(""String_Node_Str"" + store.getName());
      return;
    }
    DownloadListener dl=new DownloadListener(ep,store,template,_timer,this,dcmd,callback);
    if (downloadJobExists) {
      dl.setCurrState(vmTemplateStore.getDownloadState());
    }
    DownloadListener old=null;
synchronized (_listenerTemplateMap) {
      old=_listenerTemplateMap.put(vmTemplateStore,dl);
    }
    if (old != null) {
      old.abandon();
    }
    try {
      ep.sendMessageAsyncWithListener(dcmd,dl);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + template.getId() + ""String_Node_Str""+ store.getName(),e);
      dl.setDisconnected();
      dl.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
  }
}","private void initiateTemplateDownload(DataObject template,DataStore store,AsyncCompletionCallback<DownloadAnswer> callback){
  boolean downloadJobExists=false;
  TemplateDataStoreVO vmTemplateStore=null;
  vmTemplateStore=_vmTemplateStoreDao.findByStoreTemplate(store.getId(),template.getId());
  if (vmTemplateStore == null) {
    vmTemplateStore=new TemplateDataStoreVO(store.getId(),template.getId(),new Date(),0,VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED,null,null,""String_Node_Str"",null,template.getUri());
    _vmTemplateStoreDao.persist(vmTemplateStore);
  }
 else   if ((vmTemplateStore.getJobId() != null) && (vmTemplateStore.getJobId().length() > 2)) {
    downloadJobExists=true;
  }
  Long maxTemplateSizeInBytes=getMaxTemplateSizeInBytes();
  if (vmTemplateStore != null) {
    start();
    VirtualMachineTemplate tmpl=this._templateDao.findById(template.getId());
    DownloadCommand dcmd=new DownloadCommand(store.getTO(),tmpl,maxTemplateSizeInBytes);
    dcmd.setProxy(getHttpProxy());
    if (downloadJobExists) {
      dcmd=new DownloadProgressCommand(dcmd,vmTemplateStore.getJobId(),RequestType.GET_OR_RESTART);
    }
    if (vmTemplateStore.isCopy()) {
      dcmd.setCreds(TemplateConstants.DEFAULT_HTTP_AUTH_USER,_copyAuthPasswd);
    }
    EndPoint ep=_epSelector.select(template);
    if (ep == null) {
      s_logger.warn(""String_Node_Str"" + store.getName());
      return;
    }
    DownloadListener dl=new DownloadListener(ep,store,template,_timer,this,dcmd,callback);
    ComponentContext.inject(dl);
    if (downloadJobExists) {
      dl.setCurrState(vmTemplateStore.getDownloadState());
    }
    DownloadListener old=null;
synchronized (_listenerTemplateMap) {
      old=_listenerTemplateMap.put(vmTemplateStore,dl);
    }
    if (old != null) {
      old.abandon();
    }
    try {
      ep.sendMessageAsyncWithListener(dcmd,dl);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + template.getId() + ""String_Node_Str""+ store.getName(),e);
      dl.setDisconnected();
      dl.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
  }
}",0.9920768307322928
106290,"@Override public HostVO createHostVOForDirectConnectAgent(HostVO host,StartupCommand[] startup,ServerResource resource,Map<String,String> details,List<String> hostTags){
  return host;
}","@Override public HostVO createHostVOForDirectConnectAgent(HostVO host,StartupCommand[] startup,ServerResource resource,Map<String,String> details,List<String> hostTags){
  return null;
}",0.978494623655914
106291,"@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags,String zoneType){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"", lpjoin=""String_Node_Str"";
    String tagsJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if (((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) || (zoneType != null && zoneId != null)) {
      dataCenterJoin=""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      lpjoin=""String_Node_Str"";
    }
    if (tags != null && !tags.isEmpty()) {
      tagsJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin+ lpjoin+ tagsJoin;
    String whereClause=""String_Node_Str"";
    if ((listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) && !(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && templateFilter == TemplateFilter.all)) {
      whereClause+=""String_Node_Str"";
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=attr + ""String_Node_Str"" + relatedHypers+ ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.executable || templateFilter == TemplateFilter.shared || templateFilter == TemplateFilter.sharedexecutable) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      whereClause+=""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && !isIso) {
      return templateZonePairList;
    }
    if (tags != null && !tags.isEmpty()) {
      whereClause+=""String_Node_Str"";
      boolean first=true;
      for (      String key : tags.keySet()) {
        if (!first) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + key + ""String_Node_Str""+ tags.get(key)+ ""String_Node_Str"";
        first=false;
      }
      whereClause+=""String_Node_Str"";
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr,zoneType) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false,tags);
      List<VMTemplateVO> userIsos=userIsoSearch(false);
      int i=0;
      if (startIndex > userIsos.size()) {
        i=(int)(startIndex - userIsos.size());
      }
      for (; i < publicIsos.size(); i++) {
        if (templateZonePairList.size() >= pageSize) {
          break;
        }
 else {
          if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
            continue;
          }
 else           if (name != null && publicIsos.get(i).getName().contains(name)) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
            continue;
          }
 else           if (keyword == null && name == null) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          }
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}","@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags,String zoneType){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"", lpjoin=""String_Node_Str"";
    String tagsJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if ((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) {
      dataCenterJoin=""String_Node_Str"";
    }
    if (zoneType != null) {
      dataCenterJoin=""String_Node_Str"";
      dataCenterJoin+=""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      lpjoin=""String_Node_Str"";
    }
    if (tags != null && !tags.isEmpty()) {
      tagsJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin+ lpjoin+ tagsJoin;
    String whereClause=""String_Node_Str"";
    if ((listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) && !(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && templateFilter == TemplateFilter.all)) {
      whereClause+=""String_Node_Str"";
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (listProjectResourcesCriteria == ListProjectResourcesCriteria.SkipProjectResources) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=attr + ""String_Node_Str"" + relatedHypers+ ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.executable || templateFilter == TemplateFilter.shared || templateFilter == TemplateFilter.sharedexecutable) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      whereClause+=""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && !isIso) {
      return templateZonePairList;
    }
    if (tags != null && !tags.isEmpty()) {
      whereClause+=""String_Node_Str"";
      boolean first=true;
      for (      String key : tags.keySet()) {
        if (!first) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + key + ""String_Node_Str""+ tags.get(key)+ ""String_Node_Str"";
        first=false;
      }
      whereClause+=""String_Node_Str"";
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr,zoneType) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false,tags);
      List<VMTemplateVO> userIsos=userIsoSearch(false);
      int i=0;
      if (startIndex > userIsos.size()) {
        i=(int)(startIndex - userIsos.size());
      }
      for (; i < publicIsos.size(); i++) {
        if (templateZonePairList.size() >= pageSize) {
          break;
        }
 else {
          if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
            continue;
          }
 else           if (name != null && publicIsos.get(i).getName().contains(name)) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
            continue;
          }
 else           if (keyword == null && name == null) {
            templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          }
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}",0.9936180657830144
106292,"private String getExtrasWhere(TemplateFilter templateFilter,String name,String keyword,boolean isIso,Boolean bootable,HypervisorType hyperType,Long zoneId,boolean onlyReady,boolean showDomr,String zoneType){
  String sql=""String_Node_Str"";
  if (keyword != null) {
    sql+=""String_Node_Str"" + keyword + ""String_Node_Str"";
  }
 else   if (name != null) {
    sql+=""String_Node_Str"" + name + ""String_Node_Str"";
  }
  if (isIso) {
    sql+=""String_Node_Str"";
    if (!hyperType.equals(HypervisorType.None)) {
      sql+=""String_Node_Str"" + hyperType.toString() + ""String_Node_Str"";
    }
  }
 else {
    sql+=""String_Node_Str"";
    if (!hyperType.equals(HypervisorType.None)) {
      sql+=""String_Node_Str"" + hyperType.toString() + ""String_Node_Str"";
    }
  }
  if (bootable != null) {
    sql+=""String_Node_Str"" + bootable;
  }
  if (onlyReady) {
    sql+=""String_Node_Str"" + Status.DOWNLOADED.toString() + ""String_Node_Str""+ ""String_Node_Str"";
    if (zoneId != null) {
      sql+=""String_Node_Str"" + zoneId;
    }
  }
 else   if (zoneId != null) {
    sql+=""String_Node_Str"" + zoneId + ""String_Node_Str"";
    if (zoneType != null) {
      sql+=""String_Node_Str"" + zoneType;
    }
  }
 else {
    sql+=""String_Node_Str"";
  }
  if (!showDomr) {
    sql+=""String_Node_Str"" + Storage.TemplateType.SYSTEM.toString() + ""String_Node_Str"";
  }
  sql+=""String_Node_Str"";
  return sql;
}","private String getExtrasWhere(TemplateFilter templateFilter,String name,String keyword,boolean isIso,Boolean bootable,HypervisorType hyperType,Long zoneId,boolean onlyReady,boolean showDomr,String zoneType){
  String sql=""String_Node_Str"";
  if (keyword != null) {
    sql+=""String_Node_Str"" + keyword + ""String_Node_Str"";
  }
 else   if (name != null) {
    sql+=""String_Node_Str"" + name + ""String_Node_Str"";
  }
  if (isIso) {
    sql+=""String_Node_Str"";
    if (!hyperType.equals(HypervisorType.None)) {
      sql+=""String_Node_Str"" + hyperType.toString() + ""String_Node_Str"";
    }
  }
 else {
    sql+=""String_Node_Str"";
    if (!hyperType.equals(HypervisorType.None)) {
      sql+=""String_Node_Str"" + hyperType.toString() + ""String_Node_Str"";
    }
  }
  if (bootable != null) {
    sql+=""String_Node_Str"" + bootable;
  }
  if (onlyReady) {
    sql+=""String_Node_Str"" + Status.DOWNLOADED.toString() + ""String_Node_Str""+ ""String_Node_Str"";
    if (zoneId != null) {
      sql+=""String_Node_Str"" + zoneId;
    }
  }
 else   if (zoneId != null) {
    sql+=""String_Node_Str"" + zoneId + ""String_Node_Str"";
  }
 else {
    sql+=""String_Node_Str"";
  }
  if (zoneType != null) {
    sql+=""String_Node_Str"" + zoneType + ""String_Node_Str"";
  }
  if (!showDomr) {
    sql+=""String_Node_Str"" + Storage.TemplateType.SYSTEM.toString() + ""String_Node_Str"";
  }
  sql+=""String_Node_Str"";
  return sql;
}",0.9725829725829724
106293,"protected RemoteHostEndPoint(){
  executor=Executors.newScheduledThreadPool(10);
}","public RemoteHostEndPoint(){
  executor=Executors.newScheduledThreadPool(10);
}",0.9316770186335404
106294,"@Override public DataStore findStore(long objId,DataObjectType type,DataStoreRole role){
  DataStore store=null;
  if (role == DataStoreRole.Image) {
    DataObjectInStore vo=null;
switch (type) {
case TEMPLATE:
      vo=templateDataStoreDao.findByTemplate(objId);
case SNAPSHOT:
    vo=snapshotDataStoreDao.findBySnapshot(objId,role);
case VOLUME:
  vo=volumeDataStoreDao.findByVolume(objId);
}
if (vo != null) {
store=this.storeMgr.getDataStore(vo.getDataStoreId(),DataStoreRole.Image);
}
}
return store;
}","@Override public DataStore findStore(long objId,DataObjectType type,DataStoreRole role){
  DataStore store=null;
  if (role == DataStoreRole.Image) {
    DataObjectInStore vo=null;
switch (type) {
case TEMPLATE:
      vo=templateDataStoreDao.findByTemplate(objId);
    break;
case SNAPSHOT:
  vo=snapshotDataStoreDao.findBySnapshot(objId,role);
break;
case VOLUME:
vo=volumeDataStoreDao.findByVolume(objId);
break;
}
if (vo != null) {
store=this.storeMgr.getDataStore(vo.getDataStoreId(),DataStoreRole.Image);
}
}
return store;
}",0.9720347155255544
106295,"@Override public DataObjectInStore findObject(long objId,DataObjectType type,long dataStoreId,DataStoreRole role){
  DataObjectInStore vo=null;
  if (role == DataStoreRole.Image || role == DataStoreRole.ImageCache) {
switch (type) {
case TEMPLATE:
      vo=templateDataStoreDao.findByStoreTemplate(dataStoreId,objId);
case SNAPSHOT:
    vo=snapshotDataStoreDao.findByStoreSnapshot(role,dataStoreId,objId);
case VOLUME:
  vo=volumeDataStoreDao.findByStoreVolume(dataStoreId,objId);
}
}
 else if (type == DataObjectType.TEMPLATE && role == DataStoreRole.Primary) {
vo=templatePoolDao.findByPoolTemplate(dataStoreId,objId);
}
 else {
s_logger.debug(""String_Node_Str"" + type + ""String_Node_Str""+ role);
throw new CloudRuntimeException(""String_Node_Str"" + type + ""String_Node_Str""+ role);
}
return vo;
}","@Override public DataObjectInStore findObject(long objId,DataObjectType type,long dataStoreId,DataStoreRole role){
  DataObjectInStore vo=null;
  if (role == DataStoreRole.Image || role == DataStoreRole.ImageCache) {
switch (type) {
case TEMPLATE:
      vo=templateDataStoreDao.findByStoreTemplate(dataStoreId,objId);
    break;
case SNAPSHOT:
  vo=snapshotDataStoreDao.findByStoreSnapshot(role,dataStoreId,objId);
break;
case VOLUME:
vo=volumeDataStoreDao.findByStoreVolume(dataStoreId,objId);
break;
}
}
 else if (type == DataObjectType.TEMPLATE && role == DataStoreRole.Primary) {
vo=templatePoolDao.findByPoolTemplate(dataStoreId,objId);
}
 else {
s_logger.debug(""String_Node_Str"" + type + ""String_Node_Str""+ role);
throw new CloudRuntimeException(""String_Node_Str"" + type + ""String_Node_Str""+ role);
}
return vo;
}",0.9820655534941248
106296,"@Override public boolean update(DataObject data,Event event) throws NoTransitionException {
  DataObjectInStore obj=this.findObject(data,data.getDataStore());
  if (obj == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + data);
  }
  if (data.getDataStore().getRole() == DataStoreRole.Image || data.getDataStore().getRole() == DataStoreRole.ImageCache) {
switch (data.getType()) {
case TEMPLATE:
      this.stateMachines.transitTo(obj,event,null,templateDataStoreDao);
case SNAPSHOT:
    this.stateMachines.transitTo(obj,event,null,snapshotDataStoreDao);
case VOLUME:
  this.stateMachines.transitTo(obj,event,null,volumeDataStoreDao);
}
}
 else if (data.getType() == DataObjectType.TEMPLATE && data.getDataStore().getRole() == DataStoreRole.Primary) {
this.stateMachines.transitTo(obj,event,null,templatePoolDao);
}
 else {
throw new CloudRuntimeException(""String_Node_Str"" + data.getType() + ""String_Node_Str""+ data.getDataStore().getRole());
}
return true;
}","@Override public boolean update(DataObject data,Event event) throws NoTransitionException {
  DataObjectInStore obj=this.findObject(data,data.getDataStore());
  if (obj == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + data);
  }
  if (data.getDataStore().getRole() == DataStoreRole.Image || data.getDataStore().getRole() == DataStoreRole.ImageCache) {
switch (data.getType()) {
case TEMPLATE:
      this.stateMachines.transitTo(obj,event,null,templateDataStoreDao);
    break;
case SNAPSHOT:
  this.stateMachines.transitTo(obj,event,null,snapshotDataStoreDao);
break;
case VOLUME:
this.stateMachines.transitTo(obj,event,null,volumeDataStoreDao);
break;
}
}
 else if (data.getType() == DataObjectType.TEMPLATE && data.getDataStore().getRole() == DataStoreRole.Primary) {
this.stateMachines.transitTo(obj,event,null,templatePoolDao);
}
 else {
throw new CloudRuntimeException(""String_Node_Str"" + data.getType() + ""String_Node_Str""+ data.getDataStore().getRole());
}
return true;
}",0.9852866565195332
106297,"@Override public DataStoreTO getTO(){
  return getDriver().getStoreTO(this);
}","@Override public DataStoreTO getTO(){
  DataStoreTO to=getDriver().getStoreTO(this);
  if (to == null) {
    PrimaryDataStoreTO primaryTO=new PrimaryDataStoreTO(this);
    return primaryTO;
  }
  return to;
}",0.4965034965034965
106298,"@Override public Answer ListTemplates(ListTemplateCommand cmd){
  Transaction txn=Transaction.open(Transaction.SIMULATOR_DB);
  MockSecStorageVO storage=null;
  try {
    txn.start();
    storage=_mockSecStorageDao.findByUrl(cmd.getSecUrl());
    if (storage == null) {
      return new Answer(cmd,false,""String_Node_Str"");
    }
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"" + cmd.getSecUrl(),ex);
  }
 finally {
    txn.close();
    txn=Transaction.open(Transaction.CLOUD_DB);
    txn.close();
  }
  txn=Transaction.open(Transaction.SIMULATOR_DB);
  try {
    txn.start();
    List<MockVolumeVO> templates=_mockVolumeDao.findByStorageIdAndType(storage.getId(),MockVolumeType.TEMPLATE);
    Map<String,TemplateProp> templateInfos=new HashMap<String,TemplateProp>();
    for (    MockVolumeVO template : templates) {
      templateInfos.put(template.getName(),new TemplateProp(template.getName(),template.getPath().replaceAll(storage.getMountPoint(),""String_Node_Str""),template.getSize(),template.getSize(),true,false));
    }
    txn.commit();
    return new ListTemplateAnswer(cmd.getSecUrl(),templateInfos);
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"" + storage.getId(),ex);
  }
 finally {
    txn.close();
    txn=Transaction.open(Transaction.CLOUD_DB);
    txn.close();
  }
}","@Override public Answer ListTemplates(ListTemplateCommand cmd){
  DataStoreTO store=cmd.getDataStore();
  if (!(store instanceof NfsTO)) {
    return new Answer(cmd,false,""String_Node_Str"" + store);
  }
  Transaction txn=Transaction.open(Transaction.SIMULATOR_DB);
  MockSecStorageVO storage=null;
  String nfsUrl=((NfsTO)cmd.getDataStore()).getUrl();
  try {
    txn.start();
    storage=_mockSecStorageDao.findByUrl(nfsUrl);
    if (storage == null) {
      return new Answer(cmd,false,""String_Node_Str"");
    }
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"" + nfsUrl,ex);
  }
 finally {
    txn.close();
    txn=Transaction.open(Transaction.CLOUD_DB);
    txn.close();
  }
  txn=Transaction.open(Transaction.SIMULATOR_DB);
  try {
    txn.start();
    List<MockVolumeVO> templates=_mockVolumeDao.findByStorageIdAndType(storage.getId(),MockVolumeType.TEMPLATE);
    Map<String,TemplateProp> templateInfos=new HashMap<String,TemplateProp>();
    for (    MockVolumeVO template : templates) {
      templateInfos.put(template.getName(),new TemplateProp(template.getName(),template.getPath().replaceAll(storage.getMountPoint(),""String_Node_Str""),template.getSize(),template.getSize(),true,false));
    }
    txn.commit();
    return new ListTemplateAnswer(nfsUrl,templateInfos);
  }
 catch (  Exception ex) {
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"" + storage.getId(),ex);
  }
 finally {
    txn.close();
    txn=Transaction.open(Transaction.CLOUD_DB);
    txn.close();
  }
}",0.9206137424949966
106299,"private boolean validateDiscoveredHosts(VmwareContext context,ManagedObjectReference morCluster,List<ManagedObjectReference> morHosts) throws Exception {
  if (morCluster == null) {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (morParent.getProtocol().equalsIgnoreCase(""String_Node_Str""))       return false;
    }
  }
 else {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (!morParent.getProtocol().equalsIgnoreCase(""String_Node_Str""))       return false;
      if (!morParent.getValue().equals(morCluster.getValue()))       return false;
    }
  }
  return true;
}","private boolean validateDiscoveredHosts(VmwareContext context,ManagedObjectReference morCluster,List<ManagedObjectReference> morHosts) throws Exception {
  if (morCluster == null) {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
    }
  }
 else {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (!morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
      if (!morParent.getValue().equals(morCluster.getValue()))       return false;
    }
  }
  return true;
}",0.986206896551724
106300,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts != null && hosts.size() > 0) {
    int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(hosts.get(0).getHypervisorType(),hosts.get(0).getHypervisorVersion());
    if (hosts.size() >= maxHostsPerCluster) {
      String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ hosts.size()+ ""String_Node_Str""+ maxHostsPerCluster;
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  VirtualSwitchType defaultVirtualSwitchType=VirtualSwitchType.StandardVirtualSwitch;
  String paramGuestVswitchType=null;
  String paramGuestVswitchName=null;
  String paramPublicVswitchType=null;
  String paramPublicVswitchName=null;
  VmwareTrafficLabel guestTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Guest);
  VmwareTrafficLabel publicTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Public);
  Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
  DataCenterVO zone=_dcDao.findById(dcId);
  NetworkType zoneType=zone.getNetworkType();
  _readGlobalConfigParameters();
  if (useDVS) {
    paramGuestVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_GUEST_TRAFFIC);
    paramGuestVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_GUEST_TRAFFIC);
    paramPublicVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_PUBLIC_TRAFFIC);
    paramPublicVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_PUBLIC_TRAFFIC);
    defaultVirtualSwitchType=getDefaultVirtualSwitchType();
  }
  guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
  guestTrafficLabelObj=getTrafficInfo(TrafficType.Guest,guestTrafficLabel,defaultVirtualSwitchType,paramGuestVswitchType,paramGuestVswitchName,clusterId);
  if (zoneType == NetworkType.Advanced) {
    publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
    publicTrafficLabelObj=getTrafficInfo(TrafficType.Public,publicTrafficLabel,defaultVirtualSwitchType,paramPublicVswitchType,paramPublicVswitchName,clusterId);
    List<? extends PhysicalNetwork> pNetworkListGuestTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Guest);
    List<? extends PhysicalNetwork> pNetworkListPublicTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Public);
    PhysicalNetwork pNetworkPublic=pNetworkListPublicTraffic.get(0);
    if (pNetworkListGuestTraffic.contains(pNetworkPublic)) {
      if (publicTrafficLabelObj.getVirtualSwitchType() != guestTrafficLabelObj.getVirtualSwitchType()) {
        String msg=""String_Node_Str"" + pNetworkPublic + ""String_Node_Str""+ ""String_Node_Str"";
        s_logger.error(msg);
        throw new InvalidParameterValueException(msg);
      }
    }
  }
 else {
    if (guestTrafficLabelObj.getVirtualSwitchType() != VirtualSwitchType.StandardVirtualSwitch) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  if (nexusDVS) {
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    String vsmIp=_urlParams.get(""String_Node_Str"");
    String vsmUser=_urlParams.get(""String_Node_Str"");
    String vsmPassword=_urlParams.get(""String_Node_Str"");
    String clusterName=cluster.getName();
    try {
      _nexusElement.validateVsmCluster(vsmIp,vsmUser,vsmPassword,clusterId,clusterName);
    }
 catch (    ResourceInUseException ex) {
      DiscoveryException discEx=new DiscoveryException(ex.getLocalizedMessage() + ""String_Node_Str"" + ex.getResourceName());
      throw discEx;
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (nexusDVS) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath()));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath()));
      return null;
    }
    ManagedObjectReference morCluster=null;
    clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath()));
      if (morCluster == null || !morCluster.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.isEnabled() != null && dasConfig.isEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getProtocol() + ""String_Node_Str"" + morHost.getValue()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      params.put(""String_Node_Str"",guestTrafficLabelObj);
      params.put(""String_Node_Str"",publicTrafficLabelObj);
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
    _clusterDao.update(clusterId,cluster);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost());
    return null;
  }
 finally {
    if (context != null)     context.close();
  }
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts != null && hosts.size() > 0) {
    int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(hosts.get(0).getHypervisorType(),hosts.get(0).getHypervisorVersion());
    if (hosts.size() >= maxHostsPerCluster) {
      String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ hosts.size()+ ""String_Node_Str""+ maxHostsPerCluster;
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  VirtualSwitchType defaultVirtualSwitchType=VirtualSwitchType.StandardVirtualSwitch;
  String paramGuestVswitchType=null;
  String paramGuestVswitchName=null;
  String paramPublicVswitchType=null;
  String paramPublicVswitchName=null;
  VmwareTrafficLabel guestTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Guest);
  VmwareTrafficLabel publicTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Public);
  Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
  DataCenterVO zone=_dcDao.findById(dcId);
  NetworkType zoneType=zone.getNetworkType();
  _readGlobalConfigParameters();
  if (useDVS) {
    paramGuestVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_GUEST_TRAFFIC);
    paramGuestVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_GUEST_TRAFFIC);
    paramPublicVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_PUBLIC_TRAFFIC);
    paramPublicVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_PUBLIC_TRAFFIC);
    defaultVirtualSwitchType=getDefaultVirtualSwitchType();
  }
  guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
  guestTrafficLabelObj=getTrafficInfo(TrafficType.Guest,guestTrafficLabel,defaultVirtualSwitchType,paramGuestVswitchType,paramGuestVswitchName,clusterId);
  if (zoneType == NetworkType.Advanced) {
    publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
    publicTrafficLabelObj=getTrafficInfo(TrafficType.Public,publicTrafficLabel,defaultVirtualSwitchType,paramPublicVswitchType,paramPublicVswitchName,clusterId);
    List<? extends PhysicalNetwork> pNetworkListGuestTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Guest);
    List<? extends PhysicalNetwork> pNetworkListPublicTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Public);
    PhysicalNetwork pNetworkPublic=pNetworkListPublicTraffic.get(0);
    if (pNetworkListGuestTraffic.contains(pNetworkPublic)) {
      if (publicTrafficLabelObj.getVirtualSwitchType() != guestTrafficLabelObj.getVirtualSwitchType()) {
        String msg=""String_Node_Str"" + pNetworkPublic + ""String_Node_Str""+ ""String_Node_Str"";
        s_logger.error(msg);
        throw new InvalidParameterValueException(msg);
      }
    }
  }
 else {
    if (guestTrafficLabelObj.getVirtualSwitchType() != VirtualSwitchType.StandardVirtualSwitch) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  if (nexusDVS) {
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    String vsmIp=_urlParams.get(""String_Node_Str"");
    String vsmUser=_urlParams.get(""String_Node_Str"");
    String vsmPassword=_urlParams.get(""String_Node_Str"");
    String clusterName=cluster.getName();
    try {
      _nexusElement.validateVsmCluster(vsmIp,vsmUser,vsmPassword,clusterId,clusterName);
    }
 catch (    ResourceInUseException ex) {
      DiscoveryException discEx=new DiscoveryException(ex.getLocalizedMessage() + ""String_Node_Str"" + ex.getResourceName());
      throw discEx;
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (nexusDVS) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath()));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath()));
      return null;
    }
    ManagedObjectReference morCluster=null;
    clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath()));
      if (morCluster == null || !morCluster.getType().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.isEnabled() != null && dasConfig.isEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getType() + ""String_Node_Str"" + morHost.getValue()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      params.put(""String_Node_Str"",guestTrafficLabelObj);
      params.put(""String_Node_Str"",publicTrafficLabelObj);
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
    _clusterDao.update(clusterId,cluster);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost());
    return null;
  }
 finally {
    if (context != null)     context.close();
  }
}",0.9986865148861648
106301,"@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  ManagedObjectReference mor=null;
  if (serviceContext != null)   mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getProtocol().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getProtocol().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.size() > 0) {
        AboutInfo about=(AboutInfo)(serviceContext.getVimClient().getDynamicProperty(hosts.get(0),""String_Node_Str""));
        String version=about.getApiVersion();
        int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(HypervisorType.VMware,version);
        if (hosts.size() > maxHostsPerCluster) {
          String msg=""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ maxHostsPerCluster;
          s_logger.error(msg);
          throw new DiscoveredWithErrorException(msg);
        }
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getProtocol().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getProtocol() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}","@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  ManagedObjectReference mor=null;
  if (serviceContext != null)   mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.size() > 0) {
        AboutInfo about=(AboutInfo)(serviceContext.getVimClient().getDynamicProperty(hosts.get(0),""String_Node_Str""));
        String version=about.getApiVersion();
        int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(HypervisorType.VMware,version);
        if (hosts.size() > maxHostsPerCluster) {
          String msg=""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ maxHostsPerCluster;
          s_logger.error(msg);
          throw new DiscoveredWithErrorException(msg);
        }
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}",0.9905660377358492
106302,"protected OptionValue[] configureVnc(OptionValue[] optionsToMerge,VmwareHypervisorHost hyperHost,String vmName,String vncPassword,String keyboardLayout) throws Exception {
  VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(vmName);
  VmwareManager mgr=hyperHost.getContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  if (!mgr.beginExclusiveOperation(600))   throw new Exception(""String_Node_Str"");
  try {
    int maxVncPorts=64;
    int vncPort=0;
    Random random=new Random();
    HostMO vmOwnerHost=vmMo.getRunningHost();
    ManagedObjectReference morParent=vmOwnerHost.getParentMor();
    HashMap<String,Integer> portInfo;
    if (morParent.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      ClusterMO clusterMo=new ClusterMO(vmOwnerHost.getContext(),morParent);
      portInfo=clusterMo.getVmVncPortsOnCluster();
    }
 else {
      portInfo=vmOwnerHost.getVmVncPortsOnHost();
    }
    Collection<Integer> existingPorts=portInfo.values();
    int val=random.nextInt(maxVncPorts);
    int startVal=val;
    do {
      if (!existingPorts.contains(5900 + val)) {
        vncPort=5900 + val;
        break;
      }
      val=(++val) % maxVncPorts;
    }
 while (val != startVal);
    if (vncPort == 0) {
      s_logger.info(""String_Node_Str"");
      Pair<Integer,Integer> additionalRange=mgr.getAddiionalVncPortRange();
      maxVncPorts=additionalRange.second();
      val=random.nextInt(maxVncPorts);
      startVal=val;
      do {
        if (!existingPorts.contains(additionalRange.first() + val)) {
          vncPort=additionalRange.first() + val;
          break;
        }
        val=(++val) % maxVncPorts;
      }
 while (val != startVal);
    }
    if (vncPort == 0) {
      throw new Exception(""String_Node_Str"");
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmName + ""String_Node_Str""+ vncPort+ ""String_Node_Str""+ vmOwnerHost.getHyperHostName());
    }
    return VmwareHelper.composeVncOptions(optionsToMerge,true,vncPassword,vncPort,keyboardLayout);
  }
  finally {
    try {
      mgr.endExclusiveOperation();
    }
 catch (    Throwable e) {
      assert(false);
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","protected OptionValue[] configureVnc(OptionValue[] optionsToMerge,VmwareHypervisorHost hyperHost,String vmName,String vncPassword,String keyboardLayout) throws Exception {
  VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(vmName);
  VmwareManager mgr=hyperHost.getContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  if (!mgr.beginExclusiveOperation(600))   throw new Exception(""String_Node_Str"");
  try {
    int maxVncPorts=64;
    int vncPort=0;
    Random random=new Random();
    HostMO vmOwnerHost=vmMo.getRunningHost();
    ManagedObjectReference morParent=vmOwnerHost.getParentMor();
    HashMap<String,Integer> portInfo;
    if (morParent.getType().equalsIgnoreCase(""String_Node_Str"")) {
      ClusterMO clusterMo=new ClusterMO(vmOwnerHost.getContext(),morParent);
      portInfo=clusterMo.getVmVncPortsOnCluster();
    }
 else {
      portInfo=vmOwnerHost.getVmVncPortsOnHost();
    }
    Collection<Integer> existingPorts=portInfo.values();
    int val=random.nextInt(maxVncPorts);
    int startVal=val;
    do {
      if (!existingPorts.contains(5900 + val)) {
        vncPort=5900 + val;
        break;
      }
      val=(++val) % maxVncPorts;
    }
 while (val != startVal);
    if (vncPort == 0) {
      s_logger.info(""String_Node_Str"");
      Pair<Integer,Integer> additionalRange=mgr.getAddiionalVncPortRange();
      maxVncPorts=additionalRange.second();
      val=random.nextInt(maxVncPorts);
      startVal=val;
      do {
        if (!existingPorts.contains(additionalRange.first() + val)) {
          vncPort=additionalRange.first() + val;
          break;
        }
        val=(++val) % maxVncPorts;
      }
 while (val != startVal);
    }
    if (vncPort == 0) {
      throw new Exception(""String_Node_Str"");
    }
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmName + ""String_Node_Str""+ vncPort+ ""String_Node_Str""+ vmOwnerHost.getHyperHostName());
    }
    return VmwareHelper.composeVncOptions(optionsToMerge,true,vncPassword,vncPort,keyboardLayout);
  }
  finally {
    try {
      mgr.endExclusiveOperation();
    }
 catch (    Throwable e) {
      assert(false);
      s_logger.error(""String_Node_Str"",e);
    }
  }
}",0.9972627737226276
106303,"@Override public VmwareHypervisorHost getHyperHost(VmwareContext context,Command cmd){
  if (_morHyperHost.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    return new HostMO(context,_morHyperHost);
  }
  return new ClusterMO(context,_morHyperHost);
}","@Override public VmwareHypervisorHost getHyperHost(VmwareContext context,Command cmd){
  if (_morHyperHost.getType().equalsIgnoreCase(""String_Node_Str"")) {
    return new HostMO(context,_morHyperHost);
  }
  return new ClusterMO(context,_morHyperHost);
}",0.9765625
106304,"@Override public VmwareHypervisorHost getHyperHost(VmwareContext context,Command cmd){
  String guid=cmd.getContextParam(""String_Node_Str"");
  assert(guid != null);
  String[] tokens=guid.split(""String_Node_Str"");
  assert(tokens != null && tokens.length == 2);
  ManagedObjectReference morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  if (hostTokens == null || hostTokens.length != 2) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  morHyperHost.setType(hostTokens[0]);
  morHyperHost.setValue(hostTokens[1]);
  if (morHyperHost.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    HostMO hostMo=new HostMO(context,morHyperHost);
    try {
      ManagedObjectReference mor=hostMo.getHyperHostCluster();
      ClusterMO clusterMo=new ClusterMO(hostMo.getContext(),mor);
      List<Pair<ManagedObjectReference,String>> hostsInCluster=clusterMo.getClusterHosts();
      for (      Pair<ManagedObjectReference,String> hostPair : hostsInCluster) {
        HostMO hostIteratorMo=new HostMO(hostMo.getContext(),hostPair.first());
        VmwareHypervisorHostNetworkSummary netSummary=hostIteratorMo.getHyperHostNetworkSummary(hostIteratorMo.getHostType() == VmwareHostType.ESXi ? cmd.getContextParam(""String_Node_Str"") : cmd.getContextParam(""String_Node_Str""));
        _resource.ensureOutgoingRuleForAddress(netSummary.getHostIp());
        s_logger.info(""String_Node_Str"" + netSummary.getHostIp());
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString() + ""String_Node_Str""+ hostTokens[0]+ ""String_Node_Str""+ hostTokens[1]);
    }
    return hostMo;
  }
  assert(false);
  return new ClusterMO(context,morHyperHost);
}","@Override public VmwareHypervisorHost getHyperHost(VmwareContext context,Command cmd){
  String guid=cmd.getContextParam(""String_Node_Str"");
  assert(guid != null);
  String[] tokens=guid.split(""String_Node_Str"");
  assert(tokens != null && tokens.length == 2);
  ManagedObjectReference morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  if (hostTokens == null || hostTokens.length != 2) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  morHyperHost.setType(hostTokens[0]);
  morHyperHost.setValue(hostTokens[1]);
  if (morHyperHost.getType().equalsIgnoreCase(""String_Node_Str"")) {
    HostMO hostMo=new HostMO(context,morHyperHost);
    try {
      ManagedObjectReference mor=hostMo.getHyperHostCluster();
      ClusterMO clusterMo=new ClusterMO(hostMo.getContext(),mor);
      List<Pair<ManagedObjectReference,String>> hostsInCluster=clusterMo.getClusterHosts();
      for (      Pair<ManagedObjectReference,String> hostPair : hostsInCluster) {
        HostMO hostIteratorMo=new HostMO(hostMo.getContext(),hostPair.first());
        VmwareHypervisorHostNetworkSummary netSummary=hostIteratorMo.getHyperHostNetworkSummary(hostIteratorMo.getHostType() == VmwareHostType.ESXi ? cmd.getContextParam(""String_Node_Str"") : cmd.getContextParam(""String_Node_Str""));
        _resource.ensureOutgoingRuleForAddress(netSummary.getHostIp());
        s_logger.info(""String_Node_Str"" + netSummary.getHostIp());
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString() + ""String_Node_Str""+ hostTokens[0]+ ""String_Node_Str""+ hostTokens[1]);
    }
    return hostMo;
  }
  assert(false);
  return new ClusterMO(context,morHyperHost);
}",0.9965217391304348
106305,"private boolean validateContext(VmwareContext context,Command cmd){
  String guid=cmd.getContextParam(""String_Node_Str"");
  assert(guid != null);
  String[] tokens=guid.split(""String_Node_Str"");
  assert(tokens != null && tokens.length == 2);
  ManagedObjectReference morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  assert(hostTokens.length == 2);
  morHyperHost.setType(hostTokens[0]);
  morHyperHost.setValue(hostTokens[1]);
  if (morHyperHost.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    HostMO hostMo=new HostMO(context,morHyperHost);
    try {
      VmwareHypervisorHostNetworkSummary netSummary=hostMo.getHyperHostNetworkSummary(hostMo.getHostType() == VmwareHostType.ESXi ? cmd.getContextParam(""String_Node_Str"") : cmd.getContextParam(""String_Node_Str""));
      assert(netSummary != null);
      if (netSummary.getHostIp() != null && !netSummary.getHostIp().isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + netSummary.getHostIp() + ""String_Node_Str""+ guid);
        }
        return true;
      }
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
      return false;
    }
  }
  assert(false);
  return true;
}","private boolean validateContext(VmwareContext context,Command cmd){
  String guid=cmd.getContextParam(""String_Node_Str"");
  assert(guid != null);
  String[] tokens=guid.split(""String_Node_Str"");
  assert(tokens != null && tokens.length == 2);
  ManagedObjectReference morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  assert(hostTokens.length == 2);
  morHyperHost.setType(hostTokens[0]);
  morHyperHost.setValue(hostTokens[1]);
  if (morHyperHost.getType().equalsIgnoreCase(""String_Node_Str"")) {
    HostMO hostMo=new HostMO(context,morHyperHost);
    try {
      VmwareHypervisorHostNetworkSummary netSummary=hostMo.getHyperHostNetworkSummary(hostMo.getHostType() == VmwareHostType.ESXi ? cmd.getContextParam(""String_Node_Str"") : cmd.getContextParam(""String_Node_Str""));
      assert(netSummary != null);
      if (netSummary.getHostIp() != null && !netSummary.getHostIp().isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + netSummary.getHostIp() + ""String_Node_Str""+ guid);
        }
        return true;
      }
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
      return false;
    }
  }
  assert(false);
  return true;
}",0.9955654101995566
106306,"@Override public void process(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws AffinityConflictException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  AffinityGroupVMMapVO vmGroupMapping=_affinityGroupVMMapDao.findByVmIdType(vm.getId(),getType());
  if (vmGroupMapping != null) {
    AffinityGroupVO group=_affinityGroupDao.findById(vmGroupMapping.getAffinityGroupId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + group.getName() + ""String_Node_Str""+ vm.getId());
    }
    List<Long> groupVMIds=_affinityGroupVMMapDao.listVmIdsByAffinityGroup(group.getId());
    for (    Long groupVMId : groupVMIds) {
      VMInstanceVO groupVM=_vmInstanceDao.findById(groupVMId);
      if (groupVM != null && !groupVM.isRemoved()) {
        if (groupVM.getHostId() != null) {
          avoid.addHost(groupVM.getHostId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + groupVM.getHostId() + ""String_Node_Str""+ groupVM.getId()+ ""String_Node_Str"");
          }
        }
 else         if (VirtualMachine.State.Stopped.equals(groupVM.getState()) && groupVM.getLastHostId() != null) {
          avoid.addHost(groupVM.getLastHostId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + groupVM.getLastHostId() + ""String_Node_Str""+ groupVM.getId()+ ""String_Node_Str"");
          }
        }
      }
    }
  }
}","@Override public void process(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws AffinityConflictException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  AffinityGroupVMMapVO vmGroupMapping=_affinityGroupVMMapDao.findByVmIdType(vm.getId(),getType());
  if (vmGroupMapping != null) {
    AffinityGroupVO group=_affinityGroupDao.findById(vmGroupMapping.getAffinityGroupId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + group.getName() + ""String_Node_Str""+ vm.getId());
    }
    List<Long> groupVMIds=_affinityGroupVMMapDao.listVmIdsByAffinityGroup(group.getId());
    groupVMIds.remove(vm.getId());
    for (    Long groupVMId : groupVMIds) {
      VMInstanceVO groupVM=_vmInstanceDao.findById(groupVMId);
      if (groupVM != null && !groupVM.isRemoved()) {
        if (groupVM.getHostId() != null) {
          avoid.addHost(groupVM.getHostId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + groupVM.getHostId() + ""String_Node_Str""+ groupVM.getId()+ ""String_Node_Str"");
          }
        }
 else         if (VirtualMachine.State.Stopped.equals(groupVM.getState()) && groupVM.getLastHostId() != null) {
          avoid.addHost(groupVM.getLastHostId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + groupVM.getLastHostId() + ""String_Node_Str""+ groupVM.getId()+ ""String_Node_Str"");
          }
        }
      }
    }
  }
}",0.988258973498826
106307,"@DB @Override @ActionEvent(eventType=EventTypes.EVENT_SECURITY_GROUP_DELETE,eventDescription=""String_Node_Str"") public boolean deleteAffinityGroup(Long affinityGroupId,String account,Long domainId,String affinityGroupName) throws ResourceInUseException {
  Account caller=UserContext.current().getCaller();
  Account owner=_accountMgr.finalizeOwner(caller,account,domainId,null);
  AffinityGroupVO group=null;
  if (affinityGroupId != null) {
    group=_affinityGroupDao.findById(affinityGroupId);
    if (group == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId + ""String_Node_Str"");
    }
  }
 else   if (affinityGroupName != null) {
    group=_affinityGroupDao.findByAccountAndName(owner.getAccountId(),affinityGroupName);
    if (group == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupName + ""String_Node_Str"");
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,group);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  group=_affinityGroupDao.lockRow(affinityGroupId,true);
  if (group == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId);
  }
  List<AffinityGroupVMMapVO> affinityGroupVmMap=_affinityGroupVMMapDao.listByAffinityGroup(affinityGroupId);
  if (!affinityGroupVmMap.isEmpty()) {
    throw new ResourceInUseException(""String_Node_Str"");
  }
  _affinityGroupDao.expunge(affinityGroupId);
  txn.commit();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + affinityGroupId);
  }
  return true;
}","@DB @Override @ActionEvent(eventType=EventTypes.EVENT_SECURITY_GROUP_DELETE,eventDescription=""String_Node_Str"") public boolean deleteAffinityGroup(Long affinityGroupId,String account,Long domainId,String affinityGroupName) throws ResourceInUseException {
  Account caller=UserContext.current().getCaller();
  Account owner=_accountMgr.finalizeOwner(caller,account,domainId,null);
  AffinityGroupVO group=null;
  if (affinityGroupId != null) {
    group=_affinityGroupDao.findById(affinityGroupId);
    if (group == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId + ""String_Node_Str"");
    }
  }
 else   if (affinityGroupName != null) {
    group=_affinityGroupDao.findByAccountAndName(owner.getAccountId(),affinityGroupName);
    if (group == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupName + ""String_Node_Str"");
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (affinityGroupId == null) {
    affinityGroupId=group.getId();
  }
  _accountMgr.checkAccess(caller,null,true,group);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  group=_affinityGroupDao.lockRow(affinityGroupId,true);
  if (group == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId);
  }
  List<AffinityGroupVMMapVO> affinityGroupVmMap=_affinityGroupVMMapDao.listByAffinityGroup(affinityGroupId);
  if (!affinityGroupVmMap.isEmpty()) {
    throw new ResourceInUseException(""String_Node_Str"");
  }
  _affinityGroupDao.expunge(affinityGroupId);
  txn.commit();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + affinityGroupId);
  }
  return true;
}",0.978698224852071
106308,"@Override public UserVm updateVMAffinityGroups(Long vmId,List<Long> affinityGroupIds){
  UserVmVO vmInstance=_userVmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (!vmInstance.getState().equals(State.Stopped)) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  for (  Long affinityGroupId : affinityGroupIds) {
    AffinityGroupVO ag=_affinityGroupDao.findById(affinityGroupId);
    if (ag == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId);
    }
  }
  _affinityGroupVMMapDao.updateMap(vmId,affinityGroupIds);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str""+ affinityGroupIds);
  }
  return vmInstance;
}","@Override public UserVm updateVMAffinityGroups(Long vmId,List<Long> affinityGroupIds){
  UserVmVO vmInstance=_userVmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (!vmInstance.getState().equals(State.Stopped)) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  Account owner=_accountMgr.getAccount(vmInstance.getAccountId());
  for (  Long affinityGroupId : affinityGroupIds) {
    AffinityGroupVO ag=_affinityGroupDao.findById(affinityGroupId);
    if (ag == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + affinityGroupId);
    }
 else {
      _accountMgr.checkAccess(caller,null,true,owner,ag);
    }
  }
  _affinityGroupVMMapDao.updateMap(vmId,affinityGroupIds);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str""+ affinityGroupIds);
  }
  return vmInstance;
}",0.9139251915277152
106309,"String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType > 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.get(alertType)).append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}","String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType >= 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.get(alertType)).append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}",0.9996557659208262
106310,"@Override public void deployVirtualMachine(String reservationId,String caller,Map<VirtualMachineProfile.Param,Object> params) throws InsufficientCapacityException, ResourceUnavailableException {
  VMReservationVO vmReservation=_reservationDao.findByReservationId(reservationId);
  long vmId=vmReservation.getVmId();
  VMInstanceVO vm=_vmDao.findById(vmId);
  Long poolId=null;
  Map<Long,Long> storage=vmReservation.getVolumeReservation();
  if (storage != null) {
    List<Long> volIdList=new ArrayList<Long>(storage.keySet());
    if (volIdList != null && !volIdList.isEmpty()) {
      poolId=storage.get(volIdList.get(0));
    }
  }
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vmReservation.getPodId(),vmReservation.getClusterId(),vmReservation.getHostId(),poolId,null);
  VMInstanceVO vmDeployed=_itMgr.start(vm,params,_userDao.findById(new Long(caller)),_accountDao.findById(vm.getAccountId()),plan);
}","@Override public void deployVirtualMachine(String reservationId,String caller,Map<VirtualMachineProfile.Param,Object> params) throws InsufficientCapacityException, ResourceUnavailableException {
  VMReservationVO vmReservation=_reservationDao.findByReservationId(reservationId);
  long vmId=vmReservation.getVmId();
  VMInstanceVO vm=_vmDao.findById(vmId);
  Long poolId=null;
  Map<Long,Long> storage=vmReservation.getVolumeReservation();
  if (storage != null) {
    List<Long> volIdList=new ArrayList<Long>(storage.keySet());
    if (volIdList != null && !volIdList.isEmpty()) {
      poolId=storage.get(volIdList.get(0));
    }
  }
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vmReservation.getPodId(),vmReservation.getClusterId(),vmReservation.getHostId(),null,null);
  VMInstanceVO vmDeployed=_itMgr.start(vm,params,_userDao.findById(new Long(caller)),_accountDao.findById(vm.getAccountId()),plan);
}",0.9946581196581196
106311,"/** 
 * This method should reorder the given list of Pod Ids by applying any necessary heuristic  for this planner For FirstFitPlanner there is no specific heuristic to be applied  other than the capacity based ordering which is done by default.
 * @return List<Long> ordered list of Pod Ids
 */
protected List<Long> reorderPods(Pair<List<Long>,Map<Long,Double>> podCapacityInfo,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan){
  List<Long> podIdsByCapacity=podCapacityInfo.first();
  return podIdsByCapacity;
}","/** 
 * This method should reorder the given list of Pod Ids by applying any necessary heuristic for this planner For FirstFitPlanner there is no specific heuristic to be applied other than the capacity based ordering which is done by default.
 * @return List<Long> ordered list of Pod Ids
 */
protected List<Long> reorderPods(Pair<List<Long>,Map<Long,Double>> podCapacityInfo,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan){
  List<Long> podIdsByCapacity=podCapacityInfo.first();
  return podIdsByCapacity;
}",0.99815157116451
106312,"/** 
 * This method should reorder the given list of Cluster Ids by applying any necessary heuristic  for this planner For FirstFitPlanner there is no specific heuristic to be applied  other than the capacity based ordering which is done by default.
 * @return List<Long> ordered list of Cluster Ids
 */
protected List<Long> reorderClusters(long id,boolean isZone,Pair<List<Long>,Map<Long,Double>> clusterCapacityInfo,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan){
  List<Long> reordersClusterIds=clusterCapacityInfo.first();
  return reordersClusterIds;
}","/** 
 * This method should reorder the given list of Cluster Ids by applying any necessary heuristic for this planner For FirstFitPlanner there is no specific heuristic to be applied other than the capacity based ordering which is done by default.
 * @return List<Long> ordered list of Cluster Ids
 */
protected List<Long> reorderClusters(long id,boolean isZone,Pair<List<Long>,Map<Long,Double>> clusterCapacityInfo,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan){
  List<Long> reordersClusterIds=clusterCapacityInfo.first();
  return reordersClusterIds;
}",0.9982993197278912
106313,"@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  if (dskCh.getTags() != null && dskCh.getTags().length != 0) {
    s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ Arrays.toString(dskCh.getTags()));
  }
 else {
    s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId);
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,dskCh.getTags());
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      String storageType=dskCh.useLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString();
      s_logger.debug(""String_Node_Str"" + storageType + ""String_Node_Str"");
    }
    return suitablePools;
  }
  for (  StoragePoolVO pool : pools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
    if (filter(avoid,pol,dskCh,plan)) {
      suitablePools.add(pol);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitablePools.size() + ""String_Node_Str"");
  }
  return suitablePools;
}","@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  s_logger.debug(""String_Node_Str"");
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  long dcId=plan.getDataCenterId();
  Long podId=plan.getPodId();
  Long clusterId=plan.getClusterId();
  if (dskCh.getTags() != null && dskCh.getTags().length != 0) {
    s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ Arrays.toString(dskCh.getTags()));
  }
 else {
    s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId);
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dcId,podId,clusterId,dskCh.getTags());
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      String storageType=dskCh.useLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString();
      s_logger.debug(""String_Node_Str"" + storageType + ""String_Node_Str"");
    }
    return suitablePools;
  }
  for (  StoragePoolVO pool : pools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
    if (filter(avoid,pol,dskCh,plan)) {
      suitablePools.add(pol);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitablePools.size() + ""String_Node_Str"");
  }
  return suitablePools;
}",0.9879596485519035
106314,"@Override public List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  if (!_storagePoolCleanupEnabled) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  storageMgr.cleanupStorage(false);
  StoragePoolAllocator allocator;
  if (dskCh.useLocalStorage()) {
    allocator=_localStoragePoolAllocator;
  }
 else {
    allocator=_firstFitStoragePoolAllocator;
  }
  ExcludeList myAvoids=new ExcludeList(avoid.getDataCentersToAvoid(),avoid.getPodsToAvoid(),avoid.getClustersToAvoid(),avoid.getHostsToAvoid(),avoid.getPoolsToAvoid());
  return allocator.allocateToPool(dskCh,vmProfile,plan,myAvoids,returnUpTo);
}","@Override public List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  s_logger.debug(""String_Node_Str"");
  if (!_storagePoolCleanupEnabled) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  storageMgr.cleanupStorage(false);
  StoragePoolAllocator allocator;
  if (dskCh.useLocalStorage()) {
    allocator=_localStoragePoolAllocator;
  }
 else {
    allocator=_firstFitStoragePoolAllocator;
  }
  ExcludeList myAvoids=new ExcludeList(avoid.getDataCentersToAvoid(),avoid.getPodsToAvoid(),avoid.getClustersToAvoid(),avoid.getHostsToAvoid(),avoid.getPoolsToAvoid());
  return allocator.allocateToPool(dskCh,vmProfile,plan,myAvoids,returnUpTo);
}",0.9750505731625084
106315,"@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  if (dskCh.getType() == Volume.Type.DATADISK && plan.getHostId() != null) {
    List<StoragePoolHostVO> hostPools=_poolHostDao.listByHostId(plan.getHostId());
    for (    StoragePoolHostVO hostPool : hostPools) {
      StoragePoolVO pool=_storagePoolDao.findById(hostPool.getPoolId());
      if (pool != null && pool.isLocal()) {
        StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
        if (filter(avoid,pol,dskCh,plan)) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str"");
          suitablePools.add(pol);
        }
      }
      if (suitablePools.size() == returnUpTo) {
        break;
      }
    }
  }
 else {
    List<StoragePoolVO> availablePools=_storagePoolDao.findLocalStoragePoolsByTags(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId(),dskCh.getTags());
    for (    StoragePoolVO pool : availablePools) {
      if (suitablePools.size() == returnUpTo) {
        break;
      }
      StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
      if (filter(avoid,pol,dskCh,plan)) {
        suitablePools.add(pol);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitablePools.size() + ""String_Node_Str"");
  }
  return suitablePools;
}","@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  s_logger.debug(""String_Node_Str"");
  if (!dskCh.useLocalStorage()) {
    return suitablePools;
  }
  if (dskCh.getType() == Volume.Type.DATADISK && plan.getHostId() != null) {
    List<StoragePoolHostVO> hostPools=_poolHostDao.listByHostId(plan.getHostId());
    for (    StoragePoolHostVO hostPool : hostPools) {
      StoragePoolVO pool=_storagePoolDao.findById(hostPool.getPoolId());
      if (pool != null && pool.isLocal()) {
        StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
        if (filter(avoid,pol,dskCh,plan)) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str"");
          suitablePools.add(pol);
        }
      }
      if (suitablePools.size() == returnUpTo) {
        break;
      }
    }
  }
 else {
    List<StoragePoolVO> availablePools=_storagePoolDao.findLocalStoragePoolsByTags(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId(),dskCh.getTags());
    for (    StoragePoolVO pool : availablePools) {
      if (suitablePools.size() == returnUpTo) {
        break;
      }
      StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(pool.getId());
      if (filter(avoid,pol,dskCh,plan)) {
        suitablePools.add(pol);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitablePools.size() + ""String_Node_Str"");
  }
  return suitablePools;
}",0.9701630267609966
106316,"@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  HypervisorType hypervisor=dskCh.getHypersorType();
  if (hypervisor != null) {
    if (hypervisor != HypervisorType.KVM) {
      s_logger.debug(""String_Node_Str"");
      return suitablePools;
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.findZoneWideStoragePoolsByTags(plan.getDataCenterId(),dskCh.getTags());
  for (  StoragePoolVO storage : storagePools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(storage.getId());
    if (filter(avoid,pol,dskCh,plan)) {
      suitablePools.add(pol);
    }
  }
  return suitablePools;
}","@Override protected List<StoragePool> select(DiskProfile dskCh,VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  s_logger.debug(""String_Node_Str"");
  List<StoragePool> suitablePools=new ArrayList<StoragePool>();
  HypervisorType hypervisor=dskCh.getHypersorType();
  if (hypervisor != null) {
    if (hypervisor != HypervisorType.KVM) {
      s_logger.debug(""String_Node_Str"");
      return suitablePools;
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.findZoneWideStoragePoolsByTags(plan.getDataCenterId(),dskCh.getTags());
  for (  StoragePoolVO storage : storagePools) {
    if (suitablePools.size() == returnUpTo) {
      break;
    }
    StoragePool pol=(StoragePool)this.dataStoreMgr.getPrimaryDataStore(storage.getId());
    if (filter(avoid,pol,dskCh,plan)) {
      suitablePools.add(pol);
    }
  }
  return suitablePools;
}",0.97929490766648
106317,"private void exportVolumeToSecondaryStroage(VirtualMachineMO vmMo,String volumePath,String secStorageUrl,String secStorageDir,String exportName,String workerVmName) throws Exception {
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  String exportPath=secondaryMountPoint + ""String_Node_Str"" + secStorageDir;
synchronized (exportPath.intern()) {
    if (!new File(exportPath).exists()) {
      Script command=new Script(false,""String_Node_Str"",_timeout,s_logger);
      command.add(""String_Node_Str"");
      command.add(exportPath);
      if (command.execute() != null)       throw new Exception(""String_Node_Str"");
    }
  }
  VirtualMachineMO clonedVm=null;
  try {
    Pair<VirtualDisk,String> volumeDeviceInfo=vmMo.getDiskDevice(volumePath,false);
    if (volumeDeviceInfo == null) {
      String msg=""String_Node_Str"" + volumePath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo.cloneFromCurrentSnapshot(workerVmName,0,4,volumeDeviceInfo.second(),VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));
    clonedVm=vmMo.getRunningHost().findVmOnHyperHost(workerVmName);
    if (clonedVm == null) {
      String msg=""String_Node_Str"" + volumePath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    clonedVm.exportVm(exportPath,exportName,true,true);
  }
  finally {
    if (clonedVm != null) {
      clonedVm.detachAllDisks();
      clonedVm.destroy();
    }
  }
}","private void exportVolumeToSecondaryStroage(VirtualMachineMO vmMo,String volumePath,String secStorageUrl,String secStorageDir,String exportName,String workerVmName) throws Exception {
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  String exportPath=secondaryMountPoint + ""String_Node_Str"" + secStorageDir+ ""String_Node_Str""+ exportName;
synchronized (exportPath.intern()) {
    if (!new File(exportPath).exists()) {
      Script command=new Script(false,""String_Node_Str"",_timeout,s_logger);
      command.add(""String_Node_Str"");
      command.add(exportPath);
      if (command.execute() != null)       throw new Exception(""String_Node_Str"");
    }
  }
  VirtualMachineMO clonedVm=null;
  try {
    Pair<VirtualDisk,String> volumeDeviceInfo=vmMo.getDiskDevice(volumePath,false);
    if (volumeDeviceInfo == null) {
      String msg=""String_Node_Str"" + volumePath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo.cloneFromCurrentSnapshot(workerVmName,0,4,volumeDeviceInfo.second(),VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));
    clonedVm=vmMo.getRunningHost().findVmOnHyperHost(workerVmName);
    if (clonedVm == null) {
      String msg=""String_Node_Str"" + volumePath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    clonedVm.exportVm(exportPath,exportName,true,true);
  }
  finally {
    if (clonedVm != null) {
      clonedVm.detachAllDisks();
      clonedVm.destroy();
    }
  }
}",0.9894089511445164
106318,"private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost,DatastoreMO primaryDsMo,String newVolumeName,String secStorageUrl,String secStorageDir,String backupName) throws Exception {
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  String srcOVAFileName=secondaryMountPoint + ""String_Node_Str"" + secStorageDir+ ""String_Node_Str""+ backupName+ ""String_Node_Str""+ ImageFormat.OVA.getFileExtension();
  String srcFileName=getOVFFilePath(srcOVAFileName);
  if (srcFileName == null) {
    Script command=new Script(""String_Node_Str"",0,s_logger);
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",srcOVAFileName);
    command.setWorkDir(secondaryMountPoint + ""String_Node_Str"" + secStorageDir);
    s_logger.info(""String_Node_Str"" + command.toString());
    String result=command.execute();
    if (result != null) {
      String msg=""String_Node_Str"" + srcOVAFileName;
      s_logger.error(msg);
      throw new Exception(msg);
    }
  }
  srcFileName=getOVFFilePath(srcOVAFileName);
  if (srcFileName == null) {
    String msg=""String_Node_Str"" + srcOVAFileName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  VirtualMachineMO clonedVm=null;
  try {
    hyperHost.importVmFromOVF(srcFileName,newVolumeName,primaryDsMo,""String_Node_Str"");
    clonedVm=hyperHost.findVmOnHyperHost(newVolumeName);
    if (clonedVm == null)     throw new Exception(""String_Node_Str"");
    clonedVm.moveAllVmDiskFiles(primaryDsMo,""String_Node_Str"",false);
    clonedVm.detachAllDisks();
  }
  finally {
    if (clonedVm != null) {
      clonedVm.detachAllDisks();
      clonedVm.destroy();
    }
  }
}","private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost,DatastoreMO primaryDsMo,String newVolumeName,String secStorageUrl,String secStorageDir,String backupName) throws Exception {
  String secondaryMountPoint=_mountService.getMountPoint(secStorageUrl);
  String srcOVAFileName=secondaryMountPoint + ""String_Node_Str"" + secStorageDir+ ""String_Node_Str""+ backupName+ ""String_Node_Str""+ ImageFormat.OVA.getFileExtension();
  String snapshotDir=""String_Node_Str"";
  if (backupName.contains(""String_Node_Str"")) {
    snapshotDir=backupName.split(""String_Node_Str"")[0];
  }
  String srcFileName=getOVFFilePath(srcOVAFileName);
  if (srcFileName == null) {
    Script command=new Script(""String_Node_Str"",0,s_logger);
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",srcOVAFileName);
    command.setWorkDir(secondaryMountPoint + ""String_Node_Str"" + secStorageDir+ ""String_Node_Str""+ snapshotDir);
    s_logger.info(""String_Node_Str"" + command.toString());
    String result=command.execute();
    if (result != null) {
      String msg=""String_Node_Str"" + srcOVAFileName;
      s_logger.error(msg);
      throw new Exception(msg);
    }
  }
  srcFileName=getOVFFilePath(srcOVAFileName);
  if (srcFileName == null) {
    String msg=""String_Node_Str"" + srcOVAFileName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  VirtualMachineMO clonedVm=null;
  try {
    hyperHost.importVmFromOVF(srcFileName,newVolumeName,primaryDsMo,""String_Node_Str"");
    clonedVm=hyperHost.findVmOnHyperHost(newVolumeName);
    if (clonedVm == null)     throw new Exception(""String_Node_Str"");
    clonedVm.moveAllVmDiskFiles(primaryDsMo,""String_Node_Str"",false);
    clonedVm.detachAllDisks();
  }
  finally {
    if (clonedVm != null) {
      clonedVm.detachAllDisks();
      clonedVm.destroy();
    }
  }
}",0.9482461184588844
106319,"private String backupSnapshotToSecondaryStorage(VirtualMachineMO vmMo,long accountId,long volumeId,String volumePath,String snapshotUuid,String secStorageUrl,String prevSnapshotUuid,String prevBackupUuid,String workerVmName) throws Exception {
  String backupUuid=UUID.randomUUID().toString();
  exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,getSnapshotRelativeDirInSecStorage(accountId,volumeId),backupUuid,workerVmName);
  return backupUuid;
}","private String backupSnapshotToSecondaryStorage(VirtualMachineMO vmMo,long accountId,long volumeId,String volumePath,String snapshotUuid,String secStorageUrl,String prevSnapshotUuid,String prevBackupUuid,String workerVmName) throws Exception {
  String backupUuid=UUID.randomUUID().toString();
  exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,getSnapshotRelativeDirInSecStorage(accountId,volumeId),backupUuid,workerVmName);
  return backupUuid + ""String_Node_Str"" + backupUuid;
}",0.9653725078698846
106320,"/** 
 * Establishes session with the virtual center server.
 * @throws Exception the exception
 */
public void connect(String url,String userName,String password) throws Exception {
  HostnameVerifier hv=new HostnameVerifier(){
    @Override public boolean verify(    String urlHostName,    SSLSession session){
      return true;
    }
  }
;
  trustAllHttpsCertificates();
  HttpsURLConnection.setDefaultHostnameVerifier(hv);
  SVC_INST_REF.setType(SVC_INST_NAME);
  SVC_INST_REF.setValue(SVC_INST_NAME);
  vimService=new VimService();
  vimPort=vimService.getVimPort();
  Map<String,Object> ctxt=((BindingProvider)vimPort).getRequestContext();
  ctxt.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,url);
  ctxt.put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  ctxt.put(""String_Node_Str"",600000);
  ctxt.put(""String_Node_Str"",600000);
  serviceContent=vimPort.retrieveServiceContent(SVC_INST_REF);
  URL urlUrl=new URL(url);
  Map<String,List<String>> headers=(Map<String,List<String>>)((BindingProvider)vimPort).getResponseContext().get(MessageContext.HTTP_RESPONSE_HEADERS);
  for (  String header_raw_value : (List<String>)headers.get(""String_Node_Str"")) {
    List<Cookie> cookies=new BrowserCompatSpec().parse(new BasicHeader(""String_Node_Str"",header_raw_value),new CookieOrigin(urlUrl.getHost(),urlUrl.getPort(),urlUrl.getPath(),true));
    if (cookies.size() > 0) {
      serviceCookie=cookies.get(0).getValue();
      break;
    }
  }
  vimPort.login(serviceContent.getSessionManager(),userName,password,null);
  isConnected=true;
  propCollectorRef=serviceContent.getPropertyCollector();
  rootRef=serviceContent.getRootFolder();
}","/** 
 * Establishes session with the virtual center server.
 * @throws Exception the exception
 */
public void connect(String url,String userName,String password) throws Exception {
  HostnameVerifier hv=new HostnameVerifier(){
    @Override public boolean verify(    String urlHostName,    SSLSession session){
      return true;
    }
  }
;
  trustAllHttpsCertificates();
  HttpsURLConnection.setDefaultHostnameVerifier(hv);
  SVC_INST_REF.setType(SVC_INST_NAME);
  SVC_INST_REF.setValue(SVC_INST_NAME);
  vimService=new VimService();
  vimPort=vimService.getVimPort();
  Map<String,Object> ctxt=((BindingProvider)vimPort).getRequestContext();
  ctxt.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,url);
  ctxt.put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  ctxt.put(""String_Node_Str"",600000);
  ctxt.put(""String_Node_Str"",600000);
  serviceContent=vimPort.retrieveServiceContent(SVC_INST_REF);
  Map<String,List<String>> headers=(Map<String,List<String>>)((BindingProvider)vimPort).getResponseContext().get(MessageContext.HTTP_RESPONSE_HEADERS);
  List<String> cookies=(List<String>)headers.get(""String_Node_Str"");
  String cookieValue=cookies.get(0);
  StringTokenizer tokenizer=new StringTokenizer(cookieValue,""String_Node_Str"");
  cookieValue=tokenizer.nextToken();
  String pathData=""String_Node_Str"" + tokenizer.nextToken();
  serviceCookie=""String_Node_Str"" + cookieValue + ""String_Node_Str""+ pathData;
  vimPort.login(serviceContent.getSessionManager(),userName,password,null);
  isConnected=true;
  propCollectorRef=serviceContent.getPropertyCollector();
  rootRef=serviceContent.getRootFolder();
}",0.7995095033721643
106321,"@Override public VirtualMachineEntity createVirtualMachineFromScratch(String id,String owner,String isoId,String hostName,String displayName,String hypervisor,String os,int cpu,int speed,long memory,Long diskSize,List<String> computeTags,List<String> rootDiskTags,Map<String,NicProfile> networkNicMap,DeploymentPlan plan) throws InsufficientCapacityException {
  VirtualMachineEntityImpl vmEntity=null;
  try {
    vmEntity=_vmEntityFactory.getObject();
  }
 catch (  Exception e) {
  }
  vmEntity.init(id,owner,hostName,displayName,cpu,speed,memory,computeTags,rootDiskTags,new ArrayList<String>(networkNicMap.keySet()));
  VMInstanceVO vm=_vmDao.findByUuid(id);
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  ServiceOfferingVO offering=_serviceOfferingDao.findById(vm.getServiceOfferingId());
  rootDiskOffering.first(offering);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  Long diskOfferingId=vm.getDiskOfferingId();
  if (diskOfferingId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if (diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
  }
  Long size=null;
  if (diskOffering.getDiskSize() == 0) {
    size=diskSize;
    if (size == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
    }
  }
  rootDiskOffering.first(diskOffering);
  rootDiskOffering.second(size);
  HypervisorType hypervisorType=HypervisorType.valueOf(hypervisor);
  if (_itMgr.allocate(vm,_templateDao.findById(new Long(isoId)),offering,rootDiskOffering,dataDiskOfferings,null,null,plan,hypervisorType,null) == null) {
    return null;
  }
  return vmEntity;
}","@Override public VirtualMachineEntity createVirtualMachineFromScratch(String id,String owner,String isoId,String hostName,String displayName,String hypervisor,String os,int cpu,int speed,long memory,Long diskSize,List<String> computeTags,List<String> rootDiskTags,Map<String,NicProfile> networkNicMap,DeploymentPlan plan) throws InsufficientCapacityException {
  VirtualMachineEntityImpl vmEntity=null;
  try {
    vmEntity=_vmEntityFactory.getObject();
  }
 catch (  Exception e) {
  }
  vmEntity.init(id,owner,hostName,displayName,cpu,speed,memory,computeTags,rootDiskTags,new ArrayList<String>(networkNicMap.keySet()));
  VMInstanceVO vm=_vmDao.findByUuid(id);
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  ServiceOfferingVO offering=_serviceOfferingDao.findById(vm.getServiceOfferingId());
  rootDiskOffering.first(offering);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  Long diskOfferingId=vm.getDiskOfferingId();
  if (diskOfferingId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if (diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
  }
  Long size=null;
  if (diskOffering.getDiskSize() == 0) {
    size=diskSize;
    if (size == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
    }
  }
  rootDiskOffering.first(diskOffering);
  rootDiskOffering.second(size);
  List<Pair<NetworkVO,NicProfile>> networkIpMap=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  String uuid : networkNicMap.keySet()) {
    NetworkVO network=_networkDao.findByUuid(uuid);
    if (network != null) {
      networkIpMap.add(new Pair<NetworkVO,NicProfile>(network,networkNicMap.get(uuid)));
    }
  }
  HypervisorType hypervisorType=HypervisorType.valueOf(hypervisor);
  if (_itMgr.allocate(_userVmDao.findById(vm.getId(),true),_templateDao.findById(new Long(isoId)),offering,rootDiskOffering,dataDiskOfferings,networkIpMap,null,plan,hypervisorType,_accountDao.findById(new Long(owner))) == null) {
    return null;
  }
  return vmEntity;
}",0.8950572193815437
106322,"public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  for (  String upgradeClass : upgradeClasses) {
    System.out.println(""String_Node_Str"" + upgradeClass);
    Class<?> clazz=null;
    try {
      clazz=Class.forName(upgradeClass);
      if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
        System.err.println(""String_Node_Str"" + clazz.getName());
        System.exit(1);
      }
    }
 catch (    ClassNotFoundException e) {
      System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
      System.exit(1);
    }
  }
}","public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    for (    String upgradeClass : upgradeClasses) {
      System.out.println(""String_Node_Str"" + upgradeClass);
      Class<?> clazz=null;
      try {
        clazz=Class.forName(upgradeClass);
        if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
          System.err.println(""String_Node_Str"" + clazz.getName());
          System.exit(1);
        }
        SystemIntegrityChecker checker=(SystemIntegrityChecker)clazz.newInstance();
        checker.check();
      }
 catch (      ClassNotFoundException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      InstantiationException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      IllegalAccessException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
    }
  }
  finally {
    txn.close();
  }
}",0.9134416543574594
106323,"public DatabaseUpgradeChecker(){
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}","public DatabaseUpgradeChecker(){
  _dao=new VersionDaoImpl();
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}",0.9978561395727064
106324,"protected VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}","public VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}",0.989558232931727
106325,"public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  for (  String upgradeClass : upgradeClasses) {
    System.out.println(""String_Node_Str"" + upgradeClass);
    Class<?> clazz=null;
    try {
      clazz=Class.forName(upgradeClass);
      if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
        System.err.println(""String_Node_Str"" + clazz.getName());
        System.exit(1);
      }
    }
 catch (    ClassNotFoundException e) {
      System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
      System.exit(1);
    }
  }
}","public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    for (    String upgradeClass : upgradeClasses) {
      System.out.println(""String_Node_Str"" + upgradeClass);
      Class<?> clazz=null;
      try {
        clazz=Class.forName(upgradeClass);
        if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
          System.err.println(""String_Node_Str"" + clazz.getName());
          System.exit(1);
        }
        SystemIntegrityChecker checker=(SystemIntegrityChecker)clazz.newInstance();
        checker.check();
      }
 catch (      ClassNotFoundException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      InstantiationException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      IllegalAccessException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
    }
  }
  finally {
    txn.close();
  }
}",0.9134416543574594
106326,"public DatabaseUpgradeChecker(){
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}","public DatabaseUpgradeChecker(){
  _dao=new VersionDaoImpl();
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}",0.9978561395727064
106327,"protected VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}","public VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}",0.989558232931727
106328,"public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    for (    String upgradeClass : upgradeClasses) {
      System.out.println(""String_Node_Str"" + upgradeClass);
      Class<?> clazz=null;
      try {
        clazz=Class.forName(upgradeClass);
        if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
          System.err.println(""String_Node_Str"" + clazz.getName());
          System.exit(1);
        }
        SystemIntegrityChecker checker=(SystemIntegrityChecker)clazz.newInstance();
        checker.check();
      }
 catch (      ClassNotFoundException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      InstantiationException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
catch (      IllegalAccessException e) {
        System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
    }
  }
  finally {
    txn.close();
  }
}","public static void main(String[] args){
  String dbPropsFile=""String_Node_Str"";
  List<String> sqlFiles=new ArrayList<String>();
  List<String> upgradeClasses=new ArrayList<String>();
  String[] databases=new String[]{};
  String rootPassword=""String_Node_Str"";
  boolean verbosity=false;
  boolean dryRun=false;
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      printHelp(""String_Node_Str"");
      System.exit(0);
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      verbosity=true;
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      dryRun=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      rootPassword=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      databases=arg.substring(arg.lastIndexOf(""String_Node_Str"") + 1,arg.length()).split(""String_Node_Str"");
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      sqlFiles.add(arg);
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (!dbPropsFile.endsWith(""String_Node_Str"") && fileExists(arg))       dbPropsFile=arg;
    }
 else     if (arg.endsWith(""String_Node_Str"")) {
      if (fileExists(arg))       dbPropsFile=arg;
    }
 else {
      upgradeClasses.add(arg);
    }
  }
  if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {
    printHelp(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Transaction.initDataSource(dbPropsFile);
  }
 catch (  NullPointerException e) {
  }
  initDB(dbPropsFile,rootPassword,databases,dryRun);
  for (  String sqlFile : sqlFiles) {
    File sqlScript=PropertiesUtil.findConfigFile(sqlFile);
    if (sqlScript == null) {
      System.err.println(""String_Node_Str"" + sqlFile);
      printHelp(""String_Node_Str"");
      System.exit(1);
    }
    System.out.println(""String_Node_Str"" + sqlScript.getAbsolutePath());
    Connection conn=Transaction.getStandaloneConnection();
    try {
      FileReader reader=null;
      try {
        reader=new FileReader(sqlScript);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + sqlFile + ""String_Node_Str""+ e.getMessage());
        System.exit(1);
      }
      if (!dryRun)       runScript(conn,reader,sqlFile,verbosity);
    }
  finally {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  for (  String upgradeClass : upgradeClasses) {
    System.out.println(""String_Node_Str"" + upgradeClass);
    Class<?> clazz=null;
    try {
      clazz=Class.forName(upgradeClass);
      if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {
        System.err.println(""String_Node_Str"" + clazz.getName());
        System.exit(1);
      }
    }
 catch (    ClassNotFoundException e) {
      System.err.println(""String_Node_Str"" + upgradeClass + ""String_Node_Str""+ e.getMessage());
      System.exit(1);
    }
  }
}",0.8841949778434269
106329,"public DatabaseUpgradeChecker(){
  _dao=new VersionDaoImpl();
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}","public DatabaseUpgradeChecker(){
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade410to420()});
}",0.9978561395727064
106330,"public VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}","protected VersionDaoImpl(){
  super();
  CurrentVersionSearch=createSearchBuilder(String.class);
  CurrentVersionSearch.selectField(CurrentVersionSearch.entity().getVersion());
  CurrentVersionSearch.and(""String_Node_Str"",CurrentVersionSearch.entity().getStep(),Op.EQ);
  CurrentVersionSearch.done();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVersion(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getUpdated(),Op.EQ);
  AllFieldsSearch.done();
}",0.989558232931727
106331,"private File getSystemVMPatchIsoFile(){
  URL url=this.getClass().getProtectionDomain().getCodeSource().getLocation();
  File file=new File(url.getFile());
  File isoFile=new File(file.getParent() + ""String_Node_Str"");
  if (!isoFile.exists()) {
    isoFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    if (!isoFile.exists()) {
      isoFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return isoFile;
}","private File getSystemVMPatchIsoFile(){
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File isoFile=null;
  if (url != null) {
    isoFile=new File(url.getPath());
  }
  if (isoFile == null || !isoFile.exists()) {
    isoFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    if (!isoFile.exists()) {
      isoFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return isoFile;
}",0.360655737704918
106332,"@Override public File getSystemVMKeyFile(){
  URL url=this.getClass().getProtectionDomain().getCodeSource().getLocation();
  File file=new File(url.getFile());
  File keyFile=new File(file.getParent(),""String_Node_Str"");
  if (!keyFile.exists()) {
    keyFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    if (!keyFile.exists()) {
      keyFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return keyFile;
}","@Override public File getSystemVMKeyFile(){
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File keyFile=null;
  if (url != null) {
    keyFile=new File(url.getPath());
  }
  if (keyFile == null || !keyFile.exists()) {
    keyFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    if (!keyFile.exists()) {
      keyFile=new File(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return keyFile;
}",0.5372093023255814
106333,"@Override @DB public Network createGuestNetwork(long networkOfferingId,String name,String displayText,String gateway,String cidr,String vlanId,String networkDomain,Account owner,Long domainId,PhysicalNetwork pNtwk,long zoneId,ACLType aclType,Boolean subdomainAccess,Long vpcId,String ip6Gateway,String ip6Cidr) throws ConcurrentOperationException, InsufficientCapacityException, ResourceAllocationException {
}","@Override @DB public Network createGuestNetwork(long networkOfferingId,String name,String displayText,String gateway,String cidr,String vlanId,String networkDomain,Account owner,Long domainId,PhysicalNetwork pNtwk,long zoneId,ACLType aclType,Boolean subdomainAccess,Long vpcId,String ip6Gateway,String ip6Cidr) throws ConcurrentOperationException, InsufficientCapacityException, ResourceAllocationException {
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  if (ntwkOff.getTrafficType() != TrafficType.Guest) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
  boolean updateResourceCount=resourceCountNeedsUpdate(ntwkOff,aclType);
  if (updateResourceCount) {
    _resourceLimitMgr.checkResourceLimit(owner,ResourceType.network);
  }
  if (ntwkOff.getState() != NetworkOffering.State.Enabled) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.State.Enabled);
    ex.addProxyObject(ntwkOff,ntwkOff.getId(),""String_Node_Str"");
    throw ex;
  }
  if (pNtwk.getState() != PhysicalNetwork.State.Enabled) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + pNtwk.getState());
    ex.addProxyObject(""String_Node_Str"",pNtwk.getId(),""String_Node_Str"");
    throw ex;
  }
  boolean ipv6=false;
  if (ip6Gateway != null && ip6Cidr != null) {
    ipv6=true;
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (ipv6) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (aclType == null || aclType != ACLType.Domain) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    List<NetworkVO> guestNetworks=_networksDao.listByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
    if (!guestNetworks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
    }
    if (!(ntwkOff.getGuestType() == GuestType.Shared && !_networkModel.areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic + ""String_Node_Str""+ ""String_Node_Str""+ GuestType.Shared+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    if (domainId == null || domainId != Domain.ROOT_DOMAIN) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (subdomainAccess == null) {
      subdomainAccess=true;
    }
 else     if (!subdomainAccess) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (vlanId == null) {
      vlanId=Vlan.UNTAGGED;
    }
 else {
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + Vlan.UNTAGGED + ""String_Node_Str""+ ""String_Node_Str""+ NetworkType.Basic);
      }
    }
  }
 else   if (zone.getNetworkType() == NetworkType.Advanced) {
    if (zone.isSecurityGroupEnabled()) {
      if (ipv6) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (ntwkOff.getGuestType() != GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (_networkModel.areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (_networkModel.areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SecurityGroup)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (ntwkOff.getElasticIp() || ntwkOff.getElasticLb()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
    }
  }
  boolean vlanSpecified=(vlanId != null);
  if (vlanSpecified != ntwkOff.getSpecifyVlan()) {
    if (vlanSpecified) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      if (_networksDao.countByZoneAndUri(zoneId,uri) > 0) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
      }
    }
 else {
      if (_networksDao.countByZoneUriAndGuestType(zoneId,uri,GuestType.Isolated) > 0) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ ""String_Node_Str""+ zoneId);
      }
    }
  }
  if (_networkModel.areServicesSupportedByNetworkOffering(networkOfferingId,Service.Dns)) {
    Map<Network.Capability,String> dnsCapabilities=_networkModel.getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(networkOfferingId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      if (networkDomain != null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId + ""String_Node_Str""+ zoneId);
      }
    }
 else {
      if (networkDomain == null) {
        if (aclType == ACLType.Domain) {
          networkDomain=_networkModel.getDomainNetworkDomain(domainId,zoneId);
        }
 else         if (aclType == ACLType.Account) {
          networkDomain=_networkModel.getAccountNetworkDomain(owner.getId(),zoneId);
        }
        if (networkDomain == null) {
          networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
        }
      }
 else {
        if (!NetUtils.verifyDomainName(networkDomain)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
  }
  boolean cidrRequired=zone.getNetworkType() == NetworkType.Advanced && ntwkOff.getTrafficType() == TrafficType.Guest && (ntwkOff.getGuestType() == GuestType.Shared || (ntwkOff.getGuestType() == GuestType.Isolated && !_networkModel.areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat)));
  if (cidr == null && ip6Cidr == null && cidrRequired) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + Network.GuestType.Shared + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic && cidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (cidr != null && ntwkOff.getGuestType() == Network.GuestType.Isolated && ntwkOff.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long physicalNetworkId=null;
  if (pNtwk != null) {
    physicalNetworkId=pNtwk.getId();
  }
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null,physicalNetworkId);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  if (ip6Cidr != null && ip6Gateway != null) {
    userNetwork.setIp6Cidr(ip6Cidr);
    userNetwork.setIp6Gateway(ip6Gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,ntwkOff,userNetwork,plan,name,displayText,true,domainId,aclType,subdomainAccess,vpcId);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == Network.GuestType.Isolated && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  if (updateResourceCount) {
    _resourceLimitMgr.incrementResourceCount(owner.getId(),ResourceType.network);
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}",0.0848773418900735
106334,"@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,IpAddresses> requestedIps,IpAddresses defaultIps,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
}","@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,IpAddresses> requestedIps,IpAddresses defaultIps,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,null,true,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    Network networkWithSecurityGroup=_networkModel.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(_networkDao.findById(networkWithSecurityGroup.getId()));
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!_networkModel.isSecurityGroupSupportedInNetwork(network)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      boolean isSecurityGroupEnabled=_networkModel.isSecurityGroupSupportedInNetwork(network);
      if (isSecurityGroupEnabled) {
        if (networkIdList.size() > 1) {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
        }
        isSecurityGroupEnabledNetworkUsed=true;
      }
      if (!(network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (network.getAclType() == ACLType.Account) {
        _accountMgr.checkAccess(caller,AccessType.UseNetwork,false,network);
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare && _networkModel.canAddDefaultSecurityGroup()) {
    if (securityGroupIdList == null || securityGroupIdList.isEmpty()) {
      if (securityGroupIdList == null) {
        securityGroupIdList=new ArrayList<Long>();
      }
      SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
      if (defaultGroup != null) {
        securityGroupIdList.add(defaultGroup.getId());
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        }
        defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIps,keyboard);
}",0.2489993680219085
106335,"private Pair<String,String> copyVolumeToSecStorage(VmwareHostService hostService,VmwareHypervisorHost hyperHost,CopyVolumeCommand cmd,String vmName,long volumeId,String poolId,String volumePath,String secStorageUrl,String workerVmName) throws Exception {
  String volumeFolder=String.valueOf(volumeId) + ""String_Node_Str"";
  VirtualMachineMO workerVm=null;
  VirtualMachineMO vmMo=null;
  String exportName=UUID.randomUUID().toString();
  try {
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,poolId);
    if (morDs == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      DatastoreMO dsMo=new DatastoreMO(hyperHost.getContext(),morDs);
      VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
      vmConfig.setName(workerVmName);
      vmConfig.setMemoryMB((long)4);
      vmConfig.setNumCPUs(1);
      vmConfig.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST.toString());
      VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
      fileInfo.setVmPathName(String.format(""String_Node_Str"",dsMo.getName()));
      vmConfig.setFiles(fileInfo);
      VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
      scsiController.setSharedBus(VirtualSCSISharing.NO_SHARING);
      scsiController.setBusNumber(0);
      scsiController.setKey(1);
      VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
      scsiControllerSpec.setDevice(scsiController);
      scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
      vmConfig.getDeviceChange().add(scsiControllerSpec);
      hyperHost.createVm(vmConfig);
      workerVm=hyperHost.findVmOnHyperHost(workerVmName);
      if (workerVm == null) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new Exception(msg);
      }
      String datastoreVolumePath=String.format(""String_Node_Str"",dsMo.getName(),volumePath);
      workerVm.attachDisk(new String[]{datastoreVolumePath},morDs);
      vmMo=workerVm;
    }
    vmMo.createSnapshot(exportName,""String_Node_Str"",false,false);
    exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,""String_Node_Str"" + volumeFolder,exportName,hostService.getWorkerName(hyperHost.getContext(),cmd,1));
    return new Pair<String,String>(volumeFolder,exportName);
  }
  finally {
    vmMo.removeSnapshot(exportName,false);
    if (workerVm != null) {
      workerVm.detachAllDisks();
      workerVm.destroy();
    }
  }
}","private Pair<String,String> copyVolumeToSecStorage(VmwareHostService hostService,VmwareHypervisorHost hyperHost,CopyVolumeCommand cmd,String vmName,long volumeId,String poolId,String volumePath,String secStorageUrl,String workerVmName) throws Exception {
  String volumeFolder=String.valueOf(volumeId) + ""String_Node_Str"";
  VirtualMachineMO workerVm=null;
  VirtualMachineMO vmMo=null;
  String exportName=UUID.randomUUID().toString();
  try {
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,poolId);
    if (morDs == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    vmMo=hyperHost.findVmOnHyperHost(vmName);
    if (vmMo == null) {
      DatastoreMO dsMo=new DatastoreMO(hyperHost.getContext(),morDs);
      VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
      vmConfig.setName(workerVmName);
      vmConfig.setMemoryMB((long)4);
      vmConfig.setNumCPUs(1);
      vmConfig.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST.value());
      VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
      fileInfo.setVmPathName(String.format(""String_Node_Str"",dsMo.getName()));
      vmConfig.setFiles(fileInfo);
      VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
      scsiController.setSharedBus(VirtualSCSISharing.NO_SHARING);
      scsiController.setBusNumber(0);
      scsiController.setKey(1);
      VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
      scsiControllerSpec.setDevice(scsiController);
      scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
      vmConfig.getDeviceChange().add(scsiControllerSpec);
      hyperHost.createVm(vmConfig);
      workerVm=hyperHost.findVmOnHyperHost(workerVmName);
      if (workerVm == null) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new Exception(msg);
      }
      String datastoreVolumePath=String.format(""String_Node_Str"",dsMo.getName(),volumePath);
      workerVm.attachDisk(new String[]{datastoreVolumePath},morDs);
      vmMo=workerVm;
    }
    vmMo.createSnapshot(exportName,""String_Node_Str"",false,false);
    exportVolumeToSecondaryStroage(vmMo,volumePath,secStorageUrl,""String_Node_Str"" + volumeFolder,exportName,hostService.getWorkerName(hyperHost.getContext(),cmd,1));
    return new Pair<String,String>(volumeFolder,exportName);
  }
  finally {
    vmMo.removeSnapshot(exportName,false);
    if (workerVm != null) {
      workerVm.detachAllDisks();
      workerVm.destroy();
    }
  }
}",0.9975195573363862
106336,"protected VirtualMachineMO prepareVolumeHostDummyVm(VmwareHypervisorHost hyperHost,DatastoreMO dsMo,String vmName) throws Exception {
  assert(hyperHost != null);
  VirtualMachineMO vmMo=null;
  VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
  vmConfig.setName(vmName);
  vmConfig.setMemoryMB((long)4);
  vmConfig.setNumCPUs(1);
  vmConfig.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST.toString());
  VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
  fileInfo.setVmPathName(String.format(""String_Node_Str"",dsMo.getName()));
  vmConfig.setFiles(fileInfo);
  VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
  scsiController.setSharedBus(VirtualSCSISharing.NO_SHARING);
  scsiController.setBusNumber(0);
  scsiController.setKey(1);
  VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
  scsiControllerSpec.setDevice(scsiController);
  scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
  vmConfig.getDeviceChange().add(scsiControllerSpec);
  hyperHost.createVm(vmConfig);
  vmMo=hyperHost.findVmOnHyperHost(vmName);
  return vmMo;
}","protected VirtualMachineMO prepareVolumeHostDummyVm(VmwareHypervisorHost hyperHost,DatastoreMO dsMo,String vmName) throws Exception {
  assert(hyperHost != null);
  VirtualMachineMO vmMo=null;
  VirtualMachineConfigSpec vmConfig=new VirtualMachineConfigSpec();
  vmConfig.setName(vmName);
  vmConfig.setMemoryMB((long)4);
  vmConfig.setNumCPUs(1);
  vmConfig.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST.value());
  VirtualMachineFileInfo fileInfo=new VirtualMachineFileInfo();
  fileInfo.setVmPathName(String.format(""String_Node_Str"",dsMo.getName()));
  vmConfig.setFiles(fileInfo);
  VirtualLsiLogicController scsiController=new VirtualLsiLogicController();
  scsiController.setSharedBus(VirtualSCSISharing.NO_SHARING);
  scsiController.setBusNumber(0);
  scsiController.setKey(1);
  VirtualDeviceConfigSpec scsiControllerSpec=new VirtualDeviceConfigSpec();
  scsiControllerSpec.setDevice(scsiController);
  scsiControllerSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
  vmConfig.getDeviceChange().add(scsiControllerSpec);
  hyperHost.createVm(vmConfig);
  vmMo=hyperHost.findVmOnHyperHost(vmName);
  return vmMo;
}",0.9942907334211682
106337,"public HttpNfcLeaseState getState() throws Exception {
  return (HttpNfcLeaseState)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}","public HttpNfcLeaseState getState() throws Exception {
  Object stateProp=_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  assert(stateProp.toString().contains(""String_Node_Str""));
  String stateVal=null;
  Element stateElement=(Element)stateProp;
  if (stateElement != null && stateElement.getFirstChild() != null) {
    stateVal=stateElement.getFirstChild().getTextContent();
  }
  if (stateVal != null) {
    return HttpNfcLeaseState.fromValue(stateVal);
  }
  return HttpNfcLeaseState.ERROR;
}",0.235820895522388
106338,"public int tryGetIDEDeviceControllerKey() throws Exception {
  VirtualDevice[] devices=(VirtualDevice[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (devices != null && devices.length > 0) {
    for (    VirtualDevice device : devices) {
      if (device instanceof VirtualIDEController) {
        return ((VirtualIDEController)device).getKey();
      }
    }
  }
  return -1;
}","public int tryGetIDEDeviceControllerKey() throws Exception {
  List<VirtualDevice> devices=(List<VirtualDevice>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (devices != null && devices.size() > 0) {
    for (    VirtualDevice device : devices) {
      if (device instanceof VirtualIDEController) {
        return ((VirtualIDEController)device).getKey();
      }
    }
  }
  return -1;
}",0.902439024390244
106339,"public void createDisk(String vmdkDatastorePath,VirtualDiskType diskType,VirtualDiskMode diskMode,String rdmDeviceName,int sizeInMb,ManagedObjectReference morDs,int controllerKey) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ vmdkDatastorePath+ ""String_Node_Str""+ sizeInMb+ ""String_Node_Str""+ diskType+ ""String_Node_Str""+ diskMode+ ""String_Node_Str""+ rdmDeviceName+ ""String_Node_Str""+ morDs.getValue()+ ""String_Node_Str""+ controllerKey);
  assert(vmdkDatastorePath != null);
  assert(morDs != null);
  if (controllerKey < 0) {
    controllerKey=getIDEDeviceControllerKey();
  }
  VirtualDisk newDisk=new VirtualDisk();
  if (diskType == VirtualDiskType.THIN || diskType == VirtualDiskType.PREALLOCATED || diskType == VirtualDiskType.EAGER_ZEROED_THICK) {
    VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
    backingInfo.setDiskMode(diskMode.PERSISTENT.toString());
    if (diskType == VirtualDiskType.THIN) {
      backingInfo.setThinProvisioned(true);
    }
 else {
      backingInfo.setThinProvisioned(false);
    }
    if (diskType == VirtualDiskType.EAGER_ZEROED_THICK) {
      backingInfo.setEagerlyScrub(true);
    }
 else {
      backingInfo.setEagerlyScrub(false);
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
 else   if (diskType == VirtualDiskType.RDM || diskType == VirtualDiskType.RDMP) {
    VirtualDiskRawDiskMappingVer1BackingInfo backingInfo=new VirtualDiskRawDiskMappingVer1BackingInfo();
    if (diskType == VirtualDiskType.RDM) {
      backingInfo.setCompatibilityMode(""String_Node_Str"");
    }
 else {
      backingInfo.setCompatibilityMode(""String_Node_Str"");
    }
    backingInfo.setDeviceName(rdmDeviceName);
    if (diskType == VirtualDiskType.RDM) {
      backingInfo.setDiskMode(diskMode.PERSISTENT.toString());
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
  int deviceNumber=getNextDeviceNumber(controllerKey);
  newDisk.setControllerKey(controllerKey);
  newDisk.setKey(-deviceNumber);
  newDisk.setUnitNumber(deviceNumber);
  newDisk.setCapacityInKB(sizeInMb * 1024);
  VirtualMachineConfigSpec reConfigSpec=new VirtualMachineConfigSpec();
  VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
  deviceConfigSpec.setDevice(newDisk);
  deviceConfigSpec.setFileOperation(VirtualDeviceConfigSpecFileOperation.CREATE);
  deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
  reConfigSpec.getDeviceChange().add(deviceConfigSpec);
  ManagedObjectReference morTask=_context.getService().reconfigVMTask(_mor,reConfigSpec);
  boolean result=_context.getVimClient().waitForTask(morTask);
  if (!result) {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    throw new Exception(""String_Node_Str"" + vmdkDatastorePath + ""String_Node_Str""+ TaskMO.getTaskFailureInfo(_context,morTask));
  }
  _context.waitForTaskProgressDone(morTask);
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
}","public void createDisk(String vmdkDatastorePath,VirtualDiskType diskType,VirtualDiskMode diskMode,String rdmDeviceName,int sizeInMb,ManagedObjectReference morDs,int controllerKey) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ vmdkDatastorePath+ ""String_Node_Str""+ sizeInMb+ ""String_Node_Str""+ diskType+ ""String_Node_Str""+ diskMode+ ""String_Node_Str""+ rdmDeviceName+ ""String_Node_Str""+ morDs.getValue()+ ""String_Node_Str""+ controllerKey);
  assert(vmdkDatastorePath != null);
  assert(morDs != null);
  if (controllerKey < 0) {
    controllerKey=getIDEDeviceControllerKey();
  }
  VirtualDisk newDisk=new VirtualDisk();
  if (diskType == VirtualDiskType.THIN || diskType == VirtualDiskType.PREALLOCATED || diskType == VirtualDiskType.EAGER_ZEROED_THICK) {
    VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
    backingInfo.setDiskMode(diskMode.PERSISTENT.value());
    if (diskType == VirtualDiskType.THIN) {
      backingInfo.setThinProvisioned(true);
    }
 else {
      backingInfo.setThinProvisioned(false);
    }
    if (diskType == VirtualDiskType.EAGER_ZEROED_THICK) {
      backingInfo.setEagerlyScrub(true);
    }
 else {
      backingInfo.setEagerlyScrub(false);
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
 else   if (diskType == VirtualDiskType.RDM || diskType == VirtualDiskType.RDMP) {
    VirtualDiskRawDiskMappingVer1BackingInfo backingInfo=new VirtualDiskRawDiskMappingVer1BackingInfo();
    if (diskType == VirtualDiskType.RDM) {
      backingInfo.setCompatibilityMode(""String_Node_Str"");
    }
 else {
      backingInfo.setCompatibilityMode(""String_Node_Str"");
    }
    backingInfo.setDeviceName(rdmDeviceName);
    if (diskType == VirtualDiskType.RDM) {
      backingInfo.setDiskMode(diskMode.PERSISTENT.value());
    }
    backingInfo.setDatastore(morDs);
    backingInfo.setFileName(vmdkDatastorePath);
    newDisk.setBacking(backingInfo);
  }
  int deviceNumber=getNextDeviceNumber(controllerKey);
  newDisk.setControllerKey(controllerKey);
  newDisk.setKey(-deviceNumber);
  newDisk.setUnitNumber(deviceNumber);
  newDisk.setCapacityInKB(sizeInMb * 1024);
  VirtualMachineConfigSpec reConfigSpec=new VirtualMachineConfigSpec();
  VirtualDeviceConfigSpec deviceConfigSpec=new VirtualDeviceConfigSpec();
  deviceConfigSpec.setDevice(newDisk);
  deviceConfigSpec.setFileOperation(VirtualDeviceConfigSpecFileOperation.CREATE);
  deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);
  reConfigSpec.getDeviceChange().add(deviceConfigSpec);
  ManagedObjectReference morTask=_context.getService().reconfigVMTask(_mor,reConfigSpec);
  boolean result=_context.getVimClient().waitForTask(morTask);
  if (!result) {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    throw new Exception(""String_Node_Str"" + vmdkDatastorePath + ""String_Node_Str""+ TaskMO.getTaskFailureInfo(_context,morTask));
  }
  _context.waitForTaskProgressDone(morTask);
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
}",0.9959016393442623
106340,"public boolean createLinkedClone(String cloneName,ManagedObjectReference morBaseSnapshot,ManagedObjectReference morFolder,ManagedObjectReference morResourcePool,ManagedObjectReference morDs) throws Exception {
  assert(morBaseSnapshot != null);
  assert(morFolder != null);
  assert(morResourcePool != null);
  assert(morDs != null);
  VirtualDisk[] independentDisks=getAllIndependentDiskDevice();
  VirtualMachineRelocateSpec rSpec=new VirtualMachineRelocateSpec();
  if (independentDisks.length > 0) {
    List<VirtualMachineRelocateSpecDiskLocator> diskLocator=new ArrayList<VirtualMachineRelocateSpecDiskLocator>(independentDisks.length);
    for (int i=0; i < independentDisks.length; i++) {
      VirtualMachineRelocateSpecDiskLocator loc=new VirtualMachineRelocateSpecDiskLocator();
      loc.setDatastore(morDs);
      loc.setDiskId(independentDisks[i].getKey());
      loc.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.MOVE_ALL_DISK_BACKINGS_AND_DISALLOW_SHARING.toString());
      diskLocator.add(loc);
    }
    rSpec.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.CREATE_NEW_CHILD_DISK_BACKING.toString());
    rSpec.getDisk().addAll(diskLocator);
  }
 else {
    rSpec.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.CREATE_NEW_CHILD_DISK_BACKING.toString());
  }
  rSpec.setPool(morResourcePool);
  VirtualMachineCloneSpec cloneSpec=new VirtualMachineCloneSpec();
  cloneSpec.setPowerOn(false);
  cloneSpec.setTemplate(false);
  cloneSpec.setLocation(rSpec);
  cloneSpec.setSnapshot(morBaseSnapshot);
  ManagedObjectReference morTask=_context.getService().cloneVMTask(_mor,morFolder,cloneName,cloneSpec);
  boolean result=_context.getVimClient().waitForTask(morTask);
  if (result) {
    _context.waitForTaskProgressDone(morTask);
    return true;
  }
 else {
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}","public boolean createLinkedClone(String cloneName,ManagedObjectReference morBaseSnapshot,ManagedObjectReference morFolder,ManagedObjectReference morResourcePool,ManagedObjectReference morDs) throws Exception {
  assert(morBaseSnapshot != null);
  assert(morFolder != null);
  assert(morResourcePool != null);
  assert(morDs != null);
  VirtualDisk[] independentDisks=getAllIndependentDiskDevice();
  VirtualMachineRelocateSpec rSpec=new VirtualMachineRelocateSpec();
  if (independentDisks.length > 0) {
    List<VirtualMachineRelocateSpecDiskLocator> diskLocator=new ArrayList<VirtualMachineRelocateSpecDiskLocator>(independentDisks.length);
    for (int i=0; i < independentDisks.length; i++) {
      VirtualMachineRelocateSpecDiskLocator loc=new VirtualMachineRelocateSpecDiskLocator();
      loc.setDatastore(morDs);
      loc.setDiskId(independentDisks[i].getKey());
      loc.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.MOVE_ALL_DISK_BACKINGS_AND_DISALLOW_SHARING.value());
      diskLocator.add(loc);
    }
    rSpec.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.CREATE_NEW_CHILD_DISK_BACKING.value());
    rSpec.getDisk().addAll(diskLocator);
  }
 else {
    rSpec.setDiskMoveType(VirtualMachineRelocateDiskMoveOptions.CREATE_NEW_CHILD_DISK_BACKING.value());
  }
  rSpec.setPool(morResourcePool);
  VirtualMachineCloneSpec cloneSpec=new VirtualMachineCloneSpec();
  cloneSpec.setPowerOn(false);
  cloneSpec.setTemplate(false);
  cloneSpec.setLocation(rSpec);
  cloneSpec.setSnapshot(morBaseSnapshot);
  ManagedObjectReference morTask=_context.getService().cloneVMTask(_mor,morFolder,cloneName,cloneSpec);
  boolean result=_context.getVimClient().waitForTask(morTask);
  if (result) {
    _context.waitForTaskProgressDone(morTask);
    return true;
  }
 else {
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}",0.9897179013973108
106341,"private static void setParentBackingInfo(VirtualDiskFlatVer2BackingInfo backingInfo,Pair<String,ManagedObjectReference>[] parentDatastorePathList){
  VirtualDiskFlatVer2BackingInfo parentBacking=new VirtualDiskFlatVer2BackingInfo();
  parentBacking.setDatastore(parentDatastorePathList[0].second());
  parentBacking.setDiskMode(VirtualDiskMode.PERSISTENT.toString());
  if (parentDatastorePathList.length > 1) {
    Pair<String,ManagedObjectReference>[] nextDatastorePathList=new Pair[parentDatastorePathList.length - 1];
    for (int i=0; i < parentDatastorePathList.length - 1; i++)     nextDatastorePathList[i]=parentDatastorePathList[i + 1];
    setParentBackingInfo(parentBacking,nextDatastorePathList);
  }
  parentBacking.setFileName(parentDatastorePathList[0].first());
  backingInfo.setParent(parentBacking);
}","private static void setParentBackingInfo(VirtualDiskFlatVer2BackingInfo backingInfo,Pair<String,ManagedObjectReference>[] parentDatastorePathList){
  VirtualDiskFlatVer2BackingInfo parentBacking=new VirtualDiskFlatVer2BackingInfo();
  parentBacking.setDatastore(parentDatastorePathList[0].second());
  parentBacking.setDiskMode(VirtualDiskMode.PERSISTENT.value());
  if (parentDatastorePathList.length > 1) {
    Pair<String,ManagedObjectReference>[] nextDatastorePathList=new Pair[parentDatastorePathList.length - 1];
    for (int i=0; i < parentDatastorePathList.length - 1; i++)     nextDatastorePathList[i]=parentDatastorePathList[i + 1];
    setParentBackingInfo(parentBacking,nextDatastorePathList);
  }
  parentBacking.setFileName(parentDatastorePathList[0].first());
  backingInfo.setParent(parentBacking);
}",0.9920489296636086
106342,"public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,Pair<String,ManagedObjectReference>[] vmdkDatastorePathChain,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(vmdkDatastorePathChain[0].second());
  backingInfo.setFileName(vmdkDatastorePathChain[0].first());
  backingInfo.setDiskMode(VirtualDiskMode.PERSISTENT.toString());
  if (vmdkDatastorePathChain.length > 1) {
    Pair<String,ManagedObjectReference>[] parentDisks=new Pair[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}","public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,Pair<String,ManagedObjectReference>[] vmdkDatastorePathChain,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(vmdkDatastorePathChain[0].second());
  backingInfo.setFileName(vmdkDatastorePathChain[0].first());
  backingInfo.setDiskMode(VirtualDiskMode.PERSISTENT.value());
  if (vmdkDatastorePathChain.length > 1) {
    Pair<String,ManagedObjectReference>[] parentDisks=new Pair[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}",0.9953588004284184
106343,"@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  ManagedObjectReference mor=null;
  if (serviceContext != null)   mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals(""String_Node_Str"")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      HostMO hostMo=new HostMO(serviceContext,hosts[0]);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts[0]);
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      ManagedObjectReference[] hosts=(ManagedObjectReference[])serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.length > _maxHostsPerCluster) {
        String msg=""String_Node_Str"" + _maxHostsPerCluster + ""String_Node_Str"";
        s_logger.error(msg);
        throw new DiscoveredWithErrorException(msg);
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}","@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  ManagedObjectReference mor=null;
  if (serviceContext != null)   mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.size() > _maxHostsPerCluster) {
        String msg=""String_Node_Str"" + _maxHostsPerCluster + ""String_Node_Str"";
        s_logger.error(msg);
        throw new DiscoveredWithErrorException(msg);
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}",0.9816933638443937
106344,"private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  PerfCounterInfo[] cInfo=(PerfCounterInfo[])getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (int i=0; i < cInfo.length; ++i) {
    if (""String_Node_Str"".equalsIgnoreCase(cInfo[i].getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(cInfo[i].getNameInfo().getKey())) {
        txPerfCounterInfo=cInfo[i];
      }
      if (""String_Node_Str"".equalsIgnoreCase(cInfo[i].getNameInfo().getKey())) {
        rxPerfCounterInfo=cInfo[i];
      }
    }
  }
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        String maxCpuUsage=null;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            name=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(""String_Node_Str"")) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(""String_Node_Str"")) {
            maxCpuUsage=objProp.getVal().toString();
          }
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList vmNetworkMetrics=new ArrayList();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=(PerfMetricId[])vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
            int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
            sampleDuration=(endMs - beginMs) / 1000;
            List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
            for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
              if (vals.get(vi) instanceof PerfMetricIntSeries) {
                PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                List<Long> perfValues=val.getValue();
                if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                  networkReadKBs=sampleDuration * perfValues.get(3);
                }
                if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                  networkWriteKBs=sampleDuration * perfValues.get(3);
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(Integer.parseInt(maxCpuUsage),networkReadKBs,networkWriteKBs,Integer.parseInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}","private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  List<PerfCounterInfo> cInfo=(List<PerfCounterInfo>)getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (  PerfCounterInfo info : cInfo) {
    if (""String_Node_Str"".equalsIgnoreCase(info.getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        txPerfCounterInfo=info;
      }
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        rxPerfCounterInfo=info;
      }
    }
  }
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        String maxCpuUsage=null;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            name=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(""String_Node_Str"")) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(""String_Node_Str"")) {
            maxCpuUsage=objProp.getVal().toString();
          }
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList vmNetworkMetrics=new ArrayList();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=(PerfMetricId[])vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
            int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
            sampleDuration=(endMs - beginMs) / 1000;
            List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
            for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
              if (vals.get(vi) instanceof PerfMetricIntSeries) {
                PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                List<Long> perfValues=val.getValue();
                if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                  networkReadKBs=sampleDuration * perfValues.get(3);
                }
                if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                  networkWriteKBs=sampleDuration * perfValues.get(3);
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(Integer.parseInt(maxCpuUsage),networkReadKBs,networkWriteKBs,Integer.parseInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}",0.9658718004812952
106345,"@Override public ManagedObjectReference mountDatastore(boolean vmfsDatastore,String poolHostAddress,int poolHostPort,String poolPath,String poolUuid) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ vmfsDatastore+ ""String_Node_Str""+ poolHostAddress+ ""String_Node_Str""+ poolHostPort+ ""String_Node_Str""+ poolPath+ ""String_Node_Str""+ poolUuid);
  ManagedObjectReference morDs=null;
  ManagedObjectReference morDsFirst=null;
  ManagedObjectReference[] hosts=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.length > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      morDs=hostMo.mountDatastore(vmfsDatastore,poolHostAddress,poolHostPort,poolPath,poolUuid);
      if (morDsFirst == null)       morDsFirst=morDs;
      assert(morDsFirst.getValue().equals(morDs.getValue()));
    }
  }
  if (morDs == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    throw new Exception(msg);
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return morDs;
}","@Override public ManagedObjectReference mountDatastore(boolean vmfsDatastore,String poolHostAddress,int poolHostPort,String poolPath,String poolUuid) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ vmfsDatastore+ ""String_Node_Str""+ poolHostAddress+ ""String_Node_Str""+ poolHostPort+ ""String_Node_Str""+ poolPath+ ""String_Node_Str""+ poolUuid);
  ManagedObjectReference morDs=null;
  ManagedObjectReference morDsFirst=null;
  List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.size() > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      morDs=hostMo.mountDatastore(vmfsDatastore,poolHostAddress,poolHostPort,poolPath,poolUuid);
      if (morDsFirst == null)       morDsFirst=morDs;
      assert(morDsFirst.getValue().equals(morDs.getValue()));
    }
  }
  if (morDs == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    throw new Exception(msg);
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return morDs;
}",0.9890368050117464
106346,"@Override public VmwareHypervisorHostResourceSummary getHyperHostResourceSummary() throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue());
  VmwareHypervisorHostResourceSummary summary=new VmwareHypervisorHostResourceSummary();
  ComputeResourceSummary vmwareSummary=(ComputeResourceSummary)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  int cpuNumInCpuThreads=1;
  ManagedObjectReference[] hosts=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.length > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      HostHardwareSummary hardwareSummary=hostMo.getHostHardwareSummary();
      if (hardwareSummary.getNumCpuCores() * hardwareSummary.getNumCpuThreads() > cpuNumInCpuThreads)       cpuNumInCpuThreads=hardwareSummary.getNumCpuCores() * hardwareSummary.getNumCpuThreads();
    }
  }
  summary.setCpuCount(cpuNumInCpuThreads);
  summary.setCpuSpeed(vmwareSummary.getTotalCpu());
  summary.setMemoryBytes(vmwareSummary.getTotalMemory());
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return summary;
}","@Override public VmwareHypervisorHostResourceSummary getHyperHostResourceSummary() throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue());
  VmwareHypervisorHostResourceSummary summary=new VmwareHypervisorHostResourceSummary();
  ComputeResourceSummary vmwareSummary=(ComputeResourceSummary)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  int cpuNumInCpuThreads=1;
  List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.size() > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      HostHardwareSummary hardwareSummary=hostMo.getHostHardwareSummary();
      if (hardwareSummary.getNumCpuCores() * hardwareSummary.getNumCpuThreads() > cpuNumInCpuThreads)       cpuNumInCpuThreads=hardwareSummary.getNumCpuCores() * hardwareSummary.getNumCpuThreads();
    }
  }
  summary.setCpuCount(cpuNumInCpuThreads);
  summary.setCpuSpeed(vmwareSummary.getTotalCpu());
  summary.setMemoryBytes(vmwareSummary.getTotalMemory());
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return summary;
}",0.9887278582930756
106347,"@Override public VmwareHypervisorHostNetworkSummary getHyperHostNetworkSummary(String esxServiceConsolePort) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ esxServiceConsolePort);
  ManagedObjectReference[] hosts=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.length > 0) {
    VmwareHypervisorHostNetworkSummary summary=new HostMO(_context,hosts[0]).getHyperHostNetworkSummary(esxServiceConsolePort);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    return summary;
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return null;
}","@Override public VmwareHypervisorHostNetworkSummary getHyperHostNetworkSummary(String esxServiceConsolePort) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ esxServiceConsolePort);
  List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.size() > 0) {
    VmwareHypervisorHostNetworkSummary summary=new HostMO(_context,hosts.get(0)).getHyperHostNetworkSummary(esxServiceConsolePort);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"");
    return summary;
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  return null;
}",0.9759036144578314
106348,"@Override public void unmountDatastore(String poolUuid) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ poolUuid);
  ManagedObjectReference[] hosts=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.length > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      hostMo.unmountDatastore(poolUuid);
    }
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
}","@Override public void unmountDatastore(String poolUuid) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ poolUuid);
  List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (hosts != null && hosts.size() > 0) {
    for (    ManagedObjectReference morHost : hosts) {
      HostMO hostMo=new HostMO(_context,morHost);
      hostMo.unmountDatastore(poolUuid);
    }
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
}",0.9764309764309764
106349,"public CustomFieldDef[] getFields() throws Exception {
  return (CustomFieldDef[])_context.getVimClient().getDynamicProperty(getMor(),""String_Node_Str"");
}","public List<CustomFieldDef> getFields() throws Exception {
  return (List<CustomFieldDef>)_context.getVimClient().getDynamicProperty(getMor(),""String_Node_Str"");
}",0.949685534591195
106350,"public int getCustomFieldKey(String morType,String fieldName) throws Exception {
  CustomFieldDef[] fields=getFields();
  if (fields != null) {
    for (    CustomFieldDef field : fields) {
      if (field.getName().equals(fieldName) && field.getManagedObjectType().equals(morType))       return field.getKey();
    }
  }
  return 0;
}","public int getCustomFieldKey(String morType,String fieldName) throws Exception {
  List<CustomFieldDef> fields=getFields();
  if (fields != null) {
    for (    CustomFieldDef field : fields) {
      if (field.getName().equals(fieldName) && field.getManagedObjectType().equals(morType))       return field.getKey();
    }
  }
  return 0;
}",0.9881305637982196
106351,"public ManagedObjectReference findDatastoreByExportPath(String exportPath) throws Exception {
  assert(exportPath != null);
  ManagedObjectReference[] datastores=getDatastores();
  if (datastores != null && datastores.length > 0) {
    for (    ManagedObjectReference morDatastore : datastores) {
      DatastoreMO dsMo=new DatastoreMO(_context,morDatastore);
      if (dsMo.getInventoryPath().equals(exportPath))       return morDatastore;
      NasDatastoreInfo info=getNasDatastoreInfo(morDatastore);
      if (info != null) {
        String vmwareUrl=info.getUrl();
        if (vmwareUrl.charAt(vmwareUrl.length() - 1) == '/')         vmwareUrl=vmwareUrl.substring(0,vmwareUrl.length() - 1);
        URI uri=new URI(vmwareUrl);
        if (uri.getPath().equals(""String_Node_Str"" + exportPath))         return morDatastore;
      }
    }
  }
  return null;
}","public ManagedObjectReference findDatastoreByExportPath(String exportPath) throws Exception {
  assert(exportPath != null);
  List<ManagedObjectReference> datastores=getDatastores();
  if (datastores != null && datastores.size() > 0) {
    for (    ManagedObjectReference morDatastore : datastores) {
      DatastoreMO dsMo=new DatastoreMO(_context,morDatastore);
      if (dsMo.getInventoryPath().equals(exportPath))       return morDatastore;
      NasDatastoreInfo info=getNasDatastoreInfo(morDatastore);
      if (info != null) {
        String vmwareUrl=info.getUrl();
        if (vmwareUrl.charAt(vmwareUrl.length() - 1) == '/')         vmwareUrl=vmwareUrl.substring(0,vmwareUrl.length() - 1);
        URI uri=new URI(vmwareUrl);
        if (uri.getPath().equals(""String_Node_Str"" + exportPath))         return morDatastore;
      }
    }
  }
  return null;
}",0.9884125144843569
106352,"public ManagedObjectReference[] getDatastores() throws Exception {
  return (ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}","public List<ManagedObjectReference> getDatastores() throws Exception {
  return (List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}",0.9542857142857144
106353,"public ManagedObjectReference findDatastoreByUrl(String storeUrl) throws Exception {
  assert(storeUrl != null);
  ManagedObjectReference[] datastores=getDatastores();
  if (datastores != null && datastores.length > 0) {
    for (    ManagedObjectReference morDatastore : datastores) {
      NasDatastoreInfo info=getNasDatastoreInfo(morDatastore);
      if (info != null) {
        URI uri=new URI(storeUrl);
        String vmwareStyleUrl=""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath()+ ""String_Node_Str"";
        if (info.getUrl().equals(vmwareStyleUrl))         return morDatastore;
      }
    }
  }
  return null;
}","public ManagedObjectReference findDatastoreByUrl(String storeUrl) throws Exception {
  assert(storeUrl != null);
  List<ManagedObjectReference> datastores=getDatastores();
  if (datastores != null && datastores.size() > 0) {
    for (    ManagedObjectReference morDatastore : datastores) {
      NasDatastoreInfo info=getNasDatastoreInfo(morDatastore);
      if (info != null) {
        URI uri=new URI(storeUrl);
        String vmwareStyleUrl=""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath()+ ""String_Node_Str"";
        if (info.getUrl().equals(vmwareStyleUrl))         return morDatastore;
      }
    }
  }
  return null;
}",0.984472049689441
106354,"public ManagedObjectReference getExistingDataStoreOnHost(boolean vmfsDatastore,String hostAddress,int hostPort,String path,String uuid,HostDatastoreSystemMO hostDatastoreSystemMo){
  ManagedObjectReference[] morArray;
  try {
    morArray=hostDatastoreSystemMo.getDatastores();
  }
 catch (  Exception e) {
    s_logger.info(""String_Node_Str"");
    return null;
  }
  if (morArray.length > 0) {
    int i;
    for (i=0; i < morArray.length; i++) {
      NasDatastoreInfo nasDS;
      try {
        nasDS=hostDatastoreSystemMo.getNasDatastoreInfo(morArray[i]);
        if (nasDS != null) {
          if (nasDS.getNas().getRemoteHost().equalsIgnoreCase(hostAddress) && nasDS.getNas().getRemotePath().equalsIgnoreCase(path)) {
            return morArray[i];
          }
        }
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"");
        return null;
      }
    }
  }
  return null;
}","public ManagedObjectReference getExistingDataStoreOnHost(boolean vmfsDatastore,String hostAddress,int hostPort,String path,String uuid,HostDatastoreSystemMO hostDatastoreSystemMo){
  List<ManagedObjectReference> morArray;
  try {
    morArray=hostDatastoreSystemMo.getDatastores();
  }
 catch (  Exception e) {
    s_logger.info(""String_Node_Str"");
    return null;
  }
  if (morArray.size() > 0) {
    int i;
    for (i=0; i < morArray.size(); i++) {
      NasDatastoreInfo nasDS;
      try {
        nasDS=hostDatastoreSystemMo.getNasDatastoreInfo(morArray.get(i));
        if (nasDS != null) {
          if (nasDS.getNas().getRemoteHost().equalsIgnoreCase(hostAddress) && nasDS.getNas().getRemotePath().equalsIgnoreCase(path)) {
            return morArray.get(i);
          }
        }
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"");
        return null;
      }
    }
  }
  return null;
}",0.971677559912854
106355,"public HostVirtualSwitch[] getHostVirtualSwitch() throws Exception {
  return (HostVirtualSwitch[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}","public List<HostVirtualSwitch> getHostVirtualSwitch() throws Exception {
  return (List<HostVirtualSwitch>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}",0.9534883720930232
106356,"public ManagedObjectReference[] getHostLocalDatastore() throws Exception {
  ManagedObjectReference[] datastores=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  List<ManagedObjectReference> l=new ArrayList<ManagedObjectReference>();
  if (datastores != null) {
    for (    ManagedObjectReference mor : datastores) {
      DatastoreSummary summary=(DatastoreSummary)_context.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      if (summary.getType().equalsIgnoreCase(""String_Node_Str"") && !summary.isMultipleHostAccess())       l.add(mor);
    }
  }
  return l.toArray(new ManagedObjectReference[1]);
}","public ManagedObjectReference[] getHostLocalDatastore() throws Exception {
  List<ManagedObjectReference> datastores=(List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  List<ManagedObjectReference> l=new ArrayList<ManagedObjectReference>();
  if (datastores != null) {
    for (    ManagedObjectReference mor : datastores) {
      DatastoreSummary summary=(DatastoreSummary)_context.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      if (summary.getType().equalsIgnoreCase(""String_Node_Str"") && !summary.isMultipleHostAccess())       l.add(mor);
    }
  }
  return l.toArray(new ManagedObjectReference[1]);
}",0.98796992481203
106357,"@Override public VmwareHypervisorHostNetworkSummary getHyperHostNetworkSummary(String managementPortGroup) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ managementPortGroup);
  VmwareHypervisorHostNetworkSummary summary=new VmwareHypervisorHostNetworkSummary();
  if (this.getHostType() == VmwareHostType.ESXi) {
    VirtualNicManagerNetConfig[] netConfigs=(VirtualNicManagerNetConfig[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
    assert(netConfigs != null);
    for (int i=0; i < netConfigs.length; i++) {
      if (netConfigs[i].getNicType().equals(""String_Node_Str"")) {
        for (        HostVirtualNic nic : netConfigs[i].getCandidateVnic()) {
          if (nic.getPortgroup().equals(managementPortGroup)) {
            summary.setHostIp(nic.getSpec().getIp().getIpAddress());
            summary.setHostNetmask(nic.getSpec().getIp().getSubnetMask());
            summary.setHostMacAddress(nic.getSpec().getMac());
            if (s_logger.isTraceEnabled())             s_logger.trace(""String_Node_Str"");
            return summary;
          }
        }
      }
    }
  }
 else {
    HostVirtualNic[] hostVNics=(HostVirtualNic[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
    if (hostVNics != null) {
      for (      HostVirtualNic vnic : hostVNics) {
        if (vnic.getPortgroup().equals(managementPortGroup)) {
          summary.setHostIp(vnic.getSpec().getIp().getIpAddress());
          summary.setHostNetmask(vnic.getSpec().getIp().getSubnetMask());
          summary.setHostMacAddress(vnic.getSpec().getMac());
          if (s_logger.isTraceEnabled())           s_logger.trace(""String_Node_Str"");
          return summary;
        }
      }
    }
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  throw new Exception(""String_Node_Str"" + managementPortGroup);
}","@Override public VmwareHypervisorHostNetworkSummary getHyperHostNetworkSummary(String managementPortGroup) throws Exception {
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + _mor.getValue() + ""String_Node_Str""+ managementPortGroup);
  VmwareHypervisorHostNetworkSummary summary=new VmwareHypervisorHostNetworkSummary();
  if (this.getHostType() == VmwareHostType.ESXi) {
    List<VirtualNicManagerNetConfig> netConfigs=(List<VirtualNicManagerNetConfig>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
    assert(netConfigs != null);
    for (    VirtualNicManagerNetConfig netConfig : netConfigs) {
      if (netConfig.getNicType().equals(""String_Node_Str"")) {
        for (        HostVirtualNic nic : netConfig.getCandidateVnic()) {
          if (nic.getPortgroup().equals(managementPortGroup)) {
            summary.setHostIp(nic.getSpec().getIp().getIpAddress());
            summary.setHostNetmask(nic.getSpec().getIp().getSubnetMask());
            summary.setHostMacAddress(nic.getSpec().getMac());
            if (s_logger.isTraceEnabled())             s_logger.trace(""String_Node_Str"");
            return summary;
          }
        }
      }
    }
  }
 else {
    List<HostVirtualNic> hostVNics=(List<HostVirtualNic>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
    if (hostVNics != null) {
      for (      HostVirtualNic vnic : hostVNics) {
        if (vnic.getPortgroup().equals(managementPortGroup)) {
          summary.setHostIp(vnic.getSpec().getIp().getIpAddress());
          summary.setHostNetmask(vnic.getSpec().getIp().getSubnetMask());
          summary.setHostMacAddress(vnic.getSpec().getMac());
          if (s_logger.isTraceEnabled())           s_logger.trace(""String_Node_Str"");
          return summary;
        }
      }
    }
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"");
  throw new Exception(""String_Node_Str"" + managementPortGroup);
}",0.6567470497691124
106358,"public VirtualNicManagerNetConfig[] getHostVirtualNicManagerNetConfig() throws Exception {
  VirtualNicManagerNetConfig[] netConfigs=(VirtualNicManagerNetConfig[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  return netConfigs;
}","public List<VirtualNicManagerNetConfig> getHostVirtualNicManagerNetConfig() throws Exception {
  return (List<VirtualNicManagerNetConfig>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}",0.8130434782608695
106359,"public HostVirtualSwitch getHostVirtualSwitchByName(String name) throws Exception {
  HostVirtualSwitch[] switches=(HostVirtualSwitch[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (switches != null) {
    for (    HostVirtualSwitch vswitch : switches) {
      if (vswitch.getName().equals(name))       return vswitch;
    }
  }
  return null;
}","public HostVirtualSwitch getHostVirtualSwitchByName(String name) throws Exception {
  List<HostVirtualSwitch> switches=(List<HostVirtualSwitch>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (switches != null) {
    for (    HostVirtualSwitch vswitch : switches) {
      if (vswitch.getName().equals(name))       return vswitch;
    }
  }
  return null;
}",0.8885941644562334
106360,"public HostIpRouteEntry[] getHostIpRouteEntries() throws Exception {
  HostIpRouteEntry[] entries=(HostIpRouteEntry[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  return entries;
}","public List<HostIpRouteEntry> getHostIpRouteEntries() throws Exception {
  return (List<HostIpRouteEntry>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}",0.8157894736842105
106361,"public HostVirtualSwitch getVirtualSwitchByName(String vSwitchName) throws Exception {
  HostVirtualSwitch[] vSwitchs=getHostVirtualSwitch();
  if (vSwitchs != null) {
    for (    HostVirtualSwitch vSwitch : vSwitchs) {
      if (vSwitch.getName().equals(vSwitchName))       return vSwitch;
    }
  }
  return null;
}","public HostVirtualSwitch getVirtualSwitchByName(String vSwitchName) throws Exception {
  List<HostVirtualSwitch> vSwitchs=getHostVirtualSwitch();
  if (vSwitchs != null) {
    for (    HostVirtualSwitch vSwitch : vSwitchs) {
      if (vSwitch.getName().equals(vSwitchName))       return vSwitch;
    }
  }
  return null;
}",0.9875
106362,"public ManagedObjectReference[] getVmMorsOnNetwork(String portGroupName) throws Exception {
  ManagedObjectReference morNetwork=getNetworkMor(portGroupName);
  if (morNetwork != null)   return (ManagedObjectReference[])_context.getVimClient().getDynamicProperty(morNetwork,""String_Node_Str"");
  return null;
}","public List<ManagedObjectReference> getVmMorsOnNetwork(String portGroupName) throws Exception {
  ManagedObjectReference morNetwork=getNetworkMor(portGroupName);
  if (morNetwork != null)   return (List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(morNetwork,""String_Node_Str"");
  return null;
}",0.97444089456869
106363,"public String getPortGroupNameByNicType(HostVirtualNicType nicType) throws Exception {
  assert(nicType != null);
  VirtualNicManagerNetConfig[] netConfigs=(VirtualNicManagerNetConfig[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (netConfigs != null) {
    for (    VirtualNicManagerNetConfig netConfig : netConfigs) {
      if (netConfig.getNicType().equals(nicType.toString())) {
        List<HostVirtualNic> nics=netConfig.getCandidateVnic();
        if (nics != null) {
          for (          HostVirtualNic nic : nics) {
            return nic.getPortgroup();
          }
        }
      }
    }
  }
  if (nicType == HostVirtualNicType.management) {
    HostNetworkInfo netInfo=getHostNetworkInfo();
    assert(netInfo != null);
    List<HostVirtualNic> nics=netInfo.getConsoleVnic();
    if (nics != null) {
      for (      HostVirtualNic nic : nics) {
        return nic.getPortgroup();
      }
    }
  }
  return null;
}","public String getPortGroupNameByNicType(HostVirtualNicType nicType) throws Exception {
  assert(nicType != null);
  List<VirtualNicManagerNetConfig> netConfigs=(List<VirtualNicManagerNetConfig>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  if (netConfigs != null) {
    for (    VirtualNicManagerNetConfig netConfig : netConfigs) {
      if (netConfig.getNicType().equals(nicType.toString())) {
        List<HostVirtualNic> nics=netConfig.getCandidateVnic();
        if (nics != null) {
          for (          HostVirtualNic nic : nics) {
            return nic.getPortgroup();
          }
        }
      }
    }
  }
  if (nicType == HostVirtualNicType.management) {
    HostNetworkInfo netInfo=getHostNetworkInfo();
    assert(netInfo != null);
    List<HostVirtualNic> nics=netInfo.getConsoleVnic();
    if (nics != null) {
      for (      HostVirtualNic nic : nics) {
        return nic.getPortgroup();
      }
    }
  }
  return null;
}",0.9782157676348548
106364,"@Override public String getHyperHostDefaultGateway() throws Exception {
  HostIpRouteEntry[] entries=getHostIpRouteEntries();
  for (  HostIpRouteEntry entry : entries) {
    if (entry.getNetwork().equalsIgnoreCase(""String_Node_Str""))     return entry.getGateway();
  }
  throw new Exception(""String_Node_Str"");
}","@Override public String getHyperHostDefaultGateway() throws Exception {
  List<HostIpRouteEntry> entries=getHostIpRouteEntries();
  for (  HostIpRouteEntry entry : entries) {
    if (entry.getNetwork().equalsIgnoreCase(""String_Node_Str""))     return entry.getGateway();
  }
  throw new Exception(""String_Node_Str"");
}",0.9873015873015872
106365,"public static Pair<ManagedObjectReference,String> prepareNetwork(String vSwitchName,String namePrefix,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(namePrefix,vlanId,networkRateMbps,vSwitchName);
  HostNetworkSecurityPolicy secPolicy=null;
  if (namePrefix.equalsIgnoreCase(""String_Node_Str"")) {
    secPolicy=new HostNetworkSecurityPolicy();
    secPolicy.setAllowPromiscuous(Boolean.TRUE);
    secPolicy.setForgedTransmits(Boolean.TRUE);
    secPolicy.setMacChanges(Boolean.TRUE);
  }
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,secPolicy,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,secPolicy,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.getValue());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getVimClient().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.getValue().equals(hostMo.getMor().getValue())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareNetwork(vSwitchName,namePrefix,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}","public static Pair<ManagedObjectReference,String> prepareNetwork(String vSwitchName,String namePrefix,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(namePrefix,vlanId,networkRateMbps,vSwitchName);
  HostNetworkSecurityPolicy secPolicy=null;
  if (namePrefix.equalsIgnoreCase(""String_Node_Str"")) {
    secPolicy=new HostNetworkSecurityPolicy();
    secPolicy.setAllowPromiscuous(Boolean.TRUE);
    secPolicy.setForgedTransmits(Boolean.TRUE);
    secPolicy.setMacChanges(Boolean.TRUE);
  }
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,secPolicy,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,secPolicy,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.getValue());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            List<ManagedObjectReference> hosts=(List<ManagedObjectReference>)hostMo.getContext().getVimClient().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.getValue().equals(hostMo.getMor().getValue())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareNetwork(vSwitchName,namePrefix,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}",0.998068099492876
106366,"public ManagedObjectReference[] getVMsOnNetwork() throws Exception {
  ManagedObjectReference[] vms=(ManagedObjectReference[])_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
  return vms;
}","public List<ManagedObjectReference> getVMsOnNetwork() throws Exception {
  return (List<ManagedObjectReference>)_context.getVimClient().getDynamicProperty(_mor,""String_Node_Str"");
}",0.8256410256410256
106367,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts.size() >= _vmwareMgr.getMaxHostsPerCluster()) {
    String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ _vmwareMgr.getMaxHostsPerCluster()+ ""String_Node_Str"";
    s_logger.error(msg);
    throw new DiscoveredWithErrorException(msg);
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  if (_vmwareMgr.getNexusVSwitchGlobalParameter()) {
    DataCenterVO zone=_dcDao.findById(dcId);
    NetworkType zoneType=zone.getNetworkType();
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (_vmwareMgr.getNexusVSwitchGlobalParameter()) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath()));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath()));
      return null;
    }
    ManagedObjectReference morCluster=null;
    Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath()));
      if (morCluster == null || !morCluster.getType().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.getEnabled() != null && dasConfig.getEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getType() + ""String_Node_Str"" + morHost.get_value()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      if (publicTrafficLabel != null) {
        params.put(""String_Node_Str"",publicTrafficLabel);
      }
      if (guestTrafficLabel != null) {
        params.put(""String_Node_Str"",guestTrafficLabel);
      }
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
    _clusterDao.update(clusterId,cluster);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost());
    return null;
  }
 finally {
    if (context != null)     context.close();
  }
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts.size() >= _vmwareMgr.getMaxHostsPerCluster()) {
    String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ _vmwareMgr.getMaxHostsPerCluster()+ ""String_Node_Str"";
    s_logger.error(msg);
    throw new DiscoveredWithErrorException(msg);
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  if (_vmwareMgr.getNexusVSwitchGlobalParameter()) {
    DataCenterVO zone=_dcDao.findById(dcId);
    NetworkType zoneType=zone.getNetworkType();
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (_vmwareMgr.getNexusVSwitchGlobalParameter()) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath()));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath()));
      return null;
    }
    ManagedObjectReference morCluster=null;
    Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath()));
      if (morCluster == null || !morCluster.getType().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.isEnabled() != null && dasConfig.isEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getType() + ""String_Node_Str"" + morHost.getValue()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      if (publicTrafficLabel != null) {
        params.put(""String_Node_Str"",publicTrafficLabel);
      }
      if (guestTrafficLabel != null) {
        params.put(""String_Node_Str"",guestTrafficLabel);
      }
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
    _clusterDao.update(clusterId,cluster);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost());
    return null;
  }
 finally {
    if (context != null)     context.close();
  }
}",0.9989587505006008
106368,"private boolean validateDiscoveredHosts(VmwareContext context,ManagedObjectReference morCluster,List<ManagedObjectReference> morHosts) throws Exception {
  if (morCluster == null) {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getServiceUtil().getDynamicProperty(morHost,""String_Node_Str"");
      if (morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
    }
  }
 else {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getServiceUtil().getDynamicProperty(morHost,""String_Node_Str"");
      if (!morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
      if (!morParent.get_value().equals(morCluster.get_value()))       return false;
    }
  }
  return true;
}","private boolean validateDiscoveredHosts(VmwareContext context,ManagedObjectReference morCluster,List<ManagedObjectReference> morHosts) throws Exception {
  if (morCluster == null) {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
    }
  }
 else {
    for (    ManagedObjectReference morHost : morHosts) {
      ManagedObjectReference morParent=(ManagedObjectReference)context.getVimClient().getDynamicProperty(morHost,""String_Node_Str"");
      if (!morParent.getType().equalsIgnoreCase(""String_Node_Str""))       return false;
      if (!morParent.getValue().equals(morCluster.getValue()))       return false;
    }
  }
  return true;
}",0.9735327963176064
106369,"public static void initDataSource(String propsFileName){
  try {
    File dbPropsFile=PropertiesUtil.findConfigFile(propsFileName);
    final Properties dbProps;
    if (EncryptionSecretKeyChecker.useEncryption()) {
      StandardPBEStringEncryptor encryptor=EncryptionSecretKeyChecker.getEncryptor();
      dbProps=new EncryptableProperties(encryptor);
    }
 else {
      dbProps=new Properties();
    }
    try {
      dbProps.load(new FileInputStream(dbPropsFile));
    }
 catch (    IOException e) {
      s_logger.fatal(""String_Node_Str"",e);
      return;
    }
catch (    NullPointerException e) {
      s_logger.fatal(""String_Node_Str"" + propsFileName + ""String_Node_Str""+ e);
      return;
    }
    final int cloudMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final int cloudMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final long cloudMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final String cloudUsername=dbProps.getProperty(""String_Node_Str"");
    final String cloudPassword=dbProps.getProperty(""String_Node_Str"");
    final String cloudHost=dbProps.getProperty(""String_Node_Str"");
    final int cloudPort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final String cloudDbName=dbProps.getProperty(""String_Node_Str"");
    final boolean cloudAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final String cloudValidationQuery=dbProps.getProperty(""String_Node_Str"");
    final String cloudIsolationLevel=dbProps.getProperty(""String_Node_Str"");
    int isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    if (cloudIsolationLevel == null) {
      isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_SERIALIZABLE;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;
    }
 else {
      s_logger.warn(""String_Node_Str"" + cloudIsolationLevel + ""String_Node_Str"");
    }
    final boolean cloudTestOnBorrow=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final boolean cloudTestWhileIdle=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final long cloudTimeBtwEvictionRunsMillis=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final long cloudMinEvcitableIdleTimeMillis=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final boolean cloudPoolPreparedStatements=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final String url=dbProps.getProperty(""String_Node_Str"");
    final boolean useSSL=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    if (useSSL) {
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
    }
    String regionId=dbProps.getProperty(""String_Node_Str"");
    if (regionId == null) {
      s_region_id=1;
    }
 else {
      s_region_id=Integer.parseInt(regionId);
    }
    final GenericObjectPool cloudConnectionPool=new GenericObjectPool(null,cloudMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,cloudMaxWait,cloudMaxIdle,cloudTestOnBorrow,false,cloudTimeBtwEvictionRunsMillis,1,cloudMinEvcitableIdleTimeMillis,cloudTestWhileIdle);
    final ConnectionFactory cloudConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + cloudHost + ""String_Node_Str""+ cloudPort+ ""String_Node_Str""+ cloudDbName+ ""String_Node_Str""+ cloudAutoReconnect+ (url != null ? ""String_Node_Str"" + url : ""String_Node_Str"")+ (useSSL ? ""String_Node_Str"" : ""String_Node_Str""),cloudUsername,cloudPassword);
    final KeyedObjectPoolFactory poolableObjFactory=(cloudPoolPreparedStatements ? new StackKeyedObjectPoolFactory() : null);
    final PoolableConnectionFactory cloudPoolableConnectionFactory=new PoolableConnectionFactory(cloudConnectionFactory,cloudConnectionPool,poolableObjFactory,cloudValidationQuery,false,false,isolationLevel);
    s_ds=new PoolingDataSource(cloudPoolableConnectionFactory.getPool());
    final int usageMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final int usageMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final long usageMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final String usageUsername=dbProps.getProperty(""String_Node_Str"");
    final String usagePassword=dbProps.getProperty(""String_Node_Str"");
    final String usageHost=dbProps.getProperty(""String_Node_Str"");
    final int usagePort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final String usageDbName=dbProps.getProperty(""String_Node_Str"");
    final boolean usageAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final GenericObjectPool usageConnectionPool=new GenericObjectPool(null,usageMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,usageMaxWait,usageMaxIdle);
    final ConnectionFactory usageConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + usageHost + ""String_Node_Str""+ usagePort+ ""String_Node_Str""+ usageDbName+ ""String_Node_Str""+ usageAutoReconnect,usageUsername,usagePassword);
    final PoolableConnectionFactory usagePoolableConnectionFactory=new PoolableConnectionFactory(usageConnectionFactory,usageConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
    s_usageDS=new PoolingDataSource(usagePoolableConnectionFactory.getPool());
    final String awsapiDbName=dbProps.getProperty(""String_Node_Str"");
    final GenericObjectPool awsapiConnectionPool=new GenericObjectPool(null,usageMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,usageMaxWait,usageMaxIdle);
    final ConnectionFactory awsapiConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + cloudHost + ""String_Node_Str""+ cloudPort+ ""String_Node_Str""+ awsapiDbName+ ""String_Node_Str""+ usageAutoReconnect,cloudUsername,cloudPassword);
    final PoolableConnectionFactory awsapiPoolableConnectionFactory=new PoolableConnectionFactory(awsapiConnectionFactory,awsapiConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
    s_awsapiDS=new PoolingDataSource(awsapiPoolableConnectionFactory.getPool());
    try {
      final int simulatorMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final int simulatorMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final long simulatorMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
      final String simulatorUsername=dbProps.getProperty(""String_Node_Str"");
      final String simulatorPassword=dbProps.getProperty(""String_Node_Str"");
      final String simulatorHost=dbProps.getProperty(""String_Node_Str"");
      final int simulatorPort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final String simulatorDbName=dbProps.getProperty(""String_Node_Str"");
      final boolean simulatorAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
      final GenericObjectPool simulatorConnectionPool=new GenericObjectPool(null,simulatorMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,simulatorMaxWait,simulatorMaxIdle);
      final ConnectionFactory simulatorConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + simulatorHost + ""String_Node_Str""+ simulatorPort+ ""String_Node_Str""+ simulatorDbName+ ""String_Node_Str""+ simulatorAutoReconnect,simulatorUsername,simulatorPassword);
      final PoolableConnectionFactory simulatorPoolableConnectionFactory=new PoolableConnectionFactory(simulatorConnectionFactory,simulatorConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
      s_simulatorDS=new PoolingDataSource(simulatorPoolableConnectionFactory.getPool());
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"");
    }
  }
 catch (  final Exception e) {
    s_ds=getDefaultDataSource(""String_Node_Str"");
    s_usageDS=getDefaultDataSource(""String_Node_Str"");
    s_simulatorDS=getDefaultDataSource(""String_Node_Str"");
    s_logger.warn(""String_Node_Str"",e);
  }
}","public static void initDataSource(String propsFileName){
  try {
    File dbPropsFile=PropertiesUtil.findConfigFile(propsFileName);
    final Properties dbProps;
    if (EncryptionSecretKeyChecker.useEncryption()) {
      StandardPBEStringEncryptor encryptor=EncryptionSecretKeyChecker.getEncryptor();
      dbProps=new EncryptableProperties(encryptor);
    }
 else {
      dbProps=new Properties();
    }
    try {
      dbProps.load(new FileInputStream(dbPropsFile));
    }
 catch (    IOException e) {
      s_logger.fatal(""String_Node_Str"",e);
      return;
    }
catch (    NullPointerException e) {
      s_logger.fatal(""String_Node_Str"" + propsFileName);
      return;
    }
    final int cloudMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final int cloudMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final long cloudMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final String cloudUsername=dbProps.getProperty(""String_Node_Str"");
    final String cloudPassword=dbProps.getProperty(""String_Node_Str"");
    final String cloudHost=dbProps.getProperty(""String_Node_Str"");
    final int cloudPort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final String cloudDbName=dbProps.getProperty(""String_Node_Str"");
    final boolean cloudAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final String cloudValidationQuery=dbProps.getProperty(""String_Node_Str"");
    final String cloudIsolationLevel=dbProps.getProperty(""String_Node_Str"");
    int isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    if (cloudIsolationLevel == null) {
      isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_SERIALIZABLE;
    }
 else     if (cloudIsolationLevel.equalsIgnoreCase(""String_Node_Str"")) {
      isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;
    }
 else {
      s_logger.warn(""String_Node_Str"" + cloudIsolationLevel + ""String_Node_Str"");
    }
    final boolean cloudTestOnBorrow=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final boolean cloudTestWhileIdle=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final long cloudTimeBtwEvictionRunsMillis=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final long cloudMinEvcitableIdleTimeMillis=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final boolean cloudPoolPreparedStatements=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final String url=dbProps.getProperty(""String_Node_Str"");
    final boolean useSSL=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    if (useSSL) {
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",dbProps.getProperty(""String_Node_Str""));
    }
    String regionId=dbProps.getProperty(""String_Node_Str"");
    if (regionId == null) {
      s_region_id=1;
    }
 else {
      s_region_id=Integer.parseInt(regionId);
    }
    final GenericObjectPool cloudConnectionPool=new GenericObjectPool(null,cloudMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,cloudMaxWait,cloudMaxIdle,cloudTestOnBorrow,false,cloudTimeBtwEvictionRunsMillis,1,cloudMinEvcitableIdleTimeMillis,cloudTestWhileIdle);
    final ConnectionFactory cloudConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + cloudHost + ""String_Node_Str""+ cloudPort+ ""String_Node_Str""+ cloudDbName+ ""String_Node_Str""+ cloudAutoReconnect+ (url != null ? ""String_Node_Str"" + url : ""String_Node_Str"")+ (useSSL ? ""String_Node_Str"" : ""String_Node_Str""),cloudUsername,cloudPassword);
    final KeyedObjectPoolFactory poolableObjFactory=(cloudPoolPreparedStatements ? new StackKeyedObjectPoolFactory() : null);
    final PoolableConnectionFactory cloudPoolableConnectionFactory=new PoolableConnectionFactory(cloudConnectionFactory,cloudConnectionPool,poolableObjFactory,cloudValidationQuery,false,false,isolationLevel);
    s_ds=new PoolingDataSource(cloudPoolableConnectionFactory.getPool());
    final int usageMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final int usageMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final long usageMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
    final String usageUsername=dbProps.getProperty(""String_Node_Str"");
    final String usagePassword=dbProps.getProperty(""String_Node_Str"");
    final String usageHost=dbProps.getProperty(""String_Node_Str"");
    final int usagePort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
    final String usageDbName=dbProps.getProperty(""String_Node_Str"");
    final boolean usageAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
    final GenericObjectPool usageConnectionPool=new GenericObjectPool(null,usageMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,usageMaxWait,usageMaxIdle);
    final ConnectionFactory usageConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + usageHost + ""String_Node_Str""+ usagePort+ ""String_Node_Str""+ usageDbName+ ""String_Node_Str""+ usageAutoReconnect,usageUsername,usagePassword);
    final PoolableConnectionFactory usagePoolableConnectionFactory=new PoolableConnectionFactory(usageConnectionFactory,usageConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
    s_usageDS=new PoolingDataSource(usagePoolableConnectionFactory.getPool());
    final String awsapiDbName=dbProps.getProperty(""String_Node_Str"");
    final GenericObjectPool awsapiConnectionPool=new GenericObjectPool(null,usageMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,usageMaxWait,usageMaxIdle);
    final ConnectionFactory awsapiConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + cloudHost + ""String_Node_Str""+ cloudPort+ ""String_Node_Str""+ awsapiDbName+ ""String_Node_Str""+ usageAutoReconnect,cloudUsername,cloudPassword);
    final PoolableConnectionFactory awsapiPoolableConnectionFactory=new PoolableConnectionFactory(awsapiConnectionFactory,awsapiConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
    s_awsapiDS=new PoolingDataSource(awsapiPoolableConnectionFactory.getPool());
    try {
      final int simulatorMaxActive=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final int simulatorMaxIdle=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final long simulatorMaxWait=Long.parseLong(dbProps.getProperty(""String_Node_Str""));
      final String simulatorUsername=dbProps.getProperty(""String_Node_Str"");
      final String simulatorPassword=dbProps.getProperty(""String_Node_Str"");
      final String simulatorHost=dbProps.getProperty(""String_Node_Str"");
      final int simulatorPort=Integer.parseInt(dbProps.getProperty(""String_Node_Str""));
      final String simulatorDbName=dbProps.getProperty(""String_Node_Str"");
      final boolean simulatorAutoReconnect=Boolean.parseBoolean(dbProps.getProperty(""String_Node_Str""));
      final GenericObjectPool simulatorConnectionPool=new GenericObjectPool(null,simulatorMaxActive,GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION,simulatorMaxWait,simulatorMaxIdle);
      final ConnectionFactory simulatorConnectionFactory=new DriverManagerConnectionFactory(""String_Node_Str"" + simulatorHost + ""String_Node_Str""+ simulatorPort+ ""String_Node_Str""+ simulatorDbName+ ""String_Node_Str""+ simulatorAutoReconnect,simulatorUsername,simulatorPassword);
      final PoolableConnectionFactory simulatorPoolableConnectionFactory=new PoolableConnectionFactory(simulatorConnectionFactory,simulatorConnectionPool,new StackKeyedObjectPoolFactory(),null,false,false);
      s_simulatorDS=new PoolingDataSource(simulatorPoolableConnectionFactory.getPool());
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"");
    }
  }
 catch (  final Exception e) {
    s_ds=getDefaultDataSource(""String_Node_Str"");
    s_usageDS=getDefaultDataSource(""String_Node_Str"");
    s_simulatorDS=getDefaultDataSource(""String_Node_Str"");
    s_logger.warn(""String_Node_Str"",e);
  }
}",0.9986696743594192
106370,"private Pair<List<StoragePoolJoinVO>,Integer> searchForStoragePoolsInternal(ListStoragePoolsCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  Object id=cmd.getId();
  Object name=cmd.getStoragePoolName();
  Object path=cmd.getPath();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object address=cmd.getIpAddress();
  Object keyword=cmd.getKeyword();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(StoragePoolJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<StoragePoolJoinVO> sb=_poolJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostAddress(),SearchCriteria.Op.EQ);
  SearchCriteria<StoragePoolJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<StoragePoolJoinVO> ssc=_poolJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (path != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.EQ,path);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.EQ,pod);
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.EQ,address);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",SearchCriteria.Op.EQ,cluster);
  }
  Pair<List<StoragePoolJoinVO>,Integer> uniquePoolPair=_poolJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniquePoolPair.second();
  if (count.intValue() == 0) {
    return uniquePoolPair;
  }
  List<StoragePoolJoinVO> uniquePools=uniquePoolPair.first();
  Long[] vrIds=new Long[uniquePools.size()];
  int i=0;
  for (  StoragePoolJoinVO v : uniquePools) {
    vrIds[i++]=v.getId();
  }
  List<StoragePoolJoinVO> vrs=_poolJoinDao.searchByIds(vrIds);
  return new Pair<List<StoragePoolJoinVO>,Integer>(vrs,count);
}","private Pair<List<StoragePoolJoinVO>,Integer> searchForStoragePoolsInternal(ListStoragePoolsCmd cmd){
  Long zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),cmd.getZoneId());
  Object id=cmd.getId();
  Object name=cmd.getStoragePoolName();
  Object path=cmd.getPath();
  Object pod=cmd.getPodId();
  Object cluster=cmd.getClusterId();
  Object address=cmd.getIpAddress();
  Object keyword=cmd.getKeyword();
  Long startIndex=cmd.getStartIndex();
  Long pageSize=cmd.getPageSizeVal();
  Filter searchFilter=new Filter(StoragePoolJoinVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<StoragePoolJoinVO> sb=_poolJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getId());
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getZoneId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostAddress(),SearchCriteria.Op.EQ);
  SearchCriteria<StoragePoolJoinVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<StoragePoolJoinVO> ssc=_poolJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (path != null) {
    sc.setParameters(""String_Node_Str"",path);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",address);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",cluster);
  }
  Pair<List<StoragePoolJoinVO>,Integer> uniquePoolPair=_poolJoinDao.searchAndCount(sc,searchFilter);
  Integer count=uniquePoolPair.second();
  if (count.intValue() == 0) {
    return uniquePoolPair;
  }
  List<StoragePoolJoinVO> uniquePools=uniquePoolPair.first();
  Long[] vrIds=new Long[uniquePools.size()];
  int i=0;
  for (  StoragePoolJoinVO v : uniquePools) {
    vrIds[i++]=v.getId();
  }
  List<StoragePoolJoinVO> vrs=_poolJoinDao.searchByIds(vrIds);
  return new Pair<List<StoragePoolJoinVO>,Integer>(vrs,count);
}",0.8918539325842697
106371,"@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}","@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getZoneUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}",0.9995913363302004
106372,"/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override @DB public void init(ServletConfig config) throws ServletException {
  try {
    SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
    ConfigurationHelper.preConfigureConfigPathFromServletContext(config.getServletContext());
    String value=csDao.getConfigValue(ENABLE_EC2_API);
    if (value != null) {
      isEC2APIEnabled=Boolean.valueOf(value);
    }
    logger.info(""String_Node_Str"" + value);
  }
 catch (  Exception e) {
    throw new ServletException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override @DB public void init(ServletConfig config) throws ServletException {
  try {
    LogUtils.initLog4j(""String_Node_Str"");
    SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
    ConfigurationHelper.preConfigureConfigPathFromServletContext(config.getServletContext());
    ComponentContext.initComponentsLifeCycle();
    String value=csDao.getConfigValue(ENABLE_EC2_API);
    if (value != null) {
      isEC2APIEnabled=Boolean.valueOf(value);
    }
    logger.info(""String_Node_Str"" + value);
  }
 catch (  Exception e) {
    throw new ServletException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.936496859734822
106373,"/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override public void init(ServletConfig config) throws ServletException {
  initComponent();
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  Properties EC2Prop=null;
  if (null != propertiesFile) {
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
    EC2Prop=new Properties();
    try {
      EC2Prop.load(new FileInputStream(propertiesFile));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
    String keystore=EC2Prop.getProperty(""String_Node_Str"");
    keystorePassword=EC2Prop.getProperty(""String_Node_Str"");
    wsdlVersion=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    version=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    String installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getProperty(""String_Node_Str"");
    String webappPath=config.getServletContext().getRealPath(""String_Node_Str"");
    pathToKeystore=new String(webappPath + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ keystore);
  }
}","/** 
 * We build the path to where the keystore holding the WS-Security X509 certificates are stored.
 */
@Override public void init(ServletConfig config) throws ServletException {
  SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
  File propertiesFile=ConfigurationHelper.findConfigurationFile(""String_Node_Str"");
  Properties EC2Prop=null;
  if (null != propertiesFile) {
    logger.info(""String_Node_Str"" + propertiesFile.getAbsolutePath());
    EC2Prop=new Properties();
    try {
      EC2Prop.load(new FileInputStream(propertiesFile));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"" + propertiesFile.getAbsolutePath(),e);
    }
    String keystore=EC2Prop.getProperty(""String_Node_Str"");
    keystorePassword=EC2Prop.getProperty(""String_Node_Str"");
    wsdlVersion=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    version=EC2Prop.getProperty(""String_Node_Str"",""String_Node_Str"");
    String installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getenv(""String_Node_Str"");
    if (installedPath == null)     installedPath=System.getProperty(""String_Node_Str"");
    String webappPath=config.getServletContext().getRealPath(""String_Node_Str"");
    pathToKeystore=new String(webappPath + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ keystore);
  }
}",0.9648476732507532
106374,"@Override public void init(ServletConfig config) throws ServletException {
  try {
    ConfigurationHelper.preConfigureConfigPathFromServletContext(config.getServletContext());
    String value=csDao.getConfigValue(ENABLE_S3_API);
    if (value != null) {
      isS3APIEnabled=Boolean.valueOf(value);
    }
    logger.info(""String_Node_Str"" + value);
  }
 catch (  Exception e) {
    throw new ServletException(""String_Node_Str"" + e.getMessage());
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  try {
    SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,config.getServletContext());
    ConfigurationHelper.preConfigureConfigPathFromServletContext(config.getServletContext());
    String value=csDao.getConfigValue(ENABLE_S3_API);
    if (value != null) {
      isS3APIEnabled=Boolean.valueOf(value);
    }
    logger.info(""String_Node_Str"" + value);
  }
 catch (  Exception e) {
    throw new ServletException(""String_Node_Str"" + e.getMessage());
  }
}",0.897029702970297
106375,"protected ServiceProvider() throws IOException {
  Transaction txn=Transaction.open(Transaction.AWSAPI_DB);
  txn.close();
  engine=new S3Engine();
  EC2_engine=new EC2Engine();
  serviceMap.put(AmazonS3SkeletonInterface.class,new S3SerializableServiceImplementation(engine));
  serviceMap.put(AmazonEC2SkeletonInterface.class,new EC2SoapServiceImpl(EC2_engine));
}","protected ServiceProvider() throws IOException {
  Transaction txn=Transaction.open(Transaction.AWSAPI_DB);
  txn.close();
  serviceMap.put(AmazonS3SkeletonInterface.class,new S3SerializableServiceImplementation(engine));
  serviceMap.put(AmazonEC2SkeletonInterface.class,new EC2SoapServiceImpl(EC2_engine));
}",0.4444444444444444
106376,"public synchronized static ServiceProvider getInstance(){
  if (instance == null) {
    try {
      instance=new ServiceProvider();
      instance.initialize();
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
    }
 finally {
    }
  }
  return instance;
}","public synchronized static ServiceProvider getInstance(){
  return instance;
}",0.4137931034482758
106377,"public EC2Engine() throws IOException {
  loadConfigValues();
}","public EC2Engine() throws IOException {
}",0.7884615384615384
106378,"/** 
 * This method assumes that the bucket has been tested to make sure it exists before it is called.
 * @param context 
 * @return S3BucketPolicy
 * @throws SQLException , ClassNotFoundException, IllegalAccessException, InstantiationException, ParseException 
 */
public static S3BucketPolicy loadPolicy(S3PolicyContext context) throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, ParseException {
  OrderedPair<S3BucketPolicy,Integer> result=ServiceProvider.getInstance().getBucketPolicy(context.getBucketName());
  S3BucketPolicy policy=result.getFirst();
  if (null == policy) {
    if (-1 == result.getSecond().intValue()) {
      BucketPolicyVO policyvo=bPolicy.getByName(context.getBucketName());
      String policyInJson=null;
      if (null != policyvo)       policyInJson=policyvo.getPolicy();
      if (null == policyInJson) {
        ServiceProvider.getInstance().setBucketPolicy(context.getBucketName(),null);
        return null;
      }
      PolicyParser parser=new PolicyParser();
      policy=parser.parse(policyInJson,context.getBucketName());
      if (null != policy)       ServiceProvider.getInstance().setBucketPolicy(context.getBucketName(),policy);
    }
  }
  return policy;
}","/** 
 * This method assumes that the bucket has been tested to make sure it exists before it is called.
 * @param context 
 * @return S3BucketPolicy
 * @throws SQLException , ClassNotFoundException, IllegalAccessException, InstantiationException, ParseException 
 */
public static S3BucketPolicy loadPolicy(S3PolicyContext context) throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, ParseException {
  OrderedPair<S3BucketPolicy,Integer> result=ServiceProvider.getInstance().getBucketPolicy(context.getBucketName());
  S3BucketPolicy policy=result.getFirst();
  if (null == policy) {
    if (-1 == result.getSecond().intValue()) {
      BucketPolicyVO policyvo=s_bPolicy.getByName(context.getBucketName());
      String policyInJson=null;
      if (null != policyvo)       policyInJson=policyvo.getPolicy();
      if (null == policyInJson) {
        ServiceProvider.getInstance().setBucketPolicy(context.getBucketName(),null);
        return null;
      }
      PolicyParser parser=new PolicyParser();
      policy=parser.parse(policyInJson,context.getBucketName());
      if (null != policy)       ServiceProvider.getInstance().setBucketPolicy(context.getBucketName(),policy);
    }
  }
  return policy;
}",0.9991980753809142
106379,"/** 
 * This method verifies that the accessing client has the requested permission on the object/bucket/Acl represented by the tuple: <target, targetId> For cases where an ACL is meant for any authenticated user we place a ""*"" for the Canonical User Id.  N.B. - ""*"" is not a legal Cloud (Bridge) Access key.    For cases where an ACL is meant for any anonymous user (or 'AllUsers') we place a ""A"" for the  Canonical User Id.  N.B. - ""A"" is not a legal Cloud (Bridge) Access key. 
 */
public static void accessAllowed(String target,long targetId,int requestedPermission){
  if (SAcl.PERMISSION_PASS == requestedPermission)   return;
  String userId=UserContext.current().getCanonicalUserId();
  if (0 == userId.length()) {
    if (hasPermission(saclDao.listGrants(target,targetId,""String_Node_Str""),requestedPermission))     return;
  }
 else {
    if (hasPermission(saclDao.listGrants(target,targetId,userId),requestedPermission))     return;
    if (hasPermission(saclDao.listGrants(target,targetId,""String_Node_Str""),requestedPermission))     return;
  }
  throw new PermissionDeniedException(""String_Node_Str"");
}","/** 
 * This method verifies that the accessing client has the requested permission on the object/bucket/Acl represented by the tuple: <target, targetId> For cases where an ACL is meant for any authenticated user we place a ""*"" for the Canonical User Id.  N.B. - ""*"" is not a legal Cloud (Bridge) Access key.    For cases where an ACL is meant for any anonymous user (or 'AllUsers') we place a ""A"" for the  Canonical User Id.  N.B. - ""A"" is not a legal Cloud (Bridge) Access key. 
 */
public static void accessAllowed(String target,long targetId,int requestedPermission){
  if (SAcl.PERMISSION_PASS == requestedPermission)   return;
  String userId=UserContext.current().getCanonicalUserId();
  if (0 == userId.length()) {
    if (hasPermission(s_saclDao.listGrants(target,targetId,""String_Node_Str""),requestedPermission))     return;
  }
 else {
    if (hasPermission(s_saclDao.listGrants(target,targetId,userId),requestedPermission))     return;
    if (hasPermission(s_saclDao.listGrants(target,targetId,""String_Node_Str""),requestedPermission))     return;
  }
  throw new PermissionDeniedException(""String_Node_Str"");
}",0.9973214285714286
106380,"@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}","@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getZoneUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}",0.9995913363302004
106381,"@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}","@Override public HostResponse newHostResponse(HostJoinVO host,EnumSet<HostDetails> details){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getUuid());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterUuid());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getZoneUuid());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodUuid());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats)|| details.contains(HostDetails.events)) {
    hostResponse.setOsCategoryId(host.getOsCategoryUuid());
    hostResponse.setOsCategoryName(host.getOsCategoryName());
    hostResponse.setZoneName(host.getZoneName());
    hostResponse.setPodName(host.getPodName());
    if (host.getClusterId() > 0) {
      hostResponse.setClusterName(host.getClusterName());
      hostResponse.setClusterType(host.getClusterType().toString());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {
      Long mem=host.getMemReservedCapacity() + host.getMemUsedCapacity();
      Long cpu=host.getCpuReservedCapacity() + host.getCpuReservedCapacity();
      hostResponse.setMemoryAllocated(mem);
      hostResponse.setMemoryTotal(host.getTotalMemory());
      String hostTags=host.getTag();
      hostResponse.setHostTags(host.getTag());
      String haTag=ApiDBUtils.getHaTag();
      if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {
        if (haTag.equalsIgnoreCase(hostTags)) {
          hostResponse.setHaHost(true);
        }
 else {
          hostResponse.setHaHost(false);
        }
      }
 else {
        hostResponse.setHaHost(false);
      }
      hostResponse.setHypervisorVersion(host.getHypervisorVersion());
      String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
      hostResponse.setCpuAllocated(cpuAlloc);
      String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
      hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    }
    if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {
      String cpuUsed=null;
      HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
      if (hostStats != null) {
        float cpuUtil=(float)hostStats.getCpuUtilization();
        cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
        hostResponse.setCpuUsed(cpuUsed);
        hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
        hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
        hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
      }
    }
  }
 else   if (host.getType() == Host.Type.SecondaryStorage) {
    StorageStats secStorageStats=ApiDBUtils.getSecondaryStorageStatistics(host.getId());
    if (secStorageStats != null) {
      hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());
      hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());
    }
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));
  if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {
    Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
    if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
      String events=""String_Node_Str"";
      Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
      while (iter.hasNext()) {
        com.cloud.host.Status.Event event=iter.next();
        events+=event.toString();
        if (iter.hasNext()) {
          events+=""String_Node_Str"";
        }
      }
      hostResponse.setEvents(events);
    }
  }
  hostResponse.setResourceState(host.getResourceState().toString());
  hostResponse.setJobId(host.getJobUuid());
  hostResponse.setJobStatus(host.getJobStatus());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}",0.9995913363302004
106382,"private static Long translateUuidToInternalId(String uuid,Parameter annotation){
  if (uuid.equals(""String_Node_Str"")) {
    return -1L;
  }
  Long internalId=null;
  boolean isPre3x=annotation.since().isEmpty();
  boolean isUuid=uuid.matches(""String_Node_Str"");
  if (!isPre3x && !isUuid)   return null;
  if (isPre3x && !isUuid) {
    try {
      internalId=Long.parseLong(uuid);
    }
 catch (    NumberFormatException e) {
      internalId=null;
    }
    if (internalId != null)     return internalId;
  }
  Class<?>[] entities=annotation.entityType()[0].getAnnotation(EntityReference.class).value();
  for (  Class<?> entity : entities) {
    Object objVO=s_instance._entityMgr.findByUuid(entity,uuid);
    if (objVO == null) {
      continue;
    }
    try {
      internalId=(Long)((InternalIdentity)objVO).getId();
    }
 catch (    IllegalArgumentException e) {
    }
catch (    NullPointerException e) {
    }
    if (internalId != null)     break;
  }
  if (internalId == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + uuid + ""String_Node_Str"");
  }
  return internalId;
}","private static Long translateUuidToInternalId(String uuid,Parameter annotation){
  if (uuid.equals(""String_Node_Str"")) {
    return -1L;
  }
  Long internalId=null;
  boolean isPre3x=annotation.since().isEmpty();
  boolean isUuid=uuid.matches(""String_Node_Str"");
  if (!isPre3x && !isUuid)   return null;
  if (isPre3x && !isUuid) {
    try {
      internalId=Long.parseLong(uuid);
    }
 catch (    NumberFormatException e) {
      internalId=null;
    }
    if (internalId != null)     return internalId;
  }
  Class<?>[] entities=annotation.entityType()[0].getAnnotation(EntityReference.class).value();
  for (  Class<?> entity : entities) {
    Object objVO=s_instance._entityMgr.findByUuidIncludingRemoved(entity,uuid);
    if (objVO == null) {
      continue;
    }
    try {
      internalId=(Long)((InternalIdentity)objVO).getId();
    }
 catch (    IllegalArgumentException e) {
    }
catch (    NullPointerException e) {
    }
    if (internalId != null)     break;
  }
  if (internalId == null) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + uuid + ""String_Node_Str"");
  }
  return internalId;
}",0.9893790849673204
106383,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  hostGuid=(String)params.get(""String_Node_Str"");
  _locator=ComponentLocator.getLocator(""String_Node_Str"");
  _simMgr=_locator.getManager(SimulatorManager.class);
  agentHost=getAgentMgr().getHost(hostGuid);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  hostGuid=(String)params.get(""String_Node_Str"");
  _simMgr=ComponentContext.inject(SimulatorManagerImpl.class);
  agentHost=getAgentMgr().getHost(hostGuid);
  return true;
}",0.6677577741407529
106384,"@Override public void execute(){
  List<? extends DiskOffering> result=_mgr.searchForDiskOfferings(this);
  ListResponse<DiskOfferingResponse> response=new ListResponse<DiskOfferingResponse>();
  List<DiskOfferingResponse> diskOfferingResponses=new ArrayList<DiskOfferingResponse>();
  for (  DiskOffering offering : result) {
    DiskOfferingResponse diskOffResp=_responseGenerator.createDiskOfferingResponse(offering);
    diskOffResp.setObjectName(""String_Node_Str"");
    diskOfferingResponses.add(diskOffResp);
  }
  response.setResponses(diskOfferingResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  ListResponse<DiskOfferingResponse> response=_queryService.searchForDiskOfferings(this);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.2546728971962617
106385,"@Override public DiskOfferingResponse createDiskOfferingResponse(DiskOffering offering){
  DiskOfferingResponse diskOfferingResponse=new DiskOfferingResponse();
  diskOfferingResponse.setId(offering.getUuid());
  diskOfferingResponse.setName(offering.getName());
  diskOfferingResponse.setDisplayText(offering.getDisplayText());
  diskOfferingResponse.setCreated(offering.getCreated());
  diskOfferingResponse.setDiskSize(offering.getDiskSize() / (1024 * 1024 * 1024));
  if (offering.getDomainId() != null) {
    Domain domain=ApiDBUtils.findDomainById(offering.getDomainId());
    if (domain != null) {
      diskOfferingResponse.setDomain(domain.getName());
      diskOfferingResponse.setDomainId(domain.getUuid());
    }
  }
  diskOfferingResponse.setTags(offering.getTags());
  diskOfferingResponse.setCustomized(offering.isCustomized());
  diskOfferingResponse.setStorageType(offering.getUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());
  diskOfferingResponse.setObjectName(""String_Node_Str"");
  return diskOfferingResponse;
}","@Override public DiskOfferingResponse createDiskOfferingResponse(DiskOffering offering){
  DiskOfferingJoinVO vOffering=ApiDBUtils.newDiskOfferingView(offering);
  return ApiDBUtils.newDiskOfferingResponse(vOffering);
}",0.208048595292331
106386,"private String queueCommand(BaseCmd cmdObj,Map<String,String> params) throws Exception {
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectUuid=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectUuid=createCmd.getEntityUuid();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.processParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    Long instanceId=(objectId == null) ? asyncCmd.getInstanceId() : objectId;
    AsyncJobVO job=new AsyncJobVO(callerUserId,caller.getId(),cmdObj.getClass().getName(),ApiGsonHelper.getBuilder().create().toJson(params),instanceId,asyncCmd.getInstanceType());
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      String objUuid=(objectUuid == null) ? objectId.toString() : objectUuid;
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objUuid);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd && !(cmdObj instanceof ListVMsCmd) && !(cmdObj instanceof ListRoutersCmd)&& !(cmdObj instanceof ListSecurityGroupsCmd)&& !(cmdObj instanceof ListTagsCmd)&& !(cmdObj instanceof ListEventsCmd)&& !(cmdObj instanceof ListVMGroupsCmd)&& !(cmdObj instanceof ListProjectsCmd)&& !(cmdObj instanceof ListProjectAccountsCmd)&& !(cmdObj instanceof ListProjectInvitationsCmd)&& !(cmdObj instanceof ListHostsCmd)&& !(cmdObj instanceof ListVolumesCmd)&& !(cmdObj instanceof ListUsersCmd)&& !(cmdObj instanceof ListAccountsCmd)&& !(cmdObj instanceof ListStoragePoolsCmd)) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}","private String queueCommand(BaseCmd cmdObj,Map<String,String> params) throws Exception {
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectUuid=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectUuid=createCmd.getEntityUuid();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.processParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    Long instanceId=(objectId == null) ? asyncCmd.getInstanceId() : objectId;
    AsyncJobVO job=new AsyncJobVO(callerUserId,caller.getId(),cmdObj.getClass().getName(),ApiGsonHelper.getBuilder().create().toJson(params),instanceId,asyncCmd.getInstanceType());
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      String objUuid=(objectUuid == null) ? objectId.toString() : objectUuid;
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objUuid);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd && !(cmdObj instanceof ListVMsCmd) && !(cmdObj instanceof ListRoutersCmd)&& !(cmdObj instanceof ListSecurityGroupsCmd)&& !(cmdObj instanceof ListTagsCmd)&& !(cmdObj instanceof ListEventsCmd)&& !(cmdObj instanceof ListVMGroupsCmd)&& !(cmdObj instanceof ListProjectsCmd)&& !(cmdObj instanceof ListProjectAccountsCmd)&& !(cmdObj instanceof ListProjectInvitationsCmd)&& !(cmdObj instanceof ListHostsCmd)&& !(cmdObj instanceof ListVolumesCmd)&& !(cmdObj instanceof ListUsersCmd)&& !(cmdObj instanceof ListAccountsCmd)&& !(cmdObj instanceof ListStoragePoolsCmd)&& !(cmdObj instanceof ListDiskOfferingsCmd)) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}",0.9930555555555556
106387,"private void createFirewallRulesCommands(List<? extends FirewallRule> rules,VirtualRouter router,Commands cmds,long guestNetworkId){
  List<FirewallRuleTO> rulesTO=null;
  if (rules != null) {
    rulesTO=new ArrayList<FirewallRuleTO>();
    for (    FirewallRule rule : rules) {
      IpAddress sourceIp=_networkMgr.getIp(rule.getSourceIpAddressId());
      if (rule.getSourceCidrList() == null && (rule.getPurpose() == Purpose.Firewall || rule.getPurpose() == Purpose.NetworkACL)) {
        _rulesDao.loadSourceCidrs((FirewallRuleVO)rule);
      }
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,sourceIp.getAddress().addr());
      rulesTO.add(ruleTO);
    }
  }
  SetFirewallRulesCommand cmd=new SetFirewallRulesCommand(rulesTO);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}","private void createFirewallRulesCommands(List<? extends FirewallRule> rules,VirtualRouter router,Commands cmds,long guestNetworkId){
  List<FirewallRuleTO> rulesTO=null;
  if (rules != null) {
    rulesTO=new ArrayList<FirewallRuleTO>();
    for (    FirewallRule rule : rules) {
      IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      if (rule.getSourceCidrList() == null && (rule.getPurpose() == Purpose.Firewall || rule.getPurpose() == Purpose.NetworkACL)) {
        _rulesDao.loadSourceCidrs((FirewallRuleVO)rule);
      }
      FirewallRuleTO ruleTO=new FirewallRuleTO(rule,null,sourceIp.getAddress().addr());
      rulesTO.add(ruleTO);
    }
  }
  SetFirewallRulesCommand cmd=new SetFirewallRulesCommand(rulesTO);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}",0.9975550122249388
106388,"/** 
 * List hosts for migrating the given VM. The API returns list of all hosts in the VM's cluster minus the current host and also a list of hosts that seem to have enough CPU and RAM capacity to host this VM.
 * @param Long vmId Id of The VM to migrate
 * @return Pair<List<? extends Host>, List<? extends Host>> List of all Hosts in VM's cluster and list of Hosts withenough capacity
 */
Pair<List<? extends Host>,List<? extends Host>> listHostsForMigrationOfVM(Long vmId,Long startIndex,Long pageSize);","/** 
 * List hosts for migrating the given VM. The API returns list of all hosts in the VM's cluster minus the current host and also a list of hosts that seem to have enough CPU and RAM capacity to host this VM.
 * @param Long vmId Id of The VM to migrate
 * @return Pair<List<? extends Host>, List<? extends Host>> List of all Hosts in VM's cluster and list of Hosts withenough capacity
 */
Pair<Pair<List<? extends Host>,Integer>,List<? extends Host>> listHostsForMigrationOfVM(Long vmId,Long startIndex,Long pageSize);",0.9863813229571984
106389,"@Override public void execute(){
  ListResponse<HostResponse> response=null;
  if (getVirtualMachineId() == null) {
    response=_queryService.searchForServers(this);
  }
 else {
    List<? extends Host> result=new ArrayList<Host>();
    List<? extends Host> hostsWithCapacity=new ArrayList<Host>();
    Pair<List<? extends Host>,List<? extends Host>> hostsForMigration=_mgr.listHostsForMigrationOfVM(getVirtualMachineId(),this.getStartIndex(),this.getPageSizeVal());
    result=hostsForMigration.first();
    hostsWithCapacity=hostsForMigration.second();
    response=new ListResponse<HostResponse>();
    List<HostResponse> hostResponses=new ArrayList<HostResponse>();
    for (    Host host : result) {
      HostResponse hostResponse=_responseGenerator.createHostResponse(host,getDetails());
      Boolean suitableForMigration=false;
      if (hostsWithCapacity.contains(host)) {
        suitableForMigration=true;
      }
      hostResponse.setSuitableForMigration(suitableForMigration);
      hostResponse.setObjectName(""String_Node_Str"");
      hostResponses.add(hostResponse);
    }
    response.setResponses(hostResponses);
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  ListResponse<HostResponse> response=null;
  if (getVirtualMachineId() == null) {
    response=_queryService.searchForServers(this);
  }
 else {
    Pair<List<? extends Host>,Integer> result;
    List<? extends Host> hostsWithCapacity=new ArrayList<Host>();
    Pair<Pair<List<? extends Host>,Integer>,List<? extends Host>> hostsForMigration=_mgr.listHostsForMigrationOfVM(getVirtualMachineId(),this.getStartIndex(),this.getPageSizeVal());
    result=hostsForMigration.first();
    hostsWithCapacity=hostsForMigration.second();
    response=new ListResponse<HostResponse>();
    List<HostResponse> hostResponses=new ArrayList<HostResponse>();
    for (    Host host : result.first()) {
      HostResponse hostResponse=_responseGenerator.createHostResponse(host,getDetails());
      Boolean suitableForMigration=false;
      if (hostsWithCapacity.contains(host)) {
        suitableForMigration=true;
      }
      hostResponse.setSuitableForMigration(suitableForMigration);
      hostResponse.setObjectName(""String_Node_Str"");
      hostResponses.add(hostResponse);
    }
    response.setResponses(hostResponses,result.second());
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.925506072874494
106390,"@Override public Pair<List<? extends Host>,List<? extends Host>> listHostsForMigrationOfVM(Long vmId,Long startIndex,Long pageSize){
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOfferingVO svcOffering=_offeringsDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_hostDao.findById(srcHostId);
  if (srcHost == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + srcHostId + ""String_Node_Str""+ vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(srcHost,srcHostId,""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  Long cluster=srcHost.getClusterId();
  Type hostType=srcHost.getType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ vm);
  }
  List<? extends Host> allHostsInCluster=searchForServers(startIndex,pageSize,null,hostType,null,null,null,cluster,null,null,null,null);
  allHostsInCluster.remove(srcHost);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + allHostsInCluster);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str"");
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  Enumeration<HostAllocator> enHost=_hostAllocators.enumeration();
  VirtualMachineProfile<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  DataCenterDeployment plan=new DataCenterDeployment(srcHost.getDataCenterId(),srcHost.getPodId(),srcHost.getClusterId(),null,null,null);
  ExcludeList excludes=new ExcludeList();
  excludes.addHost(srcHostId);
  while (enHost.hasMoreElements()) {
    final HostAllocator allocator=enHost.nextElement();
    suitableHosts=allocator.allocateTo(vmProfile,plan,Host.Type.Routing,excludes,HostAllocator.RETURN_UPTO_ALL,false);
    if (suitableHosts != null && !suitableHosts.isEmpty()) {
      break;
    }
  }
  if (suitableHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + suitableHosts);
    }
  }
  return new Pair<List<? extends Host>,List<? extends Host>>(allHostsInCluster,suitableHosts);
}","@Override public Pair<Pair<List<? extends Host>,Integer>,List<? extends Host>> listHostsForMigrationOfVM(Long vmId,Long startIndex,Long pageSize){
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOfferingVO svcOffering=_offeringsDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_hostDao.findById(srcHostId);
  if (srcHost == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + srcHostId + ""String_Node_Str""+ vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(srcHost,srcHostId,""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  Long cluster=srcHost.getClusterId();
  Type hostType=srcHost.getType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ vm);
  }
  Pair<List<HostVO>,Integer> allHostsInClusterPair=searchForServers(startIndex,pageSize,null,hostType,null,null,null,cluster,null,null,null,null);
  List<HostVO> allHostsInCluster=allHostsInClusterPair.first();
  allHostsInCluster.remove(srcHost);
  Pair<List<? extends Host>,Integer> otherHostsInCluster=new Pair<List<? extends Host>,Integer>(allHostsInCluster,new Integer(allHostsInClusterPair.second().intValue() - 1));
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + allHostsInCluster);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str"");
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  Enumeration<HostAllocator> enHost=_hostAllocators.enumeration();
  VirtualMachineProfile<VMInstanceVO> vmProfile=new VirtualMachineProfileImpl<VMInstanceVO>(vm);
  DataCenterDeployment plan=new DataCenterDeployment(srcHost.getDataCenterId(),srcHost.getPodId(),srcHost.getClusterId(),null,null,null);
  ExcludeList excludes=new ExcludeList();
  excludes.addHost(srcHostId);
  while (enHost.hasMoreElements()) {
    final HostAllocator allocator=enHost.nextElement();
    suitableHosts=allocator.allocateTo(vmProfile,plan,Host.Type.Routing,excludes,HostAllocator.RETURN_UPTO_ALL,false);
    if (suitableHosts != null && !suitableHosts.isEmpty()) {
      break;
    }
  }
  if (suitableHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + suitableHosts);
    }
  }
  return new Pair<Pair<List<? extends Host>,Integer>,List<? extends Host>>(otherHostsInCluster,suitableHosts);
}",0.9310483331101888
106391,"private List<HostVO> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object resourceState,Object haHosts){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<HostVO> sb=_hostDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getResourceState(),SearchCriteria.Op.EQ);
  String haTag=_haMgr.getHaTag();
  SearchBuilder<HostTagVO> hostTagSearch=null;
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    hostTagSearch=_hostTagsDao.createSearchBuilder();
    if ((Boolean)haHosts) {
      hostTagSearch.and().op(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.EQ);
    }
 else {
      hostTagSearch.and().op(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.NEQ);
      hostTagSearch.or(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.NULL);
    }
    hostTagSearch.cp();
    sb.join(""String_Node_Str"",hostTagSearch,sb.entity().getId(),hostTagSearch.entity().getHostId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  SearchCriteria<HostVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",cluster);
  }
  if (resourceState != null) {
    sc.setParameters(""String_Node_Str"",resourceState);
  }
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",haTag);
  }
  return _hostDao.search(sc,searchFilter);
}","private Pair<List<HostVO>,Integer> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object resourceState,Object haHosts){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchBuilder<HostVO> sb=_hostDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getClusterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getResourceState(),SearchCriteria.Op.EQ);
  String haTag=_haMgr.getHaTag();
  SearchBuilder<HostTagVO> hostTagSearch=null;
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    hostTagSearch=_hostTagsDao.createSearchBuilder();
    if ((Boolean)haHosts) {
      hostTagSearch.and().op(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.EQ);
    }
 else {
      hostTagSearch.and().op(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.NEQ);
      hostTagSearch.or(""String_Node_Str"",hostTagSearch.entity().getTag(),SearchCriteria.Op.NULL);
    }
    hostTagSearch.cp();
    sb.join(""String_Node_Str"",hostTagSearch,sb.entity().getId(),hostTagSearch.entity().getHostId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  SearchCriteria<HostVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (cluster != null) {
    sc.setParameters(""String_Node_Str"",cluster);
  }
  if (resourceState != null) {
    sc.setParameters(""String_Node_Str"",resourceState);
  }
  if (haHosts != null && haTag != null && !haTag.isEmpty()) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",haTag);
  }
  return _hostDao.searchAndCount(sc,searchFilter);
}",0.9963684384285244
106392,"@Override @DB public NetworkOfferingVO createNetworkOffering(String name,String displayText,TrafficType trafficType,String tags,boolean specifyVlan,Availability availability,Integer networkRate,Map<Service,Set<Provider>> serviceProviderMap,boolean isDefault,Network.GuestType type,boolean systemOnly,Long serviceOfferingId,boolean conserveMode,Map<Service,Map<Capability,String>> serviceCapabilityMap,boolean specifyIpRanges){
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  if (specifyVlan != specifyIpRanges) {
    throw new InvalidParameterValueException(""String_Node_Str"" + specifyIpRanges);
  }
  if (!specifyVlan && type == GuestType.Shared) {
    throw new InvalidParameterValueException(""String_Node_Str"" + type);
  }
  if (specifyVlan && type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + type + ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (availability == NetworkOffering.Availability.Required) {
    boolean canOffBeRequired=(type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat));
    if (!canOffBeRequired) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (!offerings.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
    }
  }
  boolean dedicatedLb=false;
  boolean elasticLb=false;
  boolean sharedSourceNat=false;
  boolean redundantRouter=false;
  boolean elasticIp=false;
  boolean inline=false;
  if (serviceCapabilityMap != null && !serviceCapabilityMap.isEmpty()) {
    Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
    if ((lbServiceCapabilityMap != null) && (!lbServiceCapabilityMap.isEmpty())) {
      String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
      if (isolationCapability != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.SupportedLBIsolation,isolationCapability);
        dedicatedLb=isolationCapability.contains(""String_Node_Str"");
      }
 else {
        dedicatedLb=true;
      }
      String param=lbServiceCapabilityMap.get(Capability.ElasticLb);
      if (param != null) {
        elasticLb=param.contains(""String_Node_Str"");
      }
      String inlineMode=lbServiceCapabilityMap.get(Capability.InlineMode);
      if (inlineMode != null) {
        _networkMgr.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.InlineMode,inlineMode);
        inline=inlineMode.contains(""String_Node_Str"");
      }
 else {
        inline=false;
      }
    }
    Map<Capability,String> sourceNatServiceCapabilityMap=serviceCapabilityMap.get(Service.SourceNat);
    if ((sourceNatServiceCapabilityMap != null) && (!sourceNatServiceCapabilityMap.isEmpty())) {
      String sourceNatType=sourceNatServiceCapabilityMap.get(Capability.SupportedSourceNatTypes);
      if (sourceNatType != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.SupportedSourceNatTypes,sourceNatType);
        sharedSourceNat=sourceNatType.contains(""String_Node_Str"");
      }
      String param=sourceNatServiceCapabilityMap.get(Capability.RedundantRouter);
      if (param != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.RedundantRouter,param);
        redundantRouter=param.contains(""String_Node_Str"");
      }
    }
    Map<Capability,String> staticNatServiceCapabilityMap=serviceCapabilityMap.get(Service.StaticNat);
    if ((staticNatServiceCapabilityMap != null) && (!staticNatServiceCapabilityMap.isEmpty())) {
      String param=staticNatServiceCapabilityMap.get(Capability.ElasticIp);
      if (param != null) {
        elasticIp=param.contains(""String_Node_Str"");
      }
    }
  }
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,isDefault,availability,tags,type,conserveMode,dedicatedLb,sharedSourceNat,redundantRouter,elasticIp,elasticLb,specifyIpRanges,inline);
  if (serviceOfferingId != null) {
    offering.setServiceOfferingId(serviceOfferingId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + offering);
  offering=_networkOfferingDao.persist(offering);
  if (serviceProviderMap != null) {
    for (    Network.Service service : serviceProviderMap.keySet()) {
      Set<Provider> providers=serviceProviderMap.get(service);
      if (providers != null && !providers.isEmpty()) {
        boolean vpcOff=false;
        for (        Network.Provider provider : providers) {
          if (provider == Provider.VPCVirtualRouter) {
            vpcOff=true;
          }
          NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
          _ntwkOffServiceMapDao.persist(offService);
          s_logger.trace(""String_Node_Str"" + offService + ""String_Node_Str""+ provider.getName());
        }
        if (vpcOff) {
          List<Service> supportedSvcs=new ArrayList<Service>();
          supportedSvcs.addAll(serviceProviderMap.keySet());
          _vpcMgr.validateNtwkOffForVpc(offering,supportedSvcs);
        }
      }
 else {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,null);
        _ntwkOffServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService + ""String_Node_Str"");
      }
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + offering.getId() + ""String_Node_Str""+ name);
  return offering;
}","@Override @DB public NetworkOfferingVO createNetworkOffering(String name,String displayText,TrafficType trafficType,String tags,boolean specifyVlan,Availability availability,Integer networkRate,Map<Service,Set<Provider>> serviceProviderMap,boolean isDefault,Network.GuestType type,boolean systemOnly,Long serviceOfferingId,boolean conserveMode,Map<Service,Map<Capability,String>> serviceCapabilityMap,boolean specifyIpRanges){
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  if (specifyVlan != specifyIpRanges) {
    throw new InvalidParameterValueException(""String_Node_Str"" + specifyIpRanges);
  }
  if (!specifyVlan && type == GuestType.Shared) {
    throw new InvalidParameterValueException(""String_Node_Str"" + type);
  }
  if (specifyVlan && type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + type + ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (availability == NetworkOffering.Availability.Required) {
    boolean canOffBeRequired=(type == GuestType.Isolated && serviceProviderMap.containsKey(Service.SourceNat));
    if (!canOffBeRequired) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (!offerings.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
    }
  }
  boolean dedicatedLb=false;
  boolean elasticLb=false;
  boolean sharedSourceNat=false;
  boolean redundantRouter=false;
  boolean elasticIp=false;
  boolean inline=false;
  if (serviceCapabilityMap != null && !serviceCapabilityMap.isEmpty()) {
    Map<Capability,String> lbServiceCapabilityMap=serviceCapabilityMap.get(Service.Lb);
    if ((lbServiceCapabilityMap != null) && (!lbServiceCapabilityMap.isEmpty())) {
      String isolationCapability=lbServiceCapabilityMap.get(Capability.SupportedLBIsolation);
      if (isolationCapability != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.SupportedLBIsolation,isolationCapability);
        dedicatedLb=isolationCapability.contains(""String_Node_Str"");
      }
 else {
        dedicatedLb=true;
      }
      String param=lbServiceCapabilityMap.get(Capability.ElasticLb);
      if (param != null) {
        elasticLb=param.contains(""String_Node_Str"");
      }
      String inlineMode=lbServiceCapabilityMap.get(Capability.InlineMode);
      if (inlineMode != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb),Service.Lb,Capability.InlineMode,inlineMode);
        inline=inlineMode.contains(""String_Node_Str"");
      }
 else {
        inline=false;
      }
    }
    Map<Capability,String> sourceNatServiceCapabilityMap=serviceCapabilityMap.get(Service.SourceNat);
    if ((sourceNatServiceCapabilityMap != null) && (!sourceNatServiceCapabilityMap.isEmpty())) {
      String sourceNatType=sourceNatServiceCapabilityMap.get(Capability.SupportedSourceNatTypes);
      if (sourceNatType != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.SupportedSourceNatTypes,sourceNatType);
        sharedSourceNat=sourceNatType.contains(""String_Node_Str"");
      }
      String param=sourceNatServiceCapabilityMap.get(Capability.RedundantRouter);
      if (param != null) {
        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.SourceNat),Service.SourceNat,Capability.RedundantRouter,param);
        redundantRouter=param.contains(""String_Node_Str"");
      }
    }
    Map<Capability,String> staticNatServiceCapabilityMap=serviceCapabilityMap.get(Service.StaticNat);
    if ((staticNatServiceCapabilityMap != null) && (!staticNatServiceCapabilityMap.isEmpty())) {
      String param=staticNatServiceCapabilityMap.get(Capability.ElasticIp);
      if (param != null) {
        elasticIp=param.contains(""String_Node_Str"");
      }
    }
  }
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,systemOnly,specifyVlan,networkRate,multicastRate,isDefault,availability,tags,type,conserveMode,dedicatedLb,sharedSourceNat,redundantRouter,elasticIp,elasticLb,specifyIpRanges,inline);
  if (serviceOfferingId != null) {
    offering.setServiceOfferingId(serviceOfferingId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + offering);
  offering=_networkOfferingDao.persist(offering);
  if (serviceProviderMap != null) {
    for (    Network.Service service : serviceProviderMap.keySet()) {
      Set<Provider> providers=serviceProviderMap.get(service);
      if (providers != null && !providers.isEmpty()) {
        boolean vpcOff=false;
        for (        Network.Provider provider : providers) {
          if (provider == Provider.VPCVirtualRouter) {
            vpcOff=true;
          }
          NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,provider);
          _ntwkOffServiceMapDao.persist(offService);
          s_logger.trace(""String_Node_Str"" + offService + ""String_Node_Str""+ provider.getName());
        }
        if (vpcOff) {
          List<Service> supportedSvcs=new ArrayList<Service>();
          supportedSvcs.addAll(serviceProviderMap.keySet());
          _vpcMgr.validateNtwkOffForVpc(offering,supportedSvcs);
        }
      }
 else {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(offering.getId(),service,null);
        _ntwkOffServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService + ""String_Node_Str"");
      }
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + offering.getId() + ""String_Node_Str""+ name);
  return offering;
}",0.9995194617972128
106393,"private MappingNic getLoadBalancingIpNic(DataCenterVO zone,Network network,long sourceIpId,boolean revoked,String existedGuestIp) throws ResourceUnavailableException {
  String srcIp=_networkMgr.getIp(sourceIpId).getAddress().addr();
  InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByPublicIpAddress(srcIp);
  NicVO loadBalancingIpNic=null;
  MappingNic nic=new MappingNic();
  nic.setState(MappingState.Unchanged);
  if (!revoked) {
    if (mapping == null) {
      String loadBalancingIpAddress=existedGuestIp;
      if (loadBalancingIpAddress == null) {
        loadBalancingIpAddress=_networkMgr.acquireGuestIpAddress(network,null);
      }
      if (loadBalancingIpAddress == null) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new ResourceUnavailableException(msg,DataCenter.class,network.getDataCenterId());
      }
      loadBalancingIpNic=_nicDao.findByIp4AddressAndNetworkId(loadBalancingIpAddress,network.getId());
      if (loadBalancingIpNic == null) {
        loadBalancingIpNic=savePlaceholderNic(network,loadBalancingIpAddress);
      }
      mapping=new InlineLoadBalancerNicMapVO(srcIp,loadBalancingIpNic.getId());
      _inlineLoadBalancerNicMapDao.persist(mapping);
      try {
        applyStaticNatRuleForInlineLBRule(zone,network,revoked,srcIp,loadBalancingIpNic.getIp4Address());
      }
 catch (      ResourceUnavailableException ex) {
        _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
        _nicDao.expunge(loadBalancingIpNic.getId());
        throw ex;
      }
      s_logger.debug(""String_Node_Str"");
      nic.setState(MappingState.Create);
    }
 else {
      loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
    }
  }
 else {
    if (mapping != null) {
      loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
      int count=_networkMgr.getRuleCountForIp(sourceIpId,Purpose.LoadBalancing,FirewallRule.State.Active);
      if (count == 0) {
        applyStaticNatRuleForInlineLBRule(zone,network,revoked,srcIp,loadBalancingIpNic.getIp4Address());
        _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
        _nicDao.expunge(loadBalancingIpNic.getId());
        s_logger.debug(""String_Node_Str"");
        nic.setState(MappingState.Remove);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
  }
  nic.setNic(loadBalancingIpNic);
  return nic;
}","private MappingNic getLoadBalancingIpNic(DataCenterVO zone,Network network,long sourceIpId,boolean revoked,String existedGuestIp) throws ResourceUnavailableException {
  String srcIp=_networkModel.getIp(sourceIpId).getAddress().addr();
  InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByPublicIpAddress(srcIp);
  NicVO loadBalancingIpNic=null;
  MappingNic nic=new MappingNic();
  nic.setState(MappingState.Unchanged);
  if (!revoked) {
    if (mapping == null) {
      String loadBalancingIpAddress=existedGuestIp;
      if (loadBalancingIpAddress == null) {
        loadBalancingIpAddress=_networkMgr.acquireGuestIpAddress(network,null);
      }
      if (loadBalancingIpAddress == null) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new ResourceUnavailableException(msg,DataCenter.class,network.getDataCenterId());
      }
      loadBalancingIpNic=_nicDao.findByIp4AddressAndNetworkId(loadBalancingIpAddress,network.getId());
      if (loadBalancingIpNic == null) {
        loadBalancingIpNic=savePlaceholderNic(network,loadBalancingIpAddress);
      }
      mapping=new InlineLoadBalancerNicMapVO(srcIp,loadBalancingIpNic.getId());
      _inlineLoadBalancerNicMapDao.persist(mapping);
      try {
        applyStaticNatRuleForInlineLBRule(zone,network,revoked,srcIp,loadBalancingIpNic.getIp4Address());
      }
 catch (      ResourceUnavailableException ex) {
        _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
        _nicDao.expunge(loadBalancingIpNic.getId());
        throw ex;
      }
      s_logger.debug(""String_Node_Str"");
      nic.setState(MappingState.Create);
    }
 else {
      loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
    }
  }
 else {
    if (mapping != null) {
      loadBalancingIpNic=_nicDao.findById(mapping.getNicId());
      int count=_networkMgr.getRuleCountForIp(sourceIpId,Purpose.LoadBalancing,FirewallRule.State.Active);
      if (count == 0) {
        applyStaticNatRuleForInlineLBRule(zone,network,revoked,srcIp,loadBalancingIpNic.getIp4Address());
        _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
        _nicDao.expunge(loadBalancingIpNic.getId());
        s_logger.debug(""String_Node_Str"");
        nic.setState(MappingState.Remove);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
  }
  nic.setNic(loadBalancingIpNic);
  return nic;
}",0.9987551867219916
106394,"protected IpDeployer getIpDeployerForInlineMode(Network network){
  List<Provider> providers=_networkMgr.getProvidersForServiceInNetwork(network,Service.Firewall);
  if (providers == null) {
    s_logger.error(""String_Node_Str"" + network.getId());
    return null;
  }
  if (providers.size() != 1) {
    s_logger.error(""String_Node_Str"" + providers.size() + ""String_Node_Str""+ network.getId());
    return null;
  }
  NetworkElement element=_networkMgr.getElementImplementingProvider(providers.get(0).getName());
  if (!(element instanceof IpDeployer)) {
    s_logger.error(""String_Node_Str"" + network.getName() + ""String_Node_Str"");
    return null;
  }
  s_logger.info(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ network.getId());
  return (IpDeployer)element;
}","protected IpDeployer getIpDeployerForInlineMode(Network network){
  List<Provider> providers=_networkMgr.getProvidersForServiceInNetwork(network,Service.Firewall);
  if (providers == null) {
    s_logger.error(""String_Node_Str"" + network.getId());
    return null;
  }
  if (providers.size() != 1) {
    s_logger.error(""String_Node_Str"" + providers.size() + ""String_Node_Str""+ network.getId());
    return null;
  }
  NetworkElement element=_networkModel.getElementImplementingProvider(providers.get(0).getName());
  if (!(element instanceof IpDeployer)) {
    s_logger.error(""String_Node_Str"" + network.getName() + ""String_Node_Str"");
    return null;
  }
  s_logger.info(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ network.getId());
  return (IpDeployer)element;
}",0.9962962962962963
106395,"protected IpAddress allocateIP(Account ipOwner,boolean isSystem,long zoneId) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,null,false,ipOwner);
  DataCenter zone=_configMgr.getZone(zoneId);
  return _networkMgr.allocateIp(ipOwner,isSystem,caller,zone);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NET_IP_ASSIGN,eventDescription=""String_Node_Str"",create=true) public IpAddress allocateIP(Account ipOwner,boolean isSystem,long zoneId) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,null,false,ipOwner);
  long callerUserId=UserContext.current().getCallerUserId();
  DataCenter zone=_configMgr.getZone(zoneId);
  return _networkMgr.allocateIp(ipOwner,isSystem,caller,callerUserId,zone);
}",0.7129724208375894
106396,"@Override @DB public Network getNetwork(long id){
  return _networksDao.findById(id);
}","@Override public Network getNetwork(String networkUuid){
  return _networksDao.findByUuid(networkUuid);
}",0.8333333333333334
106397,"@Override @DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  long sourceIpId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(sourceIpId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
 else   if (ipAddr.isOneToOneNat()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing,FirewallRuleType.User);
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,true,ipAddr);
  if (!_networkModel.areServicesSupportedInNetwork(network.getId(),Service.Lb)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(network,networkId,""String_Node_Str"");
    throw ex;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAllocatedToAccountId(),ipAddr.getAllocatedInDomainId());
  LoadBalancingRule loadBalancing=new LoadBalancingRule(newRule,new ArrayList<LbDestination>(),new ArrayList<LbStickinessPolicy>());
  if (!_networkMgr.validateRule(loadBalancing)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(sourceIpId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId(),networkId);
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ sourceIpId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success && newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      removeLBRule(newRule);
      txn.commit();
    }
  }
}","@Override @DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  long sourceIpId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(sourceIpId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
 else   if (ipAddr.isOneToOneNat()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing,FirewallRuleType.User);
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ipAddr,sourceIpId,""String_Node_Str"");
    throw ex;
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,true,ipAddr);
  if (!_networkModel.areServicesSupportedInNetwork(network.getId(),Service.Lb)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(network,networkId,""String_Node_Str"");
    throw ex;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAllocatedToAccountId(),ipAddr.getAllocatedInDomainId());
  LoadBalancingRule loadBalancing=new LoadBalancingRule(newRule,new ArrayList<LbDestination>(),new ArrayList<LbStickinessPolicy>());
  if (validateRule(loadBalancing)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(sourceIpId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId(),networkId);
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ sourceIpId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success && newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      removeLBRule(newRule);
      txn.commit();
    }
  }
}",0.9981723604667512
106398,"@Override public IpAddress allocateIP(Account ipOwner,long zoneId,Long networkId) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}","@Override public IpAddress allocateIP(Account ipOwner,boolean isSystem,long zoneId) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}",0.9215686274509804
106399,"@Override public IpAddress allocateIp(Account ipOwner,boolean isSystem,Account caller,DataCenter zone) throws ConcurrentOperationException, ResourceAllocationException, InsufficientAddressCapacityException {
  return null;
}","@Override public IpAddress allocateIp(Account ipOwner,boolean isSystem,Account caller,long callerId,DataCenter zone) throws ConcurrentOperationException, ResourceAllocationException, InsufficientAddressCapacityException {
  return null;
}",0.9696969696969696
106400,"@Override @DB public void updateKeyPairs(){
  String username=System.getProperty(""String_Node_Str"");
  Boolean devel=Boolean.valueOf(_configDao.getValue(""String_Node_Str""));
  if (!username.equalsIgnoreCase(""String_Node_Str"") || !devel) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  String homeDir=null;
  homeDir=Script.runSimpleBashScript(""String_Node_Str"" + username);
  if (homeDir == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + username);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  if (homeDir != null && homeDir.startsWith(""String_Node_Str"")) {
    s_logger.error(""String_Node_Str"" + username + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  File privkeyfile=new File(homeDir + ""String_Node_Str"");
  File pubkeyfile=new File(homeDir + ""String_Node_Str"");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"");
    }
    Script.runSimpleBashScript(""String_Node_Str"" + privkeyfile + ""String_Node_Str""+ privkeyfile+ ""String_Node_Str""+ privkeyfile+ ""String_Node_Str"");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(privateKey) + ""String_Node_Str"";
    String insertSql2=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(publicKey) + ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.info(""String_Node_Str"");
    if (username.equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.info(""String_Node_Str"");
      updateKeyPairsOnDisk(homeDir);
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
  s_logger.info(""String_Node_Str"");
  try {
    injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
  }
 catch (  CloudRuntimeException e) {
    if (!devel) {
      throw new CloudRuntimeException(e.getMessage());
    }
  }
}","@Override @DB public void updateKeyPairs(){
  String username=System.getProperty(""String_Node_Str"");
  Boolean devel=Boolean.valueOf(_configDao.getValue(""String_Node_Str""));
  if (!username.equalsIgnoreCase(""String_Node_Str"") && !devel) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  String homeDir=null;
  homeDir=Script.runSimpleBashScript(""String_Node_Str"" + username);
  if (homeDir == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + username);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  if (homeDir != null && homeDir.startsWith(""String_Node_Str"")) {
    s_logger.error(""String_Node_Str"" + username + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  File privkeyfile=new File(homeDir + ""String_Node_Str"");
  File pubkeyfile=new File(homeDir + ""String_Node_Str"");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"");
    }
    Script.runSimpleBashScript(""String_Node_Str"" + privkeyfile + ""String_Node_Str""+ privkeyfile+ ""String_Node_Str""+ privkeyfile+ ""String_Node_Str"");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(privateKey) + ""String_Node_Str"";
    String insertSql2=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(publicKey) + ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.info(""String_Node_Str"");
    if (username.equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.info(""String_Node_Str"");
      updateKeyPairsOnDisk(homeDir);
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
  s_logger.info(""String_Node_Str"");
  try {
    injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
  }
 catch (  CloudRuntimeException e) {
    if (!devel) {
      throw new CloudRuntimeException(e.getMessage());
    }
  }
}",0.9994126284875184
106401,"@Override @DB public void updateKeyPairs(){
  String username=System.getProperty(""String_Node_Str"");
  Boolean devel=Boolean.valueOf(_configDao.getValue(""String_Node_Str""));
  if (!username.equalsIgnoreCase(""String_Node_Str"") || !devel) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  String homeDir=null;
  homeDir=Script.runSimpleBashScript(""String_Node_Str"" + username);
  if (homeDir == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + username);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  if (homeDir != null && homeDir.startsWith(""String_Node_Str"")) {
    s_logger.error(""String_Node_Str"" + username + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  File privkeyfile=new File(homeDir + ""String_Node_Str"");
  File pubkeyfile=new File(homeDir + ""String_Node_Str"");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"");
    }
    Script.runSimpleBashScript(""String_Node_Str"" + privkeyfile + ""String_Node_Str""+ privkeyfile+ ""String_Node_Str""+ privkeyfile+ ""String_Node_Str"");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(privateKey) + ""String_Node_Str"";
    String insertSql2=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(publicKey) + ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.info(""String_Node_Str"");
    if (username.equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.info(""String_Node_Str"");
      updateKeyPairsOnDisk(homeDir);
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
  s_logger.info(""String_Node_Str"");
  try {
    injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
  }
 catch (  CloudRuntimeException e) {
    if (!devel) {
      throw new CloudRuntimeException(e.getMessage());
    }
  }
}","@Override @DB public void updateKeyPairs(){
  String username=System.getProperty(""String_Node_Str"");
  Boolean devel=Boolean.valueOf(_configDao.getValue(""String_Node_Str""));
  if (!username.equalsIgnoreCase(""String_Node_Str"") && !devel) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  String homeDir=null;
  homeDir=Script.runSimpleBashScript(""String_Node_Str"" + username);
  if (homeDir == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + username);
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  if (homeDir != null && homeDir.startsWith(""String_Node_Str"")) {
    s_logger.error(""String_Node_Str"" + username + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  File privkeyfile=new File(homeDir + ""String_Node_Str"");
  File pubkeyfile=new File(homeDir + ""String_Node_Str"");
  if (already == null || already.isEmpty()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"");
    }
    Script.runSimpleBashScript(""String_Node_Str"" + privkeyfile + ""String_Node_Str""+ privkeyfile+ ""String_Node_Str""+ privkeyfile+ ""String_Node_Str"");
    byte[] arr1=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(privkeyfile)).readFully(arr1);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String privateKey=new String(arr1).trim();
    byte[] arr2=new byte[4094];
    try {
      new DataInputStream(new FileInputStream(pubkeyfile)).readFully(arr2);
    }
 catch (    EOFException e) {
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String publicKey=new String(arr2).trim();
    String insertSql1=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(privateKey) + ""String_Node_Str"";
    String insertSql2=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(publicKey) + ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt1=txn.prepareAutoCloseStatement(insertSql1);
      stmt1.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    try {
      PreparedStatement stmt2=txn.prepareAutoCloseStatement(insertSql2);
      stmt2.executeUpdate();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
 catch (    SQLException ex) {
      s_logger.error(""String_Node_Str"",ex);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.info(""String_Node_Str"");
    if (username.equalsIgnoreCase(""String_Node_Str"")) {
      s_logger.info(""String_Node_Str"");
      updateKeyPairsOnDisk(homeDir);
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
  s_logger.info(""String_Node_Str"");
  try {
    injectSshKeysIntoSystemVmIsoPatch(pubkeyfile.getAbsolutePath(),privkeyfile.getAbsolutePath());
  }
 catch (  CloudRuntimeException e) {
    if (!devel) {
      throw new CloudRuntimeException(e.getMessage());
    }
  }
}",0.9994126284875184
106402,"protected StaticRoleBasedAPIAccessChecker(){
  super();
  for (  RoleType roleType : RoleType.values()) {
    s_roleBasedApisMap.put(roleType,new HashSet<String>());
  }
}","protected StaticRoleBasedAPIAccessChecker(){
  super();
  for (  RoleType roleType : RoleType.values())   s_roleBasedApisMap.put(roleType,new HashSet<String>());
}",0.9760479041916168
106403,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  List<PluggableService> services=locator.getAllPluggableServices();
  services.add((PluggableService)ComponentLocator.getComponent(ManagementServer.Name));
  Map<String,String> configPropertiesMap=new HashMap<String,String>();
  for (  PluggableService service : services) {
    configPropertiesMap.putAll(service.getProperties());
  }
  processConfigFiles(configPropertiesMap);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  List<PluggableService> services=locator.getAllPluggableServices();
  services.add((PluggableService)ComponentLocator.getComponent(ManagementServer.Name));
  for (  PluggableService service : services) {
    processConfigFiles(service.getProperties(),service.getClass().toString());
    s_logger.info(""String_Node_Str"" + service.toString());
  }
  return true;
}",0.6772841575859179
106404,"private void processConfigFiles(Map<String,String> configMap){
  for (  Map.Entry<String,String> entry : configMap.entrySet()) {
    String apiName=entry.getKey();
    String roleMask=entry.getValue();
    try {
      short cmdPermissions=Short.parseShort(roleMask);
      for (      RoleType roleType : RoleType.values()) {
        if ((cmdPermissions & roleType.getValue()) != 0)         s_roleBasedApisMap.get(roleType).add(apiName);
      }
    }
 catch (    NumberFormatException nfe) {
      s_logger.info(""String_Node_Str"" + entry.toString());
    }
  }
}","private void processConfigFiles(Map<String,String> configMap,String service){
  for (  Map.Entry<String,String> entry : configMap.entrySet()) {
    String apiName=entry.getKey();
    String roleMask=entry.getValue();
    try {
      short cmdPermissions=Short.parseShort(roleMask);
      for (      RoleType roleType : RoleType.values()) {
        if ((cmdPermissions & roleType.getValue()) != 0)         s_roleBasedApisMap.get(roleType).add(apiName);
      }
    }
 catch (    NumberFormatException nfe) {
      s_logger.info(""String_Node_Str"" + service + ""String_Node_Str""+ entry.toString());
    }
  }
}",0.9623287671232876
106405,"@PostConstruct void init(){
  _managers.add(_checkPointMgr);
  _managers.add(_clusterMgr);
  _managers.add(_clusterFenceMgr);
  _managers.add(_AgentMgr);
  _managers.add(_sycnQueueMgr);
  _managers.add(_jobMgr);
  _managers.add(_confMgr);
  _managers.add(_accountMgr);
  _managers.add(_domainMgr);
  _managers.add(_resLimitMgr);
  _managers.add(_networkMgr);
  _managers.add(_downloadMonitor);
  _managers.add(_uploadMonitor);
  _managers.add(_ksMgr);
  _managers.add(_ssMgr);
  _managers.add(_userVmMgr);
  _managers.add(_upgradeMgr);
  _managers.add(_storageMgr);
  _managers.add(_alertMgr);
  _managers.add(_tmplMgr);
  _managers.add(_snpahsotMgr);
  _managers.add(_snapshotScheduleMgr);
  _managers.add(_sgMgr);
  _managers.add(_entityMgr);
  _managers.add(_lbRuleMgr);
  _managers.add(_asMgr);
  _managers.add(_rulesMgr);
  _managers.add(_acVpnMgr);
  _managers.add(_capacityMgr);
  _managers.add(_vmMgr);
  _managers.add(_hvGuruMgr);
  _managers.add(_resMgr);
  _managers.add(_ocfsMgr);
  _managers.add(_fwMgr);
  _managers.add(_cpMgr);
  _managers.add(_prjMgr);
  _managers.add(_swiftMgr);
  _managers.add(_s3Mgr);
  _managers.add(_storageNetworkMgr);
  _managers.add(_extlbUsageMgr);
  _managers.add(_haMgr);
  _managers.add(_vpcMgr);
  _managers.add(_vpcNetApplianceMgr);
  _managers.add(_networkAclMgr);
  _managers.add(_taggedResMgr);
  _managers.add(_s2sVpnMgr);
  _managers.add(_queryMgr);
}","@PostConstruct void init(){
  _managers.add(_clusterMgr);
  _managers.add(_clusterFenceMgr);
  _managers.add(_AgentMgr);
  _managers.add(_sycnQueueMgr);
  _managers.add(_jobMgr);
  _managers.add(_confMgr);
  _managers.add(_accountMgr);
  _managers.add(_domainMgr);
  _managers.add(_resLimitMgr);
  _managers.add(_networkMgr);
  _managers.add(_downloadMonitor);
  _managers.add(_uploadMonitor);
  _managers.add(_ksMgr);
  _managers.add(_ssMgr);
  _managers.add(_userVmMgr);
  _managers.add(_upgradeMgr);
  _managers.add(_storageMgr);
  _managers.add(_alertMgr);
  _managers.add(_tmplMgr);
  _managers.add(_snpahsotMgr);
  _managers.add(_snapshotScheduleMgr);
  _managers.add(_sgMgr);
  _managers.add(_entityMgr);
  _managers.add(_lbRuleMgr);
  _managers.add(_asMgr);
  _managers.add(_rulesMgr);
  _managers.add(_acVpnMgr);
  _managers.add(_capacityMgr);
  _managers.add(_vmMgr);
  _managers.add(_hvGuruMgr);
  _managers.add(_resMgr);
  _managers.add(_ocfsMgr);
  _managers.add(_fwMgr);
  _managers.add(_cpMgr);
  _managers.add(_prjMgr);
  _managers.add(_swiftMgr);
  _managers.add(_s3Mgr);
  _managers.add(_storageNetworkMgr);
  _managers.add(_extlbUsageMgr);
  _managers.add(_haMgr);
  _managers.add(_vpcMgr);
  _managers.add(_vpcNetApplianceMgr);
  _managers.add(_networkAclMgr);
  _managers.add(_taggedResMgr);
  _managers.add(_s2sVpnMgr);
  _managers.add(_queryMgr);
}",0.988108108108108
106406,"public static String genAccessTicket(String host,String port,String sid,String tag,Date normalizedHashTime){
  String params=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ sid+ ""String_Node_Str""+ tag;
  try {
    Mac mac=Mac.getInstance(""String_Node_Str"");
    long ts=normalizedHashTime.getTime();
    ts=ts / 60000;
    String secretKey=_ms.getHashKey();
    SecretKeySpec keySpec=new SecretKeySpec(secretKey.getBytes(),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(params.getBytes());
    mac.update(String.valueOf(ts).getBytes());
    byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}","public static String genAccessTicket(String host,String port,String sid,String tag,Date normalizedHashTime){
  String params=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ sid+ ""String_Node_Str""+ tag;
  try {
    Mac mac=Mac.getInstance(""String_Node_Str"");
    long ts=normalizedHashTime.getTime();
    ts=ts / 60000;
    String secretKey=s_ms.getHashKey();
    SecretKeySpec keySpec=new SecretKeySpec(secretKey.getBytes(),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(params.getBytes());
    mac.update(String.valueOf(ts).getBytes());
    byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}",0.9993502274204028
106407,"/** 
 * @param args - name of server-setup.xml file which contains the bootstrap data
 */
public static void main(String[] args){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  File file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (file != null) {
    System.out.println(""String_Node_Str"" + file.getAbsolutePath());
    DOMConfigurator.configureAndWatch(file.getAbsolutePath(),10000);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  if (args.length < 1) {
    s_logger.error(""String_Node_Str"");
  }
 else {
    try {
      DatabaseConfig config=ComponentContext.inject(DatabaseConfig.class,args[0]);
      config.doVersionCheck();
      config.doConfig();
      System.exit(0);
    }
 catch (    Exception ex) {
      System.out.print(""String_Node_Str"");
      ex.printStackTrace();
      s_logger.error(""String_Node_Str"",ex);
    }
  }
}","/** 
 * @param args - name of server-setup.xml file which contains the bootstrap data
 */
public static void main(String[] args){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  File file=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (file != null) {
    System.out.println(""String_Node_Str"" + file.getAbsolutePath());
    DOMConfigurator.configureAndWatch(file.getAbsolutePath(),10000);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  if (args.length < 1) {
    s_logger.error(""String_Node_Str"");
  }
 else {
    try {
      DatabaseConfig config=ComponentContext.inject(DatabaseConfig.class);
      config.doVersionCheck();
      config.doConfig();
      System.exit(0);
    }
 catch (    Exception ex) {
      System.out.print(""String_Node_Str"");
      ex.printStackTrace();
      s_logger.error(""String_Node_Str"",ex);
    }
  }
}",0.9957035445757252
106408,"public void tstLocking(){
  int testThreads=20;
  Thread[] threads=new Thread[testThreads];
  for (int i=0; i < testThreads; i++) {
    final int current=i;
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        final HostDao hostDao=new HostDaoImpl();
        while (true) {
          Transaction txn=Transaction.currentTxn();
          try {
            HostVO host=hostDao.acquireInLockTable(getRandomLockId(),10);
            if (host != null) {
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
              try {
                Thread.sleep(getRandomMilliseconds(1000,5000));
              }
 catch (              InterruptedException e) {
              }
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
              hostDao.releaseFromLockTable(host.getId());
              try {
                Thread.sleep(getRandomMilliseconds(1000,5000));
              }
 catch (              InterruptedException e) {
              }
            }
 else {
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
            }
          }
  finally {
            txn.close();
          }
        }
      }
    }
);
    threads[i].start();
  }
  try {
    for (int i=0; i < testThreads; i++)     threads[i].join();
  }
 catch (  InterruptedException e) {
  }
}","public void tstLocking(){
  int testThreads=20;
  Thread[] threads=new Thread[testThreads];
  for (int i=0; i < testThreads; i++) {
    final int current=i;
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        final HostDao hostDao=new HostDaoImpl();
        while (true) {
          Transaction txn=Transaction.currentTxn();
          try {
            HostVO host=hostDao.acquireInLockTable(getRandomLockId(),10);
            if (host != null) {
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
              try {
                Thread.sleep(1000);
              }
 catch (              InterruptedException e) {
              }
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
              hostDao.releaseFromLockTable(host.getId());
              try {
                Thread.sleep(1000);
              }
 catch (              InterruptedException e) {
              }
            }
 else {
              s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
            }
          }
  finally {
            txn.close();
          }
        }
      }
    }
);
    threads[i].start();
  }
  try {
    for (int i=0; i < testThreads; i++)     threads[i].join();
  }
 catch (  InterruptedException e) {
  }
}",0.979381443298969
106409,"@Override public void run(){
  final HostDao hostDao=new HostDaoImpl();
  while (true) {
    Transaction txn=Transaction.currentTxn();
    try {
      HostVO host=hostDao.acquireInLockTable(getRandomLockId(),10);
      if (host != null) {
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
        try {
          Thread.sleep(getRandomMilliseconds(1000,5000));
        }
 catch (        InterruptedException e) {
        }
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
        hostDao.releaseFromLockTable(host.getId());
        try {
          Thread.sleep(getRandomMilliseconds(1000,5000));
        }
 catch (        InterruptedException e) {
        }
      }
 else {
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
      }
    }
  finally {
      txn.close();
    }
  }
}","@Override public void run(){
  final HostDao hostDao=new HostDaoImpl();
  while (true) {
    Transaction txn=Transaction.currentTxn();
    try {
      HostVO host=hostDao.acquireInLockTable(getRandomLockId(),10);
      if (host != null) {
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
        hostDao.releaseFromLockTable(host.getId());
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
 else {
        s_logger.info(""String_Node_Str"" + (current + 1) + ""String_Node_Str"");
      }
    }
  finally {
      txn.close();
    }
  }
}",0.966547192353644
106410,"public void testDomain(){
  getRandomMilliseconds(1,100);
  DomainDao domainDao=new DomainDaoImpl();
  DomainVO domain1=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain1);
  DomainVO domain2=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain2);
  DomainVO domain3=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain3);
  DomainVO domain11=new DomainVO(""String_Node_Str"",2L,domain1.getId(),null);
  domainDao.create(domain11);
  domainDao.remove(domain11.getId());
  DomainVO domain12=new DomainVO(""String_Node_Str"",2L,domain1.getId(),null);
  domainDao.create(domain12);
  domainDao.remove(domain3.getId());
  DomainVO domain4=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain4);
}","public void testDomain(){
  DomainDao domainDao=new DomainDaoImpl();
  DomainVO domain1=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain1);
  DomainVO domain2=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain2);
  DomainVO domain3=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain3);
  DomainVO domain11=new DomainVO(""String_Node_Str"",2L,domain1.getId(),null);
  domainDao.create(domain11);
  domainDao.remove(domain11.getId());
  DomainVO domain12=new DomainVO(""String_Node_Str"",2L,domain1.getId(),null);
  domainDao.create(domain12);
  domainDao.remove(domain3.getId());
  DomainVO domain4=new DomainVO(""String_Node_Str"",2L,1L,null);
  domainDao.create(domain4);
}",0.9784656796769852
106411,"public void dequeueFromOneQueue(){
  final int totalRuns=5000;
  final SyncQueueVO queue=mgr.queue(""String_Node_Str"",1L,""String_Node_Str"",1,1);
  for (int i=1; i < totalRuns; i++)   mgr.queue(""String_Node_Str"",1L,""String_Node_Str"",i + 1,1);
  count=0;
  expectingCurrent=1;
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info(""String_Node_Str"" + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info(""String_Node_Str"" + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  thread1.start();
  thread2.start();
  try {
    thread1.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    thread2.join();
  }
 catch (  InterruptedException e) {
  }
  Assert.assertEquals(totalRuns,count);
}","public void dequeueFromOneQueue(){
  final int totalRuns=5000;
  final SyncQueueVO queue=mgr.queue(""String_Node_Str"",1L,""String_Node_Str"",1,1);
  for (int i=1; i < totalRuns; i++)   mgr.queue(""String_Node_Str"",1L,""String_Node_Str"",i + 1,1);
  count=0;
  expectingCurrent=1;
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info(""String_Node_Str"" + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns) {
        SyncQueueItemVO item=mgr.dequeueFromOne(queue.getId(),1L);
        if (item != null) {
          s_logger.info(""String_Node_Str"" + item.toString());
          Assert.assertEquals(expectingCurrent,item.getContentId().longValue());
          expectingCurrent++;
          count++;
          mgr.purgeItem(item.getId());
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  thread1.start();
  thread2.start();
  try {
    thread1.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    thread2.join();
  }
 catch (  InterruptedException e) {
  }
  Assert.assertEquals(totalRuns,count);
}",0.9844031193761248
106412,"public void dequeueFromAnyQueue(){
  final int queues=30;
  final int totalRuns=100;
  final int itemsPerRun=20;
  for (int q=1; q <= queues; q++)   for (int i=0; i < totalRuns; i++)   mgr.queue(""String_Node_Str"",q,""String_Node_Str"",i + 1,1);
  count=0;
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns * queues) {
        List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
        if (l != null && l.size() > 0) {
          s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
          for (          SyncQueueItemVO item : l) {
            s_logger.info(""String_Node_Str"" + item.toString());
            count++;
            mgr.purgeItem(item.getId());
          }
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns * queues) {
        List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
        if (l != null && l.size() > 0) {
          s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
          for (          SyncQueueItemVO item : l) {
            s_logger.info(""String_Node_Str"" + item.toString());
            count++;
            mgr.purgeItem(item.getId());
          }
        }
        try {
          Thread.sleep(getRandomMilliseconds(1,10));
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  thread1.start();
  thread2.start();
  try {
    thread1.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    thread2.join();
  }
 catch (  InterruptedException e) {
  }
  Assert.assertEquals(queues * totalRuns,count);
}","public void dequeueFromAnyQueue(){
  final int queues=30;
  final int totalRuns=100;
  final int itemsPerRun=20;
  for (int q=1; q <= queues; q++)   for (int i=0; i < totalRuns; i++)   mgr.queue(""String_Node_Str"",q,""String_Node_Str"",i + 1,1);
  count=0;
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns * queues) {
        List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
        if (l != null && l.size() > 0) {
          s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
          for (          SyncQueueItemVO item : l) {
            s_logger.info(""String_Node_Str"" + item.toString());
            count++;
            mgr.purgeItem(item.getId());
          }
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      while (count < totalRuns * queues) {
        List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
        if (l != null && l.size() > 0) {
          s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
          for (          SyncQueueItemVO item : l) {
            s_logger.info(""String_Node_Str"" + item.toString());
            count++;
            mgr.purgeItem(item.getId());
          }
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
);
  thread1.start();
  thread2.start();
  try {
    thread1.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    thread2.join();
  }
 catch (  InterruptedException e) {
  }
  Assert.assertEquals(queues * totalRuns,count);
}",0.9853273137697516
106413,"@Override public void run(){
  while (count < totalRuns * queues) {
    List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
    if (l != null && l.size() > 0) {
      s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
      for (      SyncQueueItemVO item : l) {
        s_logger.info(""String_Node_Str"" + item.toString());
        count++;
        mgr.purgeItem(item.getId());
      }
    }
    try {
      Thread.sleep(getRandomMilliseconds(1,10));
    }
 catch (    InterruptedException e) {
    }
  }
}","@Override public void run(){
  while (count < totalRuns * queues) {
    List<SyncQueueItemVO> l=mgr.dequeueFromAny(1L,itemsPerRun);
    if (l != null && l.size() > 0) {
      s_logger.info(""String_Node_Str"" + l.size() + ""String_Node_Str"");
      for (      SyncQueueItemVO item : l) {
        s_logger.info(""String_Node_Str"" + item.toString());
        count++;
        mgr.purgeItem(item.getId());
      }
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}",0.974757281553398
106414,"@Before @Override public void setUp(){
  MockComponentLocator locator=new MockComponentLocator(""String_Node_Str"");
  locator.addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupRuleDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupJoinDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupVMMapDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupRulesDaoImpl.class);
  locator.addDao(""String_Node_Str"",UserVmDaoImpl.class);
  locator.addDao(""String_Node_Str"",AccountDaoImpl.class);
  locator.addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  locator.addDao(""String_Node_Str"",SecurityGroupWorkDaoImpl.class);
  locator.addDao(""String_Node_Str"",VmRulesetLogDaoImpl.class);
  locator.addDao(""String_Node_Str"",VMInstanceDaoImpl.class);
  locator.addDao(""String_Node_Str"",DomainDaoImpl.class);
  locator.addDao(""String_Node_Str"",UsageEventDaoImpl.class);
  locator.addDao(""String_Node_Str"",ResourceTagsDaoImpl.class);
  locator.addManager(""String_Node_Str"",MockAgentManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockVirtualMachineManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockUserVmManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockNetworkManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockAccountManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockDomainManagerImpl.class);
  locator.addManager(""String_Node_Str"",MockProjectManagerImpl.class);
  locator.makeActive(new DefaultInterceptorLibrary());
  _sgMgr=ComponentLocator.inject(SecurityGroupManagerImpl2.class);
  _sgMgr._mBean=new SecurityManagerMBeanImpl(_sgMgr);
}","@Before @Override public void setUp(){
}",0.0449690837549184
106415,"public void testListBy(){
  SnapshotDaoImpl dao=ComponentLocator.inject(SnapshotDaoImpl.class);
  List<SnapshotVO> snapshots=dao.listByInstanceId(3,Snapshot.Status.BackedUp);
  for (  SnapshotVO snapshot : snapshots) {
    Assert.assertTrue(snapshot.getStatus() == Snapshot.Status.BackedUp);
  }
}","public void testListBy(){
  List<SnapshotVO> snapshots=dao.listByInstanceId(3,Snapshot.Status.BackedUp);
  for (  SnapshotVO snapshot : snapshots) {
    Assert.assertTrue(snapshot.getStatus() == Snapshot.Status.BackedUp);
  }
}",0.8664122137404581
106416,"public void testCountByStatus(){
  StoragePoolDaoImpl dao=ComponentLocator.inject(StoragePoolDaoImpl.class);
  long count=dao.countPoolsByStatus(StoragePoolStatus.Up);
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str"");
}","public void testCountByStatus(){
  long count=dao.countPoolsByStatus(StoragePoolStatus.Up);
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str"");
}",0.81
106417,"public static void setComponents(ResponseGenerator generator){
}","public static void setComponents(ResponseGenerator generator){
  ComponentLocator locator=ComponentLocator.getLocator(ManagementService.Name);
  _mgr=(ManagementService)ComponentLocator.getComponent(ManagementService.Name);
  _accountService=locator.getManager(AccountService.class);
  _configService=locator.getManager(ConfigurationService.class);
  _userVmService=locator.getManager(UserVmService.class);
  _storageService=locator.getManager(StorageService.class);
  _resourceService=locator.getManager(ResourceService.class);
  _networkService=locator.getManager(NetworkService.class);
  _templateService=locator.getManager(TemplateService.class);
  _securityGroupService=locator.getManager(SecurityGroupService.class);
  _snapshotService=locator.getManager(SnapshotService.class);
  _consoleProxyService=locator.getManager(ConsoleProxyService.class);
  _routerService=locator.getManager(VpcVirtualNetworkApplianceService.class);
  _entityMgr=locator.getManager(EntityManager.class);
  _rulesService=locator.getManager(RulesService.class);
  _lbService=locator.getManager(LoadBalancingRulesService.class);
  _autoScaleService=locator.getManager(AutoScaleService.class);
  _ravService=locator.getManager(RemoteAccessVpnService.class);
  _responseGenerator=generator;
  _bareMetalVmService=locator.getManager(BareMetalVmService.class);
  _projectService=locator.getManager(ProjectService.class);
  _firewallService=locator.getManager(FirewallService.class);
  _domainService=locator.getManager(DomainService.class);
  _resourceLimitService=locator.getManager(ResourceLimitService.class);
  _identityService=locator.getManager(IdentityService.class);
  _storageNetworkService=locator.getManager(StorageNetworkService.class);
  _taggedResourceService=locator.getManager(TaggedResourceService.class);
  _vpcService=locator.getManager(VpcService.class);
  _networkACLService=locator.getManager(NetworkACLService.class);
  _s2sVpnService=locator.getManager(Site2SiteVpnService.class);
  _queryService=locator.getManager(QueryService.class);
}",0.060894386298763
106418,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void processParameters(BaseCmd cmd,Map<String,String> params){
  List<Object> entitiesToAccess=new ArrayList<Object>();
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      ServerApiException ex=new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      ex.setCSErrorCode(CSExceptionErrorCode.getCSErrCode(ex.getClass().getName()));
      throw ex;
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=ReflectUtil.getAllFieldsForClass(cmd.getClass(),new Class<?>[]{BaseCmd.class});
  for (  Field field : fields) {
    PlugService plugServiceAnnotation=field.getAnnotation(PlugService.class);
    if (plugServiceAnnotation != null) {
      plugService(field,cmd);
    }
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    Validate validateAnnotation=field.getAnnotation(Validate.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
    try {
      ACL checkAccess=field.getAnnotation(ACL.class);
      CommandType fieldType=parameterAnnotation.type();
      if (checkAccess != null) {
        if (parameterAnnotation.entityType() != null) {
          Class<?>[] entityList=parameterAnnotation.entityType()[0].getAnnotation(EntityReference.class).value();
          for (          Class entity : entityList) {
switch (fieldType) {
case LIST:
              CommandType listType=parameterAnnotation.collectionType();
switch (listType) {
case LONG:
case UUID:
              List<Long> listParam=new ArrayList<Long>();
            listParam=(List)field.get(cmd);
          for (          Long entityId : listParam) {
            Object entityObj=s_instance._entityMgr.findById(entity,(Long)field.get(cmd));
            entitiesToAccess.add(entityObj);
          }
        break;
default :
      break;
  }
break;
case LONG:
case UUID:
Object entityObj=s_instance._entityMgr.findById(entity,(Long)field.get(cmd));
entitiesToAccess.add(entityObj);
break;
default :
break;
}
if (ControlledEntity.class.isAssignableFrom(entity)) {
if (s_logger.isDebugEnabled()) {
s_logger.debug(""String_Node_Str"" + entity.getName());
}
}
if (InfrastructureEntity.class.isAssignableFrom(entity)) {
if (s_logger.isDebugEnabled()) {
s_logger.debug(""String_Node_Str"" + entity.getName());
}
}
}
}
}
}
 catch (IllegalArgumentException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
catch (IllegalAccessException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}
s_instance.doAccessChecks(cmd,entitiesToAccess);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void processParameters(BaseCmd cmd,Map<String,String> params){
  List<Object> entitiesToAccess=new ArrayList<Object>();
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      ServerApiException ex=new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      ex.setCSErrorCode(CSExceptionErrorCode.getCSErrCode(ex.getClass().getName()));
      throw ex;
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=ReflectUtil.getAllFieldsForClass(cmd.getClass(),new Class<?>[]{BaseCmd.class});
  for (  Field field : fields) {
    PlugService plugServiceAnnotation=field.getAnnotation(PlugService.class);
    if (plugServiceAnnotation != null) {
      plugService(field,cmd);
    }
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    Validate validateAnnotation=field.getAnnotation(Validate.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
    try {
      ACL checkAccess=field.getAnnotation(ACL.class);
      CommandType fieldType=parameterAnnotation.type();
      if (checkAccess != null) {
        if (parameterAnnotation.entityType() != null) {
          Class<?>[] entityList=parameterAnnotation.entityType()[0].getAnnotation(EntityReference.class).value();
          for (          Class entity : entityList) {
switch (fieldType) {
case LIST:
              CommandType listType=parameterAnnotation.collectionType();
switch (listType) {
case LONG:
case UUID:
              List<Long> listParam=(List<Long>)field.get(cmd);
            for (            Long entityId : listParam) {
              Object entityObj=s_instance._entityMgr.findById(entity,entityId);
              entitiesToAccess.add(entityObj);
            }
          break;
default :
        break;
    }
  break;
case LONG:
case UUID:
Object entityObj=s_instance._entityMgr.findById(entity,(Long)field.get(cmd));
entitiesToAccess.add(entityObj);
break;
default :
break;
}
if (ControlledEntity.class.isAssignableFrom(entity)) {
if (s_logger.isDebugEnabled()) {
s_logger.debug(""String_Node_Str"" + entity.getName());
}
}
if (InfrastructureEntity.class.isAssignableFrom(entity)) {
if (s_logger.isDebugEnabled()) {
s_logger.debug(""String_Node_Str"" + entity.getName());
}
}
}
}
}
}
 catch (IllegalArgumentException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
catch (IllegalAccessException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}
s_instance.doAccessChecks(cmd,entitiesToAccess);
}",0.988554390689622
106419,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  PhysicalNetworkVO physnet=_physicalNetworkDao.findById(plan.getPhysicalNetworkId());
  if (physnet == null || physnet.getIsolationMethods() == null || !physnet.getIsolationMethods().contains(""String_Node_Str"")) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<NiciraNvpDeviceVO> devices=_niciraNvpDao.listByPhysicalNetwork(physnet.getId());
  if (devices.isEmpty()) {
    s_logger.error(""String_Node_Str"" + physnet.getName());
    return null;
  }
  s_logger.debug(""String_Node_Str"" + devices.get(0).getUuid() + ""String_Node_Str""+ physnet.getId());
  s_logger.debug(""String_Node_Str"");
  NetworkVO networkObject=(NetworkVO)super.design(offering,plan,userSpecified,owner);
  if (networkObject == null) {
    return null;
  }
  networkObject.setBroadcastDomainType(BroadcastDomainType.Lswitch);
  return networkObject;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  PhysicalNetworkVO physnet=_physicalNetworkDao.findById(plan.getPhysicalNetworkId());
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc.getNetworkType(),physnet)) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<NiciraNvpDeviceVO> devices=_niciraNvpDao.listByPhysicalNetwork(physnet.getId());
  if (devices.isEmpty()) {
    s_logger.error(""String_Node_Str"" + physnet.getName());
    return null;
  }
  s_logger.debug(""String_Node_Str"" + devices.get(0).getUuid() + ""String_Node_Str""+ physnet.getId());
  s_logger.debug(""String_Node_Str"");
  NetworkVO networkObject=(NetworkVO)super.design(offering,plan,userSpecified,owner);
  if (networkObject == null) {
    return null;
  }
  networkObject.setBroadcastDomainType(BroadcastDomainType.Lswitch);
  return networkObject;
}",0.8866631523458092
106420,"public IPAddressDaoImpl(){
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAddress(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVlanId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAllocatedToAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isSourceNat(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAssociatedWithNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAssociatedWithVmId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isOneToOneNat(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getSourceNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVpcId(),Op.EQ);
  AllFieldsSearch.done();
  VlanDbIdSearchUnallocated=createSearchBuilder();
  VlanDbIdSearchUnallocated.and(""String_Node_Str"",VlanDbIdSearchUnallocated.entity().getAllocatedTime(),Op.NULL);
  VlanDbIdSearchUnallocated.and(""String_Node_Str"",VlanDbIdSearchUnallocated.entity().getVlanId(),Op.EQ);
  VlanDbIdSearchUnallocated.done();
  AllIpCount=createSearchBuilder(Integer.class);
  AllIpCount.select(null,Func.COUNT,AllIpCount.entity().getAddress());
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getDataCenterId(),Op.EQ);
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getVlanId(),Op.EQ);
  AllIpCount.done();
  AllocatedIpCount=createSearchBuilder(Integer.class);
  AllocatedIpCount.select(null,Func.COUNT,AllocatedIpCount.entity().getAddress());
  AllocatedIpCount.and(""String_Node_Str"",AllocatedIpCount.entity().getDataCenterId(),Op.EQ);
  AllocatedIpCount.and(""String_Node_Str"",AllocatedIpCount.entity().getVlanId(),Op.EQ);
  AllocatedIpCount.and(""String_Node_Str"",AllocatedIpCount.entity().getAllocatedTime(),Op.NNULL);
  AllocatedIpCount.done();
  AllIpCountForDashboard=createSearchBuilder(Integer.class);
  AllIpCountForDashboard.select(null,Func.COUNT,AllIpCountForDashboard.entity().getAddress());
  AllIpCountForDashboard.and(""String_Node_Str"",AllIpCountForDashboard.entity().getDataCenterId(),Op.EQ);
  AllIpCountForDashboard.and(""String_Node_Str"",AllIpCountForDashboard.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<VlanVO> virtaulNetworkVlan=_vlanDao.createSearchBuilder();
  virtaulNetworkVlan.and(""String_Node_Str"",virtaulNetworkVlan.entity().getVlanType(),SearchCriteria.Op.EQ);
  AllIpCountForDashboard.join(""String_Node_Str"",virtaulNetworkVlan,virtaulNetworkVlan.entity().getId(),AllIpCountForDashboard.entity().getVlanId(),JoinBuilder.JoinType.INNER);
  virtaulNetworkVlan.done();
  AllIpCountForDashboard.done();
  AllocatedIpCountForAccount=createSearchBuilder(Long.class);
  AllocatedIpCountForAccount.select(null,Func.COUNT,AllocatedIpCountForAccount.entity().getAddress());
  AllocatedIpCountForAccount.and(""String_Node_Str"",AllocatedIpCountForAccount.entity().getAllocatedToAccountId(),Op.EQ);
  AllocatedIpCountForAccount.and(""String_Node_Str"",AllocatedIpCountForAccount.entity().getAllocatedTime(),Op.NNULL);
  AllocatedIpCountForAccount.and(""String_Node_Str"",AllocatedIpCountForAccount.entity().getAssociatedWithNetworkId(),Op.NNULL);
  AllocatedIpCountForAccount.done();
  CountFreePublicIps=createSearchBuilder(Long.class);
  CountFreePublicIps.select(null,Func.COUNT,null);
  CountFreePublicIps.and(""String_Node_Str"",CountFreePublicIps.entity().getState(),SearchCriteria.Op.EQ);
  CountFreePublicIps.and(""String_Node_Str"",CountFreePublicIps.entity().getSourceNetworkId(),SearchCriteria.Op.EQ);
  SearchBuilder<VlanVO> join=_vlanDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getVlanType(),Op.EQ);
  CountFreePublicIps.join(""String_Node_Str"",join,CountFreePublicIps.entity().getVlanId(),join.entity().getId(),JoinBuilder.JoinType.INNER);
  CountFreePublicIps.done();
}","public IPAddressDaoImpl(){
}",0.0132013201320132
106421,"protected NetworkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastUri(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVpcId(),Op.EQ);
  SearchBuilder<NetworkOfferingVO> join1=_ntwkOffDao.createSearchBuilder();
  join1.and(""String_Node_Str"",join1.entity().isSystemOnly(),Op.EQ);
  AllFieldsSearch.join(""String_Node_Str"",join1,AllFieldsSearch.entity().getNetworkOfferingId(),join1.entity().getId(),JoinBuilder.JoinType.INNER);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join(""String_Node_Str"",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getVpcId(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and(""String_Node_Str"",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join(""String_Node_Str"",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and(""String_Node_Str"",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and(""String_Node_Str"",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join(""String_Node_Str"",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getGuestType(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  CountByZoneAndURI=createSearchBuilder(Long.class);
  CountByZoneAndURI.select(null,Func.COUNT,null);
  CountByZoneAndURI.and(""String_Node_Str"",CountByZoneAndURI.entity().getDataCenterId(),Op.EQ);
  CountByZoneAndURI.and(""String_Node_Str"",CountByZoneAndURI.entity().getBroadcastUri(),Op.EQ);
  CountByZoneAndURI.and(""String_Node_Str"",CountByZoneAndURI.entity().getGuestType(),Op.EQ);
  CountByZoneAndURI.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and(""String_Node_Str"",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> offJoin=_ntwkSvcMap.createSearchBuilder();
  offJoin.and(""String_Node_Str"",offJoin.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join(""String_Node_Str"",offJoin,ZoneSecurityGroupSearch.entity().getId(),offJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountBy=createSearchBuilder(Integer.class);
  CountBy.select(null,Func.COUNT,CountBy.entity().getId());
  CountBy.and(""String_Node_Str"",CountBy.entity().getNetworkOfferingId(),Op.EQ);
  CountBy.and(""String_Node_Str"",CountBy.entity().getVpcId(),Op.EQ);
  CountBy.and(""String_Node_Str"",CountBy.entity().getRemoved(),Op.NULL);
  CountBy.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and(""String_Node_Str"",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  SecurityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and(""String_Node_Str"",join3.entity().getService(),Op.EQ);
  SecurityGroupSearch.join(""String_Node_Str"",join3,SecurityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SecurityGroupSearch.done();
  NetworksCount=createSearchBuilder(Integer.class);
  NetworksCount.select(null,Func.COUNT,NetworksCount.entity().getId());
  NetworksCount.and(""String_Node_Str"",NetworksCount.entity().getNetworkOfferingId(),SearchCriteria.Op.EQ);
  NetworksCount.done();
  NetworksRegularUserCanCreateSearch=createSearchBuilder(Long.class);
  NetworksRegularUserCanCreateSearch.and(""String_Node_Str"",NetworksRegularUserCanCreateSearch.entity().getAclType(),Op.EQ);
  NetworksRegularUserCanCreateSearch.select(null,Func.COUNT,NetworksRegularUserCanCreateSearch.entity().getId());
  SearchBuilder<NetworkAccountVO> join4=_accountsDao.createSearchBuilder();
  join4.and(""String_Node_Str"",join4.entity().getAccountId(),Op.EQ);
  join4.and(""String_Node_Str"",join4.entity().isOwner(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join4,NetworksRegularUserCanCreateSearch.entity().getId(),join4.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<NetworkOfferingVO> join5=_ntwkOffDao.createSearchBuilder();
  join5.and(""String_Node_Str"",join5.entity().getSpecifyVlan(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join5,NetworksRegularUserCanCreateSearch.entity().getNetworkOfferingId(),join5.entity().getId(),JoinBuilder.JoinType.INNER);
  NetworksRegularUserCanCreateSearch.done();
  _tgMacAddress=_tgs.get(""String_Node_Str"");
  SourceNATSearch=createSearchBuilder();
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getAccountId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getDataCenterId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getGuestType(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join6=_ntwkSvcMap.createSearchBuilder();
  join6.and(""String_Node_Str"",join6.entity().getService(),Op.EQ);
  SourceNATSearch.join(""String_Node_Str"",join6,SourceNATSearch.entity().getId(),join6.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SourceNATSearch.done();
  VpcNetworksCount=createSearchBuilder(Long.class);
  VpcNetworksCount.and(""String_Node_Str"",VpcNetworksCount.entity().getVpcId(),Op.EQ);
  VpcNetworksCount.select(null,Func.COUNT,VpcNetworksCount.entity().getId());
  VpcNetworksCount.done();
}","public NetworkDaoImpl(){
}",0.0058293587705352
106422,"protected Site2SiteVpnConnectionDaoImpl(){
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCustomerGatewayId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVpnGatewayId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
  VpcSearch=createSearchBuilder();
  VpnGatewaySearch=_vpnGatewayDao.createSearchBuilder();
  VpnGatewaySearch.and(""String_Node_Str"",VpnGatewaySearch.entity().getVpcId(),SearchCriteria.Op.EQ);
  VpcSearch.join(""String_Node_Str"",VpnGatewaySearch,VpnGatewaySearch.entity().getId(),VpcSearch.entity().getVpnGatewayId(),JoinType.INNER);
  VpcSearch.done();
}","public Site2SiteVpnConnectionDaoImpl(){
}",0.1024930747922437
106423,"protected SnapshotDaoImpl(){
  VolumeIdSearch=createSearchBuilder();
  VolumeIdSearch.and(""String_Node_Str"",VolumeIdSearch.entity().getVolumeId(),SearchCriteria.Op.EQ);
  VolumeIdSearch.done();
  HostIdSearch=createSearchBuilder();
  HostIdSearch.and(""String_Node_Str"",HostIdSearch.entity().getSecHostId(),SearchCriteria.Op.EQ);
  HostIdSearch.and(""String_Node_Str"",HostIdSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  HostIdSearch.done();
  VolumeIdTypeSearch=createSearchBuilder();
  VolumeIdTypeSearch.and(""String_Node_Str"",VolumeIdTypeSearch.entity().getVolumeId(),SearchCriteria.Op.EQ);
  VolumeIdTypeSearch.and(""String_Node_Str"",VolumeIdTypeSearch.entity().getsnapshotType(),SearchCriteria.Op.EQ);
  VolumeIdTypeSearch.done();
  VolumeIdVersionSearch=createSearchBuilder();
  VolumeIdVersionSearch.and(""String_Node_Str"",VolumeIdVersionSearch.entity().getVolumeId(),SearchCriteria.Op.EQ);
  VolumeIdVersionSearch.and(""String_Node_Str"",VolumeIdVersionSearch.entity().getVersion(),SearchCriteria.Op.EQ);
  VolumeIdVersionSearch.done();
  ParentIdSearch=createSearchBuilder();
  ParentIdSearch.and(""String_Node_Str"",ParentIdSearch.entity().getPrevSnapshotId(),SearchCriteria.Op.EQ);
  ParentIdSearch.done();
  backupUuidSearch=createSearchBuilder();
  backupUuidSearch.and(""String_Node_Str"",backupUuidSearch.entity().getBackupSnapshotId(),SearchCriteria.Op.EQ);
  backupUuidSearch.done();
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  StatusSearch=createSearchBuilder();
  StatusSearch.and(""String_Node_Str"",StatusSearch.entity().getVolumeId(),SearchCriteria.Op.EQ);
  StatusSearch.and(""String_Node_Str"",StatusSearch.entity().getStatus(),SearchCriteria.Op.IN);
  StatusSearch.done();
  CountSnapshotsByAccount=createSearchBuilder(Long.class);
  CountSnapshotsByAccount.select(null,Func.COUNT,null);
  CountSnapshotsByAccount.and(""String_Node_Str"",CountSnapshotsByAccount.entity().getAccountId(),SearchCriteria.Op.EQ);
  CountSnapshotsByAccount.and(""String_Node_Str"",CountSnapshotsByAccount.entity().getRemoved(),SearchCriteria.Op.NULL);
  CountSnapshotsByAccount.done();
  InstanceIdSearch=createSearchBuilder();
  InstanceIdSearch.and(""String_Node_Str"",InstanceIdSearch.entity().getStatus(),SearchCriteria.Op.IN);
  SearchBuilder<VMInstanceVO> instanceSearch=_instanceDao.createSearchBuilder();
  instanceSearch.and(""String_Node_Str"",instanceSearch.entity().getId(),SearchCriteria.Op.EQ);
  SearchBuilder<VolumeVO> volumeSearch=_volumeDao.createSearchBuilder();
  volumeSearch.and(""String_Node_Str"",volumeSearch.entity().getState(),SearchCriteria.Op.EQ);
  volumeSearch.join(""String_Node_Str"",instanceSearch,instanceSearch.entity().getId(),volumeSearch.entity().getInstanceId(),JoinType.INNER);
  InstanceIdSearch.join(""String_Node_Str"",volumeSearch,volumeSearch.entity().getId(),InstanceIdSearch.entity().getVolumeId(),JoinType.INNER);
  InstanceIdSearch.done();
}","public SnapshotDaoImpl(){
}",0.0151965642550379
106424,"public static Method resolveHandler(Class<?> handlerClz,String operationName){
synchronized (s_handlerCache) {
    Method handler=s_handlerCache.get(handlerClz);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getMethods()) {
      AsyncCallbackHandler annotation=method.getAnnotation(AsyncCallbackHandler.class);
      if (annotation != null) {
        if (annotation.operationName().equals(operationName)) {
          s_handlerCache.put(handlerClz,method);
          return method;
        }
      }
    }
  }
  return null;
}","public static Method resolveHandler(Class<?> handlerClz,String command){
synchronized (s_handlerCache) {
    Map<String,Method> handlerMap=getAndSetHandlerMap(handlerClz);
    Method handler=handlerMap.get(command);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getDeclaredMethods()) {
      AsyncCallbackHandler annotation=method.getAnnotation(AsyncCallbackHandler.class);
      if (annotation != null) {
        if (annotation.operationName().equals(command)) {
          handlerMap.put(command,method);
          method.setAccessible(true);
          return method;
        }
      }
    }
  }
  return null;
}",0.790468364831553
106425,"public static Method resolveHandler(Class<?> handlerClz,String command){
synchronized (s_handlerCache) {
    Method handler=s_handlerCache.get(handlerClz);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getMethods()) {
      RpcCallbackHandler annotation=method.getAnnotation(RpcCallbackHandler.class);
      if (annotation != null) {
        if (annotation.command().equals(command)) {
          s_handlerCache.put(handlerClz,method);
          return method;
        }
      }
    }
  }
  return null;
}","public static Method resolveHandler(Class<?> handlerClz,String command){
synchronized (s_handlerCache) {
    Map<String,Method> handlerMap=getAndSetHandlerMap(handlerClz);
    Method handler=handlerMap.get(command);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getDeclaredMethods()) {
      RpcCallbackHandler annotation=method.getAnnotation(RpcCallbackHandler.class);
      if (annotation != null) {
        if (annotation.command().equals(command)) {
          method.setAccessible(true);
          handlerMap.put(command,method);
          return method;
        }
      }
    }
  }
  return null;
}",0.8185654008438819
106426,"private void handleCallRequestPdu(String sourceAddress,String targetAddress,RpcCallRequestPdu pdu){
  try {
    RpcServerCall call=new RpcServerCallImpl(this,sourceAddress,targetAddress,pdu);
    List<RpcServiceEndpoint> endpoints=new ArrayList<RpcServiceEndpoint>();
synchronized (_serviceEndpoints) {
      endpoints.addAll(_serviceEndpoints);
    }
    for (    RpcServiceEndpoint endpoint : endpoints) {
      if (RpcServiceDispatcher.dispatch(endpoint,call))       return;
    }
    RpcCallResponsePdu responsePdu=new RpcCallResponsePdu();
    responsePdu.setCommand(pdu.getCommand());
    responsePdu.setRequestStartTick(pdu.getRequestStartTick());
    responsePdu.setRequestTag(pdu.getRequestTag());
    responsePdu.setResult(RpcCallResponsePdu.RESULT_HANDLER_NOT_EXIST);
    sendRpcPdu(targetAddress,sourceAddress,_messageSerializer.serializeTo(RpcCallResponsePdu.class,responsePdu));
  }
 catch (  Throwable e) {
    RpcCallResponsePdu responsePdu=new RpcCallResponsePdu();
    responsePdu.setCommand(pdu.getCommand());
    responsePdu.setRequestStartTick(pdu.getRequestStartTick());
    responsePdu.setRequestTag(pdu.getRequestTag());
    responsePdu.setResult(RpcCallResponsePdu.RESULT_HANDLER_EXCEPTION);
    sendRpcPdu(targetAddress,sourceAddress,_messageSerializer.serializeTo(RpcCallResponsePdu.class,responsePdu));
  }
}","private void handleCallRequestPdu(String sourceAddress,String targetAddress,RpcCallRequestPdu pdu){
  try {
    RpcServerCall call=new RpcServerCallImpl(this,sourceAddress,targetAddress,pdu);
    List<RpcServiceEndpoint> endpoints=new ArrayList<RpcServiceEndpoint>();
synchronized (_serviceEndpoints) {
      endpoints.addAll(_serviceEndpoints);
    }
    for (    RpcServiceEndpoint endpoint : endpoints) {
      if (endpoint.onCallReceive(call))       return;
    }
    RpcCallResponsePdu responsePdu=new RpcCallResponsePdu();
    responsePdu.setCommand(pdu.getCommand());
    responsePdu.setRequestStartTick(pdu.getRequestStartTick());
    responsePdu.setRequestTag(pdu.getRequestTag());
    responsePdu.setResult(RpcCallResponsePdu.RESULT_HANDLER_NOT_EXIST);
    sendRpcPdu(targetAddress,sourceAddress,_messageSerializer.serializeTo(RpcCallResponsePdu.class,responsePdu));
  }
 catch (  Throwable e) {
    RpcCallResponsePdu responsePdu=new RpcCallResponsePdu();
    responsePdu.setCommand(pdu.getCommand());
    responsePdu.setRequestStartTick(pdu.getRequestStartTick());
    responsePdu.setRequestTag(pdu.getRequestTag());
    responsePdu.setResult(RpcCallResponsePdu.RESULT_HANDLER_EXCEPTION);
    sendRpcPdu(targetAddress,sourceAddress,_messageSerializer.serializeTo(RpcCallResponsePdu.class,responsePdu));
  }
}",0.9774096385542168
106427,"public static Method resolveHandler(Class<?> handlerClz,String command){
synchronized (s_handlerCache) {
    Method handler=s_handlerCache.get(handlerClz);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getMethods()) {
      RpcServiceHandler annotation=method.getAnnotation(RpcServiceHandler.class);
      if (annotation != null) {
        if (annotation.command().equals(command)) {
          s_handlerCache.put(handlerClz,method);
          return method;
        }
      }
    }
  }
  return null;
}","public static Method resolveHandler(Class<?> handlerClz,String command){
synchronized (s_handlerCache) {
    Map<String,Method> handlerMap=getAndSetHandlerMap(handlerClz);
    Method handler=handlerMap.get(command);
    if (handler != null)     return handler;
    for (    Method method : handlerClz.getDeclaredMethods()) {
      RpcServiceHandler annotation=method.getAnnotation(RpcServiceHandler.class);
      if (annotation != null) {
        if (annotation.command().equals(command)) {
          method.setAccessible(true);
          handlerMap.put(command,method);
          return method;
        }
      }
    }
  }
  return null;
}",0.8179508890770534
106428,"@RpcServiceHandler(command=""String_Node_Str"") void onStartCommand(RpcServerCall call){
  s_logger.info(""String_Node_Str"");
  SampleStoragePrepareCommand cmd=call.getCommandArgument();
  s_logger.info(""String_Node_Str"" + cmd.getStoragePool() + ""String_Node_Str""+ cmd.getVolumeId());
  SampleStoragePrepareAnswer answer=new SampleStoragePrepareAnswer();
  call.completeCall(answer);
}","@RpcServiceHandler(command=""String_Node_Str"") void onStartCommand(RpcServerCall call){
  s_logger.info(""String_Node_Str"");
  SampleStoragePrepareCommand cmd=call.getCommandArgument();
  s_logger.info(""String_Node_Str"" + cmd.getStoragePool() + ""String_Node_Str""+ cmd.getVolumeId());
  SampleStoragePrepareAnswer answer=new SampleStoragePrepareAnswer();
  answer.setResult(""String_Node_Str"");
  call.completeCall(answer);
}",0.9514321295143212
106429,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (int)(id ^ (id >>> 32));
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (int)(getId() ^ (getId() >>> 32));
  return result;
}",0.9517241379310344
106430,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  BaseViewVO other=(BaseViewVO)obj;
  if (id != other.id)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  BaseViewVO other=(BaseViewVO)obj;
  if (getId() != other.getId())   return false;
  return true;
}",0.9731800766283524
106431,"public void setId(long id){
  this.id=id;
}",public abstract void setId(long id);,0.6835443037974683
106432,"public long getId(){
  return id;
}",public abstract long getId();,0.625
106433,"public String getAccountUuid(){
  return accountUuid;
}","@Override public String getAccountUuid(){
  return accountUuid;
}",0.9166666666666666
106434,"public String getAccountName(){
  return accountName;
}","@Override public String getAccountName(){
  return accountName;
}",0.9166666666666666
106435,"public long getDomainId(){
  return domainId;
}","@Override public long getDomainId(){
  return domainId;
}",0.903846153846154
106436,"public String getDomainName(){
  return domainName;
}","@Override public String getDomainName(){
  return domainName;
}",0.913793103448276
106437,"public short getAccountType(){
  return accountType;
}","@Override public short getAccountType(){
  return accountType;
}",0.9152542372881356
106438,"public String getProjectName(){
  return projectName;
}","@Override public String getProjectName(){
  return projectName;
}",0.9166666666666666
106439,"public String getDomainPath(){
  return domainPath;
}","@Override public String getDomainPath(){
  return domainPath;
}",0.913793103448276
106440,"public String getProjectUuid(){
  return projectUuid;
}","@Override public String getProjectUuid(){
  return projectUuid;
}",0.9166666666666666
106441,"public long getAccountId(){
  return accountId;
}","@Override public long getAccountId(){
  return accountId;
}",0.9074074074074074
106442,"public long getId(){
  return id;
}","@Override public long getId(){
  return id;
}",0.875
106443,"public void setId(long id){
  this.id=id;
}","@Override public void setId(long id){
  this.id=id;
}",0.8958333333333334
106444,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void setupParameters(BaseCmd cmd,Map<String,String> params,List<ControlledEntity> entitiesToAccess){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      ServerApiException ex=new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      ex.setCSErrorCode(CSExceptionErrorCode.getCSErrCode(ex.getClass().getName()));
      throw ex;
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    PlugService plugServiceAnnotation=field.getAnnotation(PlugService.class);
    if (plugServiceAnnotation != null) {
      plugService(field,cmd);
    }
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
    try {
      ACL checkAccess=field.getAnnotation(ACL.class);
      CommandType fieldType=parameterAnnotation.type();
      if (checkAccess != null) {
        if (parameterAnnotation.resourceType() != null) {
          Class<?>[] entity=parameterAnnotation.resourceType();
          if (ControlledEntity.class.isAssignableFrom(entity)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entity.getName());
            }
            if (s_instance._daoNameMap.containsKey(entity.getName())) {
              Class<? extends GenericDao> daoClass=s_instance._daoNameMap.get(entity.getName());
              GenericDao daoClassInstance=s_instance._locator.getDao(daoClass);
switch (fieldType) {
case LIST:
                CommandType listType=parameterAnnotation.collectionType();
switch (listType) {
case LONG:
                List<Long> listParam=new ArrayList<Long>();
              listParam=(List)field.get(cmd);
            for (            Long entityId : listParam) {
              ControlledEntity entityObj=(ControlledEntity)daoClassInstance.findById(entityId);
              entitiesToAccess.add(entityObj);
            }
          break;
default :
        break;
    }
  break;
case LONG:
Long entityId=(Long)field.get(cmd);
ControlledEntity entityObj=(ControlledEntity)daoClassInstance.findById(entityId);
entitiesToAccess.add(entityObj);
break;
default :
break;
}
}
}
}
}
}
 catch (IllegalArgumentException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
catch (IllegalAccessException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void setupParameters(BaseCmd cmd,Map<String,String> params,List<ControlledEntity> entitiesToAccess){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      ServerApiException ex=new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      ex.setCSErrorCode(CSExceptionErrorCode.getCSErrCode(ex.getClass().getName()));
      throw ex;
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    PlugService plugServiceAnnotation=field.getAnnotation(PlugService.class);
    if (plugServiceAnnotation != null) {
      plugService(field,cmd);
    }
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
    try {
      ACL checkAccess=field.getAnnotation(ACL.class);
      CommandType fieldType=parameterAnnotation.type();
      if (checkAccess != null) {
        if (parameterAnnotation.resourceType() != null) {
          Class<?>[] entityList=parameterAnnotation.resourceType();
          for (          Class entity : entityList) {
            if (ControlledEntity.class.isAssignableFrom(entity)) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + entity.getName());
              }
              if (s_instance._daoNameMap.containsKey(entity.getName())) {
                Class<? extends GenericDao> daoClass=s_instance._daoNameMap.get(entity.getName());
                GenericDao daoClassInstance=s_instance._locator.getDao(daoClass);
switch (fieldType) {
case LIST:
                  CommandType listType=parameterAnnotation.collectionType();
switch (listType) {
case LONG:
                  List<Long> listParam=new ArrayList<Long>();
                listParam=(List)field.get(cmd);
              for (              Long entityId : listParam) {
                ControlledEntity entityObj=(ControlledEntity)daoClassInstance.findById(entityId);
                entitiesToAccess.add(entityObj);
              }
            break;
default :
          break;
      }
    break;
case LONG:
  Long entityId=(Long)field.get(cmd);
ControlledEntity entityObj=(ControlledEntity)daoClassInstance.findById(entityId);
entitiesToAccess.add(entityObj);
break;
default :
break;
}
}
}
}
}
}
}
 catch (IllegalArgumentException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
catch (IllegalAccessException e) {
s_logger.error(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}
}",0.9911734164070612
106445,"@Override @ActionEvent(eventType=EventTypes.EVENT_AUTOSCALEVMPROFILE_CREATE,eventDescription=""String_Node_Str"",create=true) public AutoScaleVmProfile createAutoScaleVmProfile(CreateAutoScaleVmProfileCmd cmd){
  Account owner=_accountDao.findById(cmd.getAccountId());
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,null,true,owner);
  long zoneId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  Long autoscaleUserId=cmd.getAutoscaleUserId();
  DataCenter zone=_configMgr.getZone(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOffering serviceOffering=_configMgr.getServiceOffering(serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  HashMap<String,String> deployParams=cmd.getDeployParamMap();
  if (deployParams.containsKey(""String_Node_Str"") && deployParams.get(""String_Node_Str"").length() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ApiDispatcher.setupParameters(new DeployVMCmd(),deployParams);
  if (autoscaleUserId == null) {
    autoscaleUserId=UserContext.current().getCallerUserId();
  }
  AutoScaleVmProfileVO profileVO=new AutoScaleVmProfileVO(cmd.getZoneId(),cmd.getDomainId(),cmd.getAccountId(),cmd.getServiceOfferingId(),cmd.getTemplateId(),cmd.getOtherDeployParams(),cmd.getCounterParamList(),cmd.getDestroyVmGraceperiod(),autoscaleUserId);
  profileVO=checkValidityAndPersist(profileVO);
  s_logger.info(""String_Node_Str"" + profileVO.getId());
  return profileVO;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_AUTOSCALEVMPROFILE_CREATE,eventDescription=""String_Node_Str"",create=true) public AutoScaleVmProfile createAutoScaleVmProfile(CreateAutoScaleVmProfileCmd cmd){
  Account owner=_accountDao.findById(cmd.getAccountId());
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,null,true,owner);
  long zoneId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  Long autoscaleUserId=cmd.getAutoscaleUserId();
  DataCenter zone=_configMgr.getZone(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOffering serviceOffering=_configMgr.getServiceOffering(serviceOfferingId);
  if (serviceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  HashMap<String,String> deployParams=cmd.getDeployParamMap();
  if (deployParams.containsKey(""String_Node_Str"") && deployParams.get(""String_Node_Str"").length() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ApiDispatcher.setupParameters(new DeployVMCmd(),deployParams,new ArrayList<ControlledEntity>());
  if (autoscaleUserId == null) {
    autoscaleUserId=UserContext.current().getCallerUserId();
  }
  AutoScaleVmProfileVO profileVO=new AutoScaleVmProfileVO(cmd.getZoneId(),cmd.getDomainId(),cmd.getAccountId(),cmd.getServiceOfferingId(),cmd.getTemplateId(),cmd.getOtherDeployParams(),cmd.getCounterParamList(),cmd.getDestroyVmGraceperiod(),autoscaleUserId);
  profileVO=checkValidityAndPersist(profileVO);
  s_logger.info(""String_Node_Str"" + profileVO.getId());
  return profileVO;
}",0.9895513214505224
106446,"public NatRule createLogicalRouterNatRule(String logicalRouterUuid,NatRule natRule) throws NiciraNvpApiException {
  String uri=""String_Node_Str"" + logicalRouterUuid + ""String_Node_Str"";
  if (natRule instanceof SourceNatRule) {
    return executeCreateObject(natRule,new TypeToken<SourceNatRule>(){
    }
.getType(),uri,Collections.<String,String>emptyMap());
  }
 else   if (natRule instanceof DestinationNatRule) {
    return executeCreateObject(natRule,new TypeToken<DestinationNatRule>(){
    }
.getType(),uri,Collections.<String,String>emptyMap());
  }
  throw new NiciraNvpApiException(""String_Node_Str"");
}","public NatRule createLogicalRouterNatRule(String logicalRouterUuid,NatRule natRule) throws NiciraNvpApiException {
  String uri=""String_Node_Str"" + logicalRouterUuid + ""String_Node_Str"";
  return executeCreateObject(natRule,new TypeToken<NatRule>(){
  }
.getType(),uri,Collections.<String,String>emptyMap());
}",0.670995670995671
106447,"@Override public boolean applyStaticNats(Network config,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  if (!canHandle(config,Service.StaticNat)) {
    return false;
  }
  boolean multiNetScalerDeployment=Boolean.valueOf(_configDao.getValue(Config.EIPWithMultipleNetScalersEnabled.key()));
  try {
    if (!multiNetScalerDeployment) {
      String errMsg;
      ExternalLoadBalancerDeviceVO lbDevice=getExternalLoadBalancerForNetwork(config);
      if (lbDevice == null) {
        try {
          lbDevice=allocateLoadBalancerForNetwork(config);
        }
 catch (        Exception e) {
          errMsg=""String_Node_Str"" + e.getMessage();
          s_logger.error(errMsg);
          throw new ResourceUnavailableException(errMsg,this.getClass(),0);
        }
      }
      if (!isNetscalerDevice(lbDevice.getDeviceName())) {
        errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        throw new ResourceUnavailableException(errMsg,this.getClass(),0);
      }
      SetStaticNatRulesAnswer answer=null;
      List<StaticNatRuleTO> rulesTO=null;
      if (rules != null) {
        rulesTO=new ArrayList<StaticNatRuleTO>();
        for (        StaticNat rule : rules) {
          IpAddress sourceIp=_networkMgr.getIp(rule.getSourceIpAddressId());
          StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
          rulesTO.add(ruleTO);
        }
      }
      SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO);
      answer=(SetStaticNatRulesAnswer)_agentMgr.send(lbDevice.getHostId(),cmd);
      if (answer == null) {
        return false;
      }
 else {
        return answer.getResult();
      }
    }
 else {
      if (rules != null) {
        for (        StaticNat rule : rules) {
          ExternalLoadBalancerDeviceVO lbDevice=getNetScalerForEIP(rule);
          if (lbDevice == null) {
            String errMsg=""String_Node_Str"" + rule.getDestIpAddress();
            s_logger.error(errMsg);
            throw new ResourceUnavailableException(errMsg,this.getClass(),0);
          }
          List<StaticNatRuleTO> rulesTO=new ArrayList<StaticNatRuleTO>();
          IpAddress sourceIp=_networkMgr.getIp(rule.getSourceIpAddressId());
          StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
          rulesTO.add(ruleTO);
          SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,null);
          SetStaticNatRulesAnswer answer=(SetStaticNatRulesAnswer)_agentMgr.send(lbDevice.getHostId(),cmd);
          if (answer == null) {
            String errMsg=""String_Node_Str"" + lbDevice.getHostId();
            s_logger.error(errMsg);
            throw new ResourceUnavailableException(errMsg,this.getClass(),0);
          }
        }
        return true;
      }
    }
    return true;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
}","@Override public boolean applyStaticNats(Network config,List<? extends StaticNat> rules) throws ResourceUnavailableException {
  if (!canHandle(config,Service.StaticNat)) {
    return false;
  }
  boolean multiNetScalerDeployment=Boolean.valueOf(_configDao.getValue(Config.EIPWithMultipleNetScalersEnabled.key()));
  try {
    if (!multiNetScalerDeployment) {
      String errMsg;
      ExternalLoadBalancerDeviceVO lbDevice=getExternalLoadBalancerForNetwork(config);
      if (lbDevice == null) {
        try {
          lbDevice=allocateLoadBalancerForNetwork(config);
        }
 catch (        Exception e) {
          errMsg=""String_Node_Str"" + e.getMessage();
          s_logger.error(errMsg);
          throw new ResourceUnavailableException(errMsg,this.getClass(),0);
        }
      }
      if (!isNetscalerDevice(lbDevice.getDeviceName())) {
        errMsg=""String_Node_Str"";
        s_logger.error(errMsg);
        throw new ResourceUnavailableException(errMsg,this.getClass(),0);
      }
      SetStaticNatRulesAnswer answer=null;
      List<StaticNatRuleTO> rulesTO=null;
      if (rules != null) {
        rulesTO=new ArrayList<StaticNatRuleTO>();
        for (        StaticNat rule : rules) {
          IpAddress sourceIp=_networkMgr.getIp(rule.getSourceIpAddressId());
          StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
          rulesTO.add(ruleTO);
        }
      }
      SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,null);
      answer=(SetStaticNatRulesAnswer)_agentMgr.send(lbDevice.getHostId(),cmd);
      if (answer == null) {
        return false;
      }
 else {
        return answer.getResult();
      }
    }
 else {
      if (rules != null) {
        for (        StaticNat rule : rules) {
          ExternalLoadBalancerDeviceVO lbDevice=getNetScalerForEIP(rule);
          if (lbDevice == null) {
            String errMsg=""String_Node_Str"" + rule.getDestIpAddress();
            s_logger.error(errMsg);
            throw new ResourceUnavailableException(errMsg,this.getClass(),0);
          }
          List<StaticNatRuleTO> rulesTO=new ArrayList<StaticNatRuleTO>();
          IpAddress sourceIp=_networkMgr.getIp(rule.getSourceIpAddressId());
          StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
          rulesTO.add(ruleTO);
          SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,null);
          SetStaticNatRulesAnswer answer=(SetStaticNatRulesAnswer)_agentMgr.send(lbDevice.getHostId(),cmd);
          if (answer == null) {
            String errMsg=""String_Node_Str"" + lbDevice.getHostId();
            s_logger.error(errMsg);
            throw new ResourceUnavailableException(errMsg,this.getClass(),0);
          }
        }
        return true;
      }
    }
    return true;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
}",0.999188706798637
106448,"@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
}","@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getId());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.1291759465478842
106449,"private static void serializeResponseObjFieldsXML(StringBuilder sb,ResponseObject obj){
  boolean isAsync=false;
  if (obj instanceof AsyncJobResponse)   isAsync=true;
  Field[] fields=getFlattenFields(obj.getClass());
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    field.setAccessible(true);
    Object fieldValue=null;
    try {
      fieldValue=field.get(obj);
    }
 catch (    IllegalArgumentException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    if (fieldValue != null) {
      if (fieldValue instanceof ResponseObject) {
        ResponseObject subObj=(ResponseObject)fieldValue;
        if (isAsync) {
          sb.append(""String_Node_Str"");
        }
        serializeResponseObjXML(sb,subObj);
        if (isAsync) {
          sb.append(""String_Node_Str"");
        }
      }
 else       if (fieldValue instanceof List<?>) {
        List<?> subResponseList=(List<Object>)fieldValue;
        boolean usedUuidList=false;
        for (        Object value : subResponseList) {
          if (value instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)value;
            if (serializedName != null) {
              subObj.setObjectName(serializedName.value());
            }
            serializeResponseObjXML(sb,subObj);
          }
 else           if (value instanceof IdentityProxy) {
            IdentityProxy idProxy=(IdentityProxy)value;
            String id=(idProxy.getValue() != null ? String.valueOf(idProxy.getValue()) : ""String_Node_Str"");
            if (!id.isEmpty()) {
              IdentityDao identityDao=new IdentityDaoImpl();
              id=identityDao.getIdentityUuid(idProxy.getTableName(),id);
            }
            if (id != null && !id.isEmpty()) {
              if (!usedUuidList) {
                sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
                usedUuidList=true;
              }
              sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
            }
            String idFieldName=idProxy.getidFieldName();
            if (idFieldName != null) {
              sb.append(""String_Node_Str"").append(idFieldName).append(""String_Node_Str"");
            }
          }
        }
        if (usedUuidList) {
          sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
        }
      }
 else       if (fieldValue instanceof Date) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"").append(BaseCmd.getDateString((Date)fieldValue)).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
 else       if (fieldValue instanceof IdentityProxy) {
        IdentityProxy idProxy=(IdentityProxy)fieldValue;
        String id=(idProxy.getValue() != null ? String.valueOf(idProxy.getValue()) : ""String_Node_Str"");
        if (!id.isEmpty()) {
          IdentityDao identityDao=new IdentityDaoImpl();
          if (idProxy.getTableName() != null) {
            id=identityDao.getIdentityUuid(idProxy.getTableName(),id);
          }
 else {
            s_logger.warn(""String_Node_Str"" + obj.getClass().getName());
          }
        }
        if (id != null && !id.isEmpty())         sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
 else {
        String resultString=escapeSpecialXmlChars(fieldValue.toString());
        if (!(obj instanceof ExceptionResponse)) {
          resultString=encodeParam(resultString);
        }
        sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"").append(resultString).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
    }
  }
}","private static void serializeResponseObjFieldsXML(StringBuilder sb,ResponseObject obj){
  boolean isAsync=false;
  if (obj instanceof AsyncJobResponse)   isAsync=true;
  Field[] fields=getFlattenFields(obj.getClass());
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    field.setAccessible(true);
    Object fieldValue=null;
    try {
      fieldValue=field.get(obj);
    }
 catch (    IllegalArgumentException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
    if (fieldValue != null) {
      if (fieldValue instanceof ResponseObject) {
        ResponseObject subObj=(ResponseObject)fieldValue;
        if (isAsync) {
          sb.append(""String_Node_Str"");
        }
        serializeResponseObjXML(sb,subObj);
        if (isAsync) {
          sb.append(""String_Node_Str"");
        }
      }
 else       if (fieldValue instanceof List<?>) {
        List<?> subResponseList=(List<Object>)fieldValue;
        boolean usedUuidList=false;
        for (        Object value : subResponseList) {
          if (value instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)value;
            if (serializedName != null) {
              subObj.setObjectName(serializedName.value());
            }
            serializeResponseObjXML(sb,subObj);
          }
 else           if (value instanceof IdentityProxy) {
            IdentityProxy idProxy=(IdentityProxy)value;
            String id=(idProxy.getValue() != null ? String.valueOf(idProxy.getValue()) : ""String_Node_Str"");
            if (!id.isEmpty()) {
              IdentityDao identityDao=new IdentityDaoImpl();
              id=identityDao.getIdentityUuid(idProxy.getTableName(),id);
            }
            if (id != null && !id.isEmpty()) {
              if (!usedUuidList) {
                sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
                usedUuidList=true;
              }
              sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
            }
            String idFieldName=idProxy.getidFieldName();
            if (idFieldName != null) {
              sb.append(""String_Node_Str"").append(idFieldName).append(""String_Node_Str"");
            }
          }
        }
        if (usedUuidList) {
          sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
        }
      }
 else       if (fieldValue instanceof Date) {
        sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"").append(BaseCmd.getDateString((Date)fieldValue)).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
 else       if (fieldValue instanceof IdentityProxy) {
        IdentityProxy idProxy=(IdentityProxy)fieldValue;
        String id=(idProxy.getValue() != null ? String.valueOf(idProxy.getValue()) : ""String_Node_Str"");
        if (!id.isEmpty()) {
          IdentityDao identityDao=new IdentityDaoImpl();
          if (idProxy.getTableName() != null) {
            id=identityDao.getIdentityUuid(idProxy.getTableName(),id);
          }
 else {
            s_logger.warn(""String_Node_Str"" + obj.getClass().getName());
          }
        }
        if (id != null && !id.isEmpty())         sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
 else {
        String resultString=escapeSpecialXmlChars(fieldValue.toString());
        if (!(obj instanceof ExceptionResponse)) {
          resultString=encodeParam(resultString);
        }
        sb.append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"").append(resultString).append(""String_Node_Str"").append(serializedName.value()).append(""String_Node_Str"");
      }
    }
  }
}",0.9962655101794964
106450,"public static ComponentLocator getLocator(String server){
  return ComponentContext.getCompanent(ComponentLocator.class);
}","public static ComponentLocator getLocator(String server,String configFileName,String log4jFilename){
  return ComponentContext.getCompanent(ComponentLocator.class);
}",0.8512110726643599
106451,"@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,true,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,true,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}","@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,true,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,true,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (isAdmin(caller.getType()) && domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}",0.9964698721850274
106452,"private StoragePool createSharedStoragePool(Connect conn,String uuid,String host,String path){
  String mountPoint=path;
  if (!_storageLayer.exists(mountPoint)) {
    s_logger.error(mountPath + ""String_Node_Str"");
    return null;
  }
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.DIR,uuid,uuid,host,path,path);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}","private StoragePool createSharedStoragePool(Connect conn,String uuid,String host,String path){
  String mountPoint=path;
  if (!_storageLayer.exists(mountPoint)) {
    s_logger.error(mountPoint + ""String_Node_Str"");
    return null;
  }
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.DIR,uuid,uuid,host,path,path);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}",0.9954337899543378
106453,"@Override public Host updateHost(UpdateHostCmd cmd) throws NoTransitionException {
  Long hostId=cmd.getId();
  Long guestOSCategoryId=cmd.getOsCategoryId();
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  if (cmd.getAllocationState() != null) {
    ResourceState.Event resourceEvent=ResourceState.Event.toEvent(cmd.getAllocationState());
    if (resourceEvent != ResourceState.Event.Enable && resourceEvent != ResourceState.Event.Disable) {
      throw new CloudRuntimeException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
    resourceStateTransitTo(host,resourceEvent,_nodeId);
  }
  if (guestOSCategoryId != null) {
    if (guestOSCategoryId > 0) {
      if (_guestOSCategoryDao.findById(guestOSCategoryId) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
    Map<String,String> hostDetails=_hostDetailsDao.findDetails(hostId);
    if (guestOSCategory != null) {
      hostDetails.put(""String_Node_Str"",String.valueOf(guestOSCategory.getId()));
    }
 else {
      hostDetails.remove(""String_Node_Str"");
    }
    _hostDetailsDao.persist(hostId,hostDetails);
  }
  List<String> hostTags=cmd.getHostTags();
  if (hostTags != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostTags);
    }
    _hostTagsDao.persist(hostId,hostTags);
  }
  String url=cmd.getUrl();
  if (url != null) {
    _storageMgr.updateSecondaryStorage(cmd.getId(),cmd.getUrl());
  }
  HostVO updatedHost=_hostDao.findById(hostId);
  return updatedHost;
}","@Override public Host updateHost(UpdateHostCmd cmd) throws NoTransitionException {
  Long hostId=cmd.getId();
  Long guestOSCategoryId=cmd.getOsCategoryId();
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  if (cmd.getAllocationState() != null) {
    ResourceState.Event resourceEvent=ResourceState.Event.toEvent(cmd.getAllocationState());
    if (resourceEvent != ResourceState.Event.Enable && resourceEvent != ResourceState.Event.Disable) {
      throw new CloudRuntimeException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
    resourceStateTransitTo(host,resourceEvent,_nodeId);
  }
  if (guestOSCategoryId != null) {
    if (guestOSCategoryId > 0) {
      if (_guestOSCategoryDao.findById(guestOSCategoryId) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
    Map<String,String> hostDetails=_hostDetailsDao.findDetails(hostId);
    if (guestOSCategory != null && !GuestOSCategoryVO.CATEGORY_NONE.equalsIgnoreCase(guestOSCategory.getName())) {
      hostDetails.put(""String_Node_Str"",String.valueOf(guestOSCategory.getId()));
    }
 else {
      hostDetails.remove(""String_Node_Str"");
    }
    _hostDetailsDao.persist(hostId,hostDetails);
  }
  List<String> hostTags=cmd.getHostTags();
  if (hostTags != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostTags);
    }
    _hostTagsDao.persist(hostId,hostTags);
  }
  String url=cmd.getUrl();
  if (url != null) {
    _storageMgr.updateSecondaryStorage(cmd.getId(),cmd.getUrl());
  }
  HostVO updatedHost=_hostDao.findById(hostId);
  return updatedHost;
}",0.9775533108866442
106454,"private String findDefaultDnsIp(long userVmId){
  NicVO defaultNic=_nicDao.findDefaultNicForVM(userVmId);
  if (!_networkMgr.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(),Service.Dns,Provider.VirtualRouter)) {
    return null;
  }
  NetworkOfferingVO offering=_networkOfferingDao.findById(_networkDao.findById(defaultNic.getNetworkId()).getNetworkOfferingId());
  if (offering.getRedundantRouter()) {
    return findGatewayIp(userVmId);
  }
  NicVO domrDefaultNic=_nicDao.findByNetworkIdTypeAndGateway(defaultNic.getNetworkId(),VirtualMachine.Type.DomainRouter,defaultNic.getGateway());
  return domrDefaultNic.getIp4Address();
}","private String findDefaultDnsIp(long userVmId){
  NicVO defaultNic=_nicDao.findDefaultNicForVM(userVmId);
  if (!_networkMgr.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(),Service.Dns,Provider.VirtualRouter)) {
    return null;
  }
  NetworkOfferingVO offering=_networkOfferingDao.findById(_networkDao.findById(defaultNic.getNetworkId()).getNetworkOfferingId());
  if (offering.getRedundantRouter()) {
    return findGatewayIp(userVmId);
  }
  DataCenter dc=_dcDao.findById(_networkMgr.getNetwork(defaultNic.getNetworkId()).getDataCenterId());
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  NicVO domrDefaultNic;
  if (isZoneBasic) {
    domrDefaultNic=_nicDao.findByNetworkIdTypeAndGateway(defaultNic.getNetworkId(),VirtualMachine.Type.DomainRouter,defaultNic.getGateway());
  }
 else {
    domrDefaultNic=_nicDao.findByNetworkIdAndType(defaultNic.getNetworkId(),VirtualMachine.Type.DomainRouter);
  }
  return domrDefaultNic.getIp4Address();
}",0.7928483353884094
106455,"private static String genDefaultEncryptorPassword(){
  try {
    SecureRandom random=SecureRandom.getInstance(""String_Node_Str"");
    byte[] randomBytes=new byte[16];
    random.nextBytes(randomBytes);
    return Base64.encode(randomBytes);
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    assert(false);
  }
  return ""String_Node_Str"";
}","private static String genDefaultEncryptorPassword(){
  try {
    SecureRandom random=SecureRandom.getInstance(""String_Node_Str"");
    byte[] randomBytes=new byte[16];
    random.nextBytes(randomBytes);
    return Base64.encodeBase64String(randomBytes);
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    assert(false);
  }
  return ""String_Node_Str"";
}",0.984375
106456,"private <T>T executeRetrieveObject(Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  GetMethod gm=new GetMethod(url);
  gm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  if (parameters != null && !parameters.isEmpty()) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(parameters.size());
    for (    Entry<String,String> e : parameters.entrySet()) {
      nameValuePairs.add(new NameValuePair(e.getKey(),e.getValue()));
    }
    gm.setQueryString(nameValuePairs.toArray(new NameValuePair[0]));
  }
  executeMethod(gm);
  if (gm.getStatusCode() != HttpStatus.SC_OK) {
    String errorMessage=responseToErrorMessage(gm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  Gson gson=new Gson();
  T returnValue;
  try {
    returnValue=gson.fromJson(gm.getResponseBodyAsString(),returnObjectType);
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(e);
  }
  return returnValue;
}","private <T>T executeRetrieveObject(Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  GetMethod gm=new GetMethod(url);
  gm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  if (parameters != null && !parameters.isEmpty()) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(parameters.size());
    for (    Entry<String,String> e : parameters.entrySet()) {
      nameValuePairs.add(new NameValuePair(e.getKey(),e.getValue()));
    }
    gm.setQueryString(nameValuePairs.toArray(new NameValuePair[0]));
  }
  executeMethod(gm);
  if (gm.getStatusCode() != HttpStatus.SC_OK) {
    String errorMessage=responseToErrorMessage(gm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  Gson gson=new Gson();
  T returnValue;
  try {
    returnValue=(T)gson.fromJson(gm.getResponseBodyAsString(),returnObjectType);
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(e);
  }
  return returnValue;
}",0.9988623435722412
106457,"private <T>T executeCreateObject(T newObject,Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  Gson gson=new Gson();
  PostMethod pm=new PostMethod(url);
  pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    pm.setRequestEntity(new StringRequestEntity(gson.toJson(newObject),""String_Node_Str"",null));
  }
 catch (  UnsupportedEncodingException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  executeMethod(pm);
  if (pm.getStatusCode() != HttpStatus.SC_CREATED) {
    String errorMessage=responseToErrorMessage(pm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  T result;
  try {
    result=gson.fromJson(pm.getResponseBodyAsString(),TypeToken.get(newObject.getClass()).getType());
  }
 catch (  IOException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  return result;
}","private <T>T executeCreateObject(T newObject,Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  Gson gson=new Gson();
  PostMethod pm=new PostMethod(url);
  pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    pm.setRequestEntity(new StringRequestEntity(gson.toJson(newObject),""String_Node_Str"",null));
  }
 catch (  UnsupportedEncodingException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  executeMethod(pm);
  if (pm.getStatusCode() != HttpStatus.SC_CREATED) {
    String errorMessage=responseToErrorMessage(pm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  T result;
  try {
    result=(T)gson.fromJson(pm.getResponseBodyAsString(),TypeToken.get(newObject.getClass()).getType());
  }
 catch (  IOException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  return result;
}",0.9987379049221708
106458,"private String findDefaultDnsIp(long userVmId){
  NicVO defaultNic=_nicDao.findDefaultNicForVM(userVmId);
  if (!_networkMgr.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(),Service.Dns,Provider.VirtualRouter)) {
    return null;
  }
  NetworkOfferingVO offering=_networkOfferingDao.findById(_networkDao.findById(defaultNic.getNetworkId()).getNetworkOfferingId());
  if (offering.getRedundantRouter()) {
    return findGatewayIp(userVmId);
  }
  NicVO domrDefaultNic=_nicDao.findByNetworkIdAndType(defaultNic.getNetworkId(),VirtualMachine.Type.DomainRouter);
  return domrDefaultNic.getIp4Address();
}","private String findDefaultDnsIp(long userVmId){
  NicVO defaultNic=_nicDao.findDefaultNicForVM(userVmId);
  if (!_networkMgr.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(),Service.Dns,Provider.VirtualRouter)) {
    return null;
  }
  NetworkOfferingVO offering=_networkOfferingDao.findById(_networkDao.findById(defaultNic.getNetworkId()).getNetworkOfferingId());
  if (offering.getRedundantRouter()) {
    return findGatewayIp(userVmId);
  }
  NicVO domrDefaultNic=_nicDao.findByNetworkIdTypeAndGateway(defaultNic.getNetworkId(),VirtualMachine.Type.DomainRouter,defaultNic.getGateway());
  return domrDefaultNic.getIp4Address();
}",0.8828685258964143
106459,"protected NicDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVmType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIp4Address(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isDefaultNic(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastUri(),Op.EQ);
  AllFieldsSearch.done();
  IpSearch=createSearchBuilder(String.class);
  IpSearch.select(null,Func.DISTINCT,IpSearch.entity().getIp4Address());
  IpSearch.and(""String_Node_Str"",IpSearch.entity().getNetworkId(),Op.EQ);
  IpSearch.and(""String_Node_Str"",IpSearch.entity().getIp4Address(),Op.NNULL);
  IpSearch.done();
  NonReleasedSearch=createSearchBuilder();
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getInstanceId(),Op.EQ);
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getNetworkId(),Op.EQ);
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getState(),Op.NOTIN);
  NonReleasedSearch.done();
  CountBy=createSearchBuilder(Integer.class);
  CountBy.select(null,Func.COUNT,CountBy.entity().getId());
  CountBy.and(""String_Node_Str"",CountBy.entity().getInstanceId(),Op.EQ);
  CountBy.and(""String_Node_Str"",CountBy.entity().getRemoved(),Op.NULL);
  CountBy.done();
}","protected NicDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGateway(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getVmType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIp4Address(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isDefaultNic(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastUri(),Op.EQ);
  AllFieldsSearch.done();
  IpSearch=createSearchBuilder(String.class);
  IpSearch.select(null,Func.DISTINCT,IpSearch.entity().getIp4Address());
  IpSearch.and(""String_Node_Str"",IpSearch.entity().getNetworkId(),Op.EQ);
  IpSearch.and(""String_Node_Str"",IpSearch.entity().getIp4Address(),Op.NNULL);
  IpSearch.done();
  NonReleasedSearch=createSearchBuilder();
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getInstanceId(),Op.EQ);
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getNetworkId(),Op.EQ);
  NonReleasedSearch.and(""String_Node_Str"",NonReleasedSearch.entity().getState(),Op.NOTIN);
  NonReleasedSearch.done();
  CountBy=createSearchBuilder(Integer.class);
  CountBy.select(null,Func.COUNT,CountBy.entity().getId());
  CountBy.and(""String_Node_Str"",CountBy.entity().getInstanceId(),Op.EQ);
  CountBy.and(""String_Node_Str"",CountBy.entity().getRemoved(),Op.NULL);
  CountBy.done();
}",0.972819216182048
106460,"private static String genDefaultEncryptorPassword(){
  try {
    SecureRandom random=SecureRandom.getInstance(""String_Node_Str"");
    byte[] randomBytes=new byte[16];
    random.nextBytes(randomBytes);
    return Base64.encode(randomBytes);
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    assert(false);
  }
  return ""String_Node_Str"";
}","private static String genDefaultEncryptorPassword(){
  try {
    SecureRandom random=SecureRandom.getInstance(""String_Node_Str"");
    byte[] randomBytes=new byte[16];
    random.nextBytes(randomBytes);
    return Base64.encodeBase64String(randomBytes);
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    assert(false);
  }
  return ""String_Node_Str"";
}",0.984375
106461,"private <T>T executeRetrieveObject(Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  GetMethod gm=new GetMethod(url);
  gm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  if (parameters != null && !parameters.isEmpty()) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(parameters.size());
    for (    Entry<String,String> e : parameters.entrySet()) {
      nameValuePairs.add(new NameValuePair(e.getKey(),e.getValue()));
    }
    gm.setQueryString(nameValuePairs.toArray(new NameValuePair[0]));
  }
  executeMethod(gm);
  if (gm.getStatusCode() != HttpStatus.SC_OK) {
    String errorMessage=responseToErrorMessage(gm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  Gson gson=new Gson();
  T returnValue;
  try {
    returnValue=gson.fromJson(gm.getResponseBodyAsString(),returnObjectType);
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(e);
  }
  return returnValue;
}","private <T>T executeRetrieveObject(Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  GetMethod gm=new GetMethod(url);
  gm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  if (parameters != null && !parameters.isEmpty()) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(parameters.size());
    for (    Entry<String,String> e : parameters.entrySet()) {
      nameValuePairs.add(new NameValuePair(e.getKey(),e.getValue()));
    }
    gm.setQueryString(nameValuePairs.toArray(new NameValuePair[0]));
  }
  executeMethod(gm);
  if (gm.getStatusCode() != HttpStatus.SC_OK) {
    String errorMessage=responseToErrorMessage(gm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  Gson gson=new Gson();
  T returnValue;
  try {
    returnValue=(T)gson.fromJson(gm.getResponseBodyAsString(),returnObjectType);
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(e);
  }
  return returnValue;
}",0.9988623435722412
106462,"private <T>T executeCreateObject(T newObject,Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  Gson gson=new Gson();
  PostMethod pm=new PostMethod(url);
  pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    pm.setRequestEntity(new StringRequestEntity(gson.toJson(newObject),""String_Node_Str"",null));
  }
 catch (  UnsupportedEncodingException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  executeMethod(pm);
  if (pm.getStatusCode() != HttpStatus.SC_CREATED) {
    String errorMessage=responseToErrorMessage(pm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  T result;
  try {
    result=gson.fromJson(pm.getResponseBodyAsString(),TypeToken.get(newObject.getClass()).getType());
  }
 catch (  IOException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  return result;
}","private <T>T executeCreateObject(T newObject,Type returnObjectType,String uri,Map<String,String> parameters) throws NiciraNvpApiException {
  String url;
  try {
    url=new URL(""String_Node_Str"",_host,uri).toString();
  }
 catch (  MalformedURLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  Gson gson=new Gson();
  PostMethod pm=new PostMethod(url);
  pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    pm.setRequestEntity(new StringRequestEntity(gson.toJson(newObject),""String_Node_Str"",null));
  }
 catch (  UnsupportedEncodingException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  executeMethod(pm);
  if (pm.getStatusCode() != HttpStatus.SC_CREATED) {
    String errorMessage=responseToErrorMessage(pm);
    s_logger.error(""String_Node_Str"" + errorMessage);
    throw new NiciraNvpApiException(""String_Node_Str"" + errorMessage);
  }
  T result;
  try {
    result=(T)gson.fromJson(pm.getResponseBodyAsString(),TypeToken.get(newObject.getClass()).getType());
  }
 catch (  IOException e) {
    throw new NiciraNvpApiException(""String_Node_Str"",e);
  }
  return result;
}",0.9987379049221708
106463,"protected List<Host> allocateTo(DeploymentPlan plan,ServiceOffering offering,VMTemplateVO template,ExcludeList avoid,List<HostVO> hosts,int returnUpTo,boolean considerReservedCapacity,Account account){
  if (_allocationAlgorithm.equals(""String_Node_Str"") || _allocationAlgorithm.equals(""String_Node_Str"")) {
    Collections.shuffle(hosts);
  }
 else   if (_allocationAlgorithm.equals(""String_Node_Str"")) {
    hosts=reorderHostsByNumberOfVms(plan,hosts,account);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ hosts);
  }
  hosts=prioritizeHosts(template,hosts);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ hosts);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + (offering.getCpu() * offering.getSpeed()) + ""String_Node_Str""+ offering.getRamSize());
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  for (  HostVO host : hosts) {
    if (suitableHosts.size() == returnUpTo) {
      break;
    }
    if (avoid.shouldAvoid(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str"");
      }
      continue;
    }
    Long vmCount=_vmInstanceDao.countRunningByHostId(host.getId());
    Long maxGuestLimit=getHostMaxGuestLimit(host);
    if (vmCount.longValue() == maxGuestLimit.longValue()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ maxGuestLimit+ ""String_Node_Str"");
      }
      continue;
    }
    boolean numCpusGood=host.getCpus().intValue() >= offering.getCpu();
    boolean cpuFreqGood=host.getSpeed().intValue() >= offering.getSpeed();
    int cpu_requested=offering.getCpu() * offering.getSpeed();
    long ram_requested=offering.getRamSize() * 1024L * 1024L;
    boolean hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,_factor,considerReservedCapacity);
    if (numCpusGood && cpuFreqGood && hostHasCapacity) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId());
      }
      suitableHosts.add(host);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ numCpusGood+ ""String_Node_Str""+ cpuFreqGood+ ""String_Node_Str""+ hostHasCapacity);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitableHosts.size() + ""String_Node_Str"");
  }
  return suitableHosts;
}","protected List<Host> allocateTo(DeploymentPlan plan,ServiceOffering offering,VMTemplateVO template,ExcludeList avoid,List<HostVO> hosts,int returnUpTo,boolean considerReservedCapacity,Account account){
  if (_allocationAlgorithm.equals(""String_Node_Str"") || _allocationAlgorithm.equals(""String_Node_Str"")) {
    Collections.shuffle(hosts);
  }
 else   if (_allocationAlgorithm.equals(""String_Node_Str"")) {
    hosts=reorderHostsByNumberOfVms(plan,hosts,account);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ hosts);
  }
  hosts=prioritizeHosts(template,hosts);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ hosts);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + (offering.getCpu() * offering.getSpeed()) + ""String_Node_Str""+ offering.getRamSize());
  }
  List<Host> suitableHosts=new ArrayList<Host>();
  for (  HostVO host : hosts) {
    if (suitableHosts.size() == returnUpTo) {
      break;
    }
    if (avoid.shouldAvoid(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str"");
      }
      continue;
    }
    if (_capacityMgr.checkIfHostReachMaxGuestLimit(host)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str"");
      }
      continue;
    }
    boolean numCpusGood=host.getCpus().intValue() >= offering.getCpu();
    boolean cpuFreqGood=host.getSpeed().intValue() >= offering.getSpeed();
    int cpu_requested=offering.getCpu() * offering.getSpeed();
    long ram_requested=offering.getRamSize() * 1024L * 1024L;
    boolean hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,_factor,considerReservedCapacity);
    if (numCpusGood && cpuFreqGood && hostHasCapacity) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId());
      }
      suitableHosts.add(host);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ numCpusGood+ ""String_Node_Str""+ cpuFreqGood+ ""String_Node_Str""+ hostHasCapacity);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + suitableHosts.size() + ""String_Node_Str"");
  }
  return suitableHosts;
}",0.9165537270087124
106464,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  if (avoid.shouldAvoid(dc)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + dc.getId() + ""String_Node_Str"");
    }
    return null;
  }
  ServiceOffering offering=vmProfile.getServiceOffering();
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _allocationAlgorithm);
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  String haVmTag=(String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);
  if (plan.getHostId() != null && haVmTag == null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId(),null,plan.getReservationContext());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,HostAllocator.RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null && haVmTag == null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else     if (avoid.shouldAvoid(host)) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getResourceState() == ResourceState.Enabled) {
        if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor,true)) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
          DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId(),null);
          Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,HostAllocator.RETURN_UPTO_ALL);
          Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
          List<Volume> readyAndReusedVolumes=result.second();
          if (!suitableVolumeStoragePools.isEmpty()) {
            List<Host> suitableHosts=new ArrayList<Host>();
            suitableHosts.add(host);
            Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
            if (potentialResources != null) {
              Pod pod=_podDao.findById(host.getPodId());
              Cluster cluster=_clusterDao.findById(host.getClusterId());
              Map<Volume,StoragePool> storageVolMap=potentialResources.second();
              for (              Volume vol : readyAndReusedVolumes) {
                storageVolMap.remove(vol);
              }
              DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
              s_logger.debug(""String_Node_Str"" + dest);
              return dest;
            }
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getResourceState());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      DeployDestination dest=scanClustersForDestinationInZoneOrPod(podIdSpecified,false,vmProfile,plan,avoid);
      if (dest == null) {
        avoid.addPod(plan.getPodId());
      }
      return dest;
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    boolean applyAllocationAtPods=Boolean.parseBoolean(_configDao.getValue(Config.ApplyAllocationAlgorithmToPods.key()));
    if (applyAllocationAtPods) {
      return scanPodsForDestination(vmProfile,plan,avoid);
    }
 else {
      return scanClustersForDestinationInZoneOrPod(plan.getDataCenterId(),true,vmProfile,plan,avoid);
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  if (avoid.shouldAvoid(dc)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + dc.getId() + ""String_Node_Str"");
    }
    return null;
  }
  ServiceOffering offering=vmProfile.getServiceOffering();
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _allocationAlgorithm);
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  String haVmTag=(String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);
  if (plan.getHostId() != null && haVmTag == null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId(),null,plan.getReservationContext());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,HostAllocator.RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null && haVmTag == null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else     if (avoid.shouldAvoid(host)) {
      s_logger.debug(""String_Node_Str"");
    }
 else     if (_capacityMgr.checkIfHostReachMaxGuestLimit(host)) {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getResourceState() == ResourceState.Enabled) {
        if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor,true)) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
          DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId(),null);
          Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,HostAllocator.RETURN_UPTO_ALL);
          Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
          List<Volume> readyAndReusedVolumes=result.second();
          if (!suitableVolumeStoragePools.isEmpty()) {
            List<Host> suitableHosts=new ArrayList<Host>();
            suitableHosts.add(host);
            Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
            if (potentialResources != null) {
              Pod pod=_podDao.findById(host.getPodId());
              Cluster cluster=_clusterDao.findById(host.getClusterId());
              Map<Volume,StoragePool> storageVolMap=potentialResources.second();
              for (              Volume vol : readyAndReusedVolumes) {
                storageVolMap.remove(vol);
              }
              DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
              s_logger.debug(""String_Node_Str"" + dest);
              return dest;
            }
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getResourceState());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      DeployDestination dest=scanClustersForDestinationInZoneOrPod(podIdSpecified,false,vmProfile,plan,avoid);
      if (dest == null) {
        avoid.addPod(plan.getPodId());
      }
      return dest;
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    boolean applyAllocationAtPods=Boolean.parseBoolean(_configDao.getValue(Config.ApplyAllocationAlgorithmToPods.key()));
    if (applyAllocationAtPods) {
      return scanPodsForDestination(vmProfile,plan,avoid);
    }
 else {
      return scanClustersForDestinationInZoneOrPod(plan.getDataCenterId(),true,vmProfile,plan,avoid);
    }
  }
}",0.9895050347468444
106465,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_MIGRATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachine migrateVirtualMachine(Long vmId,Host destinationHost) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOfferingVO svcOffering=_serviceOfferingDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (destinationHost.getStatus() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new InvalidParameterValueException(""String_Node_Str"" + destinationHost.getStatus() + ""String_Node_Str""+ destinationHost.getResourceState());
  }
  DataCenterVO dcVO=_dcDao.findById(destinationHost.getDataCenterId());
  HostPodVO pod=_podDao.findById(destinationHost.getPodId());
  Cluster cluster=_clusterDao.findById(destinationHost.getClusterId());
  DeployDestination dest=new DeployDestination(dcVO,pod,cluster,destinationHost);
  HypervisorType hypervisorType=destinationHost.getHypervisorType();
  String hypervisorVersion=destinationHost.getHypervisorVersion();
  Long maxGuestLimit=_hypervisorCapabilitiesDao.getMaxGuestsLimit(hypervisorType,hypervisorVersion);
  Long vmCount=_vmInstanceDao.countRunningByHostId(destinationHost.getId());
  if (vmCount.longValue() == maxGuestLimit.longValue()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + destinationHost.getName() + ""String_Node_Str""+ destinationHost.getId()+ ""String_Node_Str""+ maxGuestLimit+ ""String_Node_Str"");
    }
    throw new VirtualMachineMigrationException(""String_Node_Str"" + destinationHost.getId() + ""String_Node_Str""+ maxGuestLimit+ ""String_Node_Str"");
  }
  VMInstanceVO migratedVm=_itMgr.migrate(vm,srcHostId,dest);
  return migratedVm;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_MIGRATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachine migrateVirtualMachine(Long vmId,Host destinationHost) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  Account caller=UserContext.current().getCaller();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(vm,vmId,""String_Node_Str"");
    throw ex;
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ServiceOfferingVO svcOffering=_serviceOfferingDao.findById(vm.getServiceOfferingId());
  if (svcOffering.getUseLocalStorage()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(vm + ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (destinationHost.getStatus() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new InvalidParameterValueException(""String_Node_Str"" + destinationHost.getStatus() + ""String_Node_Str""+ destinationHost.getResourceState());
  }
  DataCenterVO dcVO=_dcDao.findById(destinationHost.getDataCenterId());
  HostPodVO pod=_podDao.findById(destinationHost.getPodId());
  Cluster cluster=_clusterDao.findById(destinationHost.getClusterId());
  DeployDestination dest=new DeployDestination(dcVO,pod,cluster,destinationHost);
  HostVO destinationHostVO=_hostDao.findById(destinationHost.getId());
  if (_capacityMgr.checkIfHostReachMaxGuestLimit(destinationHostVO)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + destinationHost.getName() + ""String_Node_Str""+ destinationHost.getId()+ ""String_Node_Str"");
    }
    throw new VirtualMachineMigrationException(""String_Node_Str"" + destinationHost.getId() + ""String_Node_Str"");
  }
  VMInstanceVO migratedVm=_itMgr.migrate(vm,srcHostId,dest);
  return migratedVm;
}",0.8976198239321813
106466,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  try {
    Class<?> clazz=Class.forName(""String_Node_Str"");
    _storage=(StorageLayer)ComponentLocator.inject(clazz);
    _storage.configure(""String_Node_Str"",params);
  }
 catch (  ClassNotFoundException e) {
    throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource();
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchdomrPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchdomrPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _networkUsagePath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_networkUsagePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=(String)params.get(""String_Node_Str"");
  if (_hypervisorType == null) {
    _hypervisorType=""String_Node_Str"";
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=""String_Node_Str"";
  }
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (!IsHVMEnabled(conn)) {
    throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
  }
 catch (  LibvirtException e) {
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str"",""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
  try {
    createControlNetwork();
  }
 catch (  LibvirtException e) {
    throw new ConfigurationException(e.getMessage());
  }
  _pifs=getPifs();
  if (_pifs.first() == null) {
    s_logger.debug(""String_Node_Str"");
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_pifs.second() == null) {
    s_logger.debug(""String_Node_Str"");
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.debug(""String_Node_Str"" + _pifs.first() + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.second()+ ""String_Node_Str""+ _publicBridgeName);
  _can_bridge_firewall=can_bridge_firewall(_pifs.second());
  _localGateway=Script.runSimpleBashScript(""String_Node_Str"");
  if (_localGateway == null) {
    s_logger.debug(""String_Node_Str"");
  }
  _mountPoint=(String)params.get(""String_Node_Str"");
  if (_mountPoint == null) {
    _mountPoint=""String_Node_Str"";
  }
  value=(String)params.get(""String_Node_Str"");
  _migrateSpeed=NumbersUtil.parseInt(value,-1);
  if (_migrateSpeed == -1) {
    _migrateSpeed=0;
    String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.second() + ""String_Node_Str"");
    if (speed != null) {
      String[] tokens=speed.split(""String_Node_Str"");
      if (tokens.length == 2) {
        try {
          _migrateSpeed=Integer.parseInt(tokens[0]);
        }
 catch (        Exception e) {
        }
        s_logger.debug(""String_Node_Str"" + _pifs.second() + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
      }
    }
    params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
  }
  return true;
}",0.0249242953645469
106467,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  Boolean canUseForDeploy=cmd.canUseForDeploy();
  Map<String,String> tags=cmd.getTags();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || !listAll) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str"");
        ex.addProxyObject(project,projectId,""String_Node_Str"");
        throw ex;
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (listAll) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and(""String_Node_Str"",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join(""String_Node_Str"",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,domainId));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,permittedAccounts));
    }
 else     if (domainId == null) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,path,isRecursive));
      networksToReturn.addAll(listDomainSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,path,isRecursive));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    networksToReturn=supportedNetworks;
  }
  if (canUseForDeploy != null) {
    List<NetworkVO> networksForDeploy=new ArrayList<NetworkVO>();
    for (    NetworkVO network : networksToReturn) {
      if (canUseForDeploy(network) == canUseForDeploy) {
        networksForDeploy.add(network);
      }
    }
    networksToReturn=networksForDeploy;
  }
  return networksToReturn;
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  Boolean canUseForDeploy=cmd.canUseForDeploy();
  Map<String,String> tags=cmd.getTags();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || (!listAll && (projectId != null && projectId != -1 && domainId == null))) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str"");
        ex.addProxyObject(project,projectId,""String_Node_Str"");
        throw ex;
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  if (domainId != null) {
    path=_domainDao.findById(domainId).getPath();
  }
 else {
    path=_domainDao.findById(caller.getDomainId()).getPath();
  }
  if (listAll && domainId == null) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (tags != null && !tags.isEmpty()) {
    SearchBuilder<ResourceTagVO> tagSearch=_resourceTagDao.createSearchBuilder();
    for (int count=0; count < tags.size(); count++) {
      tagSearch.or().op(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getKey(),SearchCriteria.Op.EQ);
      tagSearch.and(""String_Node_Str"" + String.valueOf(count),tagSearch.entity().getValue(),SearchCriteria.Op.EQ);
      tagSearch.cp();
    }
    tagSearch.and(""String_Node_Str"",tagSearch.entity().getResourceType(),SearchCriteria.Op.EQ);
    sb.groupBy(sb.entity().getId());
    sb.join(""String_Node_Str"",tagSearch,sb.entity().getId(),tagSearch.entity().getResourceId(),JoinBuilder.JoinType.INNER);
  }
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
  accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
  accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,permittedAccounts));
      if (domainId != null) {
        networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,true,restartRequired,specifyIpRanges,tags),searchFilter,domainId,false));
      }
    }
 else {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter,path,isRecursive));
      networksToReturn.addAll(listDomainSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,true,restartRequired,specifyIpRanges,tags),searchFilter,path,isRecursive));
      if (domainId == null) {
        networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,true,restartRequired,specifyIpRanges,tags),searchFilter,caller.getDomainId(),true));
      }
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges,tags),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    networksToReturn=supportedNetworks;
  }
  if (canUseForDeploy != null) {
    List<NetworkVO> networksForDeploy=new ArrayList<NetworkVO>();
    for (    NetworkVO network : networksToReturn) {
      if (canUseForDeploy(network) == canUseForDeploy) {
        networksForDeploy.add(network);
      }
    }
    networksToReturn=networksForDeploy;
  }
  return networksToReturn;
}",0.8492300200864326
106468,"private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType,boolean skipProjectNetworks,Boolean restartRequired,Boolean specifyIpRanges,Map<String,String> tags){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  if (skipProjectNetworks) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (restartRequired != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,restartRequired);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TaggedResourceType.Network.toString());
    for (    String key : tags.keySet()) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),key);
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  return sc;
}","private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType,boolean skipProjectNetworks,Boolean restartRequired,Boolean specifyIpRanges,Map<String,String> tags){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  if (skipProjectNetworks) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
 else {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (restartRequired != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,restartRequired);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (tags != null && !tags.isEmpty()) {
    int count=0;
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TaggedResourceType.Network.toString());
    for (    String key : tags.keySet()) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),key);
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"" + String.valueOf(count),tags.get(key));
      count++;
    }
  }
  return sc;
}",0.9757688723205964
106469,"private List<NetworkVO> listDomainSpecificNetworksByDomainPath(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,boolean isRecursive){
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
  if (path != null) {
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path);
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listDomainSpecificNetworksByDomainPath(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,boolean isRecursive){
  Set<Long> allowedDomains=new HashSet<Long>();
  if (path != null) {
    if (isRecursive) {
      allowedDomains=_domainMgr.getDomainChildrenIds(path);
    }
 else {
      Domain domain=_domainDao.findDomainByPath(path);
      allowedDomains.add(domain.getId());
    }
  }
  List<Long> networkIds=new ArrayList<Long>();
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    networkIds.add(map.getNetworkId());
  }
  if (!networkIds.isEmpty()) {
    SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
    return _networksDao.search(sc,searchFilter);
  }
 else {
    return new ArrayList<NetworkVO>();
  }
}",0.326647564469914
106470,"private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  if (!networkIds.isEmpty()) {
    SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
    return _networksDao.search(sc,searchFilter);
  }
 else {
    return new ArrayList<NetworkVO>();
  }
}","private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId,boolean parentDomainsOnly){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    if (map.getDomainId() == domainId && parentDomainsOnly) {
      continue;
    }
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  if (!networkIds.isEmpty()) {
    SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
    return _networksDao.search(sc,searchFilter);
  }
 else {
    return new ArrayList<NetworkVO>();
  }
}",0.9502262443438914
106471,"/** 
 * This function implements the EC2 REST authentication algorithm.   It uses the given ""AWSAccessKeyId"" parameter to look up the Cloud.com account holder's secret key which is used as input to the signature calculation.  In addition, it tests the given ""Expires"" parameter to see if the signature has expired and if so the request fails.
 */
private boolean authenticateRequest(HttpServletRequest request,HttpServletResponse response) throws SignatureException, IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, ParseException {
  String cloudSecretKey=null;
  String cloudAccessKey=null;
  String signature=null;
  String sigMethod=null;
  String[] awsAccess=request.getParameterValues(""String_Node_Str"");
  if (null != awsAccess && 0 < awsAccess.length)   cloudAccessKey=awsAccess[0];
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] clientSig=request.getParameterValues(""String_Node_Str"");
  if (null != clientSig && 0 < clientSig.length)   signature=clientSig[0];
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] method=request.getParameterValues(""String_Node_Str"");
  if (null != method && 0 < method.length) {
    sigMethod=method[0];
    if (!sigMethod.equals(""String_Node_Str"") && !sigMethod.equals(""String_Node_Str"")) {
      response.sendError(531,""String_Node_Str"" + sigMethod + ""String_Node_Str"");
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] version=request.getParameterValues(""String_Node_Str"");
  if (null != version && 0 < version.length) {
    if (!version[0].equals(wsdlVersion)) {
      response.sendError(531,""String_Node_Str"" + version[0] + ""String_Node_Str""+ wsdlVersion);
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] sigVersion=request.getParameterValues(""String_Node_Str"");
  if (null != sigVersion && 0 < sigVersion.length) {
    if (!sigVersion[0].equals(""String_Node_Str"")) {
      response.sendError(531,""String_Node_Str"" + sigVersion[0] + ""String_Node_Str"");
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] expires=request.getParameterValues(""String_Node_Str"");
  if (null != expires && 0 < expires.length) {
    if (hasSignatureExpired(expires[0])) {
      response.sendError(531,""String_Node_Str"" + expires[0]);
      return false;
    }
  }
 else {
    String[] time=request.getParameterValues(""String_Node_Str"");
    if (null == time || 0 == time.length) {
      response.sendError(530,""String_Node_Str"");
      return false;
    }
  }
  UserCredentialsDao credentialDao=new UserCredentialsDao();
  UserCredentials cloudKeys=credentialDao.getByAccessKey(cloudAccessKey);
  if (null == cloudKeys) {
    logger.debug(cloudAccessKey + ""String_Node_Str"");
    response.sendError(404,cloudAccessKey + ""String_Node_Str"");
    return false;
  }
 else   cloudSecretKey=cloudKeys.getSecretKey();
  EC2RestAuth restAuth=new EC2RestAuth();
  restAuth.setHostHeader(request.getHeader(""String_Node_Str""));
  String requestUri=request.getRequestURI();
  String forwardedPath=(String)request.getAttribute(""String_Node_Str"");
  if (forwardedPath != null) {
    requestUri=forwardedPath;
  }
  restAuth.setHTTPRequestURI(requestUri);
  restAuth.setQueryString(request.getQueryString());
  if (restAuth.verifySignature(request.getMethod(),cloudSecretKey,signature,sigMethod)) {
    UserContext.current().initContext(cloudAccessKey,cloudSecretKey,cloudAccessKey,""String_Node_Str"",null);
    return true;
  }
 else   throw new PermissionDeniedException(""String_Node_Str"");
}","/** 
 * This function implements the EC2 REST authentication algorithm.   It uses the given ""AWSAccessKeyId"" parameter to look up the Cloud.com account holder's secret key which is used as input to the signature calculation.  In addition, it tests the given ""Expires"" parameter to see if the signature has expired and if so the request fails.
 */
private boolean authenticateRequest(HttpServletRequest request,HttpServletResponse response) throws SignatureException, IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, ParseException {
  String cloudSecretKey=null;
  String cloudAccessKey=null;
  String signature=null;
  String sigMethod=null;
  String[] awsAccess=request.getParameterValues(""String_Node_Str"");
  if (null != awsAccess && 0 < awsAccess.length)   cloudAccessKey=awsAccess[0];
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] clientSig=request.getParameterValues(""String_Node_Str"");
  if (null != clientSig && 0 < clientSig.length)   signature=clientSig[0];
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] method=request.getParameterValues(""String_Node_Str"");
  if (null != method && 0 < method.length) {
    sigMethod=method[0];
    if (!sigMethod.equals(""String_Node_Str"") && !sigMethod.equals(""String_Node_Str"")) {
      response.sendError(531,""String_Node_Str"" + sigMethod + ""String_Node_Str"");
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] version=request.getParameterValues(""String_Node_Str"");
  if (null != version && 0 < version.length) {
    if (!version[0].equals(wsdlVersion)) {
      response.sendError(531,""String_Node_Str"" + version[0] + ""String_Node_Str""+ wsdlVersion);
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] sigVersion=request.getParameterValues(""String_Node_Str"");
  if (null != sigVersion && 0 < sigVersion.length) {
    if (!sigVersion[0].equals(""String_Node_Str"")) {
      response.sendError(531,""String_Node_Str"" + sigVersion[0] + ""String_Node_Str"");
      return false;
    }
  }
 else {
    response.sendError(530,""String_Node_Str"");
    return false;
  }
  String[] expires=request.getParameterValues(""String_Node_Str"");
  if (null != expires && 0 < expires.length) {
    if (hasSignatureExpired(expires[0])) {
      response.sendError(531,""String_Node_Str"" + expires[0]);
      return false;
    }
  }
 else {
    String[] time=request.getParameterValues(""String_Node_Str"");
    if (null == time || 0 == time.length) {
      response.sendError(530,""String_Node_Str"");
      return false;
    }
  }
  UserCredentialsDao credentialDao=new UserCredentialsDao();
  UserCredentials cloudKeys=credentialDao.getByAccessKey(cloudAccessKey);
  if (null == cloudKeys) {
    logger.debug(cloudAccessKey + ""String_Node_Str"");
    response.sendError(404,cloudAccessKey + ""String_Node_Str"");
    return false;
  }
 else   cloudSecretKey=cloudKeys.getSecretKey();
  EC2RestAuth restAuth=new EC2RestAuth();
  restAuth.setHostHeader(request.getHeader(""String_Node_Str""));
  String requestUri=request.getRequestURI();
  String forwardedPath=(String)request.getAttribute(""String_Node_Str"");
  if (forwardedPath != null) {
    requestUri=forwardedPath;
  }
  restAuth.setHTTPRequestURI(requestUri);
  String queryString=request.getQueryString();
  if (queryString == null) {
    Enumeration<?> params=request.getParameterNames();
    if (params != null) {
      while (params.hasMoreElements()) {
        String paramName=(String)params.nextElement();
        if (paramName.equalsIgnoreCase(""String_Node_Str""))         continue;
        if (queryString == null)         queryString=paramName + ""String_Node_Str"" + request.getParameter(paramName);
 else         queryString=queryString + ""String_Node_Str"" + paramName+ ""String_Node_Str""+ URLEncoder.encode(request.getParameter(paramName),""String_Node_Str"");
      }
    }
  }
  restAuth.setQueryString(queryString);
  if (restAuth.verifySignature(request.getMethod(),cloudSecretKey,signature,sigMethod)) {
    UserContext.current().initContext(cloudAccessKey,cloudSecretKey,cloudAccessKey,""String_Node_Str"",null);
    return true;
  }
 else   throw new PermissionDeniedException(""String_Node_Str"");
}",0.9209451936162316
106472,"/** 
 * @param cmd
 * @return
 */
private SetupGuestNetworkAnswer execute(SetupGuestNetworkCommand cmd){
  Connection conn=getConnection();
  NicTO nic=cmd.getNic();
  String domrIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String domrGIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP);
  String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String gw=cmd.getAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY);
  String cidr=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  ;
  String domainName=cmd.getNetworkDomain();
  String dns=nic.getDns1();
  try {
    Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + domrName);
    }
    VM vm=vms.iterator().next();
    String mac=nic.getMac();
    VIF domrVif=null;
    for (    VIF vif : vm.getVIFs(conn)) {
      String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
        break;
      }
    }
    if (domrVif == null) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    String args=""String_Node_Str"" + domrIP + ""String_Node_Str"";
    String dev=""String_Node_Str"" + domrVif.getDevice(conn);
    args+=""String_Node_Str"" + dev;
    args+=""String_Node_Str"" + domrGIP;
    args+=""String_Node_Str"" + gw;
    args+=""String_Node_Str"" + cidr;
    if (dns != null && !dns.isEmpty()) {
      args+=""String_Node_Str"" + dns;
    }
    if (domainName != null && !domainName.isEmpty()) {
      args+=""String_Node_Str"" + domainName;
    }
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + ((result == null) ? ""String_Node_Str"" : result));
    }
    return new SetupGuestNetworkAnswer(cmd,true,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new SetupGuestNetworkAnswer(cmd,false,msg);
  }
}","/** 
 * @param cmd
 * @return
 */
private SetupGuestNetworkAnswer execute(SetupGuestNetworkCommand cmd){
  Connection conn=getConnection();
  NicTO nic=cmd.getNic();
  String domrIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String domrGIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP);
  String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String gw=cmd.getAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY);
  String cidr=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  ;
  String domainName=cmd.getNetworkDomain();
  String dns=cmd.getDefaultDns1();
  if (dns == null || dns.isEmpty()) {
    dns=cmd.getDefaultDns2();
  }
 else {
    String dns2=cmd.getDefaultDns2();
    if (dns2 != null && !dns2.isEmpty()) {
      dns+=""String_Node_Str"" + dns2;
    }
  }
  try {
    Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + domrName);
    }
    VM vm=vms.iterator().next();
    String mac=nic.getMac();
    VIF domrVif=null;
    for (    VIF vif : vm.getVIFs(conn)) {
      String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
        break;
      }
    }
    if (domrVif == null) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    String args=""String_Node_Str"" + domrIP + ""String_Node_Str"";
    String dev=""String_Node_Str"" + domrVif.getDevice(conn);
    args+=""String_Node_Str"" + dev;
    args+=""String_Node_Str"" + domrGIP;
    args+=""String_Node_Str"" + gw;
    args+=""String_Node_Str"" + cidr;
    if (dns != null && !dns.isEmpty()) {
      args+=""String_Node_Str"" + dns;
    }
    if (domainName != null && !domainName.isEmpty()) {
      args+=""String_Node_Str"" + domainName;
    }
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + ((result == null) ? ""String_Node_Str"" : result));
    }
    return new SetupGuestNetworkAnswer(cmd,true,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new SetupGuestNetworkAnswer(cmd,false,msg);
  }
}",0.9508342602892104
106473,"@Override protected String networkUsage(Connection conn,final String privateIpAddress,final String option,final String vif){
  String args=""String_Node_Str"" + privateIpAddress + ""String_Node_Str"";
  if (option.equals(""String_Node_Str"")) {
    args=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args=""String_Node_Str"";
    args+=vif;
  }
 else   if (option.equals(""String_Node_Str"")) {
    args=""String_Node_Str"";
    args+=vif;
  }
  return callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
}","@Override protected String networkUsage(Connection conn,final String privateIpAddress,final String option,final String vif){
  String args=""String_Node_Str"" + privateIpAddress + ""String_Node_Str"";
  if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
    args+=vif;
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
    args+=vif;
  }
  return callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
}",0.9965010496850945
106474,"/** 
 * @param cmd
 * @return
 */
private SetupGuestNetworkAnswer execute(SetupGuestNetworkCommand cmd){
  Connection conn=getConnection();
  NicTO nic=cmd.getNic();
  String domrIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String domrGIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP);
  String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String gw=cmd.getAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY);
  try {
    Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + domrName);
    }
    VM vm=vms.iterator().next();
    String mac=nic.getMac();
    VIF domrVif=null;
    for (    VIF vif : vm.getVIFs(conn)) {
      String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
        break;
      }
    }
    if (domrVif == null) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    String args=""String_Node_Str"" + domrIP + ""String_Node_Str"";
    String dev=""String_Node_Str"" + domrVif.getDevice(conn);
    args+=""String_Node_Str"" + dev;
    args+=""String_Node_Str"" + domrGIP;
    args+=""String_Node_Str"" + gw;
    args+=""String_Node_Str"" + Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
    args+=""String_Node_Str"" + nic.getDns1();
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + ((result == null) ? ""String_Node_Str"" : result));
    }
    return new SetupGuestNetworkAnswer(cmd,true,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new SetupGuestNetworkAnswer(cmd,false,msg);
  }
}","/** 
 * @param cmd
 * @return
 */
private SetupGuestNetworkAnswer execute(SetupGuestNetworkCommand cmd){
  Connection conn=getConnection();
  NicTO nic=cmd.getNic();
  String domrIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  String domrGIP=cmd.getAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP);
  String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String gw=cmd.getAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY);
  String cidr=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  ;
  String domainName=cmd.getNetworkDomain();
  String dns=nic.getDns1();
  try {
    Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + domrName);
    }
    VM vm=vms.iterator().next();
    String mac=nic.getMac();
    VIF domrVif=null;
    for (    VIF vif : vm.getVIFs(conn)) {
      String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
        break;
      }
    }
    if (domrVif == null) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    String args=""String_Node_Str"" + domrIP + ""String_Node_Str"";
    String dev=""String_Node_Str"" + domrVif.getDevice(conn);
    args+=""String_Node_Str"" + dev;
    args+=""String_Node_Str"" + domrGIP;
    args+=""String_Node_Str"" + gw;
    args+=""String_Node_Str"" + cidr;
    if (dns != null && !dns.isEmpty()) {
      args+=""String_Node_Str"" + dns;
    }
    if (domainName != null && !domainName.isEmpty()) {
      args+=""String_Node_Str"" + domainName;
    }
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      return new SetupGuestNetworkAnswer(cmd,false,""String_Node_Str"" + ((result == null) ? ""String_Node_Str"" : result));
    }
    return new SetupGuestNetworkAnswer(cmd,true,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new SetupGuestNetworkAnswer(cmd,false,msg);
  }
}",0.9064356435643564
106475,"public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9527665317139
106476,"public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.952638700947226
106477,"public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    for (int i=0; i < s_retryCount; ++i) {
      send(command);
      VsmOkResponse response=new VsmOkResponse(receive().trim());
      if (!response.isResponseOk()) {
        if (i >= s_retryCount) {
          throw new CloudRuntimeException(response.toString());
        }
        try {
          Thread.sleep(1000);
        }
 catch (        final InterruptedException e) {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.5927099841521395
106478,"public PortProfile getPortProfileByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    String received=receive();
    VsmPortProfileResponse response=new VsmPortProfileResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
 else {
      return response.getPortProfile();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public PortProfile getPortProfileByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    String received=sendAndReceive(command);
    VsmPortProfileResponse response=new VsmPortProfileResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(response.toString());
    }
 else {
      return response.getPortProfile();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.7418502202643171
106479,"public PolicyMap getPolicyMapByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    String received=receive();
    VsmPolicyMapResponse response=new VsmPolicyMapResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
 else {
      return response.getPolicyMap();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public PolicyMap getPolicyMapByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    String received=sendAndReceive(command);
    VsmPolicyMapResponse response=new VsmPolicyMapResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(response.toString());
    }
 else {
      return response.getPolicyMap();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.7398739873987399
106480,"public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9455676516329704
106481,"public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getAddPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getAddPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9548387096774194
106482,"public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.946236559139785
106483,"public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9571603427172584
106484,"private static Element policyMapDetails(Document doc,String name,int averageRate,int maxRate,int burstRate){
  Element configure=doc.createElementNS(s_ciscons,""String_Node_Str"");
  Element modeConfigure=doc.createElement(""String_Node_Str"" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element policyMap=doc.createElement(""String_Node_Str"");
  modeConfigure.appendChild(policyMap);
  Element policyDetails=doc.createElement(""String_Node_Str"");
  policyMap.appendChild(policyDetails);
  Element value=doc.createElement(s_paramvalue);
  value.setAttribute(""String_Node_Str"",""String_Node_Str"");
  value.setTextContent(name);
  policyDetails.appendChild(value);
  Element policyMapMode=doc.createElement(s_policymapmode);
  policyDetails.appendChild(policyMapMode);
  Element classRoot=doc.createElement(""String_Node_Str"");
  Element classDefault=doc.createElement(""String_Node_Str"");
  policyMapMode.appendChild(classRoot);
  classRoot.appendChild(classDefault);
  Element classMode=doc.createElement(s_classtypemode);
  classDefault.appendChild(classMode);
  Element police=doc.createElement(""String_Node_Str"");
  classMode.appendChild(police);
  Element cir=doc.createElement(""String_Node_Str"");
  police.appendChild(cir);
  Element cirValue=doc.createElement(s_paramvalue);
  Element mbps=doc.createElement(""String_Node_Str"");
  cirValue.setTextContent(Integer.toString(averageRate));
  cir.appendChild(cirValue);
  cir.appendChild(mbps);
  modeConfigure.appendChild(persistConfiguration(doc));
  return configure;
}","private static Element policyMapDetails(Document doc,String name,int averageRate,int maxRate,int burstRate){
  Element configure=doc.createElementNS(s_ciscons,""String_Node_Str"");
  Element modeConfigure=doc.createElement(""String_Node_Str"" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element policyMap=doc.createElement(""String_Node_Str"");
  modeConfigure.appendChild(policyMap);
  Element policyDetails=doc.createElement(""String_Node_Str"");
  policyMap.appendChild(policyDetails);
  Element value=doc.createElement(s_paramvalue);
  value.setAttribute(""String_Node_Str"",""String_Node_Str"");
  value.setTextContent(name);
  policyDetails.appendChild(value);
  Element policyMapMode=doc.createElement(s_policymapmode);
  policyDetails.appendChild(policyMapMode);
  Element classRoot=doc.createElement(""String_Node_Str"");
  Element classDefault=doc.createElement(""String_Node_Str"");
  policyMapMode.appendChild(classRoot);
  classRoot.appendChild(classDefault);
  Element classMode=doc.createElement(s_classtypemode);
  classDefault.appendChild(classMode);
  Element police=doc.createElement(""String_Node_Str"");
  classMode.appendChild(police);
  Element cir=doc.createElement(""String_Node_Str"");
  police.appendChild(cir);
  Element cirValue=doc.createElement(""String_Node_Str"");
  cir.appendChild(cirValue);
  Element value2=doc.createElement(s_paramvalue);
  Element mbps=doc.createElement(""String_Node_Str"");
  value2.setTextContent(Integer.toString(averageRate));
  cirValue.appendChild(value2);
  cirValue.appendChild(mbps);
  modeConfigure.appendChild(persistConfiguration(doc));
  return configure;
}",0.883248730964467
106485,"private String receive(){
  byte[] buffer=new byte[8192];
  InputStream inputStream=_session.getStdout();
  try {
    while (true) {
      if (inputStream.available() == 0) {
        int conditions=_session.waitForCondition(ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA | ChannelCondition.EOF,3000);
        if ((conditions & ChannelCondition.TIMEOUT) != 0) {
          break;
        }
        if ((conditions & ChannelCondition.EOF) != 0) {
          if ((conditions & (ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA)) == 0) {
            break;
          }
        }
      }
      while (inputStream.available() > 0) {
        inputStream.read(buffer);
      }
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return new String(buffer);
}","private String receive(){
  String response=new String(""String_Node_Str"");
  InputStream inputStream=_session.getStdout();
  try {
    Delimiter delimiter=new Delimiter();
    byte[] buffer=new byte[1024];
    int count=0;
    while (true) {
      int data=inputStream.read();
      if (data != -1) {
        byte[] dataStream=delimiter.parse(data);
        if (delimiter.endReached()) {
          response+=new String(buffer,0,count);
          break;
        }
        if (dataStream != null) {
          for (int i=0; i < dataStream.length; i++) {
            buffer[count]=dataStream[i];
            count++;
            if (count == 1024) {
              response+=new String(buffer,0,count);
              count=0;
            }
          }
        }
      }
 else {
        break;
      }
    }
  }
 catch (  final Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return response;
}",0.206253428414701
106486,"public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9973118279569892
106487,"public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9973045822102424
106488,"public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    for (int i=0; i < s_retryCount; ++i) {
      send(command);
      VsmOkResponse response=new VsmOkResponse(receive().trim());
      if (!response.isResponseOk()) {
        if (i >= s_retryCount) {
          throw new CloudRuntimeException(response.toString());
        }
        try {
          Thread.sleep(1000);
        }
 catch (        final InterruptedException e) {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.583399209486166
106489,"public void queryStatus() throws CloudRuntimeException {
  String status=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ SSH_NETCONF_TERMINATOR;
  send(status);
  parseReply(receive());
}","public void queryStatus() throws CloudRuntimeException {
  String status=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ SSH_NETCONF_TERMINATOR;
  send(status);
  parseOkReply(receive());
}",0.9976580796252928
106490,"public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9969040247678018
106491,"public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9974093264248703
106492,"public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9969418960244648
106493,"public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.997560975609756
106494,"public String getKey(){
  return key;
}","public int getKey(){
  return key;
}",0.9333333333333332
106495,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9853592100783112
106496,"@Override @DB public boolean updateLDAP(LDAPConfigCmd cmd){
  try {
    String hostname=cmd.getHostname();
    Integer port=cmd.getPort();
    String queryFilter=cmd.getQueryFilter();
    String searchBase=cmd.getSearchBase();
    Boolean useSSL=cmd.getUseSSL();
    String bindDN=cmd.getBindDN();
    String bindPasswd=cmd.getBindPassword();
    String trustStore=cmd.getTrustStore();
    String trustStorePassword=cmd.getTrustStorePassword();
    if (bindDN != null && bindPasswd == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      if (trustStore == null || trustStorePassword == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + hostname + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
    DirContext ctx=new InitialDirContext(env);
    ctx.close();
    ConfigurationVO cvo=_configDao.findByName(LDAPParams.hostname.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.hostname.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(hostname);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.port.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.port.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(port.toString());
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.queryfilter.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.queryfilter.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(queryFilter);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.searchbase.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.searchbase.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(searchBase);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.usessl.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.usessl.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(useSSL.toString());
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.dn.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.dn.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(bindDN);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.passwd.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.passwd.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindPasswd));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststore.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststore.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(trustStore);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststorepass.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststorepass.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStorePassword));
    _configDao.persist(cvo);
    s_logger.debug(""String_Node_Str"" + hostname);
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    throw new InvalidParameterValueException(""String_Node_Str"" + ne.getMessage() + (ne.getCause() != null ? (""String_Node_Str"" + ne.getCause().getMessage()) : ""String_Node_Str""));
  }
  return true;
}","@Override @DB public boolean updateLDAP(LDAPConfigCmd cmd){
  try {
    String hostname=cmd.getHostname();
    Integer port=cmd.getPort();
    String queryFilter=cmd.getQueryFilter();
    String searchBase=cmd.getSearchBase();
    Boolean useSSL=cmd.getUseSSL();
    String bindDN=cmd.getBindDN();
    String bindPasswd=cmd.getBindPassword();
    String trustStore=cmd.getTrustStore();
    String trustStorePassword=cmd.getTrustStorePassword();
    if (bindDN != null && bindPasswd == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      if (trustStore == null || trustStorePassword == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + hostname + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
    DirContext ctx=new InitialDirContext(env);
    ctx.close();
    ConfigurationVO cvo=_configDao.findByName(LDAPParams.hostname.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.hostname.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(hostname));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.port.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.port.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(port.toString()));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.queryfilter.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.queryfilter.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(queryFilter));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.searchbase.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.searchbase.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(searchBase));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.usessl.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.usessl.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(useSSL.toString()));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.dn.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.dn.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindDN));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.passwd.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.passwd.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindPasswd));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststore.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststore.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStore));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststorepass.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststorepass.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStorePassword));
    _configDao.persist(cvo);
    s_logger.debug(""String_Node_Str"" + hostname);
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    throw new InvalidParameterValueException(""String_Node_Str"" + ne.getMessage() + (ne.getCause() != null ? (""String_Node_Str"" + ne.getCause().getMessage()) : ""String_Node_Str""));
  }
  return true;
}",0.975
106497,"@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=DBEncryptionUtil.decrypt(_configDao.getValue(LDAPParams.passwd.toString()));
  String trustStore=_configDao.getValue(LDAPParams.truststore.toString());
  String trustStorePassword=DBEncryptionUtil.decrypt(_configDao.getValue(LDAPParams.truststorepass.toString()));
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
 else {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
    }
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}","@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  String trustStore=_configDao.getValue(LDAPParams.truststore.toString());
  String trustStorePassword=_configDao.getValue(LDAPParams.truststorepass.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
 else {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
    }
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}",0.992619926199262
106498,"public long getNetworkId(){
  return networkId;
}","public Long getNetworkId(){
  return networkId;
}",0.979591836734694
106499,"public OvsDestroyBridgeCommand(long networkId){
  this.networkId=networkId;
}","public OvsDestroyBridgeCommand(Long networkId,Integer key){
  this.networkId=networkId;
  this.key=key;
}",0.8351648351648352
106500,"public long getNetworkId(){
  return networkId;
}","public Long getNetworkId(){
  return networkId;
}",0.979591836734694
106501,"public OvsDestroyTunnelCommand(long networkId,String inPortName){
  this.networkId=networkId;
  this.inPortName=inPortName;
}","public OvsDestroyTunnelCommand(Long networkId,Integer key,String inPortName){
  this.networkId=networkId;
  this.inPortName=inPortName;
  this.key=key;
}",0.8920863309352518
106502,"private synchronized void destroyTunnelNetwork(Connection conn,long networkId){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge);
    String[] res=result.split(""String_Node_Str"");
    if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
      throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ res);
    }
    return;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return;
  }
}","private synchronized void destroyTunnelNetwork(Connection conn,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,key);
    String bridge=nw.getBridge(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge);
    String[] res=result.split(""String_Node_Str"");
    if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
      throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ res);
    }
    return;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return;
  }
}",0.9757727652464494
106503,"/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long networkId){
  try {
    String nwName=""String_Node_Str"" + networkId;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + networkId;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + networkId);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long vnetId){
  try {
    String nwName=""String_Node_Str"" + vnetId;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + vnetId;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9448659585230148
106504,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,key);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9563089828731212
106505,"@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    return execute((IpAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityGroupRulesCmd.class) {
    return execute((SecurityGroupRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyBridgeCommand.class) {
    return execute((OvsDestroyBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof CheckRouterCommand) {
    return execute((CheckRouterCommand)cmd);
  }
 else   if (cmd instanceof SetFirewallRulesCommand) {
    return execute((SetFirewallRulesCommand)cmd);
  }
 else   if (cmd instanceof BumpUpPriorityCommand) {
    return execute((BumpUpPriorityCommand)cmd);
  }
 else   if (cmd instanceof ClusterSyncCommand) {
    return execute((ClusterSyncCommand)cmd);
  }
 else   if (cmd instanceof GetDomRVersionCmd) {
    return execute((GetDomRVersionCmd)cmd);
  }
 else   if (clazz == CheckNetworkCommand.class) {
    return execute((CheckNetworkCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    return execute((IpAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityGroupRulesCmd.class) {
    return execute((SecurityGroupRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetupBridgeCommand.class) {
    return execute((OvsSetupBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyBridgeCommand.class) {
    return execute((OvsDestroyBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof CheckRouterCommand) {
    return execute((CheckRouterCommand)cmd);
  }
 else   if (cmd instanceof SetFirewallRulesCommand) {
    return execute((SetFirewallRulesCommand)cmd);
  }
 else   if (cmd instanceof BumpUpPriorityCommand) {
    return execute((BumpUpPriorityCommand)cmd);
  }
 else   if (cmd instanceof ClusterSyncCommand) {
    return execute((ClusterSyncCommand)cmd);
  }
 else   if (cmd instanceof GetDomRVersionCmd) {
    return execute((GetDomRVersionCmd)cmd);
  }
 else   if (clazz == CheckNetworkCommand.class) {
    return execute((CheckNetworkCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.9921355111917726
106506,"protected Pair<String,String> createVDIFromSnapshot(long userId,SnapshotVO snapshot,StoragePoolVO pool){
  String vdiUUID=null;
  Long snapshotId=snapshot.getId();
  Long volumeId=snapshot.getVolumeId();
  String primaryStoragePoolNameLabel=pool.getUuid();
  Long dcId=snapshot.getDataCenterId();
  String secondaryStoragePoolUrl=_snapMgr.getSecondaryStorageURL(snapshot);
  long accountId=snapshot.getAccountId();
  String backedUpSnapshotUuid=snapshot.getBackupSnapshotId();
  snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot.getVersion().trim().equals(""String_Node_Str"")) {
    VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
    }
    if (volume.getTemplateId() == null) {
      _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      VMTemplateVO template=_templateDao.findByIdIncludingRemoved(volume.getTemplateId());
      if (template == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volume.getTemplateId()+ ""String_Node_Str"");
      }
      Long templateId=template.getId();
      Long tmpltAccountId=template.getAccountId();
      if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
      UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStoragePoolUrl,dcId,accountId,volumeId,templateId,tmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),""String_Node_Str"");
      Answer answer=null;
      try {
        answer=sendToPool(pool,cmd);
      }
 catch (      StorageUnavailableException e) {
      }
 finally {
        _snapshotDao.unlockFromLockTable(snapshotId.toString());
      }
      if ((answer != null) && answer.getResult()) {
        _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        return new Pair<String,String>(null,""String_Node_Str"" + snapshot.getId());
      }
    }
  }
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  try {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.downloadSnapshotsFromSwift(snapshot);
    }
    CreateVolumeFromSnapshotCommand createVolumeFromSnapshotCommand=new CreateVolumeFromSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backedUpSnapshotUuid,snapshot.getName(),_createVolumeFromSnapshotWait);
    CreateVolumeFromSnapshotAnswer answer;
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    answer=(CreateVolumeFromSnapshotAnswer)sendToPool(pool,createVolumeFromSnapshotCommand);
    if (answer != null && answer.getResult()) {
      vdiUUID=answer.getVdi();
    }
 else {
      s_logger.error(basicErrMsg + ""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
      throw new CloudRuntimeException(basicErrMsg);
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg);
  }
 finally {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.deleteSnapshotsDirForVolume(secondaryStoragePoolUrl,dcId,accountId,volumeId);
    }
    _snapshotDao.unlockFromLockTable(snapshotId.toString());
  }
  return new Pair<String,String>(vdiUUID,basicErrMsg);
}","protected Pair<String,String> createVDIFromSnapshot(long userId,SnapshotVO snapshot,StoragePoolVO pool){
  String vdiUUID=null;
  Long snapshotId=snapshot.getId();
  Long volumeId=snapshot.getVolumeId();
  String primaryStoragePoolNameLabel=pool.getUuid();
  Long dcId=snapshot.getDataCenterId();
  String secondaryStoragePoolUrl=_snapMgr.getSecondaryStorageURL(snapshot);
  long accountId=snapshot.getAccountId();
  String backedUpSnapshotUuid=snapshot.getBackupSnapshotId();
  snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot.getVersion().trim().equals(""String_Node_Str"")) {
    VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
    }
    if (volume.getTemplateId() == null) {
      _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      VMTemplateVO template=_templateDao.findByIdIncludingRemoved(volume.getTemplateId());
      if (template == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volume.getTemplateId()+ ""String_Node_Str"");
      }
      Long templateId=template.getId();
      Long tmpltAccountId=template.getAccountId();
      if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
      UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStoragePoolUrl,dcId,accountId,volumeId,templateId,tmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),""String_Node_Str"");
      Answer answer=null;
      try {
        answer=sendToPool(pool,cmd);
      }
 catch (      StorageUnavailableException e) {
      }
 finally {
        _snapshotDao.unlockFromLockTable(snapshotId.toString());
      }
      if ((answer != null) && answer.getResult()) {
        _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        return new Pair<String,String>(null,""String_Node_Str"" + snapshot.getId());
      }
    }
  }
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  try {
    if (snapshot.getSwiftId() != null && snapshot.getSwiftId() != 0) {
      _snapshotMgr.downloadSnapshotsFromSwift(snapshot);
    }
    CreateVolumeFromSnapshotCommand createVolumeFromSnapshotCommand=new CreateVolumeFromSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backedUpSnapshotUuid,snapshot.getName(),_createVolumeFromSnapshotWait);
    CreateVolumeFromSnapshotAnswer answer;
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    answer=(CreateVolumeFromSnapshotAnswer)sendToPool(pool,createVolumeFromSnapshotCommand);
    if (answer != null && answer.getResult()) {
      vdiUUID=answer.getVdi();
    }
 else {
      s_logger.error(basicErrMsg + ""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
      throw new CloudRuntimeException(basicErrMsg);
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg);
  }
 finally {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.deleteSnapshotsDirForVolume(secondaryStoragePoolUrl,dcId,accountId,volumeId);
    }
    _snapshotDao.unlockFromLockTable(snapshotId.toString());
  }
  return new Pair<String,String>(vdiUUID,basicErrMsg);
}",0.9957912457912458
106507,"public void OnReceiveClusterServicePdu(ClusterServicePdu pdu){
  try {
    _clusterPduIncomingQueue.put(pdu);
  }
 catch (  InterruptedException e) {
    s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu) + ""String_Node_Str"");
  }
}","public void OnReceiveClusterServicePdu(ClusterServicePdu pdu){
  addIncomingClusterPdu(pdu);
}",0.5076452599388379
106508,"private void onSendingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=_clusterPduOutgoingQueue.take();
      ClusterService peerService=null;
      for (int i=0; i < 2; i++) {
        try {
          peerService=getPeerService(pdu.getDestPeer());
        }
 catch (        RemoteException e) {
          s_logger.error(""String_Node_Str"" + pdu.getDestPeer());
        }
        if (peerService != null) {
          try {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            long startTick=System.currentTimeMillis();
            String strResult=peerService.execute(pdu);
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ (System.currentTimeMillis() - startTick)+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            if (""String_Node_Str"".equals(strResult))             break;
          }
 catch (          RemoteException e) {
            invalidatePeerService(pdu.getDestPeer());
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + pdu.getDestPeer() + ""String_Node_Str""+ i+ ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
 catch (    InterruptedException e) {
    }
catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","private void onSendingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=popOutgoingClusterPdu(1000);
      if (pdu == null)       continue;
      ClusterService peerService=null;
      for (int i=0; i < 2; i++) {
        try {
          peerService=getPeerService(pdu.getDestPeer());
        }
 catch (        RemoteException e) {
          s_logger.error(""String_Node_Str"" + pdu.getDestPeer());
        }
        if (peerService != null) {
          try {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            long startTick=System.currentTimeMillis();
            String strResult=peerService.execute(pdu);
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ (System.currentTimeMillis() - startTick)+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            if (""String_Node_Str"".equals(strResult))             break;
          }
 catch (          RemoteException e) {
            invalidatePeerService(pdu.getDestPeer());
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + pdu.getDestPeer() + ""String_Node_Str""+ i+ ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
 catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}",0.9658263305322128
106509,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  _agentMgr=locator.getManager(AgentManager.class);
  if (_agentMgr == null) {
    throw new ConfigurationException(""String_Node_Str"" + AgentManager.class.getName());
  }
  _mshostDao=locator.getDao(ManagementServerHostDao.class);
  if (_mshostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostDao.class.getName());
  }
  _mshostPeerDao=locator.getDao(ManagementServerHostPeerDao.class);
  if (_mshostPeerDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostPeerDao.class.getName());
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + HostDao.class.getName());
  }
  _hostTransferDao=locator.getDao(HostTransferMapDao.class);
  if (_hostTransferDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatInterval=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_INTERVAL);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatThreshold=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_THRESHOLD);
  }
  File dbPropsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  Properties dbProps=new Properties();
  try {
    dbProps.load(new FileInputStream(dbPropsFile));
  }
 catch (  FileNotFoundException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _clusterNodeIP=dbProps.getProperty(""String_Node_Str"");
  if (_clusterNodeIP == null) {
    _clusterNodeIP=""String_Node_Str"";
  }
  _clusterNodeIP=_clusterNodeIP.trim();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _clusterNodeIP);
  }
  if (!NetUtils.isLocalAddress(_clusterNodeIP)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Adapters<ClusterServiceAdapter> adapters=locator.getAdapters(ClusterServiceAdapter.class);
  if (adapters == null || !adapters.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Enumeration<ClusterServiceAdapter> it=adapters.enumeration();
  if (it.hasMoreElements()) {
    _currentServiceAdapter=it.nextElement();
  }
  if (_currentServiceAdapter == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _agentLBEnabled=Boolean.valueOf(configDao.getValue(Config.AgentLbEnable.key()));
  String connectedAgentsThreshold=configs.get(""String_Node_Str"");
  if (connectedAgentsThreshold != null) {
    _connectedAgentsThreshold=Double.parseDouble(connectedAgentsThreshold);
  }
  this.registerListener(new LockMasterListener(_msId));
  checkConflicts();
  _executor.execute(getClusterPduSendingTask());
  for (int i=0; i < 5; i++)   _executor.execute(getClusterPduNotificationTask());
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  _agentMgr=locator.getManager(AgentManager.class);
  if (_agentMgr == null) {
    throw new ConfigurationException(""String_Node_Str"" + AgentManager.class.getName());
  }
  _mshostDao=locator.getDao(ManagementServerHostDao.class);
  if (_mshostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostDao.class.getName());
  }
  _mshostPeerDao=locator.getDao(ManagementServerHostPeerDao.class);
  if (_mshostPeerDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostPeerDao.class.getName());
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + HostDao.class.getName());
  }
  _hostTransferDao=locator.getDao(HostTransferMapDao.class);
  if (_hostTransferDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatInterval=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_INTERVAL);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatThreshold=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_THRESHOLD);
  }
  File dbPropsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  Properties dbProps=new Properties();
  try {
    dbProps.load(new FileInputStream(dbPropsFile));
  }
 catch (  FileNotFoundException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _clusterNodeIP=dbProps.getProperty(""String_Node_Str"");
  if (_clusterNodeIP == null) {
    _clusterNodeIP=""String_Node_Str"";
  }
  _clusterNodeIP=_clusterNodeIP.trim();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _clusterNodeIP);
  }
  if (!NetUtils.isLocalAddress(_clusterNodeIP)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _executor.execute(getClusterPduSendingTask());
  for (int i=0; i < 5; i++)   _executor.execute(getClusterPduNotificationTask());
  Adapters<ClusterServiceAdapter> adapters=locator.getAdapters(ClusterServiceAdapter.class);
  if (adapters == null || !adapters.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Enumeration<ClusterServiceAdapter> it=adapters.enumeration();
  if (it.hasMoreElements()) {
    _currentServiceAdapter=it.nextElement();
  }
  if (_currentServiceAdapter == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _agentLBEnabled=Boolean.valueOf(configDao.getValue(Config.AgentLbEnable.key()));
  String connectedAgentsThreshold=configs.get(""String_Node_Str"");
  if (connectedAgentsThreshold != null) {
    _connectedAgentsThreshold=Double.parseDouble(connectedAgentsThreshold);
  }
  this.registerListener(new LockMasterListener(_msId));
  checkConflicts();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}",0.9622042700519332
106510,"private void onNotifyingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=_clusterPduOutgoingQueue.take();
      if (pdu.isRequest()) {
        String result=dispatchClusterServicePdu(pdu);
        if (result == null)         result=""String_Node_Str"";
        ClusterServicePdu responsePdu=new ClusterServicePdu();
        responsePdu.setSourcePeer(pdu.getDestPeer());
        responsePdu.setDestPeer(pdu.getSourcePeer());
        responsePdu.setAckSequenceId(pdu.getSequenceId());
        responsePdu.setJsonPackage(result);
        _clusterPduOutgoingQueue.put(responsePdu);
      }
 else {
        ClusterServiceRequestPdu requestPdu=popRequestPdu(pdu.getAckSequenceId());
        if (requestPdu != null) {
          requestPdu.setResponseResult(pdu.getJsonPackage());
synchronized (requestPdu) {
            requestPdu.notifyAll();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu));
        }
      }
    }
 catch (    InterruptedException e) {
    }
catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","private void onNotifyingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=popIncomingClusterPdu(1000);
      if (pdu == null)       continue;
      if (pdu.isRequest()) {
        String result=dispatchClusterServicePdu(pdu);
        if (result == null)         result=""String_Node_Str"";
        ClusterServicePdu responsePdu=new ClusterServicePdu();
        responsePdu.setSourcePeer(pdu.getDestPeer());
        responsePdu.setDestPeer(pdu.getSourcePeer());
        responsePdu.setAckSequenceId(pdu.getSequenceId());
        responsePdu.setJsonPackage(result);
        addOutgoingClusterPdu(responsePdu);
      }
 else {
        ClusterServiceRequestPdu requestPdu=popRequestPdu(pdu.getAckSequenceId());
        if (requestPdu != null) {
          requestPdu.setResponseResult(pdu.getJsonPackage());
synchronized (requestPdu) {
            requestPdu.notifyAll();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu));
        }
      }
    }
 catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}",0.9206057824690224
106511,"public void run(){
  HttpContext context=new BasicHttpContext(null);
  try {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString());
    _httpService.handleRequest(conn,context);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString() + ""String_Node_Str"");
  }
 catch (  ConnectionClosedException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  HttpException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    try {
      conn.shutdown();
      conn.close();
    }
 catch (    IOException ignore) {
    }
  }
}","public void run(){
  HttpContext context=new BasicHttpContext(null);
  try {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString());
    _httpService.handleRequest(conn,context);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString() + ""String_Node_Str"");
  }
 catch (  ConnectionClosedException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  HttpException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    try {
      conn.close();
    }
 catch (    IOException ignore) {
      s_logger.error(""String_Node_Str"",ignore);
    }
  }
}",0.9515358361774744
106512,"public ClusterServiceServletImpl(String serviceUrl,int requestTimeoutSeconds){
  s_logger.info(""String_Node_Str"" + serviceUrl + ""String_Node_Str""+ requestTimeoutSeconds+ ""String_Node_Str"");
  this._serviceUrl=serviceUrl;
  this._requestTimeoutSeconds=requestTimeoutSeconds;
  _gson=GsonHelper.getGson();
}","public ClusterServiceServletImpl(String serviceUrl,int requestTimeoutSeconds){
  s_logger.info(""String_Node_Str"" + serviceUrl + ""String_Node_Str""+ requestTimeoutSeconds+ ""String_Node_Str"");
  this._serviceUrl=serviceUrl;
  this._requestTimeoutSeconds=requestTimeoutSeconds;
}",0.9482758620689656
106513,"@Override public boolean ping(String callingPeer) throws RemoteException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _serviceUrl);
  }
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_PING));
  method.addParameter(""String_Node_Str"",callingPeer);
  String returnVal=executePostMethod(client,method);
  if (""String_Node_Str"".equalsIgnoreCase(returnVal)) {
    return true;
  }
  return false;
}","@Override public boolean ping(String callingPeer) throws RemoteException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _serviceUrl);
  }
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_PING));
  method.addParameter(""String_Node_Str"",callingPeer);
  try {
    String returnVal=executePostMethod(client,method);
    if (""String_Node_Str"".equalsIgnoreCase(returnVal)) {
      return true;
    }
    return false;
  }
  finally {
    method.releaseConnection();
  }
}",0.9175257731958762
106514,"private HttpClient getHttpClient(){
  HttpClient client=new HttpClient();
  HttpClientParams clientParams=new HttpClientParams();
  clientParams.setSoTimeout(this._requestTimeoutSeconds * 1000);
  client.setParams(clientParams);
  return client;
}","private HttpClient getHttpClient(){
  if (s_client == null) {
    MultiThreadedHttpConnectionManager mgr=new MultiThreadedHttpConnectionManager();
    mgr.getParams().setDefaultMaxConnectionsPerHost(1);
    mgr.getParams().setMaxTotalConnections(1000);
    s_client=new HttpClient(mgr);
    HttpClientParams clientParams=new HttpClientParams();
    clientParams.setSoTimeout(_requestTimeoutSeconds * 1000);
    s_client.setParams(clientParams);
  }
  return s_client;
}",0.3379888268156424
106515,"@Override public String execute(ClusterServicePdu pdu) throws RemoteException {
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_DELIVER_PDU));
  method.addParameter(""String_Node_Str"",pdu.getSourcePeer());
  method.addParameter(""String_Node_Str"",pdu.getDestPeer());
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAckSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAgentId()));
  method.addParameter(""String_Node_Str"",pdu.getJsonPackage());
  method.addParameter(""String_Node_Str"",pdu.isStopOnError() ? ""String_Node_Str"" : ""String_Node_Str"");
  method.addParameter(""String_Node_Str"",pdu.isRequest() ? ""String_Node_Str"" : ""String_Node_Str"");
  return executePostMethod(client,method);
}","@Override public String execute(ClusterServicePdu pdu) throws RemoteException {
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_DELIVER_PDU));
  method.addParameter(""String_Node_Str"",pdu.getSourcePeer());
  method.addParameter(""String_Node_Str"",pdu.getDestPeer());
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAckSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAgentId()));
  method.addParameter(""String_Node_Str"",pdu.getJsonPackage());
  method.addParameter(""String_Node_Str"",pdu.isStopOnError() ? ""String_Node_Str"" : ""String_Node_Str"");
  method.addParameter(""String_Node_Str"",pdu.isRequest() ? ""String_Node_Str"" : ""String_Node_Str"");
  try {
    return executePostMethod(client,method);
  }
  finally {
    method.releaseConnection();
  }
}",0.9676409185803758
106516,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskDef> disks=new ArrayList<DiskDef>();
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
      disks.add(devId,disk);
      continue;
    }
    vm.getDevices().addDevice(disk);
  }
  for (  DiskDef disk : disks) {
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<VolumeTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<VolumeTO>(){
    @Override public int compare(    VolumeTO arg0,    VolumeTO arg1){
      return arg0.getDeviceId() > arg1.getDeviceId() ? 1 : -1;
    }
  }
);
  for (  VolumeTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}",0.9055013309671694
106517,"private StoragePool createCLVMStoragePool(Connect conn,String uuid,String host,String path){
  String volgroupPath=""String_Node_Str"" + path;
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.LOGICAL,uuid,uuid,host,volgroupPath,volgroupPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}","private StoragePool createCLVMStoragePool(Connect conn,String uuid,String host,String path){
  String volgroupPath=""String_Node_Str"" + path;
  String volgroupName=path;
  volgroupName=volgroupName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.LOGICAL,volgroupName,uuid,host,volgroupPath,volgroupPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}",0.9178356713426854
106518,public long getDataCenterId();,public Long getDataCenterId();,0.9666666666666668
106519,"public CapacityVO(long dataCenterId,Long podId,Long clusterId,short capacityType,float usedPercentage){
  this.dataCenterId=dataCenterId;
  this.podId=podId;
  this.clusterId=clusterId;
  this.capacityType=capacityType;
  this.usedPercentage=usedPercentage;
}","public CapacityVO(Long dataCenterId,Long podId,Long clusterId,short capacityType,float usedPercentage){
  this.dataCenterId=dataCenterId;
  this.podId=podId;
  this.clusterId=clusterId;
  this.capacityType=capacityType;
  this.usedPercentage=usedPercentage;
}",0.996138996138996
106520,"public void setDataCenterId(long dataCenterId){
  this.dataCenterId=dataCenterId;
}","public void setDataCenterId(Long dataCenterId){
  this.dataCenterId=dataCenterId;
}",0.9879518072289156
106521,"@Override public long getDataCenterId(){
  return dataCenterId;
}","@Override public Long getDataCenterId(){
  return dataCenterId;
}",0.9846153846153848
106522,"@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  Boolean fetchLatest=cmd.getFetchLatest();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,summedCapacity.getDataCenterId(),podId,clusterId,summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    if (summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
      capacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));
    }
    capacities.add(capacity);
  }
  List<DataCenterVO> dcList=new ArrayList<DataCenterVO>();
  if (zoneId == null && podId == null && clusterId == null) {
    dcList=ApiDBUtils.listZones();
  }
 else   if (zoneId != null) {
    dcList.add(ApiDBUtils.findZoneById(zoneId));
  }
 else {
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  for (  DataCenterVO zone : dcList) {
    zoneId=zone.getId();
    if ((capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) && podId == null && clusterId == null) {
      capacities.add(_storageMgr.getSecondaryStorageUsedStats(null,zoneId));
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  return capacities;
}","@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  Boolean fetchLatest=cmd.getFetchLatest();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,summedCapacity.getDataCenterId(),podId,clusterId,summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    if (summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
      capacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));
    }
    capacities.add(capacity);
  }
  List<DataCenterVO> dcList=new ArrayList<DataCenterVO>();
  if (zoneId == null && podId == null && clusterId == null) {
    dcList=ApiDBUtils.listZones();
  }
 else   if (zoneId != null) {
    dcList.add(ApiDBUtils.findZoneById(zoneId));
  }
 else {
    if (clusterId != null) {
      zoneId=ApiDBUtils.findClusterById(clusterId).getDataCenterId();
    }
 else {
      zoneId=ApiDBUtils.findPodById(podId).getDataCenterId();
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  for (  DataCenterVO zone : dcList) {
    zoneId=zone.getId();
    if ((capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) && podId == null && clusterId == null) {
      capacities.add(_storageMgr.getSecondaryStorageUsedStats(null,zoneId));
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  return capacities;
}",0.9574418057841524
106523,"@Override @DB public boolean associateIpAddressListToAccount(long userId,long accountId,long zoneId,Long vlanId,Network network) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else {
      network=networks.get(0);
    }
  }
  if (createNetwork) {
    List<? extends NetworkOffering> offerings=_configMgr.listNetworkOfferings(TrafficType.Guest,false);
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    network=createGuestNetwork(offerings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,false,null,physicalNetwork,zoneId,ACLType.Account,null);
    if (network == null) {
      s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
      return false;
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setSystem(false);
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}","@Override @DB public boolean associateIpAddressListToAccount(long userId,long accountId,long zoneId,Long vlanId,Network network) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else     if (networks.size() == 1) {
      network=networks.get(0);
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (createNetwork) {
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (requiredOfferings.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + Availability.Required + ""String_Node_Str"");
    }
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
      s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ requiredOfferings.get(0).getId()+ ""String_Node_Str"");
      network=createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,false,null,physicalNetwork,zoneId,ACLType.Account,null);
      if (network == null) {
        s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
        throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + requiredOfferings.get(0).getId() + ""String_Node_Str""+ NetworkOffering.State.Enabled);
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setSystem(false);
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}",0.8244520410215161
106524,"protected NetworkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join(""String_Node_Str"",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and(""String_Node_Str"",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join(""String_Node_Str"",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and(""String_Node_Str"",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and(""String_Node_Str"",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join(""String_Node_Str"",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and(""String_Node_Str"",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join1=_ntwkSvcMap.createSearchBuilder();
  join1.and(""String_Node_Str"",join1.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join(""String_Node_Str"",join1,ZoneSecurityGroupSearch.entity().getId(),join1.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountByOfferingId=createSearchBuilder(Long.class);
  CountByOfferingId.select(null,Func.COUNT,CountByOfferingId.entity().getId());
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getNetworkOfferingId(),Op.EQ);
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getRemoved(),Op.NULL);
  CountByOfferingId.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and(""String_Node_Str"",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  SecurityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and(""String_Node_Str"",join3.entity().getService(),Op.EQ);
  SecurityGroupSearch.join(""String_Node_Str"",join3,SecurityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SecurityGroupSearch.done();
  NetworksCount=createSearchBuilder(Integer.class);
  NetworksCount.select(null,Func.COUNT,NetworksCount.entity().getId());
  NetworksCount.and(""String_Node_Str"",NetworksCount.entity().getNetworkOfferingId(),SearchCriteria.Op.EQ);
  NetworksCount.done();
  NetworksRegularUserCanCreateSearch=createSearchBuilder(Long.class);
  NetworksRegularUserCanCreateSearch.and(""String_Node_Str"",NetworksRegularUserCanCreateSearch.entity().getAclType(),Op.EQ);
  NetworksRegularUserCanCreateSearch.select(null,Func.COUNT,NetworksRegularUserCanCreateSearch.entity().getId());
  SearchBuilder<NetworkAccountVO> join4=_accountsDao.createSearchBuilder();
  join4.and(""String_Node_Str"",join4.entity().getAccountId(),Op.EQ);
  join4.and(""String_Node_Str"",join4.entity().isOwner(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join4,NetworksRegularUserCanCreateSearch.entity().getId(),join4.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<NetworkOfferingVO> join5=_ntwkOffDao.createSearchBuilder();
  join5.and(""String_Node_Str"",join5.entity().getSpecifyVlan(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join5,NetworksRegularUserCanCreateSearch.entity().getNetworkOfferingId(),join5.entity().getId(),JoinBuilder.JoinType.INNER);
  NetworksRegularUserCanCreateSearch.done();
  _tgMacAddress=_tgs.get(""String_Node_Str"");
}","protected NetworkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join(""String_Node_Str"",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and(""String_Node_Str"",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join(""String_Node_Str"",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and(""String_Node_Str"",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and(""String_Node_Str"",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join(""String_Node_Str"",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and(""String_Node_Str"",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join1=_ntwkSvcMap.createSearchBuilder();
  join1.and(""String_Node_Str"",join1.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join(""String_Node_Str"",join1,ZoneSecurityGroupSearch.entity().getId(),join1.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountByOfferingId=createSearchBuilder(Long.class);
  CountByOfferingId.select(null,Func.COUNT,CountByOfferingId.entity().getId());
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getNetworkOfferingId(),Op.EQ);
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getRemoved(),Op.NULL);
  CountByOfferingId.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and(""String_Node_Str"",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  SecurityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and(""String_Node_Str"",join3.entity().getService(),Op.EQ);
  SecurityGroupSearch.join(""String_Node_Str"",join3,SecurityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SecurityGroupSearch.done();
  NetworksCount=createSearchBuilder(Integer.class);
  NetworksCount.select(null,Func.COUNT,NetworksCount.entity().getId());
  NetworksCount.and(""String_Node_Str"",NetworksCount.entity().getNetworkOfferingId(),SearchCriteria.Op.EQ);
  NetworksCount.done();
  NetworksRegularUserCanCreateSearch=createSearchBuilder(Long.class);
  NetworksRegularUserCanCreateSearch.and(""String_Node_Str"",NetworksRegularUserCanCreateSearch.entity().getAclType(),Op.EQ);
  NetworksRegularUserCanCreateSearch.select(null,Func.COUNT,NetworksRegularUserCanCreateSearch.entity().getId());
  SearchBuilder<NetworkAccountVO> join4=_accountsDao.createSearchBuilder();
  join4.and(""String_Node_Str"",join4.entity().getAccountId(),Op.EQ);
  join4.and(""String_Node_Str"",join4.entity().isOwner(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join4,NetworksRegularUserCanCreateSearch.entity().getId(),join4.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<NetworkOfferingVO> join5=_ntwkOffDao.createSearchBuilder();
  join5.and(""String_Node_Str"",join5.entity().getSpecifyVlan(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join5,NetworksRegularUserCanCreateSearch.entity().getNetworkOfferingId(),join5.entity().getId(),JoinBuilder.JoinType.INNER);
  NetworksRegularUserCanCreateSearch.done();
  _tgMacAddress=_tgs.get(""String_Node_Str"");
  SourceNATSearch=createSearchBuilder();
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getAccountId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getDataCenterId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getGuestType(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join6=_ntwkSvcMap.createSearchBuilder();
  join6.and(""String_Node_Str"",join6.entity().getService(),Op.EQ);
  SourceNATSearch.join(""String_Node_Str"",join6,SourceNATSearch.entity().getId(),join6.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SourceNATSearch.done();
}",0.9477870864009478
106525,"@Override public boolean associateIP(Network network,List<? extends PublicIpAddress> ipAddress,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      Commands cmds=new Commands(OnError.Continue);
      createAssociateIPCommands(router,ipAddress,cmds,0);
      try {
        result=sendCommandsToRouter(router,cmds);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return result;
}","@Override public boolean associateIP(Network network,List<? extends PublicIpAddress> ipAddress,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      Commands cmds=new Commands(OnError.Continue);
      createAssociateIPCommands(router,ipAddress,cmds,0);
      try {
        result=sendCommandsToRouter(router,cmds);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,disconnectedRouters.get(0).getDataCenterIdToDeployIn());
  }
  return result;
}",0.9781710914454276
106526,"@Override public List<VirtualRouter> applyUserData(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && nic.isDefaultNic()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyUserData(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  Long podId=null;
  if (isZoneBasic) {
    podId=dest.getPod().getId();
  }
  boolean podLevelException=false;
  if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
    podLevelException=true;
  }
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (isZoneBasic) {
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && nic.isDefaultNic()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,dc.getId());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,dc.getId());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    if (!isZoneBasic) {
      handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
    }
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    if (podLevelException) {
      throw new ResourceUnavailableException(msg,Pod.class,podId);
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,dc.getId());
  }
  return rets;
}",0.6188241788573006
106527,"@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(findGatewayIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setDefaultDns(findDefaultDnsIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  Long podId=null;
  if (isZoneBasic) {
    podId=dest.getPod().getId();
  }
  boolean podLevelException=false;
  if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
    podLevelException=true;
  }
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (isZoneBasic) {
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(findGatewayIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setDefaultDns(findDefaultDnsIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,dc.getId());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    if (!isZoneBasic) {
      handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
    }
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    if (podLevelException) {
      throw new ResourceUnavailableException(msg,Pod.class,podId);
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,dc.getId());
  }
  return rets;
}",0.6696097120497643
106528,"@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str""+ network);
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      try {
        result=applyStaticNat(router,rules);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return true;
}","@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str""+ network);
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      try {
        result=applyStaticNat(router,rules);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,disconnectedRouters.get(0).getDataCenterIdToDeployIn());
  }
  return true;
}",0.9613682092555332
106529,"@Override @DB public void postCreateSnapshot(Long volumeId,Long snapshotId,Long policyId,boolean backedUp){
  Long userId=getSnapshotUserId();
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot.isRecursive()) {
    postCreateRecurringSnapshotForPolicy(userId,volumeId,snapshotId,policyId);
  }
}","@Override @DB public void postCreateSnapshot(Long volumeId,Long snapshotId,Long policyId,boolean backedUp){
  Long userId=getSnapshotUserId();
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot != null && snapshot.isRecursive()) {
    postCreateRecurringSnapshotForPolicy(userId,volumeId,snapshotId,policyId);
  }
}",0.5958083832335329
106530,"@DB protected List<DomainRouterVO> findOrDeployVirtualRouters(Network guestNetwork,DeployDestination dest,Account owner,boolean isRedundant,Map<Param,Object> params) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  boolean isPodBased=(dest.getDataCenter().getNetworkType() == NetworkType.Basic || _networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SecurityGroup)) && guestNetwork.getTrafficType() == TrafficType.Guest;
  boolean publicNetwork=false;
  if (_networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SourceNat)) {
    publicNetwork=true;
  }
  if (isRedundant && !publicNetwork) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  List<DomainRouterVO> routers;
  Long podId=null;
  if (isPodBased) {
    Pod pod=dest.getPod();
    if (pod != null) {
      podId=pod.getId();
    }
  }
  if (publicNetwork) {
    routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
  }
 else {
    if (isPodBased && podId != null) {
      routers=_routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(),podId,Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId,podId,null,null,null,null);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId);
    }
  }
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    for (    DomainRouterVO router : routers) {
      if (!router.getIsRedundantRouter()) {
        routerCount=1;
      }
    }
    if (routers.size() >= routerCount || (isPodBased && podId == null)) {
      return routers;
    }
    if (routers.size() >= 5) {
      s_logger.error(""String_Node_Str"");
    }
    NicProfile defaultNic=new NicProfile();
    if (publicNetwork) {
      PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountMgr.getSystemUser().getId());
      defaultNic.setDefaultNic(true);
      defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
      defaultNic.setGateway(sourceNatIp.getGateway());
      defaultNic.setNetmask(sourceNatIp.getNetmask());
      defaultNic.setMacAddress(sourceNatIp.getMacAddress());
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setDeviceId(2);
    }
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      if (publicNetwork) {
        NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
        List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
        networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      }
      String defaultNetworkStartIp=null;
      if (guestNetwork.getCidr() != null && !publicNetwork) {
        String startIp=_networkMgr.getStartIpAddress(guestNetwork.getId());
        if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
          defaultNetworkStartIp=startIp;
        }
 else         if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
        }
      }
      NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp);
      if (publicNetwork) {
        if (isRedundant) {
          gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
        }
 else {
          gatewayNic.setIp4Address(guestNetwork.getGateway());
        }
        gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
        gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
        gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
        gatewayNic.setMode(guestNetwork.getMode());
        String gatewayCidr=guestNetwork.getCidr();
        gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      }
 else {
        gatewayNic.setDefaultNic(true);
      }
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
      if (offering_id == null) {
        offering_id=_offering.getId();
      }
      VirtualRouterProviderType type=VirtualRouterProviderType.VirtualRouter;
      Long physicalNetworkId=_networkMgr.getPhysicalNetworkId(network);
      PhysicalNetworkServiceProvider provider=_physicalProviderDao.findByServiceProvider(physicalNetworkId,type.toString());
      if (provider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ physicalNetworkId);
      }
      VirtualRouterProvider vrProvider=_vrProviderDao.findByNspIdAndType(provider.getId(),type);
      if (vrProvider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ provider.getId());
      }
      ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
      List<HypervisorType> supportedHypervisors=new ArrayList<HypervisorType>();
      HypervisorType defaults=_resourceMgr.getDefaultHypervisor(dest.getDataCenter().getId());
      if (defaults != HypervisorType.None) {
        supportedHypervisors.add(defaults);
      }
      if (dest.getCluster() != null) {
        if (dest.getCluster().getHypervisorType() == HypervisorType.Ovm) {
          supportedHypervisors.add(getClusterToStartDomainRouterForOvm(dest.getCluster().getPodId()));
        }
 else {
          supportedHypervisors.add(dest.getCluster().getHypervisorType());
        }
      }
 else {
        supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId(),true,podId);
      }
      if (supportedHypervisors.isEmpty()) {
        if (podId != null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"",Pod.class,podId);
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"",DataCenter.class,dest.getDataCenter().getId());
      }
      int allocateRetry=0;
      int startRetry=0;
      for (Iterator<HypervisorType> iter=supportedHypervisors.iterator(); iter.hasNext(); ) {
        HypervisorType hType=iter.next();
        try {
          s_logger.debug(""String_Node_Str"" + hType);
          VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
          if (template == null) {
            s_logger.debug(hType + ""String_Node_Str"");
            continue;
          }
          boolean offerHA=routerOffering.getOfferHA();
          if (isRedundant) {
            offerHA=false;
          }
          router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,0,false,RedundantState.UNKNOWN,offerHA,false);
          router.setRole(Role.VIRTUAL_ROUTER);
          router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
        }
 catch (        InsufficientCapacityException ex) {
          if (allocateRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + hType + ""String_Node_Str"");
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          allocateRetry++;
        }
        try {
          router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
          break;
        }
 catch (        InsufficientCapacityException ex) {
          if (startRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str""+ hType+ ""String_Node_Str"");
            destroyRouter(router.getId());
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          startRetry++;
        }
      }
      routers.add(router);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}","@DB protected List<DomainRouterVO> findOrDeployVirtualRouters(Network guestNetwork,DeployDestination dest,Account owner,boolean isRedundant,Map<Param,Object> params) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  boolean isPodBased=(dest.getDataCenter().getNetworkType() == NetworkType.Basic || _networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SecurityGroup)) && guestNetwork.getTrafficType() == TrafficType.Guest;
  boolean publicNetwork=false;
  if (_networkMgr.isProviderSupportServiceInNetwork(guestNetwork.getId(),Service.SourceNat,Provider.VirtualRouter)) {
    publicNetwork=true;
  }
  if (isRedundant && !publicNetwork) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  List<DomainRouterVO> routers;
  Long podId=null;
  if (isPodBased) {
    Pod pod=dest.getPod();
    if (pod != null) {
      podId=pod.getId();
    }
  }
  if (publicNetwork) {
    routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
  }
 else {
    if (isPodBased && podId != null) {
      routers=_routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(),podId,Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId,podId,null,null,null,null);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId);
    }
  }
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    for (    DomainRouterVO router : routers) {
      if (!router.getIsRedundantRouter()) {
        routerCount=1;
      }
    }
    if (routers.size() >= routerCount || (isPodBased && podId == null)) {
      return routers;
    }
    if (routers.size() >= 5) {
      s_logger.error(""String_Node_Str"");
    }
    NicProfile defaultNic=new NicProfile();
    if (publicNetwork) {
      PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountMgr.getSystemUser().getId());
      defaultNic.setDefaultNic(true);
      defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
      defaultNic.setGateway(sourceNatIp.getGateway());
      defaultNic.setNetmask(sourceNatIp.getNetmask());
      defaultNic.setMacAddress(sourceNatIp.getMacAddress());
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setDeviceId(2);
    }
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      if (publicNetwork) {
        NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
        List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
        networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      }
      String defaultNetworkStartIp=null;
      if (guestNetwork.getCidr() != null && !publicNetwork) {
        String startIp=_networkMgr.getStartIpAddress(guestNetwork.getId());
        if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
          defaultNetworkStartIp=startIp;
        }
 else         if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
        }
      }
      NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp);
      if (publicNetwork) {
        if (isRedundant) {
          gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
        }
 else {
          gatewayNic.setIp4Address(guestNetwork.getGateway());
        }
        gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
        gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
        gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
        gatewayNic.setMode(guestNetwork.getMode());
        String gatewayCidr=guestNetwork.getCidr();
        gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      }
 else {
        gatewayNic.setDefaultNic(true);
      }
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
      if (offering_id == null) {
        offering_id=_offering.getId();
      }
      VirtualRouterProviderType type=VirtualRouterProviderType.VirtualRouter;
      Long physicalNetworkId=_networkMgr.getPhysicalNetworkId(network);
      PhysicalNetworkServiceProvider provider=_physicalProviderDao.findByServiceProvider(physicalNetworkId,type.toString());
      if (provider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ physicalNetworkId);
      }
      VirtualRouterProvider vrProvider=_vrProviderDao.findByNspIdAndType(provider.getId(),type);
      if (vrProvider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ provider.getId());
      }
      ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
      List<HypervisorType> supportedHypervisors=new ArrayList<HypervisorType>();
      HypervisorType defaults=_resourceMgr.getDefaultHypervisor(dest.getDataCenter().getId());
      if (defaults != HypervisorType.None) {
        supportedHypervisors.add(defaults);
      }
      if (dest.getCluster() != null) {
        if (dest.getCluster().getHypervisorType() == HypervisorType.Ovm) {
          supportedHypervisors.add(getClusterToStartDomainRouterForOvm(dest.getCluster().getPodId()));
        }
 else {
          supportedHypervisors.add(dest.getCluster().getHypervisorType());
        }
      }
 else {
        supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId(),true,podId);
      }
      if (supportedHypervisors.isEmpty()) {
        if (podId != null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"",Pod.class,podId);
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"",DataCenter.class,dest.getDataCenter().getId());
      }
      int allocateRetry=0;
      int startRetry=0;
      for (Iterator<HypervisorType> iter=supportedHypervisors.iterator(); iter.hasNext(); ) {
        HypervisorType hType=iter.next();
        try {
          s_logger.debug(""String_Node_Str"" + hType);
          VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
          if (template == null) {
            s_logger.debug(hType + ""String_Node_Str"");
            continue;
          }
          boolean offerHA=routerOffering.getOfferHA();
          if (isRedundant) {
            offerHA=false;
          }
          router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,0,false,RedundantState.UNKNOWN,offerHA,false);
          router.setRole(Role.VIRTUAL_ROUTER);
          router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
        }
 catch (        InsufficientCapacityException ex) {
          if (allocateRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + hType + ""String_Node_Str"");
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          allocateRetry++;
        }
        try {
          router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
          break;
        }
 catch (        InsufficientCapacityException ex) {
          if (startRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str""+ hType+ ""String_Node_Str"");
            destroyRouter(router.getId());
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          startRetry++;
        }
      }
      routers.add(router);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}",0.9973064999745896
106531,"@Override public boolean manageGuestNetworkWithExternalFirewall(boolean add,Network network) throws ResourceUnavailableException, InsufficientCapacityException {
  if (network.getTrafficType() != TrafficType.Guest) {
    s_logger.trace(""String_Node_Str"");
    return false;
  }
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  HostVO externalFirewall=null;
  if (add) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          ExternalFirewallDeviceVO device=findSuitableFirewallForNetwork(network);
          long externalFirewallId=device.getId();
          NetworkExternalFirewallVO networkFW=new NetworkExternalFirewallVO(network.getId(),externalFirewallId);
          _networkExternalFirewallDao.persist(networkFW);
          externalFirewall=_hostDao.findById(device.getHostId());
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
  }
 else {
    ExternalFirewallDeviceVO fwDeviceVO=getExternalFirewallForNetwork(network);
    externalFirewall=_hostDao.findById(fwDeviceVO.getHostId());
  }
  Account account=_accountDao.findByIdIncludingRemoved(network.getAccountId());
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  IPAddressVO sourceNatIp=null;
  if (!sharedSourceNat) {
    List<IPAddressVO> sourceNatIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(network.getAccountId(),zoneId,true,null);
    if (sourceNatIps.size() != 1) {
      String errorMsg=""String_Node_Str"" + account.getAccountName();
      s_logger.error(errorMsg);
      return true;
    }
 else {
      sourceNatIp=sourceNatIps.get(0);
    }
  }
  long guestVlanTag=Long.parseLong(network.getBroadcastUri().getHost());
  String guestVlanGateway=network.getGateway();
  String guestVlanCidr=network.getCidr();
  String sourceNatIpAddress=null;
  String publicVlanTag=null;
  if (sourceNatIp != null) {
    sourceNatIpAddress=sourceNatIp.getAddress().addr();
    VlanVO publicVlan=_vlanDao.findById(sourceNatIp.getVlanId());
    publicVlanTag=publicVlan.getVlanTag();
  }
  Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
  IpAddressTO ip=new IpAddressTO(account.getAccountId(),sourceNatIpAddress,add,false,!sharedSourceNat,publicVlanTag,null,null,null,null,networkRate,false);
  IpAddressTO[] ips=new IpAddressTO[1];
  ips[0]=ip;
  IpAssocCommand cmd=new IpAssocCommand(ips);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,guestVlanGateway);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_CIDR,guestVlanCidr);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
  Answer answer=_agentMgr.easySend(externalFirewall.getId(),cmd);
  if (answer == null || !answer.getResult()) {
    String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
    String answerDetails=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
    String msg=""String_Node_Str"" + action + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str""+ answerDetails;
    s_logger.error(msg);
    throw new ResourceUnavailableException(msg,DataCenter.class,zoneId);
  }
  List<String> reservedIpAddressesForGuestNetwork=_nicDao.listIpAddressInNetwork(network.getId());
  if (add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
    savePlaceholderNic(network,network.getGateway());
  }
  List<NicVO> nicsInNetwork=_nicDao.listByNetworkId(network.getId());
  for (  NicVO nic : nicsInNetwork) {
    InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByNicId(nic.getId());
    if (mapping != null) {
      _nicDao.expunge(mapping.getNicId());
      _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
    }
  }
  String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
  s_logger.debug(""String_Node_Str"" + action + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getAccountId()+ ""String_Node_Str""+ guestVlanTag);
  return true;
}","@Override public boolean manageGuestNetworkWithExternalFirewall(boolean add,Network network) throws ResourceUnavailableException, InsufficientCapacityException {
  if (network.getTrafficType() != TrafficType.Guest) {
    s_logger.trace(""String_Node_Str"");
    return false;
  }
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  HostVO externalFirewall=null;
  if (add) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          ExternalFirewallDeviceVO device=findSuitableFirewallForNetwork(network);
          long externalFirewallId=device.getId();
          NetworkExternalFirewallVO networkFW=new NetworkExternalFirewallVO(network.getId(),externalFirewallId);
          _networkExternalFirewallDao.persist(networkFW);
          externalFirewall=_hostDao.findById(device.getHostId());
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
  }
 else {
    ExternalFirewallDeviceVO fwDeviceVO=getExternalFirewallForNetwork(network);
    if (fwDeviceVO == null) {
      s_logger.warn(""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    externalFirewall=_hostDao.findById(fwDeviceVO.getHostId());
  }
  Account account=_accountDao.findByIdIncludingRemoved(network.getAccountId());
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  IPAddressVO sourceNatIp=null;
  if (!sharedSourceNat) {
    List<IPAddressVO> sourceNatIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(network.getAccountId(),zoneId,true,null);
    if (sourceNatIps.size() != 1) {
      String errorMsg=""String_Node_Str"" + account.getAccountName();
      s_logger.error(errorMsg);
      return true;
    }
 else {
      sourceNatIp=sourceNatIps.get(0);
    }
  }
  long guestVlanTag=Long.parseLong(network.getBroadcastUri().getHost());
  String guestVlanGateway=network.getGateway();
  String guestVlanCidr=network.getCidr();
  String sourceNatIpAddress=null;
  String publicVlanTag=null;
  if (sourceNatIp != null) {
    sourceNatIpAddress=sourceNatIp.getAddress().addr();
    VlanVO publicVlan=_vlanDao.findById(sourceNatIp.getVlanId());
    publicVlanTag=publicVlan.getVlanTag();
  }
  Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
  IpAddressTO ip=new IpAddressTO(account.getAccountId(),sourceNatIpAddress,add,false,!sharedSourceNat,publicVlanTag,null,null,null,null,networkRate,false);
  IpAddressTO[] ips=new IpAddressTO[1];
  ips[0]=ip;
  IpAssocCommand cmd=new IpAssocCommand(ips);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,guestVlanGateway);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_CIDR,guestVlanCidr);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
  Answer answer=_agentMgr.easySend(externalFirewall.getId(),cmd);
  if (answer == null || !answer.getResult()) {
    String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
    String answerDetails=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
    String msg=""String_Node_Str"" + action + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str""+ answerDetails;
    s_logger.error(msg);
    throw new ResourceUnavailableException(msg,DataCenter.class,zoneId);
  }
  List<String> reservedIpAddressesForGuestNetwork=_nicDao.listIpAddressInNetwork(network.getId());
  if (add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
    savePlaceholderNic(network,network.getGateway());
  }
  List<NicVO> nicsInNetwork=_nicDao.listByNetworkId(network.getId());
  for (  NicVO nic : nicsInNetwork) {
    InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByNicId(nic.getId());
    if (mapping != null) {
      _nicDao.expunge(mapping.getNicId());
      _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
    }
  }
  String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
  s_logger.debug(""String_Node_Str"" + action + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getAccountId()+ ""String_Node_Str""+ guestVlanTag);
  return true;
}",0.9863209230403236
106532,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteSnapshot(long snapshotId){
  Account caller=UserContext.current().getCaller();
  Snapshot snapshotCheck=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshotCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
  }
  _accountMgr.checkAccess(caller,null,true,snapshotCheck);
  if (!Status.BackedUp.equals(snapshotCheck.getStatus())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  return deleteSnapshotInternal(snapshotId);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteSnapshot(long snapshotId){
  Account caller=UserContext.current().getCaller();
  Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
  if (snapshotCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
  }
  _accountMgr.checkAccess(caller,null,true,snapshotCheck);
  if (!Status.BackedUp.equals(snapshotCheck.getStatus())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  return deleteSnapshotInternal(snapshotId);
}",0.98796992481203
106533,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetwork updatePhysicalNetwork(Long id,String networkSpeed,List<String> tags,String newVnetRangeString,String state){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + network.getDataCenterId() + ""String_Node_Str"");
  }
  if (newVnetRangeString != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str""+ zone.isSecurityGroupEnabled());
    }
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state + ""String_Node_Str"");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean replaceVnet=false;
  ArrayList<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>(2);
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    String[] newVnetRange=newVnetRangeString.split(""String_Node_Str"");
    if (newVnetRange.length < 2) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newVnetRange[0] == null || newVnetRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      newStartVnet=Integer.parseInt(newVnetRange[0]);
      newEndVnet=Integer.parseInt(newVnetRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet < 0 || newEndVnet > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet > newEndVnet) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (physicalNetworkHasAllocatedVnets(network.getDataCenterId(),network.getId())) {
      String[] existingRange=network.getVnet().split(""String_Node_Str"");
      int existingStartVnet=Integer.parseInt(existingRange[0]);
      int existingEndVnet=Integer.parseInt(existingRange[1]);
      if (!(newStartVnet.intValue() > existingStartVnet && newEndVnet.intValue() < existingEndVnet)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (newStartVnet < existingStartVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
      }
      if (newEndVnet > existingEndVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
      }
    }
 else {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      replaceVnet=true;
    }
  }
  if (newVnetRangeString != null) {
    network.setVnet(newVnetRangeString);
  }
  _physicalNetworkDao.update(id,network);
  if (replaceVnet) {
    s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.deleteVnet(network.getId());
  }
  for (  Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
    s_logger.debug(""String_Node_Str"" + vnetToAdd.first() + ""String_Node_Str""+ vnetToAdd.second()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
  }
  return network;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetwork updatePhysicalNetwork(Long id,String networkSpeed,List<String> tags,String newVnetRangeString,String state){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + network.getDataCenterId() + ""String_Node_Str"");
  }
  if (newVnetRangeString != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str""+ zone.isSecurityGroupEnabled());
    }
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state + ""String_Node_Str"");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean replaceVnet=false;
  ArrayList<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>(2);
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    String[] newVnetRange=newVnetRangeString.split(""String_Node_Str"");
    if (newVnetRange.length < 2) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newVnetRange[0] == null || newVnetRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      newStartVnet=Integer.parseInt(newVnetRange[0]);
      newEndVnet=Integer.parseInt(newVnetRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet < 0 || newEndVnet > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet > newEndVnet) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (physicalNetworkHasAllocatedVnets(network.getDataCenterId(),network.getId())) {
      String[] existingRange=network.getVnet().split(""String_Node_Str"");
      int existingStartVnet=Integer.parseInt(existingRange[0]);
      int existingEndVnet=Integer.parseInt(existingRange[1]);
      if (newStartVnet.intValue() > existingStartVnet || newEndVnet.intValue() < existingEndVnet) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (newStartVnet < existingStartVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
      }
      if (newEndVnet > existingEndVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
      }
    }
 else {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      replaceVnet=true;
    }
  }
  if (newVnetRangeString != null) {
    network.setVnet(newVnetRangeString);
  }
  _physicalNetworkDao.update(id,network);
  if (replaceVnet) {
    s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.deleteVnet(network.getId());
  }
  for (  Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
    s_logger.debug(""String_Node_Str"" + vnetToAdd.first() + ""String_Node_Str""+ vnetToAdd.second()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
  }
  return network;
}",0.9991497631483056
106534,"@Override public List<? extends NetworkOffering> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=UserContext.current().getCaller();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  if (zoneId != null) {
    zone=getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new ArrayList<NetworkOffering>();
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (networkId != null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkMgr.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new ArrayList<NetworkOffering>();
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (listBySupportedServices) {
        addOffering=addOffering && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkMgr.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkMgr.areServicesEnabledInZone(zoneId,offering.getId(),offering.getTags(),checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    return supportedOfferings;
  }
 else {
    return offerings;
  }
}","@Override public List<? extends NetworkOffering> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=UserContext.current().getCaller();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  if (zoneId != null) {
    zone=getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new ArrayList<NetworkOffering>();
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (networkId != null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkMgr.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new ArrayList<NetworkOffering>();
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (listBySupportedServices) {
        addOffering=addOffering && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkMgr.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkMgr.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    return supportedOfferings;
  }
 else {
    return offerings;
  }
}",0.9976548249804568
106535,"boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services);","boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services);",0.8888888888888888
106536,"@Override public boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services){
  long physicalNtwkId=findPhysicalNetworkId(zoneId,tags,null);
  boolean result=true;
  List<String> checkedProvider=new ArrayList<String>();
  for (  Service service : services) {
    List<String> providerNames=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(networkOfferingId,service);
    for (    String providerName : providerNames) {
      if (!checkedProvider.contains(providerName)) {
        result=result && isProviderEnabledInPhysicalNetwork(physicalNtwkId,providerName);
      }
    }
  }
  return result;
}","@Override public boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services){
  long physicalNtwkId=findPhysicalNetworkId(zoneId,offering.getTags(),offering.getTrafficType());
  boolean result=true;
  List<String> checkedProvider=new ArrayList<String>();
  for (  Service service : services) {
    List<String> providerNames=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
    for (    String providerName : providerNames) {
      if (!checkedProvider.contains(providerName)) {
        result=result && isProviderEnabledInPhysicalNetwork(physicalNtwkId,providerName);
      }
    }
  }
  return result;
}",0.9146706586826348
106537,"@Override public boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services){
  return false;
}","@Override public boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services){
  return false;
}",0.917910447761194
106538,"@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  if (_configDao.isPremium()) {
    String storePassword=String.valueOf(_random.nextLong());
    byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
    assert(ksBits != null);
    if (ksBits == null) {
      s_logger.error(""String_Node_Str"");
    }
    cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  }
 else {
    cmd=new StartConsoleProxyAgentHttpHandlerCommand();
  }
  try {
    long proxyVmId=startupCmd.getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    assert(consoleProxy != null);
    HostVO consoleProxyHost=findConsoleProxyHostByName(consoleProxy.getHostName());
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}","@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  if (_configDao.isPremium()) {
    String storePassword=String.valueOf(_random.nextLong());
    byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
    assert(ksBits != null);
    if (ksBits == null) {
      s_logger.error(""String_Node_Str"");
    }
    cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  }
 else {
    cmd=new StartConsoleProxyAgentHttpHandlerCommand();
  }
  try {
    long proxyVmId=startupCmd.getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    if (consoleProxy == null) {
      s_logger.info(""String_Node_Str"" + proxyVmId + ""String_Node_Str"");
      return;
    }
    assert(consoleProxy != null);
    HostVO consoleProxyHost=findConsoleProxyHostByName(consoleProxy.getHostName());
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}",0.959974176888315
106539,"@Override public NicProfile allocate(Network config,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId()) && nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  NicProfile profile=super.allocate(config,nic,vm);
  if (_ovsNetworkMgr.isOvsNetworkEnabled() || _tunnelMgr.isOvsTunnelEnabled()) {
    return null;
  }
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId())) {
    profile.setStrategy(ReservationStrategy.Start);
    profile.setIp4Address(null);
    profile.setGateway(null);
    profile.setNetmask(null);
  }
  return profile;
}","@Override public NicProfile allocate(Network config,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId()) && nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  NicProfile profile=super.allocate(config,nic,vm);
  if (_ovsNetworkMgr.isOvsNetworkEnabled() || _tunnelMgr.isOvsTunnelEnabled()) {
    return null;
  }
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId())) {
    profile.setStrategy(ReservationStrategy.Start);
    profile.setGateway(null);
    profile.setNetmask(null);
  }
  return profile;
}",0.9418116376724656
106540,"@Override public KVMStoragePool createStoragePool(String name,String host,String path,StoragePoolType type){
  StoragePool sp=null;
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
  try {
    sp=conn.storagePoolLookupByUUIDString(name);
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    if (type == StoragePoolType.NetworkFilesystem) {
      sp=createNfsStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.SharedMountPoint || type == StoragePoolType.Filesystem) {
      sp=CreateSharedStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.CLVM) {
      sp=createCLVMStoragePool(conn,name,host,path);
    }
  }
  try {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,sp);
    LibvirtStoragePool pool=new LibvirtStoragePool(name,sp.getName(),type,this,sp);
    pool.setLocalPath(spd.getTargetPath());
    if (pool.getType() == StoragePoolType.CLVM) {
      pool.setCapacity(sp.getInfo().capacity);
      pool.setUsed(sp.getInfo().allocation);
    }
 else {
      getStats(pool);
    }
    return pool;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public KVMStoragePool createStoragePool(String name,String host,String path,StoragePoolType type){
  StoragePool sp=null;
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
  try {
    sp=conn.storagePoolLookupByUUIDString(name);
    if (sp.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.undefine();
      sp=null;
    }
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    if (type == StoragePoolType.NetworkFilesystem) {
      sp=createNfsStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.SharedMountPoint || type == StoragePoolType.Filesystem) {
      sp=CreateSharedStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.CLVM) {
      sp=createCLVMStoragePool(conn,name,host,path);
    }
  }
  try {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,sp);
    LibvirtStoragePool pool=new LibvirtStoragePool(name,sp.getName(),type,this,sp);
    pool.setLocalPath(spd.getTargetPath());
    if (pool.getType() == StoragePoolType.CLVM) {
      pool.setCapacity(sp.getInfo().capacity);
      pool.setUsed(sp.getInfo().allocation);
    }
 else {
      getStats(pool);
    }
    return pool;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}",0.4926646195837598
106541,"public StorageVol getVolumeFromURI(Connect conn,String volPath) throws LibvirtException, URISyntaxException {
  int index=volPath.lastIndexOf(""String_Node_Str"");
  URI volDir=null;
  StoragePool sp=null;
  StorageVol vol=null;
  try {
    volDir=new URI(volPath.substring(0,index));
    String volName=volPath.substring(index + 1);
    sp=getStoragePoolbyURI(conn,volDir);
    vol=sp.storageVolLookupByName(volName);
    return vol;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    throw e;
  }
 finally {
    try {
      if (sp != null) {
        sp.free();
      }
    }
 catch (    LibvirtException e) {
    }
  }
}","public StorageVol getVolumeFromURI(Connect conn,String volPath) throws LibvirtException, URISyntaxException {
}",0.2868217054263566
106542,"public Command[] getCommands(){
  if (_cmds == null) {
    try {
      _cmds=s_gson.fromJson(_content,Command[].class);
    }
 catch (    RuntimeException e) {
      s_logger.error(""String_Node_Str"" + _content,e);
      throw e;
    }
  }
  return _cmds;
}","public Command[] getCommands(){
  if (_cmds == null) {
    try {
      StringReader reader=new StringReader(_content);
      JsonReader jsonReader=new JsonReader(reader);
      jsonReader.setLenient(true);
      _cmds=s_gson.fromJson(jsonReader,(Type)Command[].class);
    }
 catch (    RuntimeException e) {
      s_logger.error(""String_Node_Str"" + _content,e);
      throw e;
    }
  }
  return _cmds;
}",0.7503782148260212
106543,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9329419319328502
106544,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.8210437945991325
106545,"@Override public List<? extends FirewallRule> listFirewallRules(ListFirewallRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(FirewallRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.Firewall);
  return _firewallDao.search(sc,filter);
}","@Override public List<? extends FirewallRule> listFirewallRules(ListFirewallRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(FirewallRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.Firewall);
  return _firewallDao.search(sc,filter);
}",0.9984863773965692
106546,"@Override public List<LoadBalancerVO> searchForLoadBalancers(ListLoadBalancerRulesCmd cmd){
  Long ipId=cmd.getPublicIpId();
  Long zoneId=cmd.getZoneId();
  Long id=cmd.getId();
  String name=cmd.getLoadBalancerRuleName();
  String keyword=cmd.getKeyword();
  Long instanceId=cmd.getVirtualMachineId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(LoadBalancerVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<LoadBalancerVO> sb=_lbDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),SearchCriteria.Op.EQ);
  if (instanceId != null) {
    SearchBuilder<LoadBalancerVMMapVO> lbVMSearch=_lb2VmMapDao.createSearchBuilder();
    lbVMSearch.and(""String_Node_Str"",lbVMSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",lbVMSearch,sb.entity().getId(),lbVMSearch.entity().getLoadBalancerId(),JoinBuilder.JoinType.INNER);
  }
  if (zoneId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<LoadBalancerVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<LoadBalancerVO> ssc=_lbDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (instanceId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",instanceId);
  }
  if (zoneId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",zoneId);
  }
  return _lbDao.search(sc,searchFilter);
}","@Override public List<LoadBalancerVO> searchForLoadBalancers(ListLoadBalancerRulesCmd cmd){
  Long ipId=cmd.getPublicIpId();
  Long zoneId=cmd.getZoneId();
  Long id=cmd.getId();
  String name=cmd.getLoadBalancerRuleName();
  String keyword=cmd.getKeyword();
  Long instanceId=cmd.getVirtualMachineId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(LoadBalancerVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<LoadBalancerVO> sb=_lbDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),SearchCriteria.Op.EQ);
  if (instanceId != null) {
    SearchBuilder<LoadBalancerVMMapVO> lbVMSearch=_lb2VmMapDao.createSearchBuilder();
    lbVMSearch.and(""String_Node_Str"",lbVMSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",lbVMSearch,sb.entity().getId(),lbVMSearch.entity().getLoadBalancerId(),JoinBuilder.JoinType.INNER);
  }
  if (zoneId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<LoadBalancerVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<LoadBalancerVO> ssc=_lbDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (instanceId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",instanceId);
  }
  if (zoneId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",zoneId);
  }
  return _lbDao.search(sc,searchFilter);
}",0.999056010069226
106547,"@Override public List<? extends FirewallRule> searchStaticNatRules(Long ipId,Long id,Long vmId,Long start,Long size,String accountName,Long domainId,Long projectId,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,start,size);
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  if (vmId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getAssociatedWithVmId(),Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",Purpose.StaticNat);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (vmId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vmId);
  }
  return _firewallDao.search(sc,filter);
}","@Override public List<? extends FirewallRule> searchStaticNatRules(Long ipId,Long id,Long vmId,Long start,Long size,String accountName,Long domainId,Long projectId,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,false);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,start,size);
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  if (vmId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getAssociatedWithVmId(),Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",Purpose.StaticNat);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (vmId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vmId);
  }
  return _firewallDao.search(sc,filter);
}",0.9987352445193928
106548,"@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<PortForwardingRuleVO> sb=_portForwardingDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<PortForwardingRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.PortForwarding);
  return _portForwardingDao.search(sc,filter);
}","@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<PortForwardingRuleVO> sb=_portForwardingDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<PortForwardingRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.PortForwarding);
  return _portForwardingDao.search(sc,filter);
}",0.9985265225933202
106549,"@Override public List<SecurityGroupRulesVO> searchForSecurityGroupRules(ListSecurityGroupsCmd cmd) throws PermissionDeniedException, InvalidParameterValueException {
  Account caller=UserContext.current().getCaller();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long id=cmd.getId();
  Object keyword=cmd.getKeyword();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (instanceId != null) {
    UserVmVO userVM=_userVMDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue());
  }
  List<SecurityGroupRulesVO> securityRulesList=new ArrayList<SecurityGroupRulesVO>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SecurityGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SecurityGroupVO> sb=_securityGroupDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  SearchCriteria<SecurityGroupVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (securityGroup != null) {
    sc.setParameters(""String_Node_Str"",securityGroup);
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupRulesVO> ssc=_securityGroupRulesDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  List<SecurityGroupVO> securityGroups=_securityGroupDao.search(sc,searchFilter);
  for (  SecurityGroupVO group : securityGroups) {
    securityRulesList.addAll(_securityGroupRulesDao.listSecurityRulesByGroupId(group.getId()));
  }
  return securityRulesList;
}","@Override public List<SecurityGroupRulesVO> searchForSecurityGroupRules(ListSecurityGroupsCmd cmd) throws PermissionDeniedException, InvalidParameterValueException {
  Account caller=UserContext.current().getCaller();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long id=cmd.getId();
  Object keyword=cmd.getKeyword();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (instanceId != null) {
    UserVmVO userVM=_userVMDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue());
  }
  List<SecurityGroupRulesVO> securityRulesList=new ArrayList<SecurityGroupRulesVO>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SecurityGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SecurityGroupVO> sb=_securityGroupDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  SearchCriteria<SecurityGroupVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (securityGroup != null) {
    sc.setParameters(""String_Node_Str"",securityGroup);
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupRulesVO> ssc=_securityGroupRulesDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  List<SecurityGroupVO> securityGroups=_securityGroupDao.search(sc,searchFilter);
  for (  SecurityGroupVO group : securityGroups) {
    securityRulesList.addAll(_securityGroupRulesDao.listSecurityRulesByGroupId(group.getId()));
  }
  return securityRulesList;
}",0.998933522929257
106550,"@Override public List<RemoteAccessVpnVO> searchForRemoteAccessVpns(ListRemoteAccessVpnsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long ipAddressId=cmd.getPublicIpId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
      }
    }
    _accountMgr.checkAccess(caller,null,true,publicIp);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(RemoteAccessVpnVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getServerAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters(""String_Node_Str"",ipAddressId);
  }
  return _remoteAccessVpnDao.search(sc,filter);
}","@Override public List<RemoteAccessVpnVO> searchForRemoteAccessVpns(ListRemoteAccessVpnsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long ipAddressId=cmd.getPublicIpId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
      }
    }
    _accountMgr.checkAccess(caller,null,true,publicIp);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(RemoteAccessVpnVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getServerAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters(""String_Node_Str"",ipAddressId);
  }
  return _remoteAccessVpnDao.search(sc,filter);
}",0.9985707479752264
106551,"@Override public List<VpnUserVO> searchForVpnUsers(ListVpnUsersCmd cmd){
  String username=cmd.getUsername();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VpnUserVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VpnUserVO> sb=_vpnUsersDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  SearchCriteria<VpnUserVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",State.Active);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",username);
  }
  return _vpnUsersDao.search(sc,searchFilter);
}","@Override public List<VpnUserVO> searchForVpnUsers(ListVpnUsersCmd cmd){
  String username=cmd.getUsername();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VpnUserVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VpnUserVO> sb=_vpnUsersDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  SearchCriteria<VpnUserVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",State.Active);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",username);
  }
  return _vpnUsersDao.search(sc,searchFilter);
}",0.9982332155477032
106552,"@Override public List<? extends ProjectInvitation> listProjectInvitations(Long id,Long projectId,String accountName,Long domainId,String state,boolean activeOnly,Long startIndex,Long pageSizeVal,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ProjectInvitationVO.class,""String_Node_Str"",true,startIndex,pageSizeVal);
  SearchBuilder<ProjectInvitationVO> sb=_projectInvitationDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreated(),SearchCriteria.Op.GT);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  SearchCriteria<ProjectInvitationVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (projectId != null) {
    sc.setParameters(""String_Node_Str"",projectId);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (activeOnly) {
    sc.setParameters(""String_Node_Str"",ProjectInvitation.State.Pending);
    sc.setParameters(""String_Node_Str"",new Date((DateUtil.currentGMTTime().getTime()) - _invitationTimeOut));
  }
  return _projectInvitationDao.search(sc,searchFilter);
}","@Override public List<? extends ProjectInvitation> listProjectInvitations(Long id,Long projectId,String accountName,Long domainId,String state,boolean activeOnly,Long startIndex,Long pageSizeVal,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,true);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ProjectInvitationVO.class,""String_Node_Str"",true,startIndex,pageSizeVal);
  SearchBuilder<ProjectInvitationVO> sb=_projectInvitationDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreated(),SearchCriteria.Op.GT);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  SearchCriteria<ProjectInvitationVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (projectId != null) {
    sc.setParameters(""String_Node_Str"",projectId);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (activeOnly) {
    sc.setParameters(""String_Node_Str"",ProjectInvitation.State.Pending);
    sc.setParameters(""String_Node_Str"",new Date((DateUtil.currentGMTTime().getTime()) - _invitationTimeOut));
  }
  return _projectInvitationDao.search(sc,searchFilter);
}",0.9987995198079233
106553,"@Override public List<? extends SSHKeyPair> listSSHKeyPairs(ListSSHKeyPairsCmd cmd){
  String name=cmd.getName();
  String fingerPrint=cmd.getFingerprint();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  Filter searchFilter=new Filter(SSHKeyPairVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,fingerPrint);
  }
  return _sshKeyPairDao.search(sc,searchFilter);
}","@Override public List<? extends SSHKeyPair> listSSHKeyPairs(ListSSHKeyPairsCmd cmd){
  String name=cmd.getName();
  String fingerPrint=cmd.getFingerprint();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  Filter searchFilter=new Filter(SSHKeyPairVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,fingerPrint);
  }
  return _sshKeyPairDao.search(sc,searchFilter);
}",0.9980066445182724
106554,"@Override public List<EventVO> searchForEvents(ListEventsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  String type=cmd.getType();
  String level=cmd.getLevel();
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  String keyword=cmd.getKeyword();
  Integer entryTime=cmd.getEntryTime();
  Integer duration=cmd.getDuration();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(EventVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<EventVO> sb=_eventDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.GTEQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.LTEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getStartId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  SearchCriteria<EventVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<EventVO> ssc=_eventDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (startDate != null && endDate != null) {
    sc.setParameters(""String_Node_Str"",startDate,endDate);
  }
 else   if (startDate != null) {
    sc.setParameters(""String_Node_Str"",startDate);
  }
 else   if (endDate != null) {
    sc.setParameters(""String_Node_Str"",endDate);
  }
  if ((entryTime != null) && (duration != null)) {
    if (entryTime <= duration) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Calendar calMin=Calendar.getInstance();
    Calendar calMax=Calendar.getInstance();
    calMin.add(Calendar.SECOND,-entryTime);
    calMax.add(Calendar.SECOND,-duration);
    Date minTime=calMin.getTime();
    Date maxTime=calMax.getTime();
    sc.setParameters(""String_Node_Str"",com.cloud.event.Event.State.Completed);
    sc.setParameters(""String_Node_Str"",0);
    sc.setParameters(""String_Node_Str"",minTime,maxTime);
    List<EventVO> startedEvents=_eventDao.searchAllEvents(sc,searchFilter);
    List<EventVO> pendingEvents=new ArrayList<EventVO>();
    for (    EventVO event : startedEvents) {
      EventVO completedEvent=_eventDao.findCompletedEvent(event.getId());
      if (completedEvent == null) {
        pendingEvents.add(event);
      }
    }
    return pendingEvents;
  }
 else {
    return _eventDao.searchAllEvents(sc,searchFilter);
  }
}","@Override public List<EventVO> searchForEvents(ListEventsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  String type=cmd.getType();
  String level=cmd.getLevel();
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  String keyword=cmd.getKeyword();
  Integer entryTime=cmd.getEntryTime();
  Integer duration=cmd.getDuration();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(EventVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<EventVO> sb=_eventDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.GTEQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.LTEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getStartId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  SearchCriteria<EventVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<EventVO> ssc=_eventDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (startDate != null && endDate != null) {
    sc.setParameters(""String_Node_Str"",startDate,endDate);
  }
 else   if (startDate != null) {
    sc.setParameters(""String_Node_Str"",startDate);
  }
 else   if (endDate != null) {
    sc.setParameters(""String_Node_Str"",endDate);
  }
  if ((entryTime != null) && (duration != null)) {
    if (entryTime <= duration) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Calendar calMin=Calendar.getInstance();
    Calendar calMax=Calendar.getInstance();
    calMin.add(Calendar.SECOND,-entryTime);
    calMax.add(Calendar.SECOND,-duration);
    Date minTime=calMin.getTime();
    Date maxTime=calMax.getTime();
    sc.setParameters(""String_Node_Str"",com.cloud.event.Event.State.Completed);
    sc.setParameters(""String_Node_Str"",0);
    sc.setParameters(""String_Node_Str"",minTime,maxTime);
    List<EventVO> startedEvents=_eventDao.searchAllEvents(sc,searchFilter);
    List<EventVO> pendingEvents=new ArrayList<EventVO>();
    for (    EventVO event : startedEvents) {
      EventVO completedEvent=_eventDao.findCompletedEvent(event.getId());
      if (completedEvent == null) {
        pendingEvents.add(event);
      }
    }
    return pendingEvents;
  }
 else {
    return _eventDao.searchAllEvents(sc,searchFilter);
  }
}",0.999485949280329
106555,"@Override public List<IPAddressVO> searchForIPAddresses(ListPublicIpAddressesCmd cmd){
  Object keyword=cmd.getKeyword();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  Long zone=cmd.getZoneId();
  String address=cmd.getIpAddress();
  Long vlan=cmd.getVlanId();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Boolean forLoadBalancing=cmd.isForLoadBalancing();
  Long ipId=cmd.getId();
  Boolean sourceNat=cmd.getIsSourceNat();
  Boolean staticNat=cmd.getIsStaticNat();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(IPAddressVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isSourceNat(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join(""String_Node_Str"",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  boolean allocatedOnly=false;
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and(""String_Node_Str"",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
    allocatedOnly=true;
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  if (vlanType == VlanType.VirtualNetwork && (allocatedOnly)) {
    sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vlanType);
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (sourceNat != null) {
    sc.setParameters(""String_Node_Str"",sourceNat);
  }
  if (staticNat != null) {
    sc.setParameters(""String_Node_Str"",staticNat);
  }
  if (address == null && keyword != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",address);
  }
  if (vlan != null) {
    sc.setParameters(""String_Node_Str"",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters(""String_Node_Str"",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters(""String_Node_Str"",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}","@Override public List<IPAddressVO> searchForIPAddresses(ListPublicIpAddressesCmd cmd){
  Object keyword=cmd.getKeyword();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  Long zone=cmd.getZoneId();
  String address=cmd.getIpAddress();
  Long vlan=cmd.getVlanId();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Boolean forLoadBalancing=cmd.isForLoadBalancing();
  Long ipId=cmd.getId();
  Boolean sourceNat=cmd.getIsSourceNat();
  Boolean staticNat=cmd.getIsStaticNat();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(IPAddressVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isSourceNat(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join(""String_Node_Str"",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  boolean allocatedOnly=false;
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and(""String_Node_Str"",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
    allocatedOnly=true;
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  if (vlanType == VlanType.VirtualNetwork && (allocatedOnly)) {
    sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vlanType);
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (sourceNat != null) {
    sc.setParameters(""String_Node_Str"",sourceNat);
  }
  if (staticNat != null) {
    sc.setParameters(""String_Node_Str"",staticNat);
  }
  if (address == null && keyword != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",address);
  }
  if (vlan != null) {
    sc.setParameters(""String_Node_Str"",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters(""String_Node_Str"",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters(""String_Node_Str"",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}",0.9993485342019544
106556,"@Override public List<InstanceGroupVO> searchForVmGroups(ListVMGroupsCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getGroupName();
  String keyword=cmd.getKeyword();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(InstanceGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<InstanceGroupVO> sb=_vmGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  SearchCriteria<InstanceGroupVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<InstanceGroupVO> ssc=_vmGroupDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return _vmGroupDao.search(sc,searchFilter);
}","@Override public List<InstanceGroupVO> searchForVmGroups(ListVMGroupsCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getGroupName();
  String keyword=cmd.getKeyword();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(InstanceGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<InstanceGroupVO> sb=_vmGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  SearchCriteria<InstanceGroupVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<InstanceGroupVO> ssc=_vmGroupDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return _vmGroupDao.search(sc,searchFilter);
}",0.9990439770554492
106557,"@Override public List<DomainRouterVO> searchForRouters(ListRoutersCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getRouterName();
  String state=cmd.getState();
  Long zone=cmd.getZoneId();
  Long pod=cmd.getPodId();
  Long hostId=cmd.getHostId();
  String keyword=cmd.getKeyword();
  Long networkId=cmd.getNetworkId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(DomainRouterVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<DomainRouterVO> sb=_routerDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getHostName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  if (networkId != null) {
    SearchBuilder<NicVO> nicSearch=_nicDao.createSearchBuilder();
    nicSearch.and(""String_Node_Str"",nicSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkVO> networkSearch=_networkDao.createSearchBuilder();
    networkSearch.and(""String_Node_Str"",networkSearch.entity().getId(),SearchCriteria.Op.EQ);
    nicSearch.join(""String_Node_Str"",networkSearch,nicSearch.entity().getNetworkId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    sb.join(""String_Node_Str"",nicSearch,sb.entity().getId(),nicSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<DomainRouterVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<DomainRouterVO> ssc=_routerDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (hostId != null) {
    sc.setParameters(""String_Node_Str"",hostId);
  }
  if (networkId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",networkId);
  }
  return _routerDao.search(sc,searchFilter);
}","@Override public List<DomainRouterVO> searchForRouters(ListRoutersCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getRouterName();
  String state=cmd.getState();
  Long zone=cmd.getZoneId();
  Long pod=cmd.getPodId();
  Long hostId=cmd.getHostId();
  String keyword=cmd.getKeyword();
  Long networkId=cmd.getNetworkId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(DomainRouterVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<DomainRouterVO> sb=_routerDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getHostName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  if (networkId != null) {
    SearchBuilder<NicVO> nicSearch=_nicDao.createSearchBuilder();
    nicSearch.and(""String_Node_Str"",nicSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkVO> networkSearch=_networkDao.createSearchBuilder();
    networkSearch.and(""String_Node_Str"",networkSearch.entity().getId(),SearchCriteria.Op.EQ);
    nicSearch.join(""String_Node_Str"",networkSearch,nicSearch.entity().getNetworkId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    sb.join(""String_Node_Str"",nicSearch,sb.entity().getId(),nicSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<DomainRouterVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<DomainRouterVO> ssc=_routerDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (hostId != null) {
    sc.setParameters(""String_Node_Str"",hostId);
  }
  if (networkId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",networkId);
  }
  return _routerDao.search(sc,searchFilter);
}",0.9991913746630728
106558,"@Override public List<AsyncJobVO> searchForAsyncJobs(ListAsyncJobsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),null,permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AsyncJobVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<AsyncJobVO> sb=_jobDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  SearchBuilder<AccountVO> accountSearch=null;
  boolean accountJoinIsDone=false;
  if (permittedAccounts.isEmpty() && domainId != null) {
    accountSearch=_accountDao.createSearchBuilder();
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getId(),SearchCriteria.Op.EQ);
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    accountJoinIsDone=true;
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (accountSearch == null) {
      accountSearch=_accountDao.createSearchBuilder();
    }
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    }
    if (!accountJoinIsDone) {
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  Object keyword=cmd.getKeyword();
  Object startDate=cmd.getStartDate();
  SearchCriteria<AsyncJobVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (startDate != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.GTEQ,startDate);
  }
  return _jobDao.search(sc,searchFilter);
}","@Override public List<AsyncJobVO> searchForAsyncJobs(ListAsyncJobsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),null,permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AsyncJobVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<AsyncJobVO> sb=_jobDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  SearchBuilder<AccountVO> accountSearch=null;
  boolean accountJoinIsDone=false;
  if (permittedAccounts.isEmpty() && domainId != null) {
    accountSearch=_accountDao.createSearchBuilder();
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getId(),SearchCriteria.Op.EQ);
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    accountJoinIsDone=true;
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (accountSearch == null) {
      accountSearch=_accountDao.createSearchBuilder();
    }
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    }
    if (!accountJoinIsDone) {
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  Object keyword=cmd.getKeyword();
  Object startDate=cmd.getStartDate();
  SearchCriteria<AsyncJobVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (startDate != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.GTEQ,startDate);
  }
  return _jobDao.search(sc,searchFilter);
}",0.9991248541423572
106559,"@Override public Set<Pair<Long,Long>> listIsos(ListIsosCmd cmd) throws IllegalArgumentException, InvalidParameterValueException {
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Account caller=UserContext.current().getCaller();
  boolean listAll=(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && (isoFilter != null && isoFilter == TemplateFilter.all));
  List<Long> permittedAccountIds=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccountIds,domainIdRecursiveListProject,listAll);
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  List<Account> permittedAccounts=new ArrayList<Account>();
  for (  Long accountId : permittedAccountIds) {
    permittedAccounts.add(_accountMgr.getAccount(accountId));
  }
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return listTemplates(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedAccounts,caller,listProjectResourcesCriteria);
}","@Override public Set<Pair<Long,Long>> listIsos(ListIsosCmd cmd) throws IllegalArgumentException, InvalidParameterValueException {
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Account caller=UserContext.current().getCaller();
  boolean listAll=(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && (isoFilter != null && isoFilter == TemplateFilter.all));
  List<Long> permittedAccountIds=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccountIds,domainIdRecursiveListProject,listAll,false);
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  List<Account> permittedAccounts=new ArrayList<Account>();
  for (  Long accountId : permittedAccountIds) {
    permittedAccounts.add(_accountMgr.getAccount(accountId));
  }
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return listTemplates(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedAccounts,caller,listProjectResourcesCriteria);
}",0.9978323699421964
106560,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (podId != null) {
    sc.setParameters(""String_Node_Str"",podId);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (podId != null) {
    sc.setParameters(""String_Node_Str"",podId);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}",0.999238578680203
106561,"@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  String name=cmd.getSnapshotName();
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  String snapshotTypeStr=cmd.getSnapshotType();
  String intervalTypeStr=cmd.getIntervalType();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
    }
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  SearchCriteria<SnapshotVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}","@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  String name=cmd.getSnapshotName();
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  String snapshotTypeStr=cmd.getSnapshotType();
  String intervalTypeStr=cmd.getIntervalType();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
    }
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  SearchCriteria<SnapshotVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}",0.999143346659052
106562,"void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll);","void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation);",0.9362637362637364
106563,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
    }
    if (userAccount != null) {
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
  if (projectId != null) {
    if (projectId == -1) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
      }
 else {
        domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
      }
    }
 else {
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
  }
 else {
    if (id == null) {
      domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    }
    if (permittedAccounts.isEmpty() && domainId == null) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.add(caller.getId());
      }
 else       if (!listAll) {
        if (id == null) {
          permittedAccounts.add(caller.getId());
        }
 else         if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
 else       if (domainId == null) {
        if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
    }
    if (userAccount != null) {
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId == -1) {
        if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    if (id == null) {
      domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    }
    if (permittedAccounts.isEmpty() && domainId == null) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.add(caller.getId());
      }
 else       if (!listAll) {
        if (id == null) {
          permittedAccounts.add(caller.getId());
        }
 else         if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
 else       if (domainId == null) {
        if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
    }
  }
}",0.9822632139056404
106564,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9062163906216392
106565,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public Network updateGuestNetwork(long networkId,String name,String displayText,Account callerAccount,User callerUser,String domainSuffix,Long networkOfferingId){
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != null) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str""+ NetworkOffering.State.Enabled+ ""String_Node_Str"");
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      if (network.isSpecifiedCidr() && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str"");
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + oldNetworkOfferingId + ""String_Node_Str""+ networkOfferingId+ ""String_Node_Str"");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
      if (!shutdownNetworkElementsAndResources(context,true,network)) {
        s_logger.warn(""String_Node_Str"" + network);
        throw new CloudRuntimeException(""String_Node_Str"" + network);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
    }
  }
  network=_networksDao.findById(networkId);
  boolean validStateToImplement=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error(""String_Node_Str"" + nic.getId() + ""String_Node_Str""+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),null,oldNetworkOfferingId,null,0L);
        _usageEventDao.persist(usageEvent);
        usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),networkOfferingId,null,isDefault);
        _usageEventDao.persist(usageEvent);
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      try {
        implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
      }
 catch (      Exception ex) {
        s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
        throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str"");
      }
    }
  }
  return getNetwork(network.getId());
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public Network updateGuestNetwork(long networkId,String name,String displayText,Account callerAccount,User callerUser,String domainSuffix,Long networkOfferingId){
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != null) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str""+ NetworkOffering.State.Enabled+ ""String_Node_Str"");
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      if (network.isSpecifiedCidr() && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str"");
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + oldNetworkOfferingId + ""String_Node_Str""+ networkOfferingId+ ""String_Node_Str"");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
      if (!shutdownNetworkElementsAndResources(context,true,network)) {
        s_logger.warn(""String_Node_Str"" + network);
        throw new CloudRuntimeException(""String_Node_Str"" + network);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
    }
  }
  Network.State networkState=_networksDao.findById(networkId).getState();
  boolean validStateToImplement=(networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ networkState);
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error(""String_Node_Str"" + nic.getId() + ""String_Node_Str""+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),null,oldNetworkOfferingId,null,0L);
        _usageEventDao.persist(usageEvent);
        usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),networkOfferingId,null,isDefault);
        _usageEventDao.persist(usageEvent);
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      try {
        implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
      }
 catch (      Exception ex) {
        s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
        throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str"");
      }
    }
  }
  return getNetwork(network.getId());
}",0.9920412675018424
106566,"protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}","protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
synchronized (_cluster.intern()) {
    s_vms.clear(_cluster);
  }
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
synchronized (_cluster.intern()) {
          s_vms.put(_cluster,host_uuid,vm_name,state);
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return s_vms.getClusterVmState(_cluster);
}",0.9194139194139194
106567,"@Override protected FenceAnswer execute(FenceCommand cmd){
  Connection conn=getConnection();
  try {
    String result=callHostPluginPremium(conn,""String_Node_Str"",""String_Node_Str"",cmd.getHostGuid(),""String_Node_Str"",Integer.toString(_heartbeatInterval * 2));
    if (!result.contains(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return new FenceAnswer(cmd,false,""String_Node_Str"");
    }
    Set<VM> vms=VM.getByNameLabel(conn,cmd.getVmName());
    for (    VM vm : vms) {
      Set<VDI> vdis=new HashSet<VDI>();
      Set<VBD> vbds=vm.getVBDs(conn);
      for (      VBD vbd : vbds) {
        VDI vdi=vbd.getVDI(conn);
        if (!isRefNull(vdi)) {
          vdis.add(vdi);
        }
      }
      vm.powerStateReset(conn);
      vm.destroy(conn);
      for (      VDI vdi : vdis) {
        Map<String,String> smConfig=vdi.getSmConfig(conn);
        for (        String key : smConfig.keySet()) {
          if (key.startsWith(""String_Node_Str"")) {
            vdi.removeFromSmConfig(conn,key);
            break;
          }
        }
      }
    }
    return new FenceAnswer(cmd);
  }
 catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
}","@Override protected FenceAnswer execute(FenceCommand cmd){
  Connection conn=getConnection();
  try {
    String result=callHostPluginPremium(conn,""String_Node_Str"",""String_Node_Str"",cmd.getHostGuid(),""String_Node_Str"",Integer.toString(_heartbeatInterval * 2));
    if (!result.contains(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return new FenceAnswer(cmd,false,""String_Node_Str"");
    }
    Set<VM> vms=VM.getByNameLabel(conn,cmd.getVmName());
    for (    VM vm : vms) {
      Set<VDI> vdis=new HashSet<VDI>();
      Set<VBD> vbds=vm.getVBDs(conn);
      for (      VBD vbd : vbds) {
        VDI vdi=vbd.getVDI(conn);
        if (!isRefNull(vdi)) {
          vdis.add(vdi);
        }
      }
synchronized (_cluster.intern()) {
        s_vms.remove(_cluster,_name,vm.getNameLabel(conn));
      }
      s_logger.info(""String_Node_Str"" + cmd.getVmName());
      vm.powerStateReset(conn);
      vm.destroy(conn);
      for (      VDI vdi : vdis) {
        Map<String,String> smConfig=vdi.getSmConfig(conn);
        for (        String key : smConfig.keySet()) {
          if (key.startsWith(""String_Node_Str"")) {
            vdi.removeFromSmConfig(conn,key);
            break;
          }
        }
      }
    }
    return new FenceAnswer(cmd);
  }
 catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
}",0.9446164430684556
106568,"protected AgentAttache notifyMonitorsOfConnection(AgentAttache attache,final StartupCommand[] cmd,boolean forRebalance) throws ConnectionException {
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  for (  Pair<Integer,Listener> monitor : _hostMonitors) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + monitor.second().getClass().getSimpleName());
    }
    for (int i=0; i < cmd.length; i++) {
      try {
        monitor.second().processConnect(host,cmd[i],forRebalance);
      }
 catch (      Exception e) {
        if (e instanceof ConnectionException) {
          ConnectionException ce=(ConnectionException)e;
          if (ce.isSetupError()) {
            s_logger.warn(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
            throw ce;
          }
 else {
            s_logger.info(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
            return attache;
          }
        }
 else         if (e instanceof HypervisorVersionChangedException) {
          handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
 else {
          s_logger.error(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage(),e);
          handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
      }
    }
  }
  Long dcId=host.getDataCenterId();
  ReadyCommand ready=new ReadyCommand(dcId);
  Answer answer=easySend(hostId,ready);
  if (answer == null || !answer.getResult()) {
    handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
    throw new CloudRuntimeException(""String_Node_Str"" + attache.getId());
  }
  agentStatusTransitTo(host,Event.Ready,_nodeId);
  attache.ready();
  return attache;
}","protected AgentAttache notifyMonitorsOfConnection(AgentAttache attache,final StartupCommand[] cmd,boolean forRebalance) throws ConnectionException {
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  for (  Pair<Integer,Listener> monitor : _hostMonitors) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + monitor.second().getClass().getSimpleName());
    }
    for (int i=0; i < cmd.length; i++) {
      try {
        monitor.second().processConnect(host,cmd[i],forRebalance);
      }
 catch (      Exception e) {
        if (e instanceof ConnectionException) {
          ConnectionException ce=(ConnectionException)e;
          if (ce.isSetupError()) {
            s_logger.warn(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
            throw ce;
          }
 else {
            s_logger.info(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
            return attache;
          }
        }
 else         if (e instanceof HypervisorVersionChangedException) {
          handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
 else {
          s_logger.error(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage(),e);
          handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
      }
    }
  }
  Long dcId=host.getDataCenterId();
  ReadyCommand ready=new ReadyCommand(dcId);
  Answer answer=easySend(hostId,ready);
  if (answer == null || !answer.getResult()) {
    handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
  }
  agentStatusTransitTo(host,Event.Ready,_nodeId);
  attache.ready();
  return attache;
}",0.9835042353990192
106569,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_OFFERING_EDIT,eventDescription=""String_Node_Str"") public NetworkOffering updateNetworkOffering(UpdateNetworkOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getNetworkOfferingName();
  String availabilityStr=cmd.getAvailability();
  Integer sortKey=cmd.getSortKey();
  Availability availability=null;
  String state=cmd.getState();
  UserContext.current().setEventDetails(""String_Node_Str"" + id);
  NetworkOfferingVO offeringToUpdate=_networkOfferingDao.findById(id);
  if (offeringToUpdate == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (offeringToUpdate.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkOfferingVO offering=_networkOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (sortKey != null) {
    offering.setSortKey(sortKey);
  }
  if (state != null) {
    boolean validState=false;
    for (    NetworkOffering.State st : NetworkOffering.State.values()) {
      if (st.name().equalsIgnoreCase(state)) {
        validState=true;
        offering.setState(st);
      }
    }
    if (!validState) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state);
    }
  }
  if (availabilityStr != null) {
    for (    Availability avlb : Availability.values()) {
      if (avlb.name().equalsIgnoreCase(availabilityStr)) {
        availability=avlb;
      }
    }
    if (availability == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Availability.Required + ""String_Node_Str""+ Availability.Optional);
    }
 else {
      if (availability == NetworkOffering.Availability.Required) {
        boolean canOffBeRequired=(offering.getGuestType() == GuestType.Isolated && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Service.SourceNat));
        if (!canOffBeRequired) {
          throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
        }
        List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (!offerings.isEmpty() || offerings.get(0).getId() != offering.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
        }
      }
      offering.setAvailability(availability);
    }
  }
  if (_networkOfferingDao.update(id,offering)) {
    return _networkOfferingDao.findById(id);
  }
 else {
    return null;
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_OFFERING_EDIT,eventDescription=""String_Node_Str"") public NetworkOffering updateNetworkOffering(UpdateNetworkOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getNetworkOfferingName();
  String availabilityStr=cmd.getAvailability();
  Integer sortKey=cmd.getSortKey();
  Availability availability=null;
  String state=cmd.getState();
  UserContext.current().setEventDetails(""String_Node_Str"" + id);
  NetworkOfferingVO offeringToUpdate=_networkOfferingDao.findById(id);
  if (offeringToUpdate == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (offeringToUpdate.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkOfferingVO offering=_networkOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (sortKey != null) {
    offering.setSortKey(sortKey);
  }
  if (state != null) {
    boolean validState=false;
    for (    NetworkOffering.State st : NetworkOffering.State.values()) {
      if (st.name().equalsIgnoreCase(state)) {
        validState=true;
        offering.setState(st);
      }
    }
    if (!validState) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state);
    }
  }
  if (availabilityStr != null) {
    for (    Availability avlb : Availability.values()) {
      if (avlb.name().equalsIgnoreCase(availabilityStr)) {
        availability=avlb;
      }
    }
    if (availability == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Availability.Required + ""String_Node_Str""+ Availability.Optional);
    }
 else {
      if (availability == NetworkOffering.Availability.Required) {
        boolean canOffBeRequired=(offeringToUpdate.getGuestType() == GuestType.Isolated && _networkMgr.areServicesSupportedByNetworkOffering(offeringToUpdate.getId(),Service.SourceNat));
        if (!canOffBeRequired) {
          throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
        }
        List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
        }
      }
      offering.setAvailability(availability);
    }
  }
  if (_networkOfferingDao.update(id,offering)) {
    return _networkOfferingDao.findById(id);
  }
 else {
    return null;
  }
}",0.9950547509713882
106570,"@Override public void performDataMigration(Connection conn){
  encryptData(conn);
  dropKeysIfExist(conn);
  setupPhysicalNetworks(conn);
}","@Override public void performDataMigration(Connection conn){
  encryptData(conn);
  dropKeysIfExist(conn);
  setupPhysicalNetworks(conn);
  createNetworkOfferingServices(conn);
}",0.8769716088328076
106571,"private void encryptData(Connection conn){
  encryptConfigValues(conn);
  encryptHostDetails(conn);
  encryptVNCPassword(conn);
  encryptUserCredentials(conn);
  createNetworkOfferingServices(conn);
}","private void encryptData(Connection conn){
  encryptConfigValues(conn);
  encryptHostDetails(conn);
  encryptVNCPassword(conn);
  encryptUserCredentials(conn);
}",0.8919667590027701
106572,"public void test2213to30Upgrade() throws SQLException {
}","public void test2213to30Upgrade() throws SQLException {
  s_logger.debug(""String_Node_Str"");
  DbTestUtils.executeScript(""String_Node_Str"",false,true);
  DatabaseUpgradeChecker checker=ComponentLocator.inject(DatabaseUpgradeChecker.class);
  checker.upgrade(""String_Node_Str"",""String_Node_Str"");
  Connection conn=Transaction.getStandaloneConnection();
  try {
    checkPhysicalNetworks(conn);
    checkNetworkOfferings(conn);
  }
  finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}",0.1975736568457539
106573,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || !listAll) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (listAll) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,domainId));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,permittedAccounts));
    }
 else     if (domainId == null) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,path,isRecursive));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || !listAll) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (listAll) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,domainId));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,permittedAccounts));
    }
 else     if (domainId == null || listAll) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,path,isRecursive));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}",0.9913852252801708
106574,"@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd,Account policyOwner){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}","@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd,Account policyOwner){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    String message=""String_Node_Str"";
    if (owner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      message=""String_Node_Str"";
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + message + ""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}",0.9769636414099362
106575,"@Override @DB public void cleanupSecondaryStorage(boolean recurring){
  try {
    List<HostVO> secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<VMTemplateHostVO> destroyedTemplateHostVOs=_vmTemplateHostDao.listDestroyed(hostId);
        s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVOs.size() + ""String_Node_Str""+ secondaryStorageHost.getName());
        for (        VMTemplateHostVO destroyedTemplateHostVO : destroyedTemplateHostVOs) {
          if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateHostVO)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
            }
            continue;
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
          }
          String installPath=destroyedTemplateHostVO.getInstallPath();
          if (installPath != null) {
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,new DeleteTemplateCommand(secondaryStorageHost.getStorageUrl(),destroyedTemplateHostVO.getInstallPath()));
            if (answer == null || !answer.getResult()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO + ""String_Node_Str""+ ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
            }
 else {
              _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO.getInstallPath());
            }
          }
 else {
            _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e);
      }
    }
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<Long> vIDs=findAllVolumeIdInSnapshotTable(hostId);
        if (vIDs == null) {
          continue;
        }
        for (        Long volumeId : vIDs) {
          boolean lock=false;
          try {
            VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
            if (volume.getRemoved() == null) {
              volume=_volsDao.acquireInLockTable(volumeId,10);
              if (volume == null) {
                continue;
              }
              lock=true;
            }
            List<String> snapshots=findAllSnapshotForVolume(volumeId);
            if (snapshots == null) {
              continue;
            }
            CleanupSnapshotBackupCommand cmd=new CleanupSnapshotBackupCommand(secondaryStorageHost.getStorageUrl(),secondaryStorageHost.getDataCenterId(),volume.getAccountId(),volumeId,snapshots);
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,cmd);
            if ((answer == null) || !answer.getResult()) {
              String details=""String_Node_Str"" + volumeId + ""String_Node_Str""+ (answer == null ? ""String_Node_Str"" : answer.getDetails());
              s_logger.warn(details);
            }
          }
 catch (          Exception e1) {
            s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e1);
          }
 finally {
            if (lock) {
              _volsDao.releaseFromLockTable(volumeId);
            }
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e2);
      }
    }
  }
 catch (  Exception e3) {
    s_logger.warn(""String_Node_Str"",e3);
  }
}","@Override @DB public void cleanupSecondaryStorage(boolean recurring){
  try {
    List<HostVO> secondaryStorageHosts=_ssvmMgr.listSecondaryStorageHostsInAllZones();
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<VMTemplateHostVO> destroyedTemplateHostVOs=_vmTemplateHostDao.listDestroyed(hostId);
        s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVOs.size() + ""String_Node_Str""+ secondaryStorageHost.getName());
        for (        VMTemplateHostVO destroyedTemplateHostVO : destroyedTemplateHostVOs) {
          if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateHostVO)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
            }
            continue;
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
          }
          String installPath=destroyedTemplateHostVO.getInstallPath();
          if (installPath != null) {
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,new DeleteTemplateCommand(secondaryStorageHost.getStorageUrl(),destroyedTemplateHostVO.getInstallPath()));
            if (answer == null || !answer.getResult()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO + ""String_Node_Str""+ ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
            }
 else {
              _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO.getInstallPath());
            }
          }
 else {
            _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e);
      }
    }
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<Long> vIDs=findAllVolumeIdInSnapshotTable(hostId);
        if (vIDs == null) {
          continue;
        }
        for (        Long volumeId : vIDs) {
          boolean lock=false;
          try {
            VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
            if (volume.getRemoved() == null) {
              volume=_volsDao.acquireInLockTable(volumeId,10);
              if (volume == null) {
                continue;
              }
              lock=true;
            }
            List<String> snapshots=findAllSnapshotForVolume(volumeId);
            if (snapshots == null) {
              continue;
            }
            CleanupSnapshotBackupCommand cmd=new CleanupSnapshotBackupCommand(secondaryStorageHost.getStorageUrl(),secondaryStorageHost.getDataCenterId(),volume.getAccountId(),volumeId,snapshots);
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,cmd);
            if ((answer == null) || !answer.getResult()) {
              String details=""String_Node_Str"" + volumeId + ""String_Node_Str""+ (answer == null ? ""String_Node_Str"" : answer.getDetails());
              s_logger.warn(details);
            }
          }
 catch (          Exception e1) {
            s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e1);
          }
 finally {
            if (lock) {
              _volsDao.releaseFromLockTable(volumeId);
            }
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e2);
      }
    }
  }
 catch (  Exception e3) {
    s_logger.warn(""String_Node_Str"",e3);
  }
}",0.989956568946797
106576,"@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}","@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}",0.9970523212969786
106577,"private boolean restartNetwork(long networkId,Account callerAccount,User callerUser,boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  NetworkVO network=_networksDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  if (cleanup) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    if (!shutdownNetworkElementsAndResources(context,true,network)) {
      s_logger.debug(""String_Node_Str"" + network.getState());
      setRestartRequired(network,true);
      return false;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + networkId);
  }
  DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
  NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  try {
    implementNetworkElementsAndResources(dest,context,network,offering);
    setRestartRequired(network,true);
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
    return false;
  }
  setRestartRequired(network,false);
  return true;
}","private boolean restartNetwork(long networkId,Account callerAccount,User callerUser,boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  NetworkVO network=_networksDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  if (cleanup) {
    if (network.getGuestType() != GuestType.Isolated) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    if (!shutdownNetworkElementsAndResources(context,true,network)) {
      s_logger.debug(""String_Node_Str"" + network.getState());
      setRestartRequired(network,true);
      return false;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + networkId);
  }
  DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
  NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  try {
    implementNetworkElementsAndResources(dest,context,network,offering);
    setRestartRequired(network,true);
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
    return false;
  }
  setRestartRequired(network,false);
  return true;
}",0.956115107913669
106578,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskDef> disks=new ArrayList<DiskDef>();
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
      disks.add(devId,disk);
      continue;
    }
    vm.getDevices().addDevice(disk);
  }
  for (  DiskDef disk : disks) {
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}",0.9608257095941825
106579,"@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,bindDN);
    env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}","@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,bindDN);
    env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}",0.9498654104979812
106580,"public void uploadVmdkFile(String httpMethod,String urlString,String localFileName,long totalBytesUpdated,ActionDelegate progressUpdater) throws Exception {
  HttpURLConnection conn=getRawHTTPConnection(urlString);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setChunkedStreamingMode(_CHUNKSIZE);
  conn.setRequestMethod(httpMethod);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",Long.toString(new File(localFileName).length()));
  conn.connect();
  BufferedOutputStream bos=null;
  BufferedInputStream is=null;
  try {
    bos=new BufferedOutputStream(conn.getOutputStream());
    is=new BufferedInputStream(new FileInputStream(localFileName));
    int bytesAvailable=is.available();
    int bufferSize=Math.min(bytesAvailable,_CHUNKSIZE);
    byte[] buffer=new byte[bufferSize];
    while (true) {
      int bytesRead=is.read(buffer,0,bufferSize);
      if (bytesRead == -1) {
        break;
      }
      bos.write(buffer,0,bufferSize);
      totalBytesUpdated+=bytesRead;
      bos.flush();
      if (progressUpdater != null)       progressUpdater.action(new Long(totalBytesUpdated));
    }
    bos.flush();
  }
  finally {
    if (is != null)     is.close();
    if (bos != null)     bos.close();
    conn.disconnect();
  }
}","public void uploadVmdkFile(String httpMethod,String urlString,String localFileName,long totalBytesUpdated,ActionDelegate progressUpdater) throws Exception {
  HttpURLConnection conn=getRawHTTPConnection(urlString);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setChunkedStreamingMode(_CHUNKSIZE);
  conn.setRequestMethod(httpMethod);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",Long.toString(new File(localFileName).length()));
  conn.connect();
  BufferedOutputStream bos=null;
  BufferedInputStream is=null;
  try {
    bos=new BufferedOutputStream(conn.getOutputStream());
    is=new BufferedInputStream(new FileInputStream(localFileName));
    int bufferSize=_CHUNKSIZE;
    byte[] buffer=new byte[bufferSize];
    while (true) {
      int bytesRead=is.read(buffer,0,bufferSize);
      if (bytesRead == -1) {
        break;
      }
      bos.write(buffer,0,bytesRead);
      totalBytesUpdated+=bytesRead;
      bos.flush();
      if (progressUpdater != null)       progressUpdater.action(new Long(totalBytesUpdated));
    }
    bos.flush();
  }
  finally {
    if (is != null)     is.close();
    if (bos != null)     bos.close();
    conn.disconnect();
  }
}",0.9637924598730868
106581,"protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if ((cmd instanceof ModifySshKeysCommand)) {
            s_logger.debug(""String_Node_Str"");
          }
 else {
            if (!requestLogged) {
              s_logger.debug(""String_Node_Str"" + request.toString());
              requestLogged=true;
            }
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof UpgradeCommand) {
          final UpgradeCommand upgrade=(UpgradeCommand)cmd;
          answer=upgradeAgent(upgrade.getUpgradeUrl(),upgrade);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(response != null ? response.toString() : ""String_Node_Str"");
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}","protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if ((cmd instanceof ModifySshKeysCommand)) {
            s_logger.debug(""String_Node_Str"");
          }
 else {
            if (!requestLogged) {
              s_logger.debug(""String_Node_Str"" + request.toString());
              requestLogged=true;
            }
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof UpgradeCommand) {
          final UpgradeCommand upgrade=(UpgradeCommand)cmd;
          answer=upgradeAgent(upgrade.getUpgradeUrl(),upgrade);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(response != null ? response.toString() : ""String_Node_Str"");
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}",0.9666666666666668
106582,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password,List<String> hostTags) throws DiscoveryException {
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.KVM) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      throw new DiscoveredWithErrorException(""String_Node_Str"");
    }
    if (!SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    List<PhysicalNetworkSetupInfo> networks=_networkMgr.getPhysicalNetworkInfo(dcId,HypervisorType.KVM);
    if (networks.size() < 1) {
      _kvmPublicNic=""String_Node_Str"";
      _kvmPrivateNic=""String_Node_Str"";
      _kvmGuestNic=""String_Node_Str"";
      s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str"");
    }
 else {
      PhysicalNetworkSetupInfo network=networks.get(0);
      _kvmPublicNic=network.getPublicNetworkName();
      if (_kvmPublicNic == null) {
        _kvmPublicNic=""String_Node_Str"";
      }
      _kvmPrivateNic=network.getPrivateNetworkName();
      if (_kvmPrivateNic == null) {
        _kvmPrivateNic=_kvmPublicNic;
      }
      _kvmGuestNic=network.getGuestNetworkName();
      if (_kvmGuestNic == null) {
        _kvmGuestNic=_kvmPrivateNic;
      }
    }
    String parameters=""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"";
    if (_kvmPublicNic != null) {
      parameters+=""String_Node_Str"" + _kvmPublicNic;
    }
    if (_kvmPrivateNic != null) {
      parameters+=""String_Node_Str"" + _kvmPrivateNic;
    }
    if (_kvmGuestNic != null) {
      parameters+=""String_Node_Str"" + _kvmGuestNic;
    }
    SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"" + parameters,3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid);
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    resources.put(kvmResource,details);
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null)     return null;
    details.put(""String_Node_Str"",guidWithTail);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password,List<String> hostTags) throws DiscoveryException {
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.KVM) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      throw new DiscoveredWithErrorException(""String_Node_Str"");
    }
    if (!SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    List<PhysicalNetworkSetupInfo> networks=_networkMgr.getPhysicalNetworkInfo(dcId,HypervisorType.KVM);
    if (networks.size() < 1) {
      _kvmPublicNic=""String_Node_Str"";
      _kvmPrivateNic=""String_Node_Str"";
      _kvmGuestNic=""String_Node_Str"";
      s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str"");
    }
 else {
      PhysicalNetworkSetupInfo network=networks.get(0);
      _kvmPublicNic=network.getPublicNetworkName();
      if (_kvmPublicNic == null) {
        _kvmPublicNic=""String_Node_Str"";
      }
      _kvmPrivateNic=network.getPrivateNetworkName();
      if (_kvmPrivateNic == null) {
        _kvmPrivateNic=_kvmPublicNic;
      }
      _kvmGuestNic=network.getGuestNetworkName();
      if (_kvmGuestNic == null) {
        _kvmGuestNic=_kvmPrivateNic;
      }
    }
    String parameters=""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"";
    if (_kvmPublicNic != null) {
      parameters+=""String_Node_Str"" + _kvmPublicNic;
    }
    if (_kvmPrivateNic != null) {
      parameters+=""String_Node_Str"" + _kvmPrivateNic;
    }
    if (_kvmGuestNic != null) {
      parameters+=""String_Node_Str"" + _kvmGuestNic;
    }
    SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"" + parameters,3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid);
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    resources.put(kvmResource,details);
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null)     return null;
    details.put(""String_Node_Str"",guidWithTail);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    _hostDao.loadDetails(connectedHost);
    Map<String,String> hostDetails=connectedHost.getDetails();
    hostDetails.put(""String_Node_Str"",password);
    hostDetails.put(""String_Node_Str"",username);
    _hostDao.saveDetails(connectedHost);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}",0.971562317144529
106583,"private boolean doMaintain(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  MaintainAnswer answer=(MaintainAnswer)_agentMgr.easySend(hostId,new MaintainCommand());
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return false;
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminAskMaintenace,_nodeId);
  }
 catch (  NoTransitionException e) {
    String err=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ ResourceState.Maintenance;
    s_logger.debug(err,e);
    throw new CloudRuntimeException(err + e.getMessage());
  }
  _agentMgr.pullAgentToMaintenance(hostId);
  if (host.getType() == Host.Type.Routing) {
    final List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
    if (vms.size() == 0) {
      return true;
    }
    List<HostVO> hosts=listAllUpAndEnabledHosts(Host.Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
    for (    final VMInstanceVO vm : vms) {
      if (hosts == null || hosts.size() <= 1 || !answer.getMigrate()) {
        _haMgr.scheduleStop(vm,hostId,WorkType.ForceStop);
      }
 else {
        _haMgr.scheduleMigration(vm);
      }
    }
  }
  return true;
}","private boolean doMaintain(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  MaintainAnswer answer=(MaintainAnswer)_agentMgr.easySend(hostId,new MaintainCommand());
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminAskMaintenace,_nodeId);
  }
 catch (  NoTransitionException e) {
    String err=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ ResourceState.Maintenance;
    s_logger.debug(err,e);
    throw new CloudRuntimeException(err + e.getMessage());
  }
  _agentMgr.pullAgentToMaintenance(hostId);
  if (host.getType() == Host.Type.Routing) {
    final List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
    if (vms.size() == 0) {
      return true;
    }
    List<HostVO> hosts=listAllUpAndEnabledHosts(Host.Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
    for (    final VMInstanceVO vm : vms) {
      if (hosts == null || hosts.size() <= 1 || !answer.getMigrate()) {
        _haMgr.scheduleStop(vm,hostId,WorkType.ForceStop);
      }
 else {
        _haMgr.scheduleMigration(vm);
      }
    }
  }
  return true;
}",0.992462311557789
106584,"private boolean doCancelMaintenance(long hostId){
  HostVO host;
  host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return true;
  }
  if (host.getResourceState() != ResourceState.PrepareForMaintenance && host.getResourceState() != ResourceState.Maintenance && host.getResourceState() != ResourceState.ErrorInMaintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getResourceState() + ""String_Node_Str""+ hostId);
  }
  _haMgr.cancelScheduledMigrations(host);
  List<VMInstanceVO> vms=_haMgr.findTakenMigrationWork();
  for (  VMInstanceVO vm : vms) {
    if (vm.getHostId() != null && vm.getHostId() == hostId) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminCancelMaintenance,_nodeId);
    _agentMgr.pullAgentOutMaintenance(hostId);
    return true;
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    return false;
  }
}","private boolean doCancelMaintenance(long hostId){
  HostVO host;
  host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return true;
  }
  if (host.getResourceState() != ResourceState.PrepareForMaintenance && host.getResourceState() != ResourceState.Maintenance && host.getResourceState() != ResourceState.ErrorInMaintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getResourceState() + ""String_Node_Str""+ hostId);
  }
  _haMgr.cancelScheduledMigrations(host);
  List<VMInstanceVO> vms=_haMgr.findTakenMigrationWork();
  for (  VMInstanceVO vm : vms) {
    if (vm.getHostId() != null && vm.getHostId() == hostId) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminCancelMaintenance,_nodeId);
    _agentMgr.pullAgentOutMaintenance(hostId);
    if (host.getHypervisorType() == HypervisorType.KVM) {
      _hostDao.loadDetails(host);
      String password=host.getDetail(""String_Node_Str"");
      String username=host.getDetail(""String_Node_Str"");
      if (password == null || username == null) {
        s_logger.debug(""String_Node_Str"");
        return false;
      }
      com.trilead.ssh2.Connection connection=SSHCmdHelper.acquireAuthorizedConnection(host.getPrivateIpAddress(),22,username,password);
      if (connection == null) {
        s_logger.debug(""String_Node_Str"" + host.getPrivateIpAddress());
        return false;
      }
      try {
        SSHCmdHelper.sshExecuteCmdOneShot(connection,""String_Node_Str"");
      }
 catch (      sshException e) {
        return false;
      }
    }
    return true;
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    return false;
  }
}",0.7199184228416043
106585,"@Override public boolean enableStaticNat(long ipId,long vmId) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.areServicesSupportedInNetwork(network.getId(),Service.Firewall)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    }
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  if (ip != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str""+ ip.getId());
  }
  _networkMgr.checkIpForService(ip,Service.StaticNat);
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
    s_logger.trace(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    if (applyStaticNatForIp(ipId,false,caller,false)) {
      return true;
    }
 else {
      ipAddress.setOneToOneNat(false);
      ipAddress.setAssociatedWithVmId(null);
      _ipAddressDao.update(ipAddress.getId(),ipAddress);
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      return false;
    }
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipAddress + ""String_Node_Str"");
    return false;
  }
}","@Override public boolean enableStaticNat(long ipId,long vmId) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.areServicesSupportedInNetwork(network.getId(),Service.Firewall)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    }
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  if (ip != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str""+ ip.getId());
  }
  _networkMgr.checkIpForService(ipAddress,Service.StaticNat);
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
    s_logger.trace(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    if (applyStaticNatForIp(ipId,false,caller,false)) {
      return true;
    }
 else {
      ipAddress.setOneToOneNat(false);
      ipAddress.setAssociatedWithVmId(null);
      _ipAddressDao.update(ipAddress.getId(),ipAddress);
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      return false;
    }
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipAddress + ""String_Node_Str"");
    return false;
  }
}",0.9988393301276736
106586,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      if (aclType != ACLType.Domain) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (startIP != null) {
    if (!NetUtils.isValidIp(startIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (endIP == null) {
      endIP=startIP;
    }
 else     if (!NetUtils.isValidIp(endIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (startIP != null && endIP != null) {
    if (!(gateway != null && netmask != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    if (!NetUtils.isValidIp(gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!NetUtils.isValidNetmask(netmask)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split(""String_Node_Str"");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
    }
  }
  if (cidr != null && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkVirtualNetworkCidrOverlap(zoneId,cidr);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long sharedDomainId=null;
  if (isDomainSpecific) {
    if (domainId != null) {
      sharedDomainId=domainId;
    }
 else {
      sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
      subdomainAccess=true;
    }
  }
  if (aclType == ACLType.Domain) {
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  Network network=createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,false,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess);
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((network.getGuestType() == Network.GuestType.Shared) || (network.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))));
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && createVlan) {
    _configMgr.createVlanAndPublicIpRange(userId,pNtwk.getDataCenterId(),null,startIP,endIP,gateway,netmask,false,vlanId,null,network.getId(),physicalNetworkId);
  }
  txn.commit();
  return network;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      if (aclType != ACLType.Domain) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (startIP != null) {
    if (!NetUtils.isValidIp(startIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (endIP == null) {
      endIP=startIP;
    }
 else     if (!NetUtils.isValidIp(endIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (startIP != null && endIP != null) {
    if (!(gateway != null && netmask != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    if (!NetUtils.isValidIp(gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!NetUtils.isValidNetmask(netmask)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split(""String_Node_Str"");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
    }
  }
  if (cidr != null && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null) {
    checkVirtualNetworkCidrOverlap(zoneId,cidr);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long sharedDomainId=null;
  if (isDomainSpecific) {
    if (domainId != null) {
      sharedDomainId=domainId;
    }
 else {
      sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
      subdomainAccess=true;
    }
  }
  if (aclType == ACLType.Domain) {
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  Network network=createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,false,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess);
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((network.getGuestType() == Network.GuestType.Shared) || (network.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))));
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && createVlan) {
    _configMgr.createVlanAndPublicIpRange(userId,pNtwk.getDataCenterId(),null,startIP,endIP,gateway,netmask,false,vlanId,null,network.getId(),physicalNetworkId);
  }
  txn.commit();
  return network;
}",0.998056904927134
106587,"@Override public void checkVirtualNetworkCidrOverlap(Long zoneId,String cidr){
  if (zoneId == null) {
    return;
  }
  List<NetworkVO> networks=_networksDao.listByZone((long)zoneId);
  Map<Long,String> networkToCidr=new HashMap<Long,String>();
  for (  NetworkVO network : networks) {
    if (network.getGuestType() != GuestType.Isolated) {
      continue;
    }
    networkToCidr.put(network.getId(),network.getCidr());
  }
  if (networkToCidr == null || networkToCidr.isEmpty()) {
    return;
  }
  String currCidrAddress=getCidrAddress(cidr);
  int currCidrSize=getCidrSize(cidr);
  for (  long networkId : networkToCidr.keySet()) {
    String ntwkCidr=networkToCidr.get(networkId);
    String ntwkCidrAddress=getCidrAddress(ntwkCidr);
    int ntwkCidrSize=getCidrSize(ntwkCidr);
    long cidrSizeToUse=currCidrSize < ntwkCidrSize ? currCidrSize : ntwkCidrSize;
    String ntwkCidrSubnet=NetUtils.getCidrSubNet(getCidrAddress(ntwkCidr),cidrSizeToUse);
    String cidrSubnet=NetUtils.getCidrSubNet(currCidrAddress,cidrSizeToUse);
    if (cidrSubnet.equals(ntwkCidrSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
  }
}","@Override public void checkVirtualNetworkCidrOverlap(Long zoneId,String cidr){
  if (zoneId == null) {
    return;
  }
  if (cidr == null) {
    return;
  }
  List<NetworkVO> networks=_networksDao.listByZone((long)zoneId);
  Map<Long,String> networkToCidr=new HashMap<Long,String>();
  for (  NetworkVO network : networks) {
    if (network.getGuestType() != GuestType.Isolated) {
      continue;
    }
    networkToCidr.put(network.getId(),network.getCidr());
  }
  if (networkToCidr == null || networkToCidr.isEmpty()) {
    return;
  }
  String currCidrAddress=getCidrAddress(cidr);
  int currCidrSize=getCidrSize(cidr);
  for (  long networkId : networkToCidr.keySet()) {
    String ntwkCidr=networkToCidr.get(networkId);
    String ntwkCidrAddress=getCidrAddress(ntwkCidr);
    int ntwkCidrSize=getCidrSize(ntwkCidr);
    long cidrSizeToUse=currCidrSize < ntwkCidrSize ? currCidrSize : ntwkCidrSize;
    String ntwkCidrSubnet=NetUtils.getCidrSubNet(getCidrAddress(ntwkCidr),cidrSizeToUse);
    String cidrSubnet=NetUtils.getCidrSubNet(currCidrAddress,cidrSizeToUse);
    if (cidrSubnet.equals(ntwkCidrSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
  }
}",0.984271523178808
106588,"public Integer getPageSize(){
  if (pageSize != null && MAX_PAGESIZE != null && pageSize.longValue() > MAX_PAGESIZE.longValue()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + MAX_PAGESIZE.longValue());
  }
  if (pageSize != null && pageSize.longValue() == -1 && page != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return pageSize;
}","public Integer getPageSize(){
  if (pageSize != null && MAX_PAGESIZE != null && pageSize.longValue() > MAX_PAGESIZE.longValue()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + MAX_PAGESIZE.longValue());
  }
  if (pageSize != null && pageSize.longValue() == PAGESIZE_UNLIMITED && page != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return pageSize;
}",0.9747474747474748
106589,"static void configure(){
  if (_configService.getDefaultPageSize().longValue() != -1) {
    MAX_PAGESIZE=_configService.getDefaultPageSize();
  }
}","static void configure(){
  if (_configService.getDefaultPageSize().longValue() != PAGESIZE_UNLIMITED) {
    MAX_PAGESIZE=_configService.getDefaultPageSize();
  }
}",0.935483870967742
106590,"public Long getPageSizeVal(){
  Long defaultPageSize=MAX_PAGESIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null && pageSizeInt.intValue() != -1) {
    defaultPageSize=pageSizeInt.longValue();
  }
  return defaultPageSize;
}","public Long getPageSizeVal(){
  Long defaultPageSize=MAX_PAGESIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    if (pageSizeInt.longValue() == PAGESIZE_UNLIMITED) {
      defaultPageSize=null;
    }
 else {
      defaultPageSize=pageSizeInt.longValue();
    }
  }
  return defaultPageSize;
}",0.822262118491921
106591,"public static void setupParameters(BaseCmd cmd,Map<String,String> params){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (unpackedParams.get(ApiConstants.PAGE_SIZE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if ((unpackedParams.get(ApiConstants.PAGE_SIZE) == null) && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
  }
}","public static void setupParameters(BaseCmd cmd,Map<String,String> params){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
  }
}",0.9464557347125038
106592,"@Override public String toString(){
  StringBuilder storageVolBuilder=new StringBuilder();
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volName + ""String_Node_Str"");
  if (_volSize != null) {
    storageVolBuilder.append(""String_Node_Str"" + _volSize + ""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volFormat + ""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  if (_backingPath != null) {
    storageVolBuilder.append(""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingPath + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingFormat + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  return storageVolBuilder.toString();
}","@Override public String toString(){
  StringBuilder storageVolBuilder=new StringBuilder();
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volName + ""String_Node_Str"");
  if (_volSize != null) {
    storageVolBuilder.append(""String_Node_Str"" + _volSize + ""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volFormat + ""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  if (_backingPath != null) {
    storageVolBuilder.append(""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingPath + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingFormat + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  return storageVolBuilder.toString();
}",0.9265242313705054
106593,"@Override public String getProviderForServiceInNetwork(long networkId,Service service){
  SearchCriteria<NetworkServiceMapVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",networkId);
  sc.setParameters(""String_Node_Str"",service.getName());
  NetworkServiceMapVO ntwkSvc=findOneBy(sc);
  if (ntwkSvc == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service + ""String_Node_Str""+ networkId);
  }
  return ntwkSvc.getProvider();
}","@Override public String getProviderForServiceInNetwork(long networkId,Service service){
  SearchCriteria<NetworkServiceMapVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",networkId);
  sc.setParameters(""String_Node_Str"",service.getName());
  NetworkServiceMapVO ntwkSvc=findOneBy(sc);
  if (ntwkSvc == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  return ntwkSvc.getProvider();
}",0.9894957983193278
106594,"String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  long SWIFT_MAX_SIZE=5L * 1024L * 1024L* 1024L;
  command.add(""String_Node_Str"");
  File file=new File(lDir + ""String_Node_Str"" + lFilename);
  long size=file.length();
  if (size <= SWIFT_MAX_SIZE) {
    command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  }
 else {
    command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}","String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  long SWIFT_MAX_SIZE=5L * 1024L * 1024L* 1024L;
  command.add(""String_Node_Str"");
  List<String> files=new ArrayList<String>();
  if (lFilename.equals(""String_Node_Str"")) {
    File dir=new File(lDir);
    for (    String file : dir.list()) {
      if (file.startsWith(""String_Node_Str"")) {
        continue;
      }
      files.add(file);
    }
  }
 else {
    files.add(lFilename);
  }
  for (  String file : files) {
    long size=file.length();
    if (size <= SWIFT_MAX_SIZE) {
      command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
    }
 else {
      command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
    }
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}",0.8940036341611145
106595,"@Override public ExtractResponse createExtractResponse(Long uploadId,Long id,Long zoneId,Long accountId,String mode){
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setObjectName(""String_Node_Str"");
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(accountId);
  response.setUrl(uploadInfo.getUploadUrl());
  return response;
}","@Override public ExtractResponse createExtractResponse(Long uploadId,Long id,Long zoneId,Long accountId,String mode){
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setObjectName(""String_Node_Str"");
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  if (zoneId != null) {
    response.setZoneId(zoneId);
    response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  }
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(accountId);
  response.setUrl(uploadInfo.getUploadUrl());
  return response;
}",0.976911976911977
106596,"private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null && _swiftMgr.isSwiftEnabled()) {
    SwiftTO swift=_swiftMgr.getSwiftTO(templateId);
    if (swift != null && sservers != null) {
      for (      HostVO secondaryStorageHost : sservers) {
        downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secondaryStorageHost.getName(),zoneId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
        try {
          Answer answer=_agentMgr.sendToSSVM(zoneId,cmd);
          if (answer == null || !answer.getResult()) {
            String errMsg=""String_Node_Str"" + (answer == null ? ""String_Node_Str"" : answer.getDetails());
            s_logger.warn(errMsg);
            throw new CloudRuntimeException(errMsg);
          }
          tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
          if (tmpltHostRef != null) {
            if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
              tmpltHostRef=null;
            }
 else {
              break;
            }
          }
        }
 catch (        Exception e) {
          String errMsg=""String_Node_Str"" + e.toString();
          s_logger.warn(errMsg);
          throw new CloudRuntimeException(errMsg);
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}","private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId == null) {
    zoneId=_swiftMgr.chooseZoneForTmpltExtract(templateId);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null && _swiftMgr.isSwiftEnabled()) {
    SwiftTO swift=_swiftMgr.getSwiftTO(templateId);
    if (swift != null && sservers != null) {
      for (      HostVO secondaryStorageHost : sservers) {
        downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secondaryStorageHost.getName(),zoneId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
        try {
          Answer answer=_agentMgr.sendToSSVM(zoneId,cmd);
          if (answer == null || !answer.getResult()) {
            String errMsg=""String_Node_Str"" + (answer == null ? ""String_Node_Str"" : answer.getDetails());
            s_logger.warn(errMsg);
            throw new CloudRuntimeException(errMsg);
          }
          tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
          if (tmpltHostRef != null) {
            if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
              tmpltHostRef=null;
            }
 else {
              break;
            }
          }
        }
 catch (        Exception e) {
          String errMsg=""String_Node_Str"" + e.toString();
          s_logger.warn(errMsg);
          throw new CloudRuntimeException(errMsg);
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}",0.9922206506364922
106597,"@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}",0.9786347055758208
106598,"@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}",0.9830368225072404
106599,"@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}",0.9786347055758208
106600,"@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}",0.9830368225072404
106601,"@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,boolean skipProjectTemplates){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if ((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) {
      dataCenterJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin;
    String whereClause=""String_Node_Str"";
    boolean joinedWithAccounts=false;
    if (skipProjectTemplates || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) {
      whereClause+=""String_Node_Str"";
      joinedWithAccounts=true;
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (skipProjectTemplates) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (skipProjectTemplates) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=""String_Node_Str"" + relatedHypers + ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
      }
 else {
        if (!joinedWithAccounts) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.all && caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=attr;
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      return templateZonePairList;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false);
      for (int i=0; i < publicIsos.size(); i++) {
        if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (name != null && publicIsos.get(i).getName().contains(name)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (keyword == null && name == null) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}","@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,boolean skipProjectTemplates){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if ((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) {
      dataCenterJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin;
    String whereClause=""String_Node_Str"";
    boolean joinedWithAccounts=false;
    if (skipProjectTemplates || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) {
      whereClause+=""String_Node_Str"";
      joinedWithAccounts=true;
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (skipProjectTemplates) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (skipProjectTemplates) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=""String_Node_Str"" + relatedHypers + ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
      }
 else {
        if (!joinedWithAccounts) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.all && caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=attr;
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && !isIso) {
      return templateZonePairList;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false);
      for (int i=0; i < publicIsos.size(); i++) {
        if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (name != null && publicIsos.get(i).getName().contains(name)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (keyword == null && name == null) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}",0.9993761696818464
106602,"@Override public long findCorrectResourceLimitForAccount(Account account,ResourceType type){
  long max=-1;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(account.getId(),ResourceOwnerType.Account,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long value=null;
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      value=projectResourceLimitMap.get(type);
    }
 else {
      value=accountResourceLimitMap.get(type);
    }
    if (value != null) {
      return value;
    }
  }
  return max;
}","@Override public long findCorrectResourceLimitForAccount(Account account,ResourceType type){
  long max=Resource.RESOURCE_UNLIMITED;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(account.getId(),ResourceOwnerType.Account,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long value=null;
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      value=projectResourceLimitMap.get(type);
    }
 else {
      value=accountResourceLimitMap.get(type);
    }
    if (value != null) {
      return value;
    }
  }
  return max;
}",0.974539069359087
106603,"@Override public long findCorrectResourceLimitForDomain(Domain domain,ResourceType type){
  long max=-1;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(domain.getId(),ResourceOwnerType.Domain,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long domainId=domain.getParent();
    while ((domainId != null) && (limit == null)) {
      limit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      DomainVO tmpDomain=_domainDao.findById(domainId);
      domainId=tmpDomain.getParent();
    }
    if (limit != null) {
      max=limit.getMax().longValue();
    }
  }
  return max;
}","@Override public long findCorrectResourceLimitForDomain(Domain domain,ResourceType type){
  long max=Resource.RESOURCE_UNLIMITED;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(domain.getId(),ResourceOwnerType.Domain,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long domainId=domain.getParent();
    while ((domainId != null) && (limit == null)) {
      limit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      DomainVO tmpDomain=_domainDao.findById(domainId);
      domainId=tmpDomain.getParent();
    }
    if (limit != null) {
      max=limit.getMax().longValue();
    }
  }
  return max;
}",0.9783096484667164
106604,"@Override public ResourceLimitVO updateResourceLimit(Long accountId,Long domainId,Integer typeId,Long max){
  Account caller=UserContext.current().getCaller();
  if (max == null) {
    max=new Long(-1);
  }
 else   if (max < -1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceType resourceType=null;
  if (typeId != null) {
    for (    ResourceType type : Resource.ResourceType.values()) {
      if (type.getOrdinal() == typeId.intValue()) {
        resourceType=type;
      }
    }
    if (resourceType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  ResourceOwnerType ownerType=null;
  Long ownerId=null;
  if (accountId != null) {
    Account account=_entityMgr.findById(Account.class,accountId);
    if (account.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      _accountMgr.checkAccess(caller,AccessType.ModifyProject,account);
    }
 else {
      _accountMgr.checkAccess(caller,null,account);
    }
    ownerType=ResourceOwnerType.Account;
    ownerId=accountId;
  }
 else   if (domainId != null) {
    Domain domain=_entityMgr.findById(Domain.class,domainId);
    _accountMgr.checkAccess(caller,domain);
    if ((caller.getDomainId() == domainId.longValue()) && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimitForDomain(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ parentDomain.getId()+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ resourceType+ ""String_Node_Str""+ parentMaximum);
      }
    }
    ownerType=ResourceOwnerType.Domain;
    ownerId=domainId;
  }
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(ownerId,ownerType,resourceType);
  if (limit != null) {
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(resourceType,max,ownerId,ownerType));
  }
}","@Override public ResourceLimitVO updateResourceLimit(Long accountId,Long domainId,Integer typeId,Long max){
  Account caller=UserContext.current().getCaller();
  if (max == null) {
    max=new Long(Resource.RESOURCE_UNLIMITED);
  }
 else   if (max.longValue() < Resource.RESOURCE_UNLIMITED) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceType resourceType=null;
  if (typeId != null) {
    for (    ResourceType type : Resource.ResourceType.values()) {
      if (type.getOrdinal() == typeId.intValue()) {
        resourceType=type;
      }
    }
    if (resourceType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  ResourceOwnerType ownerType=null;
  Long ownerId=null;
  if (accountId != null) {
    Account account=_entityMgr.findById(Account.class,accountId);
    if (account.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      _accountMgr.checkAccess(caller,AccessType.ModifyProject,account);
    }
 else {
      _accountMgr.checkAccess(caller,null,account);
    }
    ownerType=ResourceOwnerType.Account;
    ownerId=accountId;
  }
 else   if (domainId != null) {
    Domain domain=_entityMgr.findById(Domain.class,domainId);
    _accountMgr.checkAccess(caller,domain);
    if ((caller.getDomainId() == domainId.longValue()) && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimitForDomain(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ parentDomain.getId()+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ resourceType+ ""String_Node_Str""+ parentMaximum);
      }
    }
    ownerType=ResourceOwnerType.Domain;
    ownerId=domainId;
  }
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(ownerId,ownerType,resourceType);
  if (limit != null) {
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(resourceType,max,ownerId,ownerType));
  }
}",0.5131086142322098
106605,"@Override @DB public void checkResourceLimit(Account account,ResourceType type,long... count) throws ResourceAllocationException {
  long numResources=((count.length == 0) ? 1 : count[0]);
  Project project=null;
  if (_accountMgr.isAdmin(account.getType())) {
    return;
  }
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    project=_projectDao.findByProjectAccountId(account.getId());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    Set<Long> rowIdsToLock=_resourceCountDao.listAllRowsToUpdate(account.getId(),ResourceOwnerType.Account,type);
    SearchCriteria<ResourceCountVO> sc=ResourceCountSearch.create();
    sc.setParameters(""String_Node_Str"",rowIdsToLock.toArray());
    _resourceCountDao.lockRows(sc,null,true);
    long accountLimit=findCorrectResourceLimitForAccount(account,type);
    long potentialCount=_resourceCountDao.getResourceCount(account.getId(),ResourceOwnerType.Account,type) + numResources;
    if (accountLimit != -1 && potentialCount > accountLimit) {
      String message=""String_Node_Str"" + type + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      if (project != null) {
        message=""String_Node_Str"" + type + ""String_Node_Str""+ project.getName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      }
      throw new ResourceAllocationException(message,type);
    }
    Long domainId=null;
    if (project != null) {
      domainId=project.getDomainId();
    }
 else {
      domainId=account.getDomainId();
    }
    while (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      ResourceLimitVO domainLimit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      if (domainLimit != null) {
        long domainCount=_resourceCountDao.getResourceCount(domainId,ResourceOwnerType.Domain,type);
        if ((domainCount + numResources) > domainLimit.getMax().longValue()) {
          throw new ResourceAllocationException(""String_Node_Str"" + type + ""String_Node_Str""+ domainId+ ""String_Node_Str"",type);
        }
      }
      domainId=domain.getParent();
    }
  }
  finally {
    txn.commit();
  }
}","@Override @DB public void checkResourceLimit(Account account,ResourceType type,long... count) throws ResourceAllocationException {
  long numResources=((count.length == 0) ? 1 : count[0]);
  Project project=null;
  if (_accountMgr.isAdmin(account.getType())) {
    return;
  }
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    project=_projectDao.findByProjectAccountId(account.getId());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    Set<Long> rowIdsToLock=_resourceCountDao.listAllRowsToUpdate(account.getId(),ResourceOwnerType.Account,type);
    SearchCriteria<ResourceCountVO> sc=ResourceCountSearch.create();
    sc.setParameters(""String_Node_Str"",rowIdsToLock.toArray());
    _resourceCountDao.lockRows(sc,null,true);
    long accountLimit=findCorrectResourceLimitForAccount(account,type);
    long potentialCount=_resourceCountDao.getResourceCount(account.getId(),ResourceOwnerType.Account,type) + numResources;
    if (accountLimit != Resource.RESOURCE_UNLIMITED && potentialCount > accountLimit) {
      String message=""String_Node_Str"" + type + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      if (project != null) {
        message=""String_Node_Str"" + type + ""String_Node_Str""+ project.getName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      }
      throw new ResourceAllocationException(message,type);
    }
    Long domainId=null;
    if (project != null) {
      domainId=project.getDomainId();
    }
 else {
      domainId=account.getDomainId();
    }
    while (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      ResourceLimitVO domainLimit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      if (domainLimit != null && domainLimit.getMax().longValue() != Resource.RESOURCE_UNLIMITED) {
        long domainCount=_resourceCountDao.getResourceCount(domainId,ResourceOwnerType.Domain,type);
        if ((domainCount + numResources) > domainLimit.getMax().longValue()) {
          throw new ResourceAllocationException(""String_Node_Str"" + type + ""String_Node_Str""+ domainId+ ""String_Node_Str"",type);
        }
      }
      domainId=domain.getParent();
    }
  }
  finally {
    txn.commit();
  }
}",0.9786856127886324
106606,"@Override public List<? extends ProjectAccount> listProjectAccounts(long projectId,String accountName,String role,Long startIndex,Long pageSizeVal){
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
  }
  if (!_accountMgr.isAdmin(caller.getType()) && _projectAccountDao.findByProjectIdAccountId(projectId,caller.getAccountId()) == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
  }
  Filter searchFilter=new Filter(ProjectAccountVO.class,""String_Node_Str"",false,startIndex,pageSizeVal);
  SearchBuilder<ProjectAccountVO> sb=_projectAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountRole(),Op.EQ);
  SearchBuilder<AccountVO> accountSearch;
  if (accountName != null) {
    accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getAccountName(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectAccountVO> sc=sb.create();
  if (role != null) {
    sc.setParameters(""String_Node_Str"",role);
  }
  if (accountName != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",accountName);
  }
  return _projectAccountDao.search(sc,searchFilter);
}","@Override public List<? extends ProjectAccount> listProjectAccounts(long projectId,String accountName,String role,Long startIndex,Long pageSizeVal){
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
  }
  if (!_accountMgr.isAdmin(caller.getType()) && _projectAccountDao.findByProjectIdAccountId(projectId,caller.getAccountId()) == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
  }
  Filter searchFilter=new Filter(ProjectAccountVO.class,""String_Node_Str"",false,startIndex,pageSizeVal);
  SearchBuilder<ProjectAccountVO> sb=_projectAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountRole(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),Op.EQ);
  SearchBuilder<AccountVO> accountSearch;
  if (accountName != null) {
    accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getAccountName(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectAccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",projectId);
  if (role != null) {
    sc.setParameters(""String_Node_Str"",role);
  }
  if (accountName != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",accountName);
  }
  return _projectAccountDao.search(sc,searchFilter);
}",0.9639259018524536
106607,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setDomain(networkDomain);
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  txn.commit();
  return zone;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      zone.setDomain(null);
    }
 else {
      zone.setDomain(networkDomain);
    }
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  txn.commit();
  return zone;
}",0.9681263858093128
106608,"@Override @ActionEvent(eventType=EventTypes.EVENT_DOMAIN_UPDATE,eventDescription=""String_Node_Str"") @DB public DomainVO updateDomain(UpdateDomainCmd cmd){
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  String networkDomain=cmd.getNetworkDomain();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null && domainName != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,domain);
  if (domainName != null) {
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
    List<DomainVO> domains=_domainDao.search(sc,null);
    if (!domains.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (domainName != null) {
    String updatedDomainPath=getUpdatedDomainPath(domain.getPath(),domainName);
    updateDomainChildren(domain,updatedDomainPath);
    domain.setName(domainName);
    domain.setPath(updatedDomainPath);
  }
  if (networkDomain != null) {
    domain.setNetworkDomain(networkDomain);
  }
  _domainDao.update(domainId,domain);
  txn.commit();
  return _domainDao.findById(domainId);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_DOMAIN_UPDATE,eventDescription=""String_Node_Str"") @DB public DomainVO updateDomain(UpdateDomainCmd cmd){
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  String networkDomain=cmd.getNetworkDomain();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null && domainName != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,domain);
  if (domainName != null) {
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
    List<DomainVO> domains=_domainDao.search(sc,null);
    boolean sameDomain=(domains.size() == 1 && domains.get(0).getId() == domainId);
    if (!domains.isEmpty() && !sameDomain) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (domainName != null) {
    String updatedDomainPath=getUpdatedDomainPath(domain.getPath(),domainName);
    updateDomainChildren(domain,updatedDomainPath);
    domain.setName(domainName);
    domain.setPath(updatedDomainPath);
  }
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      domain.setNetworkDomain(null);
    }
 else {
      domain.setNetworkDomain(networkDomain);
    }
  }
  _domainDao.update(domainId,domain);
  txn.commit();
  return _domainDao.findById(domainId);
}",0.9301419426662956
106609,"@Override public AccountVO updateAccount(UpdateAccountCmd cmd){
  Long accountId=cmd.getId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  Map<String,String> details=cmd.getDetails();
  boolean success=false;
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findEnabledAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    s_logger.error(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),_domainMgr.getDomain(account.getDomainId()));
  Account duplicateAcccount=_accountDao.findActiveAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  AccountVO acctForUpdate=_accountDao.findById(account.getId());
  acctForUpdate.setAccountName(newAccountName);
  if (networkDomain != null) {
    acctForUpdate.setNetworkDomain(networkDomain);
  }
  success=_accountDao.update(account.getId(),acctForUpdate);
  if (details != null) {
    _accountDetailsDao.update(account.getId(),details);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
}","@Override @DB public AccountVO updateAccount(UpdateAccountCmd cmd){
  Long accountId=cmd.getId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  Map<String,String> details=cmd.getDetails();
  boolean success=false;
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findEnabledAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    s_logger.error(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),_domainMgr.getDomain(account.getDomainId()));
  Account duplicateAcccount=_accountDao.findActiveAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  AccountVO acctForUpdate=_accountDao.findById(account.getId());
  acctForUpdate.setAccountName(newAccountName);
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      acctForUpdate.setNetworkDomain(null);
    }
 else {
      acctForUpdate.setNetworkDomain(networkDomain);
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  success=_accountDao.update(account.getId(),acctForUpdate);
  if (details != null && success) {
    _accountDetailsDao.update(account.getId(),details);
  }
  txn.commit();
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
}",0.9247935728632002
106610,"private VmDataCommand generateVmDataCommand(DomainRouterVO router,String vmPrivateIpAddress,String userData,String serviceOffering,String zoneName,String guestIpAddress,String vmName,String vmInstanceName,long vmId,String publicKey){
  VmDataCommand cmd=new VmDataCommand(vmPrivateIpAddress,vmName);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",userData);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(serviceOffering));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(zoneName));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  if (dcVo.getNetworkType() == NetworkType.Basic) {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  }
 else {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",vmInstanceName);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",String.valueOf(vmId));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",publicKey);
  String cloudIdentifier=_configDao.getValue(""String_Node_Str"");
  if (cloudIdentifier == null) {
    cloudIdentifier=""String_Node_Str"";
  }
 else {
    cloudIdentifier=""String_Node_Str"" + cloudIdentifier + ""String_Node_Str"";
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",cloudIdentifier);
  return cmd;
}","private VmDataCommand generateVmDataCommand(DomainRouterVO router,String vmPrivateIpAddress,String userData,String serviceOffering,String zoneName,String guestIpAddress,String vmName,String vmInstanceName,long vmId,String publicKey){
  VmDataCommand cmd=new VmDataCommand(vmPrivateIpAddress,vmName);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",userData);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(serviceOffering));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(zoneName));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  if (dcVo.getNetworkType() == NetworkType.Basic) {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  }
 else {
    if (router.getPublicIpAddress() == null) {
      cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    }
 else {
      cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
    }
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",vmInstanceName);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",String.valueOf(vmId));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",publicKey);
  String cloudIdentifier=_configDao.getValue(""String_Node_Str"");
  if (cloudIdentifier == null) {
    cloudIdentifier=""String_Node_Str"";
  }
 else {
    cloudIdentifier=""String_Node_Str"" + cloudIdentifier + ""String_Node_Str"";
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",cloudIdentifier);
  return cmd;
}",0.9087058823529413
106611,"String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  String result=command.execute();
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  return null;
}","String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}",0.7153652392947103
106612,"String swiftDelete(SwiftTO swift,String container,String rFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + swift.getUrl() + ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ rFilename);
  String result=command.execute();
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  return null;
}","String swiftDelete(SwiftTO swift,String container,String rFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + swift.getUrl() + ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ rFilename);
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}",0.7014531043593131
106613,"@Override public void handleTemplateSync(HostVO ssHost){
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long sserverId=ssHost.getId();
  long zoneId=ssHost.getDataCenterId();
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(zoneId);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          String msg=""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ tmplt.getId()+ ""String_Node_Str""+ tmpltHost.getId();
          tmpltHost.setErrorString(msg);
          s_logger.info(""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(zoneId);
    if (availHypers.isEmpty()) {
      availHypers.add(HypervisorType.KVM);
    }
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        continue;
      }
      if (!tmplt.isPublicTemplate() && !tmplt.isFeatured()) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
        if (tmpltHost == null) {
          continue;
        }
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    try {
      _agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    }
 catch (    AgentUnavailableException e) {
      String err=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(err);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
    s_logger.info(description);
  }
}","@Override public void handleTemplateSync(HostVO ssHost){
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long sserverId=ssHost.getId();
  long zoneId=ssHost.getDataCenterId();
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(zoneId);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          String msg=""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ tmplt.getId()+ ""String_Node_Str""+ tmpltHost.getId();
          tmpltHost.setErrorString(msg);
          s_logger.info(""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(zoneId);
    if (availHypers.isEmpty()) {
      availHypers.add(HypervisorType.KVM);
    }
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        continue;
      }
      if (!tmplt.isPublicTemplate() && !tmplt.isFeatured()) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
        if (tmpltHost == null) {
          continue;
        }
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        if (_swiftMgr.isSwiftEnabled()) {
          if (_swiftMgr.isTemplateInstalled(tmplt.getId())) {
            continue;
          }
        }
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    try {
      _agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    }
 catch (    AgentUnavailableException e) {
      String err=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(err);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
    s_logger.info(description);
  }
}",0.9878668634202328
106614,"protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Host lhost=Host.getByUuid(conn,_host.uuid);
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}","protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}",0.9777983348751156
106615,"protected HashMap<String,Pair<String,State>> deltaClusterSync(Connection conn){
  HashMap<String,Pair<String,State>> newStates;
  HashMap<String,Pair<String,State>> oldStates=null;
  final HashMap<String,Pair<String,State>> changes=new HashMap<String,Pair<String,State>>();
  newStates=getAllVms(conn);
  if (newStates == null) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
synchronized (s_vms) {
    oldStates=new HashMap<String,Pair<String,State>>(s_vms.size(_cluster));
    oldStates.putAll(s_vms.getClusterVmState(_cluster));
    for (    final Map.Entry<String,Pair<String,State>> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      final Pair<String,State> oldState=oldStates.remove(vm);
      if (host_uuid != null && oldState != null) {
        if (!host_uuid.equals(oldState.first()) && newState != State.Stopped && newState != State.Stopping) {
          changes.put(vm,new Pair<String,State>(host_uuid,newState));
          s_vms.put(_cluster,host_uuid,vm,newState);
          continue;
        }
      }
      if (newState == State.Stopped && oldState != null && oldState.second() != State.Stopping && oldState.second() != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
      }
      if (vm.startsWith(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"");
        continue;
      }
      if (oldState == null) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        s_logger.warn(""String_Node_Str"" + vm);
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
 else       if (oldState.second() == State.Starting) {
        if (newState == State.Running) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug(""String_Node_Str"" + vm);
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
      }
 else       if (oldState.second() == State.Stopping) {
        if (newState == State.Stopped) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() != newState) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
    for (    final Map.Entry<String,Pair<String,State>> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
      if (oldState == State.Stopping) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else       if (oldState == State.Stopped) {
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
      }
    }
  }
  return changes;
}","protected HashMap<String,Pair<String,State>> deltaClusterSync(Connection conn){
  HashMap<String,Pair<String,State>> newStates;
  HashMap<String,Pair<String,State>> oldStates=null;
  final HashMap<String,Pair<String,State>> changes=new HashMap<String,Pair<String,State>>();
  newStates=getAllVms(conn);
  if (newStates == null) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
synchronized (s_vms) {
    oldStates=new HashMap<String,Pair<String,State>>(s_vms.size(_cluster));
    oldStates.putAll(s_vms.getClusterVmState(_cluster));
    for (    final Map.Entry<String,Pair<String,State>> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      final Pair<String,State> oldState=oldStates.remove(vm);
      if (host_uuid != null && oldState != null) {
        if (!host_uuid.equals(oldState.first()) && newState != State.Stopped && newState != State.Stopping) {
          s_logger.warn(""String_Node_Str"" + vm);
          changes.put(vm,new Pair<String,State>(host_uuid,newState));
          s_vms.put(_cluster,host_uuid,vm,newState);
          continue;
        }
      }
      if (newState == State.Stopped && oldState != null && oldState.second() != State.Stopping && oldState.second() != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
      }
      if (vm.startsWith(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"");
        continue;
      }
      if (oldState == null) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        s_logger.warn(""String_Node_Str"" + vm);
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
 else       if (oldState.second() == State.Starting) {
        if (newState == State.Running) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug(""String_Node_Str"" + vm);
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
      }
 else       if (oldState.second() == State.Stopping) {
        if (newState == State.Stopped) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() != newState) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
    for (    final Map.Entry<String,Pair<String,State>> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
      if (oldState == State.Stopping) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else       if (oldState == State.Stopped) {
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
        State newState=State.Stopped;
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
  }
  return changes;
}",0.9742860834733168
106616,"public Commands fullHostSync(final long hostId,StartupRoutingCommand startup){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(startup);
  final List<? extends VMInstanceVO> vms=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  for (  final AgentVmInfo left : infos.values()) {
    boolean found=false;
    for (    VirtualMachineGuru<? extends VMInstanceVO> vmGuru : _vmGurus.values()) {
      VMInstanceVO vm=vmGuru.findByName(left.name);
      if (vm != null) {
        found=true;
        HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
        if (hvGuru.trackVmHostChange()) {
          Command command=compareState(hostId,vm,left,true,true);
          if (command != null) {
            commands.addCommand(command);
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + left.name + ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str""+ hostId);
          commands.addCommand(cleanup(left.name));
        }
        break;
      }
    }
    if (!found) {
      s_logger.warn(""String_Node_Str"" + left.name);
      commands.addCommand(cleanup(left.name));
    }
  }
  return commands;
}","public Commands fullHostSync(final long hostId,StartupRoutingCommand startup){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(startup);
  final List<? extends VMInstanceVO> vms=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  final List<? extends VMInstanceVO> vmsz=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vmsz.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vmsz) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  for (  final AgentVmInfo left : infos.values()) {
    boolean found=false;
    for (    VirtualMachineGuru<? extends VMInstanceVO> vmGuru : _vmGurus.values()) {
      VMInstanceVO vm=vmGuru.findByName(left.name);
      if (vm != null) {
        found=true;
        HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
        if (hvGuru.trackVmHostChange()) {
          Command command=compareState(hostId,vm,left,true,true);
          if (command != null) {
            commands.addCommand(command);
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + left.name + ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str""+ hostId);
          commands.addCommand(cleanup(left.name));
        }
        break;
      }
    }
    if (!found) {
      s_logger.warn(""String_Node_Str"" + left.name);
      commands.addCommand(cleanup(left.name));
    }
  }
  return commands;
}",0.8364233747946491
106617,"public Commands fullSync(final long clusterId,Map<String,Pair<String,State>> newStates){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(newStates);
  long hId=0;
  final List<VMInstanceVO> vms=_vmDao.listByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
  }
  for (  final AgentVmInfo left : infos.values()) {
    s_logger.warn(""String_Node_Str"" + left.name);
    commands.addCommand(cleanup(left.name));
  }
  return commands;
}","public void fullSync(final long clusterId,Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> infos=convertToInfos(newStates);
  List<VMInstanceVO> vms=_vmDao.listByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    if (vm.isRemoved() || vm.getState() == State.Destroyed || vm.getState() == State.Expunging)     continue;
    infos.remove(vm.getId());
  }
  vms=_vmDao.listStartingByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    if (vm.isRemoved() || vm.getState() == State.Destroyed || vm.getState() == State.Expunging)     continue;
    infos.remove(vm.getId());
  }
  for (  final AgentVmInfo left : infos.values()) {
    try {
      Host host=_resourceMgr.findHostByGuid(left.getHostUuid());
      if (host != null) {
        s_logger.warn(""String_Node_Str"" + left.name);
        Answer answer=_agentMgr.send(host.getId(),cleanup(left.name));
        if (!answer.getResult()) {
          s_logger.warn(""String_Node_Str"" + answer.getDetails());
        }
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.3831604636973764
106618,"public Commands deltaSync(Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> states=convertToInfos(newStates);
  Commands commands=new Commands(OnError.Continue);
  for (  Map.Entry<Long,AgentVmInfo> entry : states.entrySet()) {
    AgentVmInfo info=entry.getValue();
    VMInstanceVO vm=info.vm;
    Command command=null;
    if (vm != null) {
      String hostGuid=info.getHostUuid();
      Host host=_resourceMgr.findHostByGuid(hostGuid);
      long hId=host.getId();
      HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
      command=compareState(hId,vm,info,false,hvGuru.trackVmHostChange());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + info.name);
      }
      command=cleanup(info.name);
    }
    if (command != null) {
      commands.addCommand(command);
    }
  }
  return commands;
}","public void deltaSync(Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> states=convertToInfos(newStates);
  for (  Map.Entry<Long,AgentVmInfo> entry : states.entrySet()) {
    AgentVmInfo info=entry.getValue();
    VMInstanceVO vm=info.vm;
    Command command=null;
    if (vm != null) {
      Host host=_resourceMgr.findHostByGuid(info.getHostUuid());
      long hId=host.getId();
      HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
      command=compareState(hId,vm,info,false,hvGuru.trackVmHostChange());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + info.name);
      }
      command=cleanup(info.name);
    }
    if (command != null) {
      try {
        Host host=_resourceMgr.findHostByGuid(info.getHostUuid());
        if (host != null) {
          Answer answer=_agentMgr.send(host.getId(),cleanup(info.name));
          if (!answer.getResult()) {
            s_logger.warn(""String_Node_Str"" + answer.getDetails());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.getMessage());
      }
    }
  }
}",0.7135826771653543
106619,"@Override public boolean processAnswers(long agentId,long seq,Answer[] answers){
  for (  final Answer answer : answers) {
    if (answer instanceof ClusterSyncAnswer) {
      ClusterSyncAnswer hs=(ClusterSyncAnswer)answer;
      if (hs.isFull()) {
        deltaSync(hs.getNewStates());
        fullSync(hs.getClusterId(),hs.getAllStates());
      }
 else       if (hs.isDelta()) {
        deltaSync(hs.getNewStates());
      }
    }
 else     if (!answer.getResult()) {
      s_logger.warn(""String_Node_Str"" + answer.getDetails());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
    }
  }
  return true;
}","@Override public boolean processAnswers(long agentId,long seq,Answer[] answers){
  for (  final Answer answer : answers) {
    if (answer instanceof ClusterSyncAnswer) {
      ClusterSyncAnswer hs=(ClusterSyncAnswer)answer;
      if (!hs.isExceuted()) {
        if (hs.isFull()) {
          deltaSync(hs.getNewStates());
          fullSync(hs.getClusterId(),hs.getAllStates());
        }
 else         if (hs.isDelta()) {
          deltaSync(hs.getNewStates());
        }
        hs.setExecuted();
      }
    }
 else     if (!answer.getResult()) {
      s_logger.warn(""String_Node_Str"" + answer.getDetails());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
    }
  }
  return true;
}",0.93646408839779
106620,"@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}","@DB protected boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}",0.9979188345473464
106621,"private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  return sc;
}","private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType,boolean skipProjectNetworks){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  if (skipProjectNetworks) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  return sc;
}",0.9345579793340988
106622,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType())) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,domainId));
    }
 else     if (permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,path));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,permittedAccounts));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType())) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,domainId));
    }
 else     if (permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,path));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,permittedAccounts));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}",0.7466055668703326
106623,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  boolean skipProjectVolumes=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectVolumes=false;
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectVolumes) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (skipProjectVolumes) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}",0.9211941694598176
106624,"@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
    }
  }
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || _accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else     if ((caller != null) && ((caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN))) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
    if (domainId != null && accountName != null) {
      Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (userAccount != null) {
        permittedAccounts.add(userAccount.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Object name=cmd.getSnapshotName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object snapshotTypeStr=cmd.getSnapshotType();
  Object intervalTypeStr=cmd.getIntervalType();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinType.INNER);
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    if (isRecursive) {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    }
 else {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    }
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    SearchCriteria<?> joinSearch=sc.getJoin(""String_Node_Str"");
    if (isRecursive) {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}","@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
    }
  }
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || _accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else     if ((caller != null) && ((caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN))) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
    if (domainId != null && accountName != null) {
      Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (userAccount != null) {
        permittedAccounts.add(userAccount.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  boolean skipProjectSnapshots=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectSnapshots=false;
  }
  Object name=cmd.getSnapshotName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object snapshotTypeStr=cmd.getSnapshotType();
  Object intervalTypeStr=cmd.getIntervalType();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinType.INNER);
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    if (isRecursive) {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    }
 else {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    }
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinType.INNER);
  }
  if (skipProjectSnapshots) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  if (skipProjectSnapshots) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    SearchCriteria<?> joinSearch=sc.getJoin(""String_Node_Str"");
    if (isRecursive) {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}",0.9287128712871288
106625,"@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}","@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return false;
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}",0.9829012686155544
106626,"@Override public String getConsoleAccessUrlRoot(long vmId){
  VMInstanceVO vm=_vmMgr.findById(vmId);
  if (vm != null) {
    ConsoleProxyInfo proxy=getConsoleProxyForUserVm(vm.getDataCenterIdToDeployIn(),vmId);
    if (proxy != null) {
      return proxy.getProxyImageUrl();
    }
  }
  return null;
}","@Override public String getConsoleAccessUrlRoot(long vmId){
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm != null) {
    ConsoleProxyInfo proxy=getConsoleProxyForVm(vm.getDataCenterIdToDeployIn(),vmId);
    if (proxy != null) {
      return proxy.getProxyImageUrl();
    }
  }
  return null;
}",0.9702970297029704
106627,"@Override public boolean addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> profile,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException {
  Long zoneId=profile.getVirtualMachine().getDataCenterIdToDeployIn();
  Long podId=profile.getVirtualMachine().getPodIdToDeployIn();
  List<HostVO> hosts=_resourceMgr.listAllUpAndEnabledHosts(Type.ExternalDhcp,null,podId,zoneId);
  if (hosts.size() == 0) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  if (hosts.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  HostVO h=hosts.get(0);
  String dns=nic.getDns1();
  if (dns == null) {
    dns=nic.getDns2();
  }
  DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName(),dns,nic.getGateway());
  dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(profile.getVirtualMachine().getId()).getGateway());
  String errMsg=String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName());
  try {
    Answer ans=_agentMgr.send(h.getId(),dhcpCommand);
    if (ans.getResult()) {
      s_logger.debug(String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName()));
      return true;
    }
 else {
      s_logger.debug(errMsg + ""String_Node_Str"" + ans.getDetails());
      throw new ResourceUnavailableException(errMsg,DataCenter.class,zoneId);
    }
  }
 catch (  Exception e) {
    s_logger.debug(errMsg,e);
    throw new ResourceUnavailableException(errMsg + e.getMessage(),DataCenter.class,zoneId);
  }
}","@Override public boolean addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> profile,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException {
  Long zoneId=profile.getVirtualMachine().getDataCenterIdToDeployIn();
  Long podId=profile.getVirtualMachine().getPodIdToDeployIn();
  List<HostVO> hosts=_resourceMgr.listAllUpAndEnabledHosts(Type.ExternalDhcp,null,podId,zoneId);
  if (hosts.size() == 0) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  if (hosts.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  HostVO h=hosts.get(0);
  String dns=nic.getDns1();
  if (dns == null) {
    dns=nic.getDns2();
  }
  DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName(),dns,nic.getGateway());
  String errMsg=String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName());
  try {
    Answer ans=_agentMgr.send(h.getId(),dhcpCommand);
    if (ans.getResult()) {
      s_logger.debug(String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName()));
      return true;
    }
 else {
      s_logger.debug(errMsg + ""String_Node_Str"" + ans.getDetails());
      throw new ResourceUnavailableException(errMsg,DataCenter.class,zoneId);
    }
  }
 catch (  Exception e) {
    s_logger.debug(errMsg,e);
    throw new ResourceUnavailableException(errMsg + e.getMessage(),DataCenter.class,zoneId);
  }
}",0.8058773664877084
106628,"@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(profile.getVirtualMachine().getId()).getGateway());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      String defaultDhcpIp=findDefaultDhcpIp(profile.getVirtualMachine().getId());
      dhcpCommand.setDefaultRouter(defaultDhcpIp);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}",0.9826399589111452
106629,"private void createDhcpEntriesCommands(DomainRouterVO router,Commands cmds){
  long networkId=router.getNetworkId();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,State.Running,State.Migrating,State.Stopping);
  DataCenterVO dc=_dcDao.findById(router.getDataCenterIdToDeployIn());
  for (  UserVmVO vm : vms) {
    boolean createDhcp=true;
    if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
      createDhcp=false;
    }
    if (createDhcp) {
      NicVO nic=_nicDao.findByInstanceIdAndNetworkId(networkId,vm.getId());
      if (nic != null) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ router+ ""String_Node_Str"");
        DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),vm.getHostName());
        dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(vm.getId()).getGateway());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",dhcpCommand);
      }
    }
  }
}","private void createDhcpEntriesCommands(DomainRouterVO router,Commands cmds){
  long networkId=router.getNetworkId();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,State.Running,State.Migrating,State.Stopping);
  DataCenterVO dc=_dcDao.findById(router.getDataCenterIdToDeployIn());
  for (  UserVmVO vm : vms) {
    boolean createDhcp=true;
    if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
      createDhcp=false;
    }
    if (createDhcp) {
      NicVO nic=_nicDao.findByInstanceIdAndNetworkId(networkId,vm.getId());
      if (nic != null) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ router+ ""String_Node_Str"");
        DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),vm.getHostName());
        dhcpCommand.setDefaultRouter(findDefaultDhcpIp(vm.getId()));
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",dhcpCommand);
      }
    }
  }
}",0.9880260006842284
106630,"@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=_networkService.allocateIP(this);
    if (ip != null) {
      this.setEntityId(ip.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=_networkService.allocateIP(getNetworkId(),_accountService.getAccount(getEntityOwnerId()));
    if (ip != null) {
      this.setEntityId(ip.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}",0.9515287099179716
106631,"IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException ;","IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.8627450980392157
106632,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_ASSIGN,eventDescription=""String_Node_Str"",create=true) public IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  String accountName=cmd.getAccountName();
  long domainId=cmd.getDomainId();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  long userId=UserContext.current().getCallerUserId();
  Account ipOwner=_accountMgr.getActiveAccountByName(accountName,domainId);
  if (ipOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,ipOwner);
  DataCenterVO zone=null;
  if (zoneId != null) {
    zone=_dcDao.findById(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    if (zone.getNetworkType() == NetworkType.Basic) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
    }
  }
  long ownerId=ipOwner.getId();
  Long networkId=cmd.getNetworkId();
  Network network=null;
  if (networkId != null) {
    network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
  }
  if (zone.getNetworkType() != NetworkType.Basic && network.getAccountId() != ipOwner.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VlanType vlanType=VlanType.VirtualNetwork;
  boolean assign=false;
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (network.getTrafficType() == TrafficType.Guest) {
      vlanType=VlanType.DirectAttached;
      assign=true;
    }
  }
  PublicIp ip=null;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ ownerId);
    }
    accountToLock=_accountDao.acquireInLockTable(ownerId);
    if (accountToLock == null) {
      s_logger.warn(""String_Node_Str"" + ownerId);
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    _resourceLimitMgr.checkResourceLimit(accountToLock,ResourceType.public_ip);
    boolean isSourceNat=false;
    txn.start();
    boolean sharedSourceNat=false;
    Map<Network.Capability,String> sourceNatCapabilities=getNetworkServiceCapabilities(network.getId(),Service.SourceNat);
    if (sourceNatCapabilities != null) {
      String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
      if (supportedSourceNatTypes.contains(""String_Node_Str"")) {
        sharedSourceNat=true;
      }
    }
    if (!sharedSourceNat) {
      List<IPAddressVO> addrs=listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,true,networkId);
      if (addrs.isEmpty() && network.getGuestType() == Network.GuestType.Isolated) {
        isSourceNat=true;
      }
    }
    ip=fetchNewPublicIp(zoneId,null,null,ipOwner,vlanType,network.getId(),isSourceNat,assign,null);
    if (ip == null) {
      throw new InsufficientAddressCapacityException(""String_Node_Str"",DataCenter.class,zoneId);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + ip.getId());
    Ip ipAddress=ip.getAddress();
    s_logger.debug(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ ipOwner.getId()+ ""String_Node_Str""+ network.getDataCenterId());
    txn.commit();
  }
  finally {
    if (accountToLock != null) {
      _accountDao.releaseFromLockTable(ownerId);
      s_logger.debug(""String_Node_Str"");
    }
  }
  return ip;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_ASSIGN,eventDescription=""String_Node_Str"",create=true) public IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  long userId=UserContext.current().getCallerUserId();
  _accountMgr.checkAccess(caller,null,ipOwner);
  long ownerId=ipOwner.getId();
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  DataCenter zone=_configMgr.getZone(network.getDataCenterId());
  if (zone.getNetworkType() != NetworkType.Basic && network.getAccountId() != ipOwner.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VlanType vlanType=VlanType.VirtualNetwork;
  boolean assign=false;
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (network.getTrafficType() == TrafficType.Guest) {
      vlanType=VlanType.DirectAttached;
      assign=true;
    }
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  PublicIp ip=null;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ ownerId);
    }
    accountToLock=_accountDao.acquireInLockTable(ownerId);
    if (accountToLock == null) {
      s_logger.warn(""String_Node_Str"" + ownerId);
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    _resourceLimitMgr.checkResourceLimit(accountToLock,ResourceType.public_ip);
    boolean isSourceNat=false;
    txn.start();
    boolean sharedSourceNat=false;
    Map<Network.Capability,String> sourceNatCapabilities=getNetworkServiceCapabilities(network.getId(),Service.SourceNat);
    if (sourceNatCapabilities != null) {
      String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
      if (supportedSourceNatTypes.contains(""String_Node_Str"")) {
        sharedSourceNat=true;
      }
    }
    if (!sharedSourceNat) {
      List<IPAddressVO> addrs=listPublicIpAddressesInVirtualNetwork(ownerId,zone.getId(),true,networkId);
      if (addrs.isEmpty() && network.getGuestType() == Network.GuestType.Isolated) {
        isSourceNat=true;
      }
    }
    ip=fetchNewPublicIp(zone.getId(),null,null,ipOwner,vlanType,network.getId(),isSourceNat,assign,null);
    if (ip == null) {
      throw new InsufficientAddressCapacityException(""String_Node_Str"",DataCenter.class,zone.getId());
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + ip.getId());
    Ip ipAddress=ip.getAddress();
    s_logger.debug(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ ipOwner.getId()+ ""String_Node_Str""+ network.getDataCenterId());
    txn.commit();
  }
  finally {
    if (accountToLock != null) {
      _accountDao.releaseFromLockTable(ownerId);
      s_logger.debug(""String_Node_Str"");
    }
  }
  return ip;
}",0.6909492273730684
106633,"@Override public IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}","@Override public IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}",0.8877005347593583
106634,"public Long getSourceIpAddressId(){
  return publicIpId;
}","public Long getSourceIpAddressId(){
  IpAddress ipAddr=_networkService.getIp(publicIpId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddr.getId());
  }
  return publicIpId;
}",0.3355263157894737
106635,"public long getDomainId(){
  if (publicIpId != null)   return _networkService.getIp(getPublicIpId()).getDomainId();
  if (domainId != null) {
    return domainId;
  }
  return UserContext.current().getCaller().getDomainId();
}","public long getDomainId(){
  if (publicIpId != null)   return _networkService.getIp(getSourceIpAddressId()).getDomainId();
  if (domainId != null) {
    return domainId;
  }
  return UserContext.current().getCaller().getDomainId();
}",0.9498910675381264
106636,"public long getAccountId(){
  if (publicIpId != null)   return _networkService.getIp(getPublicIpId()).getAccountId();
  Account account=UserContext.current().getCaller();
  if ((account == null)) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","public long getAccountId(){
  if (publicIpId != null)   return _networkService.getIp(getSourceIpAddressId()).getAccountId();
  Account account=UserContext.current().getCaller();
  if ((account == null)) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}",0.9820585457979226
106637,"@DB public PublicIp allocIp(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException {
  List<NetworkVO> networks=_networkDao.listByZoneAndTrafficType(lb.getZoneId(),TrafficType.Guest);
  if (networks.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ lb.getZoneId());
    return null;
  }
  Network frontEndNetwork=networks.get(0);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PublicIp ip=_networkMgr.assignPublicIpAddress(lb.getZoneId(),null,account,VlanType.DirectAttached,frontEndNetwork.getId(),null);
  IPAddressVO ipvo=_ipAddressDao.findById(ip.getId());
  ipvo.setAssociatedWithNetworkId(frontEndNetwork.getId());
  _ipAddressDao.update(ipvo.getId(),ipvo);
  txn.commit();
  s_logger.info(""String_Node_Str"" + ip);
  return ip;
}","@DB public PublicIp allocIp(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException {
  if (lb.getZoneId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.Provider.ElasticLoadBalancerVm.getName());
  }
  List<NetworkVO> networks=_networkDao.listByZoneAndTrafficType(lb.getZoneId(),TrafficType.Guest);
  if (networks.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ lb.getZoneId());
    return null;
  }
  Network frontEndNetwork=networks.get(0);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PublicIp ip=_networkMgr.assignPublicIpAddress(lb.getZoneId(),null,account,VlanType.DirectAttached,frontEndNetwork.getId(),null);
  IPAddressVO ipvo=_ipAddressDao.findById(ip.getId());
  ipvo.setAssociatedWithNetworkId(frontEndNetwork.getId());
  _ipAddressDao.update(ipvo.getId(),ipvo);
  txn.commit();
  s_logger.info(""String_Node_Str"" + ip);
  return ip;
}",0.9155555555555556
106638,"public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  if (!onlyReady) {
    if (isReady() != null && isReady().booleanValue() != onlyReady) {
      onlyReady=isReady().booleanValue();
    }
  }
  return onlyReady;
}",0.8711111111111111
106639,"@Override @DB public long addTemplateToZone(VMTemplateVO tmplt,long zoneId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VMTemplateVO tmplt2=findById(tmplt.getId());
  if (tmplt2 == null) {
    persist(tmplt);
    if (tmplt.getDetails() != null) {
      _templateDetailsDao.persist(tmplt.getId(),tmplt.getDetails());
    }
  }
  VMTemplateZoneVO tmpltZoneVO=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
  if (tmpltZoneVO == null) {
    tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
    _templateZoneDao.persist(tmpltZoneVO);
  }
 else {
    tmpltZoneVO.setRemoved(null);
    tmpltZoneVO.setLastUpdated(new Date());
    _templateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
  }
  txn.commit();
  return tmplt.getId();
}","@Override @DB public long addTemplateToZone(VMTemplateVO tmplt,long zoneId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VMTemplateVO tmplt2=findById(tmplt.getId());
  if (tmplt2 == null) {
    if (persist(tmplt) == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + tmplt);
    }
    if (tmplt.getDetails() != null) {
      _templateDetailsDao.persist(tmplt.getId(),tmplt.getDetails());
    }
  }
  VMTemplateZoneVO tmpltZoneVO=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
  if (tmpltZoneVO == null) {
    tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
    _templateZoneDao.persist(tmpltZoneVO);
  }
 else {
    tmpltZoneVO.setRemoved(null);
    tmpltZoneVO.setLastUpdated(new Date());
    _templateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
  }
  txn.commit();
  return tmplt.getId();
}",0.9290085679314566
106640,"@Override public VMTemplateVO create(TemplateProfile profile){
  VMTemplateVO template=persistTemplate(profile);
  _downloadMonitor.downloadTemplateToStorage(template,profile.getZoneId());
  _resourceLimitMgr.incrementResourceCount(profile.getAccountId(),ResourceType.template);
  return template;
}","@Override public VMTemplateVO create(TemplateProfile profile){
  VMTemplateVO template=persistTemplate(profile);
  if (template == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + profile.getTemplate());
  }
  _downloadMonitor.downloadTemplateToStorage(template,profile.getZoneId());
  _resourceLimitMgr.incrementResourceCount(profile.getAccountId(),ResourceType.template);
  return template;
}",0.844632768361582
106641,"protected VMTemplateVO persistTemplate(TemplateProfile profile){
  Long zoneId=profile.getZoneId();
  VMTemplateVO template=new VMTemplateVO(profile.getTemplateId(),profile.getName(),profile.getFormat(),profile.getIsPublic(),profile.getFeatured(),profile.getIsExtractable(),TemplateType.USER,profile.getUrl(),profile.getRequiresHVM(),profile.getBits(),profile.getAccountId(),profile.getCheckSum(),profile.getDisplayText(),profile.getPasswordEnabled(),profile.getGuestOsId(),profile.getBootable(),profile.getHypervisorType(),profile.getTemplateTag(),profile.getDetails());
  if (zoneId == null || zoneId == -1) {
    List<DataCenterVO> dcs=_dcDao.listAllIncludingRemoved();
    for (    DataCenterVO dc : dcs) {
      _tmpltDao.addTemplateToZone(template,dc.getId());
    }
    template.setCrossZones(true);
  }
 else {
    _tmpltDao.addTemplateToZone(template,zoneId);
  }
  return template;
}","protected VMTemplateVO persistTemplate(TemplateProfile profile){
  Long zoneId=profile.getZoneId();
  VMTemplateVO template=new VMTemplateVO(profile.getTemplateId(),profile.getName(),profile.getFormat(),profile.getIsPublic(),profile.getFeatured(),profile.getIsExtractable(),TemplateType.USER,profile.getUrl(),profile.getRequiresHVM(),profile.getBits(),profile.getAccountId(),profile.getCheckSum(),profile.getDisplayText(),profile.getPasswordEnabled(),profile.getGuestOsId(),profile.getBootable(),profile.getHypervisorType(),profile.getTemplateTag(),profile.getDetails());
  if (zoneId == null || zoneId == -1) {
    List<DataCenterVO> dcs=_dcDao.listAll();
    if (dcs.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    for (    DataCenterVO dc : dcs) {
      _tmpltDao.addTemplateToZone(template,dc.getId());
    }
    template.setCrossZones(true);
  }
 else {
    _tmpltDao.addTemplateToZone(template,zoneId);
  }
  return _tmpltDao.findById(template.getId());
}",0.9210386857445682
106642,"@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(null,ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}","@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}",0.9935279735366028
106643,"@Override public boolean disableStaticNat(long ipId) throws ResourceUnavailableException {
  boolean success=true;
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  checkIpAndUserVm(ipAddress,null,caller);
  if (!ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  try {
    s_logger.debug(""String_Node_Str"" + Purpose.Firewall + ""String_Node_Str""+ ipId+ ""String_Node_Str"");
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,ctx.getCallerUserId(),caller)) {
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"",e);
    success=false;
  }
  if (!revokeAllPFAndStaticNatRulesForIp(ipId,UserContext.current().getCallerUserId(),caller)) {
    s_logger.warn(""String_Node_Str"" + ipAddress);
    success=false;
  }
  if (success) {
    ipAddress.setOneToOneNat(false);
    ipAddress.setAssociatedWithVmId(null);
    _ipAddressDao.update(ipAddress.getId(),ipAddress);
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipId);
    return false;
  }
}","@Override public boolean disableStaticNat(long ipId) throws ResourceUnavailableException {
  boolean success=true;
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  checkIpAndUserVm(ipAddress,null,caller);
  if (!ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  try {
    s_logger.debug(""String_Node_Str"" + Purpose.Firewall + ""String_Node_Str""+ ipId);
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,ctx.getCallerUserId(),caller)) {
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"",e);
    success=false;
  }
  if (!revokeAllPFAndStaticNatRulesForIp(ipId,UserContext.current().getCallerUserId(),caller)) {
    s_logger.warn(""String_Node_Str"" + ipAddress);
    success=false;
  }
  if (success) {
    ipAddress.setOneToOneNat(false);
    ipAddress.setAssociatedWithVmId(null);
    _ipAddressDao.update(ipAddress.getId(),ipAddress);
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipId);
    return false;
  }
}",0.9923170238576628
106644,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_RELEASE,eventDescription=""String_Node_Str"",async=true) public boolean disassociateIpAddress(long ipAddressId){
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId);
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,ipVO);
  }
  Network associatedNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
  if (areServicesSupportedInNetwork(associatedNetwork.getId(),Service.SourceNat)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (_accountVlanMapDao.findAccountVlanMap(ipVO.getAccountId(),ipVO.getVlanId()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
  }
  return releasePublicIpAddress(ipAddressId,userId,caller);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_RELEASE,eventDescription=""String_Node_Str"",async=true) public boolean disassociateIpAddress(long ipAddressId){
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId);
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,ipVO);
  }
  Network associatedNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
  if (ipVO.isSourceNat() && areServicesSupportedInNetwork(associatedNetwork.getId(),Service.SourceNat)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (_accountVlanMapDao.findAccountVlanMap(ipVO.getAccountId(),ipVO.getVlanId()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
  }
  return releasePublicIpAddress(ipAddressId,userId,caller);
}",0.9917849141150112
106645,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}",0.995857363333604
106646,"public RebootAnswer(RebootCommand cmd,String details){
  super(cmd,false,details);
  bytesSent=null;
  bytesReceived=null;
}","public RebootAnswer(RebootCommand cmd,Exception e){
  super(cmd,e);
}",0.6528497409326425
106647,"public Integer getVncPort(){
  return vncPort;
}","@Override public Integer getVncPort(){
  return vncPort;
}",0.9056603773584906
106648,"public StopAnswer(StopCommand cmd,String details){
  super(cmd,details);
  vncPort=null;
}","public StopAnswer(StopCommand cmd,Exception e){
  super(cmd,e);
}",0.7612903225806451
106649,"@Override public ExternalFirewallDeviceVO addSrxFirewall(AddSrxFirewallCmd cmd){
  String deviceName=cmd.getDeviceType();
  if (deviceName.equalsIgnoreCase(NetworkDevice.JuniperSRXFirewall.getName())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return addExternalFirewall(cmd.getPhysicalNetworkId(),cmd.getUrl(),cmd.getUsername(),cmd.getPassword(),deviceName,(ServerResource)new JuniperSrxResource());
}","@Override public ExternalFirewallDeviceVO addSrxFirewall(AddSrxFirewallCmd cmd){
  String deviceName=cmd.getDeviceType();
  if (!deviceName.equalsIgnoreCase(NetworkDevice.JuniperSRXFirewall.getName())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return addExternalFirewall(cmd.getPhysicalNetworkId(),cmd.getUrl(),cmd.getUsername(),cmd.getPassword(),deviceName,(ServerResource)new JuniperSrxResource());
}",0.998843930635838
106650,"@Override public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network){
  NetworkExternalLoadBalancerVO lbDeviceForNetwork=_networkExternalLBDao.findByNetworkId(network.getId());
  if (lbDeviceForNetwork != null) {
    long lbDeviceId=lbDeviceForNetwork.getExternalLBDeviceId();
    ExternalLoadBalancerDeviceVO lbDeviceVo=_externalLoadBalancerDeviceDao.findById(lbDeviceId);
    assert(lbDeviceVo != null);
  }
  return null;
}","@Override public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network){
  NetworkExternalLoadBalancerVO lbDeviceForNetwork=_networkExternalLBDao.findByNetworkId(network.getId());
  if (lbDeviceForNetwork != null) {
    long lbDeviceId=lbDeviceForNetwork.getExternalLBDeviceId();
    ExternalLoadBalancerDeviceVO lbDeviceVo=_externalLoadBalancerDeviceDao.findById(lbDeviceId);
    assert(lbDeviceVo != null);
    return lbDeviceVo;
  }
  return null;
}",0.9752953813104188
106651,"private boolean canHandle(Network config){
  DataCenter zone=_configMgr.getZone(config.getDataCenterId());
  if ((zone.getNetworkType() == NetworkType.Advanced && config.getGuestType() != Network.GuestType.Isolated) || (zone.getNetworkType() == NetworkType.Basic && config.getGuestType() != Network.GuestType.Shared)) {
    s_logger.trace(""String_Node_Str"" + config.getGuestType());
    return false;
  }
  return _networkManager.networkIsConfiguredForExternalNetworking(zone.getId(),config.getId());
}","private boolean canHandle(Network config){
  DataCenter zone=_configMgr.getZone(config.getDataCenterId());
  if ((zone.getNetworkType() == NetworkType.Advanced && config.getGuestType() != Network.GuestType.Isolated) || (zone.getNetworkType() == NetworkType.Basic && config.getGuestType() != Network.GuestType.Shared)) {
    s_logger.trace(""String_Node_Str"" + config.getGuestType());
    return false;
  }
  return _networkManager.networkIsConfiguredForExternalNetworking(zone.getId(),config.getId()) && _ntwkSrvcDao.isProviderSupportedInNetwork(config.getId(),Service.Lb,Network.Provider.JuniperSRX);
}",0.9094202898550724
106652,"public byte[] read(SocketChannel ch) throws IOException {
  if (_readHeader) {
    if (_readBuffer.position() == 0) {
      _readBuffer.limit(4);
    }
    if (ch.read(_readBuffer) == -1) {
      throw new IOException(""String_Node_Str"");
    }
    if (_readBuffer.hasRemaining()) {
      s_logger.trace(""String_Node_Str"");
      return null;
    }
    _readBuffer.flip();
    int header=_readBuffer.getInt();
    int readSize=(short)header;
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + readSize);
    }
    if (readSize > MAX_SIZE_PER_PACKET) {
      throw new IOException(""String_Node_Str"" + readSize);
    }
    if (!_gotFollowingPacket) {
      _plaintextBuffer=ByteBuffer.allocate(2000);
    }
    if ((header & HEADER_FLAG_FOLLOWING) != 0) {
      _gotFollowingPacket=true;
    }
 else {
      _gotFollowingPacket=false;
    }
    _readBuffer.clear();
    _readHeader=false;
    if (_readBuffer.capacity() < readSize) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _readBuffer.capacity());
      }
      _readBuffer=ByteBuffer.allocate(readSize);
    }
    _readBuffer.limit(readSize);
  }
  if (ch.read(_readBuffer) == -1) {
    throw new IOException(""String_Node_Str"");
  }
  if (_readBuffer.hasRemaining()) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _readBuffer.remaining());
    }
    return null;
  }
  _readBuffer.flip();
  ByteBuffer appBuf;
  SSLSession sslSession=_sslEngine.getSession();
  SSLEngineResult engResult;
  appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
  engResult=_sslEngine.unwrap(_readBuffer,appBuf);
  if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
    throw new IOException(""String_Node_Str"" + engResult);
  }
  appBuf.flip();
  if (_plaintextBuffer.remaining() < appBuf.limit()) {
    ByteBuffer newBuffer=ByteBuffer.allocate(_plaintextBuffer.capacity() + appBuf.limit() * 5);
    _plaintextBuffer.flip();
    newBuffer.put(_plaintextBuffer);
    _plaintextBuffer=newBuffer;
  }
  _plaintextBuffer.put(appBuf);
  _readBuffer.clear();
  _readHeader=true;
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + appBuf.limit());
  }
  if (!_gotFollowingPacket) {
    _plaintextBuffer.flip();
    byte[] result=new byte[_plaintextBuffer.limit()];
    _plaintextBuffer.get(result);
    return result;
  }
 else {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return null;
  }
}","public byte[] read(SocketChannel ch) throws IOException {
  if (_readHeader) {
    if (_readBuffer.position() == 0) {
      _readBuffer.limit(4);
    }
    if (ch.read(_readBuffer) == -1) {
      throw new IOException(""String_Node_Str"");
    }
    if (_readBuffer.hasRemaining()) {
      s_logger.trace(""String_Node_Str"");
      return null;
    }
    _readBuffer.flip();
    int header=_readBuffer.getInt();
    int readSize=(short)header;
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + readSize);
    }
    if (readSize > MAX_SIZE_PER_PACKET) {
      throw new IOException(""String_Node_Str"" + readSize);
    }
    if (!_gotFollowingPacket) {
      _plaintextBuffer=ByteBuffer.allocate(2000);
    }
    if ((header & HEADER_FLAG_FOLLOWING) != 0) {
      _gotFollowingPacket=true;
    }
 else {
      _gotFollowingPacket=false;
    }
    _readBuffer.clear();
    _readHeader=false;
    if (_readBuffer.capacity() < readSize) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _readBuffer.capacity());
      }
      _readBuffer=ByteBuffer.allocate(readSize);
    }
    _readBuffer.limit(readSize);
  }
  if (ch.read(_readBuffer) == -1) {
    throw new IOException(""String_Node_Str"");
  }
  if (_readBuffer.hasRemaining()) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _readBuffer.remaining());
    }
    return null;
  }
  _readBuffer.flip();
  ByteBuffer appBuf;
  SSLSession sslSession=_sslEngine.getSession();
  SSLEngineResult engResult;
  int remaining=0;
  while (_readBuffer.hasRemaining()) {
    remaining=_readBuffer.remaining();
    appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
    engResult=_sslEngine.unwrap(_readBuffer,appBuf);
    if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
      throw new IOException(""String_Node_Str"" + engResult);
    }
    if (remaining == _readBuffer.remaining()) {
      throw new IOException(""String_Node_Str"" + remaining + ""String_Node_Str"");
    }
    appBuf.flip();
    if (_plaintextBuffer.remaining() < appBuf.limit()) {
      ByteBuffer newBuffer=ByteBuffer.allocate(_plaintextBuffer.capacity() + appBuf.limit() * 5);
      _plaintextBuffer.flip();
      newBuffer.put(_plaintextBuffer);
      _plaintextBuffer=newBuffer;
    }
    _plaintextBuffer.put(appBuf);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + appBuf.limit());
    }
  }
  _readBuffer.clear();
  _readHeader=true;
  if (!_gotFollowingPacket) {
    _plaintextBuffer.flip();
    byte[] result=new byte[_plaintextBuffer.limit()];
    _plaintextBuffer.get(result);
    return result;
  }
 else {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return null;
  }
}",0.9043070823571816
106653,"private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
  domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
  domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  if (!networkIds.isEmpty()) {
    SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
    return _networksDao.search(sc,searchFilter);
  }
 else {
    return new ArrayList<NetworkVO>();
  }
}",0.9520958083832336
106654,"public static String getDefaultHostIp(){
  NetworkInterface nic=null;
  String pubNic=getDefaultEthDevice();
  if (pubNic == null) {
    return null;
  }
  try {
    nic=NetworkInterface.getByName(pubNic);
  }
 catch (  final SocketException e) {
    return null;
  }
  String[] info=NetUtils.getNetworkParams(nic);
  return info[0];
}","public static String getDefaultHostIp(){
  if (isWindows()) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    try {
      Process result=Runtime.getRuntime().exec(""String_Node_Str"");
      BufferedReader output=new BufferedReader(new InputStreamReader(result.getInputStream()));
      String line=output.readLine();
      while (line != null) {
        Matcher matcher=pattern.matcher(line);
        if (matcher.find()) {
          return matcher.group(2);
        }
        line=output.readLine();
      }
    }
 catch (    Exception e) {
    }
    return null;
  }
 else {
    NetworkInterface nic=null;
    String pubNic=getDefaultEthDevice();
    if (pubNic == null) {
      return null;
    }
    try {
      nic=NetworkInterface.getByName(pubNic);
    }
 catch (    final SocketException e) {
      return null;
    }
    String[] info=NetUtils.getNetworkParams(nic);
    return info[0];
  }
}",0.4959871589085072
106655,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof IpAssocCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SavePasswordCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
  }
 else   if (cmd instanceof ReadyCommand) {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckHealthCommand) {
  }
 else   if (cmd instanceof StopCommand) {
  }
 else   if (cmd instanceof RebootRouterCommand) {
  }
 else   if (cmd instanceof RebootCommand) {
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
  }
 else   if (cmd instanceof MigrateCommand) {
  }
 else   if (cmd instanceof DestroyCommand) {
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    s_logger.info(""String_Node_Str"");
    Answer answer=new Answer(cmd,true,""String_Node_Str"");
    return answer;
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachIsoCommand) {
  }
 else   if (cmd instanceof ValidateSnapshotCommand) {
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    s_logger.info(""String_Node_Str"");
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
  }
 else   if (cmd instanceof SetupCommand) {
  }
 else   if (cmd instanceof MaintainCommand) {
  }
 else   if (cmd instanceof PingTestCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
  }
 else   if (cmd instanceof PoolEjectCommand) {
  }
 else   if (cmd instanceof NetworkUsageCommand) {
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
  return Answer.createUnsupportedCommandAnswer(cmd);
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof IpAssocCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SavePasswordCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
  }
 else   if (cmd instanceof ReadyCommand) {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckHealthCommand) {
  }
 else   if (cmd instanceof StopCommand) {
  }
 else   if (cmd instanceof RebootRouterCommand) {
  }
 else   if (cmd instanceof RebootCommand) {
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
  }
 else   if (cmd instanceof MigrateCommand) {
  }
 else   if (cmd instanceof DestroyCommand) {
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    s_logger.info(""String_Node_Str"");
    Answer answer=new Answer(cmd,true,""String_Node_Str"");
    return answer;
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachIsoCommand) {
  }
 else   if (cmd instanceof ValidateSnapshotCommand) {
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    s_logger.info(""String_Node_Str"");
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
  }
 else   if (cmd instanceof SetupCommand) {
  }
 else   if (cmd instanceof MaintainCommand) {
  }
 else   if (cmd instanceof PingTestCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
  }
 else   if (cmd instanceof PoolEjectCommand) {
  }
 else   if (cmd instanceof NetworkUsageCommand) {
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof CheckNetworkCommand) {
  }
 else {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
  return Answer.createUnsupportedCommandAnswer(cmd);
}",0.9927105831533476
106656,"@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + ComponentLocator.class.getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    if (cmd instanceof CreateCommand) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof SetPortForwardingRulesCommand) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (cmd instanceof SetStaticNatRulesCommand) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (cmd instanceof LoadBalancerConfigCommand) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (cmd instanceof IpAssocCommand) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (cmd instanceof SavePasswordCommand) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (cmd instanceof DhcpEntryCommand) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (cmd instanceof VmDataCommand) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      answer=execute((StopCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof ValidateSnapshotCommand) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof SetupCommand) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckOnHostCommand) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof PoolEjectCommand) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      answer=execute((StartCommand)cmd);
    }
 else     if (cmd instanceof RemoteAccessVpnCfgCommand) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (cmd instanceof VpnUsersCfgCommand) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof CheckRouterCommand) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (cmd instanceof SetFirewallRulesCommand) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (cmd instanceof BumpUpPriorityCommand) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (cmd instanceof GetDomRVersionCmd) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}","@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + ComponentLocator.class.getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    if (cmd instanceof CreateCommand) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof SetPortForwardingRulesCommand) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (cmd instanceof SetStaticNatRulesCommand) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (cmd instanceof LoadBalancerConfigCommand) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (cmd instanceof IpAssocCommand) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (cmd instanceof SavePasswordCommand) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (cmd instanceof DhcpEntryCommand) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (cmd instanceof VmDataCommand) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      answer=execute((StopCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof ValidateSnapshotCommand) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof SetupCommand) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckOnHostCommand) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof PoolEjectCommand) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      answer=execute((StartCommand)cmd);
    }
 else     if (cmd instanceof RemoteAccessVpnCfgCommand) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (cmd instanceof VpnUsersCfgCommand) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof CheckRouterCommand) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (cmd instanceof SetFirewallRulesCommand) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (cmd instanceof BumpUpPriorityCommand) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (cmd instanceof GetDomRVersionCmd) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else     if (cmd instanceof CheckNetworkCommand) {
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}",0.996148738379814
106657,"@Override @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deletePhysicalNetwork(Long physicalNetworkId){
  PhysicalNetworkVO pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  checkIfPhysicalNetworkIsDeletable(physicalNetworkId);
  List<VlanVO> vlans=_vlanDao.listVlansByPhysicalNetworkId(physicalNetworkId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networksDao.listByPhysicalNetworkIncludingRemoved(physicalNetworkId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networksDao.remove(network.getId());
    }
  }
  _dcDao.deleteVnet(physicalNetworkId);
  _pNSPDao.deleteProviders(physicalNetworkId);
  boolean success=_physicalNetworkDao.remove(physicalNetworkId);
  return success;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deletePhysicalNetwork(Long physicalNetworkId){
  PhysicalNetworkVO pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  checkIfPhysicalNetworkIsDeletable(physicalNetworkId);
  List<VlanVO> vlans=_vlanDao.listVlansByPhysicalNetworkId(physicalNetworkId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networksDao.listByPhysicalNetwork(physicalNetworkId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networksDao.remove(network.getId());
    }
  }
  _dcDao.deleteVnet(physicalNetworkId);
  _pNSPDao.deleteProviders(physicalNetworkId);
  boolean success=_physicalNetworkDao.remove(physicalNetworkId);
  return success;
}",0.9920870425321464
106658,"@Override @ActionEvent(eventType=EventTypes.EVENT_SERVICE_PROVIDER_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetworkServiceProvider updateNetworkServiceProvider(Long id,String stateStr,List<String> enabledServices){
  PhysicalNetworkServiceProviderVO provider=_pNSPDao.findById(id);
  if (provider == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  NetworkElement element=getElementImplementingProvider(provider.getProviderName());
  if (element == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
  }
  PhysicalNetworkServiceProvider.State state=null;
  if (stateStr != null && !stateStr.isEmpty()) {
    try {
      state=PhysicalNetworkServiceProvider.State.valueOf(stateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + stateStr + ""String_Node_Str"");
    }
  }
  boolean update=false;
  if (state != null) {
    if (state == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ provider.getPhysicalNetworkId()+ ""String_Node_Str""+ stateStr);
    }
switch (state) {
case Enabled:
      if (element != null && element.isReady(provider)) {
        provider.setState(PhysicalNetworkServiceProvider.State.Enabled);
        update=true;
      }
    break;
case Disabled:
  provider.setState(PhysicalNetworkServiceProvider.State.Disabled);
update=true;
break;
}
}
if (enabledServices != null) {
if (!element.canEnableIndividualServices()) {
throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
}
List<Service> services=new ArrayList<Service>();
for (String serviceName : enabledServices) {
Network.Service service=Network.Service.getService(serviceName);
if (service == null) {
throw new InvalidParameterValueException(""String_Node_Str"" + serviceName);
}
services.add(service);
}
provider.setEnabledServices(services);
update=true;
}
if (update) {
_pNSPDao.update(id,provider);
}
return provider;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_SERVICE_PROVIDER_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetworkServiceProvider updateNetworkServiceProvider(Long id,String stateStr,List<String> enabledServices){
  PhysicalNetworkServiceProviderVO provider=_pNSPDao.findById(id);
  if (provider == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  NetworkElement element=getElementImplementingProvider(provider.getProviderName());
  if (element == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
  }
  PhysicalNetworkServiceProvider.State state=null;
  if (stateStr != null && !stateStr.isEmpty()) {
    try {
      state=PhysicalNetworkServiceProvider.State.valueOf(stateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + stateStr + ""String_Node_Str"");
    }
  }
  boolean update=false;
  if (state != null) {
    if (state == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ provider.getPhysicalNetworkId()+ ""String_Node_Str""+ stateStr);
    }
switch (state) {
case Enabled:
      if (element != null && element.isReady(provider)) {
        provider.setState(PhysicalNetworkServiceProvider.State.Enabled);
        update=true;
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    break;
case Disabled:
  provider.setState(PhysicalNetworkServiceProvider.State.Disabled);
update=true;
break;
}
}
if (enabledServices != null) {
if (!element.canEnableIndividualServices()) {
throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
}
List<Service> services=new ArrayList<Service>();
for (String serviceName : enabledServices) {
Network.Service service=Network.Service.getService(serviceName);
if (service == null) {
throw new InvalidParameterValueException(""String_Node_Str"" + serviceName);
}
services.add(service);
}
provider.setEnabledServices(services);
update=true;
}
if (update) {
_pNSPDao.update(id,provider);
}
return provider;
}",0.9833916083916084
106659,"private static ArrayList<Argument> setResponseFields(Field[] responseFields){
  ArrayList<Argument> arguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedChildlessArguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedArguments=new ArrayList<Argument>();
  Argument id=null;
  for (  Field responseField : responseFields) {
    SerializedName nameAnnotation=responseField.getAnnotation(SerializedName.class);
    Param paramAnnotation=responseField.getAnnotation(Param.class);
    Argument respArg=new Argument(nameAnnotation.value());
    boolean hasChildren=false;
    if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
      String description=paramAnnotation.description();
      Class fieldClass=paramAnnotation.responseObject();
      if (description != null && !description.isEmpty()) {
        respArg.setDescription(description);
      }
      if (fieldClass != null) {
        Class<?> superClass=fieldClass.getSuperclass();
        if (superClass != null) {
          String superName=superClass.getName();
          if (superName.equals(BaseResponse.class.getName())) {
            ArrayList<Argument> fieldArguments=new ArrayList<Argument>();
            Field[] fields=fieldClass.getDeclaredFields();
            fieldArguments=setResponseFields(fields);
            respArg.setArguments(fieldArguments);
            hasChildren=true;
          }
        }
      }
    }
    if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
      if (nameAnnotation.value().equals(""String_Node_Str"")) {
        id=respArg;
      }
 else {
        if (hasChildren) {
          respArg.setName(nameAnnotation.value() + ""String_Node_Str"");
          sortedArguments.add(respArg);
        }
 else {
          sortedChildlessArguments.add(respArg);
        }
      }
    }
  }
  Collections.sort(sortedArguments);
  Collections.sort(sortedChildlessArguments);
  if (id != null) {
    arguments.add(id);
  }
  arguments.addAll(sortedChildlessArguments);
  arguments.addAll(sortedArguments);
  return arguments;
}","private static ArrayList<Argument> setResponseFields(Field[] responseFields){
  ArrayList<Argument> arguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedChildlessArguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedArguments=new ArrayList<Argument>();
  Argument id=null;
  for (  Field responseField : responseFields) {
    SerializedName nameAnnotation=responseField.getAnnotation(SerializedName.class);
    if (nameAnnotation != null) {
      Param paramAnnotation=responseField.getAnnotation(Param.class);
      Argument respArg=new Argument(nameAnnotation.value());
      boolean hasChildren=false;
      if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
        String description=paramAnnotation.description();
        Class fieldClass=paramAnnotation.responseObject();
        if (description != null && !description.isEmpty()) {
          respArg.setDescription(description);
        }
        if (fieldClass != null) {
          Class<?> superClass=fieldClass.getSuperclass();
          if (superClass != null) {
            String superName=superClass.getName();
            if (superName.equals(BaseResponse.class.getName())) {
              ArrayList<Argument> fieldArguments=new ArrayList<Argument>();
              Field[] fields=fieldClass.getDeclaredFields();
              fieldArguments=setResponseFields(fields);
              respArg.setArguments(fieldArguments);
              hasChildren=true;
            }
          }
        }
      }
      if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
        if (nameAnnotation.value().equals(""String_Node_Str"")) {
          id=respArg;
        }
 else {
          if (hasChildren) {
            respArg.setName(nameAnnotation.value() + ""String_Node_Str"");
            sortedArguments.add(respArg);
          }
 else {
            sortedChildlessArguments.add(respArg);
          }
        }
      }
    }
  }
  Collections.sort(sortedArguments);
  Collections.sort(sortedChildlessArguments);
  if (id != null) {
    arguments.add(id);
  }
  arguments.addAll(sortedChildlessArguments);
  arguments.addAll(sortedArguments);
  return arguments;
}",0.9541371158392437
106660,"private String queueCommand(BaseCmd cmdObj,Map<String,String> params){
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectEntityTable=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectEntityTable=createCmd.getEntityTable();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.setupParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    AsyncJobVO job=new AsyncJobVO();
    job.setInstanceId((objectId == null) ? asyncCmd.getInstanceId() : objectId);
    job.setInstanceType(asyncCmd.getInstanceType());
    job.setUserId(callerUserId);
    job.setAccountId(caller.getId());
    job.setCmd(cmdObj.getClass().getName());
    job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objectId,objectEntityTable);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}","private String queueCommand(BaseCmd cmdObj,Map<String,String> params){
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectEntityTable=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectEntityTable=createCmd.getEntityTable();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.setupParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    AsyncJobVO job=new AsyncJobVO();
    job.setInstanceId((objectId == null) ? asyncCmd.getInstanceId() : objectId);
    job.setInstanceType(asyncCmd.getInstanceType());
    job.setUserId(callerUserId);
    job.setAccountId(caller.getId());
    job.setCmd(cmdObj.getClass().getName());
    job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      SerializationContext.current().setUuidTranslation(true);
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objectId,objectEntityTable);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}",0.988124410933082
106661,"@DB public Long getIdentityId(String tableName,String identityString){
  assert(tableName != null);
  assert(identityString != null);
  PreparedStatement pstmt=null;
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    try {
      pstmt=txn.prepareAutoCloseStatement(String.format(""String_Node_Str"",tableName));
      long id=0;
      try {
        id=Long.parseLong(identityString);
      }
 catch (      NumberFormatException e) {
      }
      pstmt.setLong(1,id);
      pstmt.setString(2,identityString);
      ResultSet rs=pstmt.executeQuery();
      if (rs.next()) {
        return rs.getLong(1);
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + tableName + ""String_Node_Str""+ identityString+ ""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
  finally {
    txn.close();
  }
  return null;
}","@DB public Long getIdentityId(String tableName,String identityString){
  assert(tableName != null);
  assert(identityString != null);
  PreparedStatement pstmt=null;
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    try {
      pstmt=txn.prepareAutoCloseStatement(String.format(""String_Node_Str"",tableName));
      long id=0;
      try {
        id=Long.parseLong(identityString);
      }
 catch (      NumberFormatException e) {
      }
      pstmt.setLong(1,id);
      pstmt.setString(2,identityString);
      ResultSet rs=pstmt.executeQuery();
      if (rs.next()) {
        return rs.getLong(1);
      }
 else {
        if (id != 0)         return id;
        throw new InvalidParameterValueException(""String_Node_Str"" + tableName + ""String_Node_Str""+ identityString+ ""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
  finally {
    txn.close();
  }
  return null;
}",0.9786780383795308
106662,"public String getResponse(long jobId,long objectId){
  CreateCmdResponse response=new CreateCmdResponse();
  response.setJobId(jobId);
  response.setId(objectId);
  response.setResponseName(getCommandName());
  return _responseGenerator.toSerializedString(response,getResponseType());
}","public String getResponse(long jobId,long objectId,String objectEntityTable){
  CreateCmdResponse response=new CreateCmdResponse();
  response.setJobId(jobId);
  response.setId(objectId);
  response.setIdEntityTable(objectEntityTable);
  response.setResponseName(getCommandName());
  return _responseGenerator.toSerializedString(response,getResponseType());
}",0.8868217054263566
106663,"public Long getId(){
  return id.getValue();
}","public Long getId(){
  return getJobId();
}",0.8539325842696629
106664,"public void setJobInstanceType(String jobInstanceType){
  this.jobInstanceType=jobInstanceType;
  if (jobInstanceType != null) {
    if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else {
      assert(false);
    }
  }
}","public void setJobInstanceType(String jobInstanceType){
  this.jobInstanceType=jobInstanceType;
  if (jobInstanceType != null) {
    if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else {
      assert(false);
    }
  }
}",0.9868305531167691
106665,"public void setJobInstanceId(Long jobInstanceId){
  this.jobInstanceIdProxy.setValue(jobInstanceId);
}","public void setJobInstanceId(Long jobInstanceId){
  this.jobInstanceId.setValue(jobInstanceId);
}",0.9748743718592964
106666,"public void setId(Long id){
  this.id.setValue(id);
}","public void setId(Long id){
  setJobId(id);
}",0.8163265306122449
106667,"public Long getJobInstanceId(){
  return jobInstanceIdProxy.getValue();
}","public Long getJobInstanceId(){
  return this.jobInstanceId.getValue();
}",0.9315068493150684
106668,"public void setJobId(Long jobId){
  this.jobId=jobId;
}","public void setJobId(Long jobId){
  this.jobId.setValue(jobId);
}",0.9
106669,"public Long getJobId(){
  return jobId;
}","public Long getJobId(){
  return jobId.getValue();
}",0.8817204301075269
106670,"public void setId(Long id){
  this.id=id;
}","public void setId(Long id){
  this.id.setValue(id);
}",0.875
106671,"public Long getId(){
  return id;
}","public Long getId(){
  return id.getValue();
}",0.8641975308641975
106672,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  String storageCapacityThreshold=_configDao.getValue(Config.StorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String cpuCapacityThreshold=_configDao.getValue(Config.CPUCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String memoryCapacityThreshold=_configDao.getValue(Config.MemoryCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String storageAllocCapacityThreshold=_configDao.getValue(Config.StorageAllocatedCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String publicIPCapacityThreshold=_configDao.getValue(Config.PublicIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String privateIPCapacityThreshold=_configDao.getValue(Config.PrivateIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String secondaryStorageCapacityThreshold=_configDao.getValue(Config.SecondaryStorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String vlanCapacityThreshold=_configDao.getValue(Config.VlanCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String directNetworkPublicIpCapacityThreshold=_configDao.getValue(Config.DirectNetworkPublicIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String localStorageCapacityThreshold=_configDao.getValue(Config.LocalStorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  if (secondaryStorageCapacityThreshold != null) {
    _secondaryStorageCapacityThreshold=Double.parseDouble(secondaryStorageCapacityThreshold);
  }
  if (vlanCapacityThreshold != null) {
    _vlanCapacityThreshold=Double.parseDouble(vlanCapacityThreshold);
  }
  if (directNetworkPublicIpCapacityThreshold != null) {
    _directNetworkPublicIpCapacityThreshold=Double.parseDouble(directNetworkPublicIpCapacityThreshold);
  }
  if (localStorageCapacityThreshold != null) {
    _localStorageCapacityThreshold=Double.parseDouble(localStorageCapacityThreshold);
  }
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE,_storageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,_storageAllocCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU,_cpuCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY,_memoryCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,_publicIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP,_privateIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE,_secondaryStorageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN,_vlanCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,_directNetworkPublicIpCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_LOCAL_STORAGE,_localStorageCapacityThreshold);
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
    if (_capacityCheckPeriod <= 0)     _capacityCheckPeriod=Long.parseLong(Config.CapacityCheckPeriod.getDefaultValue());
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  String storageCapacityThreshold=_configDao.getValue(Config.StorageCapacityThreshold.key());
  String cpuCapacityThreshold=_configDao.getValue(Config.CPUCapacityThreshold.key());
  String memoryCapacityThreshold=_configDao.getValue(Config.MemoryCapacityThreshold.key());
  String storageAllocCapacityThreshold=_configDao.getValue(Config.StorageAllocatedCapacityThreshold.key());
  String publicIPCapacityThreshold=_configDao.getValue(Config.PublicIpCapacityThreshold.key());
  String privateIPCapacityThreshold=_configDao.getValue(Config.PrivateIpCapacityThreshold.key());
  String secondaryStorageCapacityThreshold=_configDao.getValue(Config.SecondaryStorageCapacityThreshold.key());
  String vlanCapacityThreshold=_configDao.getValue(Config.VlanCapacityThreshold.key());
  String directNetworkPublicIpCapacityThreshold=_configDao.getValue(Config.DirectNetworkPublicIpCapacityThreshold.key());
  String localStorageCapacityThreshold=_configDao.getValue(Config.LocalStorageCapacityThreshold.key());
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  if (secondaryStorageCapacityThreshold != null) {
    _secondaryStorageCapacityThreshold=Double.parseDouble(secondaryStorageCapacityThreshold);
  }
  if (vlanCapacityThreshold != null) {
    _vlanCapacityThreshold=Double.parseDouble(vlanCapacityThreshold);
  }
  if (directNetworkPublicIpCapacityThreshold != null) {
    _directNetworkPublicIpCapacityThreshold=Double.parseDouble(directNetworkPublicIpCapacityThreshold);
  }
  if (localStorageCapacityThreshold != null) {
    _localStorageCapacityThreshold=Double.parseDouble(localStorageCapacityThreshold);
  }
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE,_storageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,_storageAllocCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU,_cpuCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY,_memoryCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,_publicIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP,_privateIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE,_secondaryStorageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN,_vlanCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,_directNetworkPublicIpCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_LOCAL_STORAGE,_localStorageCapacityThreshold);
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
    if (_capacityCheckPeriod <= 0)     _capacityCheckPeriod=Long.parseLong(Config.CapacityCheckPeriod.getDefaultValue());
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}",0.8239410681399632
106673,"private void generateEmailAlert(DataCenterVO dc,HostPodVO pod,ClusterVO cluster,double totalCapacity,double usedCapacity,short capacityType){
  String msgSubject=null;
  String msgContent=null;
  String totalStr;
  String usedStr;
  String pctStr=formatPercent(usedCapacity / totalCapacity);
  short alertType=-1;
  Long podId=pod == null ? null : pod.getId();
  Long clusterId=cluster == null ? null : cluster.getId();
switch (capacityType) {
case CapacityVO.CAPACITY_TYPE_MEMORY:
    msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
  totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_MEMORY;
break;
case CapacityVO.CAPACITY_TYPE_CPU:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=_dfWhole.format(totalCapacity);
usedStr=_dfWhole.format(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_CPU;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE_ALLOCATED;
break;
case CapacityVO.CAPACITY_TYPE_LOCAL_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_LOCAL_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_PRIVATE_IP:
msgSubject=""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_PRIVATE_IP;
break;
case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_SECONDARY_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_DIRECT_ATTACHED_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_VLAN:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VLAN;
break;
}
try {
_emailAlert.sendAlert(alertType,dc.getId(),podId,clusterId,msgSubject,msgContent);
}
 catch (Exception ex) {
s_logger.error(""String_Node_Str"",ex);
}
}","private void generateEmailAlert(DataCenterVO dc,HostPodVO pod,ClusterVO cluster,double totalCapacity,double usedCapacity,short capacityType){
  String msgSubject=null;
  String msgContent=null;
  String totalStr;
  String usedStr;
  String pctStr=formatPercent(usedCapacity / totalCapacity);
  short alertType=-1;
  Long podId=pod == null ? null : pod.getId();
  Long clusterId=cluster == null ? null : cluster.getId();
switch (capacityType) {
case CapacityVO.CAPACITY_TYPE_MEMORY:
    msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
  totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_MEMORY;
break;
case CapacityVO.CAPACITY_TYPE_CPU:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=_dfWhole.format(totalCapacity);
usedStr=_dfWhole.format(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_CPU;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE_ALLOCATED;
break;
case CapacityVO.CAPACITY_TYPE_LOCAL_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_LOCAL_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_PRIVATE_IP:
msgSubject=""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_PRIVATE_IP;
break;
case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_SECONDARY_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_DIRECT_ATTACHED_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_VLAN:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VLAN;
break;
}
try {
if (s_logger.isDebugEnabled()) {
s_logger.debug(msgSubject);
s_logger.debug(msgContent);
}
_emailAlert.sendAlert(alertType,dc.getId(),podId,clusterId,msgSubject,msgContent);
}
 catch (Exception ex) {
s_logger.error(""String_Node_Str"",ex);
}
}",0.9896766874645492
106674,"public void checkForAlerts(){
  recalculateCapacity();
  if (_emailAlert == null) {
    return;
  }
  List<DataCenterVO> dataCenterList=_dcDao.listAll();
  List<ClusterVO> clusterList=_clusterDao.listAll();
  List<HostPodVO> podList=_podDao.listAll();
  List<Short> dataCenterCapacityTypes=getCapacityTypesAtZoneLevel();
  List<Short> podCapacityTypes=getCapacityTypesAtPodLevel();
  List<Short> clusterCapacityTypes=getCapacityTypesAtClusterLevel();
  for (  DataCenterVO dc : dataCenterList) {
    for (    Short capacityType : dataCenterCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),dc.getId(),null,null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(dc,null,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  HostPodVO pod : podList) {
    for (    Short capacityType : podCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),pod.getDataCenterId(),pod.getId(),null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(pod.getDataCenterId()),pod,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  ClusterVO cluster : clusterList) {
    for (    Short capacityType : clusterCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),cluster.getDataCenterId(),null,cluster.getId());
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(cluster.getDataCenterId()),ApiDBUtils.findPodById(cluster.getPodId()),cluster,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
}","public void checkForAlerts(){
  recalculateCapacity();
  if (_emailAlert == null) {
    return;
  }
  List<DataCenterVO> dataCenterList=_dcDao.listAll();
  List<ClusterVO> clusterList=_clusterDao.listAll();
  List<HostPodVO> podList=_podDao.listAll();
  List<Short> dataCenterCapacityTypes=getCapacityTypesAtZoneLevel();
  List<Short> podCapacityTypes=getCapacityTypesAtPodLevel();
  List<Short> clusterCapacityTypes=getCapacityTypesAtClusterLevel();
  for (  DataCenterVO dc : dataCenterList) {
    for (    Short capacityType : dataCenterCapacityTypes) {
      List<SummedCapacity> capacity=new ArrayList<SummedCapacity>();
      capacity=_capacityDao.findCapacityBy(capacityType.intValue(),dc.getId(),null,null);
      if (capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
        capacity.add(getUsedStats(capacityType,dc.getId(),null,null));
      }
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(dc,null,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  HostPodVO pod : podList) {
    for (    Short capacityType : podCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),pod.getDataCenterId(),pod.getId(),null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(pod.getDataCenterId()),pod,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  ClusterVO cluster : clusterList) {
    for (    Short capacityType : clusterCapacityTypes) {
      List<SummedCapacity> capacity=new ArrayList<SummedCapacity>();
      float overProvFactor=1f;
      capacity=_capacityDao.findCapacityBy(capacityType.intValue(),cluster.getDataCenterId(),null,cluster.getId());
      if (capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
        capacity.add(getUsedStats(capacityType,cluster.getDataCenterId(),cluster.getPodId(),cluster.getId()));
      }
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      if (capacityType == Capacity.CAPACITY_TYPE_CPU) {
        overProvFactor=ApiDBUtils.getCpuOverprovisioningFactor();
      }
      double totalCapacity=capacity.get(0).getTotalCapacity() * overProvFactor;
      double usedCapacity=capacity.get(0).getUsedCapacity() + capacity.get(0).getReservedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(cluster.getDataCenterId()),ApiDBUtils.findPodById(cluster.getPodId()),cluster,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
}",0.7866761162296244
106675,"@Override public ClusterResponse createClusterResponse(Cluster cluster,Boolean showCapacities){
  ClusterResponse clusterResponse=new ClusterResponse();
  clusterResponse.setId(cluster.getId());
  clusterResponse.setName(cluster.getName());
  clusterResponse.setPodId(cluster.getPodId());
  clusterResponse.setZoneId(cluster.getDataCenterId());
  clusterResponse.setHypervisorType(cluster.getHypervisorType().toString());
  clusterResponse.setClusterType(cluster.getClusterType().toString());
  clusterResponse.setAllocationState(cluster.getAllocationState().toString());
  clusterResponse.setManagedState(cluster.getManagedState().toString());
  HostPodVO pod=ApiDBUtils.findPodById(cluster.getPodId());
  if (pod != null) {
    clusterResponse.setPodName(pod.getName());
  }
  DataCenterVO zone=ApiDBUtils.findZoneById(cluster.getDataCenterId());
  clusterResponse.setZoneName(zone.getName());
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,null,cluster.getId());
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    float cpuOverprovisioningFactor=ApiDBUtils.getCpuOverprovisioningFactor();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
        capacityResponse.setCapacityTotal(new Long((long)(capacity.getTotalCapacity() * cpuOverprovisioningFactor)));
      }
 else       if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
        List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(null,null,cluster.getId());
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
        capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
      }
 else {
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      }
      if (capacityResponse.getCapacityTotal() != 0) {
        capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
      }
 else {
        capacityResponse.setPercentUsed(s_percentFormat.format(0L));
      }
      capacityResponses.add(capacityResponse);
    }
    capacityResponses.addAll(getStatsCapacityresponse(null,null,pod.getId(),pod.getDataCenterId()));
    clusterResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  clusterResponse.setObjectName(""String_Node_Str"");
  return clusterResponse;
}","@Override public ClusterResponse createClusterResponse(Cluster cluster,Boolean showCapacities){
  ClusterResponse clusterResponse=new ClusterResponse();
  clusterResponse.setId(cluster.getId());
  clusterResponse.setName(cluster.getName());
  clusterResponse.setPodId(cluster.getPodId());
  clusterResponse.setZoneId(cluster.getDataCenterId());
  clusterResponse.setHypervisorType(cluster.getHypervisorType().toString());
  clusterResponse.setClusterType(cluster.getClusterType().toString());
  clusterResponse.setAllocationState(cluster.getAllocationState().toString());
  clusterResponse.setManagedState(cluster.getManagedState().toString());
  HostPodVO pod=ApiDBUtils.findPodById(cluster.getPodId());
  if (pod != null) {
    clusterResponse.setPodName(pod.getName());
  }
  DataCenterVO zone=ApiDBUtils.findZoneById(cluster.getDataCenterId());
  clusterResponse.setZoneName(zone.getName());
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,null,cluster.getId());
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    float cpuOverprovisioningFactor=ApiDBUtils.getCpuOverprovisioningFactor();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
        capacityResponse.setCapacityTotal(new Long((long)(capacity.getTotalCapacity() * cpuOverprovisioningFactor)));
      }
 else       if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
        List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(null,null,cluster.getId());
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
        capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
      }
 else {
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      }
      if (capacityResponse.getCapacityTotal() != 0) {
        capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
      }
 else {
        capacityResponse.setPercentUsed(s_percentFormat.format(0L));
      }
      capacityResponses.add(capacityResponse);
    }
    capacityResponses.addAll(getStatsCapacityresponse(null,cluster.getId(),pod.getId(),pod.getDataCenterId()));
    clusterResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  clusterResponse.setObjectName(""String_Node_Str"");
  return clusterResponse;
}",0.9965907051857168
106676,"public SummedCapacity(){
}","public SummedCapacity(long sumUsed,long sumReserved,long sumTotal,short capacityType,Long clusterId,Long podId){
  super();
  this.sumUsed=sumUsed;
  this.sumReserved=sumReserved;
  this.sumTotal=sumTotal;
  this.capacityType=capacityType;
  this.clusterId=clusterId;
  this.podId=podId;
}",0.1587301587301587
106677,"@Override public List<CapacityResponse> createCapacityResponse(List<? extends Capacity> result,DecimalFormat format){
  List<CapacityResponse> capacityResponses=new ArrayList<CapacityResponse>();
  List<CapacityVO> summedCapacities=sumCapacities(result);
  for (  CapacityVO summedCapacity : summedCapacities) {
    CapacityResponse capacityResponse=new CapacityResponse();
    capacityResponse.setCapacityTotal(summedCapacity.getTotalCapacity());
    capacityResponse.setCapacityType(summedCapacity.getCapacityType());
    capacityResponse.setCapacityUsed(summedCapacity.getUsedCapacity());
    if (summedCapacity.getPodId() != null) {
      capacityResponse.setPodId(summedCapacity.getPodId());
      if (summedCapacity.getPodId() > 0) {
        HostPodVO pod=ApiDBUtils.findPodById(summedCapacity.getPodId());
        if (pod != null) {
          capacityResponse.setPodName(pod.getName());
        }
      }
 else {
        capacityResponse.setPodName(""String_Node_Str"");
      }
    }
    capacityResponse.setZoneId(summedCapacity.getDataCenterId());
    capacityResponse.setZoneName(ApiDBUtils.findZoneById(summedCapacity.getDataCenterId()).getName());
    if (summedCapacity.getTotalCapacity() != 0) {
      capacityResponse.setPercentUsed(format.format((float)summedCapacity.getUsedCapacity() / (float)summedCapacity.getTotalCapacity() * 100f));
    }
 else {
      capacityResponse.setPercentUsed(format.format(0L));
    }
    capacityResponse.setObjectName(""String_Node_Str"");
    capacityResponses.add(capacityResponse);
  }
  return capacityResponses;
}","@Override public List<CapacityResponse> createCapacityResponse(List<? extends Capacity> result,DecimalFormat format){
  List<CapacityResponse> capacityResponses=new ArrayList<CapacityResponse>();
  for (  Capacity summedCapacity : result) {
    CapacityResponse capacityResponse=new CapacityResponse();
    capacityResponse.setCapacityTotal(summedCapacity.getTotalCapacity());
    capacityResponse.setCapacityType(summedCapacity.getCapacityType());
    capacityResponse.setCapacityUsed(summedCapacity.getUsedCapacity());
    if (summedCapacity.getPodId() != null) {
      capacityResponse.setPodId(summedCapacity.getPodId());
      if (summedCapacity.getPodId() > 0) {
        HostPodVO pod=ApiDBUtils.findPodById(summedCapacity.getPodId());
        if (pod != null) {
          capacityResponse.setPodName(pod.getName());
        }
      }
 else {
        capacityResponse.setPodName(""String_Node_Str"");
      }
    }
    capacityResponse.setZoneId(summedCapacity.getDataCenterId());
    capacityResponse.setZoneName(ApiDBUtils.findZoneById(summedCapacity.getDataCenterId()).getName());
    if (summedCapacity.getTotalCapacity() != 0) {
      capacityResponse.setPercentUsed(format.format((float)summedCapacity.getUsedCapacity() / (float)summedCapacity.getTotalCapacity() * 100f));
    }
 else {
      capacityResponse.setPercentUsed(format.format(0L));
    }
    capacityResponse.setObjectName(""String_Node_Str"");
    capacityResponses.add(capacityResponse);
  }
  return capacityResponses;
}",0.9728669499836547
106678,"@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Filter searchFilter=new Filter(CapacityVO.class,""String_Node_Str"",true,null,null);
  SearchCriteria<CapacityVO> sc=_capacityDao.createSearchCriteria();
  List<CapacityVO> capacities=new LinkedList<CapacityVO>();
  Integer type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long hostId=cmd.getHostId();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (podId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,podId);
  }
  if (hostId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  }
  capacities=_capacityDao.search(sc,searchFilter);
  if (type == null || type == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
    capacities.addAll(_storageMgr.getSecondaryStorageUsedStats(hostId,podId,zoneId));
  }
  if (type == null || type == Capacity.CAPACITY_TYPE_STORAGE) {
    capacities.addAll(_storageMgr.getStoragePoolUsedStats(hostId,podId,zoneId));
  }
  return capacities;
}","@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,zoneId,podId,clusterId,summedCapacity.getUsedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    capacities.add(capacity);
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
    capacities.addAll(_storageMgr.getSecondaryStorageUsedStats(null,podId,zoneId));
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
    capacities.addAll(_storageMgr.getStoragePoolUsedStats(null,podId,zoneId));
  }
  return capacities;
}",0.3744644387317909
106679,"protected void populateDaos(){
  addDao(""String_Node_Str"",StackMaidDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateZoneDaoImpl.class);
  addDao(""String_Node_Str"",DomainRouterDaoImpl.class);
  addDao(""String_Node_Str"",HostDaoImpl.class);
  addDao(""String_Node_Str"",VMInstanceDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDaoImpl.class);
  ComponentInfo<? extends GenericDao<?,? extends Serializable>> info=addDao(""String_Node_Str"",ServiceOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DiskOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DataCenterDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",HostPodDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",IPAddressDaoImpl.class);
  info=addDao(""String_Node_Str"",VlanDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",PodVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",AccountVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",VolumeDaoImpl.class);
  addDao(""String_Node_Str"",EventDaoImpl.class);
  info=addDao(""String_Node_Str"",UserDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",UserStatisticsDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerDaoImpl.class);
  addDao(""String_Node_Str"",NetworkRuleConfigDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerVMMapDaoImpl.class);
  addDao(""String_Node_Str"",DataCenterIpAddressDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupDaoImpl.class);
  addDao(""String_Node_Str"",IngressRuleDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupRulesDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmRulesetLogDaoImpl.class);
  addDao(""String_Node_Str"",AlertDaoImpl.class);
  addDao(""String_Node_Str"",CapacityDaoImpl.class);
  addDao(""String_Node_Str"",DomainDaoImpl.class);
  addDao(""String_Node_Str"",AccountDaoImpl.class);
  addDao(""String_Node_Str"",ResourceLimitDaoImpl.class);
  addDao(""String_Node_Str"",ResourceCountDaoImpl.class);
  addDao(""String_Node_Str"",UserAccountDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateHostDaoImpl.class);
  addDao(""String_Node_Str"",UploadDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplatePoolDaoImpl.class);
  addDao(""String_Node_Str"",LaunchPermissionDaoImpl.class);
  addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  info=addDao(""String_Node_Str"",VMTemplateDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",HighAvailabilityDaoImpl.class);
  addDao(""String_Node_Str"",ConsoleProxyDaoImpl.class);
  addDao(""String_Node_Str"",SecondaryStorageVmDaoImpl.class);
  addDao(""String_Node_Str"",ManagementServerHostDaoImpl.class);
  addDao(""String_Node_Str"",AgentUpgradeDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotDaoImpl.class);
  addDao(""String_Node_Str"",AsyncJobDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueItemDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSCategoryDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolHostDaoImpl.class);
  addDao(""String_Node_Str"",HostDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotPolicyDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotScheduleDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDaoImpl.class);
  addDao(""String_Node_Str"",CertificateDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDaoImpl.class);
  addDao(""String_Node_Str"",NetworkOfferingDaoImpl.class);
  addDao(""String_Node_Str"",NicDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",RemoteAccessVpnDaoImpl.class);
  addDao(""String_Node_Str"",VpnUserDaoImpl.class);
  addDao(""String_Node_Str"",ItWorkDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",PortForwardingRulesDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesCidrsDaoImpl.class);
  addDao(""String_Node_Str"",SSHKeyPairDaoImpl.class);
  addDao(""String_Node_Str"",UsageEventDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDetailsDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDetailsDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDirtyDaoImpl.class);
  addDao(""String_Node_Str"",OvsWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmFlowLogDaoImpl.class);
  addDao(""String_Node_Str"",GreTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelAccountDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolWorkDaoImpl.class);
  addDao(""String_Node_Str"",HostTagsDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDomainDaoImpl.class);
  addDao(""String_Node_Str"",KeystoreDaoImpl.class);
  addDao(""String_Node_Str"",DcDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SwiftDaoImpl.class);
  addDao(""String_Node_Str"",HostTransferMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectDaoImpl.class);
  addDao(""String_Node_Str"",InlineLoadBalancerNicMapDaoImpl.class);
  addDao(""String_Node_Str"",ElasticLbVmMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectAccountDaoImpl.class);
  addDao(""String_Node_Str"",ProjectInvitationDaoImpl.class);
  info=addDao(""String_Node_Str"",HypervisorCapabilitiesDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
}","protected void populateDaos(){
  addDao(""String_Node_Str"",StackMaidDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateZoneDaoImpl.class);
  addDao(""String_Node_Str"",DomainRouterDaoImpl.class);
  addDao(""String_Node_Str"",HostDaoImpl.class);
  addDao(""String_Node_Str"",VMInstanceDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDaoImpl.class);
  ComponentInfo<? extends GenericDao<?,? extends Serializable>> info=addDao(""String_Node_Str"",ServiceOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DiskOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DataCenterDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",HostPodDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",IPAddressDaoImpl.class);
  info=addDao(""String_Node_Str"",VlanDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",PodVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",AccountVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",VolumeDaoImpl.class);
  addDao(""String_Node_Str"",EventDaoImpl.class);
  info=addDao(""String_Node_Str"",UserDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",UserStatisticsDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerDaoImpl.class);
  addDao(""String_Node_Str"",NetworkRuleConfigDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerVMMapDaoImpl.class);
  addDao(""String_Node_Str"",DataCenterIpAddressDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupDaoImpl.class);
  addDao(""String_Node_Str"",IngressRuleDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupRulesDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmRulesetLogDaoImpl.class);
  addDao(""String_Node_Str"",AlertDaoImpl.class);
  addDao(""String_Node_Str"",CapacityDaoImpl.class);
  addDao(""String_Node_Str"",DomainDaoImpl.class);
  addDao(""String_Node_Str"",AccountDaoImpl.class);
  addDao(""String_Node_Str"",ResourceLimitDaoImpl.class);
  addDao(""String_Node_Str"",ResourceCountDaoImpl.class);
  addDao(""String_Node_Str"",UserAccountDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateHostDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateSwiftDaoImpl.class);
  addDao(""String_Node_Str"",UploadDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplatePoolDaoImpl.class);
  addDao(""String_Node_Str"",LaunchPermissionDaoImpl.class);
  addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  info=addDao(""String_Node_Str"",VMTemplateDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",HighAvailabilityDaoImpl.class);
  addDao(""String_Node_Str"",ConsoleProxyDaoImpl.class);
  addDao(""String_Node_Str"",SecondaryStorageVmDaoImpl.class);
  addDao(""String_Node_Str"",ManagementServerHostDaoImpl.class);
  addDao(""String_Node_Str"",AgentUpgradeDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotDaoImpl.class);
  addDao(""String_Node_Str"",AsyncJobDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueItemDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSCategoryDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolHostDaoImpl.class);
  addDao(""String_Node_Str"",HostDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotPolicyDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotScheduleDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDaoImpl.class);
  addDao(""String_Node_Str"",CertificateDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDaoImpl.class);
  addDao(""String_Node_Str"",NetworkOfferingDaoImpl.class);
  addDao(""String_Node_Str"",NicDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",RemoteAccessVpnDaoImpl.class);
  addDao(""String_Node_Str"",VpnUserDaoImpl.class);
  addDao(""String_Node_Str"",ItWorkDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",PortForwardingRulesDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesCidrsDaoImpl.class);
  addDao(""String_Node_Str"",SSHKeyPairDaoImpl.class);
  addDao(""String_Node_Str"",UsageEventDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDetailsDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDetailsDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDirtyDaoImpl.class);
  addDao(""String_Node_Str"",OvsWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmFlowLogDaoImpl.class);
  addDao(""String_Node_Str"",GreTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelAccountDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolWorkDaoImpl.class);
  addDao(""String_Node_Str"",HostTagsDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDomainDaoImpl.class);
  addDao(""String_Node_Str"",KeystoreDaoImpl.class);
  addDao(""String_Node_Str"",DcDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SwiftDaoImpl.class);
  addDao(""String_Node_Str"",HostTransferMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectDaoImpl.class);
  addDao(""String_Node_Str"",InlineLoadBalancerNicMapDaoImpl.class);
  addDao(""String_Node_Str"",ElasticLbVmMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectAccountDaoImpl.class);
  addDao(""String_Node_Str"",ProjectInvitationDaoImpl.class);
  info=addDao(""String_Node_Str"",HypervisorCapabilitiesDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
}",0.995435945860875
106680,"@Override public boolean deleteSnapshotDirsForAccount(long accountId){
  List<VolumeVO> volumes=_volsDao.findByAccount(accountId);
  boolean success=true;
  for (  VolumeVO volume : volumes) {
    if (volume.getPoolId() == null) {
      continue;
    }
    Long volumeId=volume.getId();
    Long dcId=volume.getDataCenterId();
    if (_snapshotDao.listByVolumeIdIncludingRemoved(volumeId).isEmpty()) {
      continue;
    }
    List<HostVO> ssHosts=_hostDao.listSecondaryStorageHosts(dcId);
    SwiftTO swift=getSwiftTO(null);
    if (swift == null) {
      for (      HostVO ssHost : ssHosts) {
        DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(null,ssHost.getStorageUrl(),dcId,accountId,volumeId,""String_Node_Str"",true);
        Answer answer=null;
        try {
          answer=_agentMgr.sendToSSVM(dcId,cmd);
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ssHost.getStorageUrl());
        }
        if ((answer != null) && answer.getResult()) {
          s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
        }
 else {
          success=false;
          if (answer != null) {
            s_logger.error(answer.getDetails());
          }
        }
      }
    }
 else {
      DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,""String_Node_Str"",dcId,accountId,volumeId,""String_Node_Str"",true);
      Answer answer=null;
      try {
        answer=_agentMgr.sendToSSVM(dcId,cmd);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
      if ((answer != null) && answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
      }
 else {
        success=false;
        if (answer != null) {
          s_logger.error(answer.getDetails());
        }
      }
    }
    List<SnapshotVO> snapshots=listSnapsforVolume(volumeId);
    for (    SnapshotVO snapshot : snapshots) {
      if (_snapshotDao.expunge(snapshot.getId())) {
        if (snapshot.getType() == Type.MANUAL) {
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.snapshot);
        }
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshot.getId(),snapshot.getName(),null,null,volume.getSize());
        _usageEventDao.persist(usageEvent);
      }
    }
  }
  return success;
}","@Override public boolean deleteSnapshotDirsForAccount(long accountId){
  List<VolumeVO> volumes=_volsDao.findByAccount(accountId);
  boolean success=true;
  for (  VolumeVO volume : volumes) {
    if (volume.getPoolId() == null) {
      continue;
    }
    Long volumeId=volume.getId();
    Long dcId=volume.getDataCenterId();
    if (_snapshotDao.listByVolumeIdIncludingRemoved(volumeId).isEmpty()) {
      continue;
    }
    List<HostVO> ssHosts=_hostDao.listSecondaryStorageHosts(dcId);
    SwiftTO swift=_swiftDao.getSwiftTO(null);
    if (swift == null) {
      for (      HostVO ssHost : ssHosts) {
        DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(null,ssHost.getStorageUrl(),dcId,accountId,volumeId,""String_Node_Str"",true);
        Answer answer=null;
        try {
          answer=_agentMgr.sendToSSVM(dcId,cmd);
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ssHost.getStorageUrl());
        }
        if ((answer != null) && answer.getResult()) {
          s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
        }
 else {
          success=false;
          if (answer != null) {
            s_logger.error(answer.getDetails());
          }
        }
      }
    }
 else {
      DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,""String_Node_Str"",dcId,accountId,volumeId,""String_Node_Str"",true);
      Answer answer=null;
      try {
        answer=_agentMgr.sendToSSVM(dcId,cmd);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
      if ((answer != null) && answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
      }
 else {
        success=false;
        if (answer != null) {
          s_logger.error(answer.getDetails());
        }
      }
    }
    List<SnapshotVO> snapshots=listSnapsforVolume(volumeId);
    for (    SnapshotVO snapshot : snapshots) {
      if (_snapshotDao.expunge(snapshot.getId())) {
        if (snapshot.getType() == Type.MANUAL) {
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.snapshot);
        }
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshot.getId(),snapshot.getName(),null,null,volume.getSize());
        _usageEventDao.persist(usageEvent);
      }
    }
  }
  return success;
}",0.998003992015968
106681,"@Override @DB public boolean destroySnapshotBackUp(long snapshotId){
  boolean success=false;
  String details;
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  String secondaryStoragePoolUrl=getSecondaryStorageURL(snapshot);
  Long dcId=snapshot.getDataCenterId();
  Long accountId=snapshot.getAccountId();
  Long volumeId=snapshot.getVolumeId();
  HypervisorType hvType=snapshot.getHypervisorType();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  if (backupOfSnapshot == null) {
    return true;
  }
  SwiftTO swift=getSwiftTO(null);
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,false);
  Answer answer=_agentMgr.sendToSSVM(dcId,cmd);
  if ((answer != null) && answer.getResult()) {
    snapshot.setBackupSnapshotId(null);
    _snapshotDao.update(snapshotId,snapshot);
    success=true;
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"";
    if (answer.getDetails() != null) {
      details+=answer.getDetails();
    }
    s_logger.error(details);
  }
  return success;
}","@Override @DB public boolean destroySnapshotBackUp(long snapshotId){
  boolean success=false;
  String details;
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  String secondaryStoragePoolUrl=getSecondaryStorageURL(snapshot);
  Long dcId=snapshot.getDataCenterId();
  Long accountId=snapshot.getAccountId();
  Long volumeId=snapshot.getVolumeId();
  HypervisorType hvType=snapshot.getHypervisorType();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  if (backupOfSnapshot == null) {
    return true;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(null);
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,false);
  Answer answer=_agentMgr.sendToSSVM(dcId,cmd);
  if ((answer != null) && answer.getResult()) {
    snapshot.setBackupSnapshotId(null);
    _snapshotDao.update(snapshotId,snapshot);
    success=true;
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"";
    if (answer.getDetails() != null) {
      details+=answer.getDetails();
    }
    s_logger.error(details);
  }
  return success;
}",0.9964463397299218
106682,"String downloadTemplateFromSwiftToSecondaryStorage(long dcId,long templateId){
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  VMTemplateSwiftVO tmpltSwift=_tmpltSwiftDao.findOneByTemplateId(templateId);
  if (tmpltSwift == null) {
    String errMsg=""String_Node_Str"" + templateId + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_snapshotMgr.getSwiftTO(tmpltSwift.getSwiftId());
  if (swift == null) {
    String errMsg=""String_Node_Str"" + tmpltSwift.getSwiftId() + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findSecondaryStorageHost(dcId);
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + dcId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secHost.getName(),dcId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
  try {
    _agentMgr.sendToSSVM(dcId,cmd);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}","String downloadTemplateFromSwiftToSecondaryStorage(long dcId,long templateId){
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  VMTemplateSwiftVO tmpltSwift=_tmpltSwiftDao.findOneByTemplateId(templateId);
  if (tmpltSwift == null) {
    String errMsg=""String_Node_Str"" + templateId + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(tmpltSwift.getSwiftId());
  if (swift == null) {
    String errMsg=""String_Node_Str"" + tmpltSwift.getSwiftId() + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findSecondaryStorageHost(dcId);
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + dcId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secHost.getName(),dcId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
  try {
    _agentMgr.sendToSSVM(dcId,cmd);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}",0.9935040122277417
106683,"String uploadTemplateToSwiftFromSecondaryStorage(VMTemplateHostVO templateHostRef){
  Long templateId=templateHostRef.getTemplateId();
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_snapshotMgr.getSwiftTO(null);
  if (swift == null) {
    String errMsg=""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findById(templateHostRef.getHostId());
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + templateHostRef.getHostId();
    s_logger.warn(errMsg);
    return errMsg;
  }
  uploadTemplateToSwiftFromSecondaryStorageCommand cmd=new uploadTemplateToSwiftFromSecondaryStorageCommand(swift,secHost.getName(),secHost.getDataCenterId(),template.getAccountId(),templateId,_primaryStorageDownloadWait);
  Answer answer=null;
  try {
    answer=_agentMgr.sendToSSVM(secHost.getDataCenterId(),cmd);
    if (answer == null || !answer.getResult()) {
      String errMsg=""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails());
      s_logger.warn(errMsg);
      throw new CloudRuntimeException(errMsg);
    }
    VMTemplateSwiftVO tmpltSwift=new VMTemplateSwiftVO(swift.getId(),secHost.getId(),new Date(),templateHostRef.getSize(),templateHostRef.getPhysicalSize());
    _tmpltSwiftDao.persist(tmpltSwift);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}","String uploadTemplateToSwiftFromSecondaryStorage(VMTemplateHostVO templateHostRef){
  Long templateId=templateHostRef.getTemplateId();
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(null);
  if (swift == null) {
    String errMsg=""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findById(templateHostRef.getHostId());
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + templateHostRef.getHostId();
    s_logger.warn(errMsg);
    return errMsg;
  }
  uploadTemplateToSwiftFromSecondaryStorageCommand cmd=new uploadTemplateToSwiftFromSecondaryStorageCommand(swift,secHost.getName(),secHost.getDataCenterId(),template.getAccountId(),templateId,_primaryStorageDownloadWait);
  Answer answer=null;
  try {
    answer=_agentMgr.sendToSSVM(secHost.getDataCenterId(),cmd);
    if (answer == null || !answer.getResult()) {
      String errMsg=""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails());
      s_logger.warn(errMsg);
      throw new CloudRuntimeException(errMsg);
    }
    VMTemplateSwiftVO tmpltSwift=new VMTemplateSwiftVO(swift.getId(),secHost.getId(),new Date(),templateHostRef.getSize(),templateHostRef.getPhysicalSize());
    _tmpltSwiftDao.persist(tmpltSwift);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}",0.9946891596376132
106684,"void swiftTemplateSync(){
  GlobalLock swiftTemplateSyncLock=GlobalLock.getInternLock(""String_Node_Str"");
  try {
    if (swiftTemplateSyncLock.lock(3)) {
      try {
        List<VMTemplateHostVO> templtHostRefs=_tmpltHostDao.listByState(VMTemplateHostVO.Status.DOWNLOADED);
        List<VMTemplateSwiftVO> templtSwiftRefs=_tmpltSwiftDao.listAll();
        for (        VMTemplateHostVO templtHostRef : templtHostRefs) {
          boolean found=false;
          for (          VMTemplateSwiftVO templtSwiftRef : templtSwiftRefs) {
            if (templtHostRef.getTemplateId() == templtSwiftRef.getTemplateId()) {
              found=true;
              break;
            }
          }
          if (!found) {
            try {
              uploadTemplateToSwiftFromSecondaryStorage(templtHostRef);
            }
 catch (            Exception e) {
              s_logger.debug(""String_Node_Str"" + templtHostRef.getTemplateId() + ""String_Node_Str""+ e.toString());
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"" + e.toString(),e);
      }
 finally {
        swiftTemplateSyncLock.unlock();
      }
    }
  }
  finally {
    swiftTemplateSyncLock.releaseRef();
  }
}","void swiftTemplateSync(){
  Boolean swiftEnable=Boolean.valueOf(_configDao.getValue(Config.SwiftEnable.key()));
  if (!swiftEnable) {
    return;
  }
  GlobalLock swiftTemplateSyncLock=GlobalLock.getInternLock(""String_Node_Str"");
  try {
    if (swiftTemplateSyncLock.lock(3)) {
      try {
        List<VMTemplateHostVO> templtHostRefs=_tmpltHostDao.listByState(VMTemplateHostVO.Status.DOWNLOADED);
        List<VMTemplateSwiftVO> templtSwiftRefs=_tmpltSwiftDao.listAll();
        for (        VMTemplateHostVO templtHostRef : templtHostRefs) {
          boolean found=false;
          for (          VMTemplateSwiftVO templtSwiftRef : templtSwiftRefs) {
            if (templtHostRef.getTemplateId() == templtSwiftRef.getTemplateId()) {
              found=true;
              break;
            }
          }
          if (!found) {
            try {
              uploadTemplateToSwiftFromSecondaryStorage(templtHostRef);
            }
 catch (            Exception e) {
              s_logger.debug(""String_Node_Str"" + templtHostRef.getTemplateId() + ""String_Node_Str""+ e.toString());
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"" + e.toString(),e);
      }
 finally {
        swiftTemplateSyncLock.unlock();
      }
    }
  }
  finally {
    swiftTemplateSyncLock.releaseRef();
  }
}",0.9521235521235522
106685,"@Override public boolean start(){
  _swiftTemplateSyncExecutor.scheduleAtFixedRate(getSwiftTemplateSyncTask(),120,300,TimeUnit.SECONDS);
  return true;
}","@Override public boolean start(){
  _swiftTemplateSyncExecutor.scheduleAtFixedRate(getSwiftTemplateSyncTask(),60,60,TimeUnit.SECONDS);
  return true;
}",0.9802631578947368
106686,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  final Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _routerTemplateId=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1);
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  HostTemplateStatesSearch=_tmpltHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _storagePoolMaxWaitSeconds=NumbersUtil.parseInt(configDao.getValue(Config.StoragePoolMaxWaitSeconds.key()),3600);
  _preloadExecutor=Executors.newFixedThreadPool(8,new NamedThreadFactory(""String_Node_Str""));
  _swiftTemplateSyncExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return false;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _routerTemplateId=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1);
  String value=_configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  HostTemplateStatesSearch=_tmpltHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _storagePoolMaxWaitSeconds=NumbersUtil.parseInt(_configDao.getValue(Config.StoragePoolMaxWaitSeconds.key()),3600);
  _preloadExecutor=Executors.newFixedThreadPool(8,new NamedThreadFactory(""String_Node_Str""));
  _swiftTemplateSyncExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return false;
}",0.938286399041342
106687,"@Override public void processConnect(HostVO agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long agentId=agent.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  if (startup.getHypervisorType() != HypervisorType.XenServer) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  HostVO host=_hostDao.findById(agentId);
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  if (cluster.getGuid() == null) {
    cluster.setGuid(startup.getPool());
    _clusterDao.update(cluster.getId(),cluster);
  }
 else   if (!cluster.getGuid().equals(startup.getPool())) {
    String msg=""String_Node_Str"" + cluster.getId() + ""String_Node_Str""+ cluster.getGuid()+ ""String_Node_Str""+ cmd.getPod();
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  String resource=null;
  Map<String,String> details=startup.getHostDetails();
  String prodBrand=details.get(""String_Node_Str"").trim();
  String prodVersion=details.get(""String_Node_Str"").trim();
  if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XcpServerResource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer56Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer60Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    String prodVersionTextShort=details.get(""String_Node_Str"").trim();
    if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56SP2Resource.class.getName();
    }
 else     if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56FP1Resource.class.getName();
    }
  }
  if (resource == null) {
    String msg=""String_Node_Str"" + prodBrand + ""String_Node_Str""+ prodVersion;
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  if (!resource.equals(host.getResource())) {
    host.setResource(resource);
    host.setSetup(false);
    _hostDao.update(agentId,host);
    String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getResource()+ ""String_Node_Str""+ resource;
    s_logger.debug(msg);
    throw new HypervisorVersionChangedException(msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + agentId);
  }
  HostEnvironment env=new HostEnvironment();
  SetupCommand setup=new SetupCommand(env);
  if (_setupMultipath) {
    setup.setMultipathOn();
  }
  if (!host.isSetup()) {
    setup.setNeedSetup(true);
  }
  try {
    SetupAnswer answer=(SetupAnswer)_agentMgr.send(agentId,setup);
    if (answer != null && answer.getResult()) {
      host.setSetup(true);
      host.setLastPinged((System.currentTimeMillis() >> 10) - 5 * 60);
      _hostDao.update(host.getId(),host);
      if (answer.needReconnect()) {
        throw new ConnectionException(false,""String_Node_Str"");
      }
      return;
    }
 else {
      s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str""+ ((answer != null) ? answer.getDetails() : ""String_Node_Str""));
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
  throw new ConnectionException(true,""String_Node_Str"");
}","@Override public void processConnect(HostVO agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long agentId=agent.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  if (startup.getHypervisorType() != HypervisorType.XenServer) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  HostVO host=_hostDao.findById(agentId);
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  if (cluster.getGuid() == null) {
    cluster.setGuid(startup.getPool());
    _clusterDao.update(cluster.getId(),cluster);
  }
 else   if (!cluster.getGuid().equals(startup.getPool())) {
    String msg=""String_Node_Str"" + cluster.getId() + ""String_Node_Str""+ cluster.getGuid()+ ""String_Node_Str""+ cmd.getPod();
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  String resource=null;
  Map<String,String> details=startup.getHostDetails();
  String prodBrand=details.get(""String_Node_Str"").trim();
  String prodVersion=details.get(""String_Node_Str"").trim();
  if (prodBrand.equals(""String_Node_Str"") && (prodVersion.equals(""String_Node_Str"") || prodVersion.equals(""String_Node_Str""))) {
    resource=XcpServerResource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer56Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer60Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    String prodVersionTextShort=details.get(""String_Node_Str"").trim();
    if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56SP2Resource.class.getName();
    }
 else     if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56FP1Resource.class.getName();
    }
  }
  if (resource == null) {
    String msg=""String_Node_Str"" + prodBrand + ""String_Node_Str""+ prodVersion;
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  if (!resource.equals(host.getResource())) {
    host.setResource(resource);
    host.setSetup(false);
    _hostDao.update(agentId,host);
    String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getResource()+ ""String_Node_Str""+ resource;
    s_logger.debug(msg);
    throw new HypervisorVersionChangedException(msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + agentId);
  }
  HostEnvironment env=new HostEnvironment();
  SetupCommand setup=new SetupCommand(env);
  if (_setupMultipath) {
    setup.setMultipathOn();
  }
  if (!host.isSetup()) {
    setup.setNeedSetup(true);
  }
  try {
    SetupAnswer answer=(SetupAnswer)_agentMgr.send(agentId,setup);
    if (answer != null && answer.getResult()) {
      host.setSetup(true);
      host.setLastPinged((System.currentTimeMillis() >> 10) - 5 * 60);
      _hostDao.update(host.getId(),host);
      if (answer.needReconnect()) {
        throw new ConnectionException(false,""String_Node_Str"");
      }
      return;
    }
 else {
      s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str""+ ((answer != null) ? answer.getDetails() : ""String_Node_Str""));
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
  throw new ConnectionException(true,""String_Node_Str"");
}",0.9940086387069806
106688,"private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts);
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}",0.9954504094631484
106689,"private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts);
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}",0.9954504094631484
106690,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  fixForeignKeys(conn);
}",0.8378378378378378
106691,"public UserVmData newUserVmData(UserVm userVm){
  UserVmData userVmData=new UserVmData();
  userVmData.setId(userVm.getId());
  userVmData.setName(userVm.getInstanceName());
  userVmData.setCreated(userVm.getCreated());
  userVmData.setGuestOsId(userVm.getGuestOSId());
  userVmData.setHaEnable(userVm.isHaEnabled());
  if (userVm.getState() != null) {
    userVmData.setState(userVm.getState().toString());
  }
  if (userVm.getDisplayName() != null) {
    userVmData.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmData.setDisplayName(userVm.getHostName());
  }
  userVmData.setDomainId(userVm.getDomainId());
  if (userVm.getHypervisorType() != null) {
    userVmData.setHypervisor(userVm.getHypervisorType().toString());
  }
  if (userVm.getPassword() != null) {
    userVmData.setPassword(userVm.getPassword());
  }
  return userVmData;
}","public UserVmData newUserVmData(UserVm userVm){
  UserVmData userVmData=new UserVmData();
  userVmData.setId(userVm.getId());
  userVmData.setName(userVm.getHostName());
  userVmData.setCreated(userVm.getCreated());
  userVmData.setGuestOsId(userVm.getGuestOSId());
  userVmData.setHaEnable(userVm.isHaEnabled());
  if (userVm.getState() != null) {
    userVmData.setState(userVm.getState().toString());
  }
  if (userVm.getDisplayName() != null) {
    userVmData.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmData.setDisplayName(userVm.getHostName());
  }
  userVmData.setDomainId(userVm.getDomainId());
  if (userVm.getHypervisorType() != null) {
    userVmData.setHypervisor(userVm.getHypervisorType().toString());
  }
  if (userVm.getPassword() != null) {
    userVmData.setPassword(userVm.getPassword());
  }
  return userVmData;
}",0.9929824561403509
106692,"@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing);
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId());
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _lbDao.remove(newRule.getId());
      txn.commit();
    }
  }
}","@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing);
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId());
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success && newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _lbDao.remove(newRule.getId());
      txn.commit();
    }
  }
}",0.9966306082638766
106693,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public StaticNatRule createStaticNatRule(StaticNatRule rule,boolean openFirewall) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isSourceNat() || !ipAddress.isOneToOneNat() || ipAddress.getAssociatedWithVmId() == null) {
    throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress.getAddress());
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.StaticNat);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  String dstIp=_networkMgr.getIpInNetwork(ipAddress.getAssociatedWithVmId(),networkId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  FirewallRuleVO newRule=new FirewallRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,rule.getPurpose(),null,null,null,null);
  newRule=_firewallDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),0,newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    StaticNatRule staticNatRule=new StaticNatRuleImpl(newRule,dstIp);
    return staticNatRule;
  }
 catch (  Exception e) {
    txn.start();
    _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
    _forwardingDao.remove(newRule.getId());
    txn.commit();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public StaticNatRule createStaticNatRule(StaticNatRule rule,boolean openFirewall) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isSourceNat() || !ipAddress.isOneToOneNat() || ipAddress.getAssociatedWithVmId() == null) {
    throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress.getAddress());
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.StaticNat);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  String dstIp=_networkMgr.getIpInNetwork(ipAddress.getAssociatedWithVmId(),networkId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  FirewallRuleVO newRule=new FirewallRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,rule.getPurpose(),null,null,null,null);
  newRule=_firewallDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),0,newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    StaticNatRule staticNatRule=new StaticNatRuleImpl(newRule,dstIp);
    return staticNatRule;
  }
 catch (  Exception e) {
    if (newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _forwardingDao.remove(newRule.getId());
      txn.commit();
    }
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}",0.991959207687782
106694,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public PortForwardingRule createPortForwardingRule(PortForwardingRule rule,Long vmId,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.PortForwarding);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  if (rule.getDestinationPortStart() > rule.getDestinationPortEnd()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((rule.getDestinationPortEnd() - rule.getDestinationPortStart()) != (rule.getSourcePortEnd() - rule.getSourcePortStart())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVm vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
 else {
    checkRuleAndUserVm(rule,vm,caller);
  }
  Ip dstIp=rule.getDestinationIpAddress();
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null || guestNic.getIp4Address() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    dstIp=new Ip(guestNic.getIp4Address());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PortForwardingRuleVO newRule=new PortForwardingRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),dstIp,rule.getDestinationPortStart(),rule.getDestinationPortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,vmId);
  newRule=_forwardingDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),ipAddress.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    txn.start();
    _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
    _forwardingDao.remove(newRule.getId());
    txn.commit();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + ipAddrId,e);
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public PortForwardingRule createPortForwardingRule(PortForwardingRule rule,Long vmId,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.PortForwarding);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  if (rule.getDestinationPortStart() > rule.getDestinationPortEnd()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((rule.getDestinationPortEnd() - rule.getDestinationPortStart()) != (rule.getSourcePortEnd() - rule.getSourcePortStart())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVm vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
 else {
    checkRuleAndUserVm(rule,vm,caller);
  }
  Ip dstIp=rule.getDestinationIpAddress();
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null || guestNic.getIp4Address() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    dstIp=new Ip(guestNic.getIp4Address());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PortForwardingRuleVO newRule=new PortForwardingRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),dstIp,rule.getDestinationPortStart(),rule.getDestinationPortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,vmId);
  newRule=_forwardingDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),ipAddress.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    if (newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _forwardingDao.remove(newRule.getId());
      txn.commit();
    }
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + ipAddrId,e);
  }
}",0.9937623611745018
106695,"@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
  getIp(nic,dc,vm,network);
  if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Managed);
  }
  return nic;
}","@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
  getIp(nic,dc,vm,network);
  if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else   if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {
    nic.setStrategy(ReservationStrategy.Managed);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  return nic;
}",0.9152
106696,"@Override public void execute(){
  List<? extends ResourceLimit> result=_accountService.searchForLimits(this);
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimit limit : result) {
    ResourceLimitResponse resourceLimitResponse=_responseGenerator.createResourceLimitResponse(limit);
    resourceLimitResponse.setObjectName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  List<? extends ResourceLimit> result=_accountService.searchForLimits(id,accountName,domainId,resourceType,this.getStartIndex(),this.getPageSizeVal());
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimit limit : result) {
    ResourceLimitResponse resourceLimitResponse=_responseGenerator.createResourceLimitResponse(limit);
    resourceLimitResponse.setObjectName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.9466192170818504
106697,"@Override public void execute(){
  ResourceLimit result=_accountService.updateResourceLimit(this);
  if (result != null || (result == null && max != null && max.longValue() == -1L)) {
    ResourceLimitResponse response=_responseGenerator.createResourceLimitResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  ResourceLimit result=_accountService.updateResourceLimit(accountName,domainId,resourceType,max);
  if (result != null || (result == null && max != null && max.longValue() == -1L)) {
    ResourceLimitResponse response=_responseGenerator.createResourceLimitResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9564293304994688
106698,"/** 
 * Search for resource limits for the given id and/or account and/or type and/or domain.
 * @param cmd the command wrapping the id, type, account, and domain
 * @return a list of limits that match the criteria
 */
List<? extends ResourceLimit> searchForLimits(ListResourceLimitsCmd cmd);","/** 
 * Search for resource limits for the given id and/or account and/or type and/or domain.
 * @param id TODO
 * @param accountName TODO
 * @param domainId TODO
 * @param type TODO
 * @param startIndex TODO
 * @param pageSizeVal TODO
 * @return a list of limits that match the criteria
 */
List<? extends ResourceLimit> searchForLimits(Long id,String accountName,Long domainId,Integer type,Long startIndex,Long pageSizeVal);",0.5988857938718662
106699,"/** 
 * Updates an existing resource limit with the specified details. If a limit doesn't exist, will create one.
 * @param cmd the command that wraps the domainId, accountId, type, and max parameters
 * @return the updated/created resource limit
 */
ResourceLimit updateResourceLimit(UpdateResourceLimitCmd cmd);","/** 
 * Updates an existing resource limit with the specified details. If a limit doesn't exist, will create one.
 * @param accountName TODO
 * @param domainId TODO
 * @param typeId TODO
 * @param max TODO
 * @return the updated/created resource limit
 */
ResourceLimit updateResourceLimit(String accountName,Long domainId,int typeId,Long max);",0.441400304414003
106700,"@Override public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  boolean sendPasswordAndVmData=true;
  boolean sendDnsDhcpData=true;
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && network.isDefault()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    stopDisconnectedRouters(disconnectedRouters,true,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && network.isDefault()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    stopDisconnectedRouters(disconnectedRouters,true,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}",0.9891189360737496
106701,"protected StoragePoolDaoImpl(){
  AllFieldSearch=createSearchBuilder();
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getName(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getUuid(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getHostAddress(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPath(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPodId(),Op.EQ);
  AllFieldSearch.done();
  DcPodSearch=createSearchBuilder();
  DcPodSearch.and(""String_Node_Str"",DcPodSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.done();
  DcPodAnyClusterSearch=createSearchBuilder();
  DcPodAnyClusterSearch.and(""String_Node_Str"",DcPodAnyClusterSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.and().op(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodAnyClusterSearch.or(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.cp();
  DcPodAnyClusterSearch.done();
  DeleteLvmSearch=createSearchBuilder();
  DeleteLvmSearch.and(""String_Node_Str"",DeleteLvmSearch.entity().getId(),SearchCriteria.Op.IN);
  DeleteLvmSearch.and().op(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.or(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.cp();
  DeleteLvmSearch.done();
  MaintenanceCountSearch=createSearchBuilder(Long.class);
  MaintenanceCountSearch.and(""String_Node_Str"",MaintenanceCountSearch.entity().getId(),SearchCriteria.Op.EQ);
  MaintenanceCountSearch.select(null,Func.COUNT,null);
  MaintenanceCountSearch.and(""String_Node_Str"",MaintenanceCountSearch.entity().getStatus(),SearchCriteria.Op.IN);
  MaintenanceCountSearch.done();
  _detailsDao=ComponentLocator.inject(StoragePoolDetailsDaoImpl.class);
}","protected StoragePoolDaoImpl(){
  AllFieldSearch=createSearchBuilder();
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getName(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getUuid(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getHostAddress(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPath(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPodId(),Op.EQ);
  AllFieldSearch.done();
  DcPodSearch=createSearchBuilder();
  DcPodSearch.and(""String_Node_Str"",DcPodSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.done();
  DcPodAnyClusterSearch=createSearchBuilder();
  DcPodAnyClusterSearch.and(""String_Node_Str"",DcPodAnyClusterSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.and().op(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodAnyClusterSearch.or(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.cp();
  DcPodAnyClusterSearch.done();
  DeleteLvmSearch=createSearchBuilder();
  DeleteLvmSearch.and(""String_Node_Str"",DeleteLvmSearch.entity().getId(),SearchCriteria.Op.IN);
  DeleteLvmSearch.and().op(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.or(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.cp();
  DeleteLvmSearch.done();
  StatusCountSearch=createSearchBuilder(Long.class);
  StatusCountSearch.and(""String_Node_Str"",StatusCountSearch.entity().getStatus(),SearchCriteria.Op.IN);
  StatusCountSearch.select(null,Func.COUNT,null);
  StatusCountSearch.done();
  _detailsDao=ComponentLocator.inject(StoragePoolDetailsDaoImpl.class);
}",0.9400814426992438
106702,"@Override public HostResponse createHostResponse(Host host){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getId());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterId());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getDataCenterId());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodId());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
  if (guestOSCategory != null) {
    hostResponse.setOsCategoryId(guestOSCategory.getId());
    hostResponse.setOsCategoryName(guestOSCategory.getName());
  }
  hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
  if (host.getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
    if (pod != null) {
      hostResponse.setPodName(pod.getName());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if ((host.getCpus() != null) && (host.getSpeed() != null)) {
    int cpu=0;
    String cpuAlloc=null;
    List<UserVmVO> instances=ApiDBUtils.listUserVMsByHostId(host.getId());
    for (    UserVmVO vm : instances) {
      ServiceOffering so=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
      cpu+=so.getCpu() * so.getSpeed();
    }
    cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
    hostResponse.setCpuAllocated(cpuAlloc);
    String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
    hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
  }
  String cpuUsed=null;
  HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
  if (hostStats != null) {
    float cpuUtil=(float)hostStats.getCpuUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    hostResponse.setCpuUsed(cpuUsed);
    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
  }
  if (host.getType() == Host.Type.Routing) {
    hostResponse.setMemoryTotal(host.getTotalMemory());
    Long mem=ApiDBUtils.getMemoryUsagebyHost(host.getId());
    hostResponse.setMemoryAllocated(mem);
    hostResponse.setMemoryUsed(mem);
    hostResponse.setHostTags(ApiDBUtils.getHostTags(host.getId()));
    hostResponse.setHypervisorVersion(host.getHypervisorVersion());
  }
 else   if (host.getType().toString().equals(""String_Node_Str"")) {
    hostResponse.setDiskSizeTotal(host.getTotalSize());
    hostResponse.setDiskSizeAllocated(0L);
  }
  if (host.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
    hostResponse.setClusterName(cluster.getName());
    hostResponse.setClusterType(cluster.getClusterType().toString());
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
  Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
  if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
    String events=""String_Node_Str"";
    Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
    while (iter.hasNext()) {
      com.cloud.host.Status.Event event=iter.next();
      events+=event.toString();
      if (iter.hasNext()) {
        events+=""String_Node_Str"";
      }
    }
    hostResponse.setEvents(events);
  }
  hostResponse.setAllocationState(host.getHostAllocationState().toString());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}","@Override public HostResponse createHostResponse(Host host){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getId());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterId());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getDataCenterId());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodId());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
  if (guestOSCategory != null) {
    hostResponse.setOsCategoryId(guestOSCategory.getId());
    hostResponse.setOsCategoryName(guestOSCategory.getName());
  }
  hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
  if (host.getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
    if (pod != null) {
      hostResponse.setPodName(pod.getName());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    Long mem=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_MEMORY);
    Long cpu=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_CPU);
    hostResponse.setMemoryAllocated(mem);
    hostResponse.setMemoryTotal(host.getTotalMemory());
    hostResponse.setHostTags(ApiDBUtils.getHostTags(host.getId()));
    hostResponse.setHypervisorVersion(host.getHypervisorVersion());
    String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
    hostResponse.setCpuAllocated(cpuAlloc);
    String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
    hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    String cpuUsed=null;
    HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
    if (hostStats != null) {
      float cpuUtil=(float)hostStats.getCpuUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      hostResponse.setCpuUsed(cpuUsed);
      hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
      hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
      hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
    }
  }
  if (host.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
    hostResponse.setClusterName(cluster.getName());
    hostResponse.setClusterType(cluster.getClusterType().toString());
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
  Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
  if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
    String events=""String_Node_Str"";
    Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
    while (iter.hasNext()) {
      com.cloud.host.Status.Event event=iter.next();
      events+=event.toString();
      if (iter.hasNext()) {
        events+=""String_Node_Str"";
      }
    }
    hostResponse.setEvents(events);
  }
  hostResponse.setAllocationState(host.getHostAllocationState().toString());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}",0.7761702127659574
106703,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listRoutingHostsByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  s_logger.debug(""String_Node_Str"" + msId + ""String_Node_Str""+ hostsToGive+ ""String_Node_Str""+ allHosts.size()+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            s_logger.trace(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + msId + ""String_Node_Str""+ hostsToReturn.size()+ ""String_Node_Str"");
  return hostsToReturn;
}",0.9239811912225704
106704,"protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}","protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ oldState);
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}",0.9986222099751998
106705,"private boolean powerOffNoCheck() throws Exception {
  ManagedObjectReference morTask=_context.getService().powerOffVM_Task(_mor);
  String result=_context.getServiceUtil().waitForTask(morTask);
  if (result.equals(""String_Node_Str"")) {
    _context.waitForTaskProgressDone(morTask);
    return true;
  }
 else {
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}","private boolean powerOffNoCheck() throws Exception {
  ManagedObjectReference morTask=_context.getService().powerOffVM_Task(_mor);
  String result=_context.getServiceUtil().waitForTask(morTask);
  if (result.equals(""String_Node_Str"")) {
    _context.waitForTaskProgressDone(morTask);
    long startTick=System.currentTimeMillis();
    while (getPowerState() != VirtualMachinePowerState.poweredOff && System.currentTimeMillis() - startTick < 5000) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    return true;
  }
 else {
    if (getPowerState() == VirtualMachinePowerState.poweredOff) {
      s_logger.info(""String_Node_Str"");
      return true;
    }
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}",0.6504854368932039
106706,"protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          _vms.remove(vm);
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}","protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}",0.9543234702671646
106707,"public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,String vmdkDatastorePathChain[],ManagedObjectReference morDs,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(morDs);
  backingInfo.setFileName(vmdkDatastorePathChain[0]);
  backingInfo.setDiskMode(VirtualDiskMode.persistent.toString());
  if (vmdkDatastorePathChain.length > 1) {
    String[] parentDisks=new String[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,morDs,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}","public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,String vmdkDatastorePathChain[],ManagedObjectReference morDs,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(morDs);
  backingInfo.setFileName(vmdkDatastorePathChain[0]);
  backingInfo.setDiskMode(VirtualDiskMode.persistent.toString());
  if (vmdkDatastorePathChain.length > 1) {
    String[] parentDisks=new String[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,morDs,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}",0.9441964285714286
106708,"public static VirtualDevice prepareNicDevice(VirtualMachineMO vmMo,ManagedObjectReference morNetwork,VirtualEthernetCardType deviceType,String portGroupName,String macAddress,int deviceNumber,int contextNumber,boolean conntected,boolean connectOnStart) throws Exception {
  VirtualEthernetCard nic;
switch (deviceType) {
case E1000:
    nic=new VirtualE1000();
  break;
case PCNet32:
nic=new VirtualPCNet32();
break;
case Vmxnet2:
nic=new VirtualVmxnet2();
break;
case Vmxnet3:
nic=new VirtualVmxnet3();
break;
default :
assert(false);
nic=new VirtualE1000();
}
VirtualEthernetCardNetworkBackingInfo nicBacking=new VirtualEthernetCardNetworkBackingInfo();
nicBacking.setDeviceName(portGroupName);
nicBacking.setNetwork(morNetwork);
nic.setBacking(nicBacking);
VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
connectInfo.setAllowGuestControl(true);
connectInfo.setConnected(conntected);
connectInfo.setStartConnected(connectOnStart);
nic.setAddressType(""String_Node_Str"");
nic.setConnectable(connectInfo);
nic.setMacAddress(macAddress);
nic.setControllerKey(vmMo.getPCIDeviceControllerKey());
if (deviceNumber < 0) deviceNumber=vmMo.getNextPCIDeviceNumber();
nic.setUnitNumber(deviceNumber);
nic.setKey(-contextNumber);
return nic;
}","public static VirtualDevice prepareNicDevice(VirtualMachineMO vmMo,ManagedObjectReference morNetwork,VirtualEthernetCardType deviceType,String portGroupName,String macAddress,int deviceNumber,int contextNumber,boolean conntected,boolean connectOnStart) throws Exception {
  VirtualEthernetCard nic;
switch (deviceType) {
case E1000:
    nic=new VirtualE1000();
  break;
case PCNet32:
nic=new VirtualPCNet32();
break;
case Vmxnet2:
nic=new VirtualVmxnet2();
break;
case Vmxnet3:
nic=new VirtualVmxnet3();
break;
default :
assert(false);
nic=new VirtualE1000();
}
VirtualEthernetCardNetworkBackingInfo nicBacking=new VirtualEthernetCardNetworkBackingInfo();
nicBacking.setDeviceName(portGroupName);
nicBacking.setNetwork(morNetwork);
nic.setBacking(nicBacking);
VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
connectInfo.setAllowGuestControl(true);
connectInfo.setConnected(conntected);
connectInfo.setStartConnected(connectOnStart);
nic.setAddressType(""String_Node_Str"");
nic.setConnectable(connectInfo);
nic.setMacAddress(macAddress);
nic.setUnitNumber(deviceNumber);
nic.setKey(-contextNumber);
return nic;
}",0.9169463087248322
106709,"@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}","@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getSerializedErrorMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}",0.9811046511627908
106710,"private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
          completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
        }
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}","private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
          completeAsyncJob(item.getContentId(),2,0,getResetResultResponse(""String_Node_Str""));
        }
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}",0.9933230611196712
106711,"private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + item.toString());
      }
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultMessage(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}","private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + item.toString());
      }
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultResponse(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}",0.8735806207418623
106712,"@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
              completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
            }
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}","@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
              completeAsyncJob(item.getContentId(),2,0,getResetResultResponse(""String_Node_Str""));
            }
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}",0.9957502451781628
106713,"@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}","@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getSerializedErrorMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}",0.9792663476874004
106714,"@Override public Integer getNetworkRate(long networkId,Long vmId){
  VMInstanceVO vm=null;
  if (vmId != null) {
    vm=_vmDao.findById(vmId);
  }
  Network network=getNetwork(networkId);
  NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  boolean isUserVmsDefaultNetwork=false;
  boolean isDomRGuestOrPublicNetwork=false;
  if (vm != null) {
    if (vm.getType() == Type.User && network.isDefault()) {
      isUserVmsDefaultNetwork=true;
    }
 else     if (vm.getType() == Type.DomainRouter && networkOffering.getTrafficType() == TrafficType.Public && networkOffering.getGuestType() == null) {
      isDomRGuestOrPublicNetwork=true;
    }
  }
  if (isUserVmsDefaultNetwork || isDomRGuestOrPublicNetwork) {
    return _configMgr.getServiceOfferingNetworkRate(vm.getServiceOfferingId());
  }
 else {
    return _configMgr.getNetworkOfferingNetworkRate(networkOffering.getId());
  }
}","@Override public Integer getNetworkRate(long networkId,Long vmId){
  VMInstanceVO vm=null;
  if (vmId != null) {
    vm=_vmDao.findById(vmId);
  }
  Network network=getNetwork(networkId);
  NetworkOffering ntwkOff=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  boolean isUserVmsDefaultNetwork=false;
  boolean isDomRGuestOrPublicNetwork=false;
  if (vm != null) {
    if (vm.getType() == Type.User && network.isDefault()) {
      isUserVmsDefaultNetwork=true;
    }
 else     if (vm.getType() == Type.DomainRouter && ((ntwkOff.getTrafficType() == TrafficType.Public && ntwkOff.getGuestType() == null) || (ntwkOff.getGuestType() != null && ntwkOff.getTrafficType() == TrafficType.Guest))) {
      isDomRGuestOrPublicNetwork=true;
    }
  }
  if (isUserVmsDefaultNetwork || isDomRGuestOrPublicNetwork) {
    return _configMgr.getServiceOfferingNetworkRate(vm.getServiceOfferingId());
  }
 else {
    return _configMgr.getNetworkOfferingNetworkRate(ntwkOff.getId());
  }
}",0.9107981220657276
106715,"private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=""String_Node_Str"";
  if (isISO) {
    desc=""String_Node_Str"";
  }
  eventId=eventId == null ? 0 : eventId;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.values());
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}","private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}",0.9761668321747764
106716,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _url=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _dcId=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _guid=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  if (value != null)   _cpuOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveCpu=true;
  String[] tokens=_guid.split(""String_Node_Str"");
  _vCenterAddress=tokens[1];
  _morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  _morHyperHost.setType(hostTokens[0]);
  _morHyperHost.set_value(hostTokens[1]);
  VmwareContext context=getServiceContext();
  try {
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  _privateNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _publicNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _guestNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + _privateNetworkVSwitchName + ""String_Node_Str""+ _publicNetworkVSwitchName+ ""String_Node_Str""+ _guestNetworkVSwitchName);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _url=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _dcId=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _guid=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  if (value != null)   _cpuOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveCpu=true;
  value=(String)params.get(""String_Node_Str"");
  if (value != null)   _memOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveMem=true;
  String[] tokens=_guid.split(""String_Node_Str"");
  _vCenterAddress=tokens[1];
  _morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  _morHyperHost.setType(hostTokens[0]);
  _morHyperHost.set_value(hostTokens[1]);
  VmwareContext context=getServiceContext();
  try {
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  _privateNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _publicNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _guestNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + _privateNetworkVSwitchName + ""String_Node_Str""+ _publicNetworkVSwitchName+ ""String_Node_Str""+ _guestNetworkVSwitchName);
  return true;
}",0.9422161794697484
106717,"public static Pair<ManagedObjectReference,String> prepareGuestNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
 else {
    hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
  ManagedObjectReference morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareGuestNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}","public static Pair<ManagedObjectReference,String> prepareGuestNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareGuestNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}",0.9474982864976011
106718,"public static synchronized Pair<ManagedObjectReference,String> preparePublicNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
 else {
    hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
  ManagedObjectReference morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    preparePublicNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}","public static synchronized Pair<ManagedObjectReference,String> preparePublicNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    preparePublicNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}",0.9475557989867178
106719,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}",0.9408029031526424
106720,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}",0.9408029031526424
106721,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}",0.9408029031526424
106722,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9928205128205128
106723,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9928205128205128
106724,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9928205128205128
106725,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.9322595926101374
106726,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.9310178485287024
106727,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.9310178485287024
106728,"private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      pstmt.setLong(4,ipId);
      pstmt.setLong(5,networkId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}",0.986888657648283
106729,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}",0.9994772061898788
106730,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}",0.9994772061898788
106731,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}",0.9994772061898788
106732,"private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      pstmt.setLong(4,ipId);
      pstmt.setLong(5,networkId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}",0.986888657648283
106733,"protected Pair<Map<Volume,List<StoragePool>>,List<Volume>> findSuitablePoolsForVolumes(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<VolumeVO> volumesTobeCreated=_volsDao.findUsableVolumesForInstance(vmProfile.getId());
  Map<Volume,List<StoragePool>> suitableVolumeStoragePools=new HashMap<Volume,List<StoragePool>>();
  List<Volume> readyAndReusedVolumes=new ArrayList<Volume>();
  for (  VolumeVO toBeCreated : volumesTobeCreated) {
    s_logger.debug(""String_Node_Str"" + toBeCreated.getId() + ""String_Node_Str""+ toBeCreated.getVolumeType().name()+ ""String_Node_Str"");
    if (plan.getPoolId() != null) {
      if (toBeCreated.getState() == Volume.State.Ready && toBeCreated.getPoolId() != null) {
        s_logger.debug(""String_Node_Str"" + toBeCreated.getPoolId());
        List<StoragePool> suitablePools=new ArrayList<StoragePool>();
        StoragePoolVO pool=_storagePoolDao.findById(toBeCreated.getPoolId());
        if (!pool.isInMaintenance()) {
          if (!avoid.shouldAvoid(pool)) {
            long exstPoolDcId=pool.getDataCenterId();
            Long exstPoolPodId=pool.getPodId();
            Long exstPoolClusterId=pool.getClusterId();
            if (plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId) {
              s_logger.debug(""String_Node_Str"");
              suitablePools.add(pool);
              suitableVolumeStoragePools.put(toBeCreated,suitablePools);
              readyAndReusedVolumes.add(toBeCreated);
              continue;
            }
 else {
              s_logger.debug(""String_Node_Str"");
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(toBeCreated.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(toBeCreated,diskOffering,vmProfile.getHypervisorType());
    boolean useLocalStorage=false;
    if (vmProfile.getType() != VirtualMachine.Type.User) {
      String ssvmUseLocalStorage=_configDao.getValue(Config.SystemVMUseLocalStorage.key());
      if (ssvmUseLocalStorage.equalsIgnoreCase(""String_Node_Str"")) {
        useLocalStorage=true;
      }
    }
 else {
      useLocalStorage=diskOffering.getUseLocalStorage();
    }
    diskProfile.setUseLocalStorage(useLocalStorage);
    boolean foundPotentialPools=false;
    Enumeration<StoragePoolAllocator> enPool=_storagePoolAllocators.enumeration();
    while (enPool.hasMoreElements()) {
      final StoragePoolAllocator allocator=enPool.nextElement();
      final List<StoragePool> suitablePools=allocator.allocateToPool(diskProfile,vmProfile.getTemplate(),plan,avoid,returnUpTo);
      if (suitablePools != null && !suitablePools.isEmpty()) {
        suitableVolumeStoragePools.put(toBeCreated,suitablePools);
        foundPotentialPools=true;
        break;
      }
    }
    if (!foundPotentialPools) {
      s_logger.debug(""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ plan.getClusterId());
      suitableVolumeStoragePools.clear();
      break;
    }
  }
  if (suitableVolumeStoragePools.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
  return new Pair<Map<Volume,List<StoragePool>>,List<Volume>>(suitableVolumeStoragePools,readyAndReusedVolumes);
}","protected Pair<Map<Volume,List<StoragePool>>,List<Volume>> findSuitablePoolsForVolumes(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<VolumeVO> volumesTobeCreated=_volsDao.findUsableVolumesForInstance(vmProfile.getId());
  Map<Volume,List<StoragePool>> suitableVolumeStoragePools=new HashMap<Volume,List<StoragePool>>();
  List<Volume> readyAndReusedVolumes=new ArrayList<Volume>();
  for (  VolumeVO toBeCreated : volumesTobeCreated) {
    s_logger.debug(""String_Node_Str"" + toBeCreated.getId() + ""String_Node_Str""+ toBeCreated.getVolumeType().name()+ ""String_Node_Str"");
    if (plan.getPoolId() != null) {
      if (toBeCreated.getState() == Volume.State.Ready && toBeCreated.getPoolId() != null) {
        s_logger.debug(""String_Node_Str"" + toBeCreated.getPoolId());
        List<StoragePool> suitablePools=new ArrayList<StoragePool>();
        StoragePoolVO pool=_storagePoolDao.findById(toBeCreated.getPoolId());
        if (!pool.isInMaintenance()) {
          if (!avoid.shouldAvoid(pool)) {
            long exstPoolDcId=pool.getDataCenterId();
            long exstPoolPodId=pool.getPodId() != null ? pool.getPodId() : -1;
            long exstPoolClusterId=pool.getClusterId() != null ? pool.getClusterId() : -1;
            if (plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId) {
              s_logger.debug(""String_Node_Str"");
              suitablePools.add(pool);
              suitableVolumeStoragePools.put(toBeCreated,suitablePools);
              readyAndReusedVolumes.add(toBeCreated);
              continue;
            }
 else {
              s_logger.debug(""String_Node_Str"");
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(toBeCreated.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(toBeCreated,diskOffering,vmProfile.getHypervisorType());
    boolean useLocalStorage=false;
    if (vmProfile.getType() != VirtualMachine.Type.User) {
      String ssvmUseLocalStorage=_configDao.getValue(Config.SystemVMUseLocalStorage.key());
      if (ssvmUseLocalStorage.equalsIgnoreCase(""String_Node_Str"")) {
        useLocalStorage=true;
      }
    }
 else {
      useLocalStorage=diskOffering.getUseLocalStorage();
    }
    diskProfile.setUseLocalStorage(useLocalStorage);
    boolean foundPotentialPools=false;
    Enumeration<StoragePoolAllocator> enPool=_storagePoolAllocators.enumeration();
    while (enPool.hasMoreElements()) {
      final StoragePoolAllocator allocator=enPool.nextElement();
      final List<StoragePool> suitablePools=allocator.allocateToPool(diskProfile,vmProfile.getTemplate(),plan,avoid,returnUpTo);
      if (suitablePools != null && !suitablePools.isEmpty()) {
        suitableVolumeStoragePools.put(toBeCreated,suitablePools);
        foundPotentialPools=true;
        break;
      }
    }
    if (!foundPotentialPools) {
      s_logger.debug(""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ plan.getClusterId());
      suitableVolumeStoragePools.clear();
      break;
    }
  }
  if (suitableVolumeStoragePools.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
  return new Pair<Map<Volume,List<StoragePool>>,List<Volume>>(suitableVolumeStoragePools,readyAndReusedVolumes);
}",0.9859639071899168
106734,"public List<String> getSourceCidrList(){
  return null;
}","@Override public List<String> getSourceCidrList(){
  return null;
}",0.9193548387096774
106735,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);",0.3204419889502762
106736,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9944838455476752
106737,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;",0.9940711462450592
106738,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);",0.3204419889502762
106739,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9944838455476752
106740,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;",0.9940711462450592
106741,"public String[][] generateFwRules(){
  String[][] result=new String[2][];
  Set<String> toAdd=new HashSet<String>();
  for (  FirewallRuleTO fwTO : rules) {
    if (fwTO.revoked() == true)     continue;
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(fwTO.getSrcIp()).append(""String_Node_Str"").append(fwTO.getProtocol()).append(""String_Node_Str"");
    if (""String_Node_Str"".compareTo(fwTO.getProtocol()) == 0) {
      sb.append(fwTO.getIcmpType()).append(""String_Node_Str"").append(fwTO.getIcmpCode()).append(""String_Node_Str"");
    }
 else     if (fwTO.getStringSrcPortRange() == null)     sb.append(""String_Node_Str"").append(""String_Node_Str"");
 else     sb.append(fwTO.getStringSrcPortRange()).append(""String_Node_Str"");
    cidr=fwTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append(""String_Node_Str"");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(""String_Node_Str"");
    String fwRuleEntry=sb.toString();
    toAdd.add(fwRuleEntry);
  }
  result[0]=toAdd.toArray(new String[toAdd.size()]);
  return result;
}","public String[][] generateFwRules(){
  String[][] result=new String[2][];
  Set<String> toAdd=new HashSet<String>();
  for (  FirewallRuleTO fwTO : rules) {
    if (fwTO.revoked() == true) {
      StringBuilder sb=new StringBuilder();
      sb.append(fwTO.getSrcIp()).append(""String_Node_Str"");
      String fwRuleEntry=sb.toString();
      toAdd.add(fwRuleEntry);
      continue;
    }
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(fwTO.getSrcIp()).append(""String_Node_Str"").append(fwTO.getProtocol()).append(""String_Node_Str"");
    if (""String_Node_Str"".compareTo(fwTO.getProtocol()) == 0) {
      sb.append(fwTO.getIcmpType()).append(""String_Node_Str"").append(fwTO.getIcmpCode()).append(""String_Node_Str"");
    }
 else     if (fwTO.getStringSrcPortRange() == null)     sb.append(""String_Node_Str"").append(""String_Node_Str"");
 else     sb.append(fwTO.getStringSrcPortRange()).append(""String_Node_Str"");
    cidr=fwTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append(""String_Node_Str"");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(""String_Node_Str"");
    String fwRuleEntry=sb.toString();
    toAdd.add(fwRuleEntry);
  }
  result[0]=toAdd.toArray(new String[toAdd.size()]);
  return result;
}",0.921875
106742,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);",0.3204419889502762
106743,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9944838455476752
106744,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;",0.9940711462450592
106745,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}",0.8466666666666667
106746,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}",0.8466666666666667
106747,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}",0.8466666666666667
106748,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,uservm.getOwner(),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.97196261682243
106749,"@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,context.getAccount(),params);
  return true;
}","@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),params);
  return true;
}",0.9656946826758148
106750,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,uservm.getOwner(),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.968540484785972
106751,"@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,context.getAccount(),params,offering.getRedundantRouter());
  return true;
}","@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,_accountMgr.getAccount(guestConfig.getAccountId()),params,offering.getRedundantRouter());
  return true;
}",0.9648562300319488
106752,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,uservm.getOwner(),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.97196261682243
106753,"@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,context.getAccount(),params);
  return true;
}","@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),params);
  return true;
}",0.9656946826758148
106754,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,uservm.getOwner(),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}",0.9689637033140452
106755,"@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,context.getAccount(),params,isRedundant);
  return true;
}","@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,_accountMgr.getAccount(guestConfig.getAccountId()),params,isRedundant);
  return true;
}",0.9683908045977012
106756,"@Override public Integer getIcmpCode(){
  return null;
}","public Integer getIcmpCode(){
  return null;
}",0.9019607843137256
106757,"@Override public Integer getIcmpType(){
  return null;
}","public Integer getIcmpType(){
  return null;
}",0.9019607843137256
106758,"@Override @DB public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException, NetworkRuleConflictException {
  Long ipId=lb.getSourceIpAddressId();
  if (ipId != null && getNetworkToDeployLb(ipId) == null) {
    return null;
  }
  boolean newIp=false;
  account=_accountDao.acquireInLockTable(account.getId());
  if (account == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    List<LoadBalancerVO> existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),lb.getSourcePortStart());
    if (existingLbs == null) {
      existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),null);
      if (existingLbs == null) {
        if (lb.getSourceIpAddressId() != null) {
          existingLbs=findExistingLoadBalancers(lb.getName(),null,lb.getAccountId(),lb.getDomainId(),null);
          if (existingLbs != null) {
            throw new InvalidParameterValueException(""String_Node_Str"" + lb.getName() + ""String_Node_Str""+ lb.getSourceIpAddressId());
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
          PublicIp ip=allocIp(lb,account);
          ipId=ip.getId();
          newIp=true;
        }
      }
 else {
        ipId=existingLbs.get(0).getSourceIpAddressId();
        s_logger.debug(""String_Node_Str"" + ipId);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      throw new NetworkRuleConflictException(""String_Node_Str"");
    }
    NetworkVO network=getNetworkToDeployLb(ipId);
    IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
    long networkId=network.getId();
    LoadBalancer result=null;
    try {
      lb.setSourceIpAddressId(ipId);
      result=_lbMgr.createLoadBalancer(lb);
    }
 catch (    NetworkRuleConflictException e) {
      s_logger.warn(""String_Node_Str"");
      if (newIp) {
        releaseIp(ipId,UserContext.current().getCallerUserId(),account);
      }
      throw e;
    }
    DomainRouterVO elbVm=null;
    if (existingLbs == null) {
      elbVm=findELBVmWithCapacity(network,ipAddr);
      if (elbVm == null) {
        elbVm=deployLoadBalancerVM(networkId,ipAddr,account.getId());
        if (elbVm == null) {
          s_logger.warn(""String_Node_Str"" + ipAddr + ""String_Node_Str""+ network+ ""String_Node_Str""+ lb.getName());
          if (newIp)           releaseIp(ipId,UserContext.current().getCallerUserId(),account);
        }
      }
    }
 else {
      ElasticLbVmMapVO elbVmMap=_elbVmMapDao.findOneByIp(ipId);
      if (elbVmMap != null) {
        elbVm=_routerDao.findById(elbVmMap.getElbVmId());
      }
    }
    if (elbVm == null) {
      s_logger.warn(""String_Node_Str"");
      s_logger.warn(""String_Node_Str"");
      _lbDao.remove(result.getId());
      return null;
    }
    ElasticLbVmMapVO mapping=new ElasticLbVmMapVO(ipId,elbVm.getId(),result.getId());
    _elbVmMapDao.persist(mapping);
    return result;
  }
  finally {
    if (account != null) {
      _accountDao.releaseFromLockTable(account.getId());
    }
  }
}","@Override @DB public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException, NetworkRuleConflictException {
  Long ipId=lb.getSourceIpAddressId();
  if (ipId != null && getNetworkToDeployLb(ipId) == null) {
    return null;
  }
  boolean newIp=false;
  account=_accountDao.acquireInLockTable(account.getId());
  if (account == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    List<LoadBalancerVO> existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),lb.getSourcePortStart());
    if (existingLbs == null) {
      existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),null);
      if (existingLbs == null) {
        if (lb.getSourceIpAddressId() != null) {
          existingLbs=findExistingLoadBalancers(lb.getName(),null,lb.getAccountId(),lb.getDomainId(),null);
          if (existingLbs != null) {
            throw new InvalidParameterValueException(""String_Node_Str"" + lb.getName() + ""String_Node_Str""+ lb.getSourceIpAddressId());
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
          PublicIp ip=allocIp(lb,account);
          ipId=ip.getId();
          newIp=true;
        }
      }
 else {
        ipId=existingLbs.get(0).getSourceIpAddressId();
        s_logger.debug(""String_Node_Str"" + ipId);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      throw new NetworkRuleConflictException(""String_Node_Str"");
    }
    NetworkVO network=getNetworkToDeployLb(ipId);
    IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
    long networkId=network.getId();
    LoadBalancer result=null;
    try {
      lb.setSourceIpAddressId(ipId);
      result=_lbMgr.createLoadBalancer(lb,false);
    }
 catch (    NetworkRuleConflictException e) {
      s_logger.warn(""String_Node_Str"");
      if (newIp) {
        releaseIp(ipId,UserContext.current().getCallerUserId(),account);
      }
      throw e;
    }
    DomainRouterVO elbVm=null;
    if (existingLbs == null) {
      elbVm=findELBVmWithCapacity(network,ipAddr);
      if (elbVm == null) {
        elbVm=deployLoadBalancerVM(networkId,ipAddr,account.getId());
        if (elbVm == null) {
          s_logger.warn(""String_Node_Str"" + ipAddr + ""String_Node_Str""+ network+ ""String_Node_Str""+ lb.getName());
          if (newIp)           releaseIp(ipId,UserContext.current().getCallerUserId(),account);
        }
      }
    }
 else {
      ElasticLbVmMapVO elbVmMap=_elbVmMapDao.findOneByIp(ipId);
      if (elbVmMap != null) {
        elbVm=_routerDao.findById(elbVmMap.getElbVmId());
      }
    }
    if (elbVm == null) {
      s_logger.warn(""String_Node_Str"");
      s_logger.warn(""String_Node_Str"");
      _lbDao.remove(result.getId());
      return null;
    }
    ElasticLbVmMapVO mapping=new ElasticLbVmMapVO(ipId,elbVm.getId(),result.getId());
    _elbVmMapDao.persist(mapping);
    return result;
  }
  finally {
    if (account != null) {
      _accountDao.releaseFromLockTable(account.getId());
    }
  }
}",0.9990545225338796
106759,LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb) throws NetworkRuleConflictException ;,"LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException ;",0.9041095890410958
106760,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb){
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException, InsufficientAddressCapacityException {
  UserContext caller=UserContext.current();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  LoadBalancer result=_elbMgr.handleCreateLoadBalancerRule(lb,caller.getCaller());
  if (result == null) {
    result=createLoadBalancer(lb,openFirewall);
  }
  return result;
}",0.3020408163265306
106761,"@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  NetworkVO network=_networkDao.findById(networkId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getSourceCidrList(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    if (openFirewall) {
      success=success && _firewallMgr.applyFirewallRules(lb.getSourceIpAddressId(),caller.getCaller());
    }
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      _lbDao.remove(newRule.getId());
    }
  }
}","@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  NetworkVO network=_networkDao.findById(networkId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol());
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getSourceCidrList(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    if (openFirewall) {
      success=success && _firewallMgr.applyFirewallRules(lb.getSourceIpAddressId(),caller.getCaller());
    }
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      _lbDao.remove(newRule.getId());
    }
  }
}",0.9695970695970696
106762,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      if (proxy != null) {
        vmResponse.setActiveViewerSessions(proxy.getActiveSession());
      }
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}",0.9931922723091076
106763,"private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    assert(lock != null);
    if (lock.referenceCount == 0)     s_lockMap.remove(name);
  }
}","private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    if (lock != null) {
      if (lock.referenceCount == 0)       s_lockMap.remove(name);
    }
 else {
      s_logger.warn(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.7961165048543689
106764,"private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    assert(lock != null);
    if (lock.referenceCount == 0)     s_lockMap.remove(name);
  }
}","private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    if (lock != null) {
      if (lock.referenceCount == 0)       s_lockMap.remove(name);
    }
 else {
      s_logger.warn(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.7961165048543689
106765,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      if (proxy != null) {
        vmResponse.setActiveViewerSessions(proxy.getActiveSession());
      }
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}",0.9931922723091076
106766,"@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}",0.9957217556647124
106767,"/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9972067039106144
106768,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9971811134601832
106769,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9973368841544608
106770,"public Map<String,String> getDetails(){
  return details;
}","@Override public Map<String,String> getDetails(){
  return details;
}",0.921875
106771,"protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  return to;
}","protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  to.setDetails(vm.getDetails());
  return to;
}",0.983
106772,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(vm.getId());
  vm.setDetails(details);
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}",0.9734912577552172
106773,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.9975857073877354
106774,"@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.997010642114074
106775,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.9948612538540595
106776,"protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=cmd.new VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}","protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=new StartupRoutingCommand.VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}",0.9898039215686274
106777,"protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=cmd.new VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}","protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=new StartupRoutingCommand.VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}",0.9898039215686274
106778,"@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}",0.9957217556647124
106779,"/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9972067039106144
106780,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9971811134601832
106781,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;",0.9973368841544608
106782,"public Map<String,String> getDetails(){
  return details;
}","@Override public Map<String,String> getDetails(){
  return details;
}",0.921875
106783,"protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  return to;
}","protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  to.setDetails(vm.getDetails());
  return to;
}",0.983
106784,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(vm.getId());
  vm.setDetails(details);
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}",0.9734912577552172
106785,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.9975857073877354
106786,"@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.997010642114074
106787,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}",0.9948612538540595
106788,"@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return;
  }
  Long userVmId=work.getInstanceId();
  if (work.getStep() == Step.Done) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userVmId);
    }
    Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.add(userVmId);
    scheduleRulesetUpdateToHosts(affectedVms,true,_timeBetweenCleanups * 1000l);
  }
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}","@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return;
  }
  Long userVmId=work.getInstanceId();
  if (work.getStep() == Step.Done) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userVmId);
    }
    Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.add(userVmId);
    scheduleRulesetUpdateToHosts(affectedVms,true,_timeBetweenCleanups * 1000l);
  }
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  boolean locked=false;
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      vm=_userVMDao.findById(work.getInstanceId());
      if (vm == null) {
        s_logger.info(""String_Node_Str"" + work.getInstanceId() + ""String_Node_Str"");
        locked=true;
        return;
      }
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    locked=true;
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (locked) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}",0.9352874859075536
106789,"@Override public void run(){
  cleanupFinishedWork();
  cleanupUnfinishedWork();
}","@Override public void run(){
  try {
    Transaction txn=Transaction.open(""String_Node_Str"");
    try {
      cleanupFinishedWork();
      cleanupUnfinishedWork();
    }
  finally {
      txn.close(""String_Node_Str"");
    }
  }
 catch (  Throwable th) {
    try {
      s_logger.error(""String_Node_Str"",th);
    }
 catch (    Throwable th2) {
    }
  }
}",0.3715596330275229
106790,"@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    return;
  }
  Long userVmId=work.getInstanceId();
  UserVm vm=null;
  Long seqnum=null;
  s_logger.info(""String_Node_Str"" + work.toString());
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}","@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    return;
  }
  Long userVmId=work.getInstanceId();
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}",0.994192799070848
106791,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByHostStatus(poolId,com.cloud.host.Status.Up);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}",0.994026284348865
106792,"@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=true;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        for (int i=0; i < retry; i++) {
          success=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              success=false;
              break;
            }
          }
          if (success == true) {
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        if (success == false) {
          txn.start();
          cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
          _clusterDao.update(cluster.getId(),cluster);
          txn.commit();
        }
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}","@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=false;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (host.getType().equals(Host.Type.Routing) && !host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected)&& !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        boolean lsuccess=true;
        for (int i=0; i < retry; i++) {
          lsuccess=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              lsuccess=false;
              break;
            }
          }
          if (lsuccess == true) {
            success=true;
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        txn.start();
        cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}",0.9817477876106194
106793,"@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=true;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        for (int i=0; i < retry; i++) {
          success=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              success=false;
              break;
            }
          }
          if (success == true) {
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        if (success == false) {
          txn.start();
          cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
          _clusterDao.update(cluster.getId(),cluster);
          txn.commit();
        }
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}","@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=false;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (host.getType().equals(Host.Type.Routing) && !host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected)&& !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        boolean lsuccess=true;
        for (int i=0; i < retry; i++) {
          lsuccess=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              lsuccess=false;
              break;
            }
          }
          if (lsuccess == true) {
            success=true;
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        txn.start();
        cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}",0.9817477876106194
106794,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByHostStatus(poolId,com.cloud.host.Status.Up);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}",0.994026284348865
106795,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}",0.8105263157894737
106796,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}",0.8105263157894737
106797,"public AgentMonitor(long msId,HostDao hostDao,VMInstanceDao vmDao,DataCenterDao dcDao,HostPodDao podDao,AgentManagerImpl agentMgr,AlertManager alertMgr,long pingTimeout){
  super(""String_Node_Str"");
  _msId=msId;
  _pingTimeout=pingTimeout;
  _hostDao=hostDao;
  _agentMgr=agentMgr;
  _stop=false;
  _vmDao=vmDao;
  _dcDao=dcDao;
  _podDao=podDao;
  _alertMgr=alertMgr;
  Connection conn=Transaction.getStandaloneConnection();
  if (conn == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true,true);
}","public AgentMonitor(long msId,HostDao hostDao,VMInstanceDao vmDao,DataCenterDao dcDao,HostPodDao podDao,AgentManagerImpl agentMgr,AlertManager alertMgr,long pingTimeout){
  super(""String_Node_Str"");
  _msId=msId;
  _pingTimeout=pingTimeout;
  _hostDao=hostDao;
  _agentMgr=agentMgr;
  _stop=false;
  _vmDao=vmDao;
  _dcDao=dcDao;
  _podDao=podDao;
  _alertMgr=alertMgr;
  try {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.7612061939690301
106798,"private Connection getHeartbeatConnection() throws SQLException {
  if (_heartbeatConnection == null) {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    _heartbeatConnection=new ConnectionConcierge(""String_Node_Str"",conn,false,false);
  }
  return _heartbeatConnection.conn();
}","private Connection getHeartbeatConnection() throws SQLException {
  if (_heartbeatConnection == null) {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    _heartbeatConnection=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
  return _heartbeatConnection.conn();
}",0.9900662251655628
106799,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}",0.8105263157894737
106800,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}",0.9854881266490764
106801,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}",0.8875453446191052
106802,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.998231340643792
106803,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}",0.8451282051282051
106804,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName != null) {
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    user.setLastname(lastName);
  }
  if (userName != null) {
    List<UserVO> duplicatedUsers=_userDao.findUsersLike(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userName + ""String_Node_Str""+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    user.setPassword(password);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,user);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}",0.7770953041410739
106805,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (account.getDomainId() != 1 && issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      return _offeringsDao.findSystemOffering(domainId,issystem,vm_type_str);
    }
 else {
      if (issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findSystemOffering(domainId,false,vm_type_str);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (issystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (account.getDomainId() != 1 && issystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account caller=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(caller,name,id,vmId,keyword,searchFilter);
  }
  if (caller.getDomainId() != 1 && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((caller != null) && !isAdmin(caller.getType())) {
      if (caller.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
  return _offeringsDao.search(sc,searchFilter);
}",0.8259748141404946
106806,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}",0.9854881266490764
106807,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}",0.8875453446191052
106808,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.998231340643792
106809,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}",0.8451282051282051
106810,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  dropKeysIfExist(conn);
}",0.8322147651006712
106811,"@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      Integer load=loadInfo.get(proxy.getId());
      if (load == null || load < _maxSessionCount) {
        allocationList.add(proxy);
      }
    }
    if (allocationList.size() > 0)     return allocationList.get(_rand.nextInt(allocationList.size()));
  }
  return null;
}","@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,final Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      allocationList.add(proxy);
    }
    Collections.sort(candidates,new Comparator<ConsoleProxyVO>(){
      @Override public int compare(      ConsoleProxyVO x,      ConsoleProxyVO y){
        Integer loadOfX=loadInfo.get(x.getId());
        Integer loadOfY=loadInfo.get(y.getId());
        if (loadOfX != null && loadOfY != null) {
          if (loadOfX < loadOfY)           return -1;
 else           if (loadOfX > loadOfY)           return 1;
          return 0;
        }
 else         if (loadOfX == null && loadOfY == null) {
          return 0;
        }
 else {
          if (loadOfX == null)           return -1;
          return 1;
        }
      }
    }
);
    if (allocationList.size() > 0)     return allocationList.get(0);
  }
  return null;
}",0.4725897920604915
106812,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  Long diskOfferingId=volume.getDiskOfferingId();
  if (createdVolume.getPath() != null) {
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,null,createdVolume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  return createdVolume;
}",0.5125184094256259
106813,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}",0.9854881266490764
106814,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}",0.8875453446191052
106815,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.998231340643792
106816,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}",0.8451282051282051
106817,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  dropKeysIfExist(conn);
}",0.8322147651006712
106818,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  String value=configs.get(""String_Node_Str"");
  _maxSessionCount=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_CAPACITY);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  return true;
}",0.8580246913580247
106819,"@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      Integer load=loadInfo.get(proxy.getId());
      if (load == null || load < _maxSessionCount) {
        allocationList.add(proxy);
      }
    }
    if (allocationList.size() > 0)     return allocationList.get(_rand.nextInt(allocationList.size()));
  }
  return null;
}","@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,final Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      allocationList.add(proxy);
    }
    Collections.sort(candidates,new Comparator<ConsoleProxyVO>(){
      @Override public int compare(      ConsoleProxyVO x,      ConsoleProxyVO y){
        Integer loadOfX=loadInfo.get(x.getId());
        Integer loadOfY=loadInfo.get(y.getId());
        if (loadOfX != null && loadOfY != null) {
          if (loadOfX < loadOfY)           return -1;
 else           if (loadOfX > loadOfY)           return 1;
          return 0;
        }
 else         if (loadOfX == null && loadOfY == null) {
          return 0;
        }
 else {
          if (loadOfX == null)           return -1;
          return 1;
        }
      }
    }
);
    if (allocationList.size() > 0)     return allocationList.get(0);
  }
  return null;
}",0.4725897920604915
106820,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  String value=configs.get(""String_Node_Str"");
  _maxSessionCount=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_CAPACITY);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  return true;
}",0.8580246913580247
106821,"@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}","@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  accountResponse.setNetworkDomain(account.getNetworkDomain());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}",0.9944444444444444
106822,"@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}","@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setNetworkDomain(domain.getNetworkDomain());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}",0.95141065830721
106823,"/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState);","/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @param networkDomain TODO
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState,String networkDomain);",0.9542124542124544
106824,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  zone.setDomain(networkDomain);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}",0.9704847537138388
106825,"@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState);
}","@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  String networkDomain=cmd.getDomain();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState,networkDomain);
}",0.9856
106826,"@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}","@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  String networkDomain=null;
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
        networkDomain=""String_Node_Str"" + Long.toHexString(Account.ACCOUNT_ID_SYSTEM) + _networkMgr.getGlobalGuestDomainSuffix();
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      userNetwork.setNetworkDomain(networkDomain);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}",0.9493487698986977
106827,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long diskOfferingId=volume.getDiskOfferingId();
  if (createdVolume.getPath() != null) {
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,null,createdVolume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  return createdVolume;
}",0.4449576597382602
106828,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  buffers[1]=ByteBuffer.wrap(_content.getBytes());
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}",0.6957787481804949
106829,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.9713248638838476
106830,"@Override public void cleanupForServer(long msId){
  PreparedStatement pstmt=null;
  try {
    pstmt=_concierge.conn().prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,_msId);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_concierge.conn().prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}",0.8752515090543259
106831,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  buffers[1]=ByteBuffer.wrap(_content.getBytes());
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}",0.6957787481804949
106832,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.9713248638838476
106833,"@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_conn.prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,_msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_conn.prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}",0.9990850869167428
106834,"protected void accept(SelectionKey key) throws IOException {
  ServerSocketChannel serverSocketChannel=(ServerSocketChannel)key.channel();
  SocketChannel socketChannel=serverSocketChannel.accept();
  Socket socket=socketChannel.socket();
  socket.setKeepAlive(true);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + socket);
  }
  socketChannel.configureBlocking(true);
  SSLEngine sslEngine=null;
  try {
    SSLContext sslContext=Link.initSSLContext(false);
    sslEngine=sslContext.createSSLEngine();
    sslEngine.setUseClientMode(false);
    sslEngine.setNeedClientAuth(false);
    Link.doHandshake(socketChannel,sslEngine,false);
  }
 catch (  Exception e) {
    logDebug(e,key,0);
    terminate(key);
    return;
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  socketChannel.configureBlocking(false);
  InetSocketAddress saddr=(InetSocketAddress)socket.getRemoteSocketAddress();
  Link link=new Link(saddr,this);
  link.setSSLEngine(sslEngine);
  link.setKey(socketChannel.register(key.selector(),SelectionKey.OP_READ,link));
  Task task=_factory.create(Task.Type.CONNECT,link,null);
  registerLink(saddr,link);
  _executor.execute(task);
}","protected void accept(SelectionKey key) throws IOException {
  ServerSocketChannel serverSocketChannel=(ServerSocketChannel)key.channel();
  SocketChannel socketChannel=serverSocketChannel.accept();
  Socket socket=socketChannel.socket();
  socket.setKeepAlive(true);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + socket);
  }
  socketChannel.configureBlocking(true);
  SSLEngine sslEngine=null;
  try {
    SSLContext sslContext=Link.initSSLContext(false);
    sslEngine=sslContext.createSSLEngine();
    sslEngine.setUseClientMode(false);
    sslEngine.setNeedClientAuth(false);
    Link.doHandshake(socketChannel,sslEngine,false);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + socket + ""String_Node_Str""+ e.getMessage());
    terminate(key);
    return;
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  socketChannel.configureBlocking(false);
  InetSocketAddress saddr=(InetSocketAddress)socket.getRemoteSocketAddress();
  Link link=new Link(saddr,this);
  link.setSSLEngine(sslEngine);
  link.setKey(socketChannel.register(key.selector(),SelectionKey.OP_READ,link));
  Task task=_factory.create(Task.Type.CONNECT,link,null);
  registerLink(saddr,link);
  _executor.execute(task);
}",0.9665187575635336
106835,"@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (getZoneIdForAccount(caller) != zoneId)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}","@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (zoneId.compareTo(getZoneIdForAccount(caller)) != 0)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}",0.969097651421508
106836,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    s_logger.debug(""String_Node_Str"");
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}",0.9910204081632652
106837,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    s_logger.debug(""String_Node_Str"");
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}",0.9910204081632652
106838,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(rs.getString(""String_Node_Str""));
        resp.setDescription(rs.getString(""String_Node_Str""));
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}",0.9918130649837968
106839,"@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}","@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  accountResponse.setNetworkDomain(account.getNetworkDomain());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}",0.9944444444444444
106840,"@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}","@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setNetworkDomain(domain.getNetworkDomain());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}",0.95141065830721
106841,"/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState);","/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @param networkDomain TODO
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState,String networkDomain);",0.9542124542124544
106842,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  zone.setDomain(networkDomain);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}",0.9704847537138388
106843,"@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState);
}","@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  String networkDomain=cmd.getDomain();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState,networkDomain);
}",0.9856
106844,"@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}","@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  String networkDomain=null;
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
        networkDomain=""String_Node_Str"" + Long.toHexString(Account.ACCOUNT_ID_SYSTEM) + _networkMgr.getGlobalGuestDomainSuffix();
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      userNetwork.setNetworkDomain(networkDomain);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}",0.9493487698986977
106845,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(rs.getString(""String_Node_Str""));
        resp.setDescription(rs.getString(""String_Node_Str""));
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}",0.9918130649837968
106846,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}",0.9761050328227572
106847,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}",0.9761050328227572
106848,"@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}","@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}",0.9952885747938752
106849,"private void initPeerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}","private void initPeerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}",0.9719101123595506
106850,"private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        Connection conn=getHeartbeatConnection();
        _mshostDao.update(conn,_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan(conn);
        }
        peerScan(conn);
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        txn.transitToUserManagedConnection(getHeartbeatConnection());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        _mshostDao.update(_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan();
        }
        peerScan();
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        txn.close(""String_Node_Str"");
      }
    }
  }
;
}",0.9187800963081862
106851,"private void peerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(conn,mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}",0.9967014117957514
106852,"private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}","private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}",0.9958656330749354
106853,"void invalidateRunSession(Connection conn,long id,long runid);","void invalidateRunSession(long id,long runid);",0.8518518518518519
106854,"void update(Connection conn,long id,long runId,State state,Date lastUpdate);","void update(long id,long runId,State state,Date lastUpdate);",0.8823529411764706
106855,"List<ManagementServerHostVO> getActiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getActiveList(Date cutTime);,0.8769230769230769
106856,"List<ManagementServerHostVO> getInactiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getInactiveList(Date cutTime);,0.8805970149253731
106857,"@Override public void invalidateRunSession(Connection conn,long id,long runid){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void invalidateRunSession(long id,long runid){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.5621734587251829
106858,"@Override public void update(Connection conn,long id,long runId,State state,Date lastUpdate){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    conn.commit();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void update(long id,long runId,State state,Date lastUpdate){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.3992651561543172
106859,"@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    txn.rollback();
  }
  return false;
}","@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return false;
}",0.927807486631016
106860,"@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}",0.999034282955094
106861,"@Override public <K>K getNextInSequence(final Class<K> clazz,final String name){
}","@Override @DB(txn=false) public <K>K getNextInSequence(final Class<K> clazz,final String name){
}",0.9162011173184358
106862,"public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_logger.debug(""String_Node_Str"" + txn.getId());
    s_mbean.addTransaction(txn);
  }
  return txn;
}","public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_mbean.addTransaction(txn);
  }
  return txn;
}",0.9018789144050104
106863,"@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}","@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}",0.9952885747938752
106864,"private void initPeerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}","private void initPeerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}",0.9719101123595506
106865,"private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        Connection conn=getHeartbeatConnection();
        _mshostDao.update(conn,_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan(conn);
        }
        peerScan(conn);
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        txn.transitToUserManagedConnection(getHeartbeatConnection());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        _mshostDao.update(_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan();
        }
        peerScan();
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        txn.close(""String_Node_Str"");
      }
    }
  }
;
}",0.9187800963081862
106866,"private void peerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(conn,mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}",0.9967014117957514
106867,"private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}","private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}",0.9958656330749354
106868,"void invalidateRunSession(Connection conn,long id,long runid);","void invalidateRunSession(long id,long runid);",0.8518518518518519
106869,"void update(Connection conn,long id,long runId,State state,Date lastUpdate);","void update(long id,long runId,State state,Date lastUpdate);",0.8823529411764706
106870,"List<ManagementServerHostVO> getActiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getActiveList(Date cutTime);,0.8769230769230769
106871,"List<ManagementServerHostVO> getInactiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getInactiveList(Date cutTime);,0.8805970149253731
106872,"@Override public void invalidateRunSession(Connection conn,long id,long runid){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void invalidateRunSession(long id,long runid){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.5621734587251829
106873,"@Override public void update(Connection conn,long id,long runId,State state,Date lastUpdate){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    conn.commit();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void update(long id,long runId,State state,Date lastUpdate){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.3992651561543172
106874,"@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    txn.rollback();
  }
  return false;
}","@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return false;
}",0.927807486631016
106875,"@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}",0.999034282955094
106876,"@Override public <K>K getNextInSequence(final Class<K> clazz,final String name){
}","@Override @DB(txn=false) public <K>K getNextInSequence(final Class<K> clazz,final String name){
}",0.9162011173184358
106877,"public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_logger.debug(""String_Node_Str"" + txn.getId());
    s_mbean.addTransaction(txn);
  }
  return txn;
}","public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_mbean.addTransaction(txn);
  }
  return txn;
}",0.9018789144050104
106878,"ListResponse<TemplateResponse> createIsoResponses(VirtualMachineTemplate template,Long zoneId);","List<TemplateResponse> createIsoResponses(long isoId,long zoneId,boolean readyOnly);",0.6256983240223464
106879,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    TemplateResponse templateResponse=_responseGenerator.createTemplateResponse(template,destZoneId);
    templateResponse.setResponseName(getCommandName());
    this.setResponseObject(templateResponse);
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),getDestinationZoneId(),false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}",0.7229629629629629
106880,"@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    TemplateResponse response=_responseGenerator.createTemplateResponse(template,snapshotId,volumeId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),snapshotId,volumeId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.7730923694779116
106881,"@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  TemplateFilter isoFilterObj=null;
  try {
    if (isoFilter == null) {
      isoFilterObj=TemplateFilter.selfexecutable;
    }
 else {
      isoFilterObj=TemplateFilter.valueOf(isoFilter);
    }
  }
 catch (  IllegalArgumentException e) {
    isoFilterObj=TemplateFilter.selfexecutable;
  }
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponse(isoZonePairSet,isAdmin,account,bootable,listInReadyState());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> iso : isoZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createIsoResponses(iso.first(),iso.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
}",0.274310595065312
106882,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}",0.1221374045801526
106883,"@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    _responseGenerator.createTemplateResponse(templateResponses,template,isAdmin,account,listInReadyState());
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createTemplateResponses(template.first(),template.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.7523197715917203
106884,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getTemplateFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}",0.1212121212121212
106885,"@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponses(template,zoneId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createIsoResponses(template.getId(),zoneId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.8612997090203686
106886,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=_responseGenerator.createTemplateResponse2(template,zoneId);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),zoneId,false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}",0.8792480115690527
106887,"public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId);
  }
}","public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId,boolean readyOnly){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId,readyOnly);
  }
}",0.9614325068870524
106888,"ListResponse<TemplateResponse> createIsoResponses(VirtualMachineTemplate template,Long zoneId);","List<TemplateResponse> createIsoResponses(long isoId,long zoneId,boolean readyOnly);",0.6256983240223464
106889,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    TemplateResponse templateResponse=_responseGenerator.createTemplateResponse(template,destZoneId);
    templateResponse.setResponseName(getCommandName());
    this.setResponseObject(templateResponse);
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),getDestinationZoneId(),false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}",0.7229629629629629
106890,"@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    TemplateResponse response=_responseGenerator.createTemplateResponse(template,snapshotId,volumeId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),snapshotId,volumeId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.7730923694779116
106891,"@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  TemplateFilter isoFilterObj=null;
  try {
    if (isoFilter == null) {
      isoFilterObj=TemplateFilter.selfexecutable;
    }
 else {
      isoFilterObj=TemplateFilter.valueOf(isoFilter);
    }
  }
 catch (  IllegalArgumentException e) {
    isoFilterObj=TemplateFilter.selfexecutable;
  }
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponse(isoZonePairSet,isAdmin,account,bootable,listInReadyState());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> iso : isoZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createIsoResponses(iso.first(),iso.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
}",0.274310595065312
106892,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}",0.1221374045801526
106893,"@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    _responseGenerator.createTemplateResponse(templateResponses,template,isAdmin,account,listInReadyState());
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createTemplateResponses(template.first(),template.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.7523197715917203
106894,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getTemplateFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}",0.1212121212121212
106895,"@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponses(template,zoneId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createIsoResponses(template.getId(),zoneId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.8612997090203686
106896,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=_responseGenerator.createTemplateResponse2(template,zoneId);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),zoneId,false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}",0.8792480115690527
106897,"public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId);
  }
}","public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId,boolean readyOnly){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId,readyOnly);
  }
}",0.9614325068870524
106898,"private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
    if (clusterId != null) {
      for (int i=(int)(_loadSize - 1); i > 0; i--) {
        if (hosts.get(i).getClusterId() == clusterId) {
          hosts.remove(i);
        }
 else {
          break;
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}","private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    if (hosts.size() > 1 && hosts.get(0).getClusterId().longValue() != hosts.get(hosts.size() - 1).getClusterId().longValue()) {
      Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
      if (clusterId != null) {
        for (int i=(int)(_loadSize - 1); i > 0; i--) {
          if (hosts.get(i).getClusterId().longValue() == clusterId.longValue()) {
            hosts.remove(i);
          }
 else {
            break;
          }
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"",e);
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}",0.8019859813084113
106899,"private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
    if (clusterId != null) {
      for (int i=(int)(_loadSize - 1); i > 0; i--) {
        if (hosts.get(i).getClusterId() == clusterId) {
          hosts.remove(i);
        }
 else {
          break;
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}","private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    if (hosts.size() > 1 && hosts.get(0).getClusterId().longValue() != hosts.get(hosts.size() - 1).getClusterId().longValue()) {
      Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
      if (clusterId != null) {
        for (int i=(int)(_loadSize - 1); i > 0; i--) {
          if (hosts.get(i).getClusterId().longValue() == clusterId.longValue()) {
            hosts.remove(i);
          }
 else {
            break;
          }
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"",e);
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}",0.8019859813084113
106900,"@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str""};
}","@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str"",""String_Node_Str""};
}",0.9158878504672896
106901,"@Override public void run(){
  s_logger.info(""String_Node_Str"");
  try {
    Thread.sleep(_pingTimeout * 2000);
  }
 catch (  InterruptedException e) {
    s_logger.info(""String_Node_Str"");
  }
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}","@Override public void run(){
  s_logger.info(""String_Node_Str"");
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}",0.9741948389677936
106902,"@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}","@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}",0.8401697312588402
106903,"@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  HostVO host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
}","@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  HostVO host=createForUpdate();
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
  sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  ub=getUpdateBuilder(host);
  update(ub,sc,null);
}",0.6520376175548589
106904,"@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str""};
}","@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str"",""String_Node_Str""};
}",0.9158878504672896
106905,"@Override public void run(){
  s_logger.info(""String_Node_Str"");
  try {
    Thread.sleep(_pingTimeout * 2000);
  }
 catch (  InterruptedException e) {
    s_logger.info(""String_Node_Str"");
  }
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}","@Override public void run(){
  s_logger.info(""String_Node_Str"");
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}",0.9741948389677936
106906,"@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}","@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}",0.8401697312588402
106907,"@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  HostVO host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
}","@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  HostVO host=createForUpdate();
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
  sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  ub=getUpdateBuilder(host);
  update(ub,sc,null);
}",0.6520376175548589
106908,"@DB protected DomainRouterVO findOrCreateDhcpServer(Network guestNetwork,DeployDestination dest,Account owner) throws InsufficientCapacityException, ConcurrentOperationException {
  DataCenterDeployment plan=null;
  long dcId=dest.getDataCenter().getId();
  DataCenter dc=dest.getDataCenter();
  DomainRouterVO router=null;
  Long podId=dest.getPod().getId();
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setDefaultNic(true);
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  VMTemplateVO template=_templateDao.findRoutingTemplate(dest.getCluster().getHypervisorType());
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Network network=_networkDao.lockRow(guestNetwork.getId(),true);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
  router.setRole(Role.DHCP_USERDATA);
  router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
  UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
  if (stats == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
    }
    stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
    _userStatsDao.persist(stats);
  }
  txn.commit();
  return router;
}","@DB protected DomainRouterVO findOrCreateDhcpServer(Network guestNetwork,DeployDestination dest,Account owner) throws InsufficientCapacityException, ConcurrentOperationException {
  DataCenterDeployment plan=null;
  long dcId=dest.getDataCenter().getId();
  DataCenter dc=dest.getDataCenter();
  DomainRouterVO router=null;
  Long podId=dest.getPod().getId();
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setDefaultNic(true);
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  VMTemplateVO template=_templateDao.findRoutingTemplate(dest.getCluster().getHypervisorType());
  Transaction txn=Transaction.currentTxn();
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  try {
    txn.start();
    if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
      router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
      plan=new DataCenterDeployment(dcId,podId,null,null,null);
    }
 else {
      router=_routerDao.findByNetwork(guestNetwork.getId());
      plan=new DataCenterDeployment(dcId);
    }
    if (router != null) {
      return router;
    }
    router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
    router.setRole(Role.DHCP_USERDATA);
    router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
    UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
    if (stats == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
      }
      stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
      _userStatsDao.persist(stats);
    }
    txn.commit();
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return router;
}",0.9503200243828102
106909,"@DB protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork,DataCenterDeployment plan,HypervisorType type,Account owner) throws ConcurrentOperationException, InsufficientCapacityException {
  DomainRouterVO router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  VMTemplateVO template=_templateDao.findRoutingTemplate(type);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
  List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Network network=_networkDao.lockRow(guestNetwork.getId(),true);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
  defaultNic.setGateway(sourceNatIp.getGateway());
  defaultNic.setNetmask(sourceNatIp.getNetmask());
  defaultNic.setMacAddress(sourceNatIp.getMacAddress());
  defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
  defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
  defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setIp4Address(guestNetwork.getGateway());
  gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
  gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
  gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
  gatewayNic.setMode(guestNetwork.getMode());
  String gatewayCidr=guestNetwork.getCidr();
  gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
  router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
  UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),plan.getDataCenterId(),router.getNetworkId(),null,router.getId(),router.getType().toString());
  if (stats == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
    }
    stats=new UserStatisticsVO(owner.getId(),plan.getDataCenterId(),null,router.getId(),router.getType().toString(),guestNetwork.getId());
    _userStatsDao.persist(stats);
  }
  txn.commit();
  return router;
}","@DB protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork,DataCenterDeployment plan,HypervisorType type,Account owner) throws ConcurrentOperationException, InsufficientCapacityException {
  DomainRouterVO router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  VMTemplateVO template=_templateDao.findRoutingTemplate(type);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
  List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
  Transaction txn=Transaction.currentTxn();
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  try {
    txn.start();
    router=_routerDao.findByNetwork(guestNetwork.getId());
    if (router != null) {
      return router;
    }
    long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id);
    }
    PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setDeviceId(2);
    networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
    NicProfile gatewayNic=new NicProfile();
    gatewayNic.setIp4Address(guestNetwork.getGateway());
    gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
    gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
    gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
    gatewayNic.setMode(guestNetwork.getMode());
    String gatewayCidr=guestNetwork.getCidr();
    gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
    networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
    router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
    router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
    UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),plan.getDataCenterId(),router.getNetworkId(),null,router.getId(),router.getType().toString());
    if (stats == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
      }
      stats=new UserStatisticsVO(owner.getId(),plan.getDataCenterId(),null,router.getId(),router.getType().toString(),guestNetwork.getId());
      _userStatsDao.persist(stats);
    }
    txn.commit();
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return router;
}",0.9525308156307368
106910,"private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      Long deviceId=0L;
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,accountId);
          pstmt.setLong(2,dataCenterId);
          ResultSet userVmSet=pstmt.executeQuery();
          if (!userVmSet.next()) {
            s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId);
            continue;
          }
          deviceId=userVmSet.getLong(1);
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
 else {
        deviceId=rs1.getLong(1);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.6493756003842459
106911,"protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && j < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}","protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && i < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}",0.9988938053097344
106912,"private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      Long deviceId=0L;
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,accountId);
          pstmt.setLong(2,dataCenterId);
          ResultSet userVmSet=pstmt.executeQuery();
          if (!userVmSet.next()) {
            s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId);
            continue;
          }
          deviceId=userVmSet.getLong(1);
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
 else {
        deviceId=rs1.getLong(1);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.6493756003842459
106913,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  int count=0;
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    count++;
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          if (count == hostToClusterMap.size()) {
            for (int i=0; i <= hostsLeftToGive; i++) {
              hostsToReturn.add(hostsInCluster.get(i));
              hostsLeftToGive=hostsLeftToGive - 1;
              s_logger.debug(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            }
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}",0.7683176422431437
106914,"private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
        if (_agentToTransferIds.size() > 0) {
          s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
          for (          Long hostId : _agentToTransferIds) {
            AgentAttache attache=findAttache(hostId);
            Date cutTime=DateUtil.currentGMTTime();
            if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
            if (transferMap == null) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
            if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
              rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
            }
 else {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
            }
          }
        }
 else {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace(""String_Node_Str"" + _nodeId);
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
synchronized (_agentToTransferIds) {
          if (_agentToTransferIds.size() > 0) {
            s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
            for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
              Long hostId=iterator.next();
              AgentAttache attache=findAttache(hostId);
              Date cutTime=DateUtil.currentGMTTime();
              if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
              if (transferMap == null) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
              if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
                iterator.remove();
                rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
              }
 else {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
              }
            }
          }
 else {
            if (s_logger.isTraceEnabled()) {
              s_logger.trace(""String_Node_Str"" + _nodeId);
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}",0.8548138356466182
106915,"@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
    if (_agentToTransferIds.size() > 0) {
      s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
      for (      Long hostId : _agentToTransferIds) {
        AgentAttache attache=findAttache(hostId);
        Date cutTime=DateUtil.currentGMTTime();
        if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
        if (transferMap == null) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
        if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
          rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
        }
      }
    }
 else {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _nodeId);
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
synchronized (_agentToTransferIds) {
      if (_agentToTransferIds.size() > 0) {
        s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
        for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
          Long hostId=iterator.next();
          AgentAttache attache=findAttache(hostId);
          Date cutTime=DateUtil.currentGMTTime();
          if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
          if (transferMap == null) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
          if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
            iterator.remove();
            rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
          }
 else {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}",0.8037801541904999
106916,"protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    _agentToTransferIds.remove(hostId);
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}","protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}",0.9607041810751336
106917,"@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      _agentToTransferIds.remove(hostId);
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}","@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}",0.9866497139224412
106918,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  int count=0;
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    count++;
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          if (count == hostToClusterMap.size()) {
            for (int i=0; i <= hostsLeftToGive; i++) {
              hostsToReturn.add(hostsInCluster.get(i));
              hostsLeftToGive=hostsLeftToGive - 1;
              s_logger.debug(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            }
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}",0.7683176422431437
106919,"protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && j < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}","protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && i < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}",0.9988938053097344
106920,"private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
        if (_agentToTransferIds.size() > 0) {
          s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
          for (          Long hostId : _agentToTransferIds) {
            AgentAttache attache=findAttache(hostId);
            Date cutTime=DateUtil.currentGMTTime();
            if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
            if (transferMap == null) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
            if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
              rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
            }
 else {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
            }
          }
        }
 else {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace(""String_Node_Str"" + _nodeId);
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
synchronized (_agentToTransferIds) {
          if (_agentToTransferIds.size() > 0) {
            s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
            for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
              Long hostId=iterator.next();
              AgentAttache attache=findAttache(hostId);
              Date cutTime=DateUtil.currentGMTTime();
              if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
              if (transferMap == null) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
              if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
                iterator.remove();
                rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
              }
 else {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
              }
            }
          }
 else {
            if (s_logger.isTraceEnabled()) {
              s_logger.trace(""String_Node_Str"" + _nodeId);
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}",0.8548138356466182
106921,"@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
    if (_agentToTransferIds.size() > 0) {
      s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
      for (      Long hostId : _agentToTransferIds) {
        AgentAttache attache=findAttache(hostId);
        Date cutTime=DateUtil.currentGMTTime();
        if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
        if (transferMap == null) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
        if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
          rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
        }
      }
    }
 else {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _nodeId);
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
synchronized (_agentToTransferIds) {
      if (_agentToTransferIds.size() > 0) {
        s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
        for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
          Long hostId=iterator.next();
          AgentAttache attache=findAttache(hostId);
          Date cutTime=DateUtil.currentGMTTime();
          if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
          if (transferMap == null) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
          if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
            iterator.remove();
            rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
          }
 else {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}",0.8037801541904999
106922,"protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    _agentToTransferIds.remove(hostId);
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}","protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}",0.9607041810751336
106923,"@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      _agentToTransferIds.remove(hostId);
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}","@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}",0.9866497139224412
106924,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
        work=_workDao.persist(work);
        ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        Ternary<T,ReservationContext,ItWorkVO> result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    Ternary<T,ReservationContext,ItWorkVO> result=null;
    txn.start();
    try {
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
      work=_workDao.persist(work);
      ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
 finally {
      if (result == null) {
        txn.rollback();
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}",0.7631332082551595
106925,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
        work=_workDao.persist(work);
        ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        Ternary<T,ReservationContext,ItWorkVO> result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    Ternary<T,ReservationContext,ItWorkVO> result=null;
    txn.start();
    try {
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
      work=_workDao.persist(work);
      ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
 finally {
      if (result == null) {
        txn.rollback();
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}",0.7631332082551595
106926,"@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (getZoneIdForAccount(caller) != zoneId)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}","@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (zoneId.compareTo(getZoneIdForAccount(caller)) != 0)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}",0.969097651421508
106927,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (account.getDomainId() != 1 && issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      return _offeringsDao.findSystemOffering(domainId,issystem,vm_type_str);
    }
 else {
      if (issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findSystemOffering(domainId,false,vm_type_str);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (issystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (account.getDomainId() != 1 && issystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account caller=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(caller,name,id,vmId,keyword,searchFilter);
  }
  if (caller.getDomainId() != 1 && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((caller != null) && !isAdmin(caller.getType())) {
      if (caller.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  return _offeringsDao.search(sc,searchFilter);
}",0.8230211387131615
106928,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        throw new CloudRuntimeException(e.getMessage());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + e.getMessage());
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}",0.97164824603556
106929,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName != null) {
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    user.setLastname(lastName);
  }
  if (userName != null) {
    List<UserVO> duplicatedUsers=_userDao.findUsersLike(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userName + ""String_Node_Str""+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    user.setPassword(password);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,user);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}",0.7770953041410739
106930,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        throw new CloudRuntimeException(e.getMessage());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + e.getMessage());
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}",0.97164824603556
106931,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  long callerUserId=UserContext.current().getCallerUserId();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (apiKey != null) {
    Long apiKeyOwnerId=null;
    Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
    if (apiKeyOwner != null) {
      apiKeyOwnerId=apiKeyOwner.first().getId();
    }
    if ((apiKeyOwnerId == null || callerUserId != apiKeyOwnerId) && secretKey == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (apiKeyOwnerId != null && callerUserId == apiKeyOwnerId && id != callerUserId) {
      apiKey=null;
    }
  }
  if (apiKey == null && secretKey != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}",0.8792438271604939
106932,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  long callerUserId=UserContext.current().getCallerUserId();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (apiKey != null) {
    Long apiKeyOwnerId=null;
    Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
    if (apiKeyOwner != null) {
      apiKeyOwnerId=apiKeyOwner.first().getId();
    }
    if ((apiKeyOwnerId == null || callerUserId != apiKeyOwnerId) && secretKey == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (apiKeyOwnerId != null && callerUserId == apiKeyOwnerId && id != callerUserId) {
      apiKey=null;
    }
  }
  if (apiKey == null && secretKey != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}",0.8792438271604939
106933,"public void testTags(){
  NetworkDaoImpl dao=ComponentLocator.inject(NetworkDaoImpl.class);
  dao.expunge(1001l);
  NetworkVO network=new NetworkVO(1001,TrafficType.Control,GuestIpType.Direct,Mode.Dhcp,BroadcastDomainType.Native,1,1,1,1,1001,""String_Node_Str"",""String_Node_Str"",false,true,true);
  network.setGuruName(""String_Node_Str"");
  List<String> tags=new ArrayList<String>();
  tags.add(""String_Node_Str"");
  tags.add(""String_Node_Str"");
  network.setTags(tags);
  network=dao.persist(network);
  List<String> saveTags=network.getTags();
  Assert.assertTrue(saveTags.size() == 2 && saveTags.contains(""String_Node_Str"") && saveTags.contains(""String_Node_Str""));
  NetworkVO retrieved=dao.findById(1001l);
  List<String> retrievedTags=retrieved.getTags();
  Assert.assertTrue(retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  List<String> updateTags=new ArrayList<String>();
  updateTags.add(""String_Node_Str"");
  updateTags.add(""String_Node_Str"");
  retrieved.setTags(updateTags);
  dao.update(retrieved.getId(),retrieved);
  retrieved=dao.findById(1001l);
  retrievedTags=retrieved.getTags();
  Assert.assertTrue(""String_Node_Str"",retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  dao.expunge(1001l);
}","public void testTags(){
  NetworkDaoImpl dao=ComponentLocator.inject(NetworkDaoImpl.class);
  dao.expunge(1001l);
  NetworkVO network=new NetworkVO(1001,TrafficType.Control,GuestIpType.Direct,Mode.Dhcp,BroadcastDomainType.Native,1,1,1,1,1001,""String_Node_Str"",""String_Node_Str"",false,true,true,null);
  network.setGuruName(""String_Node_Str"");
  List<String> tags=new ArrayList<String>();
  tags.add(""String_Node_Str"");
  tags.add(""String_Node_Str"");
  network.setTags(tags);
  network=dao.persist(network);
  List<String> saveTags=network.getTags();
  Assert.assertTrue(saveTags.size() == 2 && saveTags.contains(""String_Node_Str"") && saveTags.contains(""String_Node_Str""));
  NetworkVO retrieved=dao.findById(1001l);
  List<String> retrievedTags=retrieved.getTags();
  Assert.assertTrue(retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  List<String> updateTags=new ArrayList<String>();
  updateTags.add(""String_Node_Str"");
  updateTags.add(""String_Node_Str"");
  retrieved.setTags(updateTags);
  dao.update(retrieved.getId(),retrieved);
  retrieved=dao.findById(1001l);
  retrievedTags=retrieved.getTags();
  Assert.assertTrue(""String_Node_Str"",retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  dao.expunge(1001l);
}",0.9981502034776176
106934,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
    for (    VolumeVO vol : vols) {
      Long volTemplateId=vol.getTemplateId();
      if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
        }
        continue;
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (!pool.isInMaintenance()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        long rootVolDcId=pool.getDataCenterId();
        Long rootVolPodId=pool.getPodId();
        Long rootVolClusterId=pool.getClusterId();
        if (planToDeploy != null) {
          Long clusterIdSpecified=planToDeploy.getClusterId();
          if (clusterIdSpecified != null && rootVolClusterId != null) {
            if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
              }
              throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
            }
          }
          plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
        }
 else {
          plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
          }
        }
      }
    }
    ExcludeList avoids=new ExcludeList();
    if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
      List<DomainRouterVO> routers=_routerDao.findBy(vm.getAccountId(),vm.getDataCenterIdToDeployIn());
      for (      DomainRouterVO router : routers) {
        if (router.hostId != null) {
          avoids.addHost(router.hostId);
          s_logger.info(""String_Node_Str"" + router.hostId);
        }
      }
    }
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
          avoids=new ExcludeList();
          s_logger.info(""String_Node_Str"");
          for (          DeploymentPlanner planner : _planners) {
            if (planner.canHandle(vmProfile,plan,avoids)) {
              dest=planner.plan(vmProfile,plan,avoids);
            }
 else {
              continue;
            }
            if (dest != null) {
              avoids.addHost(dest.getHost().getId());
              journal.record(""String_Node_Str"",vmProfile,dest);
              break;
            }
          }
        }
        if (dest == null)         throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
      List<DomainRouterVO> routers=_routerDao.findBy(vm.getAccountId(),vm.getDataCenterIdToDeployIn());
      for (      DomainRouterVO router : routers) {
        if (router.hostId != null) {
          avoids.addHost(router.hostId);
          s_logger.info(""String_Node_Str"" + router.hostId);
        }
      }
    }
    int retry=_retry;
    while (retry-- != 0) {
      List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
      for (      VolumeVO vol : vols) {
        Long volTemplateId=vol.getTemplateId();
        if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
          }
          continue;
        }
        StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
        if (!pool.isInMaintenance()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"");
          }
          long rootVolDcId=pool.getDataCenterId();
          Long rootVolPodId=pool.getPodId();
          Long rootVolClusterId=pool.getClusterId();
          if (planToDeploy != null) {
            Long clusterIdSpecified=planToDeploy.getClusterId();
            if (clusterIdSpecified != null && rootVolClusterId != null) {
              if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                }
                throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
              }
            }
            plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
          }
 else {
            plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
            }
          }
        }
      }
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
          avoids=new ExcludeList();
          s_logger.info(""String_Node_Str"");
          for (          DeploymentPlanner planner : _planners) {
            if (planner.canHandle(vmProfile,plan,avoids)) {
              dest=planner.plan(vmProfile,plan,avoids);
            }
 else {
              continue;
            }
            if (dest != null) {
              avoids.addHost(dest.getHost().getId());
              journal.record(""String_Node_Str"",vmProfile,dest);
              break;
            }
          }
        }
        if (dest == null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
        }
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}",0.94311345646438
106935,"@Override public void scheduleRestart(VMInstanceVO vm,final boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}","@Override public void scheduleRestart(VMInstanceVO vm,boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      s_logger.debug(""String_Node_Str"" + vm);
      _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    }
 catch (    NoTransitionException e) {
    }
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}",0.9729475417548812
106936,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  try {
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
      s_logger.debug(""String_Node_Str"" + vmId);
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
  }
 catch (  NoTransitionException e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}",0.9802641341445318
106937,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      try {
        _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      }
 catch (      NoTransitionException e1) {
        s_logger.warn(e1.getMessage());
      }
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}",0.9543973941368078
106938,"boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId);","boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId) throws NoTransitionException ;",0.8333333333333334
106939,"@Override public void scheduleRestart(VMInstanceVO vm,final boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}","@Override public void scheduleRestart(VMInstanceVO vm,boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      s_logger.debug(""String_Node_Str"" + vm);
      _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    }
 catch (    NoTransitionException e) {
    }
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}",0.9729475417548812
106940,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  try {
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
      s_logger.debug(""String_Node_Str"" + vmId);
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
  }
 catch (  NoTransitionException e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}",0.9802641341445318
106941,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      try {
        _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      }
 catch (      NoTransitionException e1) {
        s_logger.warn(e1.getMessage());
      }
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}",0.9543973941368078
106942,"boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId);","boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId) throws NoTransitionException ;",0.8333333333333334
106943,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  long vmId=vm.getId();
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    vm=vmGuru.findById(vmId);
    if (vm == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vmId);
      }
      return true;
    }
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,forced ? Event.AgentReportStopped : Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}",0.9263761781177436
106944,"@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    vmi.setState(oldState);
    vmi.setHostId(oldHostId);
    vmi.decrUpdated();
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}","@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  Long oldUpdated=vmi.getUpdated();
  Date oldUpdateDate=vmi.getUpdateTime();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(oldHostId).append(""String_Node_Str"").append(oldState).append(""String_Node_Str"").append(oldUpdated).append(""String_Node_Str"").append(oldUpdateDate).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}",0.8653618030842231
106945,"protected void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}","public void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}",0.9619377162629758
106946,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  if (!transitionStatus) {
    return false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return true;
}",0.9541930937279774
106947,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
    for (    VolumeVO vol : vols) {
      Long volTemplateId=vol.getTemplateId();
      if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
        }
        continue;
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (!pool.isInMaintenance()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        long rootVolDcId=pool.getDataCenterId();
        Long rootVolPodId=pool.getPodId();
        Long rootVolClusterId=pool.getClusterId();
        if (planToDeploy != null) {
          Long clusterIdSpecified=planToDeploy.getClusterId();
          if (clusterIdSpecified != null && rootVolClusterId != null) {
            if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
              }
              throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
            }
          }
          plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
        }
 else {
          plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
          }
        }
      }
    }
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
      for (      VolumeVO vol : vols) {
        Long volTemplateId=vol.getTemplateId();
        if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
          }
          continue;
        }
        StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
        if (!pool.isInMaintenance()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"");
          }
          long rootVolDcId=pool.getDataCenterId();
          Long rootVolPodId=pool.getPodId();
          Long rootVolClusterId=pool.getClusterId();
          if (planToDeploy != null) {
            Long clusterIdSpecified=planToDeploy.getClusterId();
            if (clusterIdSpecified != null && rootVolClusterId != null) {
              if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                }
                throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
              }
            }
            plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
          }
 else {
            plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
            }
          }
        }
      }
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}",0.9830989244770122
106948,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  long vmId=vm.getId();
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    vm=vmGuru.findById(vmId);
    if (vm == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vmId);
      }
      return true;
    }
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,forced ? Event.AgentReportStopped : Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}",0.9263761781177436
106949,"@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    vmi.setState(oldState);
    vmi.setHostId(oldHostId);
    vmi.decrUpdated();
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}","@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  Long oldUpdated=vmi.getUpdated();
  Date oldUpdateDate=vmi.getUpdateTime();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(oldHostId).append(""String_Node_Str"").append(oldState).append(""String_Node_Str"").append(oldUpdated).append(""String_Node_Str"").append(oldUpdateDate).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}",0.8653618030842231
106950,"protected void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}","public void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}",0.9619377162629758
106951,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  if (!transitionStatus) {
    return false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return true;
}",0.9541930937279774
106952,"private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),null);
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),router.getId());
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}",0.9961406518010292
106953,"private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),null);
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),router.getId());
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}",0.9961406518010292
106954,"@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  s_logger.debug(""String_Node_Str"");
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}","@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    return new JsonNull();
  }
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}",0.8406676783004552
106955,"protected VIF getCorrectVif(Connection conn,VM router,String vlanId){
  try {
    Set<VIF> routerVIFs=router.getVIFs(conn);
    for (    VIF vif : routerVIFs) {
      Network vifNetwork=vif.getNetwork(conn);
      if (vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        if (vifNetwork.getUuid(conn).equals(_host.publicNetwork)) {
          return vif;
        }
      }
 else {
        if (vifNetwork.getNameLabel(conn).equals(""String_Node_Str"" + vlanId)) {
          return vif;
        }
      }
    }
  }
 catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
  }
catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
  }
  return null;
}","protected VIF getCorrectVif(Connection conn,VM router,Network network) throws XmlRpcException, XenAPIException {
  Set<VIF> routerVIFs=router.getVIFs(conn);
  for (  VIF vif : routerVIFs) {
    Network vifNetwork=vif.getNetwork(conn);
    if (vifNetwork.getUuid(conn).equals(network.getUuid(conn))) {
      return vif;
    }
  }
  return null;
}",0.2261029411764706
106956,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (cmd instanceof UpdateHostPasswordCommand) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IPAssocCommand.class) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotBackupCommand.class) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotsDirCommand.class) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityIngressRulesCmd.class) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.8704483527371811
106957,"protected void assignPublicIpAddress(Connection conn,final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp,Integer networkRate) throws InternalErrorException {
  try {
    VM router=getVM(conn,vmName);
    VIF correctVif=getCorrectVif(conn,router,vlanId);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      NicTO nic=new NicTO();
      nic.setMac(vifMacAddress);
      nic.setType(TrafficType.Public);
      if (vlanId == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      nic.setNetworkRateMbps(networkRate);
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      Network network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}","protected void assignPublicIpAddress(Connection conn,String vmName,String privateIpAddress,String publicIpAddress,boolean add,boolean firstIP,boolean sourceNat,String vlanId,String vlanGateway,String vlanNetmask,String vifMacAddress,String guestIp,Integer networkRate,TrafficType trafficType,String[] tags) throws InternalErrorException {
  try {
    String tag=tags != null && tags.length > 0 ? tags[0] : null;
    VM router=getVM(conn,vmName);
    NicTO nic=new NicTO();
    nic.setMac(vifMacAddress);
    nic.setType(trafficType);
    if (vlanId == null) {
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
 else {
      nic.setBroadcastType(BroadcastDomainType.Vlan);
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
    }
    nic.setDeviceId(0);
    nic.setNetworkRateMbps(networkRate);
    if (tags != null) {
      nic.setTags(Arrays.asList(tags));
    }
    Network network=getNetwork(conn,nic);
    VIF correctVif=getCorrectVif(conn,router,network);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}",0.8220271348762969
106958,"@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  s_logger.debug(""String_Node_Str"");
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}","@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    return new JsonNull();
  }
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}",0.8406676783004552
106959,"protected VIF getCorrectVif(Connection conn,VM router,String vlanId){
  try {
    Set<VIF> routerVIFs=router.getVIFs(conn);
    for (    VIF vif : routerVIFs) {
      Network vifNetwork=vif.getNetwork(conn);
      if (vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        if (vifNetwork.getUuid(conn).equals(_host.publicNetwork)) {
          return vif;
        }
      }
 else {
        if (vifNetwork.getNameLabel(conn).equals(""String_Node_Str"" + vlanId)) {
          return vif;
        }
      }
    }
  }
 catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
  }
catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
  }
  return null;
}","protected VIF getCorrectVif(Connection conn,VM router,Network network) throws XmlRpcException, XenAPIException {
  Set<VIF> routerVIFs=router.getVIFs(conn);
  for (  VIF vif : routerVIFs) {
    Network vifNetwork=vif.getNetwork(conn);
    if (vifNetwork.getUuid(conn).equals(network.getUuid(conn))) {
      return vif;
    }
  }
  return null;
}",0.2261029411764706
106960,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (cmd instanceof UpdateHostPasswordCommand) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IPAssocCommand.class) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotBackupCommand.class) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotsDirCommand.class) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityIngressRulesCmd.class) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.8704483527371811
106961,"protected void assignPublicIpAddress(Connection conn,final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp,Integer networkRate) throws InternalErrorException {
  try {
    VM router=getVM(conn,vmName);
    VIF correctVif=getCorrectVif(conn,router,vlanId);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      NicTO nic=new NicTO();
      nic.setMac(vifMacAddress);
      nic.setType(TrafficType.Public);
      if (vlanId == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      nic.setNetworkRateMbps(networkRate);
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      Network network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}","protected void assignPublicIpAddress(Connection conn,String vmName,String privateIpAddress,String publicIpAddress,boolean add,boolean firstIP,boolean sourceNat,String vlanId,String vlanGateway,String vlanNetmask,String vifMacAddress,String guestIp,Integer networkRate,TrafficType trafficType,String[] tags) throws InternalErrorException {
  try {
    String tag=tags != null && tags.length > 0 ? tags[0] : null;
    VM router=getVM(conn,vmName);
    NicTO nic=new NicTO();
    nic.setMac(vifMacAddress);
    nic.setType(trafficType);
    if (vlanId == null) {
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
 else {
      nic.setBroadcastType(BroadcastDomainType.Vlan);
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
    }
    nic.setDeviceId(0);
    nic.setNetworkRateMbps(networkRate);
    if (tags != null) {
      nic.setTags(Arrays.asList(tags));
    }
    Network network=getNetwork(conn,nic);
    VIF correctVif=getCorrectVif(conn,router,network);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}",0.8220271348762969
106962,"@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller(),getNetworkDomain());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9818181818181818
106963,"Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId);","Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId,long zoneId);",0.925925925925926
106964,"Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller);","Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix);",0.9107142857142856
106965,"public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  return _networkMgr.getNetworkCapabilities(networkId);
}","public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  return _networkMgr.getNetworkCapabilities(networkOfferingId,zoneId);
}",0.8936170212765957
106966,"@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  response.setTags(network.getTags());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  response.setTags(network.getTags());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(networkOffering.getId(),network.getDataCenterId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9950236966824644
106967,"Map<Capability,String> getServiceCapabilities(long zoneId,Service service);","Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service);",0.8670520231213873
106968,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainSuffix != null) {
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getNetworkOfferingId() + ""String_Node_Str""+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    network.setNetworkDomain(domainSuffix);
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}",0.687432089822528
106969,"@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null));
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}","@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null),predefined.getNetworkDomain());
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}",0.9952107279693486
106970,"@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  Network network=getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(network.getDataCenterId());
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}","@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(zoneId);
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkOfferingId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}",0.2773109243697479
106971,"@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}","@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(zoneId,networkOfferingId,Service.Dns);
  String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
  if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
    if (networkDomain != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId + ""String_Node_Str""+ zoneId);
    }
  }
 else {
    if (networkDomain == null) {
      networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
    }
 else {
      if (!NetUtils.verifyDomainName(networkDomain)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}",0.911470361816782
106972,"@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Service service){
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}","@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service){
  if (!isServiceSupported(networkOfferingId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkOfferingId);
  }
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}",0.7918367346938775
106973,"@Override public boolean isServiceSupported(long networkId,Network.Service service){
  Network network=getNetwork(networkId);
  NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}","@Override public boolean isServiceSupported(long networkOfferingId,Network.Service service){
  NetworkOffering offering=_configMgr.getNetworkOffering(networkOfferingId);
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}",0.8946015424164524
106974,"@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}","@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault.booleanValue() == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}",0.98989898989899
106975,"/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
}","/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 * @param networkDomain
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific,String networkDomain){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
  this.networkDomain=networkDomain;
}",0.9591115598182736
106976,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}",0.7139240506329114
106977,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}",0.9413351314902224
106978,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
    if (userSpecified.getNetworkDomain() != null) {
      network.setNetworkDomain(userSpecified.getNetworkDomain());
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}",0.9629850746268656
106979,"@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(networkId,Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}",0.9863141524105754
106980,"@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller(),getNetworkDomain());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9818181818181818
106981,"Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId);","Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId,long zoneId);",0.925925925925926
106982,"Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller);","Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix);",0.9107142857142856
106983,"public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  return _networkMgr.getNetworkCapabilities(networkId);
}","public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  return _networkMgr.getNetworkCapabilities(networkOfferingId,zoneId);
}",0.8936170212765957
106984,"@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(networkOffering.getId(),network.getDataCenterId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9949772781631188
106985,"Map<Capability,String> getServiceCapabilities(long zoneId,Service service);","Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service);",0.8670520231213873
106986,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainSuffix != null) {
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getNetworkOfferingId() + ""String_Node_Str""+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    network.setNetworkDomain(domainSuffix);
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}",0.687432089822528
106987,"@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null));
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}","@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null),predefined.getNetworkDomain());
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}",0.9952107279693486
106988,"@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  Network network=getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(network.getDataCenterId());
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}","@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(zoneId);
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkOfferingId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}",0.2773109243697479
106989,"@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}","@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(zoneId,networkOfferingId,Service.Dns);
  String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
  if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
    if (networkDomain != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId + ""String_Node_Str""+ zoneId);
    }
  }
 else {
    if (networkDomain == null) {
      networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
    }
 else {
      if (!NetUtils.verifyDomainName(networkDomain)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}",0.911470361816782
106990,"@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Service service){
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}","@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service){
  if (!isServiceSupported(networkOfferingId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkOfferingId);
  }
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}",0.7918367346938775
106991,"@Override public boolean isServiceSupported(long networkId,Network.Service service){
  Network network=getNetwork(networkId);
  NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}","@Override public boolean isServiceSupported(long networkOfferingId,Network.Service service){
  NetworkOffering offering=_configMgr.getNetworkOffering(networkOfferingId);
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}",0.8946015424164524
106992,"@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}","@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault.booleanValue() == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}",0.98989898989899
106993,"/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
}","/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 * @param networkDomain
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific,String networkDomain){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
  this.networkDomain=networkDomain;
}",0.9591115598182736
106994,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}",0.7139240506329114
106995,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}",0.9413351314902224
106996,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
    if (userSpecified.getNetworkDomain() != null) {
      network.setNetworkDomain(userSpecified.getNetworkDomain());
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}",0.9629850746268656
106997,"@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(networkId,Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}",0.9863141524105754
106998,"/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId);","/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool);",0.9209039548022598
106999,"@Override public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId){
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}","@Override public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool){
  long dcId=pool.getDataCenterId();
  Long podId=pool.getPodId();
  if (pool.isLocal() && pool.getPoolType() == StoragePoolType.Filesystem) {
    List<StoragePoolHostVO> sphs=_storagePoolHostDao.listByPoolId(pool.getId());
    if (!sphs.isEmpty()) {
      StoragePoolHostVO localStoragePoolHost=sphs.get(0);
      return _templateHostDao.findLocalSecondaryStorageByHostTemplate(localStoragePoolHost.getHostId(),templateId);
    }
 else {
      return null;
    }
  }
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}",0.7810187200696561
107000,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),plan.getDataCenterId(),plan.getPodId());
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),pool);
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}",0.9953650057937428
