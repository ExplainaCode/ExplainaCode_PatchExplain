record_number,buggy_code,fixed_code,code_similarity
23001,"@Override public Base resolveConstant(Object appContext,String name) throws PathEngineException {
  if (""String_Node_Str"".equals(name))   return null;
  throw new NotImplementedException(""String_Node_Str"" + appContext.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
}","@Override public Base resolveConstant(Object appContext,String name) throws PathEngineException {
  return null;
}",0.5831202046035806
23002,"@Override public Base resolveConstant(Object appContext,String name) throws PathEngineException {
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public Base resolveConstant(Object appContext,String name) throws PathEngineException {
  if (""String_Node_Str"".equals(name))   return null;
  throw new NotImplementedException(""String_Node_Str"" + appContext.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
}",0.7175925925925926
23003,"private String getSpecialValueSetName(String uri){
  if (uri.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + uri.substring(19);
  return null;
}","private String getSpecialValueSetName(String uri){
  if (uri.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + uri.substring(20);
  return null;
}",0.9871794871794872
23004,"/** 
 * @param value {@link #rate} (Amount of medication per unit of time.)
 */
public Dosage setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Ratio || value instanceof Range || value instanceof SimpleQuantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}","/** 
 * @param value {@link #rate} (Amount of medication per unit of time.)
 */
public Dosage setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Ratio || value instanceof Range || value instanceof Quantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}",0.991404011461318
23005,"/** 
 * @param value {@link #dose} (Amount of medication per dose.)
 */
public Dosage setDose(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Range || value instanceof SimpleQuantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.dose=value;
  return this;
}","/** 
 * @param value {@link #dose} (Amount of medication per dose.)
 */
public Dosage setDose(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Range || value instanceof Quantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.dose=value;
  return this;
}",0.9904761904761904
23006,"/** 
 * @param value {@link #rate} (Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.)
 */
public MedicationAdministrationDosageComponent setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Ratio || value instanceof SimpleQuantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}","/** 
 * @param value {@link #rate} (Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.)
 */
public MedicationAdministrationDosageComponent setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Ratio || value instanceof Quantity))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}",0.9951923076923076
23007,"/** 
 * @param value {@link #rate} (The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.)
 */
public NutritionOrderEnteralFormulaAdministrationComponent setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof SimpleQuantity || value instanceof Ratio))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}","/** 
 * @param value {@link #rate} (The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.)
 */
public NutritionOrderEnteralFormulaAdministrationComponent setRate(Type value) throws FHIRFormatError {
  if (value != null && !(value instanceof Quantity || value instanceof Ratio))   throw new FHIRFormatError(""String_Node_Str"" + value.fhirType());
  this.rate=value;
  return this;
}",0.9932584269662922
23008,"private void validate(FetchedFile file,FetchedResource r) throws Exception {
  List<ValidationMessage> errs=new ArrayList<ValidationMessage>();
  if (r.isValidateByUserData()) {
    Resource res=r.getResource();
    if (res instanceof Bundle) {
      validator.validate(null,errs,r.getElement());
      for (      BundleEntryComponent be : ((Bundle)res).getEntry()) {
        Resource ber=be.getResource();
        if (ber.hasUserData(""String_Node_Str""))         validator.validate(r.getElement(),errs,ber,ber.getUserString(""String_Node_Str""));
      }
    }
 else     if (res.hasUserData(""String_Node_Str"")) {
      validator.validate(null,errs,res,res.getUserString(""String_Node_Str""));
    }
  }
 else   validator.validate(null,errs,r.getElement());
  for (  ValidationMessage vm : errs) {
    file.getErrors().add(vm.setLocation(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ vm.getLocation()));
  }
  r.setValidated(true);
  if (r.getConfig() == null)   igpkp.findConfiguration(file,r);
}","private void validate(FetchedFile file,FetchedResource r) throws Exception {
  List<ValidationMessage> errs=new ArrayList<ValidationMessage>();
  if (r.isValidateByUserData()) {
    Resource res=r.getResource();
    if (res instanceof Bundle) {
      validator.validate(null,errs,r.getElement());
      for (      BundleEntryComponent be : ((Bundle)res).getEntry()) {
        Resource ber=be.getResource();
        if (ber.hasUserData(""String_Node_Str""))         validator.validate(r.getElement(),errs,ber,ber.getUserString(""String_Node_Str""));
      }
    }
 else     if (res.hasUserData(""String_Node_Str"")) {
      validator.validate(null,errs,res,res.getUserString(""String_Node_Str""));
    }
  }
 else {
    validator.validate(r.getElement(),errs,r.getElement());
  }
  for (  ValidationMessage vm : errs) {
    file.getErrors().add(vm.setLocation(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ vm.getLocation()));
  }
  r.setValidated(true);
  if (r.getConfig() == null)   igpkp.findConfiguration(file,r);
}",0.9612778315585672
23009,"public void initialize() throws Exception {
  fetcher.setResourceDirs(resourceDirs);
  first=true;
  boolean copyTemplate=false;
  if (configuration == null) {
    if (configFile == null) {
      buildConfigFile();
      copyTemplate=true;
    }
 else     log(""String_Node_Str"" + configFile);
    try {
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage(),e);
    }
    if (configuration.has(""String_Node_Str"")) {
      String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
      log(""String_Node_Str"" + redirectFile);
      configFile=redirectFile;
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
    }
    if (configuration.has(""String_Node_Str"")) {
      for (      JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
        String level=((JsonPrimitive)n).getAsString();
        System.out.println(""String_Node_Str"" + level);
        logOptions.add(level);
      }
    }
  }
  if (configuration.has(""String_Node_Str"") && !""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (configuration.has(""String_Node_Str"") && !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root;
  if (fetcher instanceof ZipFetcher) {
    root=configFileRootPath;
  }
 else {
    root=Utilities.getDirectoryForFile(configFile);
    if (Utilities.noString(root))     root=getCurentDirectory();
    root=new File(root).getCanonicalPath();
  }
  if (Utilities.existsInList(version.substring(0,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   markdownEngine=new MarkDownProcessor(Dialect.DARING_FIREBALL);
 else   markdownEngine=new MarkDownProcessor(Dialect.COMMON_MARK);
  log(""String_Node_Str"" + root);
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
    outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  }
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (mode == IGBuildMode.WEBSERVER)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (mode == IGBuildMode.AUTOBUILD)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"",""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),str(configuration,""String_Node_Str"",""String_Node_Str""));
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  makeQA=mode == IGBuildMode.WEBSERVER ? false : !""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || (mode == IGBuildMode.AUTOBUILD)) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=loadPack(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  context.setExpansionProfile(makeExpProfile());
  log(""String_Node_Str"" + vsCache);
  context.initTS(vsCache);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    if (txServer == null || !txServer.contains(""String_Node_Str"")) {
      log(""String_Node_Str"");
      context.setCanRunWithoutTerminology(true);
    }
 else {
      log(""String_Node_Str"" + txServer);
      checkTSVersion(vsCache,context.connectToTSServer(txServer));
    }
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(webTxServer));
  if (copyTemplate)   copyTemplate();
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""),context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors,version.equals(""String_Node_Str""));
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  validator.setNoExtensibleWarnings(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    if (makeQA)     checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","public void initialize() throws Exception {
  fetcher.setResourceDirs(resourceDirs);
  first=true;
  boolean copyTemplate=false;
  if (configuration == null) {
    if (configFile == null) {
      buildConfigFile();
      copyTemplate=true;
    }
 else     log(""String_Node_Str"" + configFile);
    try {
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage(),e);
    }
    if (configuration.has(""String_Node_Str"")) {
      String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
      log(""String_Node_Str"" + redirectFile);
      configFile=redirectFile;
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
    }
    if (configuration.has(""String_Node_Str"")) {
      for (      JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
        String level=((JsonPrimitive)n).getAsString();
        System.out.println(""String_Node_Str"" + level);
        logOptions.add(level);
      }
    }
  }
  if (configuration.has(""String_Node_Str"") && !""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (configuration.has(""String_Node_Str"") && !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root;
  if (fetcher instanceof ZipFetcher) {
    root=configFileRootPath;
  }
 else {
    root=Utilities.getDirectoryForFile(configFile);
    if (Utilities.noString(root))     root=getCurentDirectory();
    root=new File(root).getCanonicalPath();
  }
  if (Utilities.existsInList(version.substring(0,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   markdownEngine=new MarkDownProcessor(Dialect.DARING_FIREBALL);
 else   markdownEngine=new MarkDownProcessor(Dialect.COMMON_MARK);
  log(""String_Node_Str"" + root);
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
    outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  }
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (mode == IGBuildMode.WEBSERVER)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (mode == IGBuildMode.AUTOBUILD)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"",""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),str(configuration,""String_Node_Str"",""String_Node_Str""));
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  makeQA=mode == IGBuildMode.WEBSERVER ? false : !""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || (mode == IGBuildMode.AUTOBUILD)) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=loadPack(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  context.setExpansionProfile(makeExpProfile());
  log(""String_Node_Str"" + vsCache);
  context.initTS(vsCache);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    if (txServer == null || !txServer.contains(""String_Node_Str"")) {
      log(""String_Node_Str"");
      context.setCanRunWithoutTerminology(true);
    }
 else {
      log(""String_Node_Str"" + txServer);
      checkTSVersion(vsCache,context.connectToTSServer(txServer));
    }
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(webTxServer));
  if (copyTemplate)   copyTemplate();
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""),context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors,version.equals(""String_Node_Str""));
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,new IGPublisherHostServices());
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  validator.setNoExtensibleWarnings(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    if (makeQA)     checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9986370630907891
23010,"public void txItem(Map<String,ElementDefinitionBindingComponent> txmap,StringBuilder b,String path){
  ElementDefinitionBindingComponent tx=txmap.get(path);
  String vss=""String_Node_Str"";
  String vsn=""String_Node_Str"";
  if (tx.hasValueSet()) {
    String uri=tx.getValueSet().primitiveValue();
    ValueSet vs=context.fetchResource(ValueSet.class,canonicalise(uri));
    if (vs == null) {
      BindingResolution br=igp.resolveActualUrl(uri);
      if (br.url == null)       vss=""String_Node_Str"" + Utilities.escapeXml(br.display) + ""String_Node_Str"";
 else       if (Utilities.isAbsoluteUrl(br.url))       vss=""String_Node_Str"" + br.url + ""String_Node_Str""+ Utilities.escapeXml(br.display)+ ""String_Node_Str"";
 else       vss=""String_Node_Str"" + prefix + br.url+ ""String_Node_Str""+ Utilities.escapeXml(br.display)+ ""String_Node_Str"";
    }
 else {
      String p=vs.getUserString(""String_Node_Str"");
      if (p == null)       vss=""String_Node_Str"" + Utilities.escapeXml(gt(vs.getNameElement())) + ""String_Node_Str""+ translate(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
 else       if (p.startsWith(""String_Node_Str""))       vss=""String_Node_Str"" + p + ""String_Node_Str""+ Utilities.escapeXml(gt(vs.getNameElement()))+ ""String_Node_Str"";
 else       vss=""String_Node_Str"" + p + ""String_Node_Str""+ Utilities.escapeXml(gt(vs.getNameElement()))+ ""String_Node_Str"";
      vsn=gt(vs.getNameElement());
    }
  }
  if (vsn.equals(""String_Node_Str""))   if (tx.getValueSet() != null)   System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ tx.getValueSet().primitiveValue()+ ""String_Node_Str"");
 else   System.out.println(""String_Node_Str"" + path + ""String_Node_Str"");
  b.append(""String_Node_Str"").append(path).append(""String_Node_Str"").append(Utilities.escapeXml(vsn)).append(""String_Node_Str"").append(prefix).append(""String_Node_Str"").append(tx.getStrength() == null ? ""String_Node_Str"" : egt(tx.getStrengthElement())).append(""String_Node_Str"").append(tx.getStrength() == null ? ""String_Node_Str"" : egt(tx.getStrengthElement())).append(""String_Node_Str"").append(vss).append(""String_Node_Str"");
}","public void txItem(Map<String,ElementDefinitionBindingComponent> txmap,StringBuilder b,String path){
  ElementDefinitionBindingComponent tx=txmap.get(path);
  String vss=""String_Node_Str"";
  String vsn=""String_Node_Str"";
  if (tx.hasValueSet()) {
    String uri=tx.getValueSet().primitiveValue();
    String name=getSpecialValueSetName(uri);
    if (name != null) {
      vss=""String_Node_Str"" + uri + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str"";
      vsn=name;
    }
 else {
      ValueSet vs=context.fetchResource(ValueSet.class,canonicalise(uri));
      if (vs == null) {
        BindingResolution br=igp.resolveActualUrl(uri);
        if (br.url == null)         vss=""String_Node_Str"" + Utilities.escapeXml(br.display) + ""String_Node_Str"";
 else         if (Utilities.isAbsoluteUrl(br.url))         vss=""String_Node_Str"" + br.url + ""String_Node_Str""+ Utilities.escapeXml(br.display)+ ""String_Node_Str"";
 else         vss=""String_Node_Str"" + prefix + br.url+ ""String_Node_Str""+ Utilities.escapeXml(br.display)+ ""String_Node_Str"";
      }
 else {
        String p=vs.getUserString(""String_Node_Str"");
        if (p == null)         vss=""String_Node_Str"" + Utilities.escapeXml(gt(vs.getNameElement())) + ""String_Node_Str""+ translate(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
 else         if (p.startsWith(""String_Node_Str""))         vss=""String_Node_Str"" + p + ""String_Node_Str""+ Utilities.escapeXml(gt(vs.getNameElement()))+ ""String_Node_Str"";
 else         vss=""String_Node_Str"" + p + ""String_Node_Str""+ Utilities.escapeXml(gt(vs.getNameElement()))+ ""String_Node_Str"";
        vsn=gt(vs.getNameElement());
      }
    }
  }
  if (vsn.equals(""String_Node_Str""))   if (tx.getValueSet() != null)   System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ tx.getValueSet().primitiveValue()+ ""String_Node_Str"");
 else   System.out.println(""String_Node_Str"" + path + ""String_Node_Str"");
  b.append(""String_Node_Str"").append(path).append(""String_Node_Str"").append(Utilities.escapeXml(vsn)).append(""String_Node_Str"").append(prefix).append(""String_Node_Str"").append(tx.getStrength() == null ? ""String_Node_Str"" : egt(tx.getStrengthElement())).append(""String_Node_Str"").append(tx.getStrength() == null ? ""String_Node_Str"" : egt(tx.getStrengthElement())).append(""String_Node_Str"").append(vss).append(""String_Node_Str"");
}",0.9463806970509384
23011,"public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.r4.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.r4.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(src.getValueSet() instanceof CanonicalType ? convertCanonicalToReference((CanonicalType)src.getValueSet()) : convertType(src.getValueSet()));
  return tgt;
}",0.9263015551048004
23012,"public static org.hl7.fhir.dstu2016may.model.ConceptMap convertConceptMap(org.hl7.fhir.r4.model.ConceptMap src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasName())   tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.r4.model.ContactDetail t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.r4.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.r4.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.r4.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap convertConceptMap(org.hl7.fhir.r4.model.ConceptMap src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasName())   tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.r4.model.ContactDetail t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.r4.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  if (src.getSource() instanceof CanonicalType)   tgt.setSource(convertCanonicalToReference((CanonicalType)src.getSource()));
 else   tgt.setSource(convertType(src.getSource()));
  if (src.getTarget() instanceof CanonicalType)   tgt.setTarget(convertCanonicalToReference((CanonicalType)src.getTarget()));
 else   tgt.setTarget(convertType(src.getTarget()));
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.r4.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.r4.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}",0.8805584281282316
23013,"private SpecificationPackage loadPack(String fn) throws FHIRException, IOException {
  if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R2ToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R3ToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R3ToR4Loader());
  }
 else   return SpecificationPackage.fromPath(fn);
}","private SpecificationPackage loadPack(String fn) throws FHIRException, IOException {
  SpecificationPackage sp=null;
  if (""String_Node_Str"".equals(version)) {
    sp=SpecificationPackage.fromPath(fn,new R2ToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    sp=SpecificationPackage.fromPath(fn,new R2016MayToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    sp=SpecificationPackage.fromPath(fn,new R3ToR4Loader());
  }
 else   return SpecificationPackage.fromPath(fn);
  ProfileUtilities utils=new ProfileUtilities(context,new ArrayList<ValidationMessage>(),igpkp);
  for (  StructureDefinition sd : sp.makeContext().allStructures()) {
    utils.setIds(sd,true);
  }
  return sp;
}",0.5477178423236515
23014,"private void composeElement(IXMLWriter xml,Element element,String elementName) throws IOException {
  for (  String s : element.getComments()) {
    xml.comment(s,true);
  }
  if (isText(element.getProperty())) {
    if (linkResolver != null)     xml.link(linkResolver.resolveProperty(element.getProperty()));
    xml.enter(elementName);
    xml.text(element.getValue());
    xml.exit(elementName);
  }
 else   if (element.isPrimitive() || (element.hasType() && isPrimitive(element.getType()))) {
    if (element.getType().equals(""String_Node_Str"")) {
      xml.escapedText(element.getValue());
    }
 else     if (isText(element.getProperty())) {
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      xml.text(element.getValue());
    }
 else {
      if (element.hasValue()) {
        if (linkResolver != null)         xml.link(linkResolver.resolveType(element.getType()));
        xml.attribute(""String_Node_Str"",element.getValue());
      }
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      if (element.hasChildren()) {
        xml.enter(elementName);
        for (        Element child : element.getChildren())         composeElement(xml,child,child.getName());
        xml.exit(elementName);
      }
 else       xml.element(elementName);
    }
  }
 else {
    for (    Element child : element.getChildren()) {
      if (isAttr(child.getProperty())) {
        if (linkResolver != null)         xml.link(linkResolver.resolveType(child.getType()));
        xml.attribute(child.getName(),child.getValue());
      }
    }
    if (linkResolver != null)     xml.link(linkResolver.resolveProperty(element.getProperty()));
    xml.enter(elementName);
    if (element.getSpecial() != null) {
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      xml.enter(element.getType());
    }
    for (    Element child : element.getChildren()) {
      if (isText(child.getProperty())) {
        if (linkResolver != null)         xml.link(linkResolver.resolveProperty(element.getProperty()));
        xml.text(child.getValue());
      }
 else       if (!isAttr(child.getProperty()))       composeElement(xml,child,child.getName());
    }
    if (element.getSpecial() != null)     xml.exit(element.getType());
    xml.exit(elementName);
  }
}","private void composeElement(IXMLWriter xml,Element element,String elementName,boolean root) throws IOException {
  for (  String s : element.getComments()) {
    xml.comment(s,true);
  }
  if (isText(element.getProperty())) {
    if (linkResolver != null)     xml.link(linkResolver.resolveProperty(element.getProperty()));
    xml.enter(elementName);
    xml.text(element.getValue());
    xml.exit(elementName);
  }
 else   if (element.isPrimitive() || (element.hasType() && isPrimitive(element.getType()))) {
    if (element.getType().equals(""String_Node_Str"")) {
      xml.escapedText(element.getValue());
    }
 else     if (isText(element.getProperty())) {
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      xml.text(element.getValue());
    }
 else {
      if (element.hasValue()) {
        if (linkResolver != null)         xml.link(linkResolver.resolveType(element.getType()));
        xml.attribute(""String_Node_Str"",element.getValue());
      }
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      if (element.hasChildren()) {
        xml.enter(elementName);
        for (        Element child : element.getChildren())         composeElement(xml,child,child.getName(),false);
        xml.exit(elementName);
      }
 else       xml.element(elementName);
    }
  }
 else {
    for (    Element child : element.getChildren()) {
      if (isAttr(child.getProperty())) {
        if (linkResolver != null)         xml.link(linkResolver.resolveType(child.getType()));
        xml.attribute(child.getName(),child.getValue());
      }
    }
    if (linkResolver != null)     xml.link(linkResolver.resolveProperty(element.getProperty()));
    xml.enter(elementName);
    if (!root && element.getSpecial() != null) {
      if (linkResolver != null)       xml.link(linkResolver.resolveProperty(element.getProperty()));
      xml.enter(element.getType());
    }
    for (    Element child : element.getChildren()) {
      if (isText(child.getProperty())) {
        if (linkResolver != null)         xml.link(linkResolver.resolveProperty(element.getProperty()));
        xml.text(child.getValue());
      }
 else       if (!isAttr(child.getProperty()))       composeElement(xml,child,child.getName(),false);
    }
    if (!root && element.getSpecial() != null)     xml.exit(element.getType());
    xml.exit(elementName);
  }
}",0.9910769869267484
23015,"public void compose(Element e,IXMLWriter xml) throws Exception {
  xml.start();
  xml.setDefaultNamespace(e.getProperty().getNamespace());
  composeElement(xml,e,e.getType());
  xml.end();
}","public void compose(Element e,IXMLWriter xml) throws Exception {
  xml.start();
  xml.setDefaultNamespace(e.getProperty().getNamespace());
  composeElement(xml,e,e.getType(),true);
  xml.end();
}",0.987012987012987
23016,"private void generateOutputs(FetchedFile f,boolean regen) throws TransformerException {
  if (f.getProcessMode() == FetchedFile.PROCESS_NONE) {
    String dst=tempDir;
    if (f.getRelativePath().startsWith(File.separator))     dst=dst + f.getRelativePath();
 else     dst=dst + File.separator + f.getRelativePath();
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(f.getSource(),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else   if (f.getProcessMode() == FetchedFile.PROCESS_XSLT) {
    String dst=tempDir;
    if (f.getRelativePath().startsWith(File.separator))     dst=dst + f.getRelativePath();
 else     dst=dst + File.separator + f.getRelativePath();
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(transform(f.getSource(),f.getXslt()),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    for (    FetchedResource r : f.getResources()) {
      try {
        dlog(LogCategory.PROGRESS,""String_Node_Str"" + r.getElement().fhirType() + ""String_Node_Str""+ r.getId());
        Map<String,String> vars=makeVars(r);
        saveDirectResourceOutputs(f,r,vars);
        if (r.getResource() != null) {
switch (r.getResource().getResourceType()) {
case CodeSystem:
            generateOutputsCodeSystem(f,r,(CodeSystem)r.getResource(),vars);
          break;
case ValueSet:
        generateOutputsValueSet(f,r,(ValueSet)r.getResource(),vars);
      break;
case ConceptMap:
    generateOutputsConceptMap(f,r,(ConceptMap)r.getResource(),vars);
  break;
case CapabilityStatement:
generateOutputsCapabilityStatement(f,r,(CapabilityStatement)r.getResource(),vars);
break;
case StructureDefinition:
generateOutputsStructureDefinition(f,r,(StructureDefinition)r.getResource(),vars,regen);
break;
case StructureMap:
generateOutputsStructureMap(f,r,(StructureMap)r.getResource(),vars);
break;
default :
}
}
}
 catch (Exception e) {
log(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ r.getElement().fhirType()+ ""String_Node_Str""+ r.getId()+ ""String_Node_Str""+ e.getMessage());
e.printStackTrace();
for (StackTraceElement m : e.getStackTrace()) {
log(""String_Node_Str"" + m.toString());
}
}
}
}
}","private void generateOutputs(FetchedFile f,boolean regen) throws TransformerException {
  log(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ f.getPath());
  if (f.getProcessMode() == FetchedFile.PROCESS_NONE) {
    String dst=tempDir;
    if (f.getRelativePath().startsWith(File.separator))     dst=dst + f.getRelativePath();
 else     dst=dst + File.separator + f.getRelativePath();
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(f.getSource(),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else   if (f.getProcessMode() == FetchedFile.PROCESS_XSLT) {
    String dst=tempDir;
    if (f.getRelativePath().startsWith(File.separator))     dst=dst + f.getRelativePath();
 else     dst=dst + File.separator + f.getRelativePath();
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(transform(f.getSource(),f.getXslt()),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    for (    FetchedResource r : f.getResources()) {
      try {
        dlog(LogCategory.PROGRESS,""String_Node_Str"" + r.getElement().fhirType() + ""String_Node_Str""+ r.getId());
        Map<String,String> vars=makeVars(r);
        saveDirectResourceOutputs(f,r,vars);
        if (r.getResource() != null) {
switch (r.getResource().getResourceType()) {
case CodeSystem:
            generateOutputsCodeSystem(f,r,(CodeSystem)r.getResource(),vars);
          break;
case ValueSet:
        generateOutputsValueSet(f,r,(ValueSet)r.getResource(),vars);
      break;
case ConceptMap:
    generateOutputsConceptMap(f,r,(ConceptMap)r.getResource(),vars);
  break;
case CapabilityStatement:
generateOutputsCapabilityStatement(f,r,(CapabilityStatement)r.getResource(),vars);
break;
case StructureDefinition:
generateOutputsStructureDefinition(f,r,(StructureDefinition)r.getResource(),vars,regen);
break;
case StructureMap:
generateOutputsStructureMap(f,r,(StructureMap)r.getResource(),vars);
break;
default :
}
}
}
 catch (Exception e) {
log(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ r.getElement().fhirType()+ ""String_Node_Str""+ r.getId()+ ""String_Node_Str""+ e.getMessage());
e.printStackTrace();
for (StackTraceElement m : e.getStackTrace()) {
log(""String_Node_Str"" + m.toString());
}
}
}
}
}",0.9855129986108356
23017,"private boolean loadSpreadsheet(JsonPrimitive be,boolean needToBuild,FetchedFile igf,Set<String> knownValueSetIds) throws Exception {
  if (be.getAsString().startsWith(""String_Node_Str""))   return false;
  FetchedFile f=fetcher.fetchResourceFile(be.getAsString());
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.getValuesetsToLoad().clear();
    dlog(LogCategory.PROGRESS,""String_Node_Str"" + f.getPath());
    Bundle bnd=new IgSpreadsheetParser(context,execTime,igpkp.getCanonical(),f.getValuesetsToLoad(),first,context.getBinaries().get(""String_Node_Str""),knownValueSetIds).parse(f);
    f.setBundle(new FetchedResource());
    f.getBundle().setResource(bnd);
    for (    BundleEntryComponent b : bnd.getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(convertToElement(r.getResource()));
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else {
    f=altMap.get(""String_Node_Str"" + be.getAsString());
  }
  for (  String id : f.getValuesetsToLoad().keySet()) {
    if (!knownValueSetIds.contains(id)) {
      String vr=f.getValuesetsToLoad().get(id);
      FetchedFile fv=fetcher.fetchFlexible(vr);
      boolean vrchanged=noteFile(""String_Node_Str"" + vr,fv);
      if (vrchanged) {
        loadAsElementModel(fv,fv.addResource());
        checkImplicitResourceIdentity(id,fv);
      }
      knownValueSetIds.add(id);
      boolean crchanged=false;
      String cr=vr.replace(""String_Node_Str"",""String_Node_Str"");
      if (!cr.equals(vr)) {
        if (fetcher.canFetchFlexible(cr)) {
          fv=fetcher.fetchFlexible(cr);
          crchanged=noteFile(""String_Node_Str"" + vr,fv);
          if (crchanged) {
            loadAsElementModel(fv,fv.addResource());
            checkImplicitResourceIdentity(id,fv);
          }
        }
      }
      changed=changed || vrchanged || crchanged;
    }
  }
  ImplementationGuideDefinitionPackageComponent pck=publishedIg.getDefinition().addPackage().setName(f.getTitle());
  pck.setId(be.getAsString());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuideDefinitionResourceComponent res=publishedIg.getDefinition().addResource();
    res.setPackage(pck.getId());
    res.setName(r.getTitle()).setReference(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}","private boolean loadSpreadsheet(JsonPrimitive be,boolean needToBuild,FetchedFile igf,Set<String> knownValueSetIds) throws Exception {
  if (be.getAsString().startsWith(""String_Node_Str""))   return false;
  FetchedFile f=fetcher.fetchResourceFile(be.getAsString());
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.getValuesetsToLoad().clear();
    dlog(LogCategory.PROGRESS,""String_Node_Str"" + f.getPath());
    Bundle bnd=new IgSpreadsheetParser(context,execTime,igpkp.getCanonical(),f.getValuesetsToLoad(),first,context.getBinaries().get(""String_Node_Str""),knownValueSetIds).parse(f);
    f.setBundle(new FetchedResource());
    f.setBundleType(FetchedBundleType.SPREADSHEET);
    f.getBundle().setResource(bnd);
    for (    BundleEntryComponent b : bnd.getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(convertToElement(r.getResource()));
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else {
    f=altMap.get(""String_Node_Str"" + be.getAsString());
  }
  for (  String id : f.getValuesetsToLoad().keySet()) {
    if (!knownValueSetIds.contains(id)) {
      String vr=f.getValuesetsToLoad().get(id);
      FetchedFile fv=fetcher.fetchFlexible(vr);
      boolean vrchanged=noteFile(""String_Node_Str"" + vr,fv);
      if (vrchanged) {
        loadAsElementModel(fv,fv.addResource());
        checkImplicitResourceIdentity(id,fv);
      }
      knownValueSetIds.add(id);
      boolean crchanged=false;
      String cr=vr.replace(""String_Node_Str"",""String_Node_Str"");
      if (!cr.equals(vr)) {
        if (fetcher.canFetchFlexible(cr)) {
          fv=fetcher.fetchFlexible(cr);
          crchanged=noteFile(""String_Node_Str"" + vr,fv);
          if (crchanged) {
            loadAsElementModel(fv,fv.addResource());
            checkImplicitResourceIdentity(id,fv);
          }
        }
      }
      changed=changed || vrchanged || crchanged;
    }
  }
  ImplementationGuideDefinitionPackageComponent pck=publishedIg.getDefinition().addPackage().setName(f.getTitle());
  pck.setId(be.getAsString());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuideDefinitionResourceComponent res=publishedIg.getDefinition().addResource();
    res.setPackage(pck.getId());
    res.setName(r.getTitle()).setReference(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}",0.9900459418070444
23018,"private void load(String type) throws Exception {
  log(LogCategory.PROGRESS,""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        log(LogCategory.PROGRESS,""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
          r.getResource().setUserData(""String_Node_Str"",r.getElement());
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        if (r.getResource() instanceof MetadataResource) {
          MetadataResource bc=(MetadataResource)r.getResource();
          if (bc == null)           throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str"");
          boolean altered=false;
          if (bc.hasUrl()) {
            if (adHocTmpDir == null && !listedURLExemptions.contains(bc.getUrl()) && !bc.getUrl().equals(Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId())))             throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str""+ Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId())+ ""String_Node_Str""+ bc.getUrl()+ ""String_Node_Str"");
          }
 else           if (bc.hasId())           bc.setUrl(Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId()));
 else           throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str"");
          if (businessVersion != null) {
            if (!bc.hasVersion()) {
              altered=true;
            }
 else             if (!bc.getVersion().equals(businessVersion))             System.out.println(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ bc.getVersion()+ ""String_Node_Str""+ businessVersion);
            bc.setVersion(businessVersion);
          }
          if (jurisdictions != null) {
            altered=true;
            bc.getJurisdiction().clear();
            bc.getJurisdiction().addAll(jurisdictions);
          }
          if (!bc.hasDate()) {
            altered=true;
            bc.setDateElement(new DateTimeType(execTime));
          }
          if (!bc.hasStatus()) {
            altered=true;
            bc.setStatus(PublicationStatus.DRAFT);
          }
          if (altered)           r.setElement(convertToElement(bc));
          igpkp.checkForPath(f,r,bc);
          try {
            context.cacheResource(bc);
          }
 catch (          Exception e) {
            throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
          }
        }
      }
    }
  }
}","private void load(String type) throws Exception {
  log(LogCategory.PROGRESS,""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        log(LogCategory.PROGRESS,""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          if (f.getBundleType() == FetchedBundleType.NATIVE)           r.setResource(parseInternal(f,r));
 else           r.setResource(parse(f));
          r.getResource().setUserData(""String_Node_Str"",r.getElement());
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        if (r.getResource() instanceof MetadataResource) {
          MetadataResource bc=(MetadataResource)r.getResource();
          if (bc == null)           throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str"");
          boolean altered=false;
          if (bc.hasUrl()) {
            if (adHocTmpDir == null && !listedURLExemptions.contains(bc.getUrl()) && !bc.getUrl().equals(Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId())))             throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str""+ Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId())+ ""String_Node_Str""+ bc.getUrl()+ ""String_Node_Str"");
          }
 else           if (bc.hasId())           bc.setUrl(Utilities.pathURL(igpkp.getCanonical(),bc.fhirType(),bc.getId()));
 else           throw new Exception(""String_Node_Str"" + f.getPath() + ""String_Node_Str"");
          if (businessVersion != null) {
            if (!bc.hasVersion()) {
              altered=true;
            }
 else             if (!bc.getVersion().equals(businessVersion))             System.out.println(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ bc.getVersion()+ ""String_Node_Str""+ businessVersion);
            bc.setVersion(businessVersion);
          }
          if (jurisdictions != null) {
            altered=true;
            bc.getJurisdiction().clear();
            bc.getJurisdiction().addAll(jurisdictions);
          }
          if (!bc.hasDate()) {
            altered=true;
            bc.setDateElement(new DateTimeType(execTime));
          }
          if (!bc.hasStatus()) {
            altered=true;
            bc.setStatus(PublicationStatus.DRAFT);
          }
          if (altered)           r.setElement(convertToElement(bc));
          igpkp.checkForPath(f,r,bc);
          try {
            context.cacheResource(bc);
          }
 catch (          Exception e) {
            throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
          }
        }
      }
    }
  }
}",0.9798416126709864
23019,"private Resource parse(FetchedFile file) throws Exception {
  String parseVersion=version;
  if (!file.getResources().isEmpty())   parseVersion=str(file.getResources().get(0).getConfig(),""String_Node_Str"",version);
  if (parseVersion.equals(""String_Node_Str"") || parseVersion.equals(""String_Node_Str"")) {
    org.hl7.fhir.dstu3.model.Resource res;
    if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu3.formats.JsonParser().parse(file.getSource());
 else     if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu3.formats.XmlParser().parse(file.getSource());
 else     throw new Exception(""String_Node_Str"" + file.getName());
    return VersionConvertor_30_40.convertResource(res);
  }
 else   if (parseVersion.equals(""String_Node_Str"")) {
    org.hl7.fhir.dstu2016may.model.Resource res;
    if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu2016may.formats.JsonParser().parse(file.getSource());
 else     if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu2016may.formats.XmlParser().parse(file.getSource());
 else     throw new Exception(""String_Node_Str"" + file.getName());
    return VersionConvertor_14_40.convertResource(res);
  }
 else   if (parseVersion.equals(""String_Node_Str"")) {
    org.hl7.fhir.dstu2.model.Resource res;
    if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else     if (file.getContentType().contains(""String_Node_Str""))     res=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
 else     throw new Exception(""String_Node_Str"" + file.getName());
    VersionConvertorAdvisor40 advisor=new IGR2ConvertorAdvisor();
    return new VersionConvertor_10_40(advisor).convertResource(res);
  }
 else   if (parseVersion.equals(Constants.VERSION)) {
    if (file.getContentType().contains(""String_Node_Str""))     return new JsonParser().parse(file.getSource());
 else     if (file.getContentType().contains(""String_Node_Str""))     return new XmlParser().parse(file.getSource());
 else     throw new Exception(""String_Node_Str"" + file.getName());
  }
 else   throw new Exception(""String_Node_Str"" + parseVersion);
}","private Resource parse(FetchedFile file) throws Exception {
  String parseVersion=version;
  if (!file.getResources().isEmpty())   parseVersion=str(file.getResources().get(0).getConfig(),""String_Node_Str"",version);
  return parseContent(file.getName(),file.getContentType(),parseVersion,file.getSource());
}",0.1902173913043478
23020,"private boolean loadBundle(JsonPrimitive be,boolean needToBuild,FetchedFile igf) throws Exception {
  FetchedFile f=fetcher.fetch(new Reference().setReference(""String_Node_Str"" + be.getAsString()),igf);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.setBundle(new FetchedResource());
    loadAsElementModel(f,f.getBundle());
    List<Element> entries=new ArrayList<Element>();
    f.getBundle().getElement().getNamedChildren(""String_Node_Str"",entries);
    for (    Element bnde : entries) {
      Element res=bnde.getNamedChild(""String_Node_Str"");
      FetchedResource r=f.addResource();
      r.setElement(res);
      r.setId(res.getIdBase());
      List<Element> profiles=new ArrayList<Element>();
      Element meta=res.getNamedChild(""String_Node_Str"");
      if (meta != null)       meta.getNamedChildren(""String_Node_Str"",profiles);
      for (      Element p : profiles)       r.getProfiles().add(p.primitiveValue());
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else   f=altMap.get(""String_Node_Str"" + be.getAsString());
  ImplementationGuideDefinitionPackageComponent pck=publishedIg.getDefinition().addPackage().setName(f.getTitle());
  pck.setId(be.getAsString());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuideDefinitionResourceComponent res=publishedIg.getDefinition().addResource();
    res.setPackage(pck.getId());
    res.setName(r.getId()).setReference(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}","private boolean loadBundle(JsonPrimitive be,boolean needToBuild,FetchedFile igf) throws Exception {
  FetchedFile f=fetcher.fetch(new Reference().setReference(""String_Node_Str"" + be.getAsString()),igf);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.setBundle(new FetchedResource());
    f.setBundleType(FetchedBundleType.NATIVE);
    loadAsElementModel(f,f.getBundle());
    List<Element> entries=new ArrayList<Element>();
    f.getBundle().getElement().getNamedChildren(""String_Node_Str"",entries);
    for (    Element bnde : entries) {
      Element res=bnde.getNamedChild(""String_Node_Str"");
      FetchedResource r=f.addResource();
      r.setElement(res);
      r.setId(res.getIdBase());
      List<Element> profiles=new ArrayList<Element>();
      Element meta=res.getNamedChild(""String_Node_Str"");
      if (meta != null)       meta.getNamedChildren(""String_Node_Str"",profiles);
      for (      Element p : profiles)       r.getProfiles().add(p.primitiveValue());
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else   f=altMap.get(""String_Node_Str"" + be.getAsString());
  ImplementationGuideDefinitionPackageComponent pck=publishedIg.getDefinition().addPackage().setName(f.getTitle());
  pck.setId(be.getAsString());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuideDefinitionResourceComponent res=publishedIg.getDefinition().addResource();
    res.setPackage(pck.getId());
    res.setName(r.getId()).setReference(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}",0.9864670313849696
23021,"private MetadataResource findTxValueSet(String uri){
  MetadataResource res=expansionCache.getStoredResource(uri);
  if (res != null)   return res;
  try {
    res=txServer.getCanonical(ValueSet.class,uri);
  }
 catch (  Exception e) {
    return null;
  }
  if (res != null)   try {
    expansionCache.storeResource(res);
  }
 catch (  IOException e) {
  }
  return res;
}","private MetadataResource findTxValueSet(String uri){
  MetadataResource res=expansionCache.getStoredResource(uri);
  if (res != null)   return res;
synchronized (lock) {
    if (notCanonical.contains(uri))     return null;
  }
  try {
    tlog(""String_Node_Str"" + uri);
    res=txServer.getCanonical(ValueSet.class,uri);
  }
 catch (  Exception e) {
synchronized (lock) {
      notCanonical.add(uri);
    }
    return null;
  }
  if (res != null)   try {
    expansionCache.storeResource(res);
  }
 catch (  IOException e) {
  }
  return res;
}",0.8004362050163577
23022,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResourceWithException(Class<T> class_,String uri) throws FHIRException {
  if (class_ == null) {
    if (Utilities.isAbsoluteUrl(uri) || uri.startsWith(""String_Node_Str"")) {
      Resource res=findTxValueSet(uri);
      if (res != null)       return (T)res;
    }
    return null;
  }
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
synchronized (lock) {
    if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
      String version=null;
      if (uri.contains(""String_Node_Str""))       uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
      if (class_ == Resource.class) {
        if (structures.containsKey(uri))         return (T)structures.get(uri);
        if (valueSets.containsKey(uri))         return (T)valueSets.get(uri);
        if (codeSystems.containsKey(uri))         return (T)codeSystems.get(uri);
        if (operations.containsKey(uri))         return (T)operations.get(uri);
        if (searchParameters.containsKey(uri))         return (T)searchParameters.get(uri);
        if (maps.containsKey(uri))         return (T)maps.get(uri);
        if (transforms.containsKey(uri))         return (T)transforms.get(uri);
        return null;
      }
 else       if (class_ == StructureDefinition.class) {
        return (T)structures.get(uri);
      }
 else       if (class_ == ValueSet.class) {
        return (T)valueSets.get(uri);
      }
 else       if (class_ == CodeSystem.class) {
        return (T)codeSystems.get(uri);
      }
 else       if (class_ == OperationDefinition.class) {
        OperationDefinition od=operations.get(uri);
        return (T)od;
      }
 else       if (class_ == SearchParameter.class) {
        SearchParameter res=searchParameters.get(uri);
        if (res == null) {
          StringBuilder b=new StringBuilder();
          for (          String s : searchParameters.keySet()) {
            b.append(s);
            b.append(""String_Node_Str"");
          }
        }
        return (T)res;
      }
    }
    if (class_ == Questionnaire.class)     return null;
    throw new FHIRException(""String_Node_Str"" + uri);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResourceWithException(Class<T> class_,String uri) throws FHIRException {
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
synchronized (lock) {
    if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
      String version=null;
      if (uri.contains(""String_Node_Str""))       uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
      if (class_ == Resource.class || class_ == null) {
        if (structures.containsKey(uri))         return (T)structures.get(uri);
        if (valueSets.containsKey(uri))         return (T)valueSets.get(uri);
        if (codeSystems.containsKey(uri))         return (T)codeSystems.get(uri);
        if (operations.containsKey(uri))         return (T)operations.get(uri);
        if (searchParameters.containsKey(uri))         return (T)searchParameters.get(uri);
        if (maps.containsKey(uri))         return (T)maps.get(uri);
        if (transforms.containsKey(uri))         return (T)transforms.get(uri);
        return null;
      }
 else       if (class_ == StructureDefinition.class) {
        return (T)structures.get(uri);
      }
 else       if (class_ == ValueSet.class) {
        return (T)valueSets.get(uri);
      }
 else       if (class_ == CodeSystem.class) {
        return (T)codeSystems.get(uri);
      }
 else       if (class_ == OperationDefinition.class) {
        OperationDefinition od=operations.get(uri);
        return (T)od;
      }
 else       if (class_ == SearchParameter.class) {
        SearchParameter res=searchParameters.get(uri);
        if (res == null) {
          StringBuilder b=new StringBuilder();
          for (          String s : searchParameters.keySet()) {
            b.append(s);
            b.append(""String_Node_Str"");
          }
        }
        if (res != null)         return (T)res;
      }
    }
    if (class_ == Questionnaire.class)     return null;
    if (class_ == null) {
      if (uri.matches(Constants.URI_REGEX) && !uri.contains(""String_Node_Str""))       return null;
      if (Utilities.isAbsoluteUrl(uri) || uri.startsWith(""String_Node_Str"")) {
        Resource res=findTxValueSet(uri);
        if (res != null)         return (T)res;
      }
      return null;
    }
    throw new FHIRException(""String_Node_Str"" + uri);
  }
}",0.1756349547998278
23023,"private ValidationResult verifyCodeExternal(ValueSet vs,CodeableConcept cc,boolean tryCache) throws Exception {
  ValidationResult res=handleByCache(vs,cc,tryCache);
  if (res != null)   return res;
  Parameters pin=new Parameters();
  pin.addParameter().setName(""String_Node_Str"").setValue(cc);
  pin.addParameter().setName(""String_Node_Str"").setResource(vs);
  res=serverValidateCode(pin,false);
  Map<String,ValidationResult> cache=validationCache.get(vs.getUrl());
  cache.put(cacheId(cc),res);
  return res;
}","private ValidationResult verifyCodeExternal(ValueSet vs,CodeableConcept cc,boolean tryCache) throws Exception {
  ValidationResult res=handleByCache(vs,cc,tryCache);
  if (res != null)   return res;
  Parameters pin=new Parameters();
  pin.addParameter().setName(""String_Node_Str"").setValue(cc);
  pin.addParameter().setName(""String_Node_Str"").setResource(vs);
  res=serverValidateCode(pin,tryCache);
  Map<String,ValidationResult> cache=validationCache.get(vs.getUrl());
  cache.put(cacheId(cc),res);
  return res;
}",0.9893307468477208
23024,"public void initTS(String cachePath) throws Exception {
  cache=cachePath;
  expansionCache=new ValueSetExpansionCache(this,null);
  validationCachePath=Utilities.path(cachePath,""String_Node_Str"");
  try {
    loadValidationCache();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void initTS(String cachePath) throws Exception {
  cache=cachePath;
  expansionCache=new ValueSetExpansionCache(this,null,lock);
  validationCachePath=Utilities.path(cachePath,""String_Node_Str"");
  try {
    loadValidationCache();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9915110356536504
23025,"private void tlog(String msg){
}","protected void tlog(String msg){
  System.out.println(""String_Node_Str"" + msg);
}",0.5132743362831859
23026,"public String connectToTSServer(FHIRToolingClient client) throws URISyntaxException {
  txServer=client;
  return txServer.getCapabilitiesStatementQuick().getSoftware().getVersion();
}","public String connectToTSServer(FHIRToolingClient client) throws URISyntaxException {
  tlog(""String_Node_Str"" + client.getAddress());
  txServer=client;
  return txServer.getCapabilitiesStatementQuick().getSoftware().getVersion();
}",0.882494004796163
23027,"public void storeResource(MetadataResource md) throws IOException {
  canonicals.put(md.getUrl(),md);
  if (md.hasVersion())   canonicals.put(md.getUrl() + ""String_Node_Str"" + md.getVersion(),md);
  if (cacheFolder != null) {
    FileOutputStream s=new FileOutputStream(Utilities.path(cacheFolder,makeFileName(md.getUrl() + ""String_Node_Str"" + md.getVersion())));
    context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,md);
    s.close();
  }
}","public void storeResource(MetadataResource md) throws IOException {
synchronized (lock) {
    canonicals.put(md.getUrl(),md);
    if (md.hasVersion())     canonicals.put(md.getUrl() + ""String_Node_Str"" + md.getVersion(),md);
  }
  if (cacheFolder != null) {
    FileOutputStream s=new FileOutputStream(Utilities.path(cacheFolder,makeFileName(md.getUrl() + ""String_Node_Str"" + md.getVersion())));
    context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,md);
    s.close();
  }
}",0.9664570230607966
23028,"public ValueSetExpansionCache(IWorkerContext context,String cacheFolder) throws FHIRFormatError, IOException {
  super();
  this.context=context;
  this.cacheFolder=cacheFolder;
  if (this.cacheFolder != null)   loadCache();
}","public ValueSetExpansionCache(IWorkerContext context,String cacheFolder,Object lock) throws FHIRFormatError, IOException {
  super();
  this.context=context;
  this.cacheFolder=cacheFolder;
  this.lock=lock;
  if (this.cacheFolder != null)   loadCache();
}",0.9377593360995852
23029,"public MetadataResource getStoredResource(String canonicalUri){
  return canonicals.get(canonicalUri);
}","public MetadataResource getStoredResource(String canonicalUri){
synchronized (lock) {
    return canonicals.get(canonicalUri);
  }
}",0.8813559322033898
23030,"@Override public String getLinkForProfile(StructureDefinition profile,String url){
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,url);
  if (sd != null && sd.hasUserData(""String_Node_Str""))   return sd.getUserString(""String_Node_Str"") + ""String_Node_Str"" + sd.getName();
  brokenLinkWarning(""String_Node_Str"",url);
  return ""String_Node_Str"";
}","@Override public String getLinkForProfile(StructureDefinition profile,String url){
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,url);
  if (noXhtml && sd != null && sd.getType().equals(""String_Node_Str""))   return null;
  if (sd != null && sd.hasUserData(""String_Node_Str""))   return sd.getUserString(""String_Node_Str"") + ""String_Node_Str"" + sd.getName();
  brokenLinkWarning(""String_Node_Str"",url);
  return ""String_Node_Str"";
}",0.8961352657004831
23031,"public IGKnowledgeProvider(IWorkerContext context,String pathToSpec,JsonObject igs,List<ValidationMessage> errors) throws Exception {
  super();
  this.context=context;
  this.pathToSpec=pathToSpec;
  if (this.pathToSpec.endsWith(""String_Node_Str""))   this.pathToSpec=this.pathToSpec.substring(0,this.pathToSpec.length() - 1);
  this.errors=errors;
  loadPaths(igs);
}","public IGKnowledgeProvider(IWorkerContext context,String pathToSpec,JsonObject igs,List<ValidationMessage> errors,boolean noXhtml) throws Exception {
  super();
  this.context=context;
  this.pathToSpec=pathToSpec;
  if (this.pathToSpec.endsWith(""String_Node_Str""))   this.pathToSpec=this.pathToSpec.substring(0,this.pathToSpec.length() - 1);
  this.errors=errors;
  this.noXhtml=noXhtml;
  loadPaths(igs);
}",0.9484536082474226
23032,"public void initialize() throws Exception {
  fetcher.setResourceDirs(resourceDirs);
  first=true;
  boolean copyTemplate=false;
  if (configuration == null) {
    if (configFile == null) {
      buildConfigFile();
      copyTemplate=true;
    }
 else     log(""String_Node_Str"" + configFile);
    try {
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage(),e);
    }
    if (configuration.has(""String_Node_Str"")) {
      String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
      log(""String_Node_Str"" + redirectFile);
      configFile=redirectFile;
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
    }
    if (configuration.has(""String_Node_Str"")) {
      for (      JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
        String level=((JsonPrimitive)n).getAsString();
        System.out.println(""String_Node_Str"" + level);
        logOptions.add(level);
      }
    }
  }
  if (configuration.has(""String_Node_Str"") && !""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (configuration.has(""String_Node_Str"") && !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root;
  if (fetcher instanceof ZipFetcher) {
    root=configFileRootPath;
  }
 else {
    root=Utilities.getDirectoryForFile(configFile);
    if (Utilities.noString(root))     root=getCurentDirectory();
    root=new File(root).getCanonicalPath();
  }
  if (Utilities.existsInList(version.substring(0,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   markdownEngine=new MarkDownProcessor(Dialect.DARING_FIREBALL);
 else   markdownEngine=new MarkDownProcessor(Dialect.COMMON_MARK);
  log(""String_Node_Str"" + root);
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
    outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  }
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (mode == IGBuildMode.WEBSERVER)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (mode == IGBuildMode.AUTOBUILD)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"",""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),str(configuration,""String_Node_Str"",""String_Node_Str""));
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  makeQA=mode == IGBuildMode.WEBSERVER ? false : !""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || (mode == IGBuildMode.AUTOBUILD)) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=loadPack(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  context.setExpansionProfile(makeExpProfile());
  log(""String_Node_Str"" + vsCache);
  context.initTS(vsCache);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    if (txServer == null || !txServer.contains(""String_Node_Str"")) {
      log(""String_Node_Str"");
      context.setCanRunWithoutTerminology(true);
    }
 else {
      log(""String_Node_Str"" + txServer);
      checkTSVersion(vsCache,context.connectToTSServer(txServer));
    }
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(webTxServer));
  if (copyTemplate)   copyTemplate();
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""),context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    if (makeQA)     checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","public void initialize() throws Exception {
  fetcher.setResourceDirs(resourceDirs);
  first=true;
  boolean copyTemplate=false;
  if (configuration == null) {
    if (configFile == null) {
      buildConfigFile();
      copyTemplate=true;
    }
 else     log(""String_Node_Str"" + configFile);
    try {
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage(),e);
    }
    if (configuration.has(""String_Node_Str"")) {
      String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
      log(""String_Node_Str"" + redirectFile);
      configFile=redirectFile;
      configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
    }
    if (configuration.has(""String_Node_Str"")) {
      for (      JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
        String level=((JsonPrimitive)n).getAsString();
        System.out.println(""String_Node_Str"" + level);
        logOptions.add(level);
      }
    }
  }
  if (configuration.has(""String_Node_Str"") && !""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (configuration.has(""String_Node_Str"") && !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root;
  if (fetcher instanceof ZipFetcher) {
    root=configFileRootPath;
  }
 else {
    root=Utilities.getDirectoryForFile(configFile);
    if (Utilities.noString(root))     root=getCurentDirectory();
    root=new File(root).getCanonicalPath();
  }
  if (Utilities.existsInList(version.substring(0,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   markdownEngine=new MarkDownProcessor(Dialect.DARING_FIREBALL);
 else   markdownEngine=new MarkDownProcessor(Dialect.COMMON_MARK);
  log(""String_Node_Str"" + root);
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths != null && paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
    outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  }
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (mode == IGBuildMode.WEBSERVER)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (mode == IGBuildMode.AUTOBUILD)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"",""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),str(configuration,""String_Node_Str"",""String_Node_Str""));
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  makeQA=mode == IGBuildMode.WEBSERVER ? false : !""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || (mode == IGBuildMode.AUTOBUILD)) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=loadPack(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  context.setExpansionProfile(makeExpProfile());
  log(""String_Node_Str"" + vsCache);
  context.initTS(vsCache);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (mode != IGBuildMode.WEBSERVER) {
    if (txServer == null || !txServer.contains(""String_Node_Str"")) {
      log(""String_Node_Str"");
      context.setCanRunWithoutTerminology(true);
    }
 else {
      log(""String_Node_Str"" + txServer);
      checkTSVersion(vsCache,context.connectToTSServer(txServer));
    }
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(webTxServer));
  if (copyTemplate)   copyTemplate();
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""),context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors,version.equals(""String_Node_Str""));
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    if (makeQA)     checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9984955752212388
23033,"private String getSrcFile(String code){
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + code);
  if (sd == null)   return ""String_Node_Str"";
 else {
    String l=igp.getLinkForProfile(this.sd,sd.getUrl());
    if (l.contains(""String_Node_Str""))     l=l.substring(0,l.indexOf(""String_Node_Str""));
    return l;
  }
}","private String getSrcFile(String code){
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + code);
  if (sd == null)   return ""String_Node_Str"";
 else {
    String l=igp.getLinkForProfile(this.sd,sd.getUrl());
    if (l == null)     return null;
    if (l.contains(""String_Node_Str""))     l=l.substring(0,l.indexOf(""String_Node_Str""));
    return l;
  }
}",0.9523809523809524
23034,"private void describeType(StringBuilder b,TypeRefComponent t) throws Exception {
  if (t.getCode() == null)   return;
  if (t.getCode().startsWith(""String_Node_Str""))   return;
  if (t.getCode().startsWith(""String_Node_Str"")) {
    b.append(t.getCode());
  }
 else {
    b.append(""String_Node_Str"");
    String s=igp.getLinkFor(""String_Node_Str"",t.getCode());
    b.append(s);
    if (!s.contains(""String_Node_Str"")) {
    }
    b.append(""String_Node_Str"");
    b.append(t.getCode());
    b.append(""String_Node_Str"");
  }
  if (t.hasProfile()) {
    b.append(""String_Node_Str"");
    StructureDefinition p=context.fetchResource(StructureDefinition.class,t.getProfile().get(0).getValue());
    if (p == null)     b.append(t.getProfile());
 else {
      String pth=p.getUserString(""String_Node_Str"");
      b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ t.getProfile()+ ""String_Node_Str"");
      b.append(p.getName());
      b.append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (t.hasTargetProfile()) {
    b.append(""String_Node_Str"");
    boolean first=true;
    for (    CanonicalType tp : t.getTargetProfile()) {
      if (first)       first=false;
 else       b.append(""String_Node_Str"");
      StructureDefinition p=context.fetchResource(StructureDefinition.class,tp.getValue());
      if (p == null)       b.append(tp.getValue());
 else {
        String pth=p.getUserString(""String_Node_Str"");
        b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ tp.getValue()+ ""String_Node_Str"");
        b.append(p.getName());
        b.append(""String_Node_Str"");
      }
    }
    b.append(""String_Node_Str"");
  }
}","private void describeType(StringBuilder b,TypeRefComponent t) throws Exception {
  if (t.getCode() == null)   return;
  if (t.getCode().startsWith(""String_Node_Str""))   return;
  if (t.getCode().startsWith(""String_Node_Str"")) {
    b.append(t.getCode());
  }
 else {
    String s=igp.getLinkFor(""String_Node_Str"",t.getCode());
    if (s != null) {
      b.append(""String_Node_Str"");
      b.append(s);
      if (!s.contains(""String_Node_Str"")) {
      }
      b.append(""String_Node_Str"");
      b.append(t.getCode());
      b.append(""String_Node_Str"");
    }
 else     b.append(t.getCode());
  }
  if (t.hasProfile()) {
    b.append(""String_Node_Str"");
    StructureDefinition p=context.fetchResource(StructureDefinition.class,t.getProfile().get(0).getValue());
    if (p == null)     b.append(t.getProfile());
 else {
      String pth=p.getUserString(""String_Node_Str"");
      b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ t.getProfile()+ ""String_Node_Str"");
      b.append(p.getName());
      b.append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (t.hasTargetProfile()) {
    b.append(""String_Node_Str"");
    boolean first=true;
    for (    CanonicalType tp : t.getTargetProfile()) {
      if (first)       first=false;
 else       b.append(""String_Node_Str"");
      StructureDefinition p=context.fetchResource(StructureDefinition.class,tp.getValue());
      if (p == null)       b.append(tp.getValue());
 else {
        String pth=p.getUserString(""String_Node_Str"");
        b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ tp.getValue()+ ""String_Node_Str"");
        b.append(p.getName());
        b.append(""String_Node_Str"");
      }
    }
    b.append(""String_Node_Str"");
  }
}",0.9131985731272296
23035,"@SuppressWarnings(""String_Node_Str"") private void generateCoreElem(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getPath().endsWith(""String_Node_Str"") && elem.getPath().lastIndexOf('.') > elem.getPath().indexOf('.'))   return;
  if (!complex && elem.getPath().endsWith(""String_Node_Str""))   return;
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS);
  List<ElementDefinition> children=getChildren(elements,elem);
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasBase() && elem.getBase().hasMax() ? elem.getBase().getMax().equals(""String_Node_Str"") : ""String_Node_Str"".equals(elem.getMax());
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  if (defPage.contains(""String_Node_Str""))   defPage=defPage.substring(0,defPage.indexOf(""String_Node_Str""));
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  boolean delayedClose=false;
  if (unbounded)   b.append(""String_Node_Str"");
  if (type == null || children.size() > 0) {
    assert(children.size() > 0);
    b.append(""String_Node_Str"");
    delayedClose=true;
  }
 else   if (type.getCode() == null) {
    b.append(""String_Node_Str"");
  }
 else   if (isPrimitive(type.getCode())) {
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
    if (elem.hasFixed())     b.append(Utilities.escapeJson(((PrimitiveType)elem.getFixed()).asStringValue()));
 else     b.append(""String_Node_Str"" + suffix(getSrcFile(type.getCode()),type.getCode()) + ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + suffix(getSrcFile(type.getCode()),type.getCode()) + ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (type.hasProfile()) {
      StructureDefinition tsd=context.fetchResource(StructureDefinition.class,type.getProfile().get(0).getValue());
      if (tsd != null)       b.append(""String_Node_Str"" + tsd.getUserString(""String_Node_Str"") + ""String_Node_Str""+ tsd.getType()+ ""String_Node_Str""+ tsd.getName()+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + type.getProfile() + ""String_Node_Str"");
    }
    if (type.hasTargetProfile()) {
      if (type.getTargetProfile().get(0).getValue().startsWith(""String_Node_Str"")) {
        String t=type.getTargetProfile().get(0).getValue().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + suffix(getSrcFile(t),t) + ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getTargetProfile() + ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (!delayedClose) {
    if (unbounded) {
      b.append(""String_Node_Str"");
    }
    if (!last)     b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  writeCardinality(unbounded,b,elem);
  if (!elem.hasFixed()) {
    if (elem.hasBinding() && elem.getBinding().hasValueSet()) {
      ValueSet vs=resolveValueSet(elem.getBinding().getValueSet());
      if (vs != null)       b.append(""String_Node_Str"" + prefix + vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       if (elem.getBinding().getValueSet() instanceof UriType)       b.append(""String_Node_Str"" + ((UriType)elem.getBinding().getValueSet()).getValue() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + ((Reference)elem.getBinding().getValueSet()).getReference() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"" + Utilities.escapeXml(elem.getShort()) + ""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  if (delayedClose) {
    int c=0;
    int l=lastChild(children);
    boolean extDone=false;
    for (    ElementDefinition child : children) {
      if (isExtension(child)) {
        if (!extDone)         generateCoreElemExtension(b,sd.getSnapshot().getElement(),child,children,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == l,complex);
        extDone=true;
      }
 else       if (child.hasSlicing())       generateCoreElemSliced(b,sd.getSnapshot().getElement(),child,children,indent + 1,pathName + ""String_Node_Str"" + name,false,child.hasType() ? child.getType().get(0) : null,++c == l,complex);
 else       if (wasSliced(child,children))       ;
 else       if (child.getType().size() == 1 || allTypesAreReference(child))       generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == l,false);
 else {
        if (!""String_Node_Str"".equals(child.getMax())) {
          b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
          for (          TypeRefComponent t : child.getType())           generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,t,++c == l,false);
        }
      }
    }
    b.append(indentS);
    b.append(""String_Node_Str"");
    if (unbounded)     b.append(""String_Node_Str"");
    if (!last)     b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
  }
}","@SuppressWarnings(""String_Node_Str"") private void generateCoreElem(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getPath().endsWith(""String_Node_Str"") && elem.getPath().lastIndexOf('.') > elem.getPath().indexOf('.'))   return;
  if (!complex && elem.getPath().endsWith(""String_Node_Str""))   return;
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS);
  List<ElementDefinition> children=getChildren(elements,elem);
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasBase() && elem.getBase().hasMax() ? elem.getBase().getMax().equals(""String_Node_Str"") : ""String_Node_Str"".equals(elem.getMax());
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  if (defPage.contains(""String_Node_Str""))   defPage=defPage.substring(0,defPage.indexOf(""String_Node_Str""));
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  boolean delayedClose=false;
  if (unbounded)   b.append(""String_Node_Str"");
  if (type == null || children.size() > 0) {
    assert(children.size() > 0);
    b.append(""String_Node_Str"");
    delayedClose=true;
  }
 else   if (type.getCode() == null) {
    b.append(""String_Node_Str"");
  }
 else   if (isPrimitive(type.getCode())) {
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
    if (elem.hasFixed())     b.append(Utilities.escapeJson(((PrimitiveType)elem.getFixed()).asStringValue()));
 else {
      String l=getSrcFile(type.getCode());
      if (l == null)       b.append(""String_Node_Str"" + type.getCode() + ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + suffix(l,type.getCode()) + ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    }
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + suffix(getSrcFile(type.getCode()),type.getCode()) + ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (type.hasProfile()) {
      StructureDefinition tsd=context.fetchResource(StructureDefinition.class,type.getProfile().get(0).getValue());
      if (tsd != null)       b.append(""String_Node_Str"" + tsd.getUserString(""String_Node_Str"") + ""String_Node_Str""+ tsd.getType()+ ""String_Node_Str""+ tsd.getName()+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + type.getProfile() + ""String_Node_Str"");
    }
    if (type.hasTargetProfile()) {
      if (type.getTargetProfile().get(0).getValue().startsWith(""String_Node_Str"")) {
        String t=type.getTargetProfile().get(0).getValue().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + suffix(getSrcFile(t),t) + ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getTargetProfile() + ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (!delayedClose) {
    if (unbounded) {
      b.append(""String_Node_Str"");
    }
    if (!last)     b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  writeCardinality(unbounded,b,elem);
  if (!elem.hasFixed()) {
    if (elem.hasBinding() && elem.getBinding().hasValueSet()) {
      ValueSet vs=resolveValueSet(elem.getBinding().getValueSet());
      if (vs != null)       b.append(""String_Node_Str"" + prefix + vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       if (elem.getBinding().getValueSet() instanceof UriType)       b.append(""String_Node_Str"" + ((UriType)elem.getBinding().getValueSet()).getValue() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + ((Reference)elem.getBinding().getValueSet()).getReference() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"" + Utilities.escapeXml(elem.getShort()) + ""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  if (delayedClose) {
    int c=0;
    int l=lastChild(children);
    boolean extDone=false;
    for (    ElementDefinition child : children) {
      if (isExtension(child)) {
        if (!extDone)         generateCoreElemExtension(b,sd.getSnapshot().getElement(),child,children,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == l,complex);
        extDone=true;
      }
 else       if (child.hasSlicing())       generateCoreElemSliced(b,sd.getSnapshot().getElement(),child,children,indent + 1,pathName + ""String_Node_Str"" + name,false,child.hasType() ? child.getType().get(0) : null,++c == l,complex);
 else       if (wasSliced(child,children))       ;
 else       if (child.getType().size() == 1 || allTypesAreReference(child))       generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == l,false);
 else {
        if (!""String_Node_Str"".equals(child.getMax())) {
          b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
          for (          TypeRefComponent t : child.getType())           generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,t,++c == l,false);
        }
      }
    }
    b.append(indentS);
    b.append(""String_Node_Str"");
    if (unbounded)     b.append(""String_Node_Str"");
    if (!last)     b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
  }
}",0.983567516075256
23036,"private void readBindings(Sheet sheet) throws Exception {
  for (int row=0; row < sheet.rows.size(); row++) {
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (Utilities.noString(bindingName) || bindingName.startsWith(""String_Node_Str""))     continue;
    ElementDefinitionBindingComponent bs=new ElementDefinitionBindingComponent();
    bindings.put(bindingName,bs);
    bs.setDescription(sheet.getColumn(row,""String_Node_Str""));
    bs.setStrength(readBindingStrength(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str"") && !Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
      bs.addExtension().setUrl(""String_Node_Str"").setValue(new Reference().setReference(sheet.getColumn(row,""String_Node_Str"")));
    }
    String type=sheet.getColumn(row,""String_Node_Str"");
    if (type == null || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      ValueSet vs=ValueSetUtilities.makeShareable(new ValueSet());
      vs.setId(ref.substring(1));
      vs.setUrl(base + ""String_Node_Str"" + ref.substring(1));
      bs.setValueSet(new Reference(""String_Node_Str"" + ref.substring(1)));
      bundle.addEntry().setResource(vs).setFullUrl(vs.getUrl());
      vs.setName(bindingName);
      String oid=sheet.getColumn(row,""String_Node_Str"");
      if (!Utilities.noString(oid))       ValueSetUtilities.setOID(vs,oid);
      String st=sheet.getColumn(row,""String_Node_Str"");
      if (Utilities.noString(st))       st=""String_Node_Str"";
      vs.getStatusElement().setValueAsString(st);
      String ws=sheet.getColumn(row,""String_Node_Str"");
      if (ws != null)       vs.getContactFirstRep().getTelecomFirstRep().setSystem(ContactPointSystem.URL).setValue(ws);
      String em=sheet.getColumn(row,""String_Node_Str"");
      if (em != null)       vs.getContactFirstRep().addTelecom().setSystem(ContactPointSystem.EMAIL).setValue(em);
      vs.setCopyright(sheet.getColumn(row,""String_Node_Str""));
      vs.setDescription(sheet.getColumn(row,""String_Node_Str""));
      Sheet css=xls.getSheets().get(ref.substring(1));
      if (css == null)       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str""+ ref+ ""String_Node_Str"");
      loadValueSet(vs,css,ref.substring(1));
    }
 else     if (type.equals(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"" + getLocation(row));
    }
 else     if (type.equals(""String_Node_Str"")) {
      bs.setValueSet(new Reference(sheet.getColumn(row,""String_Node_Str"")));
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      String id=ref.startsWith(""String_Node_Str"") ? ref.substring(9) : ref;
      if (!ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"")) {
        valuesetsToLoad.put(id,ref);
        ref=Utilities.pathURL(base,""String_Node_Str"",id);
      }
      bs.setValueSet(new CanonicalType(ref));
    }
 else {
      throw new Exception(""String_Node_Str"" + type + getLocation(row));
    }
  }
}","private void readBindings(Sheet sheet) throws Exception {
  for (int row=0; row < sheet.rows.size(); row++) {
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (Utilities.noString(bindingName) || bindingName.startsWith(""String_Node_Str""))     continue;
    ElementDefinitionBindingComponent bs=new ElementDefinitionBindingComponent();
    bindings.put(bindingName,bs);
    bs.setDescription(sheet.getColumn(row,""String_Node_Str""));
    bs.setStrength(readBindingStrength(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str"") && !Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
      bs.addExtension().setUrl(""String_Node_Str"").setValue(new Reference().setReference(sheet.getColumn(row,""String_Node_Str"")));
    }
    String type=sheet.getColumn(row,""String_Node_Str"");
    if (type == null || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      ValueSet vs=ValueSetUtilities.makeShareable(new ValueSet());
      vs.setId(ref.substring(1));
      vs.setUrl(base + ""String_Node_Str"" + ref.substring(1));
      bs.setValueSet(new CanonicalType(""String_Node_Str"" + ref.substring(1)));
      bundle.addEntry().setResource(vs).setFullUrl(vs.getUrl());
      vs.setName(bindingName);
      String oid=sheet.getColumn(row,""String_Node_Str"");
      if (!Utilities.noString(oid))       ValueSetUtilities.setOID(vs,oid);
      String st=sheet.getColumn(row,""String_Node_Str"");
      if (Utilities.noString(st))       st=""String_Node_Str"";
      vs.getStatusElement().setValueAsString(st);
      String ws=sheet.getColumn(row,""String_Node_Str"");
      if (ws != null)       vs.getContactFirstRep().getTelecomFirstRep().setSystem(ContactPointSystem.URL).setValue(ws);
      String em=sheet.getColumn(row,""String_Node_Str"");
      if (em != null)       vs.getContactFirstRep().addTelecom().setSystem(ContactPointSystem.EMAIL).setValue(em);
      vs.setCopyright(sheet.getColumn(row,""String_Node_Str""));
      vs.setDescription(sheet.getColumn(row,""String_Node_Str""));
      Sheet css=xls.getSheets().get(ref.substring(1));
      if (css == null)       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str""+ ref+ ""String_Node_Str"");
      loadValueSet(vs,css,ref.substring(1));
    }
 else     if (type.equals(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"" + getLocation(row));
    }
 else     if (type.equals(""String_Node_Str"")) {
      bs.setValueSet(new Reference(sheet.getColumn(row,""String_Node_Str"")));
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      String id=ref.startsWith(""String_Node_Str"") ? ref.substring(9) : ref;
      if (!ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"")) {
        valuesetsToLoad.put(id,ref);
        ref=Utilities.pathURL(base,""String_Node_Str"",id);
      }
      bs.setValueSet(new CanonicalType(ref));
    }
 else {
      throw new Exception(""String_Node_Str"" + type + getLocation(row));
    }
  }
}",0.9971733668341708
23037,"public static org.hl7.fhir.dstu3.model.Type convertType(org.hl7.fhir.r4.model.Type src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.r4.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.r4.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.r4.model.BooleanType)   return convertBoolean((org.hl7.fhir.r4.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.r4.model.CodeType)   return convertCode((org.hl7.fhir.r4.model.CodeType)src);
  if (src instanceof org.hl7.fhir.r4.model.DateType)   return convertDate((org.hl7.fhir.r4.model.DateType)src);
  if (src instanceof org.hl7.fhir.r4.model.DateTimeType)   return convertDateTime((org.hl7.fhir.r4.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.r4.model.DecimalType)   return convertDecimal((org.hl7.fhir.r4.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.r4.model.IdType)   return convertId((org.hl7.fhir.r4.model.IdType)src);
  if (src instanceof org.hl7.fhir.r4.model.InstantType)   return convertInstant((org.hl7.fhir.r4.model.InstantType)src);
  if (src instanceof org.hl7.fhir.r4.model.IntegerType)   return convertInteger((org.hl7.fhir.r4.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.r4.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.r4.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.r4.model.OidType)   return convertOid((org.hl7.fhir.r4.model.OidType)src);
  if (src instanceof org.hl7.fhir.r4.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.r4.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.r4.model.StringType)   return convertString((org.hl7.fhir.r4.model.StringType)src);
  if (src instanceof org.hl7.fhir.r4.model.TimeType)   return convertTime((org.hl7.fhir.r4.model.TimeType)src);
  if (src instanceof org.hl7.fhir.r4.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.r4.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.r4.model.UriType)   return convertUri((org.hl7.fhir.r4.model.UriType)src);
  if (src instanceof org.hl7.fhir.r4.model.UuidType)   return convertUuid((org.hl7.fhir.r4.model.UuidType)src);
  if (src instanceof org.hl7.fhir.r4.model.Extension)   return convertExtension((org.hl7.fhir.r4.model.Extension)src);
  if (src instanceof org.hl7.fhir.r4.model.Narrative)   return convertNarrative((org.hl7.fhir.r4.model.Narrative)src);
  if (src instanceof org.hl7.fhir.r4.model.Age)   return convertAge((org.hl7.fhir.r4.model.Age)src);
  if (src instanceof org.hl7.fhir.r4.model.Annotation)   return convertAnnotation((org.hl7.fhir.r4.model.Annotation)src);
  if (src instanceof org.hl7.fhir.r4.model.Attachment)   return convertAttachment((org.hl7.fhir.r4.model.Attachment)src);
  if (src instanceof org.hl7.fhir.r4.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.r4.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.r4.model.Coding)   return convertCoding((org.hl7.fhir.r4.model.Coding)src);
  if (src instanceof org.hl7.fhir.r4.model.Count)   return convertCount((org.hl7.fhir.r4.model.Count)src);
  if (src instanceof org.hl7.fhir.r4.model.Distance)   return convertDistance((org.hl7.fhir.r4.model.Distance)src);
  if (src instanceof org.hl7.fhir.r4.model.Duration)   return convertDuration((org.hl7.fhir.r4.model.Duration)src);
  if (src instanceof org.hl7.fhir.r4.model.Identifier)   return convertIdentifier((org.hl7.fhir.r4.model.Identifier)src);
  if (src instanceof org.hl7.fhir.r4.model.Money)   return convertMoney((org.hl7.fhir.r4.model.Money)src);
  if (src instanceof org.hl7.fhir.r4.model.Period)   return convertPeriod((org.hl7.fhir.r4.model.Period)src);
  if (src instanceof org.hl7.fhir.r4.model.Quantity)   return convertQuantity((org.hl7.fhir.r4.model.Quantity)src);
  if (src instanceof org.hl7.fhir.r4.model.Range)   return convertRange((org.hl7.fhir.r4.model.Range)src);
  if (src instanceof org.hl7.fhir.r4.model.Ratio)   return convertRatio((org.hl7.fhir.r4.model.Ratio)src);
  if (src instanceof org.hl7.fhir.r4.model.Reference)   return convertReference((org.hl7.fhir.r4.model.Reference)src);
  if (src instanceof org.hl7.fhir.r4.model.SampledData)   return convertSampledData((org.hl7.fhir.r4.model.SampledData)src);
  if (src instanceof org.hl7.fhir.r4.model.Signature)   return convertSignature((org.hl7.fhir.r4.model.Signature)src);
  if (src instanceof org.hl7.fhir.r4.model.Address)   return convertAddress((org.hl7.fhir.r4.model.Address)src);
  if (src instanceof org.hl7.fhir.r4.model.ContactDetail)   return convertContactDetail((org.hl7.fhir.r4.model.ContactDetail)src);
  if (src instanceof org.hl7.fhir.r4.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.r4.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.r4.model.Contributor)   return convertContributor((org.hl7.fhir.r4.model.Contributor)src);
  if (src instanceof org.hl7.fhir.r4.model.Dosage)   return convertDosage((org.hl7.fhir.r4.model.Dosage)src);
  if (src instanceof org.hl7.fhir.r4.model.HumanName)   return convertHumanName((org.hl7.fhir.r4.model.HumanName)src);
  if (src instanceof org.hl7.fhir.r4.model.Meta)   return convertMeta((org.hl7.fhir.r4.model.Meta)src);
  if (src instanceof org.hl7.fhir.r4.model.ParameterDefinition)   return convertParameterDefinition((org.hl7.fhir.r4.model.ParameterDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.RelatedArtifact)   return convertRelatedArtifact((org.hl7.fhir.r4.model.RelatedArtifact)src);
  if (src instanceof org.hl7.fhir.r4.model.Timing)   return convertTiming((org.hl7.fhir.r4.model.Timing)src);
  if (src instanceof org.hl7.fhir.r4.model.UsageContext)   return convertUsageContext((org.hl7.fhir.r4.model.UsageContext)src);
  if (src instanceof org.hl7.fhir.r4.model.SimpleQuantity)   return convertSimpleQuantity((org.hl7.fhir.r4.model.SimpleQuantity)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public static org.hl7.fhir.dstu3.model.Type convertType(org.hl7.fhir.r4.model.Type src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.r4.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.r4.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.r4.model.BooleanType)   return convertBoolean((org.hl7.fhir.r4.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.r4.model.CodeType)   return convertCode((org.hl7.fhir.r4.model.CodeType)src);
  if (src instanceof org.hl7.fhir.r4.model.DateType)   return convertDate((org.hl7.fhir.r4.model.DateType)src);
  if (src instanceof org.hl7.fhir.r4.model.DateTimeType)   return convertDateTime((org.hl7.fhir.r4.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.r4.model.DecimalType)   return convertDecimal((org.hl7.fhir.r4.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.r4.model.IdType)   return convertId((org.hl7.fhir.r4.model.IdType)src);
  if (src instanceof org.hl7.fhir.r4.model.InstantType)   return convertInstant((org.hl7.fhir.r4.model.InstantType)src);
  if (src instanceof org.hl7.fhir.r4.model.IntegerType)   return convertInteger((org.hl7.fhir.r4.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.r4.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.r4.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.r4.model.OidType)   return convertOid((org.hl7.fhir.r4.model.OidType)src);
  if (src instanceof org.hl7.fhir.r4.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.r4.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.r4.model.StringType)   return convertString((org.hl7.fhir.r4.model.StringType)src);
  if (src instanceof org.hl7.fhir.r4.model.TimeType)   return convertTime((org.hl7.fhir.r4.model.TimeType)src);
  if (src instanceof org.hl7.fhir.r4.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.r4.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.r4.model.UriType)   return convertUri((org.hl7.fhir.r4.model.UriType)src);
  if (src instanceof org.hl7.fhir.r4.model.UuidType)   return convertUuid((org.hl7.fhir.r4.model.UuidType)src);
  if (src instanceof org.hl7.fhir.r4.model.Extension)   return convertExtension((org.hl7.fhir.r4.model.Extension)src);
  if (src instanceof org.hl7.fhir.r4.model.Narrative)   return convertNarrative((org.hl7.fhir.r4.model.Narrative)src);
  if (src instanceof org.hl7.fhir.r4.model.Age)   return convertAge((org.hl7.fhir.r4.model.Age)src);
  if (src instanceof org.hl7.fhir.r4.model.Annotation)   return convertAnnotation((org.hl7.fhir.r4.model.Annotation)src);
  if (src instanceof org.hl7.fhir.r4.model.Attachment)   return convertAttachment((org.hl7.fhir.r4.model.Attachment)src);
  if (src instanceof org.hl7.fhir.r4.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.r4.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.r4.model.Coding)   return convertCoding((org.hl7.fhir.r4.model.Coding)src);
  if (src instanceof org.hl7.fhir.r4.model.Count)   return convertCount((org.hl7.fhir.r4.model.Count)src);
  if (src instanceof org.hl7.fhir.r4.model.Distance)   return convertDistance((org.hl7.fhir.r4.model.Distance)src);
  if (src instanceof org.hl7.fhir.r4.model.Duration)   return convertDuration((org.hl7.fhir.r4.model.Duration)src);
  if (src instanceof org.hl7.fhir.r4.model.Identifier)   return convertIdentifier((org.hl7.fhir.r4.model.Identifier)src);
  if (src instanceof org.hl7.fhir.r4.model.Money)   return convertMoney((org.hl7.fhir.r4.model.Money)src);
  if (src instanceof org.hl7.fhir.r4.model.Period)   return convertPeriod((org.hl7.fhir.r4.model.Period)src);
  if (src instanceof org.hl7.fhir.r4.model.Quantity)   return convertQuantity((org.hl7.fhir.r4.model.Quantity)src);
  if (src instanceof org.hl7.fhir.r4.model.Range)   return convertRange((org.hl7.fhir.r4.model.Range)src);
  if (src instanceof org.hl7.fhir.r4.model.Ratio)   return convertRatio((org.hl7.fhir.r4.model.Ratio)src);
  if (src instanceof org.hl7.fhir.r4.model.Reference)   return convertReference((org.hl7.fhir.r4.model.Reference)src);
  if (src instanceof org.hl7.fhir.r4.model.SampledData)   return convertSampledData((org.hl7.fhir.r4.model.SampledData)src);
  if (src instanceof org.hl7.fhir.r4.model.Signature)   return convertSignature((org.hl7.fhir.r4.model.Signature)src);
  if (src instanceof org.hl7.fhir.r4.model.Address)   return convertAddress((org.hl7.fhir.r4.model.Address)src);
  if (src instanceof org.hl7.fhir.r4.model.ContactDetail)   return convertContactDetail((org.hl7.fhir.r4.model.ContactDetail)src);
  if (src instanceof org.hl7.fhir.r4.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.r4.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.r4.model.Contributor)   return convertContributor((org.hl7.fhir.r4.model.Contributor)src);
  if (src instanceof org.hl7.fhir.r4.model.Dosage)   return convertDosage((org.hl7.fhir.r4.model.Dosage)src);
  if (src instanceof org.hl7.fhir.r4.model.HumanName)   return convertHumanName((org.hl7.fhir.r4.model.HumanName)src);
  if (src instanceof org.hl7.fhir.r4.model.Meta)   return convertMeta((org.hl7.fhir.r4.model.Meta)src);
  if (src instanceof org.hl7.fhir.r4.model.ParameterDefinition)   return convertParameterDefinition((org.hl7.fhir.r4.model.ParameterDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.RelatedArtifact)   return convertRelatedArtifact((org.hl7.fhir.r4.model.RelatedArtifact)src);
  if (src instanceof org.hl7.fhir.r4.model.Timing)   return convertTiming((org.hl7.fhir.r4.model.Timing)src);
  if (src instanceof org.hl7.fhir.r4.model.UsageContext)   return convertUsageContext((org.hl7.fhir.r4.model.UsageContext)src);
  if (src instanceof org.hl7.fhir.r4.model.ElementDefinition)   return convertElementDefinition((org.hl7.fhir.r4.model.ElementDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.DataRequirement)   return convertDataRequirement((org.hl7.fhir.r4.model.DataRequirement)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9767830298981126
23038,"public Base parseType(String xml,String type) throws IOException, FHIRException {
  if (parser != null)   return parser.parseType(xml,type);
 else   return new XmlParser().parseType(xml,type);
}","public Base parseType(String xml,String type) throws IOException, FHIRException {
  if (parser != null)   return parser.parseType(xml,type);
 else   return new XmlParser().parseAnyType(xml,type);
}",0.9923273657289002
23039,"private void describeType(StringBuilder b,TypeRefComponent t) throws Exception {
  if (t.getCode() == null)   return;
  if (t.getCode().startsWith(""String_Node_Str""))   return;
  if (t.getCode().startsWith(""String_Node_Str"")) {
    b.append(t.getCode());
  }
 else {
    b.append(""String_Node_Str"");
    String s=igp.getLinkFor(""String_Node_Str"",t.getCode());
    b.append(s);
    if (!s.contains(""String_Node_Str"")) {
    }
    b.append(""String_Node_Str"");
    b.append(t.getCode());
    b.append(""String_Node_Str"");
  }
  if (t.hasProfile()) {
    b.append(""String_Node_Str"");
    StructureDefinition p=context.fetchResource(StructureDefinition.class,t.getProfile().get(0).getValue());
    if (p == null)     b.append(t.getProfile());
 else {
      String pth=p.getUserString(""String_Node_Str"");
      b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ t.getProfile()+ ""String_Node_Str"");
      b.append(p.getName());
      b.append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (t.hasTargetProfile()) {
    b.append(""String_Node_Str"");
    StructureDefinition p=context.fetchResource(StructureDefinition.class,t.getTargetProfile().get(0).getValue());
    if (p == null)     b.append(t.getTargetProfile());
 else {
      String pth=p.getUserString(""String_Node_Str"");
      b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ t.getTargetProfile()+ ""String_Node_Str"");
      b.append(p.getName());
      b.append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
}","private void describeType(StringBuilder b,TypeRefComponent t) throws Exception {
  if (t.getCode() == null)   return;
  if (t.getCode().startsWith(""String_Node_Str""))   return;
  if (t.getCode().startsWith(""String_Node_Str"")) {
    b.append(t.getCode());
  }
 else {
    b.append(""String_Node_Str"");
    String s=igp.getLinkFor(""String_Node_Str"",t.getCode());
    b.append(s);
    if (!s.contains(""String_Node_Str"")) {
    }
    b.append(""String_Node_Str"");
    b.append(t.getCode());
    b.append(""String_Node_Str"");
  }
  if (t.hasProfile()) {
    b.append(""String_Node_Str"");
    StructureDefinition p=context.fetchResource(StructureDefinition.class,t.getProfile().get(0).getValue());
    if (p == null)     b.append(t.getProfile());
 else {
      String pth=p.getUserString(""String_Node_Str"");
      b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ t.getProfile()+ ""String_Node_Str"");
      b.append(p.getName());
      b.append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (t.hasTargetProfile()) {
    b.append(""String_Node_Str"");
    boolean first=true;
    for (    CanonicalType tp : t.getTargetProfile()) {
      if (first)       first=false;
 else       b.append(""String_Node_Str"");
      StructureDefinition p=context.fetchResource(StructureDefinition.class,tp.getValue());
      if (p == null)       b.append(tp.getValue());
 else {
        String pth=p.getUserString(""String_Node_Str"");
        b.append(""String_Node_Str"" + pth + ""String_Node_Str""+ tp.getValue()+ ""String_Node_Str"");
        b.append(p.getName());
        b.append(""String_Node_Str"");
      }
    }
    b.append(""String_Node_Str"");
  }
}",0.8742857142857143
23040,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPathSource(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).getValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
 else         if (currentBase.getType().get(0).getCode().equals(""String_Node_Str"") && diffMatches.size() > 0 && diffMatches.get(0).hasSliceName()) {
          int nbl=findEndOfElement(base,baseCursor);
          for (int i=baseCursor + 1; i <= nbl; i++) {
            outcome=updateURLs(url,base.getElement().get(i).copy());
            result.getElement().add(outcome);
          }
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  if (t.getCode().equals(""String_Node_Str"")) {
                    int baseStart=base.getElement().indexOf(currentBase) + 1;
                    int baseMax=baseStart + 1;
                    while (baseMax < base.getElement().size() && base.getElement().get(baseMax).getPath().startsWith(currentBase.getPath() + ""String_Node_Str""))                     baseMax++;
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,base,differential,baseStart,start - 1,baseMax - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),base.getElement().get(0).getPath(),base.getElement().get(0).getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
 else {
                    StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                    if (dt == null)                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                    contextName=dt.getUrl();
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPathDest(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPathSource(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).getValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
 else         if (currentBase.getType().get(0).getCode().equals(""String_Node_Str"")) {
          int nbl=findEndOfElement(base,baseCursor);
          for (int i=baseCursor + 1; i <= nbl; i++) {
            outcome=updateURLs(url,base.getElement().get(i).copy());
            result.getElement().add(outcome);
          }
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  if (t.getCode().equals(""String_Node_Str"")) {
                    int baseStart=base.getElement().indexOf(currentBase) + 1;
                    int baseMax=baseStart + 1;
                    while (baseMax < base.getElement().size() && base.getElement().get(baseMax).getPath().startsWith(currentBase.getPath() + ""String_Node_Str""))                     baseMax++;
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,base,differential,baseStart,start - 1,baseMax - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),base.getElement().get(0).getPath(),base.getElement().get(0).getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
 else {
                    StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                    if (dt == null)                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                    contextName=dt.getUrl();
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPathDest(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.9986087494203124
23041,"@Override public BindingResolution resolveBinding(StructureDefinition profile,ElementDefinitionBindingComponent binding,String path){
  BindingResolution br=new BindingResolution();
  if (!binding.hasValueSet()) {
    br.url=specPath(""String_Node_Str"");
    br.display=""String_Node_Str"";
  }
 else   if (binding.getValueSet() instanceof UriType) {
    String ref=((UriType)binding.getValueSet()).getValue();
    if (ref.startsWith(""String_Node_Str"")) {
      br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
      br.display=ref.substring(26);
    }
 else {
      ValueSet vs=context.fetchResource(ValueSet.class,ref);
      if (vs != null) {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
 else {
        br.url=ref;
        if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         br.display=ref;
      }
    }
  }
 else {
    String ref=((Reference)binding.getValueSet()).getReference();
    if (ref.startsWith(""String_Node_Str"")) {
      ValueSet vs=context.fetchResource(ValueSet.class,makeCanonical(ref));
      if (vs == null) {
        br.url=ref.substring(9) + ""String_Node_Str"";
        br.display=ref.substring(9);
        brokenLinkWarning(path,ref);
      }
 else {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
    }
 else {
      if (ref.startsWith(""String_Node_Str"")) {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs != null) {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
 else {
          br.display=ref.substring(29);
          br.url=ref.substring(29) + ""String_Node_Str"";
          brokenLinkWarning(path,ref);
        }
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        String code=tail(ref);
        if (code.startsWith(""String_Node_Str"")) {
          br.url=""String_Node_Str"" + code + ""String_Node_Str"";
          br.display=""String_Node_Str"" + code;
        }
 else {
          br.url=""String_Node_Str"" + code + ""String_Node_Str"";
          br.display=""String_Node_Str"" + code;
        }
      }
 else {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs == null) {
          br.url=ref + ""String_Node_Str"";
          br.display=ref;
          brokenLinkWarning(path,ref);
        }
 else         if (ref.contains(""String_Node_Str"")) {
          br.url=vs.getUserString(""String_Node_Str"");
          if (br.url == null) {
            System.out.println(""String_Node_Str"" + ref);
            br.url=vs.getUserString(""String_Node_Str"");
          }
          br.display=vs.getName();
        }
 else {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
      }
    }
  }
  return br;
}","@Override public BindingResolution resolveBinding(StructureDefinition profile,ElementDefinitionBindingComponent binding,String path){
  BindingResolution br=new BindingResolution();
  if (!binding.hasValueSet()) {
    br.url=specPath(""String_Node_Str"");
    br.display=""String_Node_Str"";
  }
 else   if (binding.getValueSet() instanceof CanonicalType) {
    String ref=((CanonicalType)binding.getValueSet()).asStringValue();
    if (ref.startsWith(""String_Node_Str"")) {
      ValueSet vs=context.fetchResource(ValueSet.class,makeCanonical(ref));
      if (vs == null) {
        br.url=ref.substring(9) + ""String_Node_Str"";
        br.display=ref.substring(9);
        brokenLinkWarning(path,ref);
      }
 else {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
    }
 else {
      if (ref.startsWith(""String_Node_Str"")) {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs != null) {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
 else {
          br.display=ref.substring(29);
          br.url=ref.substring(29) + ""String_Node_Str"";
          brokenLinkWarning(path,ref);
        }
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        String code=tail(ref);
        if (code.startsWith(""String_Node_Str"")) {
          br.url=""String_Node_Str"" + code + ""String_Node_Str"";
          br.display=""String_Node_Str"" + code;
        }
 else {
          br.url=""String_Node_Str"" + code + ""String_Node_Str"";
          br.display=""String_Node_Str"" + code;
        }
      }
 else {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs == null) {
          br.url=ref + ""String_Node_Str"";
          br.display=ref;
          brokenLinkWarning(path,ref);
        }
 else         if (ref.contains(""String_Node_Str"")) {
          br.url=vs.getUserString(""String_Node_Str"");
          if (br.url == null) {
            System.out.println(""String_Node_Str"" + ref);
            br.url=vs.getUserString(""String_Node_Str"");
          }
          br.display=vs.getName();
        }
 else {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
      }
    }
  }
 else   if (binding.getValueSet() instanceof UriType) {
    String ref=((UriType)binding.getValueSet()).getValue();
    if (ref.startsWith(""String_Node_Str"")) {
      br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
      br.display=ref.substring(26);
    }
 else {
      ValueSet vs=context.fetchResource(ValueSet.class,ref);
      if (vs != null) {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
 else {
        br.url=ref;
        if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         br.display=ref;
      }
    }
  }
  return br;
}",0.3803937997486384
23042,"public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  list.add(tgt);
  if (src.hasTarget()) {
    if (src.hasProfile())     tgt.setProfile(src.getProfile().get(0).getValue());
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      if (tgt.hasTargetProfile()) {
        tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
        copyElement(src,tgt);
        tgt.setCode(src.getCode());
        if (src.hasProfile())         tgt.setProfile(src.getProfile().get(0).getValue());
      }
      tgt.setTargetProfile(u.getValue());
    }
  }
 else {
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      if (tgt.hasProfile()) {
        tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
        list.add(tgt);
        copyElement(src,tgt);
        tgt.setCode(src.getCode());
      }
      tgt.setProfile(u.getValue());
    }
  }
}","public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  list.add(tgt);
  if (src.hasTarget()) {
    if (src.hasProfile())     tgt.setProfile(src.getProfile().get(0).getValue());
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      if (tgt.hasTargetProfile()) {
        tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
        list.add(tgt);
        copyElement(src,tgt);
        tgt.setCode(src.getCode());
        if (src.hasProfile())         tgt.setProfile(src.getProfile().get(0).getValue());
      }
      tgt.setTargetProfile(u.getValue());
    }
  }
 else {
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      if (tgt.hasProfile()) {
        tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
        list.add(tgt);
        copyElement(src,tgt);
        tgt.setCode(src.getCode());
      }
      tgt.setProfile(u.getValue());
    }
  }
}",0.9910331384015596
23043,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  tgt.setName(src.getTitle());
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  tgt.setName(src.getTitle());
  if (src.hasExtension(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE) && src.getExtensionString(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE).equals(""String_Node_Str""))   tgt.setKind(org.hl7.fhir.dstu2.model.ImplementationGuide.GuidePageKind.PAGE);
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}",0.8493449781659389
23044,"private static void copyElement(org.hl7.fhir.r4.model.Element src,org.hl7.fhir.dstu2016may.model.Element tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  for (  org.hl7.fhir.r4.model.Extension e : src.getExtension()) {
    tgt.addExtension(convertExtension(e));
  }
}","private static void copyElement(org.hl7.fhir.r4.model.Element src,org.hl7.fhir.dstu2016may.model.Element tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  for (  org.hl7.fhir.r4.model.Extension e : src.getExtension()) {
    if (!e.getUrl().equals(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE))     tgt.addExtension(convertExtension(e));
  }
}",0.8694362017804155
23045,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  tgt.setName(src.getTitle());
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  tgt.setName(src.getTitle());
  if (src.hasExtension(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE) && src.getExtensionString(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE).equals(""String_Node_Str""))   tgt.setKind(org.hl7.fhir.dstu2016may.model.ImplementationGuide.GuidePageKind.PAGE);
 else {
    tgt.setKind(org.hl7.fhir.dstu2016may.model.ImplementationGuide.GuidePageKind.RESOURCE);
  }
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}",0.8062248995983936
23046,"public static org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  if (src.hasTitle())   tgt.setTitle(src.getTitle());
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  if (src.hasNameUrlType())   tgt.setSource(src.getNameUrlType().getValue());
  if (src.hasTitle())   tgt.setTitle(src.getTitle());
  if (src.hasExtension(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE) && src.getExtensionString(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE).equals(""String_Node_Str""))   tgt.setKind(org.hl7.fhir.dstu3.model.ImplementationGuide.GuidePageKind.PAGE);
  for (  org.hl7.fhir.r4.model.ImplementationGuide.ImplementationGuideDefinitionPageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}",0.8514531754574811
23047,"private static void copyElement(org.hl7.fhir.r4.model.Element src,org.hl7.fhir.dstu3.model.Element tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  for (  org.hl7.fhir.r4.model.Extension e : src.getExtension()) {
    tgt.addExtension(convertExtension(e));
  }
}","private static void copyElement(org.hl7.fhir.r4.model.Element src,org.hl7.fhir.dstu3.model.Element tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  for (  org.hl7.fhir.r4.model.Extension e : src.getExtension()) {
    if (!e.getUrl().equals(org.hl7.fhir.r4.utils.ToolingExtensions.EXT_GENERATED_PAGE))     tgt.addExtension(convertExtension(e));
  }
}",0.8670694864048338
23048,"private void generateDefinitions(FhirFormat fmt,String specFile) throws Exception {
  Set<FetchedResource> files=new HashSet<FetchedResource>();
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        files.add(r);
      }
    }
  }
  if (!files.isEmpty()) {
    ZipGenerator zip=new ZipGenerator(Utilities.path(outputDir,""String_Node_Str"" + fmt.getExtension() + ""String_Node_Str""));
    for (    FetchedResource r : files) {
      ByteArrayOutputStream bs=new ByteArrayOutputStream();
      if (fmt.equals(FhirFormat.JSON))       new JsonParser().compose(bs,r.getResource());
 else       if (fmt.equals(FhirFormat.XML))       new XmlParser().compose(bs,r.getResource());
 else       if (fmt.equals(FhirFormat.TURTLE))       new TurtleParser(context).compose(r.getElement(),bs,OutputStyle.PRETTY,igpkp.getCanonical());
      zip.addBytes(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ fmt.getExtension(),bs.toByteArray(),false);
    }
    zip.addFileName(""String_Node_Str"",specFile,false);
    zip.close();
  }
}","private void generateDefinitions(FhirFormat fmt,String specFile) throws Exception {
  Set<FetchedResource> files=new HashSet<FetchedResource>();
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        files.add(r);
      }
    }
  }
  if (!files.isEmpty()) {
    ZipGenerator zip=new ZipGenerator(Utilities.path(outputDir,""String_Node_Str"" + fmt.getExtension() + ""String_Node_Str""));
    for (    FetchedResource r : files) {
      ByteArrayOutputStream bs=new ByteArrayOutputStream();
      if (version.equals(""String_Node_Str"")) {
        org.hl7.fhir.dstu3.model.Resource r3=VersionConvertor_30_40.convertResource(r.getResource());
        if (fmt.equals(FhirFormat.JSON))         new org.hl7.fhir.dstu3.formats.JsonParser().compose(bs,r3);
 else         if (fmt.equals(FhirFormat.XML))         new org.hl7.fhir.dstu3.formats.XmlParser().compose(bs,r3);
 else         if (fmt.equals(FhirFormat.TURTLE))         new org.hl7.fhir.dstu3.formats.RdfParser().compose(bs,r3);
      }
 else       if (version.equals(""String_Node_Str"")) {
        org.hl7.fhir.dstu2016may.model.Resource r14=VersionConvertor_14_40.convertResource(r.getResource());
        if (fmt.equals(FhirFormat.JSON))         new org.hl7.fhir.dstu2016may.formats.JsonParser().compose(bs,r14);
 else         if (fmt.equals(FhirFormat.XML))         new org.hl7.fhir.dstu2016may.formats.XmlParser().compose(bs,r14);
 else         if (fmt.equals(FhirFormat.TURTLE))         new org.hl7.fhir.dstu2016may.formats.RdfParser().compose(bs,r14);
      }
 else       if (version.equals(""String_Node_Str"")) {
        VersionConvertorAdvisor40 advisor=new IGR2ConvertorAdvisor();
        org.hl7.fhir.dstu2.model.Resource r14=new VersionConvertor_10_40(advisor).convertResource(r.getResource());
        if (fmt.equals(FhirFormat.JSON))         new org.hl7.fhir.dstu2.formats.JsonParser().compose(bs,r14);
 else         if (fmt.equals(FhirFormat.XML))         new org.hl7.fhir.dstu2.formats.XmlParser().compose(bs,r14);
 else         if (fmt.equals(FhirFormat.TURTLE))         throw new Exception(""String_Node_Str"");
      }
 else {
        if (fmt.equals(FhirFormat.JSON))         new JsonParser().compose(bs,r.getResource());
 else         if (fmt.equals(FhirFormat.XML))         new XmlParser().compose(bs,r.getResource());
 else         if (fmt.equals(FhirFormat.TURTLE))         new TurtleParser(context).compose(r.getElement(),bs,OutputStyle.PRETTY,igpkp.getCanonical());
      }
      zip.addBytes(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ fmt.getExtension(),bs.toByteArray(),false);
    }
    zip.addFileName(""String_Node_Str"",specFile,false);
    zip.close();
  }
}",0.5765538150581102
23049,"public static org.hl7.fhir.dstu3.model.ParameterDefinition convertParameterDefinition(org.hl7.fhir.r4.model.ParameterDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.ParameterDefinition tgt=new org.hl7.fhir.dstu3.model.ParameterDefinition();
  copyElement(src,tgt);
  if (src.hasName())   tgt.setName(src.getName());
  if (src.hasUse())   tgt.setUse(convertParameterUse(src.getUse()));
  if (src.hasMin())   tgt.setMin(src.getMin());
  if (src.hasMax())   tgt.setMax(src.getMax());
  if (src.hasDocumentation())   tgt.setDocumentation(src.getDocumentation());
  if (src.hasType())   tgt.setType(src.getType());
  if (src.hasProfile())   tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}","public static org.hl7.fhir.dstu3.model.ParameterDefinition convertParameterDefinition(org.hl7.fhir.r4.model.ParameterDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.ParameterDefinition tgt=new org.hl7.fhir.dstu3.model.ParameterDefinition();
  copyElement(src,tgt);
  if (src.hasName())   tgt.setName(src.getName());
  if (src.hasUse())   tgt.setUse(convertParameterUse(src.getUse()));
  if (src.hasMin())   tgt.setMin(src.getMin());
  if (src.hasMax())   tgt.setMax(src.getMax());
  if (src.hasDocumentation())   tgt.setDocumentation(src.getDocumentation());
  if (src.hasType())   tgt.setType(src.getType());
  if (src.hasProfile())   tgt.setProfile(new org.hl7.fhir.dstu3.model.Reference(src.getProfile()));
  return tgt;
}",0.9765013054830288
23050,"public static org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent convertDataRequirementCodeFilterComponent(org.hl7.fhir.r4.model.DataRequirement.DataRequirementCodeFilterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent tgt=new org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent();
  copyElement(src,tgt);
  if (src.hasPath())   tgt.setPath(src.getPath());
  if (src.hasValueSet())   tgt.setValueSet(convertType(src.getValueSet()));
  for (  org.hl7.fhir.r4.model.Coding t : src.getCode()) {
    tgt.addValueCoding(convertCoding(t));
  }
  return tgt;
}","public static org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent convertDataRequirementCodeFilterComponent(org.hl7.fhir.r4.model.DataRequirement.DataRequirementCodeFilterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent tgt=new org.hl7.fhir.dstu3.model.DataRequirement.DataRequirementCodeFilterComponent();
  copyElement(src,tgt);
  if (src.hasPath())   tgt.setPath(src.getPath());
  if (src.hasValueSet()) {
    if (src.getValueSet() instanceof org.hl7.fhir.r4.model.UriType)     tgt.setValueSet(new org.hl7.fhir.dstu3.model.StringType(src.getValueSetUriType().primitiveValue()));
 else     if (src.getValueSet() instanceof org.hl7.fhir.r4.model.CanonicalType)     tgt.setValueSet(new org.hl7.fhir.dstu3.model.Reference(src.getValueSetCanonicalType().primitiveValue()));
  }
  for (  org.hl7.fhir.r4.model.Coding t : src.getCode()) {
    tgt.addValueCoding(convertCoding(t));
  }
  return tgt;
}",0.7842227378190255
23051,"protected void composeParameterDefinitionInner(ParameterDefinition element) throws IOException {
  composeElement(element);
  if (element.hasNameElement()) {
    composeCodeCore(""String_Node_Str"",element.getNameElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasUseElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory(),false);
  }
  if (element.hasMinElement()) {
    composeIntegerCore(""String_Node_Str"",element.getMinElement(),false);
    composeIntegerExtras(""String_Node_Str"",element.getMinElement(),false);
  }
  if (element.hasMaxElement()) {
    composeStringCore(""String_Node_Str"",element.getMaxElement(),false);
    composeStringExtras(""String_Node_Str"",element.getMaxElement(),false);
  }
  if (element.hasDocumentationElement()) {
    composeStringCore(""String_Node_Str"",element.getDocumentationElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDocumentationElement(),false);
  }
  if (element.hasTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasProfile()) {
    composeReference(""String_Node_Str"",element.getProfile());
  }
}","protected void composeParameterDefinitionInner(ParameterDefinition element) throws IOException {
  composeElement(element);
  if (element.hasNameElement()) {
    composeCodeCore(""String_Node_Str"",element.getNameElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasUseElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory(),false);
  }
  if (element.hasMinElement()) {
    composeIntegerCore(""String_Node_Str"",element.getMinElement(),false);
    composeIntegerExtras(""String_Node_Str"",element.getMinElement(),false);
  }
  if (element.hasMaxElement()) {
    composeStringCore(""String_Node_Str"",element.getMaxElement(),false);
    composeStringExtras(""String_Node_Str"",element.getMaxElement(),false);
  }
  if (element.hasDocumentationElement()) {
    composeStringCore(""String_Node_Str"",element.getDocumentationElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDocumentationElement(),false);
  }
  if (element.hasTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasProfileElement()) {
    composeCanonicalCore(""String_Node_Str"",element.getProfileElement(),false);
    composeCanonicalExtras(""String_Node_Str"",element.getProfileElement(),false);
  }
}",0.9586503473370824
23052,"protected void parseExpansionProfileExpansionProfileFixedVersionComponentProperties(JsonObject json,ExpansionProfile owner,ExpansionProfile.ExpansionProfileFixedVersionComponent res) throws IOException, FHIRFormatError {
  parseBackboneElementProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setSystemElement(parseCanonical(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSystemElement());
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setModeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ExpansionProfile.SystemVersionProcessingMode.NULL,new ExpansionProfile.SystemVersionProcessingModeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getModeElement());
}","protected void parseExpansionProfileExpansionProfileFixedVersionComponentProperties(JsonObject json,ExpansionProfile owner,ExpansionProfile.ExpansionProfileFixedVersionComponent res) throws IOException, FHIRFormatError {
  parseBackboneElementProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setSystemElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSystemElement());
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setModeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ExpansionProfile.SystemVersionProcessingMode.NULL,new ExpansionProfile.SystemVersionProcessingModeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getModeElement());
}",0.994550408719346
23053,"@Override protected void composeResource(Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(""String_Node_Str"",(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(""String_Node_Str"",(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(""String_Node_Str"",(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(""String_Node_Str"",(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(""String_Node_Str"",(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(""String_Node_Str"",(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(""String_Node_Str"",(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(""String_Node_Str"",(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(""String_Node_Str"",(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(""String_Node_Str"",(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(""String_Node_Str"",(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(""String_Node_Str"",(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(""String_Node_Str"",(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(""String_Node_Str"",(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(""String_Node_Str"",(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(""String_Node_Str"",(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(""String_Node_Str"",(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(""String_Node_Str"",(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(""String_Node_Str"",(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(""String_Node_Str"",(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(""String_Node_Str"",(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(""String_Node_Str"",(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(""String_Node_Str"",(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(""String_Node_Str"",(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(""String_Node_Str"",(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(""String_Node_Str"",(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(""String_Node_Str"",(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(""String_Node_Str"",(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(""String_Node_Str"",(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(""String_Node_Str"",(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(""String_Node_Str"",(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(""String_Node_Str"",(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(""String_Node_Str"",(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(""String_Node_Str"",(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(""String_Node_Str"",(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(""String_Node_Str"",(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(""String_Node_Str"",(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(""String_Node_Str"",(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(""String_Node_Str"",(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(""String_Node_Str"",(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(""String_Node_Str"",(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(""String_Node_Str"",(ImplementationGuide)resource);
 else   if (resource instanceof ImplementationGuideInput)   composeImplementationGuideInput(""String_Node_Str"",(ImplementationGuideInput)resource);
 else   if (resource instanceof ImplementationGuideOutput)   composeImplementationGuideOutput(""String_Node_Str"",(ImplementationGuideOutput)resource);
 else   if (resource instanceof Invoice)   composeInvoice(""String_Node_Str"",(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(""String_Node_Str"",(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(""String_Node_Str"",(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(""String_Node_Str"",(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(""String_Node_Str"",(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(""String_Node_Str"",(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(""String_Node_Str"",(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(""String_Node_Str"",(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(""String_Node_Str"",(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(""String_Node_Str"",(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(""String_Node_Str"",(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(""String_Node_Str"",(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(""String_Node_Str"",(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(""String_Node_Str"",(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(""String_Node_Str"",(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(""String_Node_Str"",(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(""String_Node_Str"",(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(""String_Node_Str"",(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(""String_Node_Str"",(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(""String_Node_Str"",(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(""String_Node_Str"",(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(""String_Node_Str"",(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(""String_Node_Str"",(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(""String_Node_Str"",(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(""String_Node_Str"",(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(""String_Node_Str"",(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(""String_Node_Str"",(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(""String_Node_Str"",(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(""String_Node_Str"",(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(""String_Node_Str"",(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(""String_Node_Str"",(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(""String_Node_Str"",(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(""String_Node_Str"",(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(""String_Node_Str"",(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(""String_Node_Str"",(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(""String_Node_Str"",(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(""String_Node_Str"",(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(""String_Node_Str"",(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(""String_Node_Str"",(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(""String_Node_Str"",(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(""String_Node_Str"",(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(""String_Node_Str"",(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(""String_Node_Str"",(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(""String_Node_Str"",(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(""String_Node_Str"",(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(""String_Node_Str"",(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(""String_Node_Str"",(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(""String_Node_Str"",(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(""String_Node_Str"",(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(""String_Node_Str"",(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(""String_Node_Str"",(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(""String_Node_Str"",(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(""String_Node_Str"",(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(""String_Node_Str"",(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(""String_Node_Str"",(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(""String_Node_Str"",(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(""String_Node_Str"",(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(""String_Node_Str"",(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(""String_Node_Str"",(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(""String_Node_Str"",(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(""String_Node_Str"",(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(""String_Node_Str"",(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(""String_Node_Str"",(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(""String_Node_Str"",(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(""String_Node_Str"",(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(""String_Node_Str"",(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(""String_Node_Str"",(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(""String_Node_Str"",(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(""String_Node_Str"",(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(""String_Node_Str"",(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(""String_Node_Str"",(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(""String_Node_Str"",(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(""String_Node_Str"",(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(""String_Node_Str"",(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(""String_Node_Str"",(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(""String_Node_Str"",(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(""String_Node_Str"",(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(""String_Node_Str"",(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(""String_Node_Str"",(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(""String_Node_Str"",(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(""String_Node_Str"",(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(""String_Node_Str"",(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(""String_Node_Str"",(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(""String_Node_Str"",(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(""String_Node_Str"",(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(""String_Node_Str"",(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(""String_Node_Str"",(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(""String_Node_Str"",(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(""String_Node_Str"",(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(""String_Node_Str"",(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(""String_Node_Str"",(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(""String_Node_Str"",(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(""String_Node_Str"",(ImplementationGuide)resource);
 else   if (resource instanceof Invoice)   composeInvoice(""String_Node_Str"",(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(""String_Node_Str"",(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(""String_Node_Str"",(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(""String_Node_Str"",(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(""String_Node_Str"",(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(""String_Node_Str"",(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(""String_Node_Str"",(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(""String_Node_Str"",(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(""String_Node_Str"",(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(""String_Node_Str"",(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(""String_Node_Str"",(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(""String_Node_Str"",(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(""String_Node_Str"",(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(""String_Node_Str"",(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(""String_Node_Str"",(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(""String_Node_Str"",(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(""String_Node_Str"",(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(""String_Node_Str"",(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(""String_Node_Str"",(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(""String_Node_Str"",(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(""String_Node_Str"",(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(""String_Node_Str"",(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(""String_Node_Str"",(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(""String_Node_Str"",(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(""String_Node_Str"",(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(""String_Node_Str"",(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(""String_Node_Str"",(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(""String_Node_Str"",(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(""String_Node_Str"",(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(""String_Node_Str"",(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(""String_Node_Str"",(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(""String_Node_Str"",(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(""String_Node_Str"",(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(""String_Node_Str"",(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(""String_Node_Str"",(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(""String_Node_Str"",(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(""String_Node_Str"",(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(""String_Node_Str"",(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(""String_Node_Str"",(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(""String_Node_Str"",(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(""String_Node_Str"",(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(""String_Node_Str"",(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(""String_Node_Str"",(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(""String_Node_Str"",(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(""String_Node_Str"",(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(""String_Node_Str"",(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(""String_Node_Str"",(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(""String_Node_Str"",(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(""String_Node_Str"",(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(""String_Node_Str"",(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(""String_Node_Str"",(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9910019086860364
23054,"@Override protected Resource parseResource(JsonObject json) throws IOException, FHIRFormatError {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new FHIRFormatError(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseParameters(json);
 else   if (t.equals(""String_Node_Str""))   return parseAccount(json);
 else   if (t.equals(""String_Node_Str""))   return parseActivityDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseAdverseEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAuditEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
 else   if (t.equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(json);
 else   if (t.equals(""String_Node_Str""))   return parseBodyStructure(json);
 else   if (t.equals(""String_Node_Str""))   return parseBundle(json);
 else   if (t.equals(""String_Node_Str""))   return parseCapabilityStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseCareTeam(json);
 else   if (t.equals(""String_Node_Str""))   return parseChargeItem(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaim(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaimResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseClinicalImpression(json);
 else   if (t.equals(""String_Node_Str""))   return parseCodeSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunication(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseCompartmentDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConsent(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseCoverage(json);
 else   if (t.equals(""String_Node_Str""))   return parseDetectedIssue(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceComponent(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceMetric(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseEndpoint(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEntryDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseEpisodeOfCare(json);
 else   if (t.equals(""String_Node_Str""))   return parseEventDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseExampleScenario(json);
 else   if (t.equals(""String_Node_Str""))   return parseExpansionProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseExplanationOfBenefit(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyMemberHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseFlag(json);
 else   if (t.equals(""String_Node_Str""))   return parseGoal(json);
 else   if (t.equals(""String_Node_Str""))   return parseGraphDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseGuidanceResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationEvaluation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuide(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuideInput(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuideOutput(json);
 else   if (t.equals(""String_Node_Str""))   return parseInvoice(json);
 else   if (t.equals(""String_Node_Str""))   return parseItemInstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseLibrary(json);
 else   if (t.equals(""String_Node_Str""))   return parseLinkage(json);
 else   if (t.equals(""String_Node_Str""))   return parseListResource(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasure(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasureReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProduct(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductClinicals(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductIngredient(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductPackaged(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamingSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOccupationalData(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganizationRole(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentNotice(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentReconciliation(json);
 else   if (t.equals(""String_Node_Str""))   return parsePerson(json);
 else   if (t.equals(""String_Node_Str""))   return parsePlanDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitionerRole(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseProductPlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRequestGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseResearchStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseResearchSubject(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSchedule(json);
 else   if (t.equals(""String_Node_Str""))   return parseSearchParameter(json);
 else   if (t.equals(""String_Node_Str""))   return parseSequence(json);
 else   if (t.equals(""String_Node_Str""))   return parseServiceRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimenDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstancePolymer(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstanceSpecification(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyDelivery(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseTask(json);
 else   if (t.equals(""String_Node_Str""))   return parseTerminologyCapabilities(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestScript(json);
 else   if (t.equals(""String_Node_Str""))   return parseUserSession(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseVerificationResult(json);
 else   if (t.equals(""String_Node_Str""))   return parseVisionPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new FHIRFormatError(""String_Node_Str"" + t + ""String_Node_Str"");
}","@Override protected Resource parseResource(JsonObject json) throws IOException, FHIRFormatError {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new FHIRFormatError(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseParameters(json);
 else   if (t.equals(""String_Node_Str""))   return parseAccount(json);
 else   if (t.equals(""String_Node_Str""))   return parseActivityDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseAdverseEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAuditEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
 else   if (t.equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(json);
 else   if (t.equals(""String_Node_Str""))   return parseBodyStructure(json);
 else   if (t.equals(""String_Node_Str""))   return parseBundle(json);
 else   if (t.equals(""String_Node_Str""))   return parseCapabilityStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseCareTeam(json);
 else   if (t.equals(""String_Node_Str""))   return parseChargeItem(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaim(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaimResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseClinicalImpression(json);
 else   if (t.equals(""String_Node_Str""))   return parseCodeSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunication(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseCompartmentDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConsent(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseCoverage(json);
 else   if (t.equals(""String_Node_Str""))   return parseDetectedIssue(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceComponent(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceMetric(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseEndpoint(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEntryDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseEpisodeOfCare(json);
 else   if (t.equals(""String_Node_Str""))   return parseEventDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseExampleScenario(json);
 else   if (t.equals(""String_Node_Str""))   return parseExpansionProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseExplanationOfBenefit(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyMemberHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseFlag(json);
 else   if (t.equals(""String_Node_Str""))   return parseGoal(json);
 else   if (t.equals(""String_Node_Str""))   return parseGraphDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseGuidanceResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationEvaluation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuide(json);
 else   if (t.equals(""String_Node_Str""))   return parseInvoice(json);
 else   if (t.equals(""String_Node_Str""))   return parseItemInstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseLibrary(json);
 else   if (t.equals(""String_Node_Str""))   return parseLinkage(json);
 else   if (t.equals(""String_Node_Str""))   return parseListResource(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasure(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasureReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProduct(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductClinicals(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductIngredient(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductPackaged(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamingSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOccupationalData(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganizationRole(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentNotice(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentReconciliation(json);
 else   if (t.equals(""String_Node_Str""))   return parsePerson(json);
 else   if (t.equals(""String_Node_Str""))   return parsePlanDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitionerRole(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseProductPlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRequestGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseResearchStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseResearchSubject(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSchedule(json);
 else   if (t.equals(""String_Node_Str""))   return parseSearchParameter(json);
 else   if (t.equals(""String_Node_Str""))   return parseSequence(json);
 else   if (t.equals(""String_Node_Str""))   return parseServiceRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimenDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstancePolymer(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstanceSpecification(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyDelivery(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseTask(json);
 else   if (t.equals(""String_Node_Str""))   return parseTerminologyCapabilities(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestScript(json);
 else   if (t.equals(""String_Node_Str""))   return parseUserSession(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseVerificationResult(json);
 else   if (t.equals(""String_Node_Str""))   return parseVisionPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new FHIRFormatError(""String_Node_Str"" + t + ""String_Node_Str"");
}",0.9920932544164822
23055,"protected void composeImmunizationEvaluationInner(ImmunizationEvaluation element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory(),false);
  }
  if (element.hasPatient()) {
    composeReference(""String_Node_Str"",element.getPatient());
  }
  if (element.hasDateElement()) {
    composeDateTimeCore(""String_Node_Str"",element.getDateElement(),false);
    composeDateTimeExtras(""String_Node_Str"",element.getDateElement(),false);
  }
  if (element.hasAuthority()) {
    composeReference(""String_Node_Str"",element.getAuthority());
  }
  if (element.hasTargetDisease()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getTargetDisease())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasImmunizationEvent()) {
    composeReference(""String_Node_Str"",element.getImmunizationEvent());
  }
  if (element.hasDoseStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getDoseStatus());
  }
  if (element.hasDoseStatusReason()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getDoseStatusReason())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasSeriesElement()) {
    composeStringCore(""String_Node_Str"",element.getSeriesElement(),false);
    composeStringExtras(""String_Node_Str"",element.getSeriesElement(),false);
  }
  if (element.hasDoseNumberElement()) {
    composePositiveIntCore(""String_Node_Str"",element.getDoseNumberElement(),false);
    composePositiveIntExtras(""String_Node_Str"",element.getDoseNumberElement(),false);
  }
  if (element.hasSeriesDosesElement()) {
    composePositiveIntCore(""String_Node_Str"",element.getSeriesDosesElement(),false);
    composePositiveIntExtras(""String_Node_Str"",element.getSeriesDosesElement(),false);
  }
}","protected void composeImmunizationEvaluationInner(ImmunizationEvaluation element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory(),false);
  }
  if (element.hasPatient()) {
    composeReference(""String_Node_Str"",element.getPatient());
  }
  if (element.hasDateElement()) {
    composeDateTimeCore(""String_Node_Str"",element.getDateElement(),false);
    composeDateTimeExtras(""String_Node_Str"",element.getDateElement(),false);
  }
  if (element.hasAuthority()) {
    composeReference(""String_Node_Str"",element.getAuthority());
  }
  if (element.hasTargetDisease()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getTargetDisease())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasImmunizationEvent()) {
    composeReference(""String_Node_Str"",element.getImmunizationEvent());
  }
  if (element.hasDoseStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getDoseStatus());
  }
  if (element.hasDoseStatusReason()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getDoseStatusReason())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasSeriesElement()) {
    composeStringCore(""String_Node_Str"",element.getSeriesElement(),false);
    composeStringExtras(""String_Node_Str"",element.getSeriesElement(),false);
  }
  if (element.hasDoseNumber()) {
    composeType(""String_Node_Str"",element.getDoseNumber());
  }
  if (element.hasSeriesDoses()) {
    composeType(""String_Node_Str"",element.getSeriesDoses());
  }
}",0.9211356466876972
23056,"protected void composeExpansionProfileExpansionProfileFixedVersionComponentInner(ExpansionProfile.ExpansionProfileFixedVersionComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasSystemElement()) {
    composeCanonicalCore(""String_Node_Str"",element.getSystemElement(),false);
    composeCanonicalExtras(""String_Node_Str"",element.getSystemElement(),false);
  }
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasModeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory(),false);
  }
}","protected void composeExpansionProfileExpansionProfileFixedVersionComponentInner(ExpansionProfile.ExpansionProfileFixedVersionComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasSystemElement()) {
    composeUriCore(""String_Node_Str"",element.getSystemElement(),false);
    composeUriExtras(""String_Node_Str"",element.getSystemElement(),false);
  }
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasModeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory(),false);
  }
}",0.401330376940133
23057,"protected void composeStructureDefinitionInner(StructureDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUriCore(""String_Node_Str"",element.getUrlElement(),false);
    composeUriExtras(""String_Node_Str"",element.getUrlElement(),false);
  }
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTitleElement()) {
    composeStringCore(""String_Node_Str"",element.getTitleElement(),false);
    composeStringExtras(""String_Node_Str"",element.getTitleElement(),false);
  }
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory(),false);
  }
  if (element.hasExperimentalElement()) {
    composeBooleanCore(""String_Node_Str"",element.getExperimentalElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getExperimentalElement(),false);
  }
  if (element.hasDateElement()) {
    composeDateTimeCore(""String_Node_Str"",element.getDateElement(),false);
    composeDateTimeExtras(""String_Node_Str"",element.getDateElement(),false);
  }
  if (element.hasPublisherElement()) {
    composeStringCore(""String_Node_Str"",element.getPublisherElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublisherElement(),false);
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactDetail e : element.getContact())     composeContactDetail(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasUseContext()) {
    openArray(""String_Node_Str"");
    for (    UsageContext e : element.getUseContext())     composeUsageContext(null,e);
    closeArray();
  }
  ;
  if (element.hasJurisdiction()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getJurisdiction())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasPurposeElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getPurposeElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getPurposeElement(),false);
  }
  if (element.hasCopyrightElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getCopyrightElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getCopyrightElement(),false);
  }
  if (element.hasKeyword()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getKeyword())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasFhirVersionElement()) {
    composeIdCore(""String_Node_Str"",element.getFhirVersionElement(),false);
    composeIdExtras(""String_Node_Str"",element.getFhirVersionElement(),false);
  }
  if (element.hasMapping()) {
    openArray(""String_Node_Str"");
    for (    StructureDefinition.StructureDefinitionMappingComponent e : element.getMapping())     composeStructureDefinitionStructureDefinitionMappingComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasKindElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory(),false);
  }
  if (element.hasAbstractElement()) {
    composeBooleanCore(""String_Node_Str"",element.getAbstractElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getAbstractElement(),false);
  }
  if (element.hasContext()) {
    openArray(""String_Node_Str"");
    for (    StructureDefinition.StructureDefinitionContextComponent e : element.getContext())     composeStructureDefinitionStructureDefinitionContextComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasContextInvariant()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getContextInvariant())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getContextInvariant())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getContextInvariant())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasBaseDefinitionElement()) {
    composeCanonicalCore(""String_Node_Str"",element.getBaseDefinitionElement(),false);
    composeCanonicalExtras(""String_Node_Str"",element.getBaseDefinitionElement(),false);
  }
  if (element.hasDerivationElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory(),false);
  }
  if (element.hasSnapshot()) {
    composeStructureDefinitionStructureDefinitionSnapshotComponent(""String_Node_Str"",element.getSnapshot());
  }
  if (element.hasDifferential()) {
    composeStructureDefinitionStructureDefinitionDifferentialComponent(""String_Node_Str"",element.getDifferential());
  }
}","protected void composeStructureDefinitionInner(StructureDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUriCore(""String_Node_Str"",element.getUrlElement(),false);
    composeUriExtras(""String_Node_Str"",element.getUrlElement(),false);
  }
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTitleElement()) {
    composeStringCore(""String_Node_Str"",element.getTitleElement(),false);
    composeStringExtras(""String_Node_Str"",element.getTitleElement(),false);
  }
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory(),false);
  }
  if (element.hasExperimentalElement()) {
    composeBooleanCore(""String_Node_Str"",element.getExperimentalElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getExperimentalElement(),false);
  }
  if (element.hasDateElement()) {
    composeDateTimeCore(""String_Node_Str"",element.getDateElement(),false);
    composeDateTimeExtras(""String_Node_Str"",element.getDateElement(),false);
  }
  if (element.hasPublisherElement()) {
    composeStringCore(""String_Node_Str"",element.getPublisherElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublisherElement(),false);
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactDetail e : element.getContact())     composeContactDetail(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasUseContext()) {
    openArray(""String_Node_Str"");
    for (    UsageContext e : element.getUseContext())     composeUsageContext(null,e);
    closeArray();
  }
  ;
  if (element.hasJurisdiction()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getJurisdiction())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasPurposeElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getPurposeElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getPurposeElement(),false);
  }
  if (element.hasCopyrightElement()) {
    composeMarkdownCore(""String_Node_Str"",element.getCopyrightElement(),false);
    composeMarkdownExtras(""String_Node_Str"",element.getCopyrightElement(),false);
  }
  if (element.hasKeyword()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getKeyword())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasFhirVersionElement()) {
    composeIdCore(""String_Node_Str"",element.getFhirVersionElement(),false);
    composeIdExtras(""String_Node_Str"",element.getFhirVersionElement(),false);
  }
  if (element.hasMapping()) {
    openArray(""String_Node_Str"");
    for (    StructureDefinition.StructureDefinitionMappingComponent e : element.getMapping())     composeStructureDefinitionStructureDefinitionMappingComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasKindElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory(),false);
  }
  if (element.hasAbstractElement()) {
    composeBooleanCore(""String_Node_Str"",element.getAbstractElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getAbstractElement(),false);
  }
  if (element.hasContext()) {
    openArray(""String_Node_Str"");
    for (    StructureDefinition.StructureDefinitionContextComponent e : element.getContext())     composeStructureDefinitionStructureDefinitionContextComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasContextInvariant()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getContextInvariant())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getContextInvariant())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getContextInvariant())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasTypeElement()) {
    composeUriCore(""String_Node_Str"",element.getTypeElement(),false);
    composeUriExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasBaseDefinitionElement()) {
    composeCanonicalCore(""String_Node_Str"",element.getBaseDefinitionElement(),false);
    composeCanonicalExtras(""String_Node_Str"",element.getBaseDefinitionElement(),false);
  }
  if (element.hasDerivationElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory(),false);
  }
  if (element.hasSnapshot()) {
    composeStructureDefinitionStructureDefinitionSnapshotComponent(""String_Node_Str"",element.getSnapshot());
  }
  if (element.hasDifferential()) {
    composeStructureDefinitionStructureDefinitionDifferentialComponent(""String_Node_Str"",element.getDifferential());
  }
}",0.9988278633623576
23058,"protected void composeDataRequirementInner(DataRequirement element) throws IOException {
  composeElement(element);
  if (element.hasTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasProfile()) {
    openArray(""String_Node_Str"");
    for (    CanonicalType e : element.getProfile())     composeCanonicalCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getProfile())) {
      openArray(""String_Node_Str"");
      for (      CanonicalType e : element.getProfile())       composeCanonicalExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasMustSupport()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getMustSupport())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getMustSupport())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getMustSupport())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasCodeFilter()) {
    openArray(""String_Node_Str"");
    for (    DataRequirement.DataRequirementCodeFilterComponent e : element.getCodeFilter())     composeDataRequirementDataRequirementCodeFilterComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasDateFilter()) {
    openArray(""String_Node_Str"");
    for (    DataRequirement.DataRequirementDateFilterComponent e : element.getDateFilter())     composeDataRequirementDataRequirementDateFilterComponent(null,e);
    closeArray();
  }
  ;
}","protected void composeDataRequirementInner(DataRequirement element) throws IOException {
  composeElement(element);
  if (element.hasTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getTypeElement(),false);
  }
  if (element.hasProfile()) {
    openArray(""String_Node_Str"");
    for (    CanonicalType e : element.getProfile())     composeCanonicalCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getProfile())) {
      openArray(""String_Node_Str"");
      for (      CanonicalType e : element.getProfile())       composeCanonicalExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasSubject()) {
    composeType(""String_Node_Str"",element.getSubject());
  }
  if (element.hasMustSupport()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getMustSupport())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getMustSupport())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getMustSupport())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasCodeFilter()) {
    openArray(""String_Node_Str"");
    for (    DataRequirement.DataRequirementCodeFilterComponent e : element.getCodeFilter())     composeDataRequirementDataRequirementCodeFilterComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasDateFilter()) {
    openArray(""String_Node_Str"");
    for (    DataRequirement.DataRequirementDateFilterComponent e : element.getDateFilter())     composeDataRequirementDataRequirementDateFilterComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasLimitElement()) {
    composePositiveIntCore(""String_Node_Str"",element.getLimitElement(),false);
    composePositiveIntExtras(""String_Node_Str"",element.getLimitElement(),false);
  }
  if (element.hasSort()) {
    openArray(""String_Node_Str"");
    for (    DataRequirement.DataRequirementSortComponent e : element.getSort())     composeDataRequirementDataRequirementSortComponent(null,e);
    closeArray();
  }
  ;
}",0.859375
23059,"protected void parseParameterDefinitionProperties(JsonObject json,ParameterDefinition res) throws IOException, FHIRFormatError {
  parseTypeProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setNameElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setUseElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ParameterDefinition.ParameterUse.NULL,new ParameterDefinition.ParameterUseEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUseElement());
  if (json.has(""String_Node_Str""))   res.setMinElement(parseInteger(json.get(""String_Node_Str"").getAsLong()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getMinElement());
  if (json.has(""String_Node_Str""))   res.setMaxElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getMaxElement());
  if (json.has(""String_Node_Str""))   res.setDocumentationElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDocumentationElement());
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setProfile(parseReference(json.getAsJsonObject(""String_Node_Str"")));
}","protected void parseParameterDefinitionProperties(JsonObject json,ParameterDefinition res) throws IOException, FHIRFormatError {
  parseTypeProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setNameElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setUseElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ParameterDefinition.ParameterUse.NULL,new ParameterDefinition.ParameterUseEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUseElement());
  if (json.has(""String_Node_Str""))   res.setMinElement(parseInteger(json.get(""String_Node_Str"").getAsLong()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getMinElement());
  if (json.has(""String_Node_Str""))   res.setMaxElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getMaxElement());
  if (json.has(""String_Node_Str""))   res.setDocumentationElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDocumentationElement());
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setProfileElement(parseCanonical(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getProfileElement());
}",0.9561001885267978
23060,"protected void parseStructureDefinitionProperties(JsonObject json,StructureDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setUrlElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUrlElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setTitleElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTitleElement());
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Enumerations.PublicationStatus.NULL,new Enumerations.PublicationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setExperimentalElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getExperimentalElement());
  if (json.has(""String_Node_Str""))   res.setDateElement(parseDateTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDateElement());
  if (json.has(""String_Node_Str""))   res.setPublisherElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublisherElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactDetail(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getUseContext().add(parseUsageContext(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getJurisdiction().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPurposeElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurposeElement());
  if (json.has(""String_Node_Str""))   res.setCopyrightElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCopyrightElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getKeyword().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setFhirVersionElement(parseId(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getFhirVersionElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMapping().add(parseStructureDefinitionStructureDefinitionMappingComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setKindElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),StructureDefinition.StructureDefinitionKind.NULL,new StructureDefinition.StructureDefinitionKindEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getKindElement());
  if (json.has(""String_Node_Str""))   res.setAbstractElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getAbstractElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContext().add(parseStructureDefinitionStructureDefinitionContextComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContextInvariant().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getContextInvariant().size())       res.getContextInvariant().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getContextInvariant().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setBaseDefinitionElement(parseCanonical(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getBaseDefinitionElement());
  if (json.has(""String_Node_Str""))   res.setDerivationElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),StructureDefinition.TypeDerivationRule.NULL,new StructureDefinition.TypeDerivationRuleEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDerivationElement());
  if (json.has(""String_Node_Str""))   res.setSnapshot(parseStructureDefinitionStructureDefinitionSnapshotComponent(json.getAsJsonObject(""String_Node_Str""),res));
  if (json.has(""String_Node_Str""))   res.setDifferential(parseStructureDefinitionStructureDefinitionDifferentialComponent(json.getAsJsonObject(""String_Node_Str""),res));
}","protected void parseStructureDefinitionProperties(JsonObject json,StructureDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setUrlElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUrlElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setTitleElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTitleElement());
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Enumerations.PublicationStatus.NULL,new Enumerations.PublicationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setExperimentalElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getExperimentalElement());
  if (json.has(""String_Node_Str""))   res.setDateElement(parseDateTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDateElement());
  if (json.has(""String_Node_Str""))   res.setPublisherElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublisherElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactDetail(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getUseContext().add(parseUsageContext(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getJurisdiction().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPurposeElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurposeElement());
  if (json.has(""String_Node_Str""))   res.setCopyrightElement(parseMarkdown(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCopyrightElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getKeyword().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setFhirVersionElement(parseId(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getFhirVersionElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMapping().add(parseStructureDefinitionStructureDefinitionMappingComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setKindElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),StructureDefinition.StructureDefinitionKind.NULL,new StructureDefinition.StructureDefinitionKindEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getKindElement());
  if (json.has(""String_Node_Str""))   res.setAbstractElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getAbstractElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContext().add(parseStructureDefinitionStructureDefinitionContextComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContextInvariant().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getContextInvariant().size())       res.getContextInvariant().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getContextInvariant().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setBaseDefinitionElement(parseCanonical(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getBaseDefinitionElement());
  if (json.has(""String_Node_Str""))   res.setDerivationElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),StructureDefinition.TypeDerivationRule.NULL,new StructureDefinition.TypeDerivationRuleEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDerivationElement());
  if (json.has(""String_Node_Str""))   res.setSnapshot(parseStructureDefinitionStructureDefinitionSnapshotComponent(json.getAsJsonObject(""String_Node_Str""),res));
  if (json.has(""String_Node_Str""))   res.setDifferential(parseStructureDefinitionStructureDefinitionDifferentialComponent(json.getAsJsonObject(""String_Node_Str""),res));
}",0.9995213020584012
23061,"protected void parseImmunizationEvaluationProperties(JsonObject json,ImmunizationEvaluation res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ImmunizationEvaluation.ImmunizationEvaluationStatus.NULL,new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setPatient(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setDateElement(parseDateTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDateElement());
  if (json.has(""String_Node_Str""))   res.setAuthority(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTargetDisease().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setImmunizationEvent(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setDoseStatus(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDoseStatusReason().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setSeriesElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesElement());
  if (json.has(""String_Node_Str""))   res.setDoseNumberElement(parsePositiveInt(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDoseNumberElement());
  if (json.has(""String_Node_Str""))   res.setSeriesDosesElement(parsePositiveInt(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesDosesElement());
}","protected void parseImmunizationEvaluationProperties(JsonObject json,ImmunizationEvaluation res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ImmunizationEvaluation.ImmunizationEvaluationStatus.NULL,new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setPatient(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setDateElement(parseDateTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDateElement());
  if (json.has(""String_Node_Str""))   res.setAuthority(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTargetDisease().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setImmunizationEvent(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setDoseStatus(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDoseStatusReason().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setSeriesElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesElement());
  Type doseNumber=parseType(""String_Node_Str"",json);
  if (doseNumber != null)   res.setDoseNumber(doseNumber);
  Type seriesDoses=parseType(""String_Node_Str"",json);
  if (seriesDoses != null)   res.setSeriesDoses(seriesDoses);
}",0.8861386138613861
23062,"protected void composeNamedReference(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(name,(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(name,(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(name,(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(name,(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(name,(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(name,(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(name,(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(name,(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(name,(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(name,(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(name,(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(name,(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof ImplementationGuideInput)   composeImplementationGuideInput(name,(ImplementationGuideInput)resource);
 else   if (resource instanceof ImplementationGuideOutput)   composeImplementationGuideOutput(name,(ImplementationGuideOutput)resource);
 else   if (resource instanceof Invoice)   composeInvoice(name,(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(name,(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(name,(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(name,(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(name,(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(name,(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(name,(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(name,(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(name,(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(name,(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(name,(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(name,(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(name,(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(name,(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(name,(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(name,(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(name,(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(name,(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(name,(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(name,(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(name,(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(name,(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(name,(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(name,(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(name,(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(name,(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(name,(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(name,(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","protected void composeNamedReference(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(name,(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(name,(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(name,(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(name,(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(name,(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(name,(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(name,(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(name,(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(name,(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(name,(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(name,(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(name,(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof Invoice)   composeInvoice(name,(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(name,(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(name,(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(name,(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(name,(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(name,(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(name,(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(name,(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(name,(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(name,(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(name,(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(name,(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(name,(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(name,(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(name,(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(name,(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(name,(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(name,(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(name,(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(name,(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(name,(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(name,(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(name,(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(name,(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(name,(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(name,(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(name,(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(name,(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9907769798863288
23063,"protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponentInner(ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasVaccineCode()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getVaccineCode())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasTargetDisease()) {
    composeCodeableConcept(""String_Node_Str"",element.getTargetDisease());
  }
  if (element.hasContraindicatedVaccineCode()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getContraindicatedVaccineCode())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasForecastStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getForecastStatus());
  }
  if (element.hasForecastReason()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getForecastReason())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasDateCriterion()) {
    openArray(""String_Node_Str"");
    for (    ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent e : element.getDateCriterion())     composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasSeriesElement()) {
    composeStringCore(""String_Node_Str"",element.getSeriesElement(),false);
    composeStringExtras(""String_Node_Str"",element.getSeriesElement(),false);
  }
  if (element.hasDoseNumberElement()) {
    composePositiveIntCore(""String_Node_Str"",element.getDoseNumberElement(),false);
    composePositiveIntExtras(""String_Node_Str"",element.getDoseNumberElement(),false);
  }
  if (element.hasSeriesDosesElement()) {
    composePositiveIntCore(""String_Node_Str"",element.getSeriesDosesElement(),false);
    composePositiveIntExtras(""String_Node_Str"",element.getSeriesDosesElement(),false);
  }
  if (element.hasSupportingImmunization()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getSupportingImmunization())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasSupportingPatientInformation()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getSupportingPatientInformation())     composeReference(null,e);
    closeArray();
  }
  ;
}","protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponentInner(ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasVaccineCode()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getVaccineCode())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasTargetDisease()) {
    composeCodeableConcept(""String_Node_Str"",element.getTargetDisease());
  }
  if (element.hasContraindicatedVaccineCode()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getContraindicatedVaccineCode())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasForecastStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getForecastStatus());
  }
  if (element.hasForecastReason()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getForecastReason())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasDateCriterion()) {
    openArray(""String_Node_Str"");
    for (    ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent e : element.getDateCriterion())     composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasSeriesElement()) {
    composeStringCore(""String_Node_Str"",element.getSeriesElement(),false);
    composeStringExtras(""String_Node_Str"",element.getSeriesElement(),false);
  }
  if (element.hasDoseNumber()) {
    composeType(""String_Node_Str"",element.getDoseNumber());
  }
  if (element.hasSeriesDoses()) {
    composeType(""String_Node_Str"",element.getSeriesDoses());
  }
  if (element.hasSupportingImmunization()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getSupportingImmunization())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasSupportingPatientInformation()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getSupportingPatientInformation())     composeReference(null,e);
    closeArray();
  }
  ;
}",0.7610968632866443
23064,"protected void parseDataRequirementProperties(JsonObject json,DataRequirement res) throws IOException, FHIRFormatError {
  parseTypeProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getProfile().add(parseCanonical(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getProfile().size())       res.getProfile().add(parseCanonical(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getProfile().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMustSupport().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getMustSupport().size())       res.getMustSupport().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getMustSupport().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getCodeFilter().add(parseDataRequirementDataRequirementCodeFilterComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDateFilter().add(parseDataRequirementDataRequirementDateFilterComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
}","protected void parseDataRequirementProperties(JsonObject json,DataRequirement res) throws IOException, FHIRFormatError {
  parseTypeProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getProfile().add(parseCanonical(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getProfile().size())       res.getProfile().add(parseCanonical(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getProfile().get(i));
    }
  }
  ;
  Type subject=parseType(""String_Node_Str"",json);
  if (subject != null)   res.setSubject(subject);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMustSupport().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getMustSupport().size())       res.getMustSupport().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getMustSupport().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getCodeFilter().add(parseDataRequirementDataRequirementCodeFilterComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDateFilter().add(parseDataRequirementDataRequirementDateFilterComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setLimitElement(parsePositiveInt(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getLimitElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSort().add(parseDataRequirementDataRequirementSortComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
}",0.7005282405526209
23065,"protected void parseImmunizationRecommendationImmunizationRecommendationRecommendationComponentProperties(JsonObject json,ImmunizationRecommendation owner,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent res) throws IOException, FHIRFormatError {
  parseBackboneElementProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getVaccineCode().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setTargetDisease(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContraindicatedVaccineCode().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setForecastStatus(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getForecastReason().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDateCriterion().add(parseImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setSeriesElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesElement());
  if (json.has(""String_Node_Str""))   res.setDoseNumberElement(parsePositiveInt(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDoseNumberElement());
  if (json.has(""String_Node_Str""))   res.setSeriesDosesElement(parsePositiveInt(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesDosesElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSupportingImmunization().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSupportingPatientInformation().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
}","protected void parseImmunizationRecommendationImmunizationRecommendationRecommendationComponentProperties(JsonObject json,ImmunizationRecommendation owner,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent res) throws IOException, FHIRFormatError {
  parseBackboneElementProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getVaccineCode().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setTargetDisease(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContraindicatedVaccineCode().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setForecastStatus(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getForecastReason().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getDateCriterion().add(parseImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setSeriesElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getSeriesElement());
  Type doseNumber=parseType(""String_Node_Str"",json);
  if (doseNumber != null)   res.setDoseNumber(doseNumber);
  Type seriesDoses=parseType(""String_Node_Str"",json);
  if (seriesDoses != null)   res.setSeriesDoses(seriesDoses);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSupportingImmunization().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSupportingPatientInformation().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
}",0.7414372061786434
23066,"protected boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}","protected boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}",0.995275464445868
23067,"protected void composeExpansionProfileExpansionProfileFixedVersionComponent(Complex parent,String parentType,String name,ExpansionProfile.ExpansionProfileFixedVersionComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  if (element.hasSystemElement())   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getSystemElement(),-1);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasModeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getModeElement(),-1);
}","protected void composeExpansionProfileExpansionProfileFixedVersionComponent(Complex parent,String parentType,String name,ExpansionProfile.ExpansionProfileFixedVersionComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  if (element.hasSystemElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getSystemElement(),-1);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasModeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getModeElement(),-1);
}",0.9924528301886792
23068,"protected void composeDataRequirement(Complex parent,String parentType,String name,DataRequirement element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeElement(t,""String_Node_Str"",name,element,index);
  if (element.hasTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  for (int i=0; i < element.getProfile().size(); i++)   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getProfile().get(i),i);
  for (int i=0; i < element.getMustSupport().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getMustSupport().get(i),i);
  for (int i=0; i < element.getCodeFilter().size(); i++)   composeDataRequirementDataRequirementCodeFilterComponent(t,""String_Node_Str"",""String_Node_Str"",element.getCodeFilter().get(i),i);
  for (int i=0; i < element.getDateFilter().size(); i++)   composeDataRequirementDataRequirementDateFilterComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDateFilter().get(i),i);
}","protected void composeDataRequirement(Complex parent,String parentType,String name,DataRequirement element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeElement(t,""String_Node_Str"",name,element,index);
  if (element.hasTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  for (int i=0; i < element.getProfile().size(); i++)   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getProfile().get(i),i);
  if (element.hasSubject())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getSubject(),-1);
  for (int i=0; i < element.getMustSupport().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getMustSupport().get(i),i);
  for (int i=0; i < element.getCodeFilter().size(); i++)   composeDataRequirementDataRequirementCodeFilterComponent(t,""String_Node_Str"",""String_Node_Str"",element.getCodeFilter().get(i),i);
  for (int i=0; i < element.getDateFilter().size(); i++)   composeDataRequirementDataRequirementDateFilterComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDateFilter().get(i),i);
  if (element.hasLimitElement())   composePositiveInt(t,""String_Node_Str"",""String_Node_Str"",element.getLimitElement(),-1);
  for (int i=0; i < element.getSort().size(); i++)   composeDataRequirementDataRequirementSortComponent(t,""String_Node_Str"",""String_Node_Str"",element.getSort().get(i),i);
}",0.8504113687359761
23069,"protected void composeStructureDefinition(Complex parent,String parentType,String name,StructureDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasUrlElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getUrlElement(),-1);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasTitleElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getTitleElement(),-1);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasExperimentalElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getExperimentalElement(),-1);
  if (element.hasDateElement())   composeDateTime(t,""String_Node_Str"",""String_Node_Str"",element.getDateElement(),-1);
  if (element.hasPublisherElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublisherElement(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactDetail(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasDescriptionElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  for (int i=0; i < element.getUseContext().size(); i++)   composeUsageContext(t,""String_Node_Str"",""String_Node_Str"",element.getUseContext().get(i),i);
  for (int i=0; i < element.getJurisdiction().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getJurisdiction().get(i),i);
  if (element.hasPurposeElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getPurposeElement(),-1);
  if (element.hasCopyrightElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getCopyrightElement(),-1);
  for (int i=0; i < element.getKeyword().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getKeyword().get(i),i);
  if (element.hasFhirVersionElement())   composeId(t,""String_Node_Str"",""String_Node_Str"",element.getFhirVersionElement(),-1);
  for (int i=0; i < element.getMapping().size(); i++)   composeStructureDefinitionStructureDefinitionMappingComponent(t,""String_Node_Str"",""String_Node_Str"",element.getMapping().get(i),i);
  if (element.hasKindElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getKindElement(),-1);
  if (element.hasAbstractElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getAbstractElement(),-1);
  for (int i=0; i < element.getContext().size(); i++)   composeStructureDefinitionStructureDefinitionContextComponent(t,""String_Node_Str"",""String_Node_Str"",element.getContext().get(i),i);
  for (int i=0; i < element.getContextInvariant().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getContextInvariant().get(i),i);
  if (element.hasTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasBaseDefinitionElement())   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getBaseDefinitionElement(),-1);
  if (element.hasDerivationElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getDerivationElement(),-1);
  if (element.hasSnapshot())   composeStructureDefinitionStructureDefinitionSnapshotComponent(t,""String_Node_Str"",""String_Node_Str"",element.getSnapshot(),-1);
  if (element.hasDifferential())   composeStructureDefinitionStructureDefinitionDifferentialComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDifferential(),-1);
}","protected void composeStructureDefinition(Complex parent,String parentType,String name,StructureDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasUrlElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getUrlElement(),-1);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasTitleElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getTitleElement(),-1);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasExperimentalElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getExperimentalElement(),-1);
  if (element.hasDateElement())   composeDateTime(t,""String_Node_Str"",""String_Node_Str"",element.getDateElement(),-1);
  if (element.hasPublisherElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublisherElement(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactDetail(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasDescriptionElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  for (int i=0; i < element.getUseContext().size(); i++)   composeUsageContext(t,""String_Node_Str"",""String_Node_Str"",element.getUseContext().get(i),i);
  for (int i=0; i < element.getJurisdiction().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getJurisdiction().get(i),i);
  if (element.hasPurposeElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getPurposeElement(),-1);
  if (element.hasCopyrightElement())   composeMarkdown(t,""String_Node_Str"",""String_Node_Str"",element.getCopyrightElement(),-1);
  for (int i=0; i < element.getKeyword().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getKeyword().get(i),i);
  if (element.hasFhirVersionElement())   composeId(t,""String_Node_Str"",""String_Node_Str"",element.getFhirVersionElement(),-1);
  for (int i=0; i < element.getMapping().size(); i++)   composeStructureDefinitionStructureDefinitionMappingComponent(t,""String_Node_Str"",""String_Node_Str"",element.getMapping().get(i),i);
  if (element.hasKindElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getKindElement(),-1);
  if (element.hasAbstractElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getAbstractElement(),-1);
  for (int i=0; i < element.getContext().size(); i++)   composeStructureDefinitionStructureDefinitionContextComponent(t,""String_Node_Str"",""String_Node_Str"",element.getContext().get(i),i);
  for (int i=0; i < element.getContextInvariant().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getContextInvariant().get(i),i);
  if (element.hasTypeElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasBaseDefinitionElement())   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getBaseDefinitionElement(),-1);
  if (element.hasDerivationElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getDerivationElement(),-1);
  if (element.hasSnapshot())   composeStructureDefinitionStructureDefinitionSnapshotComponent(t,""String_Node_Str"",""String_Node_Str"",element.getSnapshot(),-1);
  if (element.hasDifferential())   composeStructureDefinitionStructureDefinitionDifferentialComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDifferential(),-1);
}",0.999140154772141
23070,"@Override protected void composeResource(Complex parent,Resource resource){
  if (resource instanceof Parameters)   composeParameters(parent,null,""String_Node_Str"",(Parameters)resource,-1);
 else   if (resource instanceof Account)   composeAccount(parent,null,""String_Node_Str"",(Account)resource,-1);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(parent,null,""String_Node_Str"",(ActivityDefinition)resource,-1);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(parent,null,""String_Node_Str"",(AdverseEvent)resource,-1);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(parent,null,""String_Node_Str"",(AllergyIntolerance)resource,-1);
 else   if (resource instanceof Appointment)   composeAppointment(parent,null,""String_Node_Str"",(Appointment)resource,-1);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(parent,null,""String_Node_Str"",(AppointmentResponse)resource,-1);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(parent,null,""String_Node_Str"",(AuditEvent)resource,-1);
 else   if (resource instanceof Basic)   composeBasic(parent,null,""String_Node_Str"",(Basic)resource,-1);
 else   if (resource instanceof Binary)   composeBinary(parent,null,""String_Node_Str"",(Binary)resource,-1);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(parent,null,""String_Node_Str"",(BiologicallyDerivedProduct)resource,-1);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(parent,null,""String_Node_Str"",(BodyStructure)resource,-1);
 else   if (resource instanceof Bundle)   composeBundle(parent,null,""String_Node_Str"",(Bundle)resource,-1);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(parent,null,""String_Node_Str"",(CapabilityStatement)resource,-1);
 else   if (resource instanceof CarePlan)   composeCarePlan(parent,null,""String_Node_Str"",(CarePlan)resource,-1);
 else   if (resource instanceof CareTeam)   composeCareTeam(parent,null,""String_Node_Str"",(CareTeam)resource,-1);
 else   if (resource instanceof ChargeItem)   composeChargeItem(parent,null,""String_Node_Str"",(ChargeItem)resource,-1);
 else   if (resource instanceof Claim)   composeClaim(parent,null,""String_Node_Str"",(Claim)resource,-1);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(parent,null,""String_Node_Str"",(ClaimResponse)resource,-1);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(parent,null,""String_Node_Str"",(ClinicalImpression)resource,-1);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(parent,null,""String_Node_Str"",(CodeSystem)resource,-1);
 else   if (resource instanceof Communication)   composeCommunication(parent,null,""String_Node_Str"",(Communication)resource,-1);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(parent,null,""String_Node_Str"",(CommunicationRequest)resource,-1);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(parent,null,""String_Node_Str"",(CompartmentDefinition)resource,-1);
 else   if (resource instanceof Composition)   composeComposition(parent,null,""String_Node_Str"",(Composition)resource,-1);
 else   if (resource instanceof ConceptMap)   composeConceptMap(parent,null,""String_Node_Str"",(ConceptMap)resource,-1);
 else   if (resource instanceof Condition)   composeCondition(parent,null,""String_Node_Str"",(Condition)resource,-1);
 else   if (resource instanceof Consent)   composeConsent(parent,null,""String_Node_Str"",(Consent)resource,-1);
 else   if (resource instanceof Contract)   composeContract(parent,null,""String_Node_Str"",(Contract)resource,-1);
 else   if (resource instanceof Coverage)   composeCoverage(parent,null,""String_Node_Str"",(Coverage)resource,-1);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(parent,null,""String_Node_Str"",(DetectedIssue)resource,-1);
 else   if (resource instanceof Device)   composeDevice(parent,null,""String_Node_Str"",(Device)resource,-1);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(parent,null,""String_Node_Str"",(DeviceComponent)resource,-1);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(parent,null,""String_Node_Str"",(DeviceMetric)resource,-1);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(parent,null,""String_Node_Str"",(DeviceRequest)resource,-1);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(parent,null,""String_Node_Str"",(DeviceUseStatement)resource,-1);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(parent,null,""String_Node_Str"",(DiagnosticReport)resource,-1);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(parent,null,""String_Node_Str"",(DocumentManifest)resource,-1);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(parent,null,""String_Node_Str"",(DocumentReference)resource,-1);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(parent,null,""String_Node_Str"",(EligibilityRequest)resource,-1);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(parent,null,""String_Node_Str"",(EligibilityResponse)resource,-1);
 else   if (resource instanceof Encounter)   composeEncounter(parent,null,""String_Node_Str"",(Encounter)resource,-1);
 else   if (resource instanceof Endpoint)   composeEndpoint(parent,null,""String_Node_Str"",(Endpoint)resource,-1);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(parent,null,""String_Node_Str"",(EnrollmentRequest)resource,-1);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(parent,null,""String_Node_Str"",(EnrollmentResponse)resource,-1);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(parent,null,""String_Node_Str"",(EntryDefinition)resource,-1);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(parent,null,""String_Node_Str"",(EpisodeOfCare)resource,-1);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(parent,null,""String_Node_Str"",(EventDefinition)resource,-1);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(parent,null,""String_Node_Str"",(ExampleScenario)resource,-1);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(parent,null,""String_Node_Str"",(ExpansionProfile)resource,-1);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(parent,null,""String_Node_Str"",(ExplanationOfBenefit)resource,-1);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(parent,null,""String_Node_Str"",(FamilyMemberHistory)resource,-1);
 else   if (resource instanceof Flag)   composeFlag(parent,null,""String_Node_Str"",(Flag)resource,-1);
 else   if (resource instanceof Goal)   composeGoal(parent,null,""String_Node_Str"",(Goal)resource,-1);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(parent,null,""String_Node_Str"",(GraphDefinition)resource,-1);
 else   if (resource instanceof Group)   composeGroup(parent,null,""String_Node_Str"",(Group)resource,-1);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(parent,null,""String_Node_Str"",(GuidanceResponse)resource,-1);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(parent,null,""String_Node_Str"",(HealthcareService)resource,-1);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(parent,null,""String_Node_Str"",(ImagingStudy)resource,-1);
 else   if (resource instanceof Immunization)   composeImmunization(parent,null,""String_Node_Str"",(Immunization)resource,-1);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(parent,null,""String_Node_Str"",(ImmunizationEvaluation)resource,-1);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(parent,null,""String_Node_Str"",(ImmunizationRecommendation)resource,-1);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(parent,null,""String_Node_Str"",(ImplementationGuide)resource,-1);
 else   if (resource instanceof ImplementationGuideInput)   composeImplementationGuideInput(parent,null,""String_Node_Str"",(ImplementationGuideInput)resource,-1);
 else   if (resource instanceof ImplementationGuideOutput)   composeImplementationGuideOutput(parent,null,""String_Node_Str"",(ImplementationGuideOutput)resource,-1);
 else   if (resource instanceof Invoice)   composeInvoice(parent,null,""String_Node_Str"",(Invoice)resource,-1);
 else   if (resource instanceof ItemInstance)   composeItemInstance(parent,null,""String_Node_Str"",(ItemInstance)resource,-1);
 else   if (resource instanceof Library)   composeLibrary(parent,null,""String_Node_Str"",(Library)resource,-1);
 else   if (resource instanceof Linkage)   composeLinkage(parent,null,""String_Node_Str"",(Linkage)resource,-1);
 else   if (resource instanceof ListResource)   composeListResource(parent,null,""String_Node_Str"",(ListResource)resource,-1);
 else   if (resource instanceof Location)   composeLocation(parent,null,""String_Node_Str"",(Location)resource,-1);
 else   if (resource instanceof Measure)   composeMeasure(parent,null,""String_Node_Str"",(Measure)resource,-1);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(parent,null,""String_Node_Str"",(MeasureReport)resource,-1);
 else   if (resource instanceof Media)   composeMedia(parent,null,""String_Node_Str"",(Media)resource,-1);
 else   if (resource instanceof Medication)   composeMedication(parent,null,""String_Node_Str"",(Medication)resource,-1);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(parent,null,""String_Node_Str"",(MedicationAdministration)resource,-1);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(parent,null,""String_Node_Str"",(MedicationDispense)resource,-1);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(parent,null,""String_Node_Str"",(MedicationRequest)resource,-1);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(parent,null,""String_Node_Str"",(MedicationStatement)resource,-1);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(parent,null,""String_Node_Str"",(MedicinalProduct)resource,-1);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(parent,null,""String_Node_Str"",(MedicinalProductAuthorization)resource,-1);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(parent,null,""String_Node_Str"",(MedicinalProductClinicals)resource,-1);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(parent,null,""String_Node_Str"",(MedicinalProductDeviceSpec)resource,-1);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(parent,null,""String_Node_Str"",(MedicinalProductIngredient)resource,-1);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(parent,null,""String_Node_Str"",(MedicinalProductPackaged)resource,-1);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(parent,null,""String_Node_Str"",(MedicinalProductPharmaceutical)resource,-1);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(parent,null,""String_Node_Str"",(MessageDefinition)resource,-1);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(parent,null,""String_Node_Str"",(MessageHeader)resource,-1);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(parent,null,""String_Node_Str"",(NamingSystem)resource,-1);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(parent,null,""String_Node_Str"",(NutritionOrder)resource,-1);
 else   if (resource instanceof Observation)   composeObservation(parent,null,""String_Node_Str"",(Observation)resource,-1);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(parent,null,""String_Node_Str"",(ObservationDefinition)resource,-1);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(parent,null,""String_Node_Str"",(OccupationalData)resource,-1);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(parent,null,""String_Node_Str"",(OperationDefinition)resource,-1);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(parent,null,""String_Node_Str"",(OperationOutcome)resource,-1);
 else   if (resource instanceof Organization)   composeOrganization(parent,null,""String_Node_Str"",(Organization)resource,-1);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(parent,null,""String_Node_Str"",(OrganizationRole)resource,-1);
 else   if (resource instanceof Patient)   composePatient(parent,null,""String_Node_Str"",(Patient)resource,-1);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(parent,null,""String_Node_Str"",(PaymentNotice)resource,-1);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(parent,null,""String_Node_Str"",(PaymentReconciliation)resource,-1);
 else   if (resource instanceof Person)   composePerson(parent,null,""String_Node_Str"",(Person)resource,-1);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(parent,null,""String_Node_Str"",(PlanDefinition)resource,-1);
 else   if (resource instanceof Practitioner)   composePractitioner(parent,null,""String_Node_Str"",(Practitioner)resource,-1);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(parent,null,""String_Node_Str"",(PractitionerRole)resource,-1);
 else   if (resource instanceof Procedure)   composeProcedure(parent,null,""String_Node_Str"",(Procedure)resource,-1);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(parent,null,""String_Node_Str"",(ProcessRequest)resource,-1);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(parent,null,""String_Node_Str"",(ProcessResponse)resource,-1);
 else   if (resource instanceof ProductPlan)   composeProductPlan(parent,null,""String_Node_Str"",(ProductPlan)resource,-1);
 else   if (resource instanceof Provenance)   composeProvenance(parent,null,""String_Node_Str"",(Provenance)resource,-1);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(parent,null,""String_Node_Str"",(Questionnaire)resource,-1);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(parent,null,""String_Node_Str"",(QuestionnaireResponse)resource,-1);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(parent,null,""String_Node_Str"",(RelatedPerson)resource,-1);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(parent,null,""String_Node_Str"",(RequestGroup)resource,-1);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(parent,null,""String_Node_Str"",(ResearchStudy)resource,-1);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(parent,null,""String_Node_Str"",(ResearchSubject)resource,-1);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(parent,null,""String_Node_Str"",(RiskAssessment)resource,-1);
 else   if (resource instanceof Schedule)   composeSchedule(parent,null,""String_Node_Str"",(Schedule)resource,-1);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(parent,null,""String_Node_Str"",(SearchParameter)resource,-1);
 else   if (resource instanceof Sequence)   composeSequence(parent,null,""String_Node_Str"",(Sequence)resource,-1);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(parent,null,""String_Node_Str"",(ServiceRequest)resource,-1);
 else   if (resource instanceof Slot)   composeSlot(parent,null,""String_Node_Str"",(Slot)resource,-1);
 else   if (resource instanceof Specimen)   composeSpecimen(parent,null,""String_Node_Str"",(Specimen)resource,-1);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(parent,null,""String_Node_Str"",(SpecimenDefinition)resource,-1);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(parent,null,""String_Node_Str"",(StructureDefinition)resource,-1);
 else   if (resource instanceof StructureMap)   composeStructureMap(parent,null,""String_Node_Str"",(StructureMap)resource,-1);
 else   if (resource instanceof Subscription)   composeSubscription(parent,null,""String_Node_Str"",(Subscription)resource,-1);
 else   if (resource instanceof Substance)   composeSubstance(parent,null,""String_Node_Str"",(Substance)resource,-1);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(parent,null,""String_Node_Str"",(SubstancePolymer)resource,-1);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(parent,null,""String_Node_Str"",(SubstanceReferenceInformation)resource,-1);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(parent,null,""String_Node_Str"",(SubstanceSpecification)resource,-1);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(parent,null,""String_Node_Str"",(SupplyDelivery)resource,-1);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(parent,null,""String_Node_Str"",(SupplyRequest)resource,-1);
 else   if (resource instanceof Task)   composeTask(parent,null,""String_Node_Str"",(Task)resource,-1);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(parent,null,""String_Node_Str"",(TerminologyCapabilities)resource,-1);
 else   if (resource instanceof TestReport)   composeTestReport(parent,null,""String_Node_Str"",(TestReport)resource,-1);
 else   if (resource instanceof TestScript)   composeTestScript(parent,null,""String_Node_Str"",(TestScript)resource,-1);
 else   if (resource instanceof UserSession)   composeUserSession(parent,null,""String_Node_Str"",(UserSession)resource,-1);
 else   if (resource instanceof ValueSet)   composeValueSet(parent,null,""String_Node_Str"",(ValueSet)resource,-1);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(parent,null,""String_Node_Str"",(VerificationResult)resource,-1);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(parent,null,""String_Node_Str"",(VisionPrescription)resource,-1);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Complex parent,Resource resource){
  if (resource instanceof Parameters)   composeParameters(parent,null,""String_Node_Str"",(Parameters)resource,-1);
 else   if (resource instanceof Account)   composeAccount(parent,null,""String_Node_Str"",(Account)resource,-1);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(parent,null,""String_Node_Str"",(ActivityDefinition)resource,-1);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(parent,null,""String_Node_Str"",(AdverseEvent)resource,-1);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(parent,null,""String_Node_Str"",(AllergyIntolerance)resource,-1);
 else   if (resource instanceof Appointment)   composeAppointment(parent,null,""String_Node_Str"",(Appointment)resource,-1);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(parent,null,""String_Node_Str"",(AppointmentResponse)resource,-1);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(parent,null,""String_Node_Str"",(AuditEvent)resource,-1);
 else   if (resource instanceof Basic)   composeBasic(parent,null,""String_Node_Str"",(Basic)resource,-1);
 else   if (resource instanceof Binary)   composeBinary(parent,null,""String_Node_Str"",(Binary)resource,-1);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(parent,null,""String_Node_Str"",(BiologicallyDerivedProduct)resource,-1);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(parent,null,""String_Node_Str"",(BodyStructure)resource,-1);
 else   if (resource instanceof Bundle)   composeBundle(parent,null,""String_Node_Str"",(Bundle)resource,-1);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(parent,null,""String_Node_Str"",(CapabilityStatement)resource,-1);
 else   if (resource instanceof CarePlan)   composeCarePlan(parent,null,""String_Node_Str"",(CarePlan)resource,-1);
 else   if (resource instanceof CareTeam)   composeCareTeam(parent,null,""String_Node_Str"",(CareTeam)resource,-1);
 else   if (resource instanceof ChargeItem)   composeChargeItem(parent,null,""String_Node_Str"",(ChargeItem)resource,-1);
 else   if (resource instanceof Claim)   composeClaim(parent,null,""String_Node_Str"",(Claim)resource,-1);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(parent,null,""String_Node_Str"",(ClaimResponse)resource,-1);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(parent,null,""String_Node_Str"",(ClinicalImpression)resource,-1);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(parent,null,""String_Node_Str"",(CodeSystem)resource,-1);
 else   if (resource instanceof Communication)   composeCommunication(parent,null,""String_Node_Str"",(Communication)resource,-1);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(parent,null,""String_Node_Str"",(CommunicationRequest)resource,-1);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(parent,null,""String_Node_Str"",(CompartmentDefinition)resource,-1);
 else   if (resource instanceof Composition)   composeComposition(parent,null,""String_Node_Str"",(Composition)resource,-1);
 else   if (resource instanceof ConceptMap)   composeConceptMap(parent,null,""String_Node_Str"",(ConceptMap)resource,-1);
 else   if (resource instanceof Condition)   composeCondition(parent,null,""String_Node_Str"",(Condition)resource,-1);
 else   if (resource instanceof Consent)   composeConsent(parent,null,""String_Node_Str"",(Consent)resource,-1);
 else   if (resource instanceof Contract)   composeContract(parent,null,""String_Node_Str"",(Contract)resource,-1);
 else   if (resource instanceof Coverage)   composeCoverage(parent,null,""String_Node_Str"",(Coverage)resource,-1);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(parent,null,""String_Node_Str"",(DetectedIssue)resource,-1);
 else   if (resource instanceof Device)   composeDevice(parent,null,""String_Node_Str"",(Device)resource,-1);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(parent,null,""String_Node_Str"",(DeviceComponent)resource,-1);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(parent,null,""String_Node_Str"",(DeviceMetric)resource,-1);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(parent,null,""String_Node_Str"",(DeviceRequest)resource,-1);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(parent,null,""String_Node_Str"",(DeviceUseStatement)resource,-1);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(parent,null,""String_Node_Str"",(DiagnosticReport)resource,-1);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(parent,null,""String_Node_Str"",(DocumentManifest)resource,-1);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(parent,null,""String_Node_Str"",(DocumentReference)resource,-1);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(parent,null,""String_Node_Str"",(EligibilityRequest)resource,-1);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(parent,null,""String_Node_Str"",(EligibilityResponse)resource,-1);
 else   if (resource instanceof Encounter)   composeEncounter(parent,null,""String_Node_Str"",(Encounter)resource,-1);
 else   if (resource instanceof Endpoint)   composeEndpoint(parent,null,""String_Node_Str"",(Endpoint)resource,-1);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(parent,null,""String_Node_Str"",(EnrollmentRequest)resource,-1);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(parent,null,""String_Node_Str"",(EnrollmentResponse)resource,-1);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(parent,null,""String_Node_Str"",(EntryDefinition)resource,-1);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(parent,null,""String_Node_Str"",(EpisodeOfCare)resource,-1);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(parent,null,""String_Node_Str"",(EventDefinition)resource,-1);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(parent,null,""String_Node_Str"",(ExampleScenario)resource,-1);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(parent,null,""String_Node_Str"",(ExpansionProfile)resource,-1);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(parent,null,""String_Node_Str"",(ExplanationOfBenefit)resource,-1);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(parent,null,""String_Node_Str"",(FamilyMemberHistory)resource,-1);
 else   if (resource instanceof Flag)   composeFlag(parent,null,""String_Node_Str"",(Flag)resource,-1);
 else   if (resource instanceof Goal)   composeGoal(parent,null,""String_Node_Str"",(Goal)resource,-1);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(parent,null,""String_Node_Str"",(GraphDefinition)resource,-1);
 else   if (resource instanceof Group)   composeGroup(parent,null,""String_Node_Str"",(Group)resource,-1);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(parent,null,""String_Node_Str"",(GuidanceResponse)resource,-1);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(parent,null,""String_Node_Str"",(HealthcareService)resource,-1);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(parent,null,""String_Node_Str"",(ImagingStudy)resource,-1);
 else   if (resource instanceof Immunization)   composeImmunization(parent,null,""String_Node_Str"",(Immunization)resource,-1);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(parent,null,""String_Node_Str"",(ImmunizationEvaluation)resource,-1);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(parent,null,""String_Node_Str"",(ImmunizationRecommendation)resource,-1);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(parent,null,""String_Node_Str"",(ImplementationGuide)resource,-1);
 else   if (resource instanceof Invoice)   composeInvoice(parent,null,""String_Node_Str"",(Invoice)resource,-1);
 else   if (resource instanceof ItemInstance)   composeItemInstance(parent,null,""String_Node_Str"",(ItemInstance)resource,-1);
 else   if (resource instanceof Library)   composeLibrary(parent,null,""String_Node_Str"",(Library)resource,-1);
 else   if (resource instanceof Linkage)   composeLinkage(parent,null,""String_Node_Str"",(Linkage)resource,-1);
 else   if (resource instanceof ListResource)   composeListResource(parent,null,""String_Node_Str"",(ListResource)resource,-1);
 else   if (resource instanceof Location)   composeLocation(parent,null,""String_Node_Str"",(Location)resource,-1);
 else   if (resource instanceof Measure)   composeMeasure(parent,null,""String_Node_Str"",(Measure)resource,-1);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(parent,null,""String_Node_Str"",(MeasureReport)resource,-1);
 else   if (resource instanceof Media)   composeMedia(parent,null,""String_Node_Str"",(Media)resource,-1);
 else   if (resource instanceof Medication)   composeMedication(parent,null,""String_Node_Str"",(Medication)resource,-1);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(parent,null,""String_Node_Str"",(MedicationAdministration)resource,-1);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(parent,null,""String_Node_Str"",(MedicationDispense)resource,-1);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(parent,null,""String_Node_Str"",(MedicationRequest)resource,-1);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(parent,null,""String_Node_Str"",(MedicationStatement)resource,-1);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(parent,null,""String_Node_Str"",(MedicinalProduct)resource,-1);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(parent,null,""String_Node_Str"",(MedicinalProductAuthorization)resource,-1);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(parent,null,""String_Node_Str"",(MedicinalProductClinicals)resource,-1);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(parent,null,""String_Node_Str"",(MedicinalProductDeviceSpec)resource,-1);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(parent,null,""String_Node_Str"",(MedicinalProductIngredient)resource,-1);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(parent,null,""String_Node_Str"",(MedicinalProductPackaged)resource,-1);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(parent,null,""String_Node_Str"",(MedicinalProductPharmaceutical)resource,-1);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(parent,null,""String_Node_Str"",(MessageDefinition)resource,-1);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(parent,null,""String_Node_Str"",(MessageHeader)resource,-1);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(parent,null,""String_Node_Str"",(NamingSystem)resource,-1);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(parent,null,""String_Node_Str"",(NutritionOrder)resource,-1);
 else   if (resource instanceof Observation)   composeObservation(parent,null,""String_Node_Str"",(Observation)resource,-1);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(parent,null,""String_Node_Str"",(ObservationDefinition)resource,-1);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(parent,null,""String_Node_Str"",(OccupationalData)resource,-1);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(parent,null,""String_Node_Str"",(OperationDefinition)resource,-1);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(parent,null,""String_Node_Str"",(OperationOutcome)resource,-1);
 else   if (resource instanceof Organization)   composeOrganization(parent,null,""String_Node_Str"",(Organization)resource,-1);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(parent,null,""String_Node_Str"",(OrganizationRole)resource,-1);
 else   if (resource instanceof Patient)   composePatient(parent,null,""String_Node_Str"",(Patient)resource,-1);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(parent,null,""String_Node_Str"",(PaymentNotice)resource,-1);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(parent,null,""String_Node_Str"",(PaymentReconciliation)resource,-1);
 else   if (resource instanceof Person)   composePerson(parent,null,""String_Node_Str"",(Person)resource,-1);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(parent,null,""String_Node_Str"",(PlanDefinition)resource,-1);
 else   if (resource instanceof Practitioner)   composePractitioner(parent,null,""String_Node_Str"",(Practitioner)resource,-1);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(parent,null,""String_Node_Str"",(PractitionerRole)resource,-1);
 else   if (resource instanceof Procedure)   composeProcedure(parent,null,""String_Node_Str"",(Procedure)resource,-1);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(parent,null,""String_Node_Str"",(ProcessRequest)resource,-1);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(parent,null,""String_Node_Str"",(ProcessResponse)resource,-1);
 else   if (resource instanceof ProductPlan)   composeProductPlan(parent,null,""String_Node_Str"",(ProductPlan)resource,-1);
 else   if (resource instanceof Provenance)   composeProvenance(parent,null,""String_Node_Str"",(Provenance)resource,-1);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(parent,null,""String_Node_Str"",(Questionnaire)resource,-1);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(parent,null,""String_Node_Str"",(QuestionnaireResponse)resource,-1);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(parent,null,""String_Node_Str"",(RelatedPerson)resource,-1);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(parent,null,""String_Node_Str"",(RequestGroup)resource,-1);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(parent,null,""String_Node_Str"",(ResearchStudy)resource,-1);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(parent,null,""String_Node_Str"",(ResearchSubject)resource,-1);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(parent,null,""String_Node_Str"",(RiskAssessment)resource,-1);
 else   if (resource instanceof Schedule)   composeSchedule(parent,null,""String_Node_Str"",(Schedule)resource,-1);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(parent,null,""String_Node_Str"",(SearchParameter)resource,-1);
 else   if (resource instanceof Sequence)   composeSequence(parent,null,""String_Node_Str"",(Sequence)resource,-1);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(parent,null,""String_Node_Str"",(ServiceRequest)resource,-1);
 else   if (resource instanceof Slot)   composeSlot(parent,null,""String_Node_Str"",(Slot)resource,-1);
 else   if (resource instanceof Specimen)   composeSpecimen(parent,null,""String_Node_Str"",(Specimen)resource,-1);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(parent,null,""String_Node_Str"",(SpecimenDefinition)resource,-1);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(parent,null,""String_Node_Str"",(StructureDefinition)resource,-1);
 else   if (resource instanceof StructureMap)   composeStructureMap(parent,null,""String_Node_Str"",(StructureMap)resource,-1);
 else   if (resource instanceof Subscription)   composeSubscription(parent,null,""String_Node_Str"",(Subscription)resource,-1);
 else   if (resource instanceof Substance)   composeSubstance(parent,null,""String_Node_Str"",(Substance)resource,-1);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(parent,null,""String_Node_Str"",(SubstancePolymer)resource,-1);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(parent,null,""String_Node_Str"",(SubstanceReferenceInformation)resource,-1);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(parent,null,""String_Node_Str"",(SubstanceSpecification)resource,-1);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(parent,null,""String_Node_Str"",(SupplyDelivery)resource,-1);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(parent,null,""String_Node_Str"",(SupplyRequest)resource,-1);
 else   if (resource instanceof Task)   composeTask(parent,null,""String_Node_Str"",(Task)resource,-1);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(parent,null,""String_Node_Str"",(TerminologyCapabilities)resource,-1);
 else   if (resource instanceof TestReport)   composeTestReport(parent,null,""String_Node_Str"",(TestReport)resource,-1);
 else   if (resource instanceof TestScript)   composeTestScript(parent,null,""String_Node_Str"",(TestScript)resource,-1);
 else   if (resource instanceof UserSession)   composeUserSession(parent,null,""String_Node_Str"",(UserSession)resource,-1);
 else   if (resource instanceof ValueSet)   composeValueSet(parent,null,""String_Node_Str"",(ValueSet)resource,-1);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(parent,null,""String_Node_Str"",(VerificationResult)resource,-1);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(parent,null,""String_Node_Str"",(VisionPrescription)resource,-1);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9911576214813012
23071,"protected void composeParameterDefinition(Complex parent,String parentType,String name,ParameterDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeElement(t,""String_Node_Str"",name,element,index);
  if (element.hasNameElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasUseElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getUseElement(),-1);
  if (element.hasMinElement())   composeInteger(t,""String_Node_Str"",""String_Node_Str"",element.getMinElement(),-1);
  if (element.hasMaxElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getMaxElement(),-1);
  if (element.hasDocumentationElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDocumentationElement(),-1);
  if (element.hasTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasProfile())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getProfile(),-1);
}","protected void composeParameterDefinition(Complex parent,String parentType,String name,ParameterDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeElement(t,""String_Node_Str"",name,element,index);
  if (element.hasNameElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasUseElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getUseElement(),-1);
  if (element.hasMinElement())   composeInteger(t,""String_Node_Str"",""String_Node_Str"",element.getMinElement(),-1);
  if (element.hasMaxElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getMaxElement(),-1);
  if (element.hasDocumentationElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDocumentationElement(),-1);
  if (element.hasTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasProfileElement())   composeCanonical(t,""String_Node_Str"",""String_Node_Str"",element.getProfileElement(),-1);
}",0.9754860524091292
23072,"protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponent(Complex parent,String parentType,String name,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getVaccineCode().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getVaccineCode().get(i),i);
  if (element.hasTargetDisease())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTargetDisease(),-1);
  for (int i=0; i < element.getContraindicatedVaccineCode().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getContraindicatedVaccineCode().get(i),i);
  if (element.hasForecastStatus())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getForecastStatus(),-1);
  for (int i=0; i < element.getForecastReason().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getForecastReason().get(i),i);
  for (int i=0; i < element.getDateCriterion().size(); i++)   composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDateCriterion().get(i),i);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasSeriesElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesElement(),-1);
  if (element.hasDoseNumberElement())   composePositiveInt(t,""String_Node_Str"",""String_Node_Str"",element.getDoseNumberElement(),-1);
  if (element.hasSeriesDosesElement())   composePositiveInt(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesDosesElement(),-1);
  for (int i=0; i < element.getSupportingImmunization().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getSupportingImmunization().get(i),i);
  for (int i=0; i < element.getSupportingPatientInformation().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getSupportingPatientInformation().get(i),i);
}","protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponent(Complex parent,String parentType,String name,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getVaccineCode().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getVaccineCode().get(i),i);
  if (element.hasTargetDisease())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTargetDisease(),-1);
  for (int i=0; i < element.getContraindicatedVaccineCode().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getContraindicatedVaccineCode().get(i),i);
  if (element.hasForecastStatus())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getForecastStatus(),-1);
  for (int i=0; i < element.getForecastReason().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getForecastReason().get(i),i);
  for (int i=0; i < element.getDateCriterion().size(); i++)   composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getDateCriterion().get(i),i);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasSeriesElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesElement(),-1);
  if (element.hasDoseNumber())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getDoseNumber(),-1);
  if (element.hasSeriesDoses())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesDoses(),-1);
  for (int i=0; i < element.getSupportingImmunization().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getSupportingImmunization().get(i),i);
  for (int i=0; i < element.getSupportingPatientInformation().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getSupportingPatientInformation().get(i),i);
}",0.9764856776400171
23073,"protected void composeImmunizationEvaluation(Complex parent,String parentType,String name,ImmunizationEvaluation element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasPatient())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPatient(),-1);
  if (element.hasDateElement())   composeDateTime(t,""String_Node_Str"",""String_Node_Str"",element.getDateElement(),-1);
  if (element.hasAuthority())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getAuthority(),-1);
  for (int i=0; i < element.getTargetDisease().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTargetDisease().get(i),i);
  if (element.hasImmunizationEvent())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getImmunizationEvent(),-1);
  if (element.hasDoseStatus())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getDoseStatus(),-1);
  for (int i=0; i < element.getDoseStatusReason().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getDoseStatusReason().get(i),i);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasSeriesElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesElement(),-1);
  if (element.hasDoseNumberElement())   composePositiveInt(t,""String_Node_Str"",""String_Node_Str"",element.getDoseNumberElement(),-1);
  if (element.hasSeriesDosesElement())   composePositiveInt(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesDosesElement(),-1);
}","protected void composeImmunizationEvaluation(Complex parent,String parentType,String name,ImmunizationEvaluation element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasPatient())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPatient(),-1);
  if (element.hasDateElement())   composeDateTime(t,""String_Node_Str"",""String_Node_Str"",element.getDateElement(),-1);
  if (element.hasAuthority())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getAuthority(),-1);
  for (int i=0; i < element.getTargetDisease().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTargetDisease().get(i),i);
  if (element.hasImmunizationEvent())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getImmunizationEvent(),-1);
  if (element.hasDoseStatus())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getDoseStatus(),-1);
  for (int i=0; i < element.getDoseStatusReason().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getDoseStatusReason().get(i),i);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasSeriesElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesElement(),-1);
  if (element.hasDoseNumber())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getDoseNumber(),-1);
  if (element.hasSeriesDoses())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getSeriesDoses(),-1);
}",0.973378509196515
23074,"protected void composeDataRequirementElements(DataRequirement element) throws IOException {
  composeElementElements(element);
  if (element.hasTypeElement()) {
    composeCode(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasProfile()) {
    for (    CanonicalType e : element.getProfile())     composeCanonical(""String_Node_Str"",e);
  }
  if (element.hasMustSupport()) {
    for (    StringType e : element.getMustSupport())     composeString(""String_Node_Str"",e);
  }
  if (element.hasCodeFilter()) {
    for (    DataRequirement.DataRequirementCodeFilterComponent e : element.getCodeFilter())     composeDataRequirementDataRequirementCodeFilterComponent(""String_Node_Str"",e);
  }
  if (element.hasDateFilter()) {
    for (    DataRequirement.DataRequirementDateFilterComponent e : element.getDateFilter())     composeDataRequirementDataRequirementDateFilterComponent(""String_Node_Str"",e);
  }
}","protected void composeDataRequirementElements(DataRequirement element) throws IOException {
  composeElementElements(element);
  if (element.hasTypeElement()) {
    composeCode(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasProfile()) {
    for (    CanonicalType e : element.getProfile())     composeCanonical(""String_Node_Str"",e);
  }
  if (element.hasSubject()) {
    composeType(""String_Node_Str"",element.getSubject());
  }
  if (element.hasMustSupport()) {
    for (    StringType e : element.getMustSupport())     composeString(""String_Node_Str"",e);
  }
  if (element.hasCodeFilter()) {
    for (    DataRequirement.DataRequirementCodeFilterComponent e : element.getCodeFilter())     composeDataRequirementDataRequirementCodeFilterComponent(""String_Node_Str"",e);
  }
  if (element.hasDateFilter()) {
    for (    DataRequirement.DataRequirementDateFilterComponent e : element.getDateFilter())     composeDataRequirementDataRequirementDateFilterComponent(""String_Node_Str"",e);
  }
  if (element.hasLimitElement()) {
    composePositiveInt(""String_Node_Str"",element.getLimitElement());
  }
  if (element.hasSort()) {
    for (    DataRequirement.DataRequirementSortComponent e : element.getSort())     composeDataRequirementDataRequirementSortComponent(""String_Node_Str"",e);
  }
}",0.8025247971145176
23075,"protected boolean parseStructureDefinitionContent(int eventType,XmlPullParser xpp,StructureDefinition res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setUrlElement(parseUri(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getIdentifier().add(parseIdentifier(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setVersionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setNameElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTitleElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setStatusElement(parseEnumeration(xpp,Enumerations.PublicationStatus.NULL,new Enumerations.PublicationStatusEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setExperimentalElement(parseBoolean(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDateElement(parseDateTime(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPublisherElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContact().add(parseContactDetail(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getUseContext().add(parseUsageContext(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getJurisdiction().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPurposeElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setCopyrightElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getKeyword().add(parseCoding(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setFhirVersionElement(parseId(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getMapping().add(parseStructureDefinitionStructureDefinitionMappingComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setKindElement(parseEnumeration(xpp,StructureDefinition.StructureDefinitionKind.NULL,new StructureDefinition.StructureDefinitionKindEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setAbstractElement(parseBoolean(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContext().add(parseStructureDefinitionStructureDefinitionContextComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContextInvariant().add(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setBaseDefinitionElement(parseCanonical(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDerivationElement(parseEnumeration(xpp,StructureDefinition.TypeDerivationRule.NULL,new StructureDefinition.TypeDerivationRuleEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSnapshot(parseStructureDefinitionStructureDefinitionSnapshotComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDifferential(parseStructureDefinitionStructureDefinitionDifferentialComponent(xpp,res));
  }
 else   if (!parseDomainResourceContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseStructureDefinitionContent(int eventType,XmlPullParser xpp,StructureDefinition res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setUrlElement(parseUri(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getIdentifier().add(parseIdentifier(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setVersionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setNameElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTitleElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setStatusElement(parseEnumeration(xpp,Enumerations.PublicationStatus.NULL,new Enumerations.PublicationStatusEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setExperimentalElement(parseBoolean(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDateElement(parseDateTime(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPublisherElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContact().add(parseContactDetail(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getUseContext().add(parseUsageContext(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getJurisdiction().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPurposeElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setCopyrightElement(parseMarkdown(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getKeyword().add(parseCoding(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setFhirVersionElement(parseId(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getMapping().add(parseStructureDefinitionStructureDefinitionMappingComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setKindElement(parseEnumeration(xpp,StructureDefinition.StructureDefinitionKind.NULL,new StructureDefinition.StructureDefinitionKindEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setAbstractElement(parseBoolean(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContext().add(parseStructureDefinitionStructureDefinitionContextComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContextInvariant().add(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseUri(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setBaseDefinitionElement(parseCanonical(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDerivationElement(parseEnumeration(xpp,StructureDefinition.TypeDerivationRule.NULL,new StructureDefinition.TypeDerivationRuleEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSnapshot(parseStructureDefinitionStructureDefinitionSnapshotComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDifferential(parseStructureDefinitionStructureDefinitionDifferentialComponent(xpp,res));
  }
 else   if (!parseDomainResourceContent(eventType,xpp,res))   return false;
  return true;
}",0.9992566634809388
23076,"public Base parseFragment(XmlPullParser xpp,String type) throws XmlPullParserException, IOException, FHIRFormatError {
  if (type.equals(""String_Node_Str""))   return parseExtension(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNarrative(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeta(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAddress(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContributor(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAttachment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCount(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDataRequirement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDosage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMoney(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseHumanName(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContactPoint(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseIdentifier(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCoding(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSampledData(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRatio(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDistance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAge(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseReference(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTriggerDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuantity(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePeriod(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDuration(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRange(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRelatedArtifact(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAnnotation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContactDetail(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUsageContext(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSignature(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTiming(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCodeableConcept(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseParameterDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSimpleQuantity(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseParameters(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAccount(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseActivityDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAdverseEvent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAllergyIntolerance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAppointment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAppointmentResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAuditEvent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBasic(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBinary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBodyStructure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBundle(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCapabilityStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCarePlan(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCareTeam(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseChargeItem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClaim(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClaimResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClinicalImpression(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCodeSystem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCommunication(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCommunicationRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCompartmentDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseComposition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseConceptMap(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCondition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseConsent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContract(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCoverage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDetectedIssue(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDevice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceComponent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceMetric(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceUseStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDiagnosticReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDocumentManifest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDocumentReference(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEligibilityRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEligibilityResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEncounter(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEndpoint(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEnrollmentRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEnrollmentResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEntryDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEpisodeOfCare(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEventDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExampleScenario(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExpansionProfile(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExplanationOfBenefit(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseFamilyMemberHistory(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseFlag(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGoal(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGraphDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGroup(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGuidanceResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseHealthcareService(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImagingStudy(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunizationEvaluation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunizationRecommendation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImplementationGuide(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImplementationGuideInput(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImplementationGuideOutput(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInvoice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseItemInstance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLibrary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLinkage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseListResource(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLocation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeasure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeasureReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedia(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedication(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationAdministration(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationDispense(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProduct(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductClinicals(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductIngredient(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductPackaged(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMessageDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMessageHeader(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNamingSystem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNutritionOrder(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseObservation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseObservationDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOccupationalData(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOperationDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOperationOutcome(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOrganization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOrganizationRole(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePatient(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePaymentNotice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePaymentReconciliation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePerson(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePlanDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePractitioner(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePractitionerRole(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcedure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcessRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcessResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProductPlan(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProvenance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuestionnaire(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuestionnaireResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRelatedPerson(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRequestGroup(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseResearchStudy(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseResearchSubject(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRiskAssessment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSchedule(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSearchParameter(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSequence(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseServiceRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSlot(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSpecimen(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSpecimenDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseStructureDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseStructureMap(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubscription(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstancePolymer(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstanceSpecification(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSupplyDelivery(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSupplyRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTask(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTerminologyCapabilities(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTestReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTestScript(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUserSession(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseValueSet(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseVerificationResult(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseVisionPrescription(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDate(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDateTime(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCode(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseString(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInteger(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOid(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCanonical(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUri(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUuid(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUrl(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInstant(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBoolean(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBase64Binary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUnsignedInt(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMarkdown(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTime(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseId(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePositiveInt(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDecimal(xpp);
  throw new FHIRFormatError(""String_Node_Str"" + type);
}","public Base parseFragment(XmlPullParser xpp,String type) throws XmlPullParserException, IOException, FHIRFormatError {
  if (type.equals(""String_Node_Str""))   return parseExtension(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNarrative(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeta(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAddress(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContributor(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAttachment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCount(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDataRequirement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDosage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMoney(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseHumanName(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContactPoint(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseIdentifier(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCoding(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSampledData(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRatio(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDistance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAge(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseReference(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTriggerDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuantity(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePeriod(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDuration(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRange(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRelatedArtifact(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAnnotation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContactDetail(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUsageContext(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSignature(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTiming(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCodeableConcept(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseParameterDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSimpleQuantity(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseParameters(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAccount(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseActivityDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAdverseEvent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAllergyIntolerance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAppointment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAppointmentResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseAuditEvent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBasic(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBinary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBodyStructure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBundle(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCapabilityStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCarePlan(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCareTeam(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseChargeItem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClaim(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClaimResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseClinicalImpression(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCodeSystem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCommunication(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCommunicationRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCompartmentDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseComposition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseConceptMap(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCondition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseConsent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseContract(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCoverage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDetectedIssue(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDevice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceComponent(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceMetric(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDeviceUseStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDiagnosticReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDocumentManifest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDocumentReference(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEligibilityRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEligibilityResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEncounter(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEndpoint(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEnrollmentRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEnrollmentResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEntryDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEpisodeOfCare(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseEventDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExampleScenario(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExpansionProfile(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseExplanationOfBenefit(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseFamilyMemberHistory(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseFlag(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGoal(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGraphDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGroup(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseGuidanceResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseHealthcareService(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImagingStudy(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunizationEvaluation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImmunizationRecommendation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseImplementationGuide(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInvoice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseItemInstance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLibrary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLinkage(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseListResource(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseLocation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeasure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMeasureReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedia(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedication(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationAdministration(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationDispense(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicationStatement(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProduct(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductClinicals(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductIngredient(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductPackaged(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMessageDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMessageHeader(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNamingSystem(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseNutritionOrder(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseObservation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseObservationDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOccupationalData(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOperationDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOperationOutcome(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOrganization(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOrganizationRole(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePatient(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePaymentNotice(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePaymentReconciliation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePerson(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePlanDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePractitioner(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePractitionerRole(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcedure(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcessRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProcessResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProductPlan(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseProvenance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuestionnaire(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseQuestionnaireResponse(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRelatedPerson(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRequestGroup(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseResearchStudy(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseResearchSubject(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseRiskAssessment(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSchedule(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSearchParameter(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSequence(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseServiceRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSlot(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSpecimen(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSpecimenDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseStructureDefinition(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseStructureMap(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubscription(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstance(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstancePolymer(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSubstanceSpecification(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSupplyDelivery(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseSupplyRequest(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTask(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTerminologyCapabilities(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTestReport(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTestScript(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUserSession(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseValueSet(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseVerificationResult(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseVisionPrescription(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDate(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDateTime(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCode(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseString(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInteger(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseOid(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseCanonical(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUri(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUuid(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUrl(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseInstant(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBoolean(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseBase64Binary(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseUnsignedInt(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseMarkdown(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseTime(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseId(xpp);
 else   if (type.equals(""String_Node_Str""))   return parsePositiveInt(xpp);
 else   if (type.equals(""String_Node_Str""))   return parseDecimal(xpp);
  throw new FHIRFormatError(""String_Node_Str"" + type);
}",0.9940171797185736
23077,"protected boolean parseImmunizationRecommendationImmunizationRecommendationRecommendationComponentContent(int eventType,XmlPullParser xpp,ImmunizationRecommendation owner,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getVaccineCode().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTargetDisease(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContraindicatedVaccineCode().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setForecastStatus(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getForecastReason().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDateCriterion().add(parseImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(xpp,owner));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDoseNumberElement(parsePositiveInt(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesDosesElement(parsePositiveInt(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getSupportingImmunization().add(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getSupportingPatientInformation().add(parseReference(xpp));
  }
 else   if (!parseBackboneElementContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseImmunizationRecommendationImmunizationRecommendationRecommendationComponentContent(int eventType,XmlPullParser xpp,ImmunizationRecommendation owner,ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getVaccineCode().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTargetDisease(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getContraindicatedVaccineCode().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setForecastStatus(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getForecastReason().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDateCriterion().add(parseImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(xpp,owner));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && nameIsTypeName(xpp,""String_Node_Str"")) {
    res.setDoseNumber(parseType(""String_Node_Str"",xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && nameIsTypeName(xpp,""String_Node_Str"")) {
    res.setSeriesDoses(parseType(""String_Node_Str"",xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getSupportingImmunization().add(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getSupportingPatientInformation().add(parseReference(xpp));
  }
 else   if (!parseBackboneElementContent(eventType,xpp,res))   return false;
  return true;
}",0.9601018675721562
23078,"protected void composeResource(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(name,(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(name,(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(name,(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(name,(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(name,(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(name,(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(name,(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(name,(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(name,(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(name,(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(name,(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(name,(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof ImplementationGuideInput)   composeImplementationGuideInput(name,(ImplementationGuideInput)resource);
 else   if (resource instanceof ImplementationGuideOutput)   composeImplementationGuideOutput(name,(ImplementationGuideOutput)resource);
 else   if (resource instanceof Invoice)   composeInvoice(name,(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(name,(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(name,(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(name,(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(name,(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(name,(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(name,(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(name,(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(name,(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(name,(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(name,(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(name,(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(name,(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(name,(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(name,(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(name,(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(name,(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(name,(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(name,(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(name,(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(name,(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(name,(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(name,(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(name,(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(name,(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(name,(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(name,(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(name,(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","protected void composeResource(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(name,(ActivityDefinition)resource);
 else   if (resource instanceof AdverseEvent)   composeAdverseEvent(name,(AdverseEvent)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BiologicallyDerivedProduct)   composeBiologicallyDerivedProduct(name,(BiologicallyDerivedProduct)resource);
 else   if (resource instanceof BodyStructure)   composeBodyStructure(name,(BodyStructure)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CapabilityStatement)   composeCapabilityStatement(name,(CapabilityStatement)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof ChargeItem)   composeChargeItem(name,(ChargeItem)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceRequest)   composeDeviceRequest(name,(DeviceRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EntryDefinition)   composeEntryDefinition(name,(EntryDefinition)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof EventDefinition)   composeEventDefinition(name,(EventDefinition)resource);
 else   if (resource instanceof ExampleScenario)   composeExampleScenario(name,(ExampleScenario)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof GraphDefinition)   composeGraphDefinition(name,(GraphDefinition)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationEvaluation)   composeImmunizationEvaluation(name,(ImmunizationEvaluation)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof Invoice)   composeInvoice(name,(Invoice)resource);
 else   if (resource instanceof ItemInstance)   composeItemInstance(name,(ItemInstance)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationRequest)   composeMedicationRequest(name,(MedicationRequest)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MedicinalProduct)   composeMedicinalProduct(name,(MedicinalProduct)resource);
 else   if (resource instanceof MedicinalProductAuthorization)   composeMedicinalProductAuthorization(name,(MedicinalProductAuthorization)resource);
 else   if (resource instanceof MedicinalProductClinicals)   composeMedicinalProductClinicals(name,(MedicinalProductClinicals)resource);
 else   if (resource instanceof MedicinalProductDeviceSpec)   composeMedicinalProductDeviceSpec(name,(MedicinalProductDeviceSpec)resource);
 else   if (resource instanceof MedicinalProductIngredient)   composeMedicinalProductIngredient(name,(MedicinalProductIngredient)resource);
 else   if (resource instanceof MedicinalProductPackaged)   composeMedicinalProductPackaged(name,(MedicinalProductPackaged)resource);
 else   if (resource instanceof MedicinalProductPharmaceutical)   composeMedicinalProductPharmaceutical(name,(MedicinalProductPharmaceutical)resource);
 else   if (resource instanceof MessageDefinition)   composeMessageDefinition(name,(MessageDefinition)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof ObservationDefinition)   composeObservationDefinition(name,(ObservationDefinition)resource);
 else   if (resource instanceof OccupationalData)   composeOccupationalData(name,(OccupationalData)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof OrganizationRole)   composeOrganizationRole(name,(OrganizationRole)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof PlanDefinition)   composePlanDefinition(name,(PlanDefinition)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof ProductPlan)   composeProductPlan(name,(ProductPlan)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RequestGroup)   composeRequestGroup(name,(RequestGroup)resource);
 else   if (resource instanceof ResearchStudy)   composeResearchStudy(name,(ResearchStudy)resource);
 else   if (resource instanceof ResearchSubject)   composeResearchSubject(name,(ResearchSubject)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof ServiceRequest)   composeServiceRequest(name,(ServiceRequest)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof SpecimenDefinition)   composeSpecimenDefinition(name,(SpecimenDefinition)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SubstancePolymer)   composeSubstancePolymer(name,(SubstancePolymer)resource);
 else   if (resource instanceof SubstanceReferenceInformation)   composeSubstanceReferenceInformation(name,(SubstanceReferenceInformation)resource);
 else   if (resource instanceof SubstanceSpecification)   composeSubstanceSpecification(name,(SubstanceSpecification)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TerminologyCapabilities)   composeTerminologyCapabilities(name,(TerminologyCapabilities)resource);
 else   if (resource instanceof TestReport)   composeTestReport(name,(TestReport)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof UserSession)   composeUserSession(name,(UserSession)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VerificationResult)   composeVerificationResult(name,(VerificationResult)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9907732116713766
23079,"@Override protected Resource parseResource(XmlPullParser xpp) throws XmlPullParserException, IOException, FHIRFormatError {
  if (xpp.getName().equals(""String_Node_Str""))   return parseParameters(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAccount(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseActivityDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAdverseEvent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAllergyIntolerance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAppointment(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAppointmentResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAuditEvent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBasic(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBinary(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBodyStructure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBundle(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCapabilityStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCarePlan(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCareTeam(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseChargeItem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClaim(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClaimResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClinicalImpression(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCodeSystem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCommunication(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCommunicationRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCompartmentDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseComposition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseConceptMap(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCondition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseConsent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseContract(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCoverage(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDetectedIssue(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDevice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceComponent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceMetric(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceUseStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDiagnosticReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDocumentManifest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDocumentReference(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEligibilityRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEligibilityResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEncounter(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEndpoint(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEnrollmentRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEnrollmentResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEntryDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEpisodeOfCare(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEventDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExampleScenario(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExpansionProfile(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExplanationOfBenefit(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseFamilyMemberHistory(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseFlag(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGoal(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGraphDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGroup(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGuidanceResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseHealthcareService(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImagingStudy(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunizationEvaluation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunizationRecommendation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImplementationGuide(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImplementationGuideInput(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImplementationGuideOutput(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseInvoice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseItemInstance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLibrary(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLinkage(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseListResource(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLocation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMeasure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMeasureReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedia(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedication(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationAdministration(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationDispense(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProduct(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductClinicals(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductIngredient(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductPackaged(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMessageDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMessageHeader(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseNamingSystem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseNutritionOrder(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseObservation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseObservationDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOccupationalData(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOperationDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOperationOutcome(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOrganization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOrganizationRole(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePatient(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePaymentNotice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePaymentReconciliation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePerson(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePlanDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePractitioner(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePractitionerRole(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcedure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcessRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcessResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProductPlan(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProvenance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseQuestionnaire(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseQuestionnaireResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRelatedPerson(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRequestGroup(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseResearchStudy(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseResearchSubject(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRiskAssessment(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSchedule(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSearchParameter(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSequence(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseServiceRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSlot(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSpecimen(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSpecimenDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseStructureDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseStructureMap(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubscription(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstancePolymer(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstanceSpecification(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSupplyDelivery(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSupplyRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTask(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTerminologyCapabilities(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTestReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTestScript(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseUserSession(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseValueSet(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseVerificationResult(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseVisionPrescription(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBinary(xpp);
  throw new FHIRFormatError(""String_Node_Str"" + xpp.getName() + ""String_Node_Str"");
}","@Override protected Resource parseResource(XmlPullParser xpp) throws XmlPullParserException, IOException, FHIRFormatError {
  if (xpp.getName().equals(""String_Node_Str""))   return parseParameters(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAccount(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseActivityDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAdverseEvent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAllergyIntolerance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAppointment(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAppointmentResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseAuditEvent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBasic(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBinary(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBiologicallyDerivedProduct(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBodyStructure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBundle(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCapabilityStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCarePlan(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCareTeam(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseChargeItem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClaim(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClaimResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseClinicalImpression(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCodeSystem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCommunication(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCommunicationRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCompartmentDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseComposition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseConceptMap(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCondition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseConsent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseContract(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseCoverage(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDetectedIssue(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDevice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceComponent(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceMetric(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDeviceUseStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDiagnosticReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDocumentManifest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseDocumentReference(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEligibilityRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEligibilityResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEncounter(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEndpoint(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEnrollmentRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEnrollmentResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEntryDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEpisodeOfCare(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseEventDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExampleScenario(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExpansionProfile(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseExplanationOfBenefit(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseFamilyMemberHistory(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseFlag(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGoal(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGraphDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGroup(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseGuidanceResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseHealthcareService(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImagingStudy(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunizationEvaluation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImmunizationRecommendation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseImplementationGuide(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseInvoice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseItemInstance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLibrary(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLinkage(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseListResource(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseLocation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMeasure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMeasureReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedia(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedication(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationAdministration(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationDispense(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicationStatement(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProduct(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductAuthorization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductClinicals(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductDeviceSpec(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductIngredient(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductPackaged(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMedicinalProductPharmaceutical(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMessageDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseMessageHeader(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseNamingSystem(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseNutritionOrder(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseObservation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseObservationDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOccupationalData(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOperationDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOperationOutcome(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOrganization(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseOrganizationRole(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePatient(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePaymentNotice(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePaymentReconciliation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePerson(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePlanDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePractitioner(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parsePractitionerRole(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcedure(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcessRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProcessResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProductPlan(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseProvenance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseQuestionnaire(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseQuestionnaireResponse(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRelatedPerson(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRequestGroup(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseResearchStudy(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseResearchSubject(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseRiskAssessment(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSchedule(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSearchParameter(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSequence(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseServiceRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSlot(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSpecimen(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSpecimenDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseStructureDefinition(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseStructureMap(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubscription(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstance(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstancePolymer(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstanceReferenceInformation(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSubstanceSpecification(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSupplyDelivery(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseSupplyRequest(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTask(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTerminologyCapabilities(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTestReport(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseTestScript(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseUserSession(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseValueSet(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseVerificationResult(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseVisionPrescription(xpp);
 else   if (xpp.getName().equals(""String_Node_Str""))   return parseBinary(xpp);
  throw new FHIRFormatError(""String_Node_Str"" + xpp.getName() + ""String_Node_Str"");
}",0.9921285012186838
23080,"protected void composeParameterDefinitionElements(ParameterDefinition element) throws IOException {
  composeElementElements(element);
  if (element.hasNameElement()) {
    composeCode(""String_Node_Str"",element.getNameElement());
  }
  if (element.hasUseElement())   composeEnumeration(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory());
  if (element.hasMinElement()) {
    composeInteger(""String_Node_Str"",element.getMinElement());
  }
  if (element.hasMaxElement()) {
    composeString(""String_Node_Str"",element.getMaxElement());
  }
  if (element.hasDocumentationElement()) {
    composeString(""String_Node_Str"",element.getDocumentationElement());
  }
  if (element.hasTypeElement()) {
    composeCode(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasProfile()) {
    composeReference(""String_Node_Str"",element.getProfile());
  }
}","protected void composeParameterDefinitionElements(ParameterDefinition element) throws IOException {
  composeElementElements(element);
  if (element.hasNameElement()) {
    composeCode(""String_Node_Str"",element.getNameElement());
  }
  if (element.hasUseElement())   composeEnumeration(""String_Node_Str"",element.getUseElement(),new ParameterDefinition.ParameterUseEnumFactory());
  if (element.hasMinElement()) {
    composeInteger(""String_Node_Str"",element.getMinElement());
  }
  if (element.hasMaxElement()) {
    composeString(""String_Node_Str"",element.getMaxElement());
  }
  if (element.hasDocumentationElement()) {
    composeString(""String_Node_Str"",element.getDocumentationElement());
  }
  if (element.hasTypeElement()) {
    composeCode(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasProfileElement()) {
    composeCanonical(""String_Node_Str"",element.getProfileElement());
  }
}",0.9822419533851277
23081,"protected void composeStructureDefinitionElements(StructureDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUri(""String_Node_Str"",element.getUrlElement());
  }
  if (element.hasIdentifier()) {
    for (    Identifier e : element.getIdentifier())     composeIdentifier(""String_Node_Str"",e);
  }
  if (element.hasVersionElement()) {
    composeString(""String_Node_Str"",element.getVersionElement());
  }
  if (element.hasNameElement()) {
    composeString(""String_Node_Str"",element.getNameElement());
  }
  if (element.hasTitleElement()) {
    composeString(""String_Node_Str"",element.getTitleElement());
  }
  if (element.hasStatusElement())   composeEnumeration(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory());
  if (element.hasExperimentalElement()) {
    composeBoolean(""String_Node_Str"",element.getExperimentalElement());
  }
  if (element.hasDateElement()) {
    composeDateTime(""String_Node_Str"",element.getDateElement());
  }
  if (element.hasPublisherElement()) {
    composeString(""String_Node_Str"",element.getPublisherElement());
  }
  if (element.hasContact()) {
    for (    ContactDetail e : element.getContact())     composeContactDetail(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeMarkdown(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasUseContext()) {
    for (    UsageContext e : element.getUseContext())     composeUsageContext(""String_Node_Str"",e);
  }
  if (element.hasJurisdiction()) {
    for (    CodeableConcept e : element.getJurisdiction())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasPurposeElement()) {
    composeMarkdown(""String_Node_Str"",element.getPurposeElement());
  }
  if (element.hasCopyrightElement()) {
    composeMarkdown(""String_Node_Str"",element.getCopyrightElement());
  }
  if (element.hasKeyword()) {
    for (    Coding e : element.getKeyword())     composeCoding(""String_Node_Str"",e);
  }
  if (element.hasFhirVersionElement()) {
    composeId(""String_Node_Str"",element.getFhirVersionElement());
  }
  if (element.hasMapping()) {
    for (    StructureDefinition.StructureDefinitionMappingComponent e : element.getMapping())     composeStructureDefinitionStructureDefinitionMappingComponent(""String_Node_Str"",e);
  }
  if (element.hasKindElement())   composeEnumeration(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory());
  if (element.hasAbstractElement()) {
    composeBoolean(""String_Node_Str"",element.getAbstractElement());
  }
  if (element.hasContext()) {
    for (    StructureDefinition.StructureDefinitionContextComponent e : element.getContext())     composeStructureDefinitionStructureDefinitionContextComponent(""String_Node_Str"",e);
  }
  if (element.hasContextInvariant()) {
    for (    StringType e : element.getContextInvariant())     composeString(""String_Node_Str"",e);
  }
  if (element.hasTypeElement()) {
    composeCode(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasBaseDefinitionElement()) {
    composeCanonical(""String_Node_Str"",element.getBaseDefinitionElement());
  }
  if (element.hasDerivationElement())   composeEnumeration(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory());
  if (element.hasSnapshot()) {
    composeStructureDefinitionStructureDefinitionSnapshotComponent(""String_Node_Str"",element.getSnapshot());
  }
  if (element.hasDifferential()) {
    composeStructureDefinitionStructureDefinitionDifferentialComponent(""String_Node_Str"",element.getDifferential());
  }
}","protected void composeStructureDefinitionElements(StructureDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUri(""String_Node_Str"",element.getUrlElement());
  }
  if (element.hasIdentifier()) {
    for (    Identifier e : element.getIdentifier())     composeIdentifier(""String_Node_Str"",e);
  }
  if (element.hasVersionElement()) {
    composeString(""String_Node_Str"",element.getVersionElement());
  }
  if (element.hasNameElement()) {
    composeString(""String_Node_Str"",element.getNameElement());
  }
  if (element.hasTitleElement()) {
    composeString(""String_Node_Str"",element.getTitleElement());
  }
  if (element.hasStatusElement())   composeEnumeration(""String_Node_Str"",element.getStatusElement(),new Enumerations.PublicationStatusEnumFactory());
  if (element.hasExperimentalElement()) {
    composeBoolean(""String_Node_Str"",element.getExperimentalElement());
  }
  if (element.hasDateElement()) {
    composeDateTime(""String_Node_Str"",element.getDateElement());
  }
  if (element.hasPublisherElement()) {
    composeString(""String_Node_Str"",element.getPublisherElement());
  }
  if (element.hasContact()) {
    for (    ContactDetail e : element.getContact())     composeContactDetail(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeMarkdown(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasUseContext()) {
    for (    UsageContext e : element.getUseContext())     composeUsageContext(""String_Node_Str"",e);
  }
  if (element.hasJurisdiction()) {
    for (    CodeableConcept e : element.getJurisdiction())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasPurposeElement()) {
    composeMarkdown(""String_Node_Str"",element.getPurposeElement());
  }
  if (element.hasCopyrightElement()) {
    composeMarkdown(""String_Node_Str"",element.getCopyrightElement());
  }
  if (element.hasKeyword()) {
    for (    Coding e : element.getKeyword())     composeCoding(""String_Node_Str"",e);
  }
  if (element.hasFhirVersionElement()) {
    composeId(""String_Node_Str"",element.getFhirVersionElement());
  }
  if (element.hasMapping()) {
    for (    StructureDefinition.StructureDefinitionMappingComponent e : element.getMapping())     composeStructureDefinitionStructureDefinitionMappingComponent(""String_Node_Str"",e);
  }
  if (element.hasKindElement())   composeEnumeration(""String_Node_Str"",element.getKindElement(),new StructureDefinition.StructureDefinitionKindEnumFactory());
  if (element.hasAbstractElement()) {
    composeBoolean(""String_Node_Str"",element.getAbstractElement());
  }
  if (element.hasContext()) {
    for (    StructureDefinition.StructureDefinitionContextComponent e : element.getContext())     composeStructureDefinitionStructureDefinitionContextComponent(""String_Node_Str"",e);
  }
  if (element.hasContextInvariant()) {
    for (    StringType e : element.getContextInvariant())     composeString(""String_Node_Str"",e);
  }
  if (element.hasTypeElement()) {
    composeUri(""String_Node_Str"",element.getTypeElement());
  }
  if (element.hasBaseDefinitionElement()) {
    composeCanonical(""String_Node_Str"",element.getBaseDefinitionElement());
  }
  if (element.hasDerivationElement())   composeEnumeration(""String_Node_Str"",element.getDerivationElement(),new StructureDefinition.TypeDerivationRuleEnumFactory());
  if (element.hasSnapshot()) {
    composeStructureDefinitionStructureDefinitionSnapshotComponent(""String_Node_Str"",element.getSnapshot());
  }
  if (element.hasDifferential()) {
    composeStructureDefinitionStructureDefinitionDifferentialComponent(""String_Node_Str"",element.getDifferential());
  }
}",0.9990513619731672
23082,"protected boolean parseParameterDefinitionContent(int eventType,XmlPullParser xpp,ParameterDefinition res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setNameElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setUseElement(parseEnumeration(xpp,ParameterDefinition.ParameterUse.NULL,new ParameterDefinition.ParameterUseEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setMinElement(parseInteger(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setMaxElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDocumentationElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setProfile(parseReference(xpp));
  }
 else   if (!parseElementContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseParameterDefinitionContent(int eventType,XmlPullParser xpp,ParameterDefinition res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setNameElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setUseElement(parseEnumeration(xpp,ParameterDefinition.ParameterUse.NULL,new ParameterDefinition.ParameterUseEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setMinElement(parseInteger(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setMaxElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDocumentationElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setProfileElement(parseCanonical(xpp));
  }
 else   if (!parseElementContent(eventType,xpp,res))   return false;
  return true;
}",0.9178852643419572
23083,"protected CanonicalType parseCanonical(XmlPullParser xpp) throws XmlPullParserException, IOException, FHIRFormatError {
  CanonicalType res=new CanonicalType(xpp.getAttributeValue(null,""String_Node_Str""));
  parseElementAttributes(xpp,res);
  next(xpp);
  int eventType=nextNoWhitespace(xpp);
  while (eventType != XmlPullParser.END_TAG) {
    if (!parseElementContent(eventType,xpp,res))     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.setValue(parseString(xpp).primitiveValue());
    }
 else     unknownContent(xpp);
    eventType=nextNoWhitespace(xpp);
  }
  next(xpp);
  parseElementClose(res);
  return res;
}","protected CanonicalType parseCanonical(XmlPullParser xpp) throws XmlPullParserException, IOException, FHIRFormatError {
  CanonicalType res=new CanonicalType(xpp.getAttributeValue(null,""String_Node_Str""));
  parseElementAttributes(xpp,res);
  next(xpp);
  int eventType=nextNoWhitespace(xpp);
  while (eventType != XmlPullParser.END_TAG) {
    if (!parseElementContent(eventType,xpp,res))     unknownContent(xpp);
    eventType=nextNoWhitespace(xpp);
  }
  next(xpp);
  parseElementClose(res);
  return res;
}",0.8656462585034014
23084,"protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponentElements(ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element) throws IOException {
  composeBackboneElementElements(element);
  if (element.hasVaccineCode()) {
    for (    CodeableConcept e : element.getVaccineCode())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasTargetDisease()) {
    composeCodeableConcept(""String_Node_Str"",element.getTargetDisease());
  }
  if (element.hasContraindicatedVaccineCode()) {
    for (    CodeableConcept e : element.getContraindicatedVaccineCode())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasForecastStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getForecastStatus());
  }
  if (element.hasForecastReason()) {
    for (    CodeableConcept e : element.getForecastReason())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasDateCriterion()) {
    for (    ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent e : element.getDateCriterion())     composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeString(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasSeriesElement()) {
    composeString(""String_Node_Str"",element.getSeriesElement());
  }
  if (element.hasDoseNumberElement()) {
    composePositiveInt(""String_Node_Str"",element.getDoseNumberElement());
  }
  if (element.hasSeriesDosesElement()) {
    composePositiveInt(""String_Node_Str"",element.getSeriesDosesElement());
  }
  if (element.hasSupportingImmunization()) {
    for (    Reference e : element.getSupportingImmunization())     composeReference(""String_Node_Str"",e);
  }
  if (element.hasSupportingPatientInformation()) {
    for (    Reference e : element.getSupportingPatientInformation())     composeReference(""String_Node_Str"",e);
  }
}","protected void composeImmunizationRecommendationImmunizationRecommendationRecommendationComponentElements(ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent element) throws IOException {
  composeBackboneElementElements(element);
  if (element.hasVaccineCode()) {
    for (    CodeableConcept e : element.getVaccineCode())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasTargetDisease()) {
    composeCodeableConcept(""String_Node_Str"",element.getTargetDisease());
  }
  if (element.hasContraindicatedVaccineCode()) {
    for (    CodeableConcept e : element.getContraindicatedVaccineCode())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasForecastStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getForecastStatus());
  }
  if (element.hasForecastReason()) {
    for (    CodeableConcept e : element.getForecastReason())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasDateCriterion()) {
    for (    ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent e : element.getDateCriterion())     composeImmunizationRecommendationImmunizationRecommendationRecommendationDateCriterionComponent(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeString(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasSeriesElement()) {
    composeString(""String_Node_Str"",element.getSeriesElement());
  }
  if (element.hasDoseNumber()) {
    composeType(""String_Node_Str"",element.getDoseNumber());
  }
  if (element.hasSeriesDoses()) {
    composeType(""String_Node_Str"",element.getSeriesDoses());
  }
  if (element.hasSupportingImmunization()) {
    for (    Reference e : element.getSupportingImmunization())     composeReference(""String_Node_Str"",e);
  }
  if (element.hasSupportingPatientInformation()) {
    for (    Reference e : element.getSupportingPatientInformation())     composeReference(""String_Node_Str"",e);
  }
}",0.8152550767706785
23085,"protected void composeExpansionProfileExpansionProfileFixedVersionComponentElements(ExpansionProfile.ExpansionProfileFixedVersionComponent element) throws IOException {
  composeBackboneElementElements(element);
  if (element.hasSystemElement()) {
    composeCanonical(""String_Node_Str"",element.getSystemElement());
  }
  if (element.hasVersionElement()) {
    composeString(""String_Node_Str"",element.getVersionElement());
  }
  if (element.hasModeElement())   composeEnumeration(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory());
}","protected void composeExpansionProfileExpansionProfileFixedVersionComponentElements(ExpansionProfile.ExpansionProfileFixedVersionComponent element) throws IOException {
  composeBackboneElementElements(element);
  if (element.hasSystemElement()) {
    composeUri(""String_Node_Str"",element.getSystemElement());
  }
  if (element.hasVersionElement()) {
    composeString(""String_Node_Str"",element.getVersionElement());
  }
  if (element.hasModeElement())   composeEnumeration(""String_Node_Str"",element.getModeElement(),new ExpansionProfile.SystemVersionProcessingModeEnumFactory());
}",0.9897435897435898
23086,"private boolean nameIsTypeName(XmlPullParser xpp,String prefix){
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  return false;
}","private boolean nameIsTypeName(XmlPullParser xpp,String prefix){
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  if (xpp.getName().equals(prefix + ""String_Node_Str""))   return true;
  return false;
}",0.9947411302866456
23087,"protected boolean parseExpansionProfileExpansionProfileFixedVersionComponentContent(int eventType,XmlPullParser xpp,ExpansionProfile owner,ExpansionProfile.ExpansionProfileFixedVersionComponent res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSystemElement(parseCanonical(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setVersionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setModeElement(parseEnumeration(xpp,ExpansionProfile.SystemVersionProcessingMode.NULL,new ExpansionProfile.SystemVersionProcessingModeEnumFactory()));
  }
 else   if (!parseBackboneElementContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseExpansionProfileExpansionProfileFixedVersionComponentContent(int eventType,XmlPullParser xpp,ExpansionProfile owner,ExpansionProfile.ExpansionProfileFixedVersionComponent res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSystemElement(parseUri(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setVersionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setModeElement(parseEnumeration(xpp,ExpansionProfile.SystemVersionProcessingMode.NULL,new ExpansionProfile.SystemVersionProcessingModeEnumFactory()));
  }
 else   if (!parseBackboneElementContent(eventType,xpp,res))   return false;
  return true;
}",0.9932810750279956
23088,"protected void composeImmunizationEvaluationElements(ImmunizationEvaluation element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    for (    Identifier e : element.getIdentifier())     composeIdentifier(""String_Node_Str"",e);
  }
  if (element.hasStatusElement())   composeEnumeration(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory());
  if (element.hasPatient()) {
    composeReference(""String_Node_Str"",element.getPatient());
  }
  if (element.hasDateElement()) {
    composeDateTime(""String_Node_Str"",element.getDateElement());
  }
  if (element.hasAuthority()) {
    composeReference(""String_Node_Str"",element.getAuthority());
  }
  if (element.hasTargetDisease()) {
    for (    CodeableConcept e : element.getTargetDisease())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasImmunizationEvent()) {
    composeReference(""String_Node_Str"",element.getImmunizationEvent());
  }
  if (element.hasDoseStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getDoseStatus());
  }
  if (element.hasDoseStatusReason()) {
    for (    CodeableConcept e : element.getDoseStatusReason())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeString(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasSeriesElement()) {
    composeString(""String_Node_Str"",element.getSeriesElement());
  }
  if (element.hasDoseNumberElement()) {
    composePositiveInt(""String_Node_Str"",element.getDoseNumberElement());
  }
  if (element.hasSeriesDosesElement()) {
    composePositiveInt(""String_Node_Str"",element.getSeriesDosesElement());
  }
}","protected void composeImmunizationEvaluationElements(ImmunizationEvaluation element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    for (    Identifier e : element.getIdentifier())     composeIdentifier(""String_Node_Str"",e);
  }
  if (element.hasStatusElement())   composeEnumeration(""String_Node_Str"",element.getStatusElement(),new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory());
  if (element.hasPatient()) {
    composeReference(""String_Node_Str"",element.getPatient());
  }
  if (element.hasDateElement()) {
    composeDateTime(""String_Node_Str"",element.getDateElement());
  }
  if (element.hasAuthority()) {
    composeReference(""String_Node_Str"",element.getAuthority());
  }
  if (element.hasTargetDisease()) {
    for (    CodeableConcept e : element.getTargetDisease())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasImmunizationEvent()) {
    composeReference(""String_Node_Str"",element.getImmunizationEvent());
  }
  if (element.hasDoseStatus()) {
    composeCodeableConcept(""String_Node_Str"",element.getDoseStatus());
  }
  if (element.hasDoseStatusReason()) {
    for (    CodeableConcept e : element.getDoseStatusReason())     composeCodeableConcept(""String_Node_Str"",e);
  }
  if (element.hasDescriptionElement()) {
    composeString(""String_Node_Str"",element.getDescriptionElement());
  }
  if (element.hasSeriesElement()) {
    composeString(""String_Node_Str"",element.getSeriesElement());
  }
  if (element.hasDoseNumber()) {
    composeType(""String_Node_Str"",element.getDoseNumber());
  }
  if (element.hasSeriesDoses()) {
    composeType(""String_Node_Str"",element.getSeriesDoses());
  }
}",0.983139534883721
23089,"protected boolean parseDataRequirementContent(int eventType,XmlPullParser xpp,DataRequirement res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getProfile().add(parseCanonical(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getMustSupport().add(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getCodeFilter().add(parseDataRequirementDataRequirementCodeFilterComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDateFilter().add(parseDataRequirementDataRequirementDateFilterComponent(xpp,res));
  }
 else   if (!parseElementContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseDataRequirementContent(int eventType,XmlPullParser xpp,DataRequirement res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setTypeElement(parseCode(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getProfile().add(parseCanonical(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && nameIsTypeName(xpp,""String_Node_Str"")) {
    res.setSubject(parseType(""String_Node_Str"",xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getMustSupport().add(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getCodeFilter().add(parseDataRequirementDataRequirementCodeFilterComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDateFilter().add(parseDataRequirementDataRequirementDateFilterComponent(xpp,res));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setLimitElement(parsePositiveInt(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getSort().add(parseDataRequirementDataRequirementSortComponent(xpp,res));
  }
 else   if (!parseElementContent(eventType,xpp,res))   return false;
  return true;
}",0.7036608863198458
23090,"protected boolean parseImmunizationEvaluationContent(int eventType,XmlPullParser xpp,ImmunizationEvaluation res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getIdentifier().add(parseIdentifier(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setStatusElement(parseEnumeration(xpp,ImmunizationEvaluation.ImmunizationEvaluationStatus.NULL,new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPatient(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDateElement(parseDateTime(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setAuthority(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getTargetDisease().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setImmunizationEvent(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDoseStatus(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDoseStatusReason().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDoseNumberElement(parsePositiveInt(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesDosesElement(parsePositiveInt(xpp));
  }
 else   if (!parseDomainResourceContent(eventType,xpp,res))   return false;
  return true;
}","protected boolean parseImmunizationEvaluationContent(int eventType,XmlPullParser xpp,ImmunizationEvaluation res) throws XmlPullParserException, IOException, FHIRFormatError {
  if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getIdentifier().add(parseIdentifier(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setStatusElement(parseEnumeration(xpp,ImmunizationEvaluation.ImmunizationEvaluationStatus.NULL,new ImmunizationEvaluation.ImmunizationEvaluationStatusEnumFactory()));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setPatient(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDateElement(parseDateTime(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setAuthority(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getTargetDisease().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setImmunizationEvent(parseReference(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDoseStatus(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.getDoseStatusReason().add(parseCodeableConcept(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setDescriptionElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
    res.setSeriesElement(parseString(xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && nameIsTypeName(xpp,""String_Node_Str"")) {
    res.setDoseNumber(parseType(""String_Node_Str"",xpp));
  }
 else   if (eventType == XmlPullParser.START_TAG && nameIsTypeName(xpp,""String_Node_Str"")) {
    res.setSeriesDoses(parseType(""String_Node_Str"",xpp));
  }
 else   if (!parseDomainResourceContent(eventType,xpp,res))   return false;
  return true;
}",0.8865004299226139
23091,"/** 
 * @return {@link #dynamicValue} (Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the intent resource that would contain the result.)
 */
public List<ActivityDefinitionDynamicValueComponent> getDynamicValue(){
  if (this.dynamicValue == null)   this.dynamicValue=new ArrayList<ActivityDefinitionDynamicValueComponent>();
  return this.dynamicValue;
}","/** 
 * @return {@link #dynamicValue} (Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.)
 */
public List<ActivityDefinitionDynamicValueComponent> getDynamicValue(){
  if (this.dynamicValue == null)   this.dynamicValue=new ArrayList<ActivityDefinitionDynamicValueComponent>();
  return this.dynamicValue;
}",0.9907329401853412
23092,"/** 
 * @return {@link #profile} (A constraint on a resource used in the document.). This is the underlying object with id, value and extensions. The accessor ""getProfile"" gives direct access to the value
 */
public CanonicalType getProfileElement(){
  if (this.profile == null)   if (Configuration.errorOnAutoCreate())   throw new Error(""String_Node_Str"");
 else   if (Configuration.doAutoCreate())   this.profile=new CanonicalType();
  return this.profile;
}","/** 
 * @return {@link #profile} (A profile on the document bundle that constrains which resources are present, and their contents.). This is the underlying object with id, value and extensions. The accessor ""getProfile"" gives direct access to the value
 */
public CanonicalType getProfileElement(){
  if (this.profile == null)   if (Configuration.errorOnAutoCreate())   throw new Error(""String_Node_Str"");
 else   if (Configuration.doAutoCreate())   this.profile=new CanonicalType();
  return this.profile;
}",0.8854489164086687
23093,"/** 
 * @param value {@link #profile} (A constraint on a resource used in the document.). This is the underlying object with id, value and extensions. The accessor ""getProfile"" gives direct access to the value
 */
public CapabilityStatementDocumentComponent setProfileElement(CanonicalType value){
  this.profile=value;
  return this;
}","/** 
 * @param value {@link #profile} (A profile on the document bundle that constrains which resources are present, and their contents.). This is the underlying object with id, value and extensions. The accessor ""getProfile"" gives direct access to the value
 */
public CapabilityStatementDocumentComponent setProfileElement(CanonicalType value){
  this.profile=value;
  return this;
}",0.8072122052704577
23094,"/** 
 * @return A constraint on a resource used in the document.
 */
public String getProfile(){
  return this.profile == null ? null : this.profile.getValue();
}","/** 
 * @return A profile on the document bundle that constrains which resources are present, and their contents.
 */
public String getProfile(){
  return this.profile == null ? null : this.profile.getValue();
}",0.6380697050938338
23095,"/** 
 * @param value A constraint on a resource used in the document.
 */
public CapabilityStatementDocumentComponent setProfile(String value){
  if (this.profile == null)   this.profile=new CanonicalType();
  this.profile.setValue(value);
  return this;
}","/** 
 * @param value A profile on the document bundle that constrains which resources are present, and their contents.
 */
public CapabilityStatementDocumentComponent setProfile(String value){
  if (this.profile == null)   this.profile=new CanonicalType();
  this.profile.setValue(value);
  return this;
}",0.7593582887700535
23096,"private void parseChildComplex(String path,JsonObject object,Element context,Set<String> processed,Property property,String name) throws FHIRException {
  processed.add(name);
  String npath=path + ""String_Node_Str"" + property.getName();
  JsonElement e=object.get(name);
  if (property.isList() && (e instanceof JsonArray)) {
    JsonArray arr=(JsonArray)e;
    for (    JsonElement am : arr) {
      parseChildComplexInstance(npath,object,context,property,name,am);
    }
  }
 else {
    parseChildComplexInstance(npath,object,context,property,name,e);
  }
}","private void parseChildComplex(String path,JsonObject object,Element context,Set<String> processed,Property property,String name) throws FHIRException {
  processed.add(name);
  String npath=path + ""String_Node_Str"" + property.getName();
  JsonElement e=object.get(name);
  if (property.isList() && (e instanceof JsonArray)) {
    JsonArray arr=(JsonArray)e;
    for (    JsonElement am : arr) {
      parseChildComplexInstance(npath,object,context,property,name,am);
    }
  }
 else {
    if (property.isList()) {
      logError(line(e),col(e),npath,IssueType.INVALID,""String_Node_Str"" + describeType(e),IssueSeverity.ERROR);
    }
    parseChildComplexInstance(npath,object,context,property,name,e);
  }
}",0.8839779005524862
23097,"public List<TypeRefComponent> convert(IWorkerContext context,String path,List<TypeRef> types,boolean resource,ElementDefinition ed) throws Exception {
  List<TypeRefComponent> list=new ArrayList<TypeRefComponent>();
  for (  TypeRef t : types) {
    if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
      throw new Exception(""String_Node_Str"" + path);
    }
    if (t.getParams().size() > 0) {
      if (t.getProfile() != null && t.getParams().size() != 1) {
        throw new Exception(""String_Node_Str"" + path);
      }
      if (t.getProfile() != null) {
        TypeRefComponent childType=getTypeComponent(list,t.getName());
        if (t.getVersioning() != null)         childType.setVersioning(t.getVersioning());
        if (t.getName().equals(""String_Node_Str""))         childType.addTargetProfile(t.getProfile());
 else         childType.addProfile(t.getProfile());
      }
 else       for (      String param : t.getParams()) {
        TypeRefComponent childType=getTypeComponent(list,t.getName());
        if (t.getVersioning() != null)         childType.setVersioning(t.getVersioning());
        if (t.getName().equals(""String_Node_Str"") || t.getName().equals(""String_Node_Str""))         childType.addTargetProfile(""String_Node_Str"" + param);
 else         childType.addProfile(""String_Node_Str"" + param);
      }
    }
 else     if (t.isWildcardType()) {
      for (      String n : TypesUtilities.wildcardTypes()) {
        TypeRefComponent tc=new TypeRefComponent().setCode(n);
        if (t.getVersioning() != null)         tc.setVersioning(t.getVersioning());
        list.add(tc);
      }
    }
 else     if (Utilities.noString(t.getName()) && t.getProfile() != null) {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
      TypeRefComponent tc=getTypeComponent(list,sd != null ? sd.getType() : t.getName());
      if (t.getVersioning() != null)       tc.setVersioning(t.getVersioning());
      if (t.getName().equals(""String_Node_Str""))       tc.addTargetProfile(t.getProfile());
 else       tc.addProfile(t.getProfile());
      list.add(tc);
    }
 else     if (t.getName().startsWith(""String_Node_Str"")) {
      if (resource)       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
 else       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
      ToolingExtensions.addStringExtension(ed,""String_Node_Str"",t.getName().substring(1));
    }
 else {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getName());
      if (sd == null)       throw new Exception(""String_Node_Str"" + t.getName() + ""String_Node_Str"");
      TypeRefComponent tc=getTypeComponent(list,sd.getType());
      if (t.getVersioning() != null)       tc.setVersioning(t.getVersioning());
      if (t.getName().equals(""String_Node_Str"")) {
        if (t.hasProfile())         tc.addTargetProfile(t.getProfile());
      }
 else       tc.addProfile(t.getProfile());
    }
  }
  return list;
}","public List<TypeRefComponent> convert(IWorkerContext context,String path,List<TypeRef> types,boolean resource,ElementDefinition ed) throws Exception {
  List<TypeRefComponent> list=new ArrayList<TypeRefComponent>();
  for (  TypeRef t : types) {
    if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
      throw new Exception(""String_Node_Str"" + path);
    }
    if (t.getParams().size() > 0) {
      if (t.getProfile() != null && t.getParams().size() != 1) {
        throw new Exception(""String_Node_Str"" + path);
      }
      if (t.getProfile() != null) {
        TypeRefComponent childType=getTypeComponent(list,t.getName());
        if (t.getVersioning() != null)         childType.setVersioning(t.getVersioning());
        if (t.getName().equals(""String_Node_Str""))         childType.addTargetProfile(t.getProfile());
 else         childType.addProfile(t.getProfile());
      }
 else       for (      String param : t.getParams()) {
        TypeRefComponent childType=getTypeComponent(list,t.getName());
        if (t.getVersioning() != null)         childType.setVersioning(t.getVersioning());
        if (t.getName().equals(""String_Node_Str"") || t.getName().equals(""String_Node_Str""))         childType.addTargetProfile(""String_Node_Str"" + param);
 else         childType.addProfile(""String_Node_Str"" + param);
      }
    }
 else     if (t.isWildcardType()) {
      for (      String n : TypesUtilities.wildcardTypes()) {
        TypeRefComponent tc=new TypeRefComponent().setCode(n);
        if (t.getVersioning() != null)         tc.setVersioning(t.getVersioning());
        list.add(tc);
      }
    }
 else     if (Utilities.noString(t.getName()) && t.getProfile() != null) {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
      TypeRefComponent tc=getTypeComponent(list,sd != null ? sd.getType() : t.getName());
      if (t.getVersioning() != null)       tc.setVersioning(t.getVersioning());
      if (t.getName().equals(""String_Node_Str""))       tc.addTargetProfile(t.getProfile());
 else       tc.addProfile(t.getProfile());
    }
 else     if (t.getName().startsWith(""String_Node_Str"")) {
      if (resource)       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
 else       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
      ToolingExtensions.addStringExtension(ed,""String_Node_Str"",t.getName().substring(1));
    }
 else {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getName());
      if (sd == null)       throw new Exception(""String_Node_Str"" + t.getName() + ""String_Node_Str"");
      TypeRefComponent tc=getTypeComponent(list,sd.getType());
      if (t.getVersioning() != null)       tc.setVersioning(t.getVersioning());
      if (t.getName().equals(""String_Node_Str"")) {
        if (t.hasProfile())         tc.addTargetProfile(t.getProfile());
      }
 else       tc.addProfile(t.getProfile());
    }
  }
  for (  TypeRefComponent tr1 : list) {
    for (    TypeRefComponent tr2 : list) {
      if (tr1 != tr2) {
        if (!tr1.getCode().equals(tr2.getCode()))         throw new Exception(""String_Node_Str"" + tr1.getCode() + ""String_Node_Str""+ list.toString());
      }
    }
  }
  return list;
}",0.9494659652478876
23098,"private boolean checkParameters(FHIRLexer lexer,SourceLocation location,ExpressionNode exp,FunctionDetails details) throws FHIRLexerException {
switch (exp.getFunction()) {
case Empty:
    return checkParamCount(lexer,location,exp,0);
case Not:
  return checkParamCount(lexer,location,exp,0);
case Exists:
return checkParamCount(lexer,location,exp,0);
case SubsetOf:
return checkParamCount(lexer,location,exp,1);
case SupersetOf:
return checkParamCount(lexer,location,exp,1);
case IsDistinct:
return checkParamCount(lexer,location,exp,0);
case Distinct:
return checkParamCount(lexer,location,exp,0);
case Count:
return checkParamCount(lexer,location,exp,0);
case Where:
return checkParamCount(lexer,location,exp,1);
case Select:
return checkParamCount(lexer,location,exp,1);
case All:
return checkParamCount(lexer,location,exp,0,1);
case Repeat:
return checkParamCount(lexer,location,exp,1);
case Item:
return checkParamCount(lexer,location,exp,1);
case As:
return checkParamCount(lexer,location,exp,1);
case Is:
return checkParamCount(lexer,location,exp,1);
case Single:
return checkParamCount(lexer,location,exp,0);
case First:
return checkParamCount(lexer,location,exp,0);
case Last:
return checkParamCount(lexer,location,exp,0);
case Tail:
return checkParamCount(lexer,location,exp,0);
case Skip:
return checkParamCount(lexer,location,exp,1);
case Take:
return checkParamCount(lexer,location,exp,1);
case Iif:
return checkParamCount(lexer,location,exp,2,3);
case ToInteger:
return checkParamCount(lexer,location,exp,0);
case ToDecimal:
return checkParamCount(lexer,location,exp,0);
case ToString:
return checkParamCount(lexer,location,exp,0);
case Substring:
return checkParamCount(lexer,location,exp,1,2);
case StartsWith:
return checkParamCount(lexer,location,exp,1);
case EndsWith:
return checkParamCount(lexer,location,exp,1);
case Matches:
return checkParamCount(lexer,location,exp,1);
case ReplaceMatches:
return checkParamCount(lexer,location,exp,2);
case Contains:
return checkParamCount(lexer,location,exp,1);
case Replace:
return checkParamCount(lexer,location,exp,2);
case Length:
return checkParamCount(lexer,location,exp,0);
case Children:
return checkParamCount(lexer,location,exp,0);
case Descendants:
return checkParamCount(lexer,location,exp,0);
case MemberOf:
return checkParamCount(lexer,location,exp,1);
case Trace:
return checkParamCount(lexer,location,exp,1);
case Today:
return checkParamCount(lexer,location,exp,0);
case Now:
return checkParamCount(lexer,location,exp,0);
case Resolve:
return checkParamCount(lexer,location,exp,0);
case Extension:
return checkParamCount(lexer,location,exp,1);
case HasValue:
return checkParamCount(lexer,location,exp,0);
case Alias:
return checkParamCount(lexer,location,exp,1);
case AliasAs:
return checkParamCount(lexer,location,exp,1);
case HtmlChecks:
return checkParamCount(lexer,location,exp,0);
case Custom:
return checkParamCount(lexer,location,exp,details.getMinParameters(),details.getMaxParameters());
}
return false;
}","private boolean checkParameters(FHIRLexer lexer,SourceLocation location,ExpressionNode exp,FunctionDetails details) throws FHIRLexerException {
switch (exp.getFunction()) {
case Empty:
    return checkParamCount(lexer,location,exp,0);
case Not:
  return checkParamCount(lexer,location,exp,0);
case Exists:
return checkParamCount(lexer,location,exp,0);
case SubsetOf:
return checkParamCount(lexer,location,exp,1);
case SupersetOf:
return checkParamCount(lexer,location,exp,1);
case IsDistinct:
return checkParamCount(lexer,location,exp,0);
case Distinct:
return checkParamCount(lexer,location,exp,0);
case Count:
return checkParamCount(lexer,location,exp,0);
case Where:
return checkParamCount(lexer,location,exp,1);
case Select:
return checkParamCount(lexer,location,exp,1);
case All:
return checkParamCount(lexer,location,exp,0,1);
case Repeat:
return checkParamCount(lexer,location,exp,1);
case Item:
return checkParamCount(lexer,location,exp,1);
case As:
return checkParamCount(lexer,location,exp,1);
case OfType:
return checkParamCount(lexer,location,exp,1);
case Is:
return checkParamCount(lexer,location,exp,1);
case Single:
return checkParamCount(lexer,location,exp,0);
case First:
return checkParamCount(lexer,location,exp,0);
case Last:
return checkParamCount(lexer,location,exp,0);
case Tail:
return checkParamCount(lexer,location,exp,0);
case Skip:
return checkParamCount(lexer,location,exp,1);
case Take:
return checkParamCount(lexer,location,exp,1);
case Iif:
return checkParamCount(lexer,location,exp,2,3);
case ToInteger:
return checkParamCount(lexer,location,exp,0);
case ToDecimal:
return checkParamCount(lexer,location,exp,0);
case ToString:
return checkParamCount(lexer,location,exp,0);
case Substring:
return checkParamCount(lexer,location,exp,1,2);
case StartsWith:
return checkParamCount(lexer,location,exp,1);
case EndsWith:
return checkParamCount(lexer,location,exp,1);
case Matches:
return checkParamCount(lexer,location,exp,1);
case ReplaceMatches:
return checkParamCount(lexer,location,exp,2);
case Contains:
return checkParamCount(lexer,location,exp,1);
case Replace:
return checkParamCount(lexer,location,exp,2);
case Length:
return checkParamCount(lexer,location,exp,0);
case Children:
return checkParamCount(lexer,location,exp,0);
case Descendants:
return checkParamCount(lexer,location,exp,0);
case MemberOf:
return checkParamCount(lexer,location,exp,1);
case Trace:
return checkParamCount(lexer,location,exp,1);
case Today:
return checkParamCount(lexer,location,exp,0);
case Now:
return checkParamCount(lexer,location,exp,0);
case Resolve:
return checkParamCount(lexer,location,exp,0);
case Extension:
return checkParamCount(lexer,location,exp,1);
case HasValue:
return checkParamCount(lexer,location,exp,0);
case Alias:
return checkParamCount(lexer,location,exp,1);
case AliasAs:
return checkParamCount(lexer,location,exp,1);
case HtmlChecks:
return checkParamCount(lexer,location,exp,0);
case Custom:
return checkParamCount(lexer,location,exp,details.getMinParameters(),details.getMaxParameters());
}
return false;
}",0.570246566275029
23099,"private List<Base> evaluateFunction(ExecutionContext context,List<Base> focus,ExpressionNode exp) throws FHIRException {
switch (exp.getFunction()) {
case Empty:
    return funcEmpty(context,focus,exp);
case Not:
  return funcNot(context,focus,exp);
case Exists:
return funcExists(context,focus,exp);
case SubsetOf:
return funcSubsetOf(context,focus,exp);
case SupersetOf:
return funcSupersetOf(context,focus,exp);
case IsDistinct:
return funcIsDistinct(context,focus,exp);
case Distinct:
return funcDistinct(context,focus,exp);
case Count:
return funcCount(context,focus,exp);
case Where:
return funcWhere(context,focus,exp);
case Select:
return funcSelect(context,focus,exp);
case All:
return funcAll(context,focus,exp);
case Repeat:
return funcRepeat(context,focus,exp);
case Item:
return funcItem(context,focus,exp);
case As:
return funcAs(context,focus,exp);
case Is:
return funcIs(context,focus,exp);
case Single:
return funcSingle(context,focus,exp);
case First:
return funcFirst(context,focus,exp);
case Last:
return funcLast(context,focus,exp);
case Tail:
return funcTail(context,focus,exp);
case Skip:
return funcSkip(context,focus,exp);
case Take:
return funcTake(context,focus,exp);
case Iif:
return funcIif(context,focus,exp);
case ToInteger:
return funcToInteger(context,focus,exp);
case ToDecimal:
return funcToDecimal(context,focus,exp);
case ToString:
return funcToString(context,focus,exp);
case Substring:
return funcSubstring(context,focus,exp);
case StartsWith:
return funcStartsWith(context,focus,exp);
case EndsWith:
return funcEndsWith(context,focus,exp);
case Matches:
return funcMatches(context,focus,exp);
case ReplaceMatches:
return funcReplaceMatches(context,focus,exp);
case Contains:
return funcContains(context,focus,exp);
case Replace:
return funcReplace(context,focus,exp);
case Length:
return funcLength(context,focus,exp);
case Children:
return funcChildren(context,focus,exp);
case Descendants:
return funcDescendants(context,focus,exp);
case MemberOf:
return funcMemberOf(context,focus,exp);
case Trace:
return funcTrace(context,focus,exp);
case Today:
return funcToday(context,focus,exp);
case Now:
return funcNow(context,focus,exp);
case Resolve:
return funcResolve(context,focus,exp);
case Extension:
return funcExtension(context,focus,exp);
case HasValue:
return funcHasValue(context,focus,exp);
case AliasAs:
return funcAliasAs(context,focus,exp);
case Alias:
return funcAlias(context,focus,exp);
case HtmlChecks:
return funcHtmlChecks(context,focus,exp);
case Custom:
{
List<List<Base>> params=new ArrayList<List<Base>>();
for (ExpressionNode p : exp.getParameters()) params.add(execute(context,focus,p,true));
return hostServices.executeFunction(context.appInfo,exp.getName(),params);
}
default :
throw new Error(""String_Node_Str"");
}
}","private List<Base> evaluateFunction(ExecutionContext context,List<Base> focus,ExpressionNode exp) throws FHIRException {
switch (exp.getFunction()) {
case Empty:
    return funcEmpty(context,focus,exp);
case Not:
  return funcNot(context,focus,exp);
case Exists:
return funcExists(context,focus,exp);
case SubsetOf:
return funcSubsetOf(context,focus,exp);
case SupersetOf:
return funcSupersetOf(context,focus,exp);
case IsDistinct:
return funcIsDistinct(context,focus,exp);
case Distinct:
return funcDistinct(context,focus,exp);
case Count:
return funcCount(context,focus,exp);
case Where:
return funcWhere(context,focus,exp);
case Select:
return funcSelect(context,focus,exp);
case All:
return funcAll(context,focus,exp);
case Repeat:
return funcRepeat(context,focus,exp);
case Item:
return funcItem(context,focus,exp);
case As:
return funcAs(context,focus,exp);
case OfType:
return funcAs(context,focus,exp);
case Is:
return funcIs(context,focus,exp);
case Single:
return funcSingle(context,focus,exp);
case First:
return funcFirst(context,focus,exp);
case Last:
return funcLast(context,focus,exp);
case Tail:
return funcTail(context,focus,exp);
case Skip:
return funcSkip(context,focus,exp);
case Take:
return funcTake(context,focus,exp);
case Iif:
return funcIif(context,focus,exp);
case ToInteger:
return funcToInteger(context,focus,exp);
case ToDecimal:
return funcToDecimal(context,focus,exp);
case ToString:
return funcToString(context,focus,exp);
case Substring:
return funcSubstring(context,focus,exp);
case StartsWith:
return funcStartsWith(context,focus,exp);
case EndsWith:
return funcEndsWith(context,focus,exp);
case Matches:
return funcMatches(context,focus,exp);
case ReplaceMatches:
return funcReplaceMatches(context,focus,exp);
case Contains:
return funcContains(context,focus,exp);
case Replace:
return funcReplace(context,focus,exp);
case Length:
return funcLength(context,focus,exp);
case Children:
return funcChildren(context,focus,exp);
case Descendants:
return funcDescendants(context,focus,exp);
case MemberOf:
return funcMemberOf(context,focus,exp);
case Trace:
return funcTrace(context,focus,exp);
case Today:
return funcToday(context,focus,exp);
case Now:
return funcNow(context,focus,exp);
case Resolve:
return funcResolve(context,focus,exp);
case Extension:
return funcExtension(context,focus,exp);
case HasValue:
return funcHasValue(context,focus,exp);
case AliasAs:
return funcAliasAs(context,focus,exp);
case Alias:
return funcAlias(context,focus,exp);
case HtmlChecks:
return funcHtmlChecks(context,focus,exp);
case Custom:
{
List<List<Base>> params=new ArrayList<List<Base>>();
for (ExpressionNode p : exp.getParameters()) params.add(execute(context,focus,p,true));
return hostServices.executeFunction(context.appInfo,exp.getName(),params);
}
default :
throw new Error(""String_Node_Str"");
}
}",0.9916206097343556
23100,"@SuppressWarnings(""String_Node_Str"") private TypeDetails evaluateFunctionType(ExecutionTypeContext context,TypeDetails focus,ExpressionNode exp) throws PathEngineException, DefinitionException {
  List<TypeDetails> paramTypes=new ArrayList<TypeDetails>();
  if (exp.getFunction() == Function.Is || exp.getFunction() == Function.As)   paramTypes.add(new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
 else   for (  ExpressionNode expr : exp.getParameters()) {
    if (exp.getFunction() == Function.Where || exp.getFunction() == Function.Select || exp.getFunction() == Function.Repeat)     paramTypes.add(executeType(changeThis(context,focus),focus,expr,true));
 else     paramTypes.add(executeType(context,focus,expr,true));
  }
switch (exp.getFunction()) {
case Empty:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Not:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Exists:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case SubsetOf:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,focus);
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case SupersetOf:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,focus);
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case IsDistinct:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Distinct:
return focus;
case Count:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Where:
return focus;
case Select:
return anything(focus.getCollectionStatus());
case All:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Repeat:
return anything(focus.getCollectionStatus());
case Item:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case As:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,exp.getParameters().get(0).getName());
}
case Is:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Single:
return focus.toSingleton();
case First:
{
checkOrdered(focus,""String_Node_Str"");
return focus.toSingleton();
}
case Last:
{
checkOrdered(focus,""String_Node_Str"");
return focus.toSingleton();
}
case Tail:
{
checkOrdered(focus,""String_Node_Str"");
return focus;
}
case Skip:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Take:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Iif:
{
TypeDetails types=new TypeDetails(null);
types.update(paramTypes.get(0));
if (paramTypes.size() > 1) types.update(paramTypes.get(1));
return types;
}
case ToInteger:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ToDecimal:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ToString:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Substring:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case StartsWith:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case EndsWith:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Matches:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ReplaceMatches:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Contains:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Replace:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Length:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Children:
return childTypes(focus,""String_Node_Str"");
case Descendants:
return childTypes(focus,""String_Node_Str"");
case MemberOf:
{
checkContextCoded(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Trace:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Today:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Now:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Resolve:
{
checkContextReference(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Extension:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case HasValue:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case HtmlChecks:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Alias:
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return anything(CollectionStatus.SINGLETON);
case AliasAs:
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
case Custom:
{
return hostServices.checkFunction(context.appInfo,exp.getName(),paramTypes);
}
default :
break;
}
throw new Error(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") private TypeDetails evaluateFunctionType(ExecutionTypeContext context,TypeDetails focus,ExpressionNode exp) throws PathEngineException, DefinitionException {
  List<TypeDetails> paramTypes=new ArrayList<TypeDetails>();
  if (exp.getFunction() == Function.Is || exp.getFunction() == Function.As)   paramTypes.add(new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
 else   for (  ExpressionNode expr : exp.getParameters()) {
    if (exp.getFunction() == Function.Where || exp.getFunction() == Function.Select || exp.getFunction() == Function.Repeat)     paramTypes.add(executeType(changeThis(context,focus),focus,expr,true));
 else     paramTypes.add(executeType(context,focus,expr,true));
  }
switch (exp.getFunction()) {
case Empty:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Not:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Exists:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case SubsetOf:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,focus);
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case SupersetOf:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,focus);
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case IsDistinct:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Distinct:
return focus;
case Count:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Where:
return focus;
case Select:
return anything(focus.getCollectionStatus());
case All:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Repeat:
return anything(focus.getCollectionStatus());
case Item:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case As:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,exp.getParameters().get(0).getName());
}
case OfType:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,exp.getParameters().get(0).getName());
}
case Is:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Single:
return focus.toSingleton();
case First:
{
checkOrdered(focus,""String_Node_Str"");
return focus.toSingleton();
}
case Last:
{
checkOrdered(focus,""String_Node_Str"");
return focus.toSingleton();
}
case Tail:
{
checkOrdered(focus,""String_Node_Str"");
return focus;
}
case Skip:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Take:
{
checkOrdered(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Iif:
{
TypeDetails types=new TypeDetails(null);
types.update(paramTypes.get(0));
if (paramTypes.size() > 1) types.update(paramTypes.get(1));
return types;
}
case ToInteger:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ToDecimal:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ToString:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Substring:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case StartsWith:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case EndsWith:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Matches:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case ReplaceMatches:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Contains:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Replace:
{
checkContextString(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""),new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Length:
{
checkContextPrimitive(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Children:
return childTypes(focus,""String_Node_Str"");
case Descendants:
return childTypes(focus,""String_Node_Str"");
case MemberOf:
{
checkContextCoded(focus,""String_Node_Str"");
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Trace:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
}
case Today:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Now:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Resolve:
{
checkContextReference(focus,""String_Node_Str"");
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case Extension:
{
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
}
case HasValue:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case HtmlChecks:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Alias:
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return anything(CollectionStatus.SINGLETON);
case AliasAs:
checkParamTypes(exp.getFunction().toCode(),paramTypes,new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str""));
return focus;
case Custom:
{
return hostServices.checkFunction(context.appInfo,exp.getName(),paramTypes);
}
default :
break;
}
throw new Error(""String_Node_Str"");
}",0.8280306081353201
23101,"private void generateCoreElemExtension(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,List<ElementDefinition> children,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasMax() && elem.getMax().equals(""String_Node_Str"");
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS + ""String_Node_Str"");
  List<ElementDefinition> slices=getSlices(elem,children);
  int c=0;
  for (  ElementDefinition slice : slices) {
    String url=slice.getTypeFirstRep().getProfile().get(0).getValue();
    StructureDefinition sdExt=url == null ? null : context.fetchResource(StructureDefinition.class,url);
    b.append(indentS + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    writeCardinality(unbounded,b,slice);
    b.append(Utilities.escapeXml(slice.getShort()) + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(indentS + ""String_Node_Str"");
    if (sdExt == null)     b.append(""String_Node_Str"" + url + ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + sdExt.getUserString(""String_Node_Str"") + ""String_Node_Str""+ url+ ""String_Node_Str"");
    List<ElementDefinition> extchildren=getChildren(elements,slice);
    if (extchildren.isEmpty()) {
      if (sdExt == null)       b.append(""String_Node_Str"" + url + ""String_Node_Str"");
 else       extchildren=getChildren(sdExt.getSnapshot().getElement(),sdExt.getSnapshot().getElementFirstRep());
    }
    ElementDefinition value=getValue(extchildren);
    if (value != null) {
      if (value.getType().size() == 1)       generateCoreElem(b,elements,value,indent + 2,pathName + ""String_Node_Str"" + en,false,value.getType().get(0),true,false);
 else {
        b.append(""String_Node_Str"" + Utilities.escapeXml(value.getShort()) + ""String_Node_Str""+ Integer.toString(value.getType().size())+ ""String_Node_Str"");
        for (        TypeRefComponent t : value.getType())         generateCoreElem(b,elements,value,indent + 2,pathName + ""String_Node_Str"" + en,false,t,t == value.getType().get(value.getType().size() - 1),false);
      }
    }
 else {
      b.append(""String_Node_Str"" + url + ""String_Node_Str"");
    }
    c++;
    b.append(indentS);
    if (c == slices.size())     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"");
  }
  b.append(indentS);
  if (last)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
}","private void generateCoreElemExtension(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,List<ElementDefinition> children,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasMax() && elem.getMax().equals(""String_Node_Str"");
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS + ""String_Node_Str"");
  List<ElementDefinition> slices=getSlices(elem,children);
  int c=0;
  for (  ElementDefinition slice : slices) {
    List<UriType> profiles=slice.getTypeFirstRep().getProfile();
    String url=profiles.isEmpty() ? null : profiles.get(0).getValue();
    StructureDefinition sdExt=url == null ? null : context.fetchResource(StructureDefinition.class,url);
    b.append(indentS + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    writeCardinality(unbounded,b,slice);
    b.append(Utilities.escapeXml(slice.getShort()) + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(indentS + ""String_Node_Str"");
    if (sdExt == null)     b.append(""String_Node_Str"" + url + ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + sdExt.getUserString(""String_Node_Str"") + ""String_Node_Str""+ url+ ""String_Node_Str"");
    List<ElementDefinition> extchildren=getChildren(elements,slice);
    if (extchildren.isEmpty()) {
      if (sdExt == null)       b.append(""String_Node_Str"" + url + ""String_Node_Str"");
 else       extchildren=getChildren(sdExt.getSnapshot().getElement(),sdExt.getSnapshot().getElementFirstRep());
    }
    ElementDefinition value=getValue(extchildren);
    if (value != null) {
      if (value.getType().size() == 1)       generateCoreElem(b,elements,value,indent + 2,pathName + ""String_Node_Str"" + en,false,value.getType().get(0),true,false);
 else {
        b.append(""String_Node_Str"" + Utilities.escapeXml(value.getShort()) + ""String_Node_Str""+ Integer.toString(value.getType().size())+ ""String_Node_Str"");
        for (        TypeRefComponent t : value.getType())         generateCoreElem(b,elements,value,indent + 2,pathName + ""String_Node_Str"" + en,false,t,t == value.getType().get(value.getType().size() - 1),false);
      }
    }
 else {
      b.append(""String_Node_Str"" + url + ""String_Node_Str"");
    }
    c++;
    b.append(indentS);
    if (c == slices.size())     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"");
  }
  b.append(indentS);
  if (last)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
}",0.98107767165255
23102,"public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  list.add(tgt);
  if (src.getCode().equals(""String_Node_Str"")) {
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      tgt.addProfile(u.getValue());
    }
  }
 else {
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      tgt.addProfile(u.getValue());
    }
  }
}","public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  list.add(tgt);
  if (src.hasCode() && src.getCode().equals(""String_Node_Str"")) {
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      tgt.addProfile(u.getValue());
    }
  }
 else {
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      tgt.addProfile(u.getValue());
    }
  }
}",0.9886439545758184
23103,"public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  if (src.getCode().equals(""String_Node_Str"")) {
    if (src.hasProfile())     tgt.setProfile(src.getProfile().get(0).getValue());
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      list.add(tgt);
      tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
      copyElement(src,tgt);
      tgt.setCode(src.getCode());
      if (src.hasProfile())       tgt.setProfile(src.getProfile().get(0).getValue());
    }
  }
 else {
    list.add(tgt);
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      list.add(tgt);
      tgt.setProfile(u.getValue());
      tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
      copyElement(src,tgt);
      tgt.setCode(src.getCode());
    }
  }
}","public static void convertTypeRefComponent(org.hl7.fhir.r4.model.ElementDefinition.TypeRefComponent src,List<org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent> list) throws FHIRException {
  if (src == null)   return;
  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  if (""String_Node_Str"".equals(src.getCode())) {
    if (src.hasProfile())     tgt.setProfile(src.getProfile().get(0).getValue());
    for (    org.hl7.fhir.r4.model.UriType u : src.getTargetProfile()) {
      list.add(tgt);
      tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
      copyElement(src,tgt);
      tgt.setCode(src.getCode());
      if (src.hasProfile())       tgt.setProfile(src.getProfile().get(0).getValue());
    }
  }
 else {
    list.add(tgt);
    for (    org.hl7.fhir.r4.model.UriType u : src.getProfile()) {
      list.add(tgt);
      tgt.setProfile(u.getValue());
      tgt=new org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent();
      copyElement(src,tgt);
      tgt.setCode(src.getCode());
    }
  }
}",0.9821428571428572
23104,"public void generateSchematrons(OutputStream dest,StructureDefinition structure) throws IOException, DefinitionException {
  if (structure.getDerivation() != TypeDerivationRule.CONSTRAINT)   throw new DefinitionException(""String_Node_Str"");
  if (!structure.hasSnapshot())   throw new DefinitionException(""String_Node_Str"");
  StructureDefinition base=context.fetchResource(StructureDefinition.class,structure.getBaseDefinition());
  SchematronWriter sch=new SchematronWriter(dest,SchematronType.PROFILE,base.getName());
  ElementDefinition ed=structure.getSnapshot().getElement().get(0);
  generateForChildren(sch,""String_Node_Str"" + ed.getPath(),ed,structure,base);
  sch.dump();
}","public void generateSchematrons(OutputStream dest,StructureDefinition structure) throws IOException, DefinitionException {
  if (structure.getDerivation() != TypeDerivationRule.CONSTRAINT)   throw new DefinitionException(""String_Node_Str"");
  if (!structure.hasSnapshot())   throw new DefinitionException(""String_Node_Str"");
  StructureDefinition base=context.fetchResource(StructureDefinition.class,structure.getBaseDefinition());
  if (base != null) {
    SchematronWriter sch=new SchematronWriter(dest,SchematronType.PROFILE,base.getName());
    ElementDefinition ed=structure.getSnapshot().getElement().get(0);
    generateForChildren(sch,""String_Node_Str"" + ed.getPath(),ed,structure,base);
    sch.dump();
  }
}",0.9757142857142858
23105,"private void genEntryItem(StringBuilder list,StringBuilder lists,StringBuilder table,FetchedFile f,FetchedResource r,String name,String prefixType) throws Exception {
  String ref=igpkp.doReplacements(igpkp.getLinkFor(r),r,null,null);
  if (prefixType != null)   ref=ref.substring(0,ref.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + prefixType+ ref.substring(ref.lastIndexOf(""String_Node_Str""));
  PrimitiveType desc=new StringType(r.getTitle());
  if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
    name=((MetadataResource)r.getResource()).getName();
    desc=getDesc((MetadataResource)r.getResource(),desc);
  }
  list.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str""+ Utilities.escapeXml(desc.asStringValue())+ ""String_Node_Str"");
  lists.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str"");
  table.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str""+ new BaseRenderer(context,null,igpkp,specMaps,markdownEngine).processMarkdown(""String_Node_Str"",desc)+ ""String_Node_Str"");
}","private void genEntryItem(StringBuilder list,StringBuilder lists,StringBuilder table,FetchedFile f,FetchedResource r,String name,String prefixType) throws Exception {
  String ref=igpkp.doReplacements(igpkp.getLinkFor(r),r,null,null);
  if (Utilities.noString(ref))   throw new Exception(""String_Node_Str"" + r.getId());
  if (prefixType != null)   if (ref.contains(""String_Node_Str""))   ref=ref.substring(0,ref.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + prefixType+ ref.substring(ref.lastIndexOf(""String_Node_Str""));
 else   ref=ref + ""String_Node_Str"" + prefixType;
  PrimitiveType desc=new StringType(r.getTitle());
  if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
    name=((MetadataResource)r.getResource()).getName();
    desc=getDesc((MetadataResource)r.getResource(),desc);
  }
  list.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str""+ Utilities.escapeXml(desc.asStringValue())+ ""String_Node_Str"");
  lists.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str"");
  table.append(""String_Node_Str"" + ref + ""String_Node_Str""+ Utilities.escapeXml(name)+ ""String_Node_Str""+ new BaseRenderer(context,null,igpkp,specMaps,markdownEngine).processMarkdown(""String_Node_Str"",desc)+ ""String_Node_Str"");
}",0.930064308681672
23106,"public org.hl7.fhir.dstu2.model.InstantType convertInstant(org.hl7.fhir.dstu3.model.InstantType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.InstantType tgt=new org.hl7.fhir.dstu2.model.InstantType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public org.hl7.fhir.dstu2.model.InstantType convertInstant(org.hl7.fhir.dstu3.model.InstantType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.InstantType tgt=new org.hl7.fhir.dstu2.model.InstantType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9850746268656716
23107,"public org.hl7.fhir.dstu2.model.DateTimeType convertDateTime(org.hl7.fhir.dstu3.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateTimeType tgt=new org.hl7.fhir.dstu2.model.DateTimeType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public org.hl7.fhir.dstu2.model.DateTimeType convertDateTime(org.hl7.fhir.dstu3.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateTimeType tgt=new org.hl7.fhir.dstu2.model.DateTimeType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9853479853479854
23108,"public org.hl7.fhir.dstu2.model.DateType convertDate(org.hl7.fhir.dstu3.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateType tgt=new org.hl7.fhir.dstu2.model.DateType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public org.hl7.fhir.dstu2.model.DateType convertDate(org.hl7.fhir.dstu3.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateType tgt=new org.hl7.fhir.dstu2.model.DateType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9844357976653696
23109,"public org.hl7.fhir.dstu2.model.DateType convertDate(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateType tgt=new org.hl7.fhir.dstu2.model.DateType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public org.hl7.fhir.dstu2.model.DateType convertDate(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateType tgt=new org.hl7.fhir.dstu2.model.DateType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.984251968503937
23110,"public org.hl7.fhir.dstu2.model.DateTimeType convertDateTime(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateTimeType tgt=new org.hl7.fhir.dstu2.model.DateTimeType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public org.hl7.fhir.dstu2.model.DateTimeType convertDateTime(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu2.model.DateTimeType tgt=new org.hl7.fhir.dstu2.model.DateTimeType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9851851851851852
23111,"public static org.hl7.fhir.dstu3.model.InstantType convertInstant(org.hl7.fhir.r4.model.InstantType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.InstantType tgt=new org.hl7.fhir.dstu3.model.InstantType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public static org.hl7.fhir.dstu3.model.InstantType convertInstant(org.hl7.fhir.r4.model.InstantType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.InstantType tgt=new org.hl7.fhir.dstu3.model.InstantType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9852941176470588
23112,"public static org.hl7.fhir.dstu3.model.DateTimeType convertDateTime(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.DateTimeType tgt=new org.hl7.fhir.dstu3.model.DateTimeType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public static org.hl7.fhir.dstu3.model.DateTimeType convertDateTime(org.hl7.fhir.r4.model.DateTimeType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.DateTimeType tgt=new org.hl7.fhir.dstu3.model.DateTimeType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9855595667870036
23113,"public static org.hl7.fhir.dstu3.model.DateType convertDate(org.hl7.fhir.r4.model.DateType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.DateType tgt=new org.hl7.fhir.dstu3.model.DateType(src.getValue());
  copyElement(src,tgt);
  return tgt;
}","public static org.hl7.fhir.dstu3.model.DateType convertDate(org.hl7.fhir.r4.model.DateType src) throws FHIRException {
  org.hl7.fhir.dstu3.model.DateType tgt=new org.hl7.fhir.dstu3.model.DateType(src.getValueAsString());
  copyElement(src,tgt);
  return tgt;
}",0.9844357976653696
23114,"private void checkAllInterlinked(List<ValidationMessage> errors,List<Element> entries,NodeStack stack,Element bundle){
  Map<String,Element> visitedResources=new HashMap<String,Element>();
  HashMap<Element,Element> candidateEntries=new HashMap<Element,Element>();
  List<Element> candidateResources=new ArrayList<Element>();
  for (  Element entry : entries) {
    candidateEntries.put(entry.getNamedChild(""String_Node_Str""),entry);
    candidateResources.add(entry.getNamedChild(""String_Node_Str""));
  }
  List<String> sheets=new ArrayList();
  List<Element> links=bundle.getChildren(""String_Node_Str"");
  for (  Element link : links) {
    if (link.getChildValue(""String_Node_Str"").equals(""String_Node_Str"")) {
      sheets.add(link.getChildValue(""String_Node_Str""));
    }
  }
  if (!sheets.isEmpty()) {
    for (    Element r : candidateResources) {
      String url=r.getChildValue(""String_Node_Str"");
      if (sheets.contains(url))       visitedResources.put(url,r);
    }
  }
  List<Element> unusedResources=new ArrayList<Element>();
  boolean reverseLinksFound=false;
  do {
    followResourceLinks(entries.get(0),visitedResources,candidateEntries,candidateResources,errors,stack);
    unusedResources.clear();
    unusedResources.addAll(candidateResources);
    unusedResources.removeAll(visitedResources.values());
    for (    Element unusedResource : unusedResources) {
      List<String> references=findReferences(unusedResource);
      for (      String reference : references) {
        if (visitedResources.containsKey(reference)) {
          visitedResources.put(reference,unusedResource);
          reverseLinksFound=true;
        }
      }
    }
  }
 while (reverseLinksFound);
  int i=0;
  for (  Element entry : entries) {
    rule(errors,IssueType.INFORMATIONAL,entry.line(),entry.col(),stack.addToLiteralPath(""String_Node_Str"" + '[' + (i + 1)+ ']'),!unusedResources.contains(entry.getNamedChild(""String_Node_Str"")),""String_Node_Str"");
    i++;
  }
}","private void checkAllInterlinked(List<ValidationMessage> errors,List<Element> entries,NodeStack stack,Element bundle){
  Map<String,Element> visitedResources=new HashMap<String,Element>();
  HashMap<Element,Element> candidateEntries=new HashMap<Element,Element>();
  List<Element> candidateResources=new ArrayList<Element>();
  for (  Element entry : entries) {
    candidateEntries.put(entry.getNamedChild(""String_Node_Str""),entry);
    candidateResources.add(entry.getNamedChild(""String_Node_Str""));
  }
  List<String> sheets=new ArrayList();
  List<Element> links=bundle.getChildren(""String_Node_Str"");
  for (  Element link : links) {
    if (link.getChildValue(""String_Node_Str"").equals(""String_Node_Str"")) {
      sheets.add(link.getChildValue(""String_Node_Str""));
    }
  }
  if (!sheets.isEmpty()) {
    for (    Element r : candidateResources) {
      String url=r.getChildValue(""String_Node_Str"");
      if (sheets.contains(url))       visitedResources.put(url,r);
    }
  }
  List<Element> unusedResources=new ArrayList<Element>();
  boolean reverseLinksFound;
  do {
    reverseLinksFound=false;
    followResourceLinks(entries.get(0),visitedResources,candidateEntries,candidateResources,errors,stack);
    unusedResources.clear();
    unusedResources.addAll(candidateResources);
    unusedResources.removeAll(visitedResources.values());
    for (    Element unusedResource : unusedResources) {
      List<String> references=findReferences(unusedResource);
      for (      String reference : references) {
        if (visitedResources.containsKey(reference)) {
          visitedResources.put(reference,unusedResource);
          reverseLinksFound=true;
        }
      }
    }
  }
 while (reverseLinksFound);
  int i=0;
  for (  Element entry : entries) {
    rule(errors,IssueType.INFORMATIONAL,entry.line(),entry.col(),stack.addToLiteralPath(""String_Node_Str"" + '[' + (i + 1)+ ']'),!unusedResources.contains(entry.getNamedChild(""String_Node_Str"")),""String_Node_Str"");
    i++;
  }
}",0.9906824477461595
23115,"private Type processValue(Sheet sheet,int row,String column,String source,ElementDefinition e) throws Exception {
  if (Utilities.noString(source))   return null;
  if (e.getType().size() != 1)   throw new Exception(""String_Node_Str"" + column + ""String_Node_Str""+ getLocation(row)+ ""String_Node_Str""+ column);
  String type=e.getType().get(0).getCode();
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + type);
  if (sd != null && sd.hasBaseDefinition() && sd.getDerivation() == TypeDerivationRule.CONSTRAINT)   type=sd.getType();
  if (source.startsWith(""String_Node_Str"")) {
    JsonParser json=new JsonParser();
    return json.parseType(source,type);
  }
 else   if (source.startsWith(""String_Node_Str"")) {
    XmlParser xml=new XmlParser();
    return xml.parseType(source,type);
  }
 else {
    source=source.trim();
    if (source.startsWith(""String_Node_Str"") && source.endsWith(""String_Node_Str""))     source=source.substring(1,source.length() - 1);
    if (type.equals(""String_Node_Str""))     return new StringType(source);
    if (type.equals(""String_Node_Str""))     return new BooleanType(Boolean.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new IntegerType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new UnsignedIntType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new PositiveIntType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new DecimalType(new BigDecimal(source));
    if (type.equals(""String_Node_Str""))     return new Base64BinaryType(Base64.decode(source.toCharArray()));
    if (type.equals(""String_Node_Str""))     return new InstantType(source);
    if (type.equals(""String_Node_Str""))     return new UriType(source);
    if (type.equals(""String_Node_Str""))     return new DateType(source);
    if (type.equals(""String_Node_Str""))     return new DateTimeType(source);
    if (type.equals(""String_Node_Str""))     return new TimeType(source);
    if (type.equals(""String_Node_Str""))     return new CodeType(source);
    if (type.equals(""String_Node_Str""))     return new OidType(source);
    if (type.equals(""String_Node_Str""))     return new UuidType(source);
    if (type.equals(""String_Node_Str""))     return new IdType(source);
    if (type.startsWith(""String_Node_Str"")) {
      Reference r=new Reference();
      r.setReference(source);
      return r;
    }
    if (type.equals(""String_Node_Str"")) {
      if (source.contains(""String_Node_Str"")) {
        String[] parts=source.split(""String_Node_Str"");
        Period p=new Period();
        p.setStartElement(new DateTimeType(parts[0].trim()));
        if (parts.length > 1)         p.setEndElement(new DateTimeType(parts[1].trim()));
        return p;
      }
 else       throw new Exception(""String_Node_Str"" + source + ""String_Node_Str"");
    }
    if (type.equals(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      if (source.contains(""String_Node_Str"")) {
        String[] parts=source.split(""String_Node_Str"");
        String system=""String_Node_Str"";
        if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         system=""String_Node_Str"" + parts[0];
        String code=parts[1];
        String display=parts.length > 2 ? parts[2] : null;
        cc.addCoding().setSystem(system).setCode(code).setDisplay(display);
      }
 else       throw new Exception(""String_Node_Str"" + source + ""String_Node_Str"");
      return cc;
    }
    if (type.equals(""String_Node_Str"")) {
      Identifier id=new Identifier();
      id.setSystem(""String_Node_Str"");
      id.setValue(source);
      return id;
    }
    if (type.equals(""String_Node_Str"")) {
      int s=0;
      if (source.startsWith(""String_Node_Str"") || source.startsWith(""String_Node_Str""))       s=2;
 else       if (source.startsWith(""String_Node_Str"") || source.startsWith(""String_Node_Str""))       s=1;
      int i=s;
      while (i < source.length() && Character.isDigit(source.charAt(i)))       i++;
      Quantity q=new Quantity();
      if (s > 0)       q.setComparator(QuantityComparator.fromCode(source.substring(0,s)));
      if (i > s)       q.setValue(new BigDecimal(source.substring(s,i)));
      if (i < source.length())       q.setUnit(source.substring(i).trim());
      return q;
    }
    throw new Exception(""String_Node_Str"" + source + ""String_Node_Str""+ column+ ""String_Node_Str""+ type+ ""String_Node_Str""+ getLocation(row));
  }
}","private Type processValue(Sheet sheet,int row,String column,String source,ElementDefinition e) throws Exception {
  if (Utilities.noString(source))   return null;
  if (e.getType().size() != 1)   throw new Exception(""String_Node_Str"" + column + ""String_Node_Str""+ getLocation(row)+ ""String_Node_Str""+ column);
  String type=e.getType().get(0).getCode();
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + type);
  if (sd != null && sd.hasBaseDefinition() && sd.getDerivation() == TypeDerivationRule.CONSTRAINT)   type=sd.getType();
  if (source.startsWith(""String_Node_Str"")) {
    JsonParser json=new JsonParser();
    try {
      return json.parseType(source,type);
    }
 catch (    Exception e2) {
      throw new Exception(""String_Node_Str"" + source);
    }
  }
 else   if (source.startsWith(""String_Node_Str"")) {
    XmlParser xml=new XmlParser();
    try {
      return xml.parseType(source,type);
    }
 catch (    Exception e2) {
      throw new Exception(""String_Node_Str"" + source);
    }
  }
 else {
    source=source.trim();
    if (source.startsWith(""String_Node_Str"") && source.endsWith(""String_Node_Str""))     source=source.substring(1,source.length() - 1);
    if (type.equals(""String_Node_Str""))     return new StringType(source);
    if (type.equals(""String_Node_Str""))     return new BooleanType(Boolean.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new IntegerType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new UnsignedIntType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new PositiveIntType(Integer.valueOf(source));
    if (type.equals(""String_Node_Str""))     return new DecimalType(new BigDecimal(source));
    if (type.equals(""String_Node_Str""))     return new Base64BinaryType(Base64.decode(source.toCharArray()));
    if (type.equals(""String_Node_Str""))     return new InstantType(source);
    if (type.equals(""String_Node_Str""))     return new UriType(source);
    if (type.equals(""String_Node_Str""))     return new DateType(source);
    if (type.equals(""String_Node_Str""))     return new DateTimeType(source);
    if (type.equals(""String_Node_Str""))     return new TimeType(source);
    if (type.equals(""String_Node_Str""))     return new CodeType(source);
    if (type.equals(""String_Node_Str""))     return new OidType(source);
    if (type.equals(""String_Node_Str""))     return new UuidType(source);
    if (type.equals(""String_Node_Str""))     return new IdType(source);
    if (type.startsWith(""String_Node_Str"")) {
      Reference r=new Reference();
      r.setReference(source);
      return r;
    }
    if (type.equals(""String_Node_Str"")) {
      if (source.contains(""String_Node_Str"")) {
        String[] parts=source.split(""String_Node_Str"");
        Period p=new Period();
        p.setStartElement(new DateTimeType(parts[0].trim()));
        if (parts.length > 1)         p.setEndElement(new DateTimeType(parts[1].trim()));
        return p;
      }
 else       throw new Exception(""String_Node_Str"" + source + ""String_Node_Str"");
    }
    if (type.equals(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      if (source.contains(""String_Node_Str"")) {
        String[] parts=source.split(""String_Node_Str"");
        String system=""String_Node_Str"";
        if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         if (parts[0].equalsIgnoreCase(""String_Node_Str""))         system=""String_Node_Str"";
 else         system=""String_Node_Str"" + parts[0];
        String code=parts[1];
        String display=parts.length > 2 ? parts[2] : null;
        cc.addCoding().setSystem(system).setCode(code).setDisplay(display);
      }
 else       throw new Exception(""String_Node_Str"" + source + ""String_Node_Str"");
      return cc;
    }
    if (type.equals(""String_Node_Str"")) {
      Identifier id=new Identifier();
      id.setSystem(""String_Node_Str"");
      id.setValue(source);
      return id;
    }
    if (type.equals(""String_Node_Str"")) {
      int s=0;
      if (source.startsWith(""String_Node_Str"") || source.startsWith(""String_Node_Str""))       s=2;
 else       if (source.startsWith(""String_Node_Str"") || source.startsWith(""String_Node_Str""))       s=1;
      int i=s;
      while (i < source.length() && Character.isDigit(source.charAt(i)))       i++;
      Quantity q=new Quantity();
      if (s > 0)       q.setComparator(QuantityComparator.fromCode(source.substring(0,s)));
      if (i > s)       q.setValue(new BigDecimal(source.substring(s,i)));
      if (i < source.length())       q.setUnit(source.substring(i).trim());
      return q;
    }
    throw new Exception(""String_Node_Str"" + source + ""String_Node_Str""+ column+ ""String_Node_Str""+ type+ ""String_Node_Str""+ getLocation(row));
  }
}",0.9778284293410692
23116,"private void bpCheck(List<ValidationMessage> errors,IssueType invalid,int line,int col,String literalPath,boolean test,String message){
  if (bpWarnings != null) {
switch (bpWarnings) {
case Error:
      rule(errors,invalid,line,col,literalPath,test,message);
case Warning:
    warning(errors,invalid,line,col,literalPath,test,message);
case Hint:
  hint(errors,invalid,line,col,literalPath,test,message);
default :
}
}
}","private void bpCheck(List<ValidationMessage> errors,IssueType invalid,int line,int col,String literalPath,boolean test,String message){
  if (bpWarnings != null) {
switch (bpWarnings) {
case Error:
      rule(errors,invalid,line,col,literalPath,test,message);
    break;
case Warning:
  warning(errors,invalid,line,col,literalPath,test,message);
break;
case Hint:
hint(errors,invalid,line,col,literalPath,test,message);
break;
default :
}
}
}",0.966396292004635
23117,"private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if ((definition.hasBase() && definition.getBase().getMax().equals(""String_Node_Str"")) || (definition.hasMax() && definition.getMax().equals(""String_Node_Str""))) {
          if (c.getPieces().size() > 0)           c.addPiece(gen.new Piece(""String_Node_Str""));
          if (definition.hasOrderMeaning()) {
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getOrderMeaning(),null));
          }
 else {
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
          if (isCoded(definition.getFixed()) && !hasDescription(definition.getFixed())) {
            Piece p=describeCoded(gen,definition.getFixed());
            if (p != null)             c.getPieces().add(p);
          }
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}","private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if ((definition.hasBase() && definition.getBase().getMax().equals(""String_Node_Str"")) || (definition.hasMax() && definition.getMax().equals(""String_Node_Str""))) {
          if (c.getPieces().size() > 0)           c.addPiece(gen.new Piece(""String_Node_Str""));
          if (definition.hasOrderMeaning()) {
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getOrderMeaning(),null));
          }
 else {
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
          if (isCoded(definition.getFixed()) && !hasDescription(definition.getFixed())) {
            Piece p=describeCoded(gen,definition.getFixed());
            if (p != null)             c.getPieces().add(p);
          }
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}",0.998931623931624
23118,"private String codeForAggregation(AggregationMode a){
switch (a) {
case BUNDLED:
    return ""String_Node_Str"";
case CONTAINED:
  return ""String_Node_Str"";
case REFERENCED:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}","private String codeForAggregation(AggregationMode a){
switch (a) {
case BUNDLED:
    return ""String_Node_Str"";
case CONTAINED:
  return ""String_Node_Str"";
case REFERENCED:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.8663793103448276
23119,"private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if ((definition.hasBase() && definition.getBase().getMax().equals(""String_Node_Str"")) || (definition.hasMax() && definition.getMax().equals(""String_Node_Str""))) {
          if (c.getPieces().size() > 0)           c.addPiece(gen.new Piece(""String_Node_Str""));
          if (definition.hasOrderMeaning()) {
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getOrderMeaning(),null));
          }
 else {
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
          if (isCoded(definition.getFixed()) && !hasDescription(definition.getFixed())) {
            Piece p=describeCoded(gen,definition.getFixed());
            if (p != null)             c.getPieces().add(p);
          }
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}","private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if ((definition.hasBase() && definition.getBase().getMax().equals(""String_Node_Str"")) || (definition.hasMax() && definition.getMax().equals(""String_Node_Str""))) {
          if (c.getPieces().size() > 0)           c.addPiece(gen.new Piece(""String_Node_Str""));
          if (definition.hasOrderMeaning()) {
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getOrderMeaning(),null));
          }
 else {
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
          if (isCoded(definition.getFixed()) && !hasDescription(definition.getFixed())) {
            Piece p=describeCoded(gen,definition.getFixed());
            if (p != null)             c.getPieces().add(p);
          }
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}",0.998931623931624
23120,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPathSource(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPathDest(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPathSource(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summarizeSlicing(dSlice) + ""String_Node_Str""+ summarizeSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  if (t.getCode().equals(""String_Node_Str"")) {
                    int baseStart=base.getElement().indexOf(currentBase) + 1;
                    int baseMax=baseStart + 1;
                    while (baseMax < base.getElement().size() && base.getElement().get(baseMax).getPath().startsWith(currentBase.getPath() + ""String_Node_Str""))                     baseMax++;
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,base,differential,baseStart,start - 1,baseMax - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),base.getElement().get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
 else {
                    StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                    if (dt == null)                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                    contextName=dt.getUrl();
                    int start=diffCursor;
                    while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                     diffCursor++;
                    processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                  }
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPathDest(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.9462889726846316
23121,"public static ElementDefinitionSlicingDiscriminatorComponent interpretR2Discriminator(String discriminator,boolean isExists){
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.PROFILE,discriminator.length() == 8 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 9));
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.TYPE,discriminator.length() == 5 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 6));
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.EXISTS,discriminator.length() == 7 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 8));
  if (isExists)   return makeDiscriminator(DiscriminatorType.EXISTS,discriminator);
  return new ElementDefinitionSlicingDiscriminatorComponent().setType(DiscriminatorType.VALUE).setPath(discriminator);
}","public static ElementDefinitionSlicingDiscriminatorComponent interpretR2Discriminator(String discriminator,boolean isExists){
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.PATTERN,discriminator.length() == 8 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 9));
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.PROFILE,discriminator.length() == 8 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 9));
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.TYPE,discriminator.length() == 5 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 6));
  if (discriminator.endsWith(""String_Node_Str""))   return makeDiscriminator(DiscriminatorType.EXISTS,discriminator.length() == 7 ? ""String_Node_Str"" : discriminator.substring(discriminator.length() - 8));
  if (isExists)   return makeDiscriminator(DiscriminatorType.EXISTS,discriminator);
  return new ElementDefinitionSlicingDiscriminatorComponent().setType(DiscriminatorType.VALUE).setPath(discriminator);
}",0.9016236867239732
23122,"private String codeForAggregation(AggregationMode a){
switch (a) {
case BUNDLED:
    return ""String_Node_Str"";
case CONTAINED:
  return ""String_Node_Str"";
case REFERENCED:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}","private String codeForAggregation(AggregationMode a){
switch (a) {
case BUNDLED:
    return ""String_Node_Str"";
case CONTAINED:
  return ""String_Node_Str"";
case REFERENCED:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.8663793103448276
23123,"private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}","private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
return result;
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}",0.9979716024340772
23124,"private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}","private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
return result;
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}",0.9979716024340772
23125,"private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    if (hostServices != null) {
      String s=convertToString(item);
      if (item.fhirType().equals(""String_Node_Str"")) {
        Property p=item.getChildByName(""String_Node_Str"");
        if (p.hasValues())         s=convertToString(p.getValues().get(0));
      }
      Base res=null;
      if (s.startsWith(""String_Node_Str"")) {
        String id=s.substring(1);
        Property p=context.resource.getChildByName(""String_Node_Str"");
        for (        Base c : p.getValues()) {
          if (id.equals(c.getIdBase()))           res=c;
        }
      }
 else       res=hostServices.resolveReference(context.appInfo,s);
      if (res != null)       result.add(res);
    }
  }
  return result;
}","private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    if (hostServices != null) {
      String s=convertToString(item);
      if (item.fhirType().equals(""String_Node_Str"")) {
        Property p=item.getChildByName(""String_Node_Str"");
        if (p != null && p.hasValues())         s=convertToString(p.getValues().get(0));
 else         s=null;
      }
      if (s != null) {
        Base res=null;
        if (s.startsWith(""String_Node_Str"")) {
          String id=s.substring(1);
          Property p=context.resource.getChildByName(""String_Node_Str"");
          for (          Base c : p.getValues()) {
            if (id.equals(c.getIdBase())) {
              res=c;
              break;
            }
          }
        }
 else         res=hostServices.resolveReference(context.appInfo,s);
        if (res != null)         result.add(res);
      }
    }
  }
  return result;
}",0.8677021960364221
23126,"private TypeDetails executeType(String type,ExpressionNode exp,boolean atEntry) throws PathEngineException, DefinitionException {
  if (atEntry && Character.isUpperCase(exp.getName().charAt(0)) && tail(type).equals(exp.getName()))   return new TypeDetails(CollectionStatus.SINGLETON,type);
  TypeDetails result=new TypeDetails(null);
  getChildTypesByName(type,exp.getName(),result);
  return result;
}","private TypeDetails executeType(String type,ExpressionNode exp,boolean atEntry) throws PathEngineException, DefinitionException {
  if (atEntry && Character.isUpperCase(exp.getName().charAt(0)) && hashTail(type).equals(exp.getName()))   return new TypeDetails(CollectionStatus.SINGLETON,type);
  TypeDetails result=new TypeDetails(null);
  getChildTypesByName(type,exp.getName(),result);
  return result;
}",0.9925742574257426
23127,"private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case MemberOf:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}","private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
return result;
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case MemberOf:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}",0.9980171844018506
23128,"private List<Base> funcReplace(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  throw new Error(""String_Node_Str"");
}","private List<Base> funcReplace(ExecutionContext context,List<Base> focus,ExpressionNode exp) throws FHIRException, PathEngineException {
  List<Base> result=new ArrayList<Base>();
  if (focus.size() == 1) {
    String f=convertToString(focus.get(0));
    if (!Utilities.noString(f)) {
      if (exp.getParameters().size() != 2) {
        String t=convertToString(execute(context,focus,exp.getParameters().get(0),true));
        String r=convertToString(execute(context,focus,exp.getParameters().get(1),true));
        String n=f.replace(t,r);
        result.add(new StringType(n));
      }
 else {
        throw new PathEngineException(String.format(""String_Node_Str"",exp.getParameters().size()));
      }
    }
 else {
      throw new PathEngineException(String.format(""String_Node_Str""));
    }
  }
 else {
    throw new PathEngineException(String.format(""String_Node_Str"",focus.size()));
  }
  return result;
}",0.2447418738049713
23129,"public String getDiffAsHtml(TypeLinkProvider linker) throws IOException {
  this.linker=linker;
  start();
  header(""String_Node_Str"");
  for (  String s : sorted(revision.types.keySet())) {
    StructureDefinition orig=original.types.get(s);
    StructureDefinition rev=revision.types.get(s);
    if (orig == null) {
      markNew(rev.getName(),true,false);
    }
 else     if (rev.getKind() == StructureDefinitionKind.PRIMITIVETYPE) {
      markNoChanges(rev.getName(),true);
    }
 else     if (rev.hasDerivation() && orig.hasDerivation() && rev.getDerivation() != orig.getDerivation()) {
      markChanged(rev.getName(),""String_Node_Str"" + orig.getDerivation().toCode() + ""String_Node_Str""+ rev.getDerivation().toCode(),true);
    }
 else {
      compare(orig,rev);
    }
  }
  for (  String s : sorted(original.types.keySet())) {
    StructureDefinition orig=original.types.get(s);
    StructureDefinition rev=revision.types.get(s);
    if (rev == null)     markDeleted(orig.getName(),true);
  }
  header(""String_Node_Str"");
  for (  String s : sorted(revision.resources.keySet())) {
    StructureDefinition orig=original.resources.get(checkRename(s));
    StructureDefinition rev=revision.resources.get(s);
    if (orig == null) {
      markNew(rev.getName(),true,true);
    }
 else {
      compare(orig,rev);
    }
  }
  for (  String s : sorted(original.resources.keySet())) {
    StructureDefinition orig=original.resources.get(s);
    StructureDefinition rev=revision.resources.get(s);
    if (rev == null)     markDeleted(orig.getName(),true);
  }
  return new XhtmlComposer().setPretty(true).compose(tbl);
}","public String getDiffAsHtml(TypeLinkProvider linker) throws IOException {
  this.linker=linker;
  start();
  header(""String_Node_Str"");
  for (  String s : sorted(revision.types.keySet())) {
    StructureDefinition orig=original.types.get(s);
    StructureDefinition rev=revision.types.get(s);
    if (orig == null) {
      markNew(rev.getName(),true,false);
    }
 else     if (rev.getKind() == StructureDefinitionKind.PRIMITIVETYPE) {
      markNoChanges(rev.getName(),true);
    }
 else     if (rev.hasDerivation() && orig.hasDerivation() && rev.getDerivation() != orig.getDerivation()) {
      markChanged(rev.getName(),""String_Node_Str"" + orig.getDerivation().toCode() + ""String_Node_Str""+ rev.getDerivation().toCode(),true);
    }
 else {
      compare(orig,rev);
    }
  }
  for (  String s : sorted(original.types.keySet())) {
    StructureDefinition orig=original.types.get(s);
    StructureDefinition rev=revision.types.get(s);
    if (rev == null)     markDeleted(orig.getName(),true);
  }
  header(""String_Node_Str"");
  for (  String s : sorted(revision.resources.keySet())) {
    StructureDefinition orig=original.resources.get(checkRename(s));
    StructureDefinition rev=revision.resources.get(s);
    if (orig == null) {
      markNew(rev.getName(),true,true);
    }
 else {
      compare(orig,rev);
    }
  }
  for (  String s : sorted(original.resources.keySet())) {
    StructureDefinition orig=original.resources.get(s);
    StructureDefinition rev=revision.resources.get(s);
    if (rev == null)     markDeleted(orig.getName(),true);
  }
  return new XhtmlComposer(false,true).compose(tbl);
}",0.994430693069307
23130,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    comp.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    prop(name,comp.compose(html));
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(true,htmlPretty);
    prop(name,comp.compose(html));
  }
}",0.8136645962732919
23131,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    if (html.getNodeType() != NodeType.Text)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(true,htmlPretty);
    boolean oldPretty=xml.isPretty();
    if (html.getNodeType() != NodeType.Text)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}",0.9311969839773798
23132,"private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv())));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs,null));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}","private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer(true,false).composePlainText(oo.getText().getDiv())));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs,null));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}",0.7096774193548387
23133,"private void inject(Element er,XhtmlNode x,NarrativeStatus status){
  Element txt=XMLUtil.getNamedChild(er,""String_Node_Str"");
  if (txt == null) {
    txt=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(er);
    while (n != null && (n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"")|| n.getNodeName().equals(""String_Node_Str"")))     n=XMLUtil.getNextSibling(n);
    if (n == null)     er.appendChild(txt);
 else     er.insertBefore(txt,n);
  }
  Element st=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (st == null) {
    st=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(txt);
    if (n == null)     txt.appendChild(st);
 else     txt.insertBefore(st,n);
  }
  st.setAttribute(""String_Node_Str"",status.toCode());
  Element div=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (div == null) {
    div=er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str"");
    div.setAttribute(""String_Node_Str"",FormatUtilities.XHTML_NS);
    txt.appendChild(div);
  }
  if (div.hasChildNodes())   div.appendChild(er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str""));
  new XhtmlComposer().compose(div,x);
}","private void inject(Element er,XhtmlNode x,NarrativeStatus status){
  Element txt=XMLUtil.getNamedChild(er,""String_Node_Str"");
  if (txt == null) {
    txt=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(er);
    while (n != null && (n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"")|| n.getNodeName().equals(""String_Node_Str"")))     n=XMLUtil.getNextSibling(n);
    if (n == null)     er.appendChild(txt);
 else     er.insertBefore(txt,n);
  }
  Element st=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (st == null) {
    st=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(txt);
    if (n == null)     txt.appendChild(st);
 else     txt.insertBefore(st,n);
  }
  st.setAttribute(""String_Node_Str"",status.toCode());
  Element div=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (div == null) {
    div=er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str"");
    div.setAttribute(""String_Node_Str"",FormatUtilities.XHTML_NS);
    txt.appendChild(div);
  }
  if (div.hasChildNodes())   div.appendChild(er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str""));
  new XhtmlComposer(true,pretty).compose(div,x);
}",0.996027446731672
23134,"public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer().setXmlOnly(true).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}","public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer(true,false).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}",0.9845774213448488
23135,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    comp.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    prop(name,comp.compose(html));
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(true,htmlPretty);
    prop(name,comp.compose(html));
  }
}",0.8136645962732919
23136,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(true,htmlPretty);
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}",0.9634146341463414
23137,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str"",IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str"",IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer(true,false).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9977345892452604
23138,"private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv())));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs,null));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}","private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer(true,false).composePlainText(oo.getText().getDiv())));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs,null));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}",0.7096774193548387
23139,"private void inject(Element er,XhtmlNode x,NarrativeStatus status){
  Element txt=XMLUtil.getNamedChild(er,""String_Node_Str"");
  if (txt == null) {
    txt=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(er);
    while (n != null && (n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"")|| n.getNodeName().equals(""String_Node_Str"")))     n=XMLUtil.getNextSibling(n);
    if (n == null)     er.appendChild(txt);
 else     er.insertBefore(txt,n);
  }
  Element st=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (st == null) {
    st=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(txt);
    if (n == null)     txt.appendChild(st);
 else     txt.insertBefore(st,n);
  }
  st.setAttribute(""String_Node_Str"",status.toCode());
  Element div=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (div == null) {
    div=er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str"");
    div.setAttribute(""String_Node_Str"",FormatUtilities.XHTML_NS);
    txt.appendChild(div);
  }
  if (div.hasChildNodes())   div.appendChild(er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str""));
  new XhtmlComposer().compose(div,x);
}","private void inject(Element er,XhtmlNode x,NarrativeStatus status){
  Element txt=XMLUtil.getNamedChild(er,""String_Node_Str"");
  if (txt == null) {
    txt=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(er);
    while (n != null && (n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"") || n.getNodeName().equals(""String_Node_Str"")|| n.getNodeName().equals(""String_Node_Str"")))     n=XMLUtil.getNextSibling(n);
    if (n == null)     er.appendChild(txt);
 else     er.insertBefore(txt,n);
  }
  Element st=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (st == null) {
    st=er.getOwnerDocument().createElementNS(FormatUtilities.FHIR_NS,""String_Node_Str"");
    Element n=XMLUtil.getFirstChild(txt);
    if (n == null)     txt.appendChild(st);
 else     txt.insertBefore(st,n);
  }
  st.setAttribute(""String_Node_Str"",status.toCode());
  Element div=XMLUtil.getNamedChild(txt,""String_Node_Str"");
  if (div == null) {
    div=er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str"");
    div.setAttribute(""String_Node_Str"",FormatUtilities.XHTML_NS);
    txt.appendChild(div);
  }
  if (div.hasChildNodes())   div.appendChild(er.getOwnerDocument().createElementNS(FormatUtilities.XHTML_NS,""String_Node_Str""));
  new XhtmlComposer(true,false).compose(div,x);
}",0.9963872832369942
23140,"public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer().setXmlOnly(true).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}","public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer(true,false).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}",0.9845774213448488
23141,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer(XhtmlComposer.XML).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9963311167163494
23142,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    comp.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    prop(name,comp.compose(html));
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(XhtmlComposer.XML,htmlPretty);
    prop(name,comp.compose(html));
  }
}",0.7975646879756468
23143,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(XhtmlComposer.XML,htmlPretty);
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}",0.9526270456503014
23144,"@Override public Base[] getProperty(int hash,String name,boolean checkValid) throws FHIRException {
switch (hash) {
case -892481550:
    return this.status == null ? new Base[0] : new Base[]{this.status};
case 99473:
  return this.div == null ? new Base[0] : new Base[]{new StringType(new org.hl7.fhir.utilities.xhtml.XhtmlComposer().setXmlOnly(true).composeEx(this.div))};
default :
return super.getProperty(hash,name,checkValid);
}
}","@Override public Base[] getProperty(int hash,String name,boolean checkValid) throws FHIRException {
switch (hash) {
case -892481550:
    return this.status == null ? new Base[0] : new Base[]{this.status};
case 99473:
  return this.div == null ? new Base[0] : new Base[]{new StringType(new org.hl7.fhir.utilities.xhtml.XhtmlComposer(XhtmlComposer.XML).composeEx(this.div))};
default :
return super.getProperty(hash,name,checkValid);
}
}",0.9632183908045976
23145,"private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv()),TerminologyServiceErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}","private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer(XhtmlComposer.XML).composePlainText(oo.getText().getDiv()),TerminologyServiceErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}",0.981981981981982
23146,"private void inject(org.hl7.fhir.dstu3.elementmodel.Element er,XhtmlNode x,NarrativeStatus status) throws DefinitionException, IOException {
  if (!x.hasAttribute(""String_Node_Str""))   x.setAttribute(""String_Node_Str"",""String_Node_Str"");
  org.hl7.fhir.dstu3.elementmodel.Element txt=er.getNamedChild(""String_Node_Str"");
  if (txt == null) {
    txt=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",er.getProperty().getChild(null,""String_Node_Str""));
    int i=0;
    while (i < er.getChildren().size() && (er.getChildren().get(i).getName().equals(""String_Node_Str"") || er.getChildren().get(i).getName().equals(""String_Node_Str"") || er.getChildren().get(i).getName().equals(""String_Node_Str"")|| er.getChildren().get(i).getName().equals(""String_Node_Str"")))     i++;
    if (i >= er.getChildren().size())     er.getChildren().add(txt);
 else     er.getChildren().add(i,txt);
  }
  org.hl7.fhir.dstu3.elementmodel.Element st=txt.getNamedChild(""String_Node_Str"");
  if (st == null) {
    st=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",txt.getProperty().getChild(null,""String_Node_Str""));
    txt.getChildren().add(0,st);
  }
  st.setValue(status.toCode());
  org.hl7.fhir.dstu3.elementmodel.Element div=txt.getNamedChild(""String_Node_Str"");
  if (div == null) {
    div=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",txt.getProperty().getChild(null,""String_Node_Str""));
    txt.getChildren().add(div);
    div.setValue(new XhtmlComposer().setXmlOnly(true).compose(x));
  }
  div.setXhtml(x);
}","private void inject(org.hl7.fhir.dstu3.elementmodel.Element er,XhtmlNode x,NarrativeStatus status) throws DefinitionException, IOException {
  if (!x.hasAttribute(""String_Node_Str""))   x.setAttribute(""String_Node_Str"",""String_Node_Str"");
  org.hl7.fhir.dstu3.elementmodel.Element txt=er.getNamedChild(""String_Node_Str"");
  if (txt == null) {
    txt=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",er.getProperty().getChild(null,""String_Node_Str""));
    int i=0;
    while (i < er.getChildren().size() && (er.getChildren().get(i).getName().equals(""String_Node_Str"") || er.getChildren().get(i).getName().equals(""String_Node_Str"") || er.getChildren().get(i).getName().equals(""String_Node_Str"")|| er.getChildren().get(i).getName().equals(""String_Node_Str"")))     i++;
    if (i >= er.getChildren().size())     er.getChildren().add(txt);
 else     er.getChildren().add(i,txt);
  }
  org.hl7.fhir.dstu3.elementmodel.Element st=txt.getNamedChild(""String_Node_Str"");
  if (st == null) {
    st=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",txt.getProperty().getChild(null,""String_Node_Str""));
    txt.getChildren().add(0,st);
  }
  st.setValue(status.toCode());
  org.hl7.fhir.dstu3.elementmodel.Element div=txt.getNamedChild(""String_Node_Str"");
  if (div == null) {
    div=new org.hl7.fhir.dstu3.elementmodel.Element(""String_Node_Str"",txt.getProperty().getChild(null,""String_Node_Str""));
    txt.getChildren().add(div);
    div.setValue(new XhtmlComposer(XhtmlComposer.XML).compose(x));
  }
  div.setXhtml(x);
}",0.9895833333333334
23147,"public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer().setXmlOnly(true).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}","public static String getErrorDescription(OperationOutcome error){
  if (error.hasText() && error.getText().hasDiv())   return new XhtmlComposer(XhtmlComposer.XML).composePlainText(error.getText().getDiv());
  StringBuilder b=new StringBuilder();
  for (  OperationOutcomeIssueComponent t : error.getIssue())   if (t.getSeverity() == IssueSeverity.ERROR)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.FATAL)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.WARNING)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
 else   if (t.getSeverity() == IssueSeverity.INFORMATION)   b.append(""String_Node_Str"" + t.getDetails() + ""String_Node_Str"");
  return b.toString();
}",0.9828009828009828
23148,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer(XhtmlComposer.XML,false).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9958753437213566
23149,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    comp.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    prop(name,comp.compose(html));
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    prop(name,""String_Node_Str"" + xhtmlMessage + ""String_Node_Str"");
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(XhtmlComposer.XML,htmlPretty);
    prop(name,comp.compose(html));
  }
}",0.7975646879756468
23150,"protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer();
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    comp.setXmlOnly(true);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}","protected void composeXhtml(String name,XhtmlNode html) throws IOException {
  if (!Utilities.noString(xhtmlMessage)) {
    xml.enter(XhtmlComposer.XHTML_NS,name);
    xml.comment(xhtmlMessage,false);
    xml.exit(XhtmlComposer.XHTML_NS,name);
  }
 else {
    XhtmlComposer comp=new XhtmlComposer(XhtmlComposer.XML,htmlPretty);
    boolean oldPretty=xml.isPretty();
    xml.setPretty(htmlPretty);
    if (html.getNodeType() != NodeType.Text && html.getNsDecl() == null)     xml.namespace(XhtmlComposer.XHTML_NS,null);
    comp.compose(xml,html);
    xml.setPretty(oldPretty);
  }
}",0.9526270456503014
23151,"@Override public Base[] getProperty(int hash,String name,boolean checkValid) throws FHIRException {
switch (hash) {
case -892481550:
    return this.status == null ? new Base[0] : new Base[]{this.status};
case 99473:
  return this.div == null ? new Base[0] : new Base[]{new StringType(new org.hl7.fhir.utilities.xhtml.XhtmlComposer().setXmlOnly(true).composeEx(this.div))};
default :
return super.getProperty(hash,name,checkValid);
}
}","@Override public Base[] getProperty(int hash,String name,boolean checkValid) throws FHIRException {
switch (hash) {
case -892481550:
    return this.status == null ? new Base[0] : new Base[]{this.status};
case 99473:
  return this.div == null ? new Base[0] : new Base[]{new StringType(new org.hl7.fhir.utilities.xhtml.XhtmlComposer(XhtmlComposer.XML,false).composeEx(this.div))};
default :
return super.getProperty(hash,name,checkValid);
}
}",0.958904109589041
23152,"private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv()),TerminologyServiceErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}","private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer(XhtmlComposer.XML,false).composePlainText(oo.getText().getDiv()),TerminologyServiceErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}",0.9797979797979798
23153,"private void writeText(XhtmlNode node) throws IOException {
  for (  char c : node.getContent().toCharArray()) {
    if (c == '&')     dst.append(""String_Node_Str"");
 else     if (c == '<')     dst.append(""String_Node_Str"");
 else     if (c == '>')     dst.append(""String_Node_Str"");
 else     if (c == '""')     dst.append(""String_Node_Str"");
 else     if (xmlOnly) {
      dst.append(c);
    }
 else {
      if (c == XhtmlNode.NBSP.charAt(0))       dst.append(""String_Node_Str"");
 else       if (c == (char)0xA7)       dst.append(""String_Node_Str"");
 else       if (c == (char)169)       dst.append(""String_Node_Str"");
 else       if (c == (char)8482)       dst.append(""String_Node_Str"");
 else       if (c == (char)956)       dst.append(""String_Node_Str"");
 else       if (c == (char)174)       dst.append(""String_Node_Str"");
 else       dst.append(c);
    }
  }
}","private void writeText(XhtmlNode node,boolean escapeQuotes) throws IOException {
  for (  char c : node.getContent().toCharArray()) {
    if (c == '&')     dst.append(""String_Node_Str"");
 else     if (c == '<')     dst.append(""String_Node_Str"");
 else     if (c == '>')     dst.append(""String_Node_Str"");
 else     if (escapeQuotes && c == '""')     dst.append(""String_Node_Str"");
 else     if (xmlOnly) {
      dst.append(c);
    }
 else {
      if (c == XhtmlNode.NBSP.charAt(0))       dst.append(""String_Node_Str"");
 else       if (c == (char)0xA7)       dst.append(""String_Node_Str"");
 else       if (c == (char)169)       dst.append(""String_Node_Str"");
 else       if (c == (char)8482)       dst.append(""String_Node_Str"");
 else       if (c == (char)956)       dst.append(""String_Node_Str"");
 else       if (c == (char)174)       dst.append(""String_Node_Str"");
 else       dst.append(c);
    }
  }
}",0.9790842283776144
23154,"private void writeElement(String indent,XhtmlNode node) throws IOException {
  if (!pretty)   indent=""String_Node_Str"";
  if (node.getChildNodes().size() == 0)   dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else {
    boolean act=node.allChildrenAreText();
    if (act || !pretty)     dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str"");
 else     dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str"");
    if (node.getName() == ""String_Node_Str"" && node.getElement(""String_Node_Str"") == null)     dst.append(indent + ""String_Node_Str"" + (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
    for (    XhtmlNode c : node.getChildNodes())     writeNode(indent + ""String_Node_Str"",c);
    if (act)     dst.append(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else     if (node.getChildNodes().get(node.getChildNodes().size() - 1).getNodeType() == NodeType.Text)     dst.append((isPretty() ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + node.getName()+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else     dst.append(indent + ""String_Node_Str"" + node.getName()+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","private void writeElement(String indent,XhtmlNode node) throws IOException {
  if (!pretty)   indent=""String_Node_Str"";
  if (node.getChildNodes().size() == 0)   dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else {
    boolean act=node.allChildrenAreText();
    if (act || !pretty)     dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str"");
 else     dst.append(indent + ""String_Node_Str"" + node.getName()+ attributes(node)+ ""String_Node_Str"");
    if (node.getName() == ""String_Node_Str"" && node.getElement(""String_Node_Str"") == null)     dst.append(indent + ""String_Node_Str"" + (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
    for (    XhtmlNode c : node.getChildNodes())     writeNode(indent + ""String_Node_Str"",c,node.getName());
    if (act)     dst.append(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else     if (node.getChildNodes().get(node.getChildNodes().size() - 1).getNodeType() == NodeType.Text)     dst.append((isPretty() ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + node.getName()+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
 else     dst.append(indent + ""String_Node_Str"" + node.getName()+ ""String_Node_Str""+ (isPretty() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.9948471315699072
23155,"public void composeDocument(FileOutputStream f,XhtmlNode xhtml) throws IOException {
  byte[] bom=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF};
  f.write(bom);
  dst=new OutputStreamWriter(f,""String_Node_Str"");
  writeNode(""String_Node_Str"",xhtml);
  dst.flush();
  dst.close();
}","public void composeDocument(FileOutputStream f,XhtmlNode xhtml) throws IOException {
  byte[] bom=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF};
  f.write(bom);
  dst=new OutputStreamWriter(f,""String_Node_Str"");
  writeNode(""String_Node_Str"",xhtml,null);
  dst.flush();
  dst.close();
}",0.991150442477876
23156,"private void writeNode(String indent,XhtmlNode node) throws IOException {
  if (node.getNodeType() == NodeType.Comment)   writeComment(indent,node);
 else   if (node.getNodeType() == NodeType.DocType)   writeDocType(node);
 else   if (node.getNodeType() == NodeType.Instruction)   writeInstruction(node);
 else   if (node.getNodeType() == NodeType.Element)   writeElement(indent,node);
 else   if (node.getNodeType() == NodeType.Document)   writeDocument(indent,node);
 else   if (node.getNodeType() == NodeType.Text)   writeText(node);
 else   if (node.getNodeType() == null)   throw new IOException(""String_Node_Str"");
 else   throw new IOException(""String_Node_Str"" + node.getNodeType().toString());
}","private void writeNode(String indent,XhtmlNode node,String parentName) throws IOException {
  if (node.getNodeType() == NodeType.Comment)   writeComment(indent,node);
 else   if (node.getNodeType() == NodeType.DocType)   writeDocType(node);
 else   if (node.getNodeType() == NodeType.Instruction)   writeInstruction(node);
 else   if (node.getNodeType() == NodeType.Element)   writeElement(indent,node);
 else   if (node.getNodeType() == NodeType.Document)   writeDocument(indent,node);
 else   if (node.getNodeType() == NodeType.Text)   writeText(node,!""String_Node_Str"".equals(parentName));
 else   if (node.getNodeType() == null)   throw new IOException(""String_Node_Str"");
 else   throw new IOException(""String_Node_Str"" + node.getNodeType().toString());
}",0.9617486338797814
23157,"public void compose(OutputStream stream,XhtmlNode x) throws IOException {
  byte[] bom=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF};
  stream.write(bom);
  dst=new OutputStreamWriter(stream,""String_Node_Str"");
  dst.append(""String_Node_Str"");
  writeNode(""String_Node_Str"",x);
  dst.append(""String_Node_Str"");
  dst.flush();
}","public void compose(OutputStream stream,XhtmlNode x) throws IOException {
  byte[] bom=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF};
  stream.write(bom);
  dst=new OutputStreamWriter(stream,""String_Node_Str"");
  dst.append(""String_Node_Str"");
  writeNode(""String_Node_Str"",x,null);
  dst.append(""String_Node_Str"");
  dst.flush();
}",0.9923896499238964
23158,"private void writeDocument(String indent,XhtmlNode node) throws IOException {
  indent=""String_Node_Str"";
  for (  XhtmlNode c : node.getChildNodes())   writeNode(indent,c);
}","private void writeDocument(String indent,XhtmlNode node) throws IOException {
  indent=""String_Node_Str"";
  for (  XhtmlNode c : node.getChildNodes())   writeNode(indent,c,node.getName());
}",0.958904109589041
23159,"private void composeDoc(XhtmlDocument doc) throws IOException {
  for (  XhtmlNode c : doc.getChildNodes())   writeNode(""String_Node_Str"",c);
}","private void composeDoc(XhtmlDocument doc) throws IOException {
  for (  XhtmlNode c : doc.getChildNodes())   writeNode(""String_Node_Str"",c,null);
}",0.9828178694158076
23160,"private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean hasHierarchy,boolean hasDisplay,boolean comment,boolean version,boolean deprecated,List<UsedConceptMap> maps,String system,CodeSystem cs,String lang){
  boolean hasExtensions=false;
  XhtmlNode tr=t.tr();
  XhtmlNode td=tr.td();
  if (hasHierarchy) {
    td.addText(Integer.toString(i + 1));
    td=tr.td();
    String s=Utilities.padLeft(""String_Node_Str"",'\u00A0',i * 2);
    td.addText(s);
  }
  td.addText(c.getCode());
  XhtmlNode a;
  if (c.hasCodeElement()) {
    td.an(cs.getId() + ""String_Node_Str"" + Utilities.nmtokenize(c.getCode()));
  }
  if (hasDisplay) {
    td=tr.td();
    if (c.hasDisplayElement()) {
      if (lang == null) {
        td.addText(c.getDisplay());
      }
 else       if (lang.equals(""String_Node_Str"")) {
        boolean sl=false;
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation())         if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDisplay().equalsIgnoreCase(cd.getValue()))         sl=true;
        td.addText((sl ? cs.getLanguage(""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"") + c.getDisplay());
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
          if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDisplay().equalsIgnoreCase(cd.getValue())) {
            td.br();
            td.addText(cd.getLanguage() + ""String_Node_Str"" + cd.getValue());
          }
        }
      }
 else       if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
        td.addText(c.getDisplay());
      }
 else {
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
          if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && cd.getLanguage().equals(lang)) {
            td.addText(cd.getValue());
          }
        }
      }
    }
  }
  td=tr.td();
  if (c != null && c.hasDefinitionElement()) {
    if (lang == null) {
      td.addText(c.getDefinition());
    }
 else     if (lang.equals(""String_Node_Str"")) {
      boolean sl=false;
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation())       if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDefinition().equalsIgnoreCase(cd.getValue()))       sl=true;
      td.addText((sl ? cs.getLanguage(""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"") + c.getDefinition());
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
        if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDefinition().equalsIgnoreCase(cd.getValue())) {
          td.br();
          td.addText(cd.getLanguage() + ""String_Node_Str"" + cd.getValue());
        }
      }
    }
 else     if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
      td.addText(c.getDefinition());
    }
 else {
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
        if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && cd.getLanguage().equals(lang)) {
          td.addText(cd.getValue());
        }
      }
    }
  }
  if (deprecated) {
    td=tr.td();
    Boolean b=CodeSystemUtilities.isDeprecated(cs,c);
    if (b != null && b) {
      smartAddText(td,context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
      hasExtensions=true;
      if (ToolingExtensions.hasExtension(c,ToolingExtensions.EXT_REPLACED_BY)) {
        Coding cc=(Coding)ToolingExtensions.getExtension(c,ToolingExtensions.EXT_REPLACED_BY).getValue();
        td.tx(""String_Node_Str"");
        String url=getCodingReference(cc,system);
        if (url != null) {
          td.ah(url).addText(cc.getCode());
          td.tx(""String_Node_Str"" + cc.getDisplay() + ""String_Node_Str"");
        }
 else         td.addText(cc.getCode() + ""String_Node_Str"" + cc.getDisplay()+ ""String_Node_Str""+ cc.getSystem()+ ""String_Node_Str"");
      }
    }
  }
  if (comment) {
    td=tr.td();
    Extension ext=c.getExtensionByUrl(ToolingExtensions.EXT_CS_COMMENT);
    if (ext != null) {
      hasExtensions=true;
      String bc=ext.hasValue() ? ext.getValue().primitiveValue() : null;
      Map<String,String> translations=ToolingExtensions.getLanguageTranslations(ext.getValue());
      if (lang == null) {
        if (bc != null)         td.addText(bc);
      }
 else       if (lang.equals(""String_Node_Str"")) {
        boolean sl=false;
        for (        String l : translations.keySet())         if (bc == null || !bc.equalsIgnoreCase(translations.get(l)))         sl=true;
        if (bc != null) {
          td.addText((sl ? cs.getLanguage(""String_Node_Str"") : ""String_Node_Str"") + bc);
        }
        for (        String l : translations.keySet()) {
          if (bc == null || !bc.equalsIgnoreCase(translations.get(l))) {
            if (!td.getChildNodes().isEmpty())             td.br();
            td.addText(l + ""String_Node_Str"" + translations.get(l));
          }
        }
      }
 else       if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
        if (bc != null)         td.addText(bc);
      }
 else {
        if (bc != null)         translations.put(cs.getLanguage(""String_Node_Str""),bc);
        for (        String l : translations.keySet()) {
          if (l.equals(lang)) {
            td.addText(translations.get(l));
          }
        }
      }
    }
  }
  if (version) {
    td=tr.td();
    if (c.hasUserData(""String_Node_Str""))     td.addText(c.getUserString(""String_Node_Str""));
  }
  for (  UsedConceptMap m : maps) {
    td=tr.td();
    List<TargetElementComponentWrapper> mappings=findMappingsForCode(c.getCode(),m.getMap());
    boolean first=true;
    for (    TargetElementComponentWrapper mapping : mappings) {
      if (!first)       td.br();
      first=false;
      XhtmlNode span=td.span(null,mapping.comp.hasEquivalence() ? mapping.comp.getEquivalence().toCode() : ""String_Node_Str"");
      span.addText(getCharForEquivalence(mapping.comp));
      a=td.ah(prefix + m.getLink() + ""String_Node_Str""+ makeAnchor(mapping.group.getTarget(),mapping.comp.getCode()));
      a.addText(mapping.comp.getCode());
      if (!Utilities.noString(mapping.comp.getComment()))       td.i().tx(""String_Node_Str"" + mapping.comp.getComment() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.tr();
    td=tr.td();
    String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.ah(""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,hasHierarchy,hasDisplay,comment,version,deprecated,maps,system,cs,lang) || hasExtensions;
  }
  return hasExtensions;
}","private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean hasHierarchy,boolean hasDisplay,boolean comment,boolean version,boolean deprecated,List<UsedConceptMap> maps,String system,CodeSystem cs,String lang){
  boolean hasExtensions=false;
  XhtmlNode tr=t.tr();
  XhtmlNode td=tr.td();
  if (hasHierarchy) {
    td.addText(Integer.toString(i + 1));
    td=tr.td();
    String s=Utilities.padLeft(""String_Node_Str"",'\u00A0',i * 2);
    td.addText(s);
  }
  td.attribute(""String_Node_Str"",""String_Node_Str"").addText(c.getCode());
  XhtmlNode a;
  if (c.hasCodeElement()) {
    td.an(cs.getId() + ""String_Node_Str"" + Utilities.nmtokenize(c.getCode()));
  }
  if (hasDisplay) {
    td=tr.td();
    if (c.hasDisplayElement()) {
      if (lang == null) {
        td.addText(c.getDisplay());
      }
 else       if (lang.equals(""String_Node_Str"")) {
        boolean sl=false;
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation())         if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDisplay().equalsIgnoreCase(cd.getValue()))         sl=true;
        td.addText((sl ? cs.getLanguage(""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"") + c.getDisplay());
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
          if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDisplay().equalsIgnoreCase(cd.getValue())) {
            td.br();
            td.addText(cd.getLanguage() + ""String_Node_Str"" + cd.getValue());
          }
        }
      }
 else       if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
        td.addText(c.getDisplay());
      }
 else {
        for (        ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
          if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && cd.getLanguage().equals(lang)) {
            td.addText(cd.getValue());
          }
        }
      }
    }
  }
  td=tr.td();
  if (c != null && c.hasDefinitionElement()) {
    if (lang == null) {
      td.addText(c.getDefinition());
    }
 else     if (lang.equals(""String_Node_Str"")) {
      boolean sl=false;
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation())       if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDefinition().equalsIgnoreCase(cd.getValue()))       sl=true;
      td.addText((sl ? cs.getLanguage(""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"") + c.getDefinition());
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
        if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && !c.getDefinition().equalsIgnoreCase(cd.getValue())) {
          td.br();
          td.addText(cd.getLanguage() + ""String_Node_Str"" + cd.getValue());
        }
      }
    }
 else     if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
      td.addText(c.getDefinition());
    }
 else {
      for (      ConceptDefinitionDesignationComponent cd : c.getDesignation()) {
        if (cd.getUse().is(""String_Node_Str"",""String_Node_Str"") && cd.hasLanguage() && cd.getLanguage().equals(lang)) {
          td.addText(cd.getValue());
        }
      }
    }
  }
  if (deprecated) {
    td=tr.td();
    Boolean b=CodeSystemUtilities.isDeprecated(cs,c);
    if (b != null && b) {
      smartAddText(td,context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
      hasExtensions=true;
      if (ToolingExtensions.hasExtension(c,ToolingExtensions.EXT_REPLACED_BY)) {
        Coding cc=(Coding)ToolingExtensions.getExtension(c,ToolingExtensions.EXT_REPLACED_BY).getValue();
        td.tx(""String_Node_Str"");
        String url=getCodingReference(cc,system);
        if (url != null) {
          td.ah(url).addText(cc.getCode());
          td.tx(""String_Node_Str"" + cc.getDisplay() + ""String_Node_Str"");
        }
 else         td.addText(cc.getCode() + ""String_Node_Str"" + cc.getDisplay()+ ""String_Node_Str""+ cc.getSystem()+ ""String_Node_Str"");
      }
    }
  }
  if (comment) {
    td=tr.td();
    Extension ext=c.getExtensionByUrl(ToolingExtensions.EXT_CS_COMMENT);
    if (ext != null) {
      hasExtensions=true;
      String bc=ext.hasValue() ? ext.getValue().primitiveValue() : null;
      Map<String,String> translations=ToolingExtensions.getLanguageTranslations(ext.getValue());
      if (lang == null) {
        if (bc != null)         td.addText(bc);
      }
 else       if (lang.equals(""String_Node_Str"")) {
        boolean sl=false;
        for (        String l : translations.keySet())         if (bc == null || !bc.equalsIgnoreCase(translations.get(l)))         sl=true;
        if (bc != null) {
          td.addText((sl ? cs.getLanguage(""String_Node_Str"") : ""String_Node_Str"") + bc);
        }
        for (        String l : translations.keySet()) {
          if (bc == null || !bc.equalsIgnoreCase(translations.get(l))) {
            if (!td.getChildNodes().isEmpty())             td.br();
            td.addText(l + ""String_Node_Str"" + translations.get(l));
          }
        }
      }
 else       if (lang.equals(cs.getLanguage()) || (lang.equals(""String_Node_Str"") && !cs.hasLanguage())) {
        if (bc != null)         td.addText(bc);
      }
 else {
        if (bc != null)         translations.put(cs.getLanguage(""String_Node_Str""),bc);
        for (        String l : translations.keySet()) {
          if (l.equals(lang)) {
            td.addText(translations.get(l));
          }
        }
      }
    }
  }
  if (version) {
    td=tr.td();
    if (c.hasUserData(""String_Node_Str""))     td.addText(c.getUserString(""String_Node_Str""));
  }
  for (  UsedConceptMap m : maps) {
    td=tr.td();
    List<TargetElementComponentWrapper> mappings=findMappingsForCode(c.getCode(),m.getMap());
    boolean first=true;
    for (    TargetElementComponentWrapper mapping : mappings) {
      if (!first)       td.br();
      first=false;
      XhtmlNode span=td.span(null,mapping.comp.hasEquivalence() ? mapping.comp.getEquivalence().toCode() : ""String_Node_Str"");
      span.addText(getCharForEquivalence(mapping.comp));
      a=td.ah(prefix + m.getLink() + ""String_Node_Str""+ makeAnchor(mapping.group.getTarget(),mapping.comp.getCode()));
      a.addText(mapping.comp.getCode());
      if (!Utilities.noString(mapping.comp.getComment()))       td.i().tx(""String_Node_Str"" + mapping.comp.getComment() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.tr();
    td=tr.td();
    String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.ah(""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,hasHierarchy,hasDisplay,comment,version,deprecated,maps,system,cs,lang) || hasExtensions;
  }
  return hasExtensions;
}",0.9966805565364786
23161,"private void addExpansionRowToTable(XhtmlNode t,ValueSetExpansionContainsComponent c,int i,boolean doLevel,boolean doSystem,boolean doDefinition,List<UsedConceptMap> maps,CodeSystem allCS,List<String> langs){
  XhtmlNode tr=t.tr();
  XhtmlNode td=tr.td();
  String tgt=makeAnchor(c.getSystem(),c.getCode());
  td.an(tgt);
  if (doLevel) {
    td.addText(Integer.toString(i));
    td=tr.td();
  }
  String s=Utilities.padLeft(""String_Node_Str"",'\u00A0',i * 2);
  td.addText(s);
  addCodeToTable(c.getAbstract(),c.getSystem(),c.getCode(),c.getDisplay(),td);
  if (doSystem) {
    td=tr.td();
    td.addText(c.getSystem());
  }
  td=tr.td();
  if (c.hasDisplayElement())   td.addText(c.getDisplay());
  if (doDefinition) {
    CodeSystem cs=allCS;
    if (cs == null)     cs=context.fetchCodeSystem(c.getSystem());
    td=tr.td();
    if (cs != null)     td.addText(CodeSystemUtilities.getCodeDefinition(cs,c.getCode()));
  }
  for (  UsedConceptMap m : maps) {
    td=tr.td();
    List<TargetElementComponentWrapper> mappings=findMappingsForCode(c.getCode(),m.getMap());
    boolean first=true;
    for (    TargetElementComponentWrapper mapping : mappings) {
      if (!first)       td.br();
      first=false;
      XhtmlNode span=td.span(null,mapping.comp.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping.comp));
      addRefToCode(td,mapping.group.getTarget(),m.getLink(),mapping.comp.getCode());
      if (!Utilities.noString(mapping.comp.getComment()))       td.i().tx(""String_Node_Str"" + mapping.comp.getComment() + ""String_Node_Str"");
    }
  }
  for (  Extension ext : c.getExtension()) {
    if (ToolingExtensions.EXT_TRANSLATION.equals(ext.getUrl())) {
      String lang=ToolingExtensions.readStringExtension(ext,""String_Node_Str"");
      if (!Utilities.noString(lang) && !langs.contains(lang))       langs.add(lang);
    }
  }
  for (  ValueSetExpansionContainsComponent cc : c.getContains()) {
    addExpansionRowToTable(t,cc,i + 1,doLevel,doSystem,doDefinition,maps,allCS,langs);
  }
}","private void addExpansionRowToTable(XhtmlNode t,ValueSetExpansionContainsComponent c,int i,boolean doLevel,boolean doSystem,boolean doDefinition,List<UsedConceptMap> maps,CodeSystem allCS,List<String> langs){
  XhtmlNode tr=t.tr();
  XhtmlNode td=tr.td();
  String tgt=makeAnchor(c.getSystem(),c.getCode());
  td.an(tgt);
  if (doLevel) {
    td.addText(Integer.toString(i));
    td=tr.td();
  }
  String s=Utilities.padLeft(""String_Node_Str"",'\u00A0',i * 2);
  td.attribute(""String_Node_Str"",""String_Node_Str"").addText(s);
  addCodeToTable(c.getAbstract(),c.getSystem(),c.getCode(),c.getDisplay(),td);
  if (doSystem) {
    td=tr.td();
    td.addText(c.getSystem());
  }
  td=tr.td();
  if (c.hasDisplayElement())   td.addText(c.getDisplay());
  if (doDefinition) {
    CodeSystem cs=allCS;
    if (cs == null)     cs=context.fetchCodeSystem(c.getSystem());
    td=tr.td();
    if (cs != null)     td.addText(CodeSystemUtilities.getCodeDefinition(cs,c.getCode()));
  }
  for (  UsedConceptMap m : maps) {
    td=tr.td();
    List<TargetElementComponentWrapper> mappings=findMappingsForCode(c.getCode(),m.getMap());
    boolean first=true;
    for (    TargetElementComponentWrapper mapping : mappings) {
      if (!first)       td.br();
      first=false;
      XhtmlNode span=td.span(null,mapping.comp.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping.comp));
      addRefToCode(td,mapping.group.getTarget(),m.getLink(),mapping.comp.getCode());
      if (!Utilities.noString(mapping.comp.getComment()))       td.i().tx(""String_Node_Str"" + mapping.comp.getComment() + ""String_Node_Str"");
    }
  }
  for (  Extension ext : c.getExtension()) {
    if (ToolingExtensions.EXT_TRANSLATION.equals(ext.getUrl())) {
      String lang=ToolingExtensions.readStringExtension(ext,""String_Node_Str"");
      if (!Utilities.noString(lang) && !langs.contains(lang))       langs.add(lang);
    }
  }
  for (  ValueSetExpansionContainsComponent cc : c.getContains()) {
    addExpansionRowToTable(t,cc,i + 1,doLevel,doSystem,doDefinition,maps,allCS,langs);
  }
}",0.9885393806388686
23162,"private boolean generateExpansion(XhtmlNode x,ValueSet vs,ValueSet src,boolean header,List<UsedConceptMap> maps) throws FHIRFormatError, DefinitionException, IOException {
  boolean hasExtensions=false;
  List<String> langs=new ArrayList<String>();
  if (header) {
    XhtmlNode h=x.addTag(getHeader());
    h.tx(""String_Node_Str"");
    if (IsNotFixedExpansion(vs))     addMarkdown(x,vs.getDescription());
    if (vs.hasCopyright())     generateCopyright(x,vs);
  }
  if (ToolingExtensions.hasExtension(vs.getExpansion(),""String_Node_Str""))   x.para().setAttribute(""String_Node_Str"",""String_Node_Str"").addText(vs.getExpansion().getContains().isEmpty() ? tooCostlyNoteEmpty : tooCostlyNoteNotEmpty);
 else {
    Integer count=countMembership(vs);
    if (count == null)     x.para().tx(""String_Node_Str"");
 else     x.para().tx(""String_Node_Str"" + count.toString() + ""String_Node_Str"");
  }
  generateVersionNotice(x,vs.getExpansion());
  CodeSystem allCS=null;
  boolean doLevel=false;
  for (  ValueSetExpansionContainsComponent cc : vs.getExpansion().getContains()) {
    if (cc.hasContains()) {
      doLevel=true;
      break;
    }
  }
  boolean doSystem=true;
  boolean doDefinition=checkDoDefinition(vs.getExpansion().getContains());
  if (doSystem && allFromOneSystem(vs)) {
    doSystem=false;
    XhtmlNode p=x.para();
    p.tx(""String_Node_Str"");
    allCS=context.fetchCodeSystem(vs.getExpansion().getContains().get(0).getSystem());
    String ref=null;
    if (allCS != null)     ref=getCsRef(allCS);
    if (ref == null)     p.code(vs.getExpansion().getContains().get(0).getSystem());
 else     p.ah(prefix + ref).code(vs.getExpansion().getContains().get(0).getSystem());
  }
  XhtmlNode t=x.table(""String_Node_Str"");
  XhtmlNode tr=t.tr();
  if (doLevel)   tr.td().b().tx(""String_Node_Str"");
  tr.td().b().tx(""String_Node_Str"");
  if (doSystem)   tr.td().b().tx(""String_Node_Str"");
  tr.td().b().tx(""String_Node_Str"");
  if (doDefinition)   tr.td().b().tx(""String_Node_Str"");
  addMapHeaders(tr,maps);
  for (  ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
    addExpansionRowToTable(t,c,0,doLevel,doSystem,doDefinition,maps,allCS,langs);
  }
  if (langs.size() > 0) {
    Collections.sort(langs);
    x.para().b().tx(""String_Node_Str"");
    t=x.table(""String_Node_Str"");
    tr=t.tr();
    tr.td().b().tx(""String_Node_Str"");
    for (    String lang : langs)     tr.td().b().addText(describeLang(lang));
    for (    ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
      addLanguageRow(c,t,langs);
    }
  }
  return hasExtensions;
}","private boolean generateExpansion(XhtmlNode x,ValueSet vs,ValueSet src,boolean header,List<UsedConceptMap> maps) throws FHIRFormatError, DefinitionException, IOException {
  boolean hasExtensions=false;
  List<String> langs=new ArrayList<String>();
  if (header) {
    XhtmlNode h=x.addTag(getHeader());
    h.tx(""String_Node_Str"");
    if (IsNotFixedExpansion(vs))     addMarkdown(x,vs.getDescription());
    if (vs.hasCopyright())     generateCopyright(x,vs);
  }
  if (ToolingExtensions.hasExtension(vs.getExpansion(),""String_Node_Str""))   x.para().setAttribute(""String_Node_Str"",""String_Node_Str"").addText(vs.getExpansion().getContains().isEmpty() ? tooCostlyNoteEmpty : tooCostlyNoteNotEmpty);
 else {
    Integer count=countMembership(vs);
    if (count == null)     x.para().tx(""String_Node_Str"");
 else     x.para().tx(""String_Node_Str"" + count.toString() + ""String_Node_Str"");
  }
  generateVersionNotice(x,vs.getExpansion());
  CodeSystem allCS=null;
  boolean doLevel=false;
  for (  ValueSetExpansionContainsComponent cc : vs.getExpansion().getContains()) {
    if (cc.hasContains()) {
      doLevel=true;
      break;
    }
  }
  boolean doSystem=true;
  boolean doDefinition=checkDoDefinition(vs.getExpansion().getContains());
  if (doSystem && allFromOneSystem(vs)) {
    doSystem=false;
    XhtmlNode p=x.para();
    p.tx(""String_Node_Str"");
    allCS=context.fetchCodeSystem(vs.getExpansion().getContains().get(0).getSystem());
    String ref=null;
    if (allCS != null)     ref=getCsRef(allCS);
    if (ref == null)     p.code(vs.getExpansion().getContains().get(0).getSystem());
 else     p.ah(prefix + ref).code(vs.getExpansion().getContains().get(0).getSystem());
  }
  XhtmlNode t=x.table(""String_Node_Str"");
  XhtmlNode tr=t.tr();
  if (doLevel)   tr.td().b().tx(""String_Node_Str"");
  tr.td().attribute(""String_Node_Str"",""String_Node_Str"").b().tx(""String_Node_Str"");
  if (doSystem)   tr.td().b().tx(""String_Node_Str"");
  tr.td().b().tx(""String_Node_Str"");
  if (doDefinition)   tr.td().b().tx(""String_Node_Str"");
  addMapHeaders(tr,maps);
  for (  ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
    addExpansionRowToTable(t,c,0,doLevel,doSystem,doDefinition,maps,allCS,langs);
  }
  if (langs.size() > 0) {
    Collections.sort(langs);
    x.para().b().tx(""String_Node_Str"");
    t=x.table(""String_Node_Str"");
    tr=t.tr();
    tr.td().b().tx(""String_Node_Str"");
    for (    String lang : langs)     tr.td().b().addText(describeLang(lang));
    for (    ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
      addLanguageRow(c,t,langs);
    }
  }
  return hasExtensions;
}",0.9910527317723206
23163,"private XhtmlNode addTableHeaderRowStandard(XhtmlNode t,boolean hasHierarchy,boolean hasDisplay,boolean definitions,boolean comments,boolean version,boolean deprecated,String lang){
  XhtmlNode tr=t.tr();
  if (hasHierarchy)   tr.td().b().tx(""String_Node_Str"");
  tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (hasDisplay)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (definitions)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (deprecated)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (comments)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (version)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  return tr;
}","private XhtmlNode addTableHeaderRowStandard(XhtmlNode t,boolean hasHierarchy,boolean hasDisplay,boolean definitions,boolean comments,boolean version,boolean deprecated,String lang){
  XhtmlNode tr=t.tr();
  if (hasHierarchy)   tr.td().b().tx(""String_Node_Str"");
  tr.td().attribute(""String_Node_Str"",""String_Node_Str"").b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (hasDisplay)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (definitions)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (deprecated)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (comments)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  if (version)   tr.td().b().tx(context.translator().translate(""String_Node_Str"",""String_Node_Str"",lang));
  return tr;
}",0.9749333333333332
23164,"private int checkElement(List<ValidationMessage> errors,String path,ElementDefn e,ResourceDefn parent,String parentName,boolean needsRimMapping,boolean optionalParent,boolean hasSummary,List<String> vsWarns,boolean parentInSummary) throws Exception {
  e.setPath(path);
  int vsWarnings=0;
  if (!names.containsKey(e.getName()))   names.put(e.getName(),0);
  names.put(e.getName(),names.get(e.getName()) + 1);
  rule(errors,IssueType.STRUCTURE,path,e.getName().length() < maxElementLength,""String_Node_Str"" + e.getName() + ""String_Node_Str""+ Integer.toString(maxElementLength));
  rule(errors,IssueType.STRUCTURE,path,isValidToken(e.getName(),!path.contains(""String_Node_Str"")),""String_Node_Str"" + e.getName() + ""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.unbounded() || e.getMaxCardinality() == 1,""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0 || e.getMinCardinality() == 1,""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (!hasSummary)   e.setSummaryItem(true);
 else   if (parentInSummary) {
    rule(errors,IssueType.STRUCTURE,path,hasSummary(e) || !e.isModifier(),""String_Node_Str"" + path + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,hasSummary(e) || e.getMinCardinality() == 0,""String_Node_Str"" + path + ""String_Node_Str"");
  }
  rule(errors,IssueType.STRUCTURE,path,optionalParent || e.isSummary() || !path.contains(""String_Node_Str"")|| e.getMinCardinality() == 0,""String_Node_Str"" + path + ""String_Node_Str"");
  optionalParent=optionalParent || e.getMinCardinality() == 0;
  hint(errors,IssueType.STRUCTURE,path,!nameOverlaps(e.getName(),parentName),""String_Node_Str"" + e.getName() + ""String_Node_Str""+ parentName+ ""String_Node_Str"");
  checkDefinitions(errors,path,e);
  warning(errors,IssueType.STRUCTURE,path,!path.contains(""String_Node_Str"") || !Utilities.isPlural(e.getName()) || !e.unbounded(),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().endsWith(""String_Node_Str"") || !e.unbounded(),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,(parentName == null) || e.getName().charAt(0) == e.getName().toLowerCase().charAt(0),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getName().equals(path) || e.getElements().size() == 0 || (e.hasSvg() || e.isUmlBreak() || !Utilities.noString(e.getUmlDir())),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getDefinition().toLowerCase().startsWith(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getDefinition().endsWith(""String_Node_Str"") || e.getDefinition().endsWith(""String_Node_Str""),""String_Node_Str"" + e.getDefinition() + ""String_Node_Str"");
  if (e.usesType(""String_Node_Str"") && e.usesType(""String_Node_Str""))   rule(errors,IssueType.STRUCTURE,path,e.hasComments() && e.getComments().contains(""String_Node_Str"") && e.getComments().contains(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.BUSINESSRULE,path,Utilities.noString(e.getTodo()),""String_Node_Str"" + e.getTodo() + ""String_Node_Str"");
  if (!Utilities.noString(e.getW5())) {
    if (path.contains(""String_Node_Str""))     rule(errors,IssueType.INVALID,path,definitions.getW5s().containsKey(e.getW5()),""String_Node_Str"" + e.getW5() + ""String_Node_Str"");
 else {
      String[] vs=e.getW5().split(""String_Node_Str"");
      rule(errors,IssueType.INVALID,path,vs.length == 2 && definitions.getW5s().containsKey(vs[0]) && definitions.getW5s().get(vs[0]).getSubClasses().contains(vs[1]),""String_Node_Str"" + e.getW5() + ""String_Node_Str"");
    }
  }
  if (e.getName().equals(""String_Node_Str""))   warning(errors,IssueType.STRUCTURE,path,!e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (e.getName().equals(""String_Node_Str""))   rule(errors,IssueType.STRUCTURE,path,e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (e.getName().equals(""String_Node_Str"")) {
    warning(errors,IssueType.STRUCTURE,path,isOkComment(path),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0,""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMaxCardinality() == 1,""String_Node_Str"");
  }
  if (e.getName().equals(""String_Node_Str"")) {
    warning(errors,IssueType.STRUCTURE,path,e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0,""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.unbounded(),""String_Node_Str"");
  }
  String sd=e.getShortDefn();
  if (sd.length() > 0) {
    rule(errors,IssueType.STRUCTURE,path,sd.contains(""String_Node_Str"") || Character.isUpperCase(sd.charAt(0)) || sd.startsWith(""String_Node_Str"")|| !Character.isLetter(sd.charAt(0))|| Utilities.isURL(sd)|| sd.startsWith(""String_Node_Str""),""String_Node_Str"" + sd + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,!sd.endsWith(""String_Node_Str"") || sd.endsWith(""String_Node_Str""),""String_Node_Str"" + sd + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,e.getDefinition().contains(""String_Node_Str"") || Character.isUpperCase(e.getDefinition().charAt(0)) || !Character.isLetter(e.getDefinition().charAt(0)),""String_Node_Str"" + e.getDefinition() + ""String_Node_Str"");
  }
  for (  String inv : e.getInvariants().keySet()) {
    String xpath=e.getInvariants().get(inv).getXpath();
    rule(errors,IssueType.VALUE,path,!(xpath.contains(""String_Node_Str"") || xpath.contains(""String_Node_Str"")),""String_Node_Str"");
  }
  rule(errors,IssueType.STRUCTURE,path,!e.getName().startsWith(""String_Node_Str""),""String_Node_Str"");
  checkType(errors,path,e,parent);
  rule(errors,IssueType.STRUCTURE,path,!""String_Node_Str"".equals(e.typeCode()),""String_Node_Str"");
  if (e.typeCode().equals(""String_Node_Str"") && parent != null && !e.isNoBindingAllowed()) {
    rule(errors,IssueType.STRUCTURE,path,e.hasBinding(),""String_Node_Str"");
  }
  if ((e.usesType(""String_Node_Str"") && !parentName.equals(""String_Node_Str"")) || (e.usesType(""String_Node_Str"") && !(e.usesType(""String_Node_Str"") || e.usesType(""String_Node_Str"") || e.usesType(""String_Node_Str"")))) {
    hint(errors,IssueType.STRUCTURE,path,e.hasBinding(),""String_Node_Str"");
  }
  if (e.getTypes().size() > 1) {
    Set<String> types=new HashSet<String>();
    for (    TypeRef t : e.getTypes()) {
      String base=null;
      if (definitions.getConstraints().containsKey(t.getName()))       base=definitions.getConstraints().get(t.getName()).getBaseType();
 else       base=t.getName();
      rule(errors,IssueType.STRUCTURE,path,!types.contains(base),""String_Node_Str"");
      types.add(base);
    }
  }
  if (e.hasBinding()) {
    boolean ok=false;
    for (    TypeRef tr : e.getTypes()) {
      ok=ok || Utilities.existsInList(tr.getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    rule(errors,IssueType.STRUCTURE,path,ok,""String_Node_Str"" + e.typeCode() + ""String_Node_Str"");
    if (e.getBinding().getValueSet() != null && e.getBinding().getValueSet().getName() == null)     throw new Error(""String_Node_Str"" + e.getBinding().getName());
    BindingSpecification cd=e.getBinding();
    if (cd != null) {
      check(errors,path,cd,sd,e);
      if (cd.getValueSet() != null) {
        if (e.getBinding().getStrength() == BindingStrength.EXAMPLE)         ValueSetUtilities.markStatus(cd.getValueSet(),parent == null ? ""String_Node_Str"" : parent.getWg().getCode(),StandardsStatus.DRAFT,null,""String_Node_Str"");
 else         if (parent == null)         ValueSetUtilities.markStatus(cd.getValueSet(),""String_Node_Str"",StandardsStatus.DRAFT,null,""String_Node_Str"");
 else         ValueSetUtilities.markStatus(cd.getValueSet(),parent.getWg().getCode(),parent.getStatus(),parent.getNormativePackage(),parent.getFmmLevel());
        Integer w=(Integer)cd.getValueSet().getUserData(""String_Node_Str"");
        if (w != null && w > 0 && !vsWarns.contains(cd.getValueSet().getId())) {
          vsWarnings++;
          vsWarns.add(cd.getValueSet().getId());
        }
      }
    }
  }
  String s=e.getMapping(Definitions.RIM_MAPPING);
  hint(errors,IssueType.REQUIRED,path,!needsRimMapping || !Utilities.noString(s),""String_Node_Str"");
  needsRimMapping=needsRimMapping && !""String_Node_Str"".equalsIgnoreCase(s) && !Utilities.noString(s);
  for (  String uri : definitions.getMapTypes().keySet()) {
    MappingSpace m=definitions.getMapTypes().get(uri);
    if (m.isPattern()) {
      String map=e.getMapping(uri);
      if (!Utilities.noString(map)) {
        String err=checkPatternMap(e,map);
        rule(errors,IssueType.STRUCTURE,path,err == null,""String_Node_Str"" + m.getTitle() + ""String_Node_Str""+ path+ ""String_Node_Str""+ err);
      }
    }
  }
  for (  ElementDefn c : e.getElements()) {
    String name=c.getName();
    if (name.endsWith(""String_Node_Str"")) {
      name=name.substring(0,name.length() - 3);
      for (      ElementDefn c2 : e.getElements()) {
        if (c != c2)         rule(errors,IssueType.STRUCTURE,path,!c2.getName().startsWith(name) || !definitions.hasType(c2.getName().substring(name.length())),""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c2.getName()+ ""String_Node_Str""+ path);
      }
    }
  }
  for (  ElementDefn c : e.getElements()) {
    vsWarnings=vsWarnings + checkElement(errors,path + ""String_Node_Str"" + c.getName(),c,parent,e.getName(),needsRimMapping,optionalParent,hasSummary,vsWarns,parentInSummary && hasSummary(e));
  }
  return vsWarnings;
}","private int checkElement(List<ValidationMessage> errors,String path,ElementDefn e,ResourceDefn parent,String parentName,boolean needsRimMapping,boolean optionalParent,boolean hasSummary,List<String> vsWarns,boolean parentInSummary) throws Exception {
  e.setPath(path);
  int vsWarnings=0;
  if (!names.containsKey(e.getName()))   names.put(e.getName(),0);
  names.put(e.getName(),names.get(e.getName()) + 1);
  rule(errors,IssueType.STRUCTURE,path,e.getName().length() < maxElementLength,""String_Node_Str"" + e.getName() + ""String_Node_Str""+ Integer.toString(maxElementLength));
  rule(errors,IssueType.STRUCTURE,path,isValidToken(e.getName(),!path.contains(""String_Node_Str"")),""String_Node_Str"" + e.getName() + ""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.unbounded() || e.getMaxCardinality() == 1,""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0 || e.getMinCardinality() == 1,""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (!hasSummary)   e.setSummaryItem(true);
 else   if (parentInSummary) {
    rule(errors,IssueType.STRUCTURE,path,hasSummary(e) || !e.isModifier(),""String_Node_Str"" + path + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,hasSummary(e) || e.getMinCardinality() == 0,""String_Node_Str"" + path + ""String_Node_Str"");
  }
  rule(errors,IssueType.STRUCTURE,path,optionalParent || e.isSummary() || !path.contains(""String_Node_Str"")|| e.getMinCardinality() == 0,""String_Node_Str"" + path + ""String_Node_Str"");
  optionalParent=optionalParent || e.getMinCardinality() == 0;
  hint(errors,IssueType.STRUCTURE,path,!nameOverlaps(e.getName(),parentName),""String_Node_Str"" + e.getName() + ""String_Node_Str""+ parentName+ ""String_Node_Str"");
  checkDefinitions(errors,path,e);
  warning(errors,IssueType.STRUCTURE,path,!path.contains(""String_Node_Str"") || !Utilities.isPlural(e.getName()) || !e.unbounded(),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().endsWith(""String_Node_Str"") || !e.unbounded(),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getName().equals(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,(parentName == null) || e.getName().charAt(0) == e.getName().toLowerCase().charAt(0),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getName().equals(path) || e.getElements().size() == 0 || (e.hasSvg() || e.isUmlBreak() || !Utilities.noString(e.getUmlDir())),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,!e.getDefinition().toLowerCase().startsWith(""String_Node_Str""),""String_Node_Str"");
  rule(errors,IssueType.STRUCTURE,path,e.getDefinition().endsWith(""String_Node_Str"") || e.getDefinition().endsWith(""String_Node_Str""),""String_Node_Str"" + e.getDefinition() + ""String_Node_Str"");
  if (e.usesType(""String_Node_Str"") && e.usesType(""String_Node_Str""))   rule(errors,IssueType.STRUCTURE,path,e.hasComments() && e.getComments().contains(""String_Node_Str"") && e.getComments().contains(""String_Node_Str""),""String_Node_Str"");
  warning(errors,IssueType.BUSINESSRULE,path,Utilities.noString(e.getTodo()),""String_Node_Str"" + e.getTodo() + ""String_Node_Str"");
  if (!Utilities.noString(e.getW5())) {
    if (path.contains(""String_Node_Str""))     rule(errors,IssueType.INVALID,path,definitions.getW5s().containsKey(e.getW5()),""String_Node_Str"" + e.getW5() + ""String_Node_Str"");
 else {
      String[] vs=e.getW5().split(""String_Node_Str"");
      rule(errors,IssueType.INVALID,path,vs.length == 2 && definitions.getW5s().containsKey(vs[0]) && definitions.getW5s().get(vs[0]).getSubClasses().contains(vs[1]),""String_Node_Str"" + e.getW5() + ""String_Node_Str"");
    }
  }
  if (e.getName().equals(""String_Node_Str""))   warning(errors,IssueType.STRUCTURE,path,!e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (e.getName().equals(""String_Node_Str""))   rule(errors,IssueType.STRUCTURE,path,e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
  if (e.getName().equals(""String_Node_Str"")) {
    warning(errors,IssueType.STRUCTURE,path,isOkComment(path),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,Utilities.existsInList(e.typeCode(),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0,""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMaxCardinality() == 1,""String_Node_Str"");
  }
  if (e.getName().equals(""String_Node_Str"")) {
    warning(errors,IssueType.STRUCTURE,path,e.typeCode().equals(""String_Node_Str""),""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.getMinCardinality() == 0,""String_Node_Str"");
    warning(errors,IssueType.STRUCTURE,path,e.unbounded(),""String_Node_Str"");
  }
  String sd=e.getShortDefn();
  if (sd.length() > 0) {
    rule(errors,IssueType.STRUCTURE,path,sd.contains(""String_Node_Str"") || Character.isUpperCase(sd.charAt(0)) || sd.startsWith(""String_Node_Str"")|| !Character.isLetter(sd.charAt(0))|| Utilities.isURL(sd)|| sd.startsWith(""String_Node_Str""),""String_Node_Str"" + sd + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,!sd.endsWith(""String_Node_Str"") || sd.endsWith(""String_Node_Str""),""String_Node_Str"" + sd + ""String_Node_Str"");
    rule(errors,IssueType.STRUCTURE,path,e.getDefinition().contains(""String_Node_Str"") || Character.isUpperCase(e.getDefinition().charAt(0)) || !Character.isLetter(e.getDefinition().charAt(0)),""String_Node_Str"" + e.getDefinition() + ""String_Node_Str"");
  }
  for (  String inv : e.getInvariants().keySet()) {
    String xpath=e.getInvariants().get(inv).getXpath();
    rule(errors,IssueType.VALUE,path,!(xpath.contains(""String_Node_Str"") || xpath.contains(""String_Node_Str"")),""String_Node_Str"");
  }
  rule(errors,IssueType.STRUCTURE,path,!e.getName().startsWith(""String_Node_Str""),""String_Node_Str"");
  checkType(errors,path,e,parent);
  rule(errors,IssueType.STRUCTURE,path,!""String_Node_Str"".equals(e.typeCode()),""String_Node_Str"");
  if (e.typeCode().equals(""String_Node_Str"") && parent != null && !e.isNoBindingAllowed()) {
    rule(errors,IssueType.STRUCTURE,path,e.hasBinding(),""String_Node_Str"");
  }
  if ((e.usesType(""String_Node_Str"") && !parentName.equals(""String_Node_Str"")) || (e.usesType(""String_Node_Str"") && !(e.usesType(""String_Node_Str"") || e.usesType(""String_Node_Str"") || e.usesType(""String_Node_Str"")))) {
    hint(errors,IssueType.STRUCTURE,path,e.hasBinding(),""String_Node_Str"");
  }
  if (e.getTypes().size() > 1) {
    Set<String> types=new HashSet<String>();
    for (    TypeRef t : e.getTypes()) {
      String base=null;
      if (definitions.getConstraints().containsKey(t.getName()))       base=definitions.getConstraints().get(t.getName()).getBaseType();
 else       base=t.getName();
      rule(errors,IssueType.STRUCTURE,path,!types.contains(base),""String_Node_Str"");
      types.add(base);
    }
  }
  if (e.hasBinding()) {
    boolean ok=false;
    for (    TypeRef tr : e.getTypes()) {
      ok=ok || Utilities.existsInList(tr.getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    rule(errors,IssueType.STRUCTURE,path,ok,""String_Node_Str"" + e.typeCode() + ""String_Node_Str"");
    if (e.getBinding().getValueSet() != null && e.getBinding().getValueSet().getName() == null)     throw new Error(""String_Node_Str"" + e.getBinding().getName());
    BindingSpecification cd=e.getBinding();
    if (cd != null) {
      check(errors,path,cd,sd,e);
      if (cd.getValueSet() != null) {
        if (e.getBinding().getStrength() == BindingStrength.EXAMPLE)         ValueSetUtilities.markStatus(cd.getValueSet(),parent == null ? ""String_Node_Str"" : parent.getWg().getCode(),StandardsStatus.DRAFT,null,""String_Node_Str"");
 else         if (parent == null)         ValueSetUtilities.markStatus(cd.getValueSet(),""String_Node_Str"",StandardsStatus.DRAFT,null,""String_Node_Str"");
 else         ValueSetUtilities.markStatus(cd.getValueSet(),parent.getWg().getCode(),parent.getStatus(),parent.getNormativePackage(),parent.getFmmLevel());
        Integer w=(Integer)cd.getValueSet().getUserData(""String_Node_Str"");
        if (w != null && w > 0 && !vsWarns.contains(cd.getValueSet().getId())) {
          vsWarnings++;
          vsWarns.add(cd.getValueSet().getId());
        }
      }
    }
  }
  String s=e.getMapping(Definitions.RIM_MAPPING);
  hint(errors,IssueType.REQUIRED,path,!needsRimMapping || !Utilities.noString(s),""String_Node_Str"");
  needsRimMapping=needsRimMapping && !""String_Node_Str"".equalsIgnoreCase(s) && !Utilities.noString(s);
  for (  String uri : definitions.getMapTypes().keySet()) {
    MappingSpace m=definitions.getMapTypes().get(uri);
    if (m.isPattern()) {
      String map=e.getMapping(uri);
      if (!Utilities.noString(map)) {
        String err=checkPatternMap(e,map);
        rule(errors,IssueType.STRUCTURE,path,err == null,""String_Node_Str"" + m.getTitle() + ""String_Node_Str""+ path+ ""String_Node_Str""+ err);
      }
    }
  }
  for (  ElementDefn c : e.getElements()) {
    String name=c.getName();
    if (name.endsWith(""String_Node_Str"")) {
      name=name.substring(0,name.length() - 3);
      for (      ElementDefn c2 : e.getElements()) {
        if (c != c2)         rule(errors,IssueType.STRUCTURE,path,!c2.getName().startsWith(name) || !definitions.hasType(c2.getName().substring(name.length())),""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c2.getName()+ ""String_Node_Str""+ path);
      }
    }
  }
  for (  ElementDefn c : e.getElements()) {
    vsWarnings=vsWarnings + checkElement(errors,path + ""String_Node_Str"" + c.getName(),c,parent,e.getName(),needsRimMapping,optionalParent,hasSummary,vsWarns,parentInSummary && hasSummary(e));
  }
  return vsWarnings;
}",0.9975511803310804
23165,"public static String process(Definitions definitions,BuildWorkerContext workerContext,List<ValidationMessage> validationErrors,String text,String location,String prefix) throws Exception {
  if (Utilities.noString(text))   return ""String_Node_Str"";
  text=text.replace(""String_Node_Str"",""String_Node_Str"");
  while (text.contains(""String_Node_Str"")) {
    String left=text.substring(0,text.indexOf(""String_Node_Str""));
    if (text.indexOf(""String_Node_Str"") < 0)     throw new Error(location + ""String_Node_Str"" + text);
    String linkText=text.substring(text.indexOf(""String_Node_Str"") + 3,text.indexOf(""String_Node_Str""));
    String right=text.substring(text.indexOf(""String_Node_Str"") + 3);
    if (linkText.startsWith(""String_Node_Str"")) {
      String vsid=linkText.substring(9);
      ValueSet vs=workerContext.fetchResource(ValueSet.class,""String_Node_Str"" + vsid);
      ValueSetExpansionOutcome exp=workerContext.expandVS(vs,true,false);
      if (exp.getValueset() != null)       text=left + presentExpansion(exp.getValueset().getExpansion().getContains(),workerContext) + right;
 else       text=left + ""String_Node_Str"" + vs.getName()+ ""String_Node_Str""+ vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ right;
    }
 else {
      String url=""String_Node_Str"";
      String[] parts=linkText.split(""String_Node_Str"");
      if (parts[0].contains(""String_Node_Str"")) {
        StructureDefinition ed=workerContext.getExtensionStructure(null,parts[0]);
        if (ed == null)         throw new Error(location + ""String_Node_Str"" + parts[0]);
        url=ed.getUserData(""String_Node_Str"") + ""String_Node_Str"";
      }
      if (Utilities.noString(url)) {
        String[] paths=parts[0].split(""String_Node_Str"");
        StructureDefinition p=new ProfileUtilities(workerContext,null,null).getProfile(null,paths[0]);
        if (p != null) {
          String suffix=(paths.length > 1) ? ""String_Node_Str"" + parts[0] : ""String_Node_Str"";
          if (p.getUserData(""String_Node_Str"") == null)           url=paths[0].toLowerCase() + suffix;
 else           url=p.getUserData(""String_Node_Str"") + suffix;
        }
 else         if (definitions.hasResource(linkText)) {
          url=linkText.toLowerCase() + ""String_Node_Str"";
        }
 else         if (definitions.hasElementDefn(linkText)) {
          url=definitions.getSrcFile(linkText) + ""String_Node_Str"" + linkText;
        }
 else         if (definitions.hasPrimitiveType(linkText)) {
          url=""String_Node_Str"" + linkText;
        }
 else         if (definitions.getPageTitles().containsKey(linkText)) {
          url=definitions.getPageTitles().get(linkText);
        }
 else         if (definitions.getLogicalModel(linkText.toLowerCase()) != null) {
          url=definitions.getLogicalModel(linkText.toLowerCase()).getId() + ""String_Node_Str"";
        }
 else         if (validationErrors != null) {
          validationErrors.add(new ValidationMessage(Source.Publisher,IssueType.BUSINESSRULE,-1,-1,location,""String_Node_Str"" + linkText + ""String_Node_Str"",IssueSeverity.WARNING));
        }
      }
      text=left + ""String_Node_Str"" + linkText+ ""String_Node_Str""+ url+ ""String_Node_Str""+ right;
    }
  }
  if (!Utilities.noString(prefix)) {
    int i=text.length() - 3;
    while (i > 0) {
      if (text.substring(i,i + 2).equals(""String_Node_Str"")) {
        if (!text.substring(i,i + 7).equals(""String_Node_Str"")) {
          text=text.substring(0,i) + ""String_Node_Str"" + prefix+ text.substring(i + 2);
        }
      }
      i--;
    }
  }
  return text;
}","public static String process(Definitions definitions,BuildWorkerContext workerContext,List<ValidationMessage> validationErrors,String text,String location,String prefix) throws Exception {
  if (Utilities.noString(text))   return ""String_Node_Str"";
  text=text.replace(""String_Node_Str"",""String_Node_Str"");
  while (text.contains(""String_Node_Str"")) {
    String left=text.substring(0,text.indexOf(""String_Node_Str""));
    if (text.indexOf(""String_Node_Str"") < 0)     throw new Error(location + ""String_Node_Str"" + text);
    String linkText=text.substring(text.indexOf(""String_Node_Str"") + 3,text.indexOf(""String_Node_Str""));
    String right=text.substring(text.indexOf(""String_Node_Str"") + 3);
    if (linkText.startsWith(""String_Node_Str"")) {
      String vsid=linkText.substring(9);
      ValueSet vs=workerContext.fetchResource(ValueSet.class,""String_Node_Str"" + vsid);
      ValueSetExpansionOutcome exp=workerContext.expandVS(vs,true,false);
      if (exp.getValueset() != null)       text=left + presentExpansion(exp.getValueset().getExpansion().getContains(),workerContext) + right;
 else       text=left + ""String_Node_Str"" + vs.getName()+ ""String_Node_Str""+ vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ right;
    }
 else {
      String url=""String_Node_Str"";
      String[] parts=linkText.split(""String_Node_Str"");
      if (parts[0].contains(""String_Node_Str"")) {
        StructureDefinition ed=workerContext.getExtensionStructure(null,parts[0]);
        if (ed == null)         throw new Error(location + ""String_Node_Str"" + parts[0]);
        url=ed.getUserData(""String_Node_Str"") + ""String_Node_Str"";
      }
      if (Utilities.noString(url)) {
        String[] paths=parts[0].split(""String_Node_Str"");
        StructureDefinition p=new ProfileUtilities(workerContext,null,null).getProfile(null,paths[0]);
        if (p != null) {
          String suffix=(paths.length > 1) ? ""String_Node_Str"" + parts[0] : ""String_Node_Str"";
          if (p.getUserData(""String_Node_Str"") == null)           url=paths[0].toLowerCase() + suffix;
 else           url=p.getUserData(""String_Node_Str"") + suffix;
        }
 else         if (definitions.hasResource(linkText)) {
          url=linkText.toLowerCase() + ""String_Node_Str"";
        }
 else         if (definitions.hasResource(paths[0])) {
          url=paths[0].toLowerCase() + ""String_Node_Str"" + linkText;
        }
 else         if (definitions.hasElementDefn(linkText)) {
          url=definitions.getSrcFile(linkText) + ""String_Node_Str"" + linkText;
        }
 else         if (definitions.hasPrimitiveType(linkText)) {
          url=""String_Node_Str"" + linkText;
        }
 else         if (definitions.getPageTitles().containsKey(linkText)) {
          url=definitions.getPageTitles().get(linkText);
        }
 else         if (definitions.getLogicalModel(linkText.toLowerCase()) != null) {
          url=definitions.getLogicalModel(linkText.toLowerCase()).getId() + ""String_Node_Str"";
        }
 else         if (validationErrors != null) {
          validationErrors.add(new ValidationMessage(Source.Publisher,IssueType.BUSINESSRULE,-1,-1,location,""String_Node_Str"" + linkText + ""String_Node_Str"",IssueSeverity.WARNING));
        }
 else         url=""String_Node_Str"";
      }
      text=left + ""String_Node_Str"" + linkText+ ""String_Node_Str""+ url+ ""String_Node_Str""+ right;
    }
  }
  if (!Utilities.noString(prefix)) {
    int i=text.length() - 3;
    while (i > 0) {
      if (text.substring(i,i + 2).equals(""String_Node_Str"")) {
        if (!text.substring(i,i + 7).equals(""String_Node_Str"")) {
          text=text.substring(0,i) + ""String_Node_Str"" + prefix+ text.substring(i + 2);
        }
      }
      i--;
    }
  }
  return text;
}",0.9764754436648784
23166,"/** 
 * Return a a datatype restriction
 * @param dataType data type to be restricted
 * @param facets List of facets
 * @return
 */
public Resource fhir_datatype_restriction(Resource dataType,List<Resource> facets){
  return fhir_bnode().addType(RDFS.Datatype).addObjectProperty(OWL2.onDatatype,dataType).addObjectProperty(OWL2.withRestrictions,new FHIRResource(model,facets)).resource;
}","/** 
 * Return a datatype restriction
 * @param dataType data type to be restricted
 * @param facets List of facets
 * @return
 */
public Resource fhir_datatype_restriction(Resource dataType,List<Resource> facets){
  return fhir_datatype(dataType).addObjectProperty(OWL2.withRestrictions,new FHIRResource(model,facets)).resource;
}",0.9
23167,"public static Resource xsd_type_for(String type){
  String key=type.startsWith(""String_Node_Str"") ? type.substring(3) : type;
  return ptMap.containsKey(key) ? ptMap.get(key) : RDFNamespace.FHIR.resourceRef(key);
}","public static Resource xsd_type_for(String type,boolean owl_types_required){
  String key=type.startsWith(""String_Node_Str"") ? type.substring(3) : type;
  Resource rval=ptMap.containsKey(key) ? ptMap.get(key) : RDFNamespace.FHIR.resourceRef(key);
  if (owl_types_required && owlTypeMap.containsKey(rval))   rval=owlTypeMap.get(rval);
  return rval;
}",0.7340425531914894
23168,"/** 
 * DefinedStringPattern Generator
 * @param dsp FHIR DefinedStringPattern Type (e.g. id, oid, uuid)
 * @throws Exception
 */
private void genDefinedStringPattern(DefinedStringPattern dsp) throws Exception {
  String dspType=dsp.getSchema();
  String dspTypeName=dspType.endsWith(""String_Node_Str"") ? dspType.substring(0,dspType.length() - 1) : dspType;
  Resource dspTypeRes=RDFTypeMap.xsd_type_for(dspTypeName);
  FHIRResource dspRes=fact.fhir_class(dsp.getCode(),dsp.getBase()).addDefinition(dsp.getDefinition());
  if (dspRes != null) {
    if (dspType.endsWith(""String_Node_Str"")) {
      if (!owlTarget) {
        List<Resource> facets=new ArrayList<Resource>(1);
        facets.add(fact.fhir_pattern(dsp.getRegex()));
        dspRes.restriction(fact.fhir_restriction(value,fact.fhir_datatype_restriction(dspTypeRes == XSD.xstring ? XSD.normalizedString : dspTypeRes,facets)));
      }
 else       dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
    }
 else     dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
  }
}","/** 
 * DefinedStringPattern Generator
 * @param dsp FHIR DefinedStringPattern Type (e.g. id, oid, uuid)
 * @throws Exception
 */
private void genDefinedStringPattern(DefinedStringPattern dsp) throws Exception {
  String dspType=dsp.getSchema();
  String dspTypeName=dspType.endsWith(""String_Node_Str"") ? dspType.substring(0,dspType.length() - 1) : dspType;
  Resource dspTypeRes=RDFTypeMap.xsd_type_for(dspTypeName,owlTarget);
  FHIRResource dspRes=fact.fhir_class(dsp.getCode(),dsp.getBase()).addDefinition(dsp.getDefinition());
  if (dspRes != null) {
    if (dspType.endsWith(""String_Node_Str"")) {
      List<Resource> facets=new ArrayList<Resource>(1);
      facets.add(fact.fhir_pattern(dsp.getRegex()));
      dspRes.restriction(fact.fhir_restriction(value,fact.fhir_datatype_restriction(dspTypeRes == XSD.xstring ? XSD.normalizedString : dspTypeRes,facets)));
    }
 else     dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
  }
}",0.9095452273863068
23169,"/** 
 * Emit an ontology definition for the file
 */
private void genOntologyDefinition(){
  fact.fhir_ontology(""String_Node_Str"",""String_Node_Str"").addDataProperty(RDFS.comment,""String_Node_Str"").addObjectProperty(OWL2.versionIRI,ResourceFactory.createResource(""String_Node_Str"")).addObjectProperty(OWL2.imports,RDFNamespace.W5.resourceRef(""String_Node_Str""));
}","/** 
 * Emit an ontology definition for the file
 */
private void genOntologyDefinition(){
  fact.fhir_ontology(""String_Node_Str"",""String_Node_Str"").addDataProperty(RDFS.comment,""String_Node_Str"").addObjectProperty(OWL2.versionIRI,ResourceFactory.createResource(""String_Node_Str"")).addObjectProperty(OWL2.imports,ResourceFactory.createResource(""String_Node_Str""));
}",0.9465020576131687
23170,"/** 
 * PrimitiveType Generator
 * @param pt FHIR Primitive Type (e.g. int, string, dateTime)
 */
private void genPrimitiveType(DefinedCode pt){
  String ptName=pt.getCode();
  FHIRResource ptRes=fact.fhir_class(ptName,""String_Node_Str"").addDefinition(pt.getDefinition());
  if (!owlTarget) {
    Resource rdfType=RDFTypeMap.xsd_type_for(ptName);
    if (rdfType != null)     ptRes.restriction(fact.fhir_cardinality_restriction(value,rdfType,0,1));
  }
}","/** 
 * PrimitiveType Generator
 * @param pt FHIR Primitive Type (e.g. int, string, dateTime)
 */
private void genPrimitiveType(DefinedCode pt){
  String ptName=pt.getCode();
  FHIRResource ptRes=fact.fhir_class(ptName,""String_Node_Str"").addDefinition(pt.getDefinition());
  Resource rdfType=RDFTypeMap.xsd_type_for(ptName,owlTarget);
  if (rdfType != null)   ptRes.restriction(fact.fhir_cardinality_restriction(value,fact.fhir_datatype(rdfType).resource,1,1));
}",0.9051254089422028
23171,"private void processTypes(String baseResourceName,FHIRResource baseResource,ElementDefn td,String predicateBase,boolean innerIsBackbone) throws Exception {
  for (  ElementDefn ed : td.getElements()) {
    String predicateName=predicateBase + ""String_Node_Str"" + (ed.getName().endsWith(""String_Node_Str"") ? ed.getName().substring(0,ed.getName().length() - 3) : ed.getName());
    FHIRResource predicateResource;
    if (ed.getName().endsWith(""String_Node_Str"")) {
      predicateResource=fact.fhir_objectProperty(predicateName);
      if (ed.typeCode().equals(""String_Node_Str"")) {
        Resource targetResource=RDFNamespace.FHIR.resourceRef(""String_Node_Str"");
        baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,targetResource,ed.getMinCardinality(),ed.getMaxCardinality()));
        predicateResource.domain(baseResource);
        predicateResource.range(targetResource);
      }
 else {
        List<Resource> typeOpts=new ArrayList<Resource>();
        for (        TypeRef tr : ed.getTypes()) {
          String qualifiedPredicateName=predicateName + Utilities.capitalize(tr.getName());
          Resource targetRes=fact.fhir_class(tr.getName()).resource;
          FHIRResource qualifiedPredicate=fact.fhir_objectProperty(qualifiedPredicateName,predicateResource.resource).domain(baseResource).range(targetRes);
          typeOpts.add(fact.fhir_cardinality_restriction(qualifiedPredicate.resource,targetRes,ed.getMinCardinality(),ed.getMaxCardinality()));
        }
        baseResource.restriction(fact.fhir_union(typeOpts));
      }
    }
 else {
      FHIRResource baseDef;
      if (ed.getTypes().isEmpty()) {
        predicateResource=fact.fhir_objectProperty(predicateName);
        String targetClassName=mapComponentName(baseResourceName,ed.getDeclaredTypeName());
        baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition());
        processTypes(targetClassName,baseDef,ed,predicateName,innerIsBackbone);
      }
 else {
        TypeRef targetType=ed.getTypes().get(0);
        String targetName=targetType.getName();
        if (targetName.startsWith(""String_Node_Str"")) {
          ElementDefn targetRef=getElementForPath(targetName.substring(1));
          String targetRefName=targetRef.getName();
          String targetClassName=baseResourceName + Character.toUpperCase(targetRefName.charAt(0)) + targetRefName.substring(1);
          baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition()).addTitle(ed.getShortDefn());
          if (!processing.contains(targetRefName)) {
            processing.add(targetRefName);
            processTypes(targetClassName,baseDef,targetRef,predicateName,innerIsBackbone);
            processing.remove(targetRefName);
          }
        }
 else {
          baseDef=fact.fhir_class(targetName);
        }
        if (targetName.equals(""String_Node_Str""))         predicateResource=fact.fhir_dataProperty(predicateName);
 else         predicateResource=fact.fhir_objectProperty(predicateName);
      }
      predicateResource.addTitle(ed.getShortDefn()).addDefinition(ed.getDefinition()).domain(baseResource);
      baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,baseDef.resource,ed.getMinCardinality(),ed.getMaxCardinality()));
      predicateResource.range(baseDef.resource);
      if (!Utilities.noString(ed.getW5()))       predicateResource.addObjectProperty(RDFS.subPropertyOf,RDFNamespace.W5.resourceRef(ed.getW5()));
    }
  }
}","private void processTypes(String baseResourceName,FHIRResource baseResource,ElementDefn td,String predicateBase,boolean innerIsBackbone) throws Exception {
  for (  ElementDefn ed : td.getElements()) {
    String predicateName=predicateBase + ""String_Node_Str"" + (ed.getName().endsWith(""String_Node_Str"") ? ed.getName().substring(0,ed.getName().length() - 3) : ed.getName());
    FHIRResource predicateResource;
    if (ed.getName().endsWith(""String_Node_Str"")) {
      predicateResource=fact.fhir_objectProperty(predicateName);
      if (ed.typeCode().equals(""String_Node_Str"")) {
        Resource targetResource=RDFNamespace.FHIR.resourceRef(""String_Node_Str"");
        baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,targetResource,ed.getMinCardinality(),ed.getMaxCardinality()));
        predicateResource.domain(baseResource);
        predicateResource.range(targetResource);
      }
 else {
        List<Resource> typeOpts=new ArrayList<Resource>();
        for (        TypeRef tr : ed.getTypes()) {
          String trName=tr.getName();
          if (trName.equals(""String_Node_Str""))           trName=""String_Node_Str"";
          String qualifiedPredicateName=predicateName + Utilities.capitalize(trName);
          Resource targetRes=fact.fhir_class(tr.getName()).resource;
          FHIRResource qualifiedPredicate=fact.fhir_objectProperty(qualifiedPredicateName,predicateResource.resource).domain(baseResource).range(targetRes);
          typeOpts.add(fact.fhir_cardinality_restriction(qualifiedPredicate.resource,targetRes,ed.getMinCardinality(),ed.getMaxCardinality()));
        }
        baseResource.restriction(fact.fhir_union(typeOpts));
      }
    }
 else {
      FHIRResource baseDef;
      if (ed.getTypes().isEmpty()) {
        predicateResource=fact.fhir_objectProperty(predicateName);
        String targetClassName=mapComponentName(baseResourceName,ed.getDeclaredTypeName());
        baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition());
        processTypes(targetClassName,baseDef,ed,predicateName,innerIsBackbone);
      }
 else {
        TypeRef targetType=ed.getTypes().get(0);
        String targetName=targetType.getName();
        if (targetName.startsWith(""String_Node_Str"")) {
          ElementDefn targetRef=getElementForPath(targetName.substring(1));
          String targetRefName=targetRef.getName();
          String targetClassName=baseResourceName + Character.toUpperCase(targetRefName.charAt(0)) + targetRefName.substring(1);
          baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition()).addTitle(ed.getShortDefn());
          if (!processing.contains(targetRefName)) {
            processing.add(targetRefName);
            processTypes(targetClassName,baseDef,targetRef,predicateName,innerIsBackbone);
            processing.remove(targetRefName);
          }
        }
 else {
          baseDef=fact.fhir_class(targetName);
        }
        if (targetName.equals(""String_Node_Str""))         predicateResource=fact.fhir_dataProperty(predicateName);
 else         predicateResource=fact.fhir_objectProperty(predicateName);
      }
      predicateResource.addTitle(ed.getShortDefn()).addDefinition(ed.getDefinition()).domain(baseResource);
      baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,baseDef.resource,ed.getMinCardinality(),ed.getMaxCardinality()));
      predicateResource.range(baseDef.resource);
      if (!Utilities.noString(ed.getW5()))       predicateResource.addObjectProperty(RDFS.subPropertyOf,RDFNamespace.W5.resourceRef(ed.getW5()));
    }
  }
}",0.9815518176885512
23172,"/** 
 * Emit all the basic atoms that are implicit in the actual model
 */
private void genBaseMetadata(){
  FHIRResource Resource=fact.fhir_class(""String_Node_Str"");
  FHIRResource Element=fact.fhir_class(""String_Node_Str"");
  FHIRResource Reference=fact.fhir_class(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"").addDefinition(""String_Node_Str"").restriction(fact.fhir_restriction(value,RDFS.Literal));
  FHIRResource treeRoot=fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"");
  FHIRResource nodeRole=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Resource).range(treeRoot.resource);
  Resource.restriction(fact.fhir_cardinality_restriction(nodeRole.resource,treeRoot.resource,0,1));
  FHIRResource index=fact.fhir_dataProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Element).range(XSD.nonNegativeInteger);
  Element.restriction(fact.fhir_cardinality_restriction(index.resource,XSD.nonNegativeInteger,0,1));
  FHIRResource link=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"");
  Reference.restriction(fact.fhir_cardinality_restriction(link.resource,Resource.resource,0,1));
  FHIRResource NarrativeDiv=fact.fhir_dataProperty(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"").domain(NarrativeDiv).range(XSD.xstring);
}","/** 
 * Emit all the basic atoms that are implicit in the actual model
 */
private void genBaseMetadata(){
  FHIRResource Resource=fact.fhir_class(""String_Node_Str"");
  FHIRResource Element=fact.fhir_class(""String_Node_Str"");
  FHIRResource Reference=fact.fhir_class(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"").addDefinition(""String_Node_Str"").restriction(fact.fhir_restriction(value,RDFS.Literal));
  FHIRResource treeRoot=fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"");
  FHIRResource nodeRole=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Resource).range(treeRoot.resource);
  Resource.restriction(fact.fhir_cardinality_restriction(nodeRole.resource,treeRoot.resource,0,1));
  FHIRResource index=fact.fhir_dataProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Element).range(XSD.nonNegativeInteger);
  Element.restriction(fact.fhir_cardinality_restriction(index.resource,XSD.nonNegativeInteger,0,1));
  FHIRResource link=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"");
  Reference.restriction(fact.fhir_cardinality_restriction(link.resource,Resource.resource,0,1));
  FHIRResource NarrativeDiv=fact.fhir_dataProperty(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"",""String_Node_Str"").restriction(fact.fhir_cardinality_restriction(value,fact.fhir_datatype(XSD.xstring).resource,1,1));
}",0.9505593648502346
23173,"public void executeMain() throws Exception {
  OntModel model=ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
  model.setNsPrefix(RDFNamespace.W5.getPrefix(),RDFNamespace.W5.getURI());
  model.setNsPrefix(RDFNamespace.FHIR.getPrefix(),RDFNamespace.FHIR.getURI());
  Ontology w5=model.createOntology(RDFNamespace.W5.getURI());
  w5.addProperty(RDFS.label,""String_Node_Str"");
  w5.addProperty(RDFS.comment,""String_Node_Str"");
  w5.addVersionInfo(""String_Node_Str"");
  w5.addProperty(OWL2.versionIRI,""String_Node_Str"");
  Set<String> w5classes=new HashSet<String>();
  for (  W5Entry e : definitions.getW5list()) {
    Set<String> escs=e.getSubClasses();
    if (!escs.isEmpty()) {
      w5classes.add(e.getCode());
      for (      String s : e.getSubClasses()) {
        if (!s.contains(""String_Node_Str""))         s=e.getCode() + '.' + s;
        w5classes.add(s);
      }
    }
  }
  OntProperty wp=model.createObjectProperty(RDFNamespace.W5.uriFor(""String_Node_Str""));
  wp.addLabel(""String_Node_Str"",null);
  wp.addComment(""String_Node_Str"",null);
  for (  W5Entry e : definitions.getW5list()) {
    String es=e.getCode();
    if (w5classes.contains(es)) {
      OntClass ec=model.createClass(RDFNamespace.W5.uriFor(es));
      ec.addLabel(es,null);
      ec.addComment(e.getDescription(),null);
      for (      String s : e.getSubClasses()) {
        String s_uri=RDFNamespace.W5.uriFor(s.contains(""String_Node_Str"") ? s : e.getCode() + ""String_Node_Str"" + s);
        OntClass c=model.createClass(s_uri);
        c.addSuperClass(ec);
        c.addLabel(s,null);
      }
    }
 else {
      OntProperty ep=model.createObjectProperty(RDFNamespace.W5.uriFor(es));
      ep.addLabel(es,null);
      ep.addComment(e.getDescription(),null);
      String esroot=es;
      while (esroot.contains(""String_Node_Str"")) {
        esroot=esroot.substring(0,esroot.lastIndexOf('.'));
        ep.addSuperProperty(model.createProperty(RDFNamespace.W5.uriFor(esroot)));
      }
    }
  }
  commit(model,true);
}","public void executeMain() throws Exception {
  OntModel model=ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
  model.setNsPrefix(RDFNamespace.W5.getPrefix(),RDFNamespace.W5.getURI());
  model.setNsPrefix(RDFNamespace.FHIR.getPrefix(),RDFNamespace.FHIR.getURI());
  Ontology w5=model.createOntology(""String_Node_Str"");
  w5.addProperty(RDFS.label,""String_Node_Str"");
  w5.addProperty(RDFS.comment,""String_Node_Str"");
  w5.addVersionInfo(""String_Node_Str"");
  w5.addProperty(OWL2.versionIRI,""String_Node_Str"");
  Set<String> w5classes=new HashSet<String>();
  for (  W5Entry e : definitions.getW5list()) {
    Set<String> escs=e.getSubClasses();
    if (!escs.isEmpty()) {
      w5classes.add(e.getCode());
      for (      String s : e.getSubClasses()) {
        if (!s.contains(""String_Node_Str""))         s=e.getCode() + '.' + s;
        w5classes.add(s);
      }
    }
  }
  OntProperty wp=model.createObjectProperty(RDFNamespace.W5.uriFor(""String_Node_Str""));
  wp.addLabel(""String_Node_Str"",null);
  wp.addComment(""String_Node_Str"",null);
  for (  W5Entry e : definitions.getW5list()) {
    String es=e.getCode();
    if (w5classes.contains(es)) {
      OntClass ec=model.createClass(RDFNamespace.W5.uriFor(es));
      ec.addLabel(es,null);
      ec.addComment(e.getDescription(),null);
      for (      String s : e.getSubClasses()) {
        String s_uri=RDFNamespace.W5.uriFor(s.contains(""String_Node_Str"") ? s : e.getCode() + ""String_Node_Str"" + s);
        OntClass c=model.createClass(s_uri);
        c.addSuperClass(ec);
        c.addLabel(s,null);
      }
    }
 else {
      OntProperty ep=model.createObjectProperty(RDFNamespace.W5.uriFor(es));
      ep.addLabel(es,null);
      ep.addComment(e.getDescription(),null);
      String esroot=es;
      while (esroot.contains(""String_Node_Str"")) {
        esroot=esroot.substring(0,esroot.lastIndexOf('.'));
        ep.addSuperProperty(model.createProperty(RDFNamespace.W5.uriFor(esroot)));
      }
    }
  }
  commit(model,true);
}",0.9897730107258668
23174,"private void processWarnings(boolean showOnlyErrors) throws Exception {
  String xslt=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OutputStreamWriter s=new OutputStreamWriter(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),""String_Node_Str"");
  s.write(""String_Node_Str"");
  for (  WorkGroup wg : page.getDefinitions().getWorkgroups().values()) {
    s.write(""String_Node_Str"" + wg.getCode() + ""String_Node_Str""+ wg.getName()+ ""String_Node_Str""+ wg.getUrl()+ ""String_Node_Str"");
  }
  for (  PageInformation pn : page.getDefinitions().getPageInfo().values()) {
    s.write(""String_Node_Str"" + pn.getName() + ""String_Node_Str""+ pn.getWgCode()+ ""String_Node_Str""+ pn.getFmm()+ ""String_Node_Str"");
  }
  try {
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
  }
 catch (  Exception e) {
    System.out.println(e.toString());
    for (    ValidationMessage err : page.getValidationErrors()) {
      if (!page.getSuppressedMessages().contains(err.getDisplay()))       System.out.println(err.summary());
    }
    throw new Exception(""String_Node_Str"");
  }
  for (  ValidationMessage e : page.getValidationErrors()) {
    if (!page.getSuppressedMessages().contains(e.getDisplay()))     s.write(e.toXML());
  }
  s.write(""String_Node_Str"");
  s.flush();
  s.close();
  String xslt2=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FileOutputStream s2=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
  s2.write(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt2).getBytes(""String_Node_Str""));
  s2.flush();
  s2.close();
  String xslt3=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String hw=Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt3);
  if (!showOnlyErrors)   page.log(hw,LogMessageType.Process);
  int i=0;
  int w=0;
  int ee=0;
  for (  ValidationMessage e : page.getValidationErrors()) {
    if (e.getLevel() == IssueSeverity.ERROR || e.getLevel() == IssueSeverity.FATAL) {
      ee++;
      page.log(e.summary(),LogMessageType.Hint);
    }
 else     if (e.getLevel() == IssueSeverity.WARNING) {
      w++;
    }
 else     if (e.getLevel() == IssueSeverity.INFORMATION) {
      i++;
    }
  }
  page.getQa().setCounts(ee,w,i);
}","private void processWarnings(boolean showOnlyErrors) throws Exception {
  String xslt=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OutputStreamWriter s=new OutputStreamWriter(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),""String_Node_Str"");
  s.write(""String_Node_Str"");
  for (  WorkGroup wg : page.getDefinitions().getWorkgroups().values()) {
    s.write(""String_Node_Str"" + wg.getCode() + ""String_Node_Str""+ wg.getName()+ ""String_Node_Str""+ wg.getUrl()+ ""String_Node_Str"");
  }
  for (  PageInformation pn : page.getDefinitions().getPageInfo().values()) {
    s.write(""String_Node_Str"" + pn.getName() + ""String_Node_Str""+ pn.getWgCode()+ ""String_Node_Str""+ pn.getFmm()+ ""String_Node_Str"");
  }
  try {
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
    s.write(new String(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt)));
  }
 catch (  Exception e) {
    System.out.println(e.toString());
    for (    ValidationMessage err : page.getValidationErrors()) {
      if (!page.getSuppressedMessages().contains(err.getDisplay()))       System.out.println(err.summary());
    }
    System.out.println(""String_Node_Str"");
  }
  for (  ValidationMessage e : page.getValidationErrors()) {
    if (!page.getSuppressedMessages().contains(e.getDisplay()))     s.write(e.toXML());
  }
  s.write(""String_Node_Str"");
  s.flush();
  s.close();
  String xslt2=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FileOutputStream s2=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
  s2.write(Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt2).getBytes(""String_Node_Str""));
  s2.flush();
  s2.close();
  String xslt3=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String hw=Utilities.saxonTransform(page.getFolders().dstDir + ""String_Node_Str"",xslt3);
  if (!showOnlyErrors)   page.log(hw,LogMessageType.Process);
  int i=0;
  int w=0;
  int ee=0;
  for (  ValidationMessage e : page.getValidationErrors()) {
    if (e.getLevel() == IssueSeverity.ERROR || e.getLevel() == IssueSeverity.FATAL) {
      ee++;
      page.log(e.summary(),LogMessageType.Hint);
    }
 else     if (e.getLevel() == IssueSeverity.WARNING) {
      w++;
    }
 else     if (e.getLevel() == IssueSeverity.INFORMATION) {
      i++;
    }
  }
  page.getQa().setCounts(ee,w,i);
}",0.9933674436232708
23175,"private void scanForPages(SpecMapManager spm,String base,String folder){
  for (  File f : new File(folder).listFiles()) {
    if (f.isDirectory()) {
      scanForPages(spm,base,f.getAbsolutePath());
    }
 else     if (f.getName().equals(""String_Node_Str"")) {
      String s=folder.substring(0,folder.length() - 1);
      if (s.length() > base.length()) {
        s=s.substring(base.length()).replace(File.separator,""String_Node_Str"");
        if (!Utilities.noString(s)) {
          spm.target(s);
          spm.target(s + ""String_Node_Str"");
        }
      }
    }
 else {
      String ext=f.getName().substring(f.getName().lastIndexOf(""String_Node_Str""));
      if (Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))       spm.target(f.getAbsolutePath().substring(base.length()).replace(File.separator,""String_Node_Str""));
    }
  }
}","private void scanForPages(SpecMapManager spm,String base,String folder){
  for (  File f : new File(folder).listFiles()) {
    if (f.isDirectory()) {
      scanForPages(spm,base,f.getAbsolutePath());
    }
 else     if (f.getName().equals(""String_Node_Str"")) {
      String s=folder.substring(0,folder.length() - 1);
      if (s.length() > base.length()) {
        s=s.substring(base.length()).replace(File.separator,""String_Node_Str"");
        if (!Utilities.noString(s)) {
          spm.target(s);
          spm.target(s + ""String_Node_Str"");
        }
      }
    }
 else {
      String ext=f.getName().contains(""String_Node_Str"") ? f.getName().substring(f.getName().lastIndexOf(""String_Node_Str"")) : ""String_Node_Str"";
      if (Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))       spm.target(f.getAbsolutePath().substring(base.length()).replace(File.separator,""String_Node_Str""));
    }
  }
}",0.9656319290465633
23176,"private void scanForImages(SpecMapManager spm,String base,String folder){
  for (  File f : new File(folder).listFiles()) {
    if (f.isDirectory()) {
      scanForImages(spm,base,f.getAbsolutePath());
    }
 else {
      String ext=f.getName().substring(f.getName().lastIndexOf(""String_Node_Str""));
      if (Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str""))       spm.image(f.getAbsolutePath().substring(base.length()).replace(File.separator,""String_Node_Str""));
    }
  }
}","private void scanForImages(SpecMapManager spm,String base,String folder){
  for (  File f : new File(folder).listFiles()) {
    if (f.isDirectory()) {
      scanForImages(spm,base,f.getAbsolutePath());
    }
 else {
      String ext=f.getName().contains(""String_Node_Str"") ? f.getName().substring(f.getName().lastIndexOf(""String_Node_Str"")) : ""String_Node_Str"";
      if (Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str""))       spm.image(f.getAbsolutePath().substring(base.length()).replace(File.separator,""String_Node_Str""));
    }
  }
}",0.9406130268199234
23177,"@Override public FetchedFile fetch(Type source,FetchedFile src) throws Exception {
  if (source instanceof Reference) {
    String s=((Reference)source).getReference();
    if (!s.contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String type=s.substring(0,s.indexOf(""String_Node_Str""));
    String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
    if (!pkp.getContext().hasResource(StructureDefinition.class,""String_Node_Str"" + type) && !(pkp.getContext().hasResource(StructureDefinition.class,""String_Node_Str"") && type.equals(""String_Node_Str"")))     throw new Exception(""String_Node_Str"" + s);
    if (!id.matches(FormatUtilities.ID_REGEX))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String fn=pkp.getSourceFor(type + ""String_Node_Str"" + id);
    List<String> dirs=new ArrayList<>();
    dirs.add(Utilities.getDirectoryForFile(src.getPath()));
    dirs.addAll(resourceDirs);
    if (Utilities.noString(fn)) {
      fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ dirs.toString());
    }
 else {
      fn=findFile(dirs,fn);
      if (!exists(fn))       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ fn);
    }
    return fetch(fn);
  }
 else   if (source instanceof UriType) {
    UriType s=(UriType)source;
    String fn=Utilities.path(Utilities.getDirectoryForFile(src.getPath()),s.getValueAsString());
    return fetch(fn);
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}","@Override public FetchedFile fetch(Type source,FetchedFile src) throws Exception {
  if (source instanceof Reference) {
    String s=((Reference)source).getReference();
    if (!s.contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String type=s.substring(0,s.indexOf(""String_Node_Str""));
    String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
    if (!pkp.getContext().hasResource(StructureDefinition.class,""String_Node_Str"" + type) && !(pkp.getContext().hasResource(StructureDefinition.class,""String_Node_Str"") && type.equals(""String_Node_Str"")))     throw new Exception(""String_Node_Str"" + s);
    if (!id.matches(FormatUtilities.ID_REGEX))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String fn=pkp.getSourceFor(type + ""String_Node_Str"" + id);
    List<String> dirs=new ArrayList<>();
    dirs.add(Utilities.getDirectoryForFile(src.getPath()));
    dirs.addAll(resourceDirs);
    if (Utilities.noString(fn)) {
      fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ dirs.toString());
    }
 else {
      fn=findFile(dirs,fn);
      if (fn == null || !exists(fn))       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ fn);
    }
    return fetch(fn);
  }
 else   if (source instanceof UriType) {
    UriType s=(UriType)source;
    String fn=Utilities.path(Utilities.getDirectoryForFile(src.getPath()),s.getValueAsString());
    return fetch(fn);
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}",0.997129971299713
23178,"private void copySearchParameters(ResourceDefn resource){
  for (  SearchParameterDefn sps : template.getSearchParams().values()) {
    if (hasPath(resource,sps.getPaths().get(0))) {
      SearchParameterDefn spt=new SearchParameterDefn(sps,template.getName(),resource.getName(),templateTitle);
      resource.getSearchParams().put(spt.getCode(),spt);
    }
  }
}","private void copySearchParameters(ResourceDefn resource){
  for (  SearchParameterDefn sps : template.getSearchParams().values()) {
    if (sps.getPaths().size() > 0 && hasPath(resource,sps.getPaths().get(0))) {
      SearchParameterDefn spt=new SearchParameterDefn(sps,template.getName(),resource.getName(),templateTitle);
      resource.getSearchParams().put(spt.getCode(),spt);
    }
  }
}",0.866225165562914
23179,"private void genElement(StringBuilder s,int indent,ElementDefn elem,String m,int children,boolean isRoot,boolean sparse){
  if ((children == ROOT_ONLY || children == ALL)) {
    if (isRoot || sparse || hasMapping(elem,m)) {
      s.append(""String_Node_Str"");
      if (indent == 0) {
        s.append(""String_Node_Str"" + elem.getName() + ""String_Node_Str"");
        s.append(""String_Node_Str"" + elem.getName().toLowerCase() + ""String_Node_Str"");
      }
      for (int i=0; i < indent; i++) {
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
      }
      if (indent == 0)       s.append(""String_Node_Str"" + elem.getName() + ""String_Node_Str"");
 else       s.append(elem.getName());
      s.append(""String_Node_Str"" + Utilities.escapeXml(elem.getMappings().get(m)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    }
  }
  if (!isRoot || !""String_Node_Str"".equalsIgnoreCase(elem.getMappings().get(m))) {
    if (children == CHILDREN_ONLY || children == ALL) {
      for (      ElementDefn child : elem.getElements()) {
        genElement(s,indent + 1,child,m,ALL,false,sparse);
      }
    }
  }
}","private void genElement(StringBuilder s,int indent,ElementDefn elem,String m,int children,boolean isRoot,boolean sparse){
  if ((children == ROOT_ONLY || children == ALL)) {
    if (isRoot || !sparse || hasMapping(elem,m)) {
      s.append(""String_Node_Str"");
      if (indent == 0) {
        s.append(""String_Node_Str"" + elem.getName() + ""String_Node_Str"");
        s.append(""String_Node_Str"" + elem.getName().toLowerCase() + ""String_Node_Str"");
      }
      for (int i=0; i < indent; i++) {
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
        s.append(""String_Node_Str"");
      }
      if (indent == 0)       s.append(""String_Node_Str"" + elem.getName() + ""String_Node_Str"");
 else       s.append(elem.getName());
      s.append(""String_Node_Str"" + Utilities.escapeXml(elem.getMappings().get(m)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    }
  }
  if (!isRoot || !""String_Node_Str"".equalsIgnoreCase(elem.getMappings().get(m))) {
    if (children == CHILDREN_ONLY || children == ALL) {
      for (      ElementDefn child : elem.getElements()) {
        genElement(s,indent + 1,child,m,ALL,false,sparse);
      }
    }
  }
}",0.9995893223819302
23180,"@Override public Bundle loadBundle(InputStream stream,boolean isJson) throws FHIRException, IOException {
  Resource r2=null;
  if (isJson)   r2=new JsonParser().parse(stream);
 else   r2=new XmlParser().parse(stream);
  org.hl7.fhir.dstu3.model.Resource r3=new VersionConvertor_10_30(this).convertResource(r2);
  Bundle b;
  if (r3 instanceof Bundle)   b=(Bundle)r3;
 else {
    b=new Bundle();
    b.setId(UUID.randomUUID().toString().toLowerCase());
    b.setType(BundleType.COLLECTION);
    b.addEntry().setResource(r3).setFullUrl(r3 instanceof MetadataResource ? ((MetadataResource)r3).getUrl() : null);
  }
  for (  CodeSystem cs : cslist) {
    BundleEntryComponent be=b.addEntry();
    be.setFullUrl(cs.getUrl());
    be.setResource(cs);
  }
  if (killPrimitives) {
    List<BundleEntryComponent> remove=new ArrayList<BundleEntryComponent>();
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        if (sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE)         remove.add(be);
      }
    }
    b.getEntry().removeAll(remove);
  }
  if (patchUrls) {
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        sd.setUrl(sd.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
        sd.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(""String_Node_Str""));
      }
    }
  }
  return b;
}","@Override public Bundle loadBundle(InputStream stream,boolean isJson) throws FHIRException, IOException {
  Resource r2=null;
  if (isJson)   r2=new JsonParser().parse(stream);
 else   r2=new XmlParser().parse(stream);
  org.hl7.fhir.dstu3.model.Resource r3=new VersionConvertor_10_30(this).convertResource(r2);
  Bundle b;
  if (r3 instanceof Bundle)   b=(Bundle)r3;
 else {
    b=new Bundle();
    b.setId(UUID.randomUUID().toString().toLowerCase());
    b.setType(BundleType.COLLECTION);
    b.addEntry().setResource(r3).setFullUrl(r3 instanceof MetadataResource ? ((MetadataResource)r3).getUrl() : null);
  }
  for (  CodeSystem cs : cslist) {
    BundleEntryComponent be=b.addEntry();
    be.setFullUrl(cs.getUrl());
    be.setResource(cs);
  }
  cslist.clear();
  if (killPrimitives) {
    List<BundleEntryComponent> remove=new ArrayList<BundleEntryComponent>();
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        if (sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE)         remove.add(be);
      }
    }
    b.getEntry().removeAll(remove);
  }
  if (patchUrls) {
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        sd.setUrl(sd.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
        sd.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(""String_Node_Str""));
      }
    }
  }
  return b;
}",0.9945054945054944
23181,"@Override public Bundle loadBundle(InputStream stream,boolean isJson) throws FHIRException, IOException {
  Resource r2=null;
  if (isJson)   r2=new JsonParser().parse(stream);
 else   r2=new XmlParser().parse(stream);
  org.hl7.fhir.r4.model.Resource r4=new VersionConvertor_10_40(this).convertResource(r2);
  Bundle b;
  if (r4 instanceof Bundle)   b=(Bundle)r4;
 else {
    b=new Bundle();
    b.setId(UUID.randomUUID().toString().toLowerCase());
    b.setType(BundleType.COLLECTION);
    b.addEntry().setResource(r4).setFullUrl(r4 instanceof MetadataResource ? ((MetadataResource)r4).getUrl() : null);
  }
  for (  CodeSystem cs : cslist) {
    BundleEntryComponent be=b.addEntry();
    be.setFullUrl(cs.getUrl());
    be.setResource(cs);
  }
  if (killPrimitives) {
    List<BundleEntryComponent> remove=new ArrayList<BundleEntryComponent>();
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        if (sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE)         remove.add(be);
      }
    }
    b.getEntry().removeAll(remove);
  }
  if (patchUrls) {
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        sd.setUrl(sd.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
        sd.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(""String_Node_Str""));
      }
    }
  }
  return b;
}","@Override public Bundle loadBundle(InputStream stream,boolean isJson) throws FHIRException, IOException {
  Resource r2=null;
  if (isJson)   r2=new JsonParser().parse(stream);
 else   r2=new XmlParser().parse(stream);
  org.hl7.fhir.r4.model.Resource r4=new VersionConvertor_10_40(this).convertResource(r2);
  Bundle b;
  if (r4 instanceof Bundle)   b=(Bundle)r4;
 else {
    b=new Bundle();
    b.setId(UUID.randomUUID().toString().toLowerCase());
    b.setType(BundleType.COLLECTION);
    b.addEntry().setResource(r4).setFullUrl(r4 instanceof MetadataResource ? ((MetadataResource)r4).getUrl() : null);
  }
  for (  CodeSystem cs : cslist) {
    BundleEntryComponent be=b.addEntry();
    be.setFullUrl(cs.getUrl());
    be.setResource(cs);
  }
  cslist.clear();
  if (killPrimitives) {
    List<BundleEntryComponent> remove=new ArrayList<BundleEntryComponent>();
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        if (sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE)         remove.add(be);
      }
    }
    b.getEntry().removeAll(remove);
  }
  if (patchUrls) {
    for (    BundleEntryComponent be : b.getEntry()) {
      if (be.hasResource() && be.getResource() instanceof StructureDefinition) {
        StructureDefinition sd=(StructureDefinition)be.getResource();
        sd.setUrl(sd.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
        sd.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(""String_Node_Str""));
      }
    }
  }
  return b;
}",0.9944954128440368
23182,"public StructureMapUtilities(IWorkerContext worker,ITransformerServices services){
  super();
  this.worker=worker;
  this.library=new HashMap<String,StructureMap>();
  for (  org.hl7.fhir.r4.model.MetadataResource bc : worker.allConformanceResources()) {
    if (bc instanceof StructureMap)     library.put(bc.getUrl(),(StructureMap)bc);
  }
  this.services=services;
  fpe=new FHIRPathEngine(worker);
  fpe.setHostServices(new FFHIRPathHostServices());
}","public StructureMapUtilities(IWorkerContext worker,ITransformerServices services){
  super();
  this.worker=worker;
  loadLibrary(worker);
  this.services=services;
  fpe=new FHIRPathEngine(worker);
  fpe.setHostServices(new FFHIRPathHostServices());
}",0.6751412429378532
23183,"public Resource transform(byte[] source,FhirFormat cntType,String mapUri) throws Exception {
  StructureMapUtilities scu=new StructureMapUtilities(context);
  return null;
}","public Resource transform(byte[] source,FhirFormat cntType,String mapUri) throws Exception {
  StructureMapUtilities scu=new StructureMapUtilities(context);
  org.hl7.fhir.r4.elementmodel.Element src=Manager.parse(context,new ByteArrayInputStream(source),cntType);
  StructureMap map=scu.getLibrary().get(mapUri);
  if (map == null)   throw new Error(""String_Node_Str"" + mapUri);
  Resource dst=ResourceFactory.createResource(""String_Node_Str"");
  scu.transform(null,src,map,dst);
  return dst;
}",0.484304932735426
23184,"public static void main(String[] args) throws Exception {
  if (args.length == 0) {
    runGUI();
  }
 else   if (hasParam(args,""String_Node_Str"")) {
    try {
      ValidationEngineTests.execute();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"")|| hasParam(args,""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ Constants.REVISION);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else {
    String definitions=""String_Node_Str"";
    List<String> igs=new ArrayList<String>();
    List<String> questionnaires=new ArrayList<String>();
    String txServer=""String_Node_Str"";
    boolean doNative=false;
    List<String> profiles=new ArrayList<String>();
    EngineMode mode=EngineMode.VALIDATION;
    String map=null;
    String output=null;
    List<String> sources=new ArrayList<String>();
    Map<String,String> locations=new HashMap<String,String>();
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       definitions=args[++i];
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       output=args[++i];
 else       if (args[i].equals(""String_Node_Str"")) {
        String p=null;
        if (i + 1 == args.length)         throw new Error(""String_Node_Str"");
 else {
          p=args[++i];
          profiles.add(p);
        }
        if (p != null && i + 1 < args.length && args[i + 1].equals(""String_Node_Str"")) {
          i++;
          if (i + 1 == args.length)           throw new Error(""String_Node_Str"");
 else           locations.put(p,args[++i]);
        }
      }
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       questionnaires.add(args[++i]);
 else       if (args[i].equals(""String_Node_Str""))       doNative=true;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.TRANSFORM;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.NARRATIVE;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.SNAPSHOT;
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       txServer=""String_Node_Str"".equals(args[++i]) ? null : args[i];
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       igs.add(args[++i]);
 else       if (args[i].equals(""String_Node_Str""))       if (map == null)       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       map=args[++i];
 else       throw new Exception(""String_Node_Str"");
 else       if (args[i].startsWith(""String_Node_Str""))       i++;
 else       sources.add(args[i]);
    }
    if (sources.isEmpty())     throw new Exception(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + definitions);
    System.out.println(""String_Node_Str"" + txServer);
    ValidationEngine validator=new ValidationEngine(definitions,txServer);
    System.out.println(""String_Node_Str"" + validator.getContext().getVersion() + ""String_Node_Str"");
    for (    String src : igs) {
      System.out.println(""String_Node_Str"" + src);
      validator.loadIg(src);
    }
    validator.setQuestionnaires(questionnaires);
    validator.setNative(doNative);
    if (mode == EngineMode.TRANSFORM) {
      if (sources.size() > 1)       throw new Exception(""String_Node_Str"");
      if (txServer == null)       throw new Exception(""String_Node_Str"");
      if (map == null)       throw new Exception(""String_Node_Str"");
      try {
        Resource r=validator.transform(sources.get(0),map);
        System.out.println(""String_Node_Str"");
        if (output != null) {
          FileOutputStream s=new FileOutputStream(output);
          new XmlParser().compose(s,r,true);
          s.close();
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
    }
 else     if (mode == EngineMode.NARRATIVE) {
      DomainResource r=validator.generate(sources.get(0));
      System.out.println(""String_Node_Str"");
      if (output != null) {
        handleOutput(r,output);
      }
    }
 else     if (mode == EngineMode.SNAPSHOT) {
      if (definitions == null)       throw new Exception(""String_Node_Str"");
      StructureDefinition r=validator.snapshot(sources.get(0));
      System.out.println(""String_Node_Str"");
      if (output != null) {
        handleOutput(r,output);
      }
    }
 else {
      if (definitions == null)       throw new Exception(""String_Node_Str"");
      for (      String s : profiles) {
        if (validator.getContext().fetchResource(StructureDefinition.class,s) == null) {
          System.out.println(""String_Node_Str"" + s);
          validator.loadProfile(locations.getOrDefault(s,s));
        }
      }
      System.out.println(""String_Node_Str"");
      Resource r=validator.validate(sources,profiles);
      if (output == null) {
        if (r instanceof Bundle)         for (        BundleEntryComponent e : ((Bundle)r).getEntry())         displayOO((OperationOutcome)e.getResource());
 else         displayOO((OperationOutcome)r);
      }
 else {
        FileOutputStream s=new FileOutputStream(output);
        new XmlParser().compose(s,r,true);
        s.close();
      }
    }
  }
}","public static void main(String[] args) throws Exception {
  if (args.length == 0) {
    runGUI();
  }
 else   if (hasParam(args,""String_Node_Str"")) {
    try {
      ValidationEngineTests.execute();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"")|| hasParam(args,""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ Constants.REVISION);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else {
    String definitions=""String_Node_Str"";
    List<String> igs=new ArrayList<String>();
    List<String> questionnaires=new ArrayList<String>();
    String txServer=""String_Node_Str"";
    boolean doNative=false;
    List<String> profiles=new ArrayList<String>();
    EngineMode mode=EngineMode.VALIDATION;
    String map=null;
    String output=null;
    List<String> sources=new ArrayList<String>();
    Map<String,String> locations=new HashMap<String,String>();
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       definitions=args[++i];
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       output=args[++i];
 else       if (args[i].equals(""String_Node_Str"")) {
        String p=null;
        if (i + 1 == args.length)         throw new Error(""String_Node_Str"");
 else {
          p=args[++i];
          profiles.add(p);
        }
        if (p != null && i + 1 < args.length && args[i + 1].equals(""String_Node_Str"")) {
          i++;
          if (i + 1 == args.length)           throw new Error(""String_Node_Str"");
 else           locations.put(p,args[++i]);
        }
      }
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       questionnaires.add(args[++i]);
 else       if (args[i].equals(""String_Node_Str""))       doNative=true;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.TRANSFORM;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.NARRATIVE;
 else       if (args[i].equals(""String_Node_Str""))       mode=EngineMode.SNAPSHOT;
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       txServer=""String_Node_Str"".equals(args[++i]) ? null : args[i];
 else       if (args[i].equals(""String_Node_Str""))       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       igs.add(args[++i]);
 else       if (args[i].equals(""String_Node_Str""))       if (map == null)       if (i + 1 == args.length)       throw new Error(""String_Node_Str"");
 else       map=args[++i];
 else       throw new Exception(""String_Node_Str"");
 else       if (args[i].startsWith(""String_Node_Str""))       i++;
 else       sources.add(args[i]);
    }
    if (sources.isEmpty())     throw new Exception(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + definitions);
    System.out.println(""String_Node_Str"" + txServer);
    ValidationEngine validator=new ValidationEngine(definitions,txServer);
    System.out.println(""String_Node_Str"" + validator.getContext().getVersion() + ""String_Node_Str"");
    for (    String src : igs) {
      System.out.println(""String_Node_Str"" + src);
      validator.loadIg(src);
    }
    validator.setQuestionnaires(questionnaires);
    validator.setNative(doNative);
    if (mode == EngineMode.TRANSFORM) {
      if (sources.size() > 1)       throw new Exception(""String_Node_Str"" + sources + ""String_Node_Str"");
      if (txServer == null)       throw new Exception(""String_Node_Str"");
      if (map == null)       throw new Exception(""String_Node_Str"");
      try {
        Resource r=validator.transform(sources.get(0),map);
        System.out.println(""String_Node_Str"");
        if (output != null) {
          FileOutputStream s=new FileOutputStream(output);
          new XmlParser().compose(s,r,true);
          s.close();
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
    }
 else     if (mode == EngineMode.NARRATIVE) {
      DomainResource r=validator.generate(sources.get(0));
      System.out.println(""String_Node_Str"");
      if (output != null) {
        handleOutput(r,output);
      }
    }
 else     if (mode == EngineMode.SNAPSHOT) {
      if (definitions == null)       throw new Exception(""String_Node_Str"");
      StructureDefinition r=validator.snapshot(sources.get(0));
      System.out.println(""String_Node_Str"");
      if (output != null) {
        handleOutput(r,output);
      }
    }
 else {
      if (definitions == null)       throw new Exception(""String_Node_Str"");
      for (      String s : profiles) {
        if (validator.getContext().fetchResource(StructureDefinition.class,s) == null) {
          System.out.println(""String_Node_Str"" + s);
          validator.loadProfile(locations.getOrDefault(s,s));
        }
      }
      System.out.println(""String_Node_Str"");
      Resource r=validator.validate(sources,profiles);
      if (output == null) {
        if (r instanceof Bundle)         for (        BundleEntryComponent e : ((Bundle)r).getEntry())         displayOO((OperationOutcome)e.getResource());
 else         displayOO((OperationOutcome)r);
      }
 else {
        FileOutputStream s=new FileOutputStream(output);
        new XmlParser().compose(s,r,true);
        s.close();
      }
    }
  }
}",0.998266497168612
23185,"private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case MemberOf:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}","private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
return result;
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case MemberOf:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}",0.9980171844018506
23186,"private Cell generateGridDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getContentReference(),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),""String_Node_Str"" + ed.getPath(),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),binding.getStrength().toCode(),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getHuman(),null)));
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,""String_Node_Str"" + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
        if (definition.getComment() != null) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
          c.addPiece(gen.new Piece(""String_Node_Str""));
          c.addMarkdown(definition.getComment());
        }
      }
    }
  }
  return c;
}","private Cell generateGridDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getContentReference(),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),""String_Node_Str"" + ed.getPath(),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathURL(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),binding.getStrength().toCode(),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getHuman(),null)));
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,""String_Node_Str"" + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
        if (definition.hasDefinition()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
          c.addPiece(gen.new Piece(""String_Node_Str""));
          c.addMarkdown(definition.getDefinition());
        }
        if (definition.getComment() != null) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
          c.addPiece(gen.new Piece(""String_Node_Str""));
          c.addMarkdown(definition.getComment());
        }
      }
    }
  }
  return c;
}",0.9727135609488552
23187,"private boolean checkCode(List<ValidationMessage> errors,Element element,String path,String code,String system,String display) throws TerminologyServiceException {
  long t=System.nanoTime();
  boolean ss=context.supportsSystem(system);
  txTime=txTime + (System.nanoTime() - t);
  if (ss) {
    t=System.nanoTime();
    ValidationResult s=context.validateCode(system,code,display);
    txTime=txTime + (System.nanoTime() - t);
    if (s == null)     return true;
    if (s.isOk()) {
      if (s.getMessage() != null)       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
      return true;
    }
    if (s.getSeverity() == IssueSeverity.INFORMATION)     hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
 else     if (s.getSeverity() == IssueSeverity.WARNING)     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
 else     return rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
    return true;
  }
 else   if (system.startsWith(""String_Node_Str"")) {
    if (system.equals(""String_Node_Str""))     return true;
 else {
      CodeSystem cs=getCodeSystem(system);
      if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,cs != null,""String_Node_Str"" + system)) {
        ConceptDefinitionComponent def=getCodeDefinition(cs,code);
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,def != null,""String_Node_Str"" + system + ""String_Node_Str""+ code+ ""String_Node_Str""))         return warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,display == null || display.equals(def.getDisplay()),""String_Node_Str"" + def.getDisplay() + ""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (context.isNoTerminologyServer() && Utilities.existsInList(system,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    return true;
  }
 else   if (system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"")|| system.startsWith(""String_Node_Str"")) {
    rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + system);
    return false;
  }
 else {
    try {
      if (context.fetchResourceWithException(ValueSet.class,system) != null) {
        rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + system + ""String_Node_Str"");
        return false;
      }
 else       return true;
    }
 catch (    Exception e) {
      return true;
    }
  }
}","private boolean checkCode(List<ValidationMessage> errors,Element element,String path,String code,String system,String display) throws TerminologyServiceException {
  long t=System.nanoTime();
  boolean ss=context.supportsSystem(system);
  txTime=txTime + (System.nanoTime() - t);
  if (ss) {
    t=System.nanoTime();
    ValidationResult s=context.validateCode(system,code,display);
    txTime=txTime + (System.nanoTime() - t);
    if (s == null)     return true;
    if (s.isOk()) {
      if (s.getMessage() != null)       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
      return true;
    }
    if (s.getSeverity() == IssueSeverity.INFORMATION)     hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
 else     if (s.getSeverity() == IssueSeverity.WARNING)     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
 else     return rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,s == null,s.getMessage());
    return true;
  }
 else   if (system.startsWith(""String_Node_Str"")) {
    if (system.equals(""String_Node_Str""))     return true;
 else {
      CodeSystem cs=getCodeSystem(system);
      if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,cs != null,""String_Node_Str"" + system)) {
        ConceptDefinitionComponent def=getCodeDefinition(cs,code);
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,def != null,""String_Node_Str"" + system + ""String_Node_Str""+ code+ ""String_Node_Str""))         return warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,display == null || display.equals(def.getDisplay()),""String_Node_Str"" + def.getDisplay() + ""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (context.isNoTerminologyServer() && Utilities.existsInList(system,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    return true;
  }
 else   if (startsWithButIsNot(system,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + system);
    return false;
  }
 else {
    try {
      if (context.fetchResourceWithException(ValueSet.class,system) != null) {
        rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + system + ""String_Node_Str"");
        return false;
      }
 else       return true;
    }
 catch (    Exception e) {
      return true;
    }
  }
}",0.9626681826795528
23188,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPathSource(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPathDest(contextPathDst,outcome.getPath(),redirector));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPathDest(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.996368267144609
23189,"private String fixedPath(String contextPath,String pathSimple){
  if (contextPath == null)   return pathSimple;
  return contextPath + ""String_Node_Str"" + pathSimple.substring(pathSimple.indexOf(""String_Node_Str"") + 1);
}","private String fixedPath(String contextPath,String pathSimple,ElementDefinition redirector){
  if (contextPath == null)   return pathSimple;
  String ptail=pathSimple.substring(pathSimple.indexOf(""String_Node_Str"") + 1);
  if (redirector != null)   return contextPath + ""String_Node_Str"" + tail(redirector.getPath())+ ""String_Node_Str""+ ptail.substring(ptail.indexOf(""String_Node_Str"") + 1);
 else   return contextPath + ""String_Node_Str"" + ptail;
}",0.5373134328358209
23190,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (derived.hasDifferential() && !derived.getDifferential().getElementFirstRep().getPath().contains(""String_Node_Str"") && !derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  for (  ElementDefinition e : derived.getDifferential().getElement())   e.clearUserData(GENERATED_IN_SNAPSHOT);
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().hasElement() ? derived.getDifferential().getElement().size() - 1 : -1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getDifferential().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getSnapshot().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!e.hasUserData(GENERATED_IN_SNAPSHOT)) {
      System.out.println(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId()+ ""String_Node_Str"");
      throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
    }
  }
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (derived.hasDifferential() && !derived.getDifferential().getElementFirstRep().getPath().contains(""String_Node_Str"") && !derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  for (  ElementDefinition e : derived.getDifferential().getElement())   e.clearUserData(GENERATED_IN_SNAPSHOT);
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().hasElement() ? derived.getDifferential().getElement().size() - 1 : -1,url,derived.getId(),null,null,false,base.getUrl(),null,false,null);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getDifferential().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getSnapshot().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!e.hasUserData(GENERATED_IN_SNAPSHOT)) {
      System.out.println(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId()+ ""String_Node_Str"");
      throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
    }
  }
}",0.9992573889796524
23191,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone,ElementDefinition redirector) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath(),redirector);
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false,outcome);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true,null);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true,null);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath(),null));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false,null);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath(),null));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.9969658180439008
23192,"private boolean ruleMatches(SlicingRules diff,SlicingRules base){
  return (diff == null) || (base == null) || (diff == base)|| (diff == SlicingRules.OPEN)|| ((diff == SlicingRules.OPENATEND && base == SlicingRules.CLOSED));
}","private boolean ruleMatches(SlicingRules diff,SlicingRules base){
  return (diff == null) || (base == null) || (diff == base)|| (base == SlicingRules.OPEN)|| ((diff == SlicingRules.OPENATEND && base == SlicingRules.CLOSED));
}",0.9823008849557522
23193,"public InstanceValidator(ValidationEngine engine){
  super();
  this.context=engine.getContext();
  fpe=engine.getFpe();
  this.externalHostServices=fpe.getHostServices();
  fpe.setHostServices(new ValidatorHostServices());
  source=Source.InstanceValidator;
}","public InstanceValidator(IWorkerContext theContext,IEvaluationContext hostServices){
  super();
  this.context=theContext;
  this.externalHostServices=hostServices;
  fpe=new FHIRPathEngine(context);
  fpe.setHostServices(new ValidatorHostServices());
  source=Source.InstanceValidator;
}",0.1605839416058394
23194,"public OperationOutcome validate(String location,byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(location,messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(location,messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(location,messages);
  }
  InstanceValidator validator=new InstanceValidator(this);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}","public OperationOutcome validate(String location,byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(location,messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(location,messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(location,messages);
  }
  InstanceValidator validator=new InstanceValidator(context,null);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}",0.9889655172413792
23195,"private void loadDefinitions(String src) throws Exception {
  Map<String,byte[]> source=loadIgSource(src,""String_Node_Str"");
  if (version == null)   version=getVersionFromPack(source);
  context=SimpleWorkerContext.fromDefinitions(source,loaderForVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpansionProfile(makeExpProfile());
  fpe=new FHIRPathEngine(context);
  grabNatives(source,""String_Node_Str"");
}","private void loadDefinitions(String src) throws Exception {
  Map<String,byte[]> source=loadIgSource(src,""String_Node_Str"");
  if (version == null)   version=getVersionFromPack(source);
  context=SimpleWorkerContext.fromDefinitions(source,loaderForVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpansionProfile(makeExpProfile());
  grabNatives(source,""String_Node_Str"");
}",0.9574726609963548
23196,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() || !diffMatches.get(0).hasSliceName()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.9990956687291764
23197,"public String pseudoJson() throws Exception {
  StringBuilder b=new StringBuilder();
  ElementDefinition root=sd.getSnapshot().getElement().get(0);
  String rn=sd.getSnapshot().getElement().get(0).getPath();
  b.append(""String_Node_Str"" + Utilities.escapeXml(sd.getName()) + ""String_Node_Str"");
  List<ElementDefinition> children=getChildren(sd.getSnapshot().getElement(),sd.getSnapshot().getElement().get(0));
  boolean complex=isComplex(children);
  if (!complex)   b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
  int c=0;
  int l=lastChild(children);
  for (  ElementDefinition child : children)   if (child.hasSlicing())   generateCoreElemSliced(b,sd.getSnapshot().getElement(),child,children,2,rn,false,child.getType().get(0),++c == l,complex);
 else   if (wasSliced(child,children))   ;
 else   if (child.getType().size() == 1)   generateCoreElem(b,sd.getSnapshot().getElement(),child,2,rn,false,child.getType().get(0),++c == l,complex);
 else {
    b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
    for (    TypeRefComponent t : child.getType())     generateCoreElem(b,sd.getSnapshot().getElement(),child,2,rn,false,t,++c == l,false);
  }
  b.append(""String_Node_Str"");
  return b.toString();
}","public String pseudoJson() throws Exception {
  StringBuilder b=new StringBuilder();
  ElementDefinition root=sd.getSnapshot().getElement().get(0);
  String rn=sd.getSnapshot().getElement().get(0).getPath();
  b.append(""String_Node_Str"" + Utilities.escapeXml(sd.getTitle()) + ""String_Node_Str"");
  List<ElementDefinition> children=getChildren(sd.getSnapshot().getElement(),sd.getSnapshot().getElement().get(0));
  boolean complex=isComplex(children);
  if (!complex && !hasExtensionChild(children))   b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
  int c=0;
  int l=lastChild(children);
  for (  ElementDefinition child : children)   if (child.hasSlicing())   generateCoreElemSliced(b,sd.getSnapshot().getElement(),child,children,2,rn,false,child.getType().get(0),++c == l,complex);
 else   if (wasSliced(child,children))   ;
 else   if (child.getType().size() == 1)   generateCoreElem(b,sd.getSnapshot().getElement(),child,2,rn,false,child.getType().get(0),++c == l,complex);
 else {
    b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
    for (    TypeRefComponent t : child.getType())     generateCoreElem(b,sd.getSnapshot().getElement(),child,2,rn,false,t,++c == l,false);
  }
  b.append(""String_Node_Str"");
  return b.toString();
}",0.9741282339707537
23198,"private void writeCardinality(StringBuilder b,ElementDefinition elem) throws IOException {
  if (elem.getConstraint().size() > 0)   b.append(""String_Node_Str"" + Utilities.escapeXml(getInvariants(elem)) + ""String_Node_Str"");
  if (elem.getMin() > 0)   b.append(""String_Node_Str"");
}","private void writeCardinality(boolean unbounded,StringBuilder b,ElementDefinition elem) throws IOException {
  if (elem.getConstraint().size() > 0)   b.append(""String_Node_Str"" + Utilities.escapeXml(getInvariants(elem)) + ""String_Node_Str"");
  if (elem.getMin() > 0)   b.append(""String_Node_Str"");
  if (unbounded && ""String_Node_Str"".equals(elem.getMax()))   b.append(""String_Node_Str"");
}",0.8375558867362146
23199,"@SuppressWarnings(""String_Node_Str"") private void generateCoreElem(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getPath().endsWith(""String_Node_Str""))   return;
  if (!complex && elem.getPath().endsWith(""String_Node_Str""))   return;
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS);
  List<ElementDefinition> children=getChildren(elements,elem);
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasMax() && elem.getMax().equals(""String_Node_Str"");
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  boolean delayedCloseArray=false;
  if (unbounded)   b.append(""String_Node_Str"");
  if (type == null) {
    assert(children.size() > 0);
    b.append(""String_Node_Str"");
    delayedCloseArray=true;
  }
 else   if (isPrimitive(type.getCode())) {
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
    if (elem.hasFixed())     b.append(Utilities.escapeJson(((PrimitiveType)elem.getFixed()).asStringValue()));
 else     b.append(""String_Node_Str"" + prefix + (getSrcFile(type.getCode()) + ""String_Node_Str"" + type.getCode())+ ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + prefix + (getSrcFile(type.getCode()) + ""String_Node_Str"" + type.getCode())+ ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (type.hasProfile()) {
      if (type.getProfile().startsWith(""String_Node_Str"")) {
        String t=type.getProfile().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + prefix + (getSrcFile(t) + ""String_Node_Str"" + t)+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getProfile() + ""String_Node_Str"");
    }
    if (type.hasTargetProfile()) {
      if (type.getTargetProfile().startsWith(""String_Node_Str"")) {
        String t=type.getTargetProfile().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + prefix + (getSrcFile(t) + ""String_Node_Str"" + t)+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getTargetProfile() + ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (!delayedCloseArray) {
    if (unbounded)     b.append(""String_Node_Str"");
    if (!last)     b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  writeCardinality(b,elem);
  if (!elem.hasFixed()) {
    if (elem.hasBinding() && elem.getBinding().hasValueSet()) {
      ValueSet vs=resolveValueSet(elem.getBinding().getValueSet());
      if (vs != null)       b.append(""String_Node_Str"" + prefix + vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       if (elem.getBinding().getValueSet() instanceof UriType)       b.append(""String_Node_Str"" + ((UriType)elem.getBinding().getValueSet()).getValue() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + ((Reference)elem.getBinding().getValueSet()).getReference() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"" + Utilities.escapeXml(elem.getShort()) + ""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  if (delayedCloseArray) {
    int c=0;
    for (    ElementDefinition child : children) {
      if (child.getType().size() == 1)       generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == children.size(),false);
 else {
        b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
        for (        TypeRefComponent t : child.getType())         generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,t,++c == children.size(),false);
      }
    }
    b.append(""String_Node_Str"");
    if (!last)     b.append(""String_Node_Str"");
  }
}","@SuppressWarnings(""String_Node_Str"") private void generateCoreElem(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getPath().endsWith(""String_Node_Str""))   return;
  if (!complex && elem.getPath().endsWith(""String_Node_Str""))   return;
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  b.append(indentS);
  List<ElementDefinition> children=getChildren(elements,elem);
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasBase() && elem.getBase().hasMax() ? elem.getBase().getMax().equals(""String_Node_Str"") : ""String_Node_Str"".equals(elem.getMax());
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  boolean delayedClose=false;
  if (unbounded)   b.append(""String_Node_Str"");
  if (type == null || children.size() > 0) {
    assert(children.size() > 0);
    b.append(""String_Node_Str"");
    delayedClose=true;
  }
 else   if (isPrimitive(type.getCode())) {
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
    if (elem.hasFixed())     b.append(Utilities.escapeJson(((PrimitiveType)elem.getFixed()).asStringValue()));
 else     b.append(""String_Node_Str"" + prefix + (getSrcFile(type.getCode()) + ""String_Node_Str"" + type.getCode())+ ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (!(type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"") || type.getCode().equals(""String_Node_Str"")))     b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + prefix + (getSrcFile(type.getCode()) + ""String_Node_Str"" + type.getCode())+ ""String_Node_Str""+ type.getCode()+ ""String_Node_Str"");
    if (type.hasProfile()) {
      if (type.getProfile().startsWith(""String_Node_Str"")) {
        String t=type.getProfile().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + prefix + (getSrcFile(t) + ""String_Node_Str"" + t)+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getProfile() + ""String_Node_Str"");
    }
    if (type.hasTargetProfile()) {
      if (type.getTargetProfile().startsWith(""String_Node_Str"")) {
        String t=type.getTargetProfile().substring(40);
        if (hasType(t))         b.append(""String_Node_Str"" + prefix + (getSrcFile(t) + ""String_Node_Str"" + t)+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         if (hasResource(t))         b.append(""String_Node_Str"" + prefix + t.toLowerCase()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + t + ""String_Node_Str"");
      }
 else       b.append(""String_Node_Str"" + type.getTargetProfile() + ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
  }
  if (!delayedClose) {
    if (unbounded) {
      b.append(""String_Node_Str"");
    }
    if (!last)     b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  writeCardinality(unbounded,b,elem);
  if (!elem.hasFixed()) {
    if (elem.hasBinding() && elem.getBinding().hasValueSet()) {
      ValueSet vs=resolveValueSet(elem.getBinding().getValueSet());
      if (vs != null)       b.append(""String_Node_Str"" + prefix + vs.getUserData(""String_Node_Str"")+ ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       if (elem.getBinding().getValueSet() instanceof UriType)       b.append(""String_Node_Str"" + ((UriType)elem.getBinding().getValueSet()).getValue() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + ((Reference)elem.getBinding().getValueSet()).getReference() + ""String_Node_Str""+ Utilities.escapeXml(elem.getShort())+ ""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"" + Utilities.escapeXml(elem.getShort()) + ""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  if (delayedClose) {
    int c=0;
    for (    ElementDefinition child : children) {
      if (child.getType().size() == 1)       generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,child.getType().get(0),++c == children.size(),false);
 else {
        b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
        for (        TypeRefComponent t : child.getType())         generateCoreElem(b,elements,child,indent + 1,pathName + ""String_Node_Str"" + name,false,t,++c == children.size(),false);
      }
    }
    b.append(indentS);
    b.append(""String_Node_Str"");
    if (unbounded)     b.append(""String_Node_Str"");
    if (!last)     b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
  }
}",0.94323224852071
23200,"private void generateCoreElemSliced(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,List<ElementDefinition> children,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasMax() && elem.getMax().equals(""String_Node_Str"");
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  b.append(indentS);
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  b.append(""String_Node_Str"" + describeSlicing(elem.getSlicing()) + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  List<ElementDefinition> slices=getSlices(elem,children);
  int c=0;
  for (  ElementDefinition slice : slices) {
    b.append(indentS + ""String_Node_Str"");
    b.append(""String_Node_Str"" + Utilities.escapeXml(slice.getShort()) + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    writeCardinality(b,slice);
    b.append(""String_Node_Str"");
    List<ElementDefinition> extchildren=getChildren(elements,slice);
    boolean extcomplex=isComplex(extchildren) && complex;
    if (!extcomplex) {
      b.append(indentS + ""String_Node_Str"");
      b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
    }
    int cc=0;
    int l=lastChild(extchildren);
    for (    ElementDefinition child : extchildren)     if (child.hasSlicing())     generateCoreElemSliced(b,elements,child,children,indent + 2,pathName + ""String_Node_Str"" + en,false,child.getType().get(0),++cc == l,extcomplex);
 else     if (wasSliced(child,children))     ;
 else     if (child.getType().size() == 1)     generateCoreElem(b,elements,child,indent + 2,pathName + ""String_Node_Str"" + en,false,child.getType().get(0),++cc == l,extcomplex);
 else {
      b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
      for (      TypeRefComponent t : child.getType())       generateCoreElem(b,elements,child,indent + 2,pathName + ""String_Node_Str"" + en,false,t,++cc == l,false);
    }
    c++;
    b.append(indentS);
    if (c == slices.size())     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"");
  }
  b.append(indentS);
  if (last)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
}","private void generateCoreElemSliced(StringBuilder b,List<ElementDefinition> elements,ElementDefinition elem,List<ElementDefinition> children,int indent,String pathName,boolean asValue,TypeRefComponent type,boolean last,boolean complex) throws Exception {
  if (elem.getMax().equals(""String_Node_Str""))   return;
  String name=tail(elem.getPath());
  String en=asValue ? ""String_Node_Str"" : name;
  if (en.contains(""String_Node_Str""))   en=en.replace(""String_Node_Str"",upFirst(type.getCode()));
  boolean unbounded=elem.hasMax() && elem.getMax().equals(""String_Node_Str"");
  String indentS=""String_Node_Str"";
  for (int i=0; i < indent; i++) {
    indentS+=""String_Node_Str"";
  }
  String defPage=igp.getLinkForProfile(sd,sd.getUrl());
  b.append(indentS);
  b.append(""String_Node_Str"" + (defPage + ""String_Node_Str"" + pathName+ ""String_Node_Str""+ en) + ""String_Node_Str""+ Utilities.escapeXml(getEnhancedDefinition(elem))+ ""String_Node_Str""+ en+ ""String_Node_Str"");
  b.append(""String_Node_Str"" + describeSlicing(elem.getSlicing()) + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  List<ElementDefinition> slices=getSlices(elem,children);
  int c=0;
  for (  ElementDefinition slice : slices) {
    b.append(indentS + ""String_Node_Str"");
    b.append(""String_Node_Str"" + Utilities.escapeXml(slice.getShort()) + ""String_Node_Str"");
    b.append(""String_Node_Str"");
    writeCardinality(unbounded,b,slice);
    b.append(""String_Node_Str"");
    List<ElementDefinition> extchildren=getChildren(elements,slice);
    boolean extcomplex=isComplex(extchildren) && complex;
    if (!extcomplex && !hasExtensionChild(extchildren)) {
      b.append(indentS + ""String_Node_Str"");
      b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
    }
    int cc=0;
    int l=lastChild(extchildren);
    for (    ElementDefinition child : extchildren)     if (child.hasSlicing())     generateCoreElemSliced(b,elements,child,children,indent + 2,pathName + ""String_Node_Str"" + en,false,child.getType().get(0),++cc == l,extcomplex);
 else     if (wasSliced(child,children))     ;
 else     if (child.getType().size() == 1)     generateCoreElem(b,elements,child,indent + 2,pathName + ""String_Node_Str"" + en,false,child.getType().get(0),++cc == l,extcomplex);
 else {
      b.append(""String_Node_Str"" + Utilities.escapeXml(child.getShort()) + ""String_Node_Str""+ Integer.toString(child.getType().size())+ ""String_Node_Str"");
      for (      TypeRefComponent t : child.getType())       generateCoreElem(b,elements,child,indent + 2,pathName + ""String_Node_Str"" + en,false,t,++cc == l,false);
    }
    c++;
    b.append(indentS);
    if (c == slices.size())     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"");
  }
  b.append(indentS);
  if (last)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
}",0.9815751445086706
23201,"/** 
 * TypeDefinition generator (e.g. code, id, markdown, uuid)
 * @param ed definition to generate
 * @throws Exception
 */
private void genElementDefn(ElementDefn ed) throws Exception {
  String typeName=ed.getName();
  FHIRResource typeRes=(ed.getTypes().isEmpty() ? fact.fhir_class(typeName) : fact.fhir_class(typeName,""String_Node_Str"")).addTitle(ed.getShortDefn()).addDefinition(ed.getDefinition());
  processTypes(typeName,typeRes,ed,typeName,false);
}","/** 
 * TypeDefinition generator (e.g. code, id, markdown, uuid)
 * @param td definition to generate
 * @throws Exception
 */
private void genElementDefn(TypeDefn td) throws Exception {
  String typeName=td.getName();
  StructureDefinition typeSd=td.getProfile();
  String parentURL=typeSd.getBaseDefinitionElement().getValue();
  String parentName=null;
  if (parentURL != null)   parentName=parentURL.substring(parentURL.lastIndexOf(""String_Node_Str"") + 1);
  FHIRResource typeRes=(td.getTypes().isEmpty() ? fact.fhir_class(typeName) : fact.fhir_class(typeName,parentName)).addTitle(td.getShortDefn()).addDefinition(td.getDefinition());
  processTypes(typeName,typeRes,td,typeName,false);
}",0.71875
23202,"/** 
 * Only produce the v3 vocabulary for appending to rim.ttl Placeholder - has no effect in this generation
 */
public void executeV3(Map<String,ValueSet> valuesets,Map<String,CodeSystem> codeSystems) throws Exception {
}","/** 
 * Only produce the v3 vocabulary for appending to rim.ttl Placeholder for now - has no effect in this generation
 */
public void executeV3(Map<String,ValueSet> valuesets,Map<String,CodeSystem> codeSystems) throws Exception {
}",0.9824561403508772
23203,"/** 
 * DefinedStringPattern Generator
 * @param dsp FHIR DefinedStringPattern Type (e.g. id, oid, uuid)
 * @throws Exception
 */
private void genDefinedStringPattern(DefinedStringPattern dsp) throws Exception {
  String dspType=dsp.getSchema();
  String dspTypeName=dspType.endsWith(""String_Node_Str"") ? dspType.substring(0,dspType.length() - 1) : dspType;
  Resource dspTypeRes=RDFTypeMap.xsd_type_for(dspTypeName);
  FHIRResource dspRes=fact.fhir_class(dsp.getCode(),dsp.getBase()).addDefinition(dsp.getDefinition());
  if (dspType.endsWith(""String_Node_Str"")) {
    if (!usingFact) {
      List<Resource> facets=new ArrayList<Resource>(1);
      facets.add(fact.fhir_pattern(dsp.getRegex()));
      dspRes.restriction(fact.fhir_restriction(value,fact.fhir_datatype_restriction(dspTypeRes == XSD.xstring ? XSD.normalizedString : dspTypeRes,facets)));
    }
 else     dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
  }
 else   dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
}","/** 
 * DefinedStringPattern Generator
 * @param dsp FHIR DefinedStringPattern Type (e.g. id, oid, uuid)
 * @throws Exception
 */
private void genDefinedStringPattern(DefinedStringPattern dsp) throws Exception {
  String dspType=dsp.getSchema();
  String dspTypeName=dspType.endsWith(""String_Node_Str"") ? dspType.substring(0,dspType.length() - 1) : dspType;
  Resource dspTypeRes=RDFTypeMap.xsd_type_for(dspTypeName);
  FHIRResource dspRes=fact.fhir_class(dsp.getCode(),dsp.getBase()).addDefinition(dsp.getDefinition());
  if (dspRes != null) {
    if (dspType.endsWith(""String_Node_Str"")) {
      if (!owlTarget) {
        List<Resource> facets=new ArrayList<Resource>(1);
        facets.add(fact.fhir_pattern(dsp.getRegex()));
        dspRes.restriction(fact.fhir_restriction(value,fact.fhir_datatype_restriction(dspTypeRes == XSD.xstring ? XSD.normalizedString : dspTypeRes,facets)));
      }
 else       dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
    }
 else     dspRes.restriction(fact.fhir_restriction(value,dspTypeRes));
  }
}",0.9299610894941636
23204,"public void executeMain() throws Exception {
  genOntologyDefinition();
  genBaseMetadata();
  for (  String infn : sorted(definitions.getInfrastructure().keySet()))   genElementDefn(definitions.getInfrastructure().get(infn));
  for (  String n : sorted(definitions.getTypes().keySet()))   genElementDefn(definitions.getTypes().get(n));
  for (  String n : sorted(definitions.getStructures().keySet()))   genElementDefn(definitions.getStructures().get(n));
  for (  String n : sorted(definitions.getConstraints().keySet())) {
    genProfiledType(definitions.getConstraints().get(n));
  }
  for (  String n : sorted(definitions.getBaseResources().keySet()))   genResourceDefn(definitions.getBaseResources().get(n));
  for (  String n : sorted(definitions.getResources().keySet()))   genResourceDefn(definitions.getResources().get(n));
  commit(true);
}","public void executeMain() throws Exception {
  genOntologyDefinition();
  genBaseMetadata();
  for (  String pn : sorted(definitions.getPrimitives().keySet())) {
    if (isPrimitive(pn))     genPrimitiveType(definitions.getPrimitives().get(pn));
  }
  for (  String infn : sorted(definitions.getInfrastructure().keySet()))   genElementDefn(definitions.getInfrastructure().get(infn));
  for (  String n : sorted(definitions.getTypes().keySet()))   genElementDefn(definitions.getTypes().get(n));
  for (  String n : sorted(definitions.getStructures().keySet()))   genElementDefn(definitions.getStructures().get(n));
  for (  String n : sorted(definitions.getConstraints().keySet())) {
    genProfiledType(definitions.getConstraints().get(n));
  }
  for (  String n : sorted(definitions.getBaseResources().keySet()))   genResourceDefn(definitions.getBaseResources().get(n));
  for (  String n : sorted(definitions.getResources().keySet()))   genResourceDefn(definitions.getResources().get(n));
  commit(true);
}",0.9155459924690694
23205,"/** 
 * PrimitiveType Generator
 * @param pt FHIR Primitive Type (e.g. int, string, dateTime)
 */
private void genPrimitiveType(PrimitiveType pt){
  String ptName=pt.getCode();
  String ptTypeName=pt.getSchemaType();
  Resource ptType;
  if (ptTypeName.contains(""String_Node_Str"")) {
    List<Resource> resItems=new ArrayList<Resource>();
    for (    String e : Arrays.asList(ptTypeName.split(""String_Node_Str""))) {
      resItems.add(RDFTypeMap.xsd_type_for(e));
    }
    ptType=fact.fhir_union(resItems);
  }
 else {
    ptType=RDFTypeMap.xsd_type_for(ptTypeName);
  }
  FHIRResource ptRes=fact.fhir_class(ptName,""String_Node_Str"").addDefinition(pt.getDefinition());
  if (!usingFact)   ptRes.restriction(fact.fhir_cardinality_restriction(value,ptType,0,1));
}","/** 
 * PrimitiveType Generator
 * @param pt FHIR Primitive Type (e.g. int, string, dateTime)
 */
private void genPrimitiveType(DefinedCode pt){
  String ptName=pt.getCode();
  FHIRResource ptRes=fact.fhir_class(ptName,""String_Node_Str"").addDefinition(pt.getDefinition());
  if (!owlTarget) {
    Resource rdfType=RDFTypeMap.xsd_type_for(ptName);
    if (rdfType != null)     ptRes.restriction(fact.fhir_cardinality_restriction(value,rdfType,0,1));
  }
}",0.5681444991789819
23206,"/** 
 * Iterate over the Element Definitions in baseResource generating restrictions and properties
 * @param baseResourceName Name of base resource
 * @param baseResource FHIRResource for base resource
 * @param td Inner type definitions
 * @param predicateBase Root name for predicate
 * @param innerIsBackbone True if we're processing a backbone element
 */
private void processTypes(String baseResourceName,FHIRResource baseResource,ElementDefn td,String predicateBase,boolean innerIsBackbone) throws Exception {
  for (  ElementDefn ed : td.getElements()) {
    String predicateName=predicateBase + ""String_Node_Str"" + (ed.getName().endsWith(""String_Node_Str"") ? ed.getName().substring(0,ed.getName().length() - 3) : ed.getName());
    FHIRResource predicateResource;
    if (ed.getName().endsWith(""String_Node_Str"")) {
      predicateResource=fact.fhir_objectProperty(predicateName);
      if (ed.typeCode().equals(""String_Node_Str"")) {
        Resource targetResource=RDFNamespace.FHIR.resourceRef(""String_Node_Str"");
        baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,targetResource,ed.getMinCardinality(),ed.getMaxCardinality()));
        predicateResource.range(targetResource);
      }
 else {
        List<Resource> typeOpts=new ArrayList<Resource>();
        for (        TypeRef tr : ed.getTypes()) {
          String qualifiedPredicateName=predicateName + Utilities.capitalize(tr.getName());
          Resource targetRes=fact.fhir_class(tr.getName()).resource;
          FHIRResource qualifiedPredicate=fact.fhir_objectProperty(qualifiedPredicateName,predicateResource.resource).domain(baseResource).range(targetRes);
          typeOpts.add(fact.fhir_cardinality_restriction(qualifiedPredicate.resource,targetRes,ed.getMinCardinality(),ed.getMaxCardinality()));
        }
        baseResource.restriction(fact.fhir_union(typeOpts));
      }
    }
 else {
      FHIRResource baseDef;
      if (ed.getTypes().isEmpty()) {
        predicateResource=fact.fhir_objectProperty(predicateName);
        String targetClassName=ed.getDeclaredTypeName();
        baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition());
        processTypes(targetClassName,baseDef,ed,predicateName,innerIsBackbone);
      }
 else {
        TypeRef targetType=ed.getTypes().get(0);
        String targetName=targetType.getName();
        if (targetName.startsWith(""String_Node_Str"")) {
          ElementDefn targetRef=getElementForPath(targetName.substring(1));
          baseDef=fact.fhir_class(targetRef.getDeclaredTypeName());
        }
 else {
          baseDef=fact.fhir_class(targetName);
        }
        if (targetName.equals(""String_Node_Str""))         predicateResource=fact.fhir_dataProperty(predicateName);
 else         predicateResource=fact.fhir_objectProperty(predicateName);
      }
      predicateResource.addTitle(ed.getShortDefn()).addDefinition(ed.getDefinition()).domain(baseResource);
      baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,baseDef.resource,ed.getMinCardinality(),ed.getMaxCardinality()));
      predicateResource.range(baseDef.resource);
      if (!Utilities.noString(ed.getW5()))       predicateResource.addObjectProperty(RDFS.subPropertyOf,RDFNamespace.W5.resourceRef(ed.getW5()));
    }
  }
}","private void processTypes(String baseResourceName,FHIRResource baseResource,ElementDefn td,String predicateBase,boolean innerIsBackbone) throws Exception {
  for (  ElementDefn ed : td.getElements()) {
    String predicateName=predicateBase + ""String_Node_Str"" + (ed.getName().endsWith(""String_Node_Str"") ? ed.getName().substring(0,ed.getName().length() - 3) : ed.getName());
    FHIRResource predicateResource;
    if (ed.getName().endsWith(""String_Node_Str"")) {
      predicateResource=fact.fhir_objectProperty(predicateName);
      if (ed.typeCode().equals(""String_Node_Str"")) {
        Resource targetResource=RDFNamespace.FHIR.resourceRef(""String_Node_Str"");
        baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,targetResource,ed.getMinCardinality(),ed.getMaxCardinality()));
        predicateResource.domain(baseResource);
        predicateResource.range(targetResource);
      }
 else {
        List<Resource> typeOpts=new ArrayList<Resource>();
        for (        TypeRef tr : ed.getTypes()) {
          String qualifiedPredicateName=predicateName + Utilities.capitalize(tr.getName());
          Resource targetRes=fact.fhir_class(tr.getName()).resource;
          FHIRResource qualifiedPredicate=fact.fhir_objectProperty(qualifiedPredicateName,predicateResource.resource).domain(baseResource).range(targetRes);
          typeOpts.add(fact.fhir_cardinality_restriction(qualifiedPredicate.resource,targetRes,ed.getMinCardinality(),ed.getMaxCardinality()));
        }
        baseResource.restriction(fact.fhir_union(typeOpts));
      }
    }
 else {
      FHIRResource baseDef;
      if (ed.getTypes().isEmpty()) {
        predicateResource=fact.fhir_objectProperty(predicateName);
        String targetClassName=mapComponentName(baseResourceName,ed.getDeclaredTypeName());
        baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition());
        processTypes(targetClassName,baseDef,ed,predicateName,innerIsBackbone);
      }
 else {
        TypeRef targetType=ed.getTypes().get(0);
        String targetName=targetType.getName();
        if (targetName.startsWith(""String_Node_Str"")) {
          ElementDefn targetRef=getElementForPath(targetName.substring(1));
          String targetRefName=targetRef.getName();
          String targetClassName=baseResourceName + Character.toUpperCase(targetRefName.charAt(0)) + targetRefName.substring(1);
          baseDef=fact.fhir_class(targetClassName,innerIsBackbone ? ""String_Node_Str"" : ""String_Node_Str"").addDefinition(ed.getDefinition()).addTitle(ed.getShortDefn());
          if (!processing.contains(targetRefName)) {
            processing.add(targetRefName);
            processTypes(targetClassName,baseDef,targetRef,predicateName,innerIsBackbone);
            processing.remove(targetRefName);
          }
        }
 else {
          baseDef=fact.fhir_class(targetName);
        }
        if (targetName.equals(""String_Node_Str""))         predicateResource=fact.fhir_dataProperty(predicateName);
 else         predicateResource=fact.fhir_objectProperty(predicateName);
      }
      predicateResource.addTitle(ed.getShortDefn()).addDefinition(ed.getDefinition()).domain(baseResource);
      baseResource.restriction(fact.fhir_cardinality_restriction(predicateResource.resource,baseDef.resource,ed.getMinCardinality(),ed.getMaxCardinality()));
      predicateResource.range(baseDef.resource);
      if (!Utilities.noString(ed.getW5()))       predicateResource.addObjectProperty(RDFS.subPropertyOf,RDFNamespace.W5.resourceRef(ed.getW5()));
    }
  }
}",0.8558378532686269
23207,"/** 
 * Emit all the basic atoms that are implicit in the actual model
 */
private void genBaseMetadata(){
  FHIRResource Resource=fact.fhir_class(""String_Node_Str"");
  FHIRResource Element=fact.fhir_class(""String_Node_Str"");
  FHIRResource Reference=fact.fhir_class(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"",Element.resource).addTitle(""String_Node_Str"").addDefinition(""String_Node_Str"").restriction(fact.fhir_restriction(value,RDFS.Literal));
  FHIRResource treeRoot=fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"");
  FHIRResource nodeRole=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Resource).range(treeRoot.resource);
  Resource.restriction(fact.fhir_cardinality_restriction(nodeRole.resource,treeRoot.resource,0,1));
  FHIRResource index=fact.fhir_dataProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Element).range(XSD.nonNegativeInteger);
  Element.restriction(fact.fhir_cardinality_restriction(index.resource,XSD.nonNegativeInteger,0,1));
  FHIRResource link=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"");
  Reference.restriction(fact.fhir_cardinality_restriction(link.resource,Resource.resource,0,1));
  fact.fhir_class(""String_Node_Str"",RDFNamespace.RDFXMLLiteral);
}","/** 
 * Emit all the basic atoms that are implicit in the actual model
 */
private void genBaseMetadata(){
  FHIRResource Resource=fact.fhir_class(""String_Node_Str"");
  FHIRResource Element=fact.fhir_class(""String_Node_Str"");
  FHIRResource Reference=fact.fhir_class(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"").addDefinition(""String_Node_Str"").restriction(fact.fhir_restriction(value,RDFS.Literal));
  FHIRResource treeRoot=fact.fhir_class(""String_Node_Str"").addTitle(""String_Node_Str"");
  FHIRResource nodeRole=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Resource).range(treeRoot.resource);
  Resource.restriction(fact.fhir_cardinality_restriction(nodeRole.resource,treeRoot.resource,0,1));
  FHIRResource index=fact.fhir_dataProperty(""String_Node_Str"").addTitle(""String_Node_Str"").domain(Element).range(XSD.nonNegativeInteger);
  Element.restriction(fact.fhir_cardinality_restriction(index.resource,XSD.nonNegativeInteger,0,1));
  FHIRResource link=fact.fhir_objectProperty(""String_Node_Str"").addTitle(""String_Node_Str"");
  Reference.restriction(fact.fhir_cardinality_restriction(link.resource,Resource.resource,0,1));
  FHIRResource NarrativeDiv=fact.fhir_dataProperty(""String_Node_Str"");
  fact.fhir_class(""String_Node_Str"").domain(NarrativeDiv).range(XSD.xstring);
}",0.918918918918919
23208,"@Override public BindingResolution resolveBinding(StructureDefinition profile,ElementDefinitionBindingComponent binding,String path){
  BindingResolution br=new BindingResolution();
  if (!binding.hasValueSet()) {
    br.url=specPath(""String_Node_Str"");
    br.display=""String_Node_Str"";
  }
 else   if (binding.getValueSet() instanceof UriType) {
    String ref=((UriType)binding.getValueSet()).getValue();
    if (ref.startsWith(""String_Node_Str"")) {
      br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
      br.display=ref.substring(26);
    }
 else {
      ValueSet vs=context.fetchResource(ValueSet.class,ref);
      if (vs != null) {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
 else {
        br.url=ref;
        if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         br.display=ref;
      }
    }
  }
 else {
    String ref=((Reference)binding.getValueSet()).getReference();
    if (ref.startsWith(""String_Node_Str"")) {
      ValueSet vs=context.fetchResource(ValueSet.class,makeCanonical(ref));
      if (vs == null) {
        br.url=ref.substring(9) + ""String_Node_Str"";
        br.display=ref.substring(9);
        brokenLinkWarning(path,ref);
      }
 else {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
    }
 else {
      if (ref.startsWith(""String_Node_Str"")) {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs != null) {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
 else {
          br.display=ref.substring(29);
          br.url=ref.substring(29) + ""String_Node_Str"";
          brokenLinkWarning(path,ref);
        }
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs == null) {
          br.url=ref + ""String_Node_Str"";
          br.display=ref;
          brokenLinkWarning(path,ref);
        }
 else {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
      }
    }
  }
  return br;
}","@Override public BindingResolution resolveBinding(StructureDefinition profile,ElementDefinitionBindingComponent binding,String path){
  BindingResolution br=new BindingResolution();
  if (!binding.hasValueSet()) {
    br.url=specPath(""String_Node_Str"");
    br.display=""String_Node_Str"";
  }
 else   if (binding.getValueSet() instanceof UriType) {
    String ref=((UriType)binding.getValueSet()).getValue();
    if (ref.startsWith(""String_Node_Str"")) {
      br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
      br.display=ref.substring(26);
    }
 else {
      ValueSet vs=context.fetchResource(ValueSet.class,ref);
      if (vs != null) {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
 else {
        br.url=ref;
        if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         if (ref.equals(""String_Node_Str""))         br.display=""String_Node_Str"";
 else         br.display=ref;
      }
    }
  }
 else {
    String ref=((Reference)binding.getValueSet()).getReference();
    if (ref.startsWith(""String_Node_Str"")) {
      ValueSet vs=context.fetchResource(ValueSet.class,makeCanonical(ref));
      if (vs == null) {
        br.url=ref.substring(9) + ""String_Node_Str"";
        br.display=ref.substring(9);
        brokenLinkWarning(path,ref);
      }
 else {
        br.url=vs.getUserString(""String_Node_Str"");
        br.display=vs.getName();
      }
    }
 else {
      if (ref.startsWith(""String_Node_Str"")) {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs != null) {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
 else {
          br.display=ref.substring(29);
          br.url=ref.substring(29) + ""String_Node_Str"";
          brokenLinkWarning(path,ref);
        }
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        br.url=specPath(""String_Node_Str"" + ref.substring(26) + ""String_Node_Str"");
        br.display=ref.substring(26);
      }
 else       if (ref.startsWith(""String_Node_Str"")) {
        String code=tail(ref);
        if (code.startsWith(""String_Node_Str""))         br.url=""String_Node_Str"" + code + ""String_Node_Str"";
 else         br.url=""String_Node_Str"" + code + ""String_Node_Str"";
        br.display=ref.substring(26);
      }
 else {
        ValueSet vs=context.fetchResource(ValueSet.class,ref);
        if (vs == null) {
          br.url=ref + ""String_Node_Str"";
          br.display=ref;
          brokenLinkWarning(path,ref);
        }
 else {
          br.url=vs.getUserString(""String_Node_Str"");
          br.display=vs.getName();
        }
      }
    }
  }
  return br;
}",0.9490848585690516
23209,"public static org.hl7.fhir.dstu3.model.BodySite convertBodySite(org.hl7.fhir.r4.model.BodyStructure src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.BodySite tgt=new org.hl7.fhir.dstu3.model.BodySite();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.r4.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasActive())   tgt.setActive(src.getActive());
  if (src.hasCode())   tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getQualifier())   tgt.addQualifier(convertCodeableConcept(t));
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.r4.model.Attachment t : src.getImage())   tgt.addImage(convertAttachment(t));
  if (src.hasPatient())   tgt.setPatient(convertReference(src.getPatient()));
  return tgt;
}","public static org.hl7.fhir.dstu3.model.BodySite convertBodySite(org.hl7.fhir.r4.model.BodyStructure src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.BodySite tgt=new org.hl7.fhir.dstu3.model.BodySite();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.r4.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasActive())   tgt.setActive(src.getActive());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.r4.model.Attachment t : src.getImage())   tgt.addImage(convertAttachment(t));
  if (src.hasPatient())   tgt.setPatient(convertReference(src.getPatient()));
  return tgt;
}",0.6218068535825545
23210,"public static org.hl7.fhir.dstu3.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.r4.model.DiagnosticReport src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.DiagnosticReport tgt=new org.hl7.fhir.dstu3.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.r4.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getBasedOn())   tgt.addBasedOn(convertReference(t));
  if (src.hasStatus())   tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  if (src.hasCategory())   tgt.setCategory(convertCodeableConcept(src.getCategory()));
  if (src.hasCode())   tgt.setCode(convertCodeableConcept(src.getCode()));
  if (src.hasSubject())   tgt.setSubject(convertReference(src.getSubject()));
  if (src.hasContext())   tgt.setContext(convertReference(src.getContext()));
  if (src.hasEffective())   tgt.setEffective(convertType(src.getEffective()));
  if (src.hasIssued())   tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.r4.model.DiagnosticReport.DiagnosticReportPerformerComponent t : src.getPerformer())   tgt.addPerformer(convertDiagnosticReportPerformerComponent(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.r4.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  if (src.hasConclusion())   tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.r4.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}","public static org.hl7.fhir.dstu3.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.r4.model.DiagnosticReport src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.DiagnosticReport tgt=new org.hl7.fhir.dstu3.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.r4.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getBasedOn())   tgt.addBasedOn(convertReference(t));
  if (src.hasStatus())   tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  if (src.hasCategory())   tgt.setCategory(convertCodeableConcept(src.getCategory()));
  if (src.hasCode())   tgt.setCode(convertCodeableConcept(src.getCode()));
  if (src.hasSubject())   tgt.setSubject(convertReference(src.getSubject()));
  if (src.hasContext())   tgt.setContext(convertReference(src.getContext()));
  if (src.hasEffective())   tgt.setEffective(convertType(src.getEffective()));
  if (src.hasIssued())   tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.r4.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.r4.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  if (src.hasConclusion())   tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.r4.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}",0.598820815175596
23211,"@Override public ValueSetExpansionComponent expandVS(ConceptSetComponent inc,boolean heirachical) throws TerminologyServiceException {
  ValueSet vs=new ValueSet();
  vs.setCompose(new ValueSetComposeComponent());
  vs.getCompose().getInclude().add(inc);
  ValueSetExpansionOutcome vse=expandVS(vs,true,heirachical);
  ValueSet valueset=vse.getValueset();
  if (valueset == null)   throw new TerminologyServiceException(""String_Node_Str"" + vse.getError());
  return valueset.getExpansion();
}","@Override public ValueSetExpansionOutcome expandVS(ElementDefinitionBindingComponent binding,boolean cacheOk,boolean heirarchical) throws FHIRException {
  ValueSet vs=null;
  if (binding.hasValueSetReference()) {
    vs=fetchResource(ValueSet.class,binding.getValueSetReference().getReference());
    if (vs == null)     throw new FHIRException(""String_Node_Str"" + binding.getValueSetReference().getReference());
  }
 else {
    vs=fetchResource(ValueSet.class,binding.getValueSetUriType().asStringValue());
    if (vs == null)     throw new FHIRException(""String_Node_Str"" + binding.getValueSetUriType().asStringValue());
  }
  return expandVS(vs,cacheOk,heirarchical);
}",0.2901287553648068
23212,"public void cacheResource(Resource r) throws FHIRException {
  Map<String,Resource> map=allResourcesById.get(r.fhirType());
  if (map == null) {
    map=new HashMap<String,Resource>();
    allResourcesById.put(r.fhirType(),map);
  }
  map.put(r.getId(),r);
  if (r instanceof MetadataResource) {
    String url=((MetadataResource)r).getUrl();
    if (hasResource(r.getClass(),url) && !allowLoadingDuplicates)     throw new DefinitionException(""String_Node_Str"" + url);
    if (r instanceof StructureDefinition)     seeStructureDefinition(url,(StructureDefinition)r);
 else     if (r instanceof ValueSet)     seeValueSet(url,(ValueSet)r);
 else     if (r instanceof CodeSystem)     seeCodeSystem(url,(CodeSystem)r);
 else     if (r instanceof OperationDefinition)     seeOperationDefinition(url,(OperationDefinition)r);
 else     if (r instanceof Questionnaire)     seeQuestionnaire(url,(Questionnaire)r);
 else     if (r instanceof ConceptMap)     maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else     if (r instanceof StructureMap)     transforms.put(((StructureMap)r).getUrl(),(StructureMap)r);
 else     if (r instanceof NamingSystem)     systems.add((NamingSystem)r);
  }
}","public void cacheResource(Resource r) throws FHIRException {
  Map<String,Resource> map=allResourcesById.get(r.fhirType());
  if (map == null) {
    map=new HashMap<String,Resource>();
    allResourcesById.put(r.fhirType(),map);
  }
  map.put(r.getId(),r);
  if (r instanceof MetadataResource) {
    String url=((MetadataResource)r).getUrl();
    if (!allowLoadingDuplicates && hasResource(r.getClass(),url))     throw new DefinitionException(""String_Node_Str"" + url);
    if (r instanceof StructureDefinition)     seeStructureDefinition(url,(StructureDefinition)r);
 else     if (r instanceof ValueSet)     seeValueSet(url,(ValueSet)r);
 else     if (r instanceof CodeSystem)     seeCodeSystem(url,(CodeSystem)r);
 else     if (r instanceof OperationDefinition)     seeOperationDefinition(url,(OperationDefinition)r);
 else     if (r instanceof Questionnaire)     seeQuestionnaire(url,(Questionnaire)r);
 else     if (r instanceof ConceptMap)     maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else     if (r instanceof StructureMap)     transforms.put(((StructureMap)r).getUrl(),(StructureMap)r);
 else     if (r instanceof NamingSystem)     systems.add((NamingSystem)r);
  }
}",0.956043956043956
23213,"/** 
 * Value set expanion inside the internal expansion engine - used  for references to supported system (see ""supportsSystem"") for which there is no value set. 
 * @param inc
 * @return
 * @throws FHIRException 
 */
public ValueSetExpansionComponent expandVS(ConceptSetComponent inc,boolean heiarchical) throws TerminologyServiceException ;","/** 
 * Value set expanion inside the internal expansion engine - used  for references to supported system (see ""supportsSystem"") for which there is no value set. 
 * @param inc
 * @return
 * @throws FHIRException 
 */
public ValueSetExpansionComponent expandVS(ConceptSetComponent inc,boolean heirarchical) throws TerminologyServiceException ;",0.9985443959243084
23214,"private void scanLangs(ConceptDefinitionComponent c,List<String> langs){
  for (  ConceptDefinitionDesignationComponent designation : c.getDesignation()) {
    String lang=designation.getLanguage();
    if (langs != null && !langs.contains(lang))     langs.add(lang);
  }
  for (  ConceptDefinitionComponent g : c.getConcept())   scanLangs(g,langs);
}","private void scanLangs(ConceptDefinitionComponent c,List<String> langs){
  for (  ConceptDefinitionDesignationComponent designation : c.getDesignation()) {
    if (designation.hasLanguage()) {
      String lang=designation.getLanguage();
      if (langs != null && !langs.contains(lang))       langs.add(lang);
    }
  }
  for (  ConceptDefinitionComponent g : c.getConcept())   scanLangs(g,langs);
}",0.9347536617842876
23215,"public static String nmtokenize(String cs){
  StringBuilder s=new StringBuilder();
  for (int i=0; i < cs.length(); i++) {
    char c=cs.charAt(i);
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '-' || c == '_')     s.append(c);
 else     if (c != ' ')     s.append(""String_Node_Str"" + Integer.toString(c));
  }
  return s.toString();
}","public static String nmtokenize(String cs){
  if (cs == null)   return ""String_Node_Str"";
  StringBuilder s=new StringBuilder();
  for (int i=0; i < cs.length(); i++) {
    char c=cs.charAt(i);
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '-' || c == '_')     s.append(c);
 else     if (c != ' ')     s.append(""String_Node_Str"" + Integer.toString(c));
  }
  return s.toString();
}",0.9427860696517412
23216,"protected void listChildren(List<Property> childrenList){
  super.listChildren(childrenList);
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,identifier));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,status));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,type));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,name));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,subject));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,period));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,active));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,balance));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,coverage));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,owner));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,description));
  childrenList.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,guarantor));
}","protected void listChildren(List<Property> children){
  super.listChildren(children);
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,identifier));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,status));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,type));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,name));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,subject));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,period));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,active));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,balance));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,coverage));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,owner));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,1,description));
  children.add(new Property(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,java.lang.Integer.MAX_VALUE,guarantor));
}",0.3102511880515954
23217,"private org.hl7.fhir.dstu2.model.CodeableConcept convertReferralPriorityCode(org.hl7.fhir.r4.model.ReferralRequest.ReferralPriority priority){
  org.hl7.fhir.dstu2.model.CodeableConcept cc=new org.hl7.fhir.dstu2.model.CodeableConcept();
switch (priority) {
case ROUTINE:
    cc.addCoding().setSystem(""String_Node_Str"").setCode(""String_Node_Str"");
  break;
case URGENT:
cc.addCoding().setSystem(""String_Node_Str"").setCode(""String_Node_Str"");
break;
case STAT:
cc.addCoding().setSystem(""String_Node_Str"").setCode(""String_Node_Str"");
break;
case ASAP:
cc.addCoding().setSystem(""String_Node_Str"").setCode(""String_Node_Str"");
break;
default :
return null;
}
return cc;
}","private org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestPriority convertReferralPriorityCode(CodeableConcept priority){
  for (  org.hl7.fhir.dstu2.model.Coding c : priority.getCoding()) {
    if (""String_Node_Str"".equals(c.getSystem()) && ""String_Node_Str"".equals(c.getCode()))     return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestPriority.ROUTINE;
    if (""String_Node_Str"".equals(c.getSystem()) && ""String_Node_Str"".equals(c.getCode()))     return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestPriority.URGENT;
    if (""String_Node_Str"".equals(c.getSystem()) && ""String_Node_Str"".equals(c.getCode()))     return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestPriority.STAT;
    if (""String_Node_Str"".equals(c.getSystem()) && ""String_Node_Str"".equals(c.getCode()))     return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestPriority.ASAP;
  }
  return null;
}",0.1694267515923566
23218,"public org.hl7.fhir.dstu2.model.ReferralRequest convertReferralRequest(org.hl7.fhir.r4.model.ReferralRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ReferralRequest tgt=new org.hl7.fhir.dstu2.model.ReferralRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.r4.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertReferralStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setPriority(convertReferralPriorityCode(src.getPriority()));
  tgt.setPatient(convertReference(src.getSubject()));
  tgt.setFulfillmentTime(convertPeriod(src.getOccurrencePeriod()));
  tgt.setRequester(convertReference(src.getRequester().getAgent()));
  tgt.setSpecialty(convertCodeableConcept(src.getSpecialty()));
  for (  org.hl7.fhir.r4.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  for (  org.hl7.fhir.r4.model.CodeableConcept cc : src.getReasonCode())   tgt.setReason(convertCodeableConcept(cc));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.r4.model.CodeableConcept t : src.getServiceRequested())   tgt.addServiceRequested(convertCodeableConcept(t));
  for (  org.hl7.fhir.r4.model.Reference t : src.getSupportingInfo())   tgt.addSupportingInformation(convertReference(t));
  return tgt;
}","public org.hl7.fhir.r4.model.ProcedureRequest convertReferralRequest(org.hl7.fhir.dstu2.model.ReferralRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.r4.model.ProcedureRequest tgt=new org.hl7.fhir.r4.model.ProcedureRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu2.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertReferralStatus(src.getStatus()));
  tgt.setCode(convertCodeableConcept(src.getType()));
  tgt.setPriority(convertReferralPriorityCode(src.getPriority()));
  tgt.setSubject(convertReference(src.getPatient()));
  tgt.setOccurrence(convertPeriod(src.getFulfillmentTime()));
  tgt.getRequester().setAgent(convertReference(src.getRequester()));
  tgt.addReasonCode(convertCodeableConcept(src.getReason()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu2.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInfo(convertReference(t));
  return tgt;
}",0.4775627830382873
23219,"public org.hl7.fhir.dstu2.model.MessageHeader convertMessageHeader(org.hl7.fhir.r4.model.MessageHeader src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader tgt=new org.hl7.fhir.dstu2.model.MessageHeader();
  copyDomainResource(src,tgt);
  tgt.setTimestamp(src.getTimestamp());
  tgt.setEvent(convertCoding(src.getEvent()));
  tgt.setResponse(convertMessageHeaderResponseComponent(src.getResponse()));
  tgt.setSource(convertMessageSourceComponent(src.getSource()));
  for (  org.hl7.fhir.r4.model.MessageHeader.MessageDestinationComponent t : src.getDestination())   tgt.addDestination(convertMessageDestinationComponent(t));
  tgt.setEnterer(convertReference(src.getEnterer()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setReceiver(convertReference(src.getReceiver()));
  tgt.setResponsible(convertReference(src.getResponsible()));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  for (  org.hl7.fhir.r4.model.Reference t : src.getFocus())   tgt.addData(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MessageHeader convertMessageHeader(org.hl7.fhir.r4.model.MessageHeader src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader tgt=new org.hl7.fhir.dstu2.model.MessageHeader();
  copyDomainResource(src,tgt);
  tgt.setTimestamp(src.getTimestamp());
  tgt.setEvent(convertCoding(src.getEvent()));
  tgt.setResponse(convertMessageHeaderResponseComponent(src.getResponse()));
  tgt.setSource(convertMessageSourceComponent(src.getSource()));
  for (  org.hl7.fhir.r4.model.MessageHeader.MessageDestinationComponent t : src.getDestination())   tgt.addDestination(convertMessageDestinationComponent(t));
  tgt.setEnterer(convertReference(src.getEnterer()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setResponsible(convertReference(src.getResponsible()));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  for (  org.hl7.fhir.r4.model.Reference t : src.getFocus())   tgt.addData(convertReference(t));
  return tgt;
}",0.9735599622285176
23220,"public org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus convertReferralStatus(org.hl7.fhir.r4.model.ReferralRequest.ReferralRequestStatus src) throws FHIRException {
  if (src == null)   return null;
switch (src) {
case DRAFT:
    return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.DRAFT;
case ACTIVE:
  return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.ACTIVE;
case CANCELLED:
return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.CANCELLED;
case COMPLETED:
return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.COMPLETED;
case ENTEREDINERROR:
return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.REJECTED;
default :
return org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus.NULL;
}
}","public org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus convertReferralStatus(org.hl7.fhir.dstu2.model.ReferralRequest.ReferralStatus src) throws FHIRException {
  if (src == null)   return null;
switch (src) {
case DRAFT:
    return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.DRAFT;
case REQUESTED:
  return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.DRAFT;
case ACTIVE:
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.ACTIVE;
case CANCELLED:
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.CANCELLED;
case ACCEPTED:
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.ACTIVE;
case REJECTED:
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.ENTEREDINERROR;
case COMPLETED:
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.COMPLETED;
default :
return org.hl7.fhir.r4.model.ProcedureRequest.ProcedureRequestStatus.NULL;
}
}",0.48664343786295
23221,"public org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.r4.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.r4.model.Parameters)   return convertParameters((org.hl7.fhir.r4.model.Parameters)src);
  if (src instanceof org.hl7.fhir.r4.model.Appointment)   return convertAppointment((org.hl7.fhir.r4.model.Appointment)src);
  if (src instanceof org.hl7.fhir.r4.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.r4.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.r4.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.r4.model.Basic)   return convertBasic((org.hl7.fhir.r4.model.Basic)src);
  if (src instanceof org.hl7.fhir.r4.model.Binary)   return convertBinary((org.hl7.fhir.r4.model.Binary)src);
  if (src instanceof org.hl7.fhir.r4.model.Bundle)   return convertBundle((org.hl7.fhir.r4.model.Bundle)src);
  if (src instanceof org.hl7.fhir.r4.model.CarePlan)   return convertCarePlan((org.hl7.fhir.r4.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.r4.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.r4.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.r4.model.Communication)   return convertCommunication((org.hl7.fhir.r4.model.Communication)src);
  if (src instanceof org.hl7.fhir.r4.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.r4.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.Composition)   return convertComposition((org.hl7.fhir.r4.model.Composition)src);
  if (src instanceof org.hl7.fhir.r4.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.r4.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.r4.model.Condition)   return convertCondition((org.hl7.fhir.r4.model.Condition)src);
  if (src instanceof org.hl7.fhir.r4.model.CapabilityStatement)   return convertConformance((org.hl7.fhir.r4.model.CapabilityStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.Contract)   return convertContract((org.hl7.fhir.r4.model.Contract)src);
  if (src instanceof org.hl7.fhir.r4.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.r4.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.r4.model.Device)   return convertDevice((org.hl7.fhir.r4.model.Device)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.r4.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.r4.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.r4.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.r4.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.r4.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.r4.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.r4.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.r4.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.r4.model.Encounter)   return convertEncounter((org.hl7.fhir.r4.model.Encounter)src);
  if (src instanceof org.hl7.fhir.r4.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.r4.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.r4.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.r4.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.r4.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.r4.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.r4.model.Flag)   return convertFlag((org.hl7.fhir.r4.model.Flag)src);
  if (src instanceof org.hl7.fhir.r4.model.Group)   return convertGroup((org.hl7.fhir.r4.model.Group)src);
  if (src instanceof org.hl7.fhir.r4.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.r4.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.r4.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.r4.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.r4.model.Immunization)   return convertImmunization((org.hl7.fhir.r4.model.Immunization)src);
  if (src instanceof org.hl7.fhir.r4.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.r4.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.r4.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.r4.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.r4.model.ListResource)   return convertList((org.hl7.fhir.r4.model.ListResource)src);
  if (src instanceof org.hl7.fhir.r4.model.Location)   return convertLocation((org.hl7.fhir.r4.model.Location)src);
  if (src instanceof org.hl7.fhir.r4.model.Media)   return convertMedia((org.hl7.fhir.r4.model.Media)src);
  if (src instanceof org.hl7.fhir.r4.model.Medication)   return convertMedication((org.hl7.fhir.r4.model.Medication)src);
  if (src instanceof org.hl7.fhir.r4.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.r4.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.r4.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.r4.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.r4.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.r4.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.r4.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.r4.model.Observation)   return convertObservation((org.hl7.fhir.r4.model.Observation)src);
  if (src instanceof org.hl7.fhir.r4.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.r4.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.r4.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.r4.model.Organization)   return convertOrganization((org.hl7.fhir.r4.model.Organization)src);
  if (src instanceof org.hl7.fhir.r4.model.Patient)   return convertPatient((org.hl7.fhir.r4.model.Patient)src);
  if (src instanceof org.hl7.fhir.r4.model.Person)   return convertPerson((org.hl7.fhir.r4.model.Person)src);
  if (src instanceof org.hl7.fhir.r4.model.Practitioner)   return convertPractitioner((org.hl7.fhir.r4.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.r4.model.Procedure)   return convertProcedure((org.hl7.fhir.r4.model.Procedure)src);
  if (src instanceof org.hl7.fhir.r4.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.r4.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.Provenance)   return convertProvenance((org.hl7.fhir.r4.model.Provenance)src);
  if (src instanceof org.hl7.fhir.r4.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.r4.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.r4.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.r4.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.ReferralRequest)   return convertReferralRequest((org.hl7.fhir.r4.model.ReferralRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.r4.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.r4.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.r4.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.r4.model.Schedule)   return convertSchedule((org.hl7.fhir.r4.model.Schedule)src);
  if (src instanceof org.hl7.fhir.r4.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.r4.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.r4.model.Slot)   return convertSlot((org.hl7.fhir.r4.model.Slot)src);
  if (src instanceof org.hl7.fhir.r4.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.r4.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.Subscription)   return convertSubscription((org.hl7.fhir.r4.model.Subscription)src);
  if (src instanceof org.hl7.fhir.r4.model.Substance)   return convertSubstance((org.hl7.fhir.r4.model.Substance)src);
  if (src instanceof org.hl7.fhir.r4.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.r4.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.r4.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.r4.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.TestScript)   return convertTestScript((org.hl7.fhir.r4.model.TestScript)src);
  if (src instanceof org.hl7.fhir.r4.model.ValueSet)   return convertValueSet((org.hl7.fhir.r4.model.ValueSet)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.r4.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.r4.model.Parameters)   return convertParameters((org.hl7.fhir.r4.model.Parameters)src);
  if (src instanceof org.hl7.fhir.r4.model.Appointment)   return convertAppointment((org.hl7.fhir.r4.model.Appointment)src);
  if (src instanceof org.hl7.fhir.r4.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.r4.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.r4.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.r4.model.Basic)   return convertBasic((org.hl7.fhir.r4.model.Basic)src);
  if (src instanceof org.hl7.fhir.r4.model.Binary)   return convertBinary((org.hl7.fhir.r4.model.Binary)src);
  if (src instanceof org.hl7.fhir.r4.model.Bundle)   return convertBundle((org.hl7.fhir.r4.model.Bundle)src);
  if (src instanceof org.hl7.fhir.r4.model.CarePlan)   return convertCarePlan((org.hl7.fhir.r4.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.r4.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.r4.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.r4.model.Communication)   return convertCommunication((org.hl7.fhir.r4.model.Communication)src);
  if (src instanceof org.hl7.fhir.r4.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.r4.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.Composition)   return convertComposition((org.hl7.fhir.r4.model.Composition)src);
  if (src instanceof org.hl7.fhir.r4.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.r4.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.r4.model.Condition)   return convertCondition((org.hl7.fhir.r4.model.Condition)src);
  if (src instanceof org.hl7.fhir.r4.model.CapabilityStatement)   return convertConformance((org.hl7.fhir.r4.model.CapabilityStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.Contract)   return convertContract((org.hl7.fhir.r4.model.Contract)src);
  if (src instanceof org.hl7.fhir.r4.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.r4.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.r4.model.Device)   return convertDevice((org.hl7.fhir.r4.model.Device)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.r4.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.r4.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.r4.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.r4.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.r4.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.r4.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.r4.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.r4.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.r4.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.r4.model.Encounter)   return convertEncounter((org.hl7.fhir.r4.model.Encounter)src);
  if (src instanceof org.hl7.fhir.r4.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.r4.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.r4.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.r4.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.r4.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.r4.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.r4.model.Flag)   return convertFlag((org.hl7.fhir.r4.model.Flag)src);
  if (src instanceof org.hl7.fhir.r4.model.Group)   return convertGroup((org.hl7.fhir.r4.model.Group)src);
  if (src instanceof org.hl7.fhir.r4.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.r4.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.r4.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.r4.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.r4.model.Immunization)   return convertImmunization((org.hl7.fhir.r4.model.Immunization)src);
  if (src instanceof org.hl7.fhir.r4.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.r4.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.r4.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.r4.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.r4.model.ListResource)   return convertList((org.hl7.fhir.r4.model.ListResource)src);
  if (src instanceof org.hl7.fhir.r4.model.Location)   return convertLocation((org.hl7.fhir.r4.model.Location)src);
  if (src instanceof org.hl7.fhir.r4.model.Media)   return convertMedia((org.hl7.fhir.r4.model.Media)src);
  if (src instanceof org.hl7.fhir.r4.model.Medication)   return convertMedication((org.hl7.fhir.r4.model.Medication)src);
  if (src instanceof org.hl7.fhir.r4.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.r4.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.r4.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.r4.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.r4.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.r4.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.r4.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.r4.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.r4.model.Observation)   return convertObservation((org.hl7.fhir.r4.model.Observation)src);
  if (src instanceof org.hl7.fhir.r4.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.r4.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.r4.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.r4.model.Organization)   return convertOrganization((org.hl7.fhir.r4.model.Organization)src);
  if (src instanceof org.hl7.fhir.r4.model.Patient)   return convertPatient((org.hl7.fhir.r4.model.Patient)src);
  if (src instanceof org.hl7.fhir.r4.model.Person)   return convertPerson((org.hl7.fhir.r4.model.Person)src);
  if (src instanceof org.hl7.fhir.r4.model.Practitioner)   return convertPractitioner((org.hl7.fhir.r4.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.r4.model.Procedure)   return convertProcedure((org.hl7.fhir.r4.model.Procedure)src);
  if (src instanceof org.hl7.fhir.r4.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.r4.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.Provenance)   return convertProvenance((org.hl7.fhir.r4.model.Provenance)src);
  if (src instanceof org.hl7.fhir.r4.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.r4.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.r4.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.r4.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.r4.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.r4.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.r4.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.r4.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.r4.model.Schedule)   return convertSchedule((org.hl7.fhir.r4.model.Schedule)src);
  if (src instanceof org.hl7.fhir.r4.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.r4.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.r4.model.Slot)   return convertSlot((org.hl7.fhir.r4.model.Slot)src);
  if (src instanceof org.hl7.fhir.r4.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.r4.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.r4.model.Subscription)   return convertSubscription((org.hl7.fhir.r4.model.Subscription)src);
  if (src instanceof org.hl7.fhir.r4.model.Substance)   return convertSubstance((org.hl7.fhir.r4.model.Substance)src);
  if (src instanceof org.hl7.fhir.r4.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.r4.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.r4.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.r4.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.r4.model.TestScript)   return convertTestScript((org.hl7.fhir.r4.model.TestScript)src);
  if (src instanceof org.hl7.fhir.r4.model.ValueSet)   return convertValueSet((org.hl7.fhir.r4.model.ValueSet)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9924696311768264
23222,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private ElementDefinition processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  if (DEBUG)   System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  ElementDefinition res=null;
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    if (DEBUG)     System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        if (hasInnerDiffMatches(differential,cpath,diffCursor,diffLimit,base.getElement())) {
          if (outcome.getType().size() > 1) {
            for (            TypeRefComponent t : outcome.getType()) {
              if (!t.getCode().equals(""String_Node_Str""))               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            }
          }
          StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
          if (dt == null)           throw new DefinitionException(cpath + ""String_Node_Str"" + typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
          contextName=dt.getUrl();
          int start=diffCursor;
          while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),cpath + ""String_Node_Str""))           diffCursor++;
          processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName,cpath,outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
        }
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || !(diffMatches.get(0).hasSlicing() || (isExtension(diffMatches.get(0)) && diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        res=outcome;
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && (isDataType(outcome.getType()) || outcome.hasContentReference())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              if (outcome.getPath().endsWith(""String_Node_Str"") && !diffMatches.get(0).getPath().endsWith(""String_Node_Str"")) {
                String en=tail(outcome.getPath());
                String tn=tail(diffMatches.get(0).getPath());
                String t=tn.substring(en.length() - 3);
                if (isPrimitive(Utilities.uncapitalize(t)))                 t=Utilities.uncapitalize(t);
                List<TypeRefComponent> ntr=getByTypeName(outcome.getType(),t);
                if (ntr.isEmpty())                 ntr.add(new TypeRefComponent().setCode(t));
                outcome.getType().clear();
                outcome.getType().addAll(ntr);
              }
              if (outcome.getType().size() > 1)               for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            if (outcome.hasContentReference()) {
              ElementDefinition tgt=getElementById(base.getElement(),outcome.getContentReference());
              if (tgt == null)               throw new DefinitionException(""String_Node_Str"" + outcome.getContentReference());
              replaceFromContentReference(outcome,tgt);
              int nbc=base.getElement().indexOf(tgt) + 1;
              int nbl=nbc;
              while (nbl < base.getElement().size() && base.getElement().get(nbl).getPath().startsWith(tgt.getPath() + ""String_Node_Str""))               nbl++;
              processPaths(indent + ""String_Node_Str"",result,base,differential,nbc,start - 1,nbl - 1,diffCursor - 1,url,profileName,tgt.getPath(),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
 else {
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        int start=0;
        int nbl=findEndOfElement(base,baseCursor);
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && (nbl > baseCursor || differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1)) {
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true).setSlicing(diffMatches.get(0).getSlicing());
          start++;
        }
 else {
          ElementDefinition outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          if (!diffMatches.get(0).hasSlicing())           outcome.setSlicing(makeExtensionSlicing());
 else           outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          if (!diffMatches.get(0).hasSliceName()) {
            updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
            if (!outcome.hasContentReference() && !outcome.hasType()) {
              throw new DefinitionException(""String_Node_Str"");
            }
            start++;
          }
 else           checkExtensionDoco(outcome);
        }
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
 else         if (!diffMatches.get(0).hasSliceName())         diffMatches.get(0).setUserData(GENERATED_IN_SNAPSHOT,true);
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        if (diffMatches.size() > 1 && diffMatches.get(0).hasSlicing() && differential.getElement().indexOf(diffMatches.get(1)) > differential.getElement().indexOf(diffMatches.get(0)) + 1) {
          int nbl=findEndOfElement(base,baseCursor);
          int ndc=differential.getElement().indexOf(diffMatches.get(0));
          int ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor + 1,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,0),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
            baseCursor--;
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
  return res;
}",0.982303888296325
23223,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (derived.hasDifferential() && !derived.getDifferential().getElementFirstRep().getPath().contains(""String_Node_Str"") && !derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  for (  ElementDefinition e : derived.getDifferential().getElement())   e.clearUserData(GENERATED_IN_SNAPSHOT);
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().hasElement() ? derived.getDifferential().getElement().size() - 1 : -1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getDifferential().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummary(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getSnapshot().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummary(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!e.hasUserData(GENERATED_IN_SNAPSHOT)) {
      System.out.println(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId()+ ""String_Node_Str"");
      throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
    }
  }
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (derived.hasDifferential() && !derived.getDifferential().getElementFirstRep().getPath().contains(""String_Node_Str"") && !derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  for (  ElementDefinition e : derived.getDifferential().getElement())   e.clearUserData(GENERATED_IN_SNAPSHOT);
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().hasElement() ? derived.getDifferential().getElement().size() - 1 : -1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getDifferential().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
    System.out.println(""String_Node_Str"");
    for (    ElementDefinition ed : derived.getSnapshot().getElement())     System.out.println(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeSummaryWithProfile(ed)+ ""String_Node_Str""+ ed.getMin()+ ""String_Node_Str""+ ed.getMax()+ ""String_Node_Str""+ sliceSummary(ed)+ ""String_Node_Str""+ ed.getId()+ ""String_Node_Str""+ constraintSummary(ed));
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!e.hasUserData(GENERATED_IN_SNAPSHOT)) {
      System.out.println(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId()+ ""String_Node_Str"");
      throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
    }
  }
}",0.9967193558007754
23224,"private void sortElements(ElementDefinitionHolder edh,ElementDefinitionComparer cmp,List<String> errors) throws FHIRException {
  if (edh.getChildren().size() == 1)   edh.getChildren().get(0).baseIndex=cmp.find(edh.getChildren().get(0).getSelf().getPath());
 else   Collections.sort(edh.getChildren(),cmp);
  cmp.checkForErrors(errors);
  for (  ElementDefinitionHolder child : edh.getChildren()) {
    if (child.getChildren().size() > 0) {
      ElementDefinition ed=cmp.snapshot.get(child.getBaseIndex());
      ElementDefinitionComparer ccmp;
      if (ed.getType().isEmpty() || isAbstract(ed.getType().get(0).getCode()) || ed.getType().get(0).getCode().equals(ed.getPath())) {
        ccmp=new ElementDefinitionComparer(true,cmp.snapshot,cmp.base,cmp.prefixLength,cmp.name);
      }
 else       if (ed.getType().get(0).getCode().equals(""String_Node_Str"") && child.getSelf().getType().size() == 1 && child.getSelf().getType().get(0).hasProfile()) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,child.getSelf().getType().get(0).getProfile());
        if (profile == null)         ccmp=null;
 else         ccmp=new ElementDefinitionComparer(true,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (ed.getType().size() == 1 && !ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        if (profile == null)         throw new FHIRException(""String_Node_Str"" + ""String_Node_Str"" + ed.getType().get(0).getCode() + ""String_Node_Str""+ ed.getPath());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (child.getSelf().getType().size() == 1) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + child.getSelf().getType().get(0).getCode());
        if (profile == null)         throw new FHIRException(""String_Node_Str"" + ""String_Node_Str"" + ed.getType().get(0).getCode() + ""String_Node_Str""+ ed.getPath());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),child.getSelf().getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (ed.getPath().endsWith(""String_Node_Str"") && !child.getSelf().getPath().endsWith(""String_Node_Str"")) {
        String edLastNode=ed.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
        String childLastNode=child.getSelf().getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
        String p=childLastNode.substring(edLastNode.length() - 3);
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + p);
        if (sd == null)         throw new Error(""String_Node_Str"" + p);
        ccmp=new ElementDefinitionComparer(false,sd.getSnapshot().getElement(),p,child.getSelf().getPath().length(),cmp.name);
      }
 else       if (child.getSelf().hasType() && child.getSelf().getType().get(0).getCode().equals(""String_Node_Str"")) {
        for (        TypeRefComponent t : child.getSelf().getType()) {
          if (!t.getCode().equals(""String_Node_Str"")) {
            throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
          }
        }
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (!child.getSelf().hasType() && ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        for (        TypeRefComponent t : ed.getType()) {
          if (!t.getCode().equals(""String_Node_Str"")) {
            throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
          }
        }
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else {
        throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
      }
      if (ccmp != null)       sortElements(child,ccmp,errors);
    }
  }
}","private void sortElements(ElementDefinitionHolder edh,ElementDefinitionComparer cmp,List<String> errors) throws FHIRException {
  if (edh.getChildren().size() == 1)   edh.getChildren().get(0).baseIndex=cmp.find(edh.getChildren().get(0).getSelf().getPath());
 else   Collections.sort(edh.getChildren(),cmp);
  cmp.checkForErrors(errors);
  for (  ElementDefinitionHolder child : edh.getChildren()) {
    if (child.getChildren().size() > 0) {
      ElementDefinition ed=cmp.snapshot.get(child.getBaseIndex());
      ElementDefinitionComparer ccmp;
      if (ed.getType().isEmpty() || isAbstract(ed.getType().get(0).getCode()) || ed.getType().get(0).getCode().equals(ed.getPath())) {
        ccmp=new ElementDefinitionComparer(true,cmp.snapshot,cmp.base,cmp.prefixLength,cmp.name);
      }
 else       if (ed.getType().get(0).getCode().equals(""String_Node_Str"") && child.getSelf().getType().size() == 1 && child.getSelf().getType().get(0).hasProfile()) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,child.getSelf().getType().get(0).getProfile());
        if (profile == null)         ccmp=null;
 else         ccmp=new ElementDefinitionComparer(true,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (ed.getType().size() == 1 && !ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        if (profile == null)         throw new FHIRException(""String_Node_Str"" + ""String_Node_Str"" + ed.getType().get(0).getCode() + ""String_Node_Str""+ ed.getPath());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (child.getSelf().getType().size() == 1) {
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + child.getSelf().getType().get(0).getCode());
        if (profile == null)         throw new FHIRException(""String_Node_Str"" + ""String_Node_Str"" + ed.getType().get(0).getCode() + ""String_Node_Str""+ ed.getPath());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),child.getSelf().getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (ed.getPath().endsWith(""String_Node_Str"") && !child.getSelf().getPath().endsWith(""String_Node_Str"")) {
        String edLastNode=ed.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
        String childLastNode=child.getSelf().getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
        String p=childLastNode.substring(edLastNode.length() - 3);
        if (isPrimitive(Utilities.uncapitalize(p)))         p=Utilities.uncapitalize(p);
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + p);
        if (sd == null)         throw new Error(""String_Node_Str"" + p);
        ccmp=new ElementDefinitionComparer(false,sd.getSnapshot().getElement(),p,child.getSelf().getPath().length(),cmp.name);
      }
 else       if (child.getSelf().hasType() && child.getSelf().getType().get(0).getCode().equals(""String_Node_Str"")) {
        for (        TypeRefComponent t : child.getSelf().getType()) {
          if (!t.getCode().equals(""String_Node_Str"")) {
            throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
          }
        }
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else       if (!child.getSelf().hasType() && ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        for (        TypeRefComponent t : ed.getType()) {
          if (!t.getCode().equals(""String_Node_Str"")) {
            throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
          }
        }
        StructureDefinition profile=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
        ccmp=new ElementDefinitionComparer(false,profile.getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name);
      }
 else {
        throw new Error(""String_Node_Str"" + ed.getPath() + ""String_Node_Str""+ typeCode(ed.getType())+ ""String_Node_Str"");
      }
      if (ccmp != null)       sortElements(child,ccmp,errors);
    }
  }
}",0.990620718726947
23225,"@Override protected void listChildren(List<org.hl7.fhir.r4.model.Property> childProps){
  if (children != null) {
    for (    Element c : children) {
      childProps.add(new org.hl7.fhir.r4.model.Property(c.getName(),c.fhirType(),c.getProperty().getDefinition().getDefinition(),c.getProperty().getDefinition().getMin(),maxToInt(c.getProperty().getDefinition().getMax()),c));
    }
  }
}","@Override protected void listChildren(List<org.hl7.fhir.r4.model.Property> childProps){
  if (children != null) {
    Map<String,org.hl7.fhir.r4.model.Property> map=new HashMap<String,org.hl7.fhir.r4.model.Property>();
    for (    Element c : children) {
      org.hl7.fhir.r4.model.Property p=map.get(c.getName());
      if (p == null) {
        p=new org.hl7.fhir.r4.model.Property(c.getName(),c.fhirType(),c.getProperty().getDefinition().getDefinition(),c.getProperty().getDefinition().getMin(),maxToInt(c.getProperty().getDefinition().getMax()),c);
        childProps.add(p);
        map.put(c.getName(),p);
      }
 else       p.getValues().add(c);
    }
  }
}",0.7058823529411765
23226,"public Coding castToCoding(Base b) throws FHIRException {
  if (b instanceof Coding)   return (Coding)b;
 else   throw new FHIRException(""String_Node_Str"" + b.getClass().getName() + ""String_Node_Str"");
}","public Coding castToCoding(Base b) throws FHIRException {
  if (b instanceof Coding)   return (Coding)b;
 else   if (b instanceof Element) {
    return ObjectConverter.readAsCoding((Element)b);
  }
 else   throw new FHIRException(""String_Node_Str"" + b.getClass().getName() + ""String_Node_Str"");
}",0.8136272545090181
23227,"public CodeableConcept castToCodeableConcept(Base b) throws FHIRException {
  if (b instanceof CodeableConcept)   return (CodeableConcept)b;
 else   if (b instanceof CodeType) {
    CodeableConcept cc=new CodeableConcept();
    cc.addCoding().setCode(((CodeType)b).asStringValue());
    return cc;
  }
 else   throw new FHIRException(""String_Node_Str"" + b.getClass().getName() + ""String_Node_Str"");
}","public CodeableConcept castToCodeableConcept(Base b) throws FHIRException {
  if (b instanceof CodeableConcept)   return (CodeableConcept)b;
 else   if (b instanceof Element) {
    return ObjectConverter.readAsCodeableConcept((Element)b);
  }
 else   if (b instanceof CodeType) {
    CodeableConcept cc=new CodeableConcept();
    cc.addCoding().setCode(((CodeType)b).asStringValue());
    return cc;
  }
 else   throw new FHIRException(""String_Node_Str"" + b.getClass().getName() + ""String_Node_Str"");
}",0.8869179600886918
23228,"public String toCode(){
switch (this) {
case Equals:
    return ""String_Node_Str"";
case Equivalent:
  return ""String_Node_Str"";
case NotEquals:
return ""String_Node_Str"";
case NotEquivalent:
return ""String_Node_Str"";
case Greater:
return ""String_Node_Str"";
case LessThen:
return ""String_Node_Str"";
case GreaterOrEqual:
return ""String_Node_Str"";
case LessOrEqual:
return ""String_Node_Str"";
case Union:
return ""String_Node_Str"";
case Or:
return ""String_Node_Str"";
case And:
return ""String_Node_Str"";
case Xor:
return ""String_Node_Str"";
case Times:
return ""String_Node_Str"";
case DivideBy:
return ""String_Node_Str"";
case Plus:
return ""String_Node_Str"";
case Minus:
return ""String_Node_Str"";
case Concatenate:
return ""String_Node_Str"";
case Implies:
return ""String_Node_Str"";
case Is:
return ""String_Node_Str"";
case As:
return ""String_Node_Str"";
case Div:
return ""String_Node_Str"";
case Mod:
return ""String_Node_Str"";
case In:
return ""String_Node_Str"";
case Contains:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","public String toCode(){
switch (this) {
case Equals:
    return ""String_Node_Str"";
case Equivalent:
  return ""String_Node_Str"";
case NotEquals:
return ""String_Node_Str"";
case NotEquivalent:
return ""String_Node_Str"";
case Greater:
return ""String_Node_Str"";
case LessThen:
return ""String_Node_Str"";
case GreaterOrEqual:
return ""String_Node_Str"";
case LessOrEqual:
return ""String_Node_Str"";
case Union:
return ""String_Node_Str"";
case Or:
return ""String_Node_Str"";
case And:
return ""String_Node_Str"";
case Xor:
return ""String_Node_Str"";
case Times:
return ""String_Node_Str"";
case DivideBy:
return ""String_Node_Str"";
case Plus:
return ""String_Node_Str"";
case Minus:
return ""String_Node_Str"";
case Concatenate:
return ""String_Node_Str"";
case Implies:
return ""String_Node_Str"";
case Is:
return ""String_Node_Str"";
case As:
return ""String_Node_Str"";
case Div:
return ""String_Node_Str"";
case Mod:
return ""String_Node_Str"";
case In:
return ""String_Node_Str"";
case Contains:
return ""String_Node_Str"";
case MemberOf:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9785407725321889
23229,"public String toString(){
  StringBuilder b=new StringBuilder();
switch (kind) {
case Name:
    b.append(name);
  break;
case Function:
if (function == Function.Item) b.append(""String_Node_Str"");
 else {
  b.append(name);
  b.append(""String_Node_Str"");
}
boolean first=true;
for (ExpressionNode n : parameters) {
if (first) first=false;
 else b.append(""String_Node_Str"");
b.append(n.toString());
}
if (function == Function.Item) b.append(""String_Node_Str"");
 else {
b.append(""String_Node_Str"");
}
break;
case Constant:
if (Utilities.isInteger(constant) || Utilities.existsInList(constant,""String_Node_Str"",""String_Node_Str"")) b.append(Utilities.escapeJava(constant));
 else {
b.append(""String_Node_Str"");
b.append(Utilities.escapeJava(constant));
b.append(""String_Node_Str"");
}
break;
case Group:
b.append(""String_Node_Str"");
b.append(group.toString());
b.append(""String_Node_Str"");
}
if (inner != null) {
b.append(""String_Node_Str"");
b.append(inner.toString());
}
if (operation != null) {
b.append(""String_Node_Str"");
b.append(operation.toCode());
b.append(""String_Node_Str"");
b.append(opNext.toString());
}
return b.toString();
}","public String toString(){
  StringBuilder b=new StringBuilder();
switch (kind) {
case Name:
    b.append(name);
  break;
case Function:
if (function == Function.Item) b.append(""String_Node_Str"");
 else {
  b.append(name);
  b.append(""String_Node_Str"");
}
boolean first=true;
for (ExpressionNode n : parameters) {
if (first) first=false;
 else b.append(""String_Node_Str"");
b.append(n.toString());
}
if (function == Function.Item) b.append(""String_Node_Str"");
 else {
b.append(""String_Node_Str"");
}
break;
case Constant:
if (Utilities.isInteger(constant) || Utilities.existsInList(constant,""String_Node_Str"",""String_Node_Str"")) b.append(Utilities.escapeJava(constant));
 else b.append(Utilities.escapeJava(constant));
break;
case Group:
b.append(""String_Node_Str"");
b.append(group.toString());
b.append(""String_Node_Str"");
}
if (inner != null) {
b.append(""String_Node_Str"");
b.append(inner.toString());
}
if (operation != null) {
b.append(""String_Node_Str"");
b.append(operation.toCode());
b.append(""String_Node_Str"");
b.append(opNext.toString());
}
return b.toString();
}",0.9718181818181818
23230,"public static Operation fromCode(String name){
  if (Utilities.noString(name))   return null;
  if (name.equals(""String_Node_Str""))   return Operation.Equals;
  if (name.equals(""String_Node_Str""))   return Operation.Equivalent;
  if (name.equals(""String_Node_Str""))   return Operation.NotEquals;
  if (name.equals(""String_Node_Str""))   return Operation.NotEquivalent;
  if (name.equals(""String_Node_Str""))   return Operation.Greater;
  if (name.equals(""String_Node_Str""))   return Operation.LessThen;
  if (name.equals(""String_Node_Str""))   return Operation.GreaterOrEqual;
  if (name.equals(""String_Node_Str""))   return Operation.LessOrEqual;
  if (name.equals(""String_Node_Str""))   return Operation.Union;
  if (name.equals(""String_Node_Str""))   return Operation.Or;
  if (name.equals(""String_Node_Str""))   return Operation.And;
  if (name.equals(""String_Node_Str""))   return Operation.Xor;
  if (name.equals(""String_Node_Str""))   return Operation.Is;
  if (name.equals(""String_Node_Str""))   return Operation.As;
  if (name.equals(""String_Node_Str""))   return Operation.Times;
  if (name.equals(""String_Node_Str""))   return Operation.DivideBy;
  if (name.equals(""String_Node_Str""))   return Operation.Plus;
  if (name.equals(""String_Node_Str""))   return Operation.Minus;
  if (name.equals(""String_Node_Str""))   return Operation.Concatenate;
  if (name.equals(""String_Node_Str""))   return Operation.Implies;
  if (name.equals(""String_Node_Str""))   return Operation.Div;
  if (name.equals(""String_Node_Str""))   return Operation.Mod;
  if (name.equals(""String_Node_Str""))   return Operation.In;
  if (name.equals(""String_Node_Str""))   return Operation.Contains;
  return null;
}","public static Operation fromCode(String name){
  if (Utilities.noString(name))   return null;
  if (name.equals(""String_Node_Str""))   return Operation.Equals;
  if (name.equals(""String_Node_Str""))   return Operation.Equivalent;
  if (name.equals(""String_Node_Str""))   return Operation.NotEquals;
  if (name.equals(""String_Node_Str""))   return Operation.NotEquivalent;
  if (name.equals(""String_Node_Str""))   return Operation.Greater;
  if (name.equals(""String_Node_Str""))   return Operation.LessThen;
  if (name.equals(""String_Node_Str""))   return Operation.GreaterOrEqual;
  if (name.equals(""String_Node_Str""))   return Operation.LessOrEqual;
  if (name.equals(""String_Node_Str""))   return Operation.Union;
  if (name.equals(""String_Node_Str""))   return Operation.Or;
  if (name.equals(""String_Node_Str""))   return Operation.And;
  if (name.equals(""String_Node_Str""))   return Operation.Xor;
  if (name.equals(""String_Node_Str""))   return Operation.Is;
  if (name.equals(""String_Node_Str""))   return Operation.As;
  if (name.equals(""String_Node_Str""))   return Operation.Times;
  if (name.equals(""String_Node_Str""))   return Operation.DivideBy;
  if (name.equals(""String_Node_Str""))   return Operation.Plus;
  if (name.equals(""String_Node_Str""))   return Operation.Minus;
  if (name.equals(""String_Node_Str""))   return Operation.Concatenate;
  if (name.equals(""String_Node_Str""))   return Operation.Implies;
  if (name.equals(""String_Node_Str""))   return Operation.Div;
  if (name.equals(""String_Node_Str""))   return Operation.Mod;
  if (name.equals(""String_Node_Str""))   return Operation.In;
  if (name.equals(""String_Node_Str""))   return Operation.Contains;
  if (name.equals(""String_Node_Str""))   return Operation.MemberOf;
  return null;
}",0.980415083308974
23231,"private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}","private TypeDetails operateTypes(TypeDetails left,Operation operation,TypeDetails right){
switch (operation) {
case Equals:
    return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Equivalent:
  return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquals:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case NotEquivalent:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessThen:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Greater:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case LessOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case GreaterOrEqual:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Is:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case As:
return new TypeDetails(CollectionStatus.SINGLETON,right.getTypes());
case Union:
return left.union(right);
case Or:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case And:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Xor:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Implies:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Times:
TypeDetails result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case DivideBy:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Concatenate:
result=new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Plus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Minus:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case Div:
case Mod:
result=new TypeDetails(CollectionStatus.SINGLETON);
if (left.hasType(worker,""String_Node_Str"") && right.hasType(worker,""String_Node_Str"")) result.addType(""String_Node_Str"");
 else if (left.hasType(worker,""String_Node_Str"",""String_Node_Str"") && right.hasType(worker,""String_Node_Str"",""String_Node_Str"")) result.addType(""String_Node_Str"");
return result;
case In:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case MemberOf:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case Contains:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
default :
return null;
}
}",0.9864701942397855
23232,"private List<Base> operate(List<Base> left,Operation operation,List<Base> right) throws FHIRException {
switch (operation) {
case Equals:
    return opEquals(left,right);
case Equivalent:
  return opEquivalent(left,right);
case NotEquals:
return opNotEquals(left,right);
case NotEquivalent:
return opNotEquivalent(left,right);
case LessThen:
return opLessThen(left,right);
case Greater:
return opGreater(left,right);
case LessOrEqual:
return opLessOrEqual(left,right);
case GreaterOrEqual:
return opGreaterOrEqual(left,right);
case Union:
return opUnion(left,right);
case In:
return opIn(left,right);
case Contains:
return opContains(left,right);
case Or:
return opOr(left,right);
case And:
return opAnd(left,right);
case Xor:
return opXor(left,right);
case Implies:
return opImplies(left,right);
case Plus:
return opPlus(left,right);
case Times:
return opTimes(left,right);
case Minus:
return opMinus(left,right);
case Concatenate:
return opConcatenate(left,right);
case DivideBy:
return opDivideBy(left,right);
case Div:
return opDiv(left,right);
case Mod:
return opMod(left,right);
case Is:
return opIs(left,right);
case As:
return opAs(left,right);
default :
throw new Error(""String_Node_Str"" + operation.toCode());
}
}","private List<Base> operate(List<Base> left,Operation operation,List<Base> right) throws FHIRException {
switch (operation) {
case Equals:
    return opEquals(left,right);
case Equivalent:
  return opEquivalent(left,right);
case NotEquals:
return opNotEquals(left,right);
case NotEquivalent:
return opNotEquivalent(left,right);
case LessThen:
return opLessThen(left,right);
case Greater:
return opGreater(left,right);
case LessOrEqual:
return opLessOrEqual(left,right);
case GreaterOrEqual:
return opGreaterOrEqual(left,right);
case Union:
return opUnion(left,right);
case In:
return opIn(left,right);
case MemberOf:
return opMemberOf(left,right);
case Contains:
return opContains(left,right);
case Or:
return opOr(left,right);
case And:
return opAnd(left,right);
case Xor:
return opXor(left,right);
case Implies:
return opImplies(left,right);
case Plus:
return opPlus(left,right);
case Times:
return opTimes(left,right);
case Minus:
return opMinus(left,right);
case Concatenate:
return opConcatenate(left,right);
case DivideBy:
return opDivideBy(left,right);
case Div:
return opDiv(left,right);
case Mod:
return opMod(left,right);
case Is:
return opIs(left,right);
case As:
return opAs(left,right);
default :
throw new Error(""String_Node_Str"" + operation.toCode());
}
}",0.9815409309791332
23233,"private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    if (hostServices != null) {
      String s=convertToString(item);
      if (item.fhirType().equals(""String_Node_Str"")) {
        Property p=item.getChildByName(""String_Node_Str"");
        if (p.hasValues())         s=convertToString(p.getValues().get(0));
      }
      Base res=null;
      if (s.startsWith(""String_Node_Str"")) {
        String id=s.substring(1);
        Property p=context.resource.getChildByName(""String_Node_Str"");
        for (        Base c : p.getValues()) {
          if (id.equals(c.getIdBase()))           res=c;
        }
      }
 else       res=hostServices.resolveReference(context.appInfo,s);
      if (res != null)       result.add(res);
    }
  }
  return result;
}","private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    if (hostServices != null) {
      String s=convertToString(item);
      if (item.fhirType().equals(""String_Node_Str"")) {
        Property p=item.getChildByName(""String_Node_Str"");
        if (p.hasValues())         s=convertToString(p.getValues().get(0));
      }
      Base res=null;
      if (s.startsWith(""String_Node_Str"")) {
        String id=s.substring(1);
        Property p=context.resource.getChildByName(""String_Node_Str"");
        for (        Base c : p.getValues()) {
          if (id.equals(c.getIdBase())) {
            res=c;
            break;
          }
        }
      }
 else       res=hostServices.resolveReference(context.appInfo,s);
      if (res != null)       result.add(res);
    }
  }
  return result;
}",0.961038961038961
23234,"private TypeDetails executeType(String type,ExpressionNode exp,boolean atEntry) throws PathEngineException, DefinitionException {
  if (atEntry && Character.isUpperCase(exp.getName().charAt(0)) && tail(type).equals(exp.getName()))   return new TypeDetails(CollectionStatus.SINGLETON,type);
  TypeDetails result=new TypeDetails(null);
  getChildTypesByName(type,exp.getName(),result);
  return result;
}","private TypeDetails executeType(String type,ExpressionNode exp,boolean atEntry) throws PathEngineException, DefinitionException {
  if (atEntry && Character.isUpperCase(exp.getName().charAt(0)) && hashTail(type).equals(exp.getName()))   return new TypeDetails(CollectionStatus.SINGLETON,type);
  TypeDetails result=new TypeDetails(null);
  getChildTypesByName(type,exp.getName(),result);
  return result;
}",0.9925742574257426
23235,"private List<Base> opIn(List<Base> left,List<Base> right){
  boolean ans=true;
  for (  Base l : left) {
    boolean f=false;
    for (    Base r : right)     if (doEquals(l,r)) {
      f=true;
      break;
    }
    if (!f) {
      ans=false;
      break;
    }
  }
  return makeBoolean(ans);
}","private List<Base> opIn(List<Base> left,List<Base> right) throws FHIRException {
  boolean ans=true;
  for (  Base l : left) {
    boolean f=false;
    for (    Base r : right)     if (doEquals(l,r)) {
      f=true;
      break;
    }
    if (!f) {
      ans=false;
      break;
    }
  }
  return makeBoolean(ans);
}",0.9640522875816994
23236,"public void initialize() throws Exception {
  first=true;
  boolean copyTemplate=false;
  if (configFile == null) {
    buildConfigFile();
    copyTemplate=true;
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (configuration.has(""String_Node_Str"")) {
    String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
    log(""String_Node_Str"" + redirectFile);
    configFile=redirectFile;
    configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
  }
  if (configuration.has(""String_Node_Str"")) {
    for (    JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
      String level=((JsonPrimitive)n).getAsString();
      System.out.println(""String_Node_Str"" + level);
      logOptions.add(level);
    }
  }
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  root=new File(root).getCanonicalPath();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (autoBuildMode)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || autoBuildMode) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  if (copyTemplate)   copyTemplate();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  if (Utilities.noString(sct))   throw new Exception(""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (txServer == null || !txServer.contains(""String_Node_Str"")) {
    log(""String_Node_Str"");
    context.setCanRunWithoutTerminology(true);
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(txServer));
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","public void initialize() throws Exception {
  first=true;
  boolean copyTemplate=false;
  if (configFile == null) {
    buildConfigFile();
    copyTemplate=true;
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (configuration.has(""String_Node_Str"")) {
    String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
    log(""String_Node_Str"" + redirectFile);
    configFile=redirectFile;
    configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
  }
  if (configuration.has(""String_Node_Str"")) {
    for (    JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
      String level=((JsonPrimitive)n).getAsString();
      System.out.println(""String_Node_Str"" + level);
      logOptions.add(level);
    }
  }
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  root=new File(root).getCanonicalPath();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (autoBuildMode)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || autoBuildMode) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=loadPack(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  if (copyTemplate)   copyTemplate();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  if (Utilities.noString(sct))   throw new Exception(""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (txServer == null || !txServer.contains(""String_Node_Str"")) {
    log(""String_Node_Str"");
    context.setCanRunWithoutTerminology(true);
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(txServer));
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    jurisdictions=new ArrayList<CodeableConcept>();
    for (    String s : configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString().trim().split(""String_Node_Str"")) {
      CodeableConcept cc=new CodeableConcept();
      jurisdictions.add(cc);
      Coding c=cc.addCoding();
      String sc=s.trim();
      if (Utilities.isInteger(sc))       c.setSystem(""String_Node_Str"").setCode(sc);
 else       c.setSystem(""String_Node_Str"").setCode(sc);
      ValidationResult vr=context.validateCode(c,null);
      if (vr.getDisplay() != null)       c.setDisplay(vr.getDisplay());
    }
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.998564427503589
23237,"private SpecificationPackage loadValidationPack() throws FileNotFoundException, IOException, FHIRException {
  String source;
  if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   throw new FHIRException(""String_Node_Str"" + version);
  String fn=""String_Node_Str"";
  if (new File(""String_Node_Str"").exists())   fn=""String_Node_Str"";
 else {
    log(""String_Node_Str"" + source);
    fn=grabToLocalCache(source);
  }
  log(""String_Node_Str"" + fn + ""String_Node_Str""+ version);
  if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R2ToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R3ToR4Loader());
  }
 else   if (""String_Node_Str"".equals(version)) {
    return SpecificationPackage.fromPath(fn,new R3ToR4Loader());
  }
 else   return SpecificationPackage.fromPath(fn);
}","private SpecificationPackage loadValidationPack() throws FileNotFoundException, IOException, FHIRException {
  String source;
  if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   throw new FHIRException(""String_Node_Str"" + version);
  String fn=""String_Node_Str"";
  if (new File(""String_Node_Str"").exists())   fn=""String_Node_Str"";
 else {
    log(""String_Node_Str"" + source);
    fn=grabToLocalCache(source);
  }
  log(""String_Node_Str"" + fn + ""String_Node_Str""+ version);
  return loadPack(fn);
}",0.7620709714950553
23238,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str"",IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str"",IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9976133651551312
23239,"public void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    List<String> errors=new ArrayList<String>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.sortDifferential(sd,p,url,errors);
    for (    String err : errors)     msgs.add(new ValidationMessage(Source.ProfileValidator,IssueType.EXCEPTION,""String_Node_Str"" + err,ValidationMessage.IssueSeverity.ERROR));
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}","public void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    List<String> errors=new ArrayList<String>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.sortDifferential(sd,p,url,errors);
    for (    String err : errors)     msgs.add(new ValidationMessage(Source.ProfileValidator,IssueType.EXCEPTION,p.getUserString(""String_Node_Str""),""String_Node_Str"" + err,ValidationMessage.IssueSeverity.ERROR));
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}",0.9904449904449903
23240,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9977032613688562
23241,"public void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    List<String> errors=new ArrayList<String>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.sortDifferential(sd,p,url,errors);
    for (    String err : errors)     msgs.add(new ValidationMessage(Source.ProfileValidator,IssueType.EXCEPTION,""String_Node_Str"" + err,ValidationMessage.IssueSeverity.ERROR));
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}","public void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    List<String> errors=new ArrayList<String>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.sortDifferential(sd,p,url,errors);
    for (    String err : errors)     msgs.add(new ValidationMessage(Source.ProfileValidator,IssueType.EXCEPTION,p.getUserString(""String_Node_Str""),""String_Node_Str"" + err,ValidationMessage.IssueSeverity.ERROR));
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}",0.9904449904449903
23242,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws FHIRFormatError, FHIRException, IOException, DefinitionException {
  reapComments(node,context);
  List<Property> properties=context.getProperty().getChildProperties(context.getName(),XMLUtil.getXsiType(node));
  String text=XMLUtil.getDirectText(node).trim();
  if (!Utilities.noString(text)) {
    Property property=getTextProp(properties);
    if (property != null) {
      context.getChildren().add(new Element(property.getName(),property,property.getType(),text).markLocation(line(node),col(node)));
    }
 else {
      logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
  }
  for (int i=0; i < node.getAttributes().getLength(); i++) {
    Node attr=node.getAttributes().item(i);
    if (!(attr.getNodeName().equals(""String_Node_Str"") || attr.getNodeName().startsWith(""String_Node_Str""))) {
      Property property=getAttrProp(properties,attr.getNodeName());
      if (property != null) {
        String av=attr.getNodeValue();
        if (ToolingExtensions.hasExtension(property.getDefinition(),""String_Node_Str""))         av=convertForDateFormat(ToolingExtensions.readStringExtension(property.getDefinition(),""String_Node_Str""),av);
        if (property.getName().equals(""String_Node_Str"") && context.isPrimitive())         context.setValue(av);
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),av).markLocation(line(node),col(node)));
      }
 else       if (!allowXsiLocation || !attr.getNodeName().endsWith(""String_Node_Str"")) {
        logError(line(node),col(node),path,IssueType.STRUCTURE,""String_Node_Str"" + attr.getNodeName() + ""String_Node_Str""+ node.getNodeName(),IssueSeverity.ERROR);
      }
    }
  }
  Node child=node.getFirstChild();
  while (child != null) {
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Property property=getElementProp(properties,child.getLocalName());
      if (property != null) {
        if (!property.isChoice() && ""String_Node_Str"".equals(property.getType())) {
          XhtmlNode xhtml=new XhtmlParser().setValidatorMode(true).parseHtmlNode((org.w3c.dom.Element)child);
          context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().setXmlOnly(true).compose(xhtml)).setXhtml(xhtml).markLocation(line(child),col(child)));
        }
 else {
          String npath=path + ""String_Node_Str"" + pathPrefix(child.getNamespaceURI())+ child.getLocalName();
          Element n=new Element(child.getLocalName(),property).markLocation(line(child),col(child));
          checkElement((org.w3c.dom.Element)child,npath,n.getProperty());
          boolean ok=true;
          if (property.isChoice()) {
            if (property.getDefinition().hasRepresentation(PropertyRepresentation.TYPEATTR)) {
              String xsiType=((org.w3c.dom.Element)child).getAttributeNS(FormatUtilities.NS_XSI,""String_Node_Str"");
              if (xsiType == null) {
                logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + '""',IssueSeverity.ERROR);
                ok=false;
              }
 else {
                if (xsiType.contains(""String_Node_Str""))                 xsiType=xsiType.substring(xsiType.indexOf(""String_Node_Str"") + 1);
                n.setType(xsiType);
              }
            }
 else             n.setType(n.getType());
          }
          context.getChildren().add(n);
          if (ok) {
            if (property.isResource())             parseResource(npath,(org.w3c.dom.Element)child,n,property);
 else             parseChildren(npath,(org.w3c.dom.Element)child,n);
          }
        }
      }
 else       logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + child.getLocalName() + ""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (child.getNodeType() == Node.CDATA_SECTION_NODE) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.ERROR);
    }
 else     if (!Utilities.existsInList(child.getNodeType(),3,8)) {
      logError(line(child),col(child),path,IssueType.STRUCTURE,""String_Node_Str"" + Integer.toString(child.getNodeType()) + ""String_Node_Str"",IssueSeverity.ERROR);
    }
    child=child.getNextSibling();
  }
}",0.9977032613688562
23243,"public ValidationMessage(Source source,IssueType type,String message,IssueSeverity level){
  super();
  this.line=-1;
  this.col=-1;
  if (message == null)   throw new Error(""String_Node_Str"");
  this.message=message;
  this.level=level;
  this.source=source;
  this.type=type;
  if (type == null)   throw new Error(""String_Node_Str"");
}","public ValidationMessage(Source source,IssueType type,int line,int col,String path,String message,String html,IssueSeverity level){
  super();
  this.line=line;
  this.col=col;
  this.location=path;
  if (message == null)   throw new Error(""String_Node_Str"");
  this.message=message;
  this.html=html;
  this.level=level;
  this.source=source;
  this.type=type;
  if (level == IssueSeverity.NULL)   determineLevel(path);
  if (type == null)   throw new Error(""String_Node_Str"");
}",0.6242350061199511
23244,"public OperationOutcome validateString(String source,FhirFormat format,List<String> profiles) throws Exception {
  return validate(source.getBytes(),format,profiles);
}","public OperationOutcome validateString(String location,String source,FhirFormat format,List<String> profiles) throws Exception {
  return validate(location,source.getBytes(),format,profiles);
}",0.9307479224376732
23245,"public OperationOutcome validate(byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(messages);
  }
  InstanceValidator validator=new InstanceValidator(this);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}","public OperationOutcome validate(String location,byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(location,messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(location,messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(location,messages);
  }
  InstanceValidator validator=new InstanceValidator(this);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}",0.9692637598284488
23246,"private void validateXmlSchema(List<ValidationMessage> messages) throws FileNotFoundException, IOException, SAXException {
  XmlValidator xml=new XmlValidator(messages,loadSchemas(),loadTransforms());
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateXmlSchema(String location,List<ValidationMessage> messages) throws FileNotFoundException, IOException, SAXException {
  XmlValidator xml=new XmlValidator(messages,loadSchemas(),loadTransforms());
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9640287769784172
23247,"private void validateJsonSchema(List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateJsonSchema(String location,List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9414519906323184
23248,"private void validateSHEX(List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateSHEX(String location,List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9397590361445785
23249,"public OperationOutcome validateString(String source,FhirFormat format,List<String> profiles) throws Exception {
  return validate(source.getBytes(),format,profiles);
}","public OperationOutcome validateString(String location,String source,FhirFormat format,List<String> profiles) throws Exception {
  return validate(location,source.getBytes(),format,profiles);
}",0.9307479224376732
23250,"public OperationOutcome validate(byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(messages);
  }
  InstanceValidator validator=new InstanceValidator(this);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}","public OperationOutcome validate(String location,byte[] source,FhirFormat cntType,List<String> profiles) throws Exception {
  List<ValidationMessage> messages=new ArrayList<ValidationMessage>();
  if (doNative) {
    if (cntType == FhirFormat.JSON)     validateJsonSchema(location,messages);
    if (cntType == FhirFormat.XML)     validateXmlSchema(location,messages);
    if (cntType == FhirFormat.TURTLE)     validateSHEX(location,messages);
  }
  InstanceValidator validator=new InstanceValidator(this);
  validator.setNoInvariantChecks(isNoInvariantChecks());
  validator.validate(null,messages,new ByteArrayInputStream(source),cntType,new ValidationProfileSet(profiles,true));
  return messagesToOutcome(messages);
}",0.9692637598284488
23251,"private void validateXmlSchema(List<ValidationMessage> messages) throws FileNotFoundException, IOException, SAXException {
  XmlValidator xml=new XmlValidator(messages,loadSchemas(),loadTransforms());
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateXmlSchema(String location,List<ValidationMessage> messages) throws FileNotFoundException, IOException, SAXException {
  XmlValidator xml=new XmlValidator(messages,loadSchemas(),loadTransforms());
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9640287769784172
23252,"private void validateJsonSchema(List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateJsonSchema(String location,List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9414519906323184
23253,"private void validateSHEX(List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,""String_Node_Str"",IssueSeverity.INFORMATION));
}","private void validateSHEX(String location,List<ValidationMessage> messages){
  messages.add(new ValidationMessage(Source.InstanceValidator,IssueType.INFORMATIONAL,location,""String_Node_Str"",IssueSeverity.INFORMATION));
}",0.9397590361445785
23254,"public org.hl7.fhir.r4.model.StructureDefinition convertDataElement(org.hl7.fhir.dstu2.model.DataElement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.r4.model.StructureDefinition tgt=new org.hl7.fhir.r4.model.StructureDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu2.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu2.model.CodeableConcept t : src.getUseContext())   if (isJurisdiction(t))   tgt.addJurisdiction(convertCodeableConcept(t));
 else   tgt.addUseContext(convertCodeableConceptToUsageContext(t));
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  List<String> slicePaths=new ArrayList<String>();
  for (  org.hl7.fhir.dstu2.model.ElementDefinition t : src.getElement()) {
    if (t.hasSlicing())     slicePaths.add(t.getPath());
    tgt.getSnapshot().addElement(convertElementDefinition(t,slicePaths));
  }
  tgt.setKind(StructureDefinitionKind.LOGICAL);
  tgt.setAbstract(false);
  tgt.setType(tgt.getName());
  tgt.setBaseDefinition(""String_Node_Str"");
  tgt.setDerivation(TypeDerivationRule.SPECIALIZATION);
  return tgt;
}","public org.hl7.fhir.r4.model.StructureDefinition convertDataElement(org.hl7.fhir.dstu2.model.DataElement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.r4.model.StructureDefinition tgt=new org.hl7.fhir.r4.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
  for (  org.hl7.fhir.dstu2.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu2.model.CodeableConcept t : src.getUseContext())   if (isJurisdiction(t))   tgt.addJurisdiction(convertCodeableConcept(t));
 else   tgt.addUseContext(convertCodeableConceptToUsageContext(t));
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  List<String> slicePaths=new ArrayList<String>();
  for (  org.hl7.fhir.dstu2.model.ElementDefinition t : src.getElement()) {
    if (t.hasSlicing())     slicePaths.add(t.getPath());
    tgt.getSnapshot().addElement(convertElementDefinition(t,slicePaths));
  }
  tgt.setKind(StructureDefinitionKind.LOGICAL);
  tgt.setAbstract(false);
  tgt.setType(tgt.getName());
  tgt.setBaseDefinition(""String_Node_Str"");
  tgt.setDerivation(TypeDerivationRule.SPECIALIZATION);
  return tgt;
}",0.97568970226714
23255,"public static org.hl7.fhir.r4.model.StructureDefinition convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.r4.model.StructureDefinition tgt=new org.hl7.fhir.r4.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasStatus())   tgt.setStatus(convertPublicationStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  if (src.hasName())   tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertContactDetail(t));
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   tgt.addUseContext(convertUsageContext(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addJurisdiction(convertCodeableConcept(t));
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.getSnapshot().addElement(convertElementDefinition(t));
  tgt.setKind(StructureDefinitionKind.LOGICAL);
  tgt.setAbstract(false);
  tgt.setType(tgt.getName());
  tgt.setBaseDefinition(""String_Node_Str"");
  tgt.setDerivation(TypeDerivationRule.SPECIALIZATION);
  return tgt;
}","public static org.hl7.fhir.r4.model.StructureDefinition convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.r4.model.StructureDefinition tgt=new org.hl7.fhir.r4.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl().replace(""String_Node_Str"",""String_Node_Str""));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasStatus())   tgt.setStatus(convertPublicationStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  if (src.hasName())   tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertContactDetail(t));
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   tgt.addUseContext(convertUsageContext(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addJurisdiction(convertCodeableConcept(t));
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.getSnapshot().addElement(convertElementDefinition(t));
  tgt.setKind(StructureDefinitionKind.LOGICAL);
  tgt.setAbstract(false);
  tgt.setType(tgt.getName());
  tgt.setBaseDefinition(""String_Node_Str"");
  tgt.setDerivation(TypeDerivationRule.SPECIALIZATION);
  return tgt;
}",0.9878738884397736
23256,"private void generateElementDefinition(StructureDefinition source,ElementDefinition ed,ElementDefinition parent) throws Exception {
  String id=ed.getPath().replace(""String_Node_Str"",""String_Node_Str"");
  if (id.length() > 64)   id=id.substring(0,64);
  if (!id.contains(""String_Node_Str""))   return;
  if (!ed.hasType())   return;
  if (Utilities.existsInList(ed.getType().get(0).getCode(),""String_Node_Str"",""String_Node_Str""))   return;
  StructureDefinition de;
  if (des.containsKey(id)) {
    de=des.get(id);
    de.getSnapshot().getElement().clear();
    de.getExtension().clear();
  }
 else {
    de=new StructureDefinition();
    de.setId(id);
    des.put(id,de);
    de.setUrl(""String_Node_Str"" + de.getId());
    if (de.getId().contains(""String_Node_Str""))     definitions.addNs(de.getUrl(),""String_Node_Str"" + ed.getPath(),definitions.getSrcFile(de.getId().substring(0,de.getId().indexOf(""String_Node_Str""))) + ""String_Node_Str"" + de.getId());
    if (dataElements != null)     dataElements.addEntry().setResource(de).setFullUrl(de.getUrl());
  }
  if (ed.hasBase())   throw new Exception(""String_Node_Str"");
  if (!de.hasMeta())   de.setMeta(new Meta());
  de.getMeta().setLastUpdatedElement(new InstantType(genDate));
  de.setName(ed.getPath());
  de.setStatus(PublicationStatus.DRAFT);
  de.setExperimental(true);
  de.setTitle(de.getName());
  de.setDate(genDate.getTime());
  de.setPublisher(""String_Node_Str"");
  de.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  de.setDescription(""String_Node_Str"" + ed.getPath());
  de.setPurpose(""String_Node_Str"");
  de.setFhirVersion(version);
  de.setKind(StructureDefinitionKind.LOGICAL);
  de.setAbstract(false);
  de.setType(de.getName());
  de.setBaseDefinition(""String_Node_Str"");
  de.setDerivation(TypeDerivationRule.SPECIALIZATION);
  de.getMapping().addAll(source.getMapping());
  ElementDefinition ted=ed.copy();
  de.getSnapshot().addElement(ted);
}","private void generateElementDefinition(StructureDefinition source,ElementDefinition ed,ElementDefinition parent) throws Exception {
  String id=ed.getPath().replace(""String_Node_Str"",""String_Node_Str"");
  if (id.length() > 64)   id=id.substring(0,64);
  if (!id.contains(""String_Node_Str""))   return;
  if (!ed.hasType())   return;
  if (Utilities.existsInList(ed.getType().get(0).getCode(),""String_Node_Str"",""String_Node_Str""))   return;
  StructureDefinition de;
  if (des.containsKey(id)) {
    de=des.get(""String_Node_Str"" + id);
    de.getSnapshot().getElement().clear();
    de.getExtension().clear();
  }
 else {
    de=new StructureDefinition();
    de.setId(""String_Node_Str"" + id);
    des.put(id,de);
    de.setUrl(""String_Node_Str"" + de.getId());
    if (de.getId().contains(""String_Node_Str""))     definitions.addNs(de.getUrl(),""String_Node_Str"" + ed.getPath(),definitions.getSrcFile(de.getId().substring(0,de.getId().indexOf(""String_Node_Str""))) + ""String_Node_Str"" + de.getId());
    if (dataElements != null)     dataElements.addEntry().setResource(de).setFullUrl(de.getUrl());
  }
  if (ed.hasBase())   throw new Exception(""String_Node_Str"");
  if (!de.hasMeta())   de.setMeta(new Meta());
  de.getMeta().setLastUpdatedElement(new InstantType(genDate));
  de.setName(ed.getPath());
  de.setStatus(PublicationStatus.DRAFT);
  de.setExperimental(true);
  de.setTitle(de.getName());
  de.setDate(genDate.getTime());
  de.setPublisher(""String_Node_Str"");
  de.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  de.setDescription(""String_Node_Str"" + ed.getPath());
  de.setPurpose(""String_Node_Str"");
  de.setFhirVersion(version);
  de.setKind(StructureDefinitionKind.LOGICAL);
  de.setAbstract(false);
  de.setType(de.getName());
  de.setBaseDefinition(""String_Node_Str"");
  de.setDerivation(TypeDerivationRule.SPECIALIZATION);
  de.getMapping().addAll(source.getMapping());
  ElementDefinition ted=ed.copy();
  de.getSnapshot().addElement(ted);
}",0.9899446958270488
23257,"private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()) && !context.getTypeNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  if (hasMetadata(""String_Node_Str""))   sd.setName(metadata(""String_Node_Str""));
 else   sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setVersion(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.setIds(sd,false);
  return sd;
}","private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.getDifferential().getElementFirstRep().setSliceName(null);
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()) && !context.getTypeNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  if (hasMetadata(""String_Node_Str""))   sd.setName(metadata(""String_Node_Str""));
 else   sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setVersion(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.setIds(sd,false);
  return sd;
}",0.9932707993474714
23258,"private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !isListedURLExemption(uc))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
        if (uc != null && !uc.startsWith(igpkp.getCanonical()))         map.path(uc,igpkp.getLinkFor(r));
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getCanonicalPath());
  generateValidationPack();
}","private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !isListedURLExemption(uc))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
        if (uc != null && !u.equals(uc))         map.path(uc,igpkp.getLinkFor(r));
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getCanonicalPath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getCanonicalPath());
  generateValidationPack();
}",0.9839252336448598
23259,"public XhtmlNode renderBundle(org.hl7.fhir.r4.elementmodel.Element element) throws FHIRException {
  XhtmlNode root=new XhtmlNode(NodeType.Element,""String_Node_Str"");
  for (  Base b : element.listChildrenByName(""String_Node_Str"")) {
    XhtmlNode c=getHtmlForResource(((org.hl7.fhir.r4.elementmodel.Element)b).getNamedChild(""String_Node_Str""));
    if (c != null)     root.getChildNodes().addAll(c.getChildNodes());
    root.hr();
  }
  return root;
}","public XhtmlNode renderBundle(org.hl7.fhir.r4.elementmodel.Element element) throws FHIRException {
  XhtmlNode root=new XhtmlNode(NodeType.Element,""String_Node_Str"");
  for (  Base b : element.listChildrenByName(""String_Node_Str"")) {
    org.hl7.fhir.r4.elementmodel.Element r=((org.hl7.fhir.r4.elementmodel.Element)b).getNamedChild(""String_Node_Str"");
    if (r != null) {
      XhtmlNode c=getHtmlForResource(r);
      if (c != null)       root.getChildNodes().addAll(c.getChildNodes());
      root.hr();
    }
  }
  return root;
}",0.76751269035533
23260,"protected void copy(SimpleWorkerContext other){
  structures.putAll(other.structures);
  systems.addAll(other.systems);
  questionnaire=other.questionnaire;
  binaries.putAll(other.binaries);
  allowLoadingDuplicates=other.allowLoadingDuplicates;
  version=other.version;
  revision=other.revision;
  date=other.date;
  validatorFactory=other.validatorFactory;
}","protected void copy(SimpleWorkerContext other){
  super.copy(other);
  structures.putAll(other.structures);
  systems.addAll(other.systems);
  questionnaire=other.questionnaire;
  binaries.putAll(other.binaries);
  allowLoadingDuplicates=other.allowLoadingDuplicates;
  version=other.version;
  revision=other.revision;
  date=other.date;
  validatorFactory=other.validatorFactory;
}",0.9718120805369128
23261,"public void initialize() throws Exception {
  first=true;
  boolean copyTemplate=false;
  if (configFile == null) {
    buildConfigFile();
    copyTemplate=true;
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (configuration.has(""String_Node_Str"")) {
    String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
    log(""String_Node_Str"" + redirectFile);
    configFile=redirectFile;
    configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
  }
  if (configuration.has(""String_Node_Str"")) {
    for (    JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
      String level=((JsonPrimitive)n).getAsString();
      System.out.println(""String_Node_Str"" + level);
      logOptions.add(level);
    }
  }
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  root=new File(root).getCanonicalPath();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (autoBuildMode)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || autoBuildMode) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  if (copyTemplate)   copyTemplate();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  if (Utilities.noString(sct))   throw new Exception(""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (txServer == null || !txServer.contains(""String_Node_Str"")) {
    log(""String_Node_Str"");
    context.setCanRunWithoutTerminology(true);
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(txServer));
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  if (!suppressPath.isEmpty())   loadSuppressedMessages(Utilities.path(root,suppressPath));
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","public void initialize() throws Exception {
  first=true;
  boolean copyTemplate=false;
  if (configFile == null) {
    buildConfigFile();
    copyTemplate=true;
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (configuration.has(""String_Node_Str"")) {
    String redirectFile=Utilities.path(Utilities.getDirectoryForFile(configFile),configuration.get(""String_Node_Str"").getAsString());
    log(""String_Node_Str"" + redirectFile);
    configFile=redirectFile;
    configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(redirectFile));
  }
  if (configuration.has(""String_Node_Str"")) {
    for (    JsonElement n : configuration.getAsJsonArray(""String_Node_Str"")) {
      String level=((JsonPrimitive)n).getAsString();
      System.out.println(""String_Node_Str"" + level);
      logOptions.add(level);
    }
  }
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  root=new File(root).getCanonicalPath();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     pagesDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   pagesDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache != null)   vsCache=Utilities.path(root,vsCache);
 else   if (autoBuildMode)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    if (configuration.get(""String_Node_Str"") instanceof JsonArray) {
      for (      JsonElement e : (JsonArray)configuration.get(""String_Node_Str"")) {
        handlePreProcess((JsonObject)e,root);
      }
    }
 else     handlePreProcess(configuration.getAsJsonObject(""String_Node_Str""),root);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps,this);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  allowBrokenHtml=""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""));
  inspector.setStrict(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  dlog(LogCategory.INIT,""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  for (  String s : pagesDirs) {
    dlog(LogCategory.INIT,""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(LogCategory.INIT,""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(LogCategory.INIT,""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(LogCategory.INIT,""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (cacheOption == CacheOption.CLEAR_ALL || autoBuildMode) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   if (cacheOption == CacheOption.CLEAR_ERRORS) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    log(""String_Node_Str"" + Integer.toString(clearErrors(vsCache)) + ""String_Node_Str"");
  }
 else   log(""String_Node_Str"" + vsCache + ""String_Node_Str""+ Integer.toString(Utilities.countFilesInDirectory(vsCache))+ ""String_Node_Str"");
  if (!new File(vsCache).exists())   throw new Exception(""String_Node_Str"" + vsCache);
  SpecificationPackage spec=null;
  if (specifications != null) {
    String sver=version;
    if (sver.lastIndexOf(""String_Node_Str"") > sver.indexOf(""String_Node_Str""))     sver=sver.substring(0,sver.lastIndexOf(""String_Node_Str""));
    spec=specifications.get(sver);
    if (spec == null)     throw new FHIRException(""String_Node_Str"" + sver);
  }
 else   if (!igPack.isEmpty()) {
    if (igPack.startsWith(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"");
    }
 else {
      File igPackFile=new File(igPack);
      log(""String_Node_Str"" + igPackFile.getCanonicalPath());
      spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
    }
  }
 else   if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      spec=SpecificationPackage.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      File igPackFile=null;
      if (System.getProperty(""String_Node_Str"") != null) {
        igPackFile=new File(System.getProperty(""String_Node_Str""));
      }
      if (igPackFile == null || !igPackFile.exists()) {
        igPackFile=new File(""String_Node_Str"");
      }
      if (igPackFile != null && igPackFile.exists()) {
        log(""String_Node_Str"" + igPackFile.getCanonicalPath());
        spec=SpecificationPackage.fromPath(igPackFile.getCanonicalPath());
      }
 else {
        log(""String_Node_Str"");
      }
    }
  }
 else   spec=loadValidationPack();
  if (copyTemplate)   copyTemplate();
  context=spec.makeContext();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersion());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  String sct=str(configuration,""String_Node_Str"",""String_Node_Str"");
  if (Utilities.noString(sct))   throw new Exception(""String_Node_Str"");
  context.getExpansionProfile().addFixedVersion().setSystem(""String_Node_Str"").setVersion(sct);
  context.getExpansionProfile().setActiveOnly(""String_Node_Str"".equals(ostr(configuration,""String_Node_Str"")));
  if (txServer == null || !txServer.contains(""String_Node_Str"")) {
    log(""String_Node_Str"");
    context.setCanRunWithoutTerminology(true);
  }
 else   checkTSVersion(vsCache,context.connectToTSServer(txServer));
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  validator=new InstanceValidator(context,null);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     validator.getExtensionDomains().add(((JsonPrimitive)e).getAsString());
  }
  if (configuration.has(""String_Node_Str"")) {
    businessVersion=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
  }
  if (configuration.has(""String_Node_Str"")) {
    String suppressPath=configuration.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    if (!suppressPath.isEmpty())     loadSuppressedMessages(Utilities.path(root,suppressPath));
  }
  validator.setFetcher(new ValidationServices(context,igpkp,fileList));
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray urls=configuration.getAsJsonArray(""String_Node_Str"");
  if (urls != null) {
    for (    JsonElement url : urls) {
      listedURLExemptions.add(url.getAsString());
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9970360961151687
23262,"private void addPageDataRow(JsonObject pages,String url,String title,String label,String breadcrumb,Set<FetchedResource> examples){
  JsonObject jsonPage=new JsonObject();
  pages.add(url,jsonPage);
  jsonPage.addProperty(""String_Node_Str"",title);
  jsonPage.addProperty(""String_Node_Str"",label);
  jsonPage.addProperty(""String_Node_Str"",breadcrumb);
  String baseUrl=url;
  if (baseUrl.indexOf(""String_Node_Str"") > 0) {
    baseUrl=baseUrl.substring(0,baseUrl.indexOf(""String_Node_Str""));
  }
  for (  String pagesDir : pagesDirs) {
    String contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
    }
    contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
    }
  }
  if (examples != null) {
    JsonArray exampleArray=new JsonArray();
    jsonPage.add(""String_Node_Str"",exampleArray);
    TreeSet<ImplementationGuidePageComponent> examplePages=new TreeSet<ImplementationGuidePageComponent>(new ImplementationGuidePageComponentComparator());
    for (    FetchedResource exampleResource : examples) {
      ImplementationGuidePageComponent page=pageForFetchedResource(exampleResource);
      if (page != null)       examplePages.add(page);
    }
    for (    ImplementationGuidePageComponent examplePage : examplePages) {
      JsonObject exampleItem=new JsonObject();
      exampleArray.add(exampleItem);
      exampleItem.addProperty(""String_Node_Str"",examplePage.getSource());
      exampleItem.addProperty(""String_Node_Str"",examplePage.getTitle());
    }
  }
}","private void addPageDataRow(JsonObject pages,String url,String title,String label,String breadcrumb,Set<FetchedResource> examples){
  JsonObject jsonPage=new JsonObject();
  pages.add(url,jsonPage);
  jsonPage.addProperty(""String_Node_Str"",title);
  jsonPage.addProperty(""String_Node_Str"",label);
  jsonPage.addProperty(""String_Node_Str"",breadcrumb);
  String baseUrl=url;
  if (baseUrl.indexOf(""String_Node_Str"") > 0) {
    baseUrl=baseUrl.substring(0,baseUrl.indexOf(""String_Node_Str""));
  }
  for (  String pagesDir : pagesDirs) {
    String contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ baseUrl+ ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",baseUrl + ""String_Node_Str"");
    }
    contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ baseUrl+ ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",baseUrl + ""String_Node_Str"");
    }
  }
  for (  String prePagesDir : prePagesDirs) {
    PreProcessInfo ppinfo=preProcessInfo.get(prePagesDir);
    String baseFile=prePagesDir + File.separator;
    if (ppinfo.relativePath.equals(""String_Node_Str""))     baseFile=baseFile + ""String_Node_Str"" + File.separator;
 else     if (!ppinfo.relativePath.equals(""String_Node_Str""))     continue;
    baseFile=baseFile + baseUrl;
    String contentFile=baseFile + ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",baseUrl + ""String_Node_Str"");
    }
    contentFile=baseFile + ""String_Node_Str"";
    if (new File(contentFile).exists()) {
      jsonPage.addProperty(""String_Node_Str"",baseUrl + ""String_Node_Str"");
    }
  }
  if (examples != null) {
    JsonArray exampleArray=new JsonArray();
    jsonPage.add(""String_Node_Str"",exampleArray);
    TreeSet<ImplementationGuidePageComponent> examplePages=new TreeSet<ImplementationGuidePageComponent>(new ImplementationGuidePageComponentComparator());
    for (    FetchedResource exampleResource : examples) {
      ImplementationGuidePageComponent page=pageForFetchedResource(exampleResource);
      if (page != null)       examplePages.add(page);
    }
    for (    ImplementationGuidePageComponent examplePage : examplePages) {
      JsonObject exampleItem=new JsonObject();
      exampleArray.add(exampleItem);
      exampleItem.addProperty(""String_Node_Str"",examplePage.getSource());
      exampleItem.addProperty(""String_Node_Str"",examplePage.getTitle());
    }
  }
}",0.771532184950136
23263,"private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb){
  FetchedResource r=resources.get(source);
  if (r == null) {
    addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
  }
 else {
    Map<String,String> vars=makeVars(r);
    String outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
      JsonArray templates=configuration.getAsJsonArray(""String_Node_Str"");
      if (templates != null)       for (      JsonElement template : templates) {
        String templateName=null;
        String templateDesc=null;
        if (template.isJsonPrimitive()) {
          templateName=template.getAsString();
          templateDesc=templateName;
        }
 else {
          templateName=((JsonObject)template).get(""String_Node_Str"").getAsString();
          templateDesc=((JsonObject)template).get(""String_Node_Str"").getAsString();
        }
        outputName=igpkp.getProperty(r,templateName);
        if (outputName == null)         outputName=r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ templateName+ ""String_Node_Str"";
 else         outputName=igpkp.doReplacements(outputName,r,vars,""String_Node_Str"");
        addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"" + templateDesc,label,breadcrumb + breadCrumbForPage(page,false),null);
      }
    }
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true));
    i++;
  }
}","private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb){
  FetchedResource r=resources.get(source);
  addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
  if (r != null) {
    Map<String,String> vars=makeVars(r);
    String outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
      JsonArray templates=configuration.getAsJsonArray(""String_Node_Str"");
      if (templates != null)       for (      JsonElement template : templates) {
        String templateName=null;
        String templateDesc=null;
        if (template.isJsonPrimitive()) {
          templateName=template.getAsString();
          templateDesc=templateName;
        }
 else {
          templateName=((JsonObject)template).get(""String_Node_Str"").getAsString();
          templateDesc=((JsonObject)template).get(""String_Node_Str"").getAsString();
        }
        outputName=igpkp.getProperty(r,templateName);
        if (outputName == null)         outputName=r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ templateName+ ""String_Node_Str"";
 else         outputName=igpkp.doReplacements(outputName,r,vars,""String_Node_Str"");
        addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"" + templateDesc,label,breadcrumb + breadCrumbForPage(page,false),null);
      }
    }
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true));
    i++;
  }
}",0.9631718646317188
23264,"public static List<ElementDefinition> getChildList(StructureDefinition structure,ElementDefinition element){
  return getChildList(structure,element.getPath());
}","public static List<ElementDefinition> getChildList(StructureDefinition structure,ElementDefinition element){
  return getChildList(structure,element.getPath(),element.getId());
}",0.9529411764705882
23265,"/** 
 * Generate a definition for a referenced element
 * @param sd Containing structure definition
 * @param ed Inner element
 * @return ShEx representation of element reference
 */
private String genInnerTypeDef(StructureDefinition sd,ElementDefinition ed){
  String path=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  ;
  ST element_reference=tmplt(SHAPE_DEFINITION_TEMPLATE);
  element_reference.add(""String_Node_Str"",""String_Node_Str"");
  element_reference.add(""String_Node_Str"",path);
  String comment=ed.getShort();
  element_reference.add(""String_Node_Str"",comment == null ? ""String_Node_Str"" : ""String_Node_Str"" + comment);
  List<String> elements=new ArrayList<String>();
  for (  ElementDefinition child : ProfileUtilities.getChildList(sd,path))   elements.add(genElementDefinition(sd,child));
  element_reference.add(""String_Node_Str"",StringUtils.join(elements,""String_Node_Str""));
  return element_reference.render();
}","/** 
 * Generate a definition for a referenced element
 * @param sd Containing structure definition
 * @param ed Inner element
 * @return ShEx representation of element reference
 */
private String genInnerTypeDef(StructureDefinition sd,ElementDefinition ed){
  String path=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  ;
  ST element_reference=tmplt(SHAPE_DEFINITION_TEMPLATE);
  element_reference.add(""String_Node_Str"",""String_Node_Str"");
  element_reference.add(""String_Node_Str"",path);
  String comment=ed.getShort();
  element_reference.add(""String_Node_Str"",comment == null ? ""String_Node_Str"" : ""String_Node_Str"" + comment);
  List<String> elements=new ArrayList<String>();
  for (  ElementDefinition child : ProfileUtilities.getChildList(sd,path,null))   elements.add(genElementDefinition(sd,child));
  element_reference.add(""String_Node_Str"",StringUtils.join(elements,""String_Node_Str""));
  return element_reference.render();
}",0.9973502914679384
23266,"/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @param errors 
 * @param stack 
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws IOException 
 * @throws FHIRException
 */
private boolean sliceMatches(Object appContext,Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile,List<ValidationMessage> errors,NodeStack stack) throws DefinitionException, FHIRException, IOException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  ExpressionNode n=(ExpressionNode)ed.getUserData(""String_Node_Str"");
  if (n == null) {
    long t=System.nanoTime();
    String expression=""String_Node_Str"";
    for (    ElementDefinitionSlicingDiscriminatorComponent s : slice.getSlicing().getDiscriminator()) {
      String discriminator=s.getPath();
      if (s.getType() == DiscriminatorType.PROFILE)       throw new FHIRException(""String_Node_Str"" + discriminator);
      ElementDefinition criteriaElement=getCriteriaForDiscriminator(path,ed,discriminator,profile);
      if (s.getType() == DiscriminatorType.TYPE) {
        String type=null;
        if (!criteriaElement.getPath().contains(""String_Node_Str"") && discriminator.contains(""String_Node_Str"")) {
          discriminator=discriminator.substring(0,discriminator.indexOf('['));
          String lastNode=tail(discriminator);
          type=tail(criteriaElement.getPath()).substring(lastNode.length());
          type=type.substring(0,1).toLowerCase() + type.substring(1);
        }
 else         if (!criteriaElement.hasType() || criteriaElement.getType().size() == 1) {
          if (discriminator.contains(""String_Node_Str""))           discriminator=discriminator.substring(0,discriminator.indexOf('['));
          type=criteriaElement.getType().get(0).getCode();
        }
        if (type == null)         throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slice.getSliceName()+ ""String_Node_Str"");
        if (discriminator.isEmpty())         expression=expression + ""String_Node_Str"" + type;
 else         expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str""+ type;
      }
 else       if (criteriaElement.hasFixed()) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
        Type fixed=criteriaElement.getFixed();
        if (fixed instanceof StringType) {
          Gson gson=new Gson();
          String json=gson.toJson((StringType)fixed);
          String escapedString=json.substring(json.indexOf(""String_Node_Str"") + 2);
          escapedString=escapedString.substring(0,escapedString.indexOf(""String_Node_Str"") - 1);
          expression=expression + ""String_Node_Str"" + escapedString+ ""String_Node_Str"";
        }
 else         if (fixed instanceof UriType) {
          expression=expression + ""String_Node_Str"" + ((UriType)fixed).asStringValue()+ ""String_Node_Str"";
        }
 else         if (fixed instanceof IntegerType) {
          expression=expression + ((IntegerType)fixed).asStringValue();
        }
 else         if (fixed instanceof DecimalType) {
          expression=expression + ((IntegerType)fixed).asStringValue();
        }
 else         if (fixed instanceof BooleanType) {
          expression=expression + ((BooleanType)fixed).asStringValue();
        }
 else         throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slice.getSliceName()+ ""String_Node_Str""+ fixed.getClass().getName());
      }
 else       if (criteriaElement.hasBinding() && criteriaElement.getBinding().hasStrength() && criteriaElement.getBinding().getStrength().equals(BindingStrength.REQUIRED)&& criteriaElement.getBinding().getValueSetReference() != null) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str""+ criteriaElement.getBinding().getValueSetReference().getReference()+ ""String_Node_Str"";
      }
 else       if (criteriaElement.hasMin() && criteriaElement.getMin() > 0) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
      }
 else       if (criteriaElement.hasMax() && criteriaElement.getMax().equals(""String_Node_Str"")) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
      }
 else {
        throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slice.getSliceName()+ ""String_Node_Str"");
      }
    }
    try {
      n=fpe.parse(expression);
    }
 catch (    FHIRLexerException e) {
      throw new FHIRException(""String_Node_Str"" + expression + ""String_Node_Str""+ profile.getUrl()+ ""String_Node_Str""+ path+ ""String_Node_Str""+ e.getMessage());
    }
    fpeTime=fpeTime + (System.nanoTime() - t);
    ed.setUserData(""String_Node_Str"",n);
  }
  String msg;
  boolean ok;
  try {
    long t=System.nanoTime();
    ok=fpe.evaluateToBoolean(null,element,n);
    fpeTime=fpeTime + (System.nanoTime() - t);
    msg=fpe.forLog();
  }
 catch (  Exception ex) {
    throw new FHIRException(""String_Node_Str"" + profile.getUrl() + ""String_Node_Str""+ path+ ""String_Node_Str""+ ex.getMessage());
  }
  return ok;
}","/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @param errors 
 * @param stack 
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws IOException 
 * @throws FHIRException
 */
private boolean sliceMatches(Object appContext,Element element,String path,ElementDefinition slicer,ElementDefinition ed,StructureDefinition profile,List<ValidationMessage> errors,NodeStack stack) throws DefinitionException, FHIRException, IOException {
  if (!slicer.getSlicing().hasDiscriminator())   return false;
  ExpressionNode n=(ExpressionNode)ed.getUserData(""String_Node_Str"");
  if (n == null) {
    long t=System.nanoTime();
    String expression=""String_Node_Str"";
    for (    ElementDefinitionSlicingDiscriminatorComponent s : slicer.getSlicing().getDiscriminator()) {
      String discriminator=s.getPath();
      if (s.getType() == DiscriminatorType.PROFILE)       throw new FHIRException(""String_Node_Str"" + discriminator);
      ElementDefinition criteriaElement=getCriteriaForDiscriminator(path,ed,discriminator,profile);
      if (s.getType() == DiscriminatorType.TYPE) {
        String type=null;
        if (!criteriaElement.getPath().contains(""String_Node_Str"") && discriminator.contains(""String_Node_Str"")) {
          discriminator=discriminator.substring(0,discriminator.indexOf('['));
          String lastNode=tail(discriminator);
          type=tail(criteriaElement.getPath()).substring(lastNode.length());
          type=type.substring(0,1).toLowerCase() + type.substring(1);
        }
 else         if (!criteriaElement.hasType() || criteriaElement.getType().size() == 1) {
          if (discriminator.contains(""String_Node_Str""))           discriminator=discriminator.substring(0,discriminator.indexOf('['));
          type=criteriaElement.getType().get(0).getCode();
        }
        if (type == null)         throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slicer.getSliceName()+ ""String_Node_Str"");
        if (discriminator.isEmpty())         expression=expression + ""String_Node_Str"" + type;
 else         expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str""+ type;
      }
 else       if (criteriaElement.hasFixed()) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
        Type fixed=criteriaElement.getFixed();
        if (fixed instanceof StringType) {
          Gson gson=new Gson();
          String json=gson.toJson((StringType)fixed);
          String escapedString=json.substring(json.indexOf(""String_Node_Str"") + 2);
          escapedString=escapedString.substring(0,escapedString.indexOf(""String_Node_Str"") - 1);
          expression=expression + ""String_Node_Str"" + escapedString+ ""String_Node_Str"";
        }
 else         if (fixed instanceof UriType) {
          expression=expression + ""String_Node_Str"" + ((UriType)fixed).asStringValue()+ ""String_Node_Str"";
        }
 else         if (fixed instanceof IntegerType) {
          expression=expression + ((IntegerType)fixed).asStringValue();
        }
 else         if (fixed instanceof DecimalType) {
          expression=expression + ((IntegerType)fixed).asStringValue();
        }
 else         if (fixed instanceof BooleanType) {
          expression=expression + ((BooleanType)fixed).asStringValue();
        }
 else         throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slicer.getSliceName()+ ""String_Node_Str""+ fixed.getClass().getName());
      }
 else       if (criteriaElement.hasBinding() && criteriaElement.getBinding().hasStrength() && criteriaElement.getBinding().getStrength().equals(BindingStrength.REQUIRED)&& criteriaElement.getBinding().getValueSetReference() != null) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str""+ criteriaElement.getBinding().getValueSetReference().getReference()+ ""String_Node_Str"";
      }
 else       if (criteriaElement.hasMin() && criteriaElement.getMin() > 0) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
      }
 else       if (criteriaElement.hasMax() && criteriaElement.getMax().equals(""String_Node_Str"")) {
        expression=expression + ""String_Node_Str"" + discriminator+ ""String_Node_Str"";
      }
 else {
        throw new DefinitionException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ slicer.getSliceName()+ ""String_Node_Str"");
      }
    }
    try {
      n=fpe.parse(expression);
    }
 catch (    FHIRLexerException e) {
      throw new FHIRException(""String_Node_Str"" + expression + ""String_Node_Str""+ profile.getUrl()+ ""String_Node_Str""+ path+ ""String_Node_Str""+ e.getMessage());
    }
    fpeTime=fpeTime + (System.nanoTime() - t);
    ed.setUserData(""String_Node_Str"",n);
  }
  String msg;
  boolean ok;
  try {
    long t=System.nanoTime();
    ok=fpe.evaluateToBoolean(null,element,n);
    fpeTime=fpeTime + (System.nanoTime() - t);
    msg=fpe.forLog();
  }
 catch (  Exception ex) {
    throw new FHIRException(""String_Node_Str"" + profile.getUrl() + ""String_Node_Str""+ path+ ""String_Node_Str""+ ex.getMessage());
  }
  return ok;
}",0.999438622754491
23267,"private void updateImplementationGuide() throws Exception {
  for (  ImplementationGuidePackageComponent pck : pubIg.getPackage()) {
    for (    ImplementationGuidePackageResourceComponent res : pck.getResource()) {
      FetchedResource r=null;
      for (      FetchedFile tf : fileList) {
        for (        FetchedResource tr : tf.getResources()) {
          if (tr.getLocalRef().equals(res.getSourceReference().getReference())) {
            r=tr;
          }
        }
      }
      if (r != null) {
        String path=igpkp.doReplacements(igpkp.getLinkFor(r),r,null,null);
        res.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(path));
        inspector.addLinkToCheck(""String_Node_Str"",path);
      }
    }
  }
  FetchedResource r=altMap.get(IG_NAME).getResources().get(0);
  r.setResource(pubIg);
  r.setElement(convertToElement(pubIg));
}","private void updateImplementationGuide() throws Exception {
  for (  ImplementationGuidePackageComponent pck : pubIg.getPackage()) {
    for (    ImplementationGuidePackageResourceComponent res : pck.getResource()) {
      FetchedResource r=null;
      for (      FetchedFile tf : fileList) {
        for (        FetchedResource tr : tf.getResources()) {
          if (tr.getLocalRef().equals(res.getSourceReference().getReference())) {
            r=tr;
          }
        }
      }
      if (r != null) {
        String path=igpkp.doReplacements(igpkp.getLinkFor(r),r,null,null);
        res.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(path));
        inspector.addLinkToCheck(""String_Node_Str"",path);
      }
    }
  }
  FetchedResource r=altMap.get(IG_NAME).getResources().get(0);
  if (!pubIg.hasText() || !pubIg.getText().hasDiv())   pubIg.setText(((ImplementationGuide)r.getResource()).getText());
  r.setResource(pubIg);
  r.setElement(convertToElement(pubIg));
}",0.920515574650913
23268,"public String generate(String title,List<ValidationMessage> allErrors,List<FetchedFile> files,String path) throws IOException {
  List<ValidationMessage> linkErrors=removeDupMessages(allErrors);
  StringBuilder b=new StringBuilder();
  b.append(genHeader(title));
  b.append(genSummaryRowInteral(linkErrors));
  files=sorted(files);
  for (  FetchedFile f : files)   b.append(genSummaryRow(f));
  b.append(genEnd());
  b.append(genStartInternal());
  for (  ValidationMessage vm : linkErrors)   b.append(genDetails(vm));
  b.append(genEnd());
  for (  FetchedFile f : files) {
    b.append(genStart(f));
    for (    ValidationMessage vm : f.getErrors())     b.append(genDetails(vm));
    b.append(genEnd());
  }
  b.append(genFooter(title));
  TextFile.stringToFile(b.toString(),path);
  Bundle validationBundle=new Bundle().setType(Bundle.BundleType.COLLECTION);
  OperationOutcome oo=new OperationOutcome();
  validationBundle.addEntry(new BundleEntryComponent().setResource(oo));
  for (  ValidationMessage vm : linkErrors) {
    oo.getIssue().add(OperationOutcomeUtilities.convertToIssue(vm,oo));
  }
  for (  FetchedFile f : files) {
    if (!f.getErrors().isEmpty()) {
      oo=new OperationOutcome();
      validationBundle.addEntry(new BundleEntryComponent().setResource(oo));
      ToolingExtensions.addStringExtension(oo,ToolingExtensions.EXT_OO_FILE,f.getName());
      for (      ValidationMessage vm : removeDupMessages(f.getErrors())) {
        oo.getIssue().add(OperationOutcomeUtilities.convertToIssue(vm,oo));
      }
    }
  }
  FileOutputStream s=new FileOutputStream(Utilities.changeFileExt(path,""String_Node_Str""));
  new XmlParser().compose(s,validationBundle,true);
  s.close();
  b=new StringBuilder();
  b.append(genHeaderTxt(title));
  b.append(genSummaryRowTxtInternal(linkErrors));
  files=sorted(files);
  for (  FetchedFile f : files)   b.append(genSummaryRowTxt(f));
  b.append(genEnd());
  b.append(genStartTxtInternal());
  for (  ValidationMessage vm : linkErrors)   b.append(genDetailsTxt(vm));
  b.append(genEndTxt());
  for (  FetchedFile f : files) {
    b.append(genStartTxt(f));
    for (    ValidationMessage vm : f.getErrors())     b.append(genDetailsTxt(vm));
    b.append(genEndTxt());
  }
  b.append(genFooterTxt(title));
  TextFile.stringToFile(b.toString(),Utilities.changeFileExt(path,""String_Node_Str""));
  return path;
}","public String generate(String title,List<ValidationMessage> allErrors,List<FetchedFile> files,String path) throws IOException {
  List<ValidationMessage> linkErrors=removeDupMessages(allErrors);
  StringBuilder b=new StringBuilder();
  b.append(genHeader(title));
  b.append(genSummaryRowInteral(linkErrors));
  files=sorted(files);
  for (  FetchedFile f : files)   b.append(genSummaryRow(f));
  b.append(genEnd());
  b.append(genStartInternal());
  for (  ValidationMessage vm : linkErrors)   b.append(genDetails(vm));
  b.append(genEnd());
  for (  FetchedFile f : files) {
    b.append(genStart(f));
    for (    ValidationMessage vm : removeDupMessages(f.getErrors()))     b.append(genDetails(vm));
    b.append(genEnd());
  }
  b.append(genFooter(title));
  TextFile.stringToFile(b.toString(),path);
  Bundle validationBundle=new Bundle().setType(Bundle.BundleType.COLLECTION);
  OperationOutcome oo=new OperationOutcome();
  validationBundle.addEntry(new BundleEntryComponent().setResource(oo));
  for (  ValidationMessage vm : linkErrors) {
    oo.getIssue().add(OperationOutcomeUtilities.convertToIssue(vm,oo));
  }
  for (  FetchedFile f : files) {
    if (!f.getErrors().isEmpty()) {
      oo=new OperationOutcome();
      validationBundle.addEntry(new BundleEntryComponent().setResource(oo));
      ToolingExtensions.addStringExtension(oo,ToolingExtensions.EXT_OO_FILE,f.getName());
      for (      ValidationMessage vm : removeDupMessages(f.getErrors())) {
        oo.getIssue().add(OperationOutcomeUtilities.convertToIssue(vm,oo));
      }
    }
  }
  FileOutputStream s=new FileOutputStream(Utilities.changeFileExt(path,""String_Node_Str""));
  new XmlParser().compose(s,validationBundle,true);
  s.close();
  b=new StringBuilder();
  b.append(genHeaderTxt(title));
  b.append(genSummaryRowTxtInternal(linkErrors));
  files=sorted(files);
  for (  FetchedFile f : files)   b.append(genSummaryRowTxt(f));
  b.append(genEnd());
  b.append(genStartTxtInternal());
  for (  ValidationMessage vm : linkErrors)   b.append(genDetailsTxt(vm));
  b.append(genEndTxt());
  for (  FetchedFile f : files) {
    b.append(genStartTxt(f));
    for (    ValidationMessage vm : removeDupMessages(f.getErrors()))     b.append(genDetailsTxt(vm));
    b.append(genEndTxt());
  }
  b.append(genFooterTxt(title));
  TextFile.stringToFile(b.toString(),Utilities.changeFileExt(path,""String_Node_Str""));
  return path;
}",0.9820083682008368
23269,"@Override public void logMessage(String msg){
  System.out.println(msg);
  if (!autoBuildMode)   filelog.append(msg + ""String_Node_Str"");
}","@Override public void logMessage(String msg){
  System.out.println(msg);
  if (!autoBuildMode) {
    try {
      String logPath=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
      if (filelog == null) {
        filelog=new StringBuilder();
        System.out.println(""String_Node_Str"" + logPath);
      }
      filelog.append(msg + ""String_Node_Str"");
      TextFile.stringToFile(filelog.toString(),logPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.3734567901234568
23270,"@Override public void logDebugMessage(LogCategory category,String msg){
  if (logOptions.contains(category.toString().toLowerCase()))   System.out.println(msg);
  if (!autoBuildMode) {
    try {
      String logPath=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
      if (filelog == null) {
        filelog=new StringBuilder();
        System.out.println(""String_Node_Str"" + logPath);
      }
      filelog.append(msg + ""String_Node_Str"");
      TextFile.stringToFile(filelog.toString(),logPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void logDebugMessage(LogCategory category,String msg){
  if (logOptions.contains(category.toString().toLowerCase()))   logMessage(msg);
}",0.388814913448735
23271,"private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb){
  FetchedResource r=resources.get(source);
  addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
  if (r != null) {
    Map<String,String> vars=makeVars(r);
    String outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
      JsonArray templates=configuration.getAsJsonArray(""String_Node_Str"");
      if (templates != null)       for (      JsonElement template : templates) {
        String templateName=null;
        String templateDesc=null;
        if (template.isJsonPrimitive()) {
          templateName=template.getAsString();
          templateDesc=templateName;
        }
 else {
          templateName=((JsonObject)template).get(""String_Node_Str"").getAsString();
          templateDesc=((JsonObject)template).get(""String_Node_Str"").getAsString();
        }
        outputName=igpkp.getProperty(r,templateName);
        if (outputName == null)         outputName=r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ templateName+ ""String_Node_Str"";
 else         outputName=igpkp.doReplacements(outputName,r,vars,""String_Node_Str"");
        addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"" + templateDesc,label,breadcrumb + breadCrumbForPage(page,false),null);
      }
    }
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true));
    i++;
  }
}","private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb){
  FetchedResource r=resources.get(source);
  if (r == null)   addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
 else   addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),r.getExamples());
  if (r != null) {
    Map<String,String> vars=makeVars(r);
    String outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (igpkp.wantGen(r,""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,""String_Node_Str"",""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    }
    if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
      outputName=determineOutputName(igpkp.getProperty(r,""String_Node_Str""),r,vars,null,""String_Node_Str"");
      addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
      JsonArray templates=configuration.getAsJsonArray(""String_Node_Str"");
      if (templates != null)       for (      JsonElement template : templates) {
        String templateName=null;
        String templateDesc=null;
        if (template.isJsonPrimitive()) {
          templateName=template.getAsString();
          templateDesc=templateName;
        }
 else {
          templateName=((JsonObject)template).get(""String_Node_Str"").getAsString();
          templateDesc=((JsonObject)template).get(""String_Node_Str"").getAsString();
        }
        outputName=igpkp.getProperty(r,templateName);
        if (outputName == null)         outputName=r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ templateName+ ""String_Node_Str"";
 else         outputName=igpkp.doReplacements(outputName,r,vars,""String_Node_Str"");
        addPageDataRow(pages,outputName,page.getTitle() + ""String_Node_Str"" + templateDesc,label,breadcrumb + breadCrumbForPage(page,false),null);
      }
    }
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true));
    i++;
  }
}",0.9794788273615636
23272,"protected XhtmlNode parseXhtml(String value) throws IOException, FHIRFormatError {
  XhtmlParser prsr=new XhtmlParser();
  try {
    return prsr.parse(value,""String_Node_Str"").getChildNodes().get(0);
  }
 catch (  org.hl7.fhir.exceptions.FHIRFormatError e) {
    throw new FHIRFormatError(e.getMessage() + ""String_Node_Str"" + value,e);
  }
}","protected XhtmlNode parseXhtml(String value) throws IOException, FHIRFormatError {
  XhtmlParser prsr=new XhtmlParser();
  try {
    return prsr.parse(value,""String_Node_Str"").getChildNodes().get(0);
  }
 catch (  org.hl7.fhir.exceptions.FHIRFormatError e) {
    throw new FHIRFormatError(e.getMessage(),e);
  }
}",0.9571865443425076
23273,"/** 
 * parse xml that is known to be a resource, and that has already been read into a JSON object
 * @throws IOException
 * @throws FHIRFormatError
 */
public Resource parse(JsonObject json) throws FHIRFormatError, IOException {
  return parseResource(json);
}","/** 
 * parse xml that is known to be a resource, and that has already been read into a JSON object  
 * @throws IOException 
 * @throws FHIRFormatError 
 */
public Resource parse(JsonObject json) throws FHIRFormatError, IOException {
  return parseResource(json);
}",0.9924242424242424
23274,"@Override public void logDebugMessage(LogCategory category,String msg){
  if (logOptions.contains(category.toString().toLowerCase()))   System.out.println(msg);
  if (!autoBuildMode) {
    filelog.append(msg + ""String_Node_Str"");
    try {
      TextFile.stringToFile(filelog.toString(),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str""));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void logDebugMessage(LogCategory category,String msg){
  if (logOptions.contains(category.toString().toLowerCase()))   System.out.println(msg);
  if (!autoBuildMode) {
    if (filelog == null)     filelog=new StringBuilder();
    filelog.append(msg + ""String_Node_Str"");
    try {
      TextFile.stringToFile(filelog.toString(),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str""));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.937365010799136
23275,"public static void main(String[] args) throws Exception {
  int exitCode=0;
  if (hasParam(args,""String_Node_Str"") || args.length == 0) {
    runGUI();
    return;
  }
 else   if (hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"")|| hasParam(args,""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else   if (hasParam(args,""String_Node_Str"")) {
    int i=1;
    for (    String ig : TextFile.fileToString(getNamedParam(args,""String_Node_Str"")).split(""String_Node_Str"")) {
      if (!ig.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + ig);
        Publisher self=new Publisher();
        self.setConfigFile(ig);
        self.setTxServer(getNamedParam(args,""String_Node_Str""));
        self.filelog=new StringBuilder();
        if (hasParam(args,""String_Node_Str""))         self.setCacheOption(CacheOption.CLEAR_ALL);
 else         if (hasParam(args,""String_Node_Str""))         self.setCacheOption(CacheOption.CLEAR_ERRORS);
 else         self.setCacheOption(CacheOption.LEAVE);
        try {
          self.execute();
        }
 catch (        Exception e) {
          exitCode=1;
          System.out.println(""String_Node_Str"" + e.getMessage());
          System.out.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
          break;
        }
        TextFile.stringToFile(buildReport(ig,null,self.filelog.toString(),Utilities.path(self.qaDir,""String_Node_Str"")),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""));
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        i++;
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ Constants.REVISION+ ""String_Node_Str""+ nowAsString());
    System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ toMB(Runtime.getRuntime().maxMemory())+ ""String_Node_Str"");
    Publisher self=new Publisher();
    if (hasParam(args,""String_Node_Str"")) {
      self.setSourceDir(getNamedParam(args,""String_Node_Str""));
      self.setDestDir(getNamedParam(args,""String_Node_Str""));
    }
 else     if (!hasParam(args,""String_Node_Str"") && args.length == 1 && new File(args[0]).exists()) {
      self.setConfigFile(args[0]);
    }
 else {
      self.setConfigFile(getNamedParam(args,""String_Node_Str""));
      if (Utilities.noString(self.getConfigFile()))       throw new Exception(""String_Node_Str"");
      if (!(new File(self.getConfigFile()).isAbsolute()))       self.setConfigFile(Utilities.path(System.getProperty(""String_Node_Str""),self.getConfigFile()));
    }
    self.setIgPack(getNamedParam(args,""String_Node_Str""));
    self.setTxServer(getNamedParam(args,""String_Node_Str""));
    self.setAutoBuildMode(hasNamedParam(args,""String_Node_Str""));
    self.watch=hasParam(args,""String_Node_Str"");
    self.filelog=new StringBuilder();
    if (hasParam(args,""String_Node_Str""))     self.setCacheOption(CacheOption.CLEAR_ALL);
 else     if (hasParam(args,""String_Node_Str""))     self.setCacheOption(CacheOption.CLEAR_ERRORS);
 else     self.setCacheOption(CacheOption.LEAVE);
    try {
      self.execute();
    }
 catch (    Exception e) {
      exitCode=1;
      self.log(""String_Node_Str"" + e.getMessage());
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      e.printStackTrace();
      for (      StackTraceElement st : e.getStackTrace()) {
        self.filelog.append(st.toString());
      }
      exitCode=1;
    }
 finally {
      if (!self.autoBuildMode) {
        TextFile.stringToFile(buildReport(getNamedParam(args,""String_Node_Str""),getNamedParam(args,""String_Node_Str""),self.filelog.toString(),Utilities.path(self.qaDir,""String_Node_Str"")),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str""));
      }
    }
  }
  System.exit(exitCode);
}","public static void main(String[] args) throws Exception {
  int exitCode=0;
  if (hasParam(args,""String_Node_Str"") || args.length == 0) {
    runGUI();
    return;
  }
 else   if (hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"") || hasParam(args,""String_Node_Str"")|| hasParam(args,""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else   if (hasParam(args,""String_Node_Str"")) {
    int i=1;
    for (    String ig : TextFile.fileToString(getNamedParam(args,""String_Node_Str"")).split(""String_Node_Str"")) {
      if (!ig.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + ig);
        Publisher self=new Publisher();
        self.setConfigFile(ig);
        self.setTxServer(getNamedParam(args,""String_Node_Str""));
        if (hasParam(args,""String_Node_Str""))         self.setCacheOption(CacheOption.CLEAR_ALL);
 else         if (hasParam(args,""String_Node_Str""))         self.setCacheOption(CacheOption.CLEAR_ERRORS);
 else         self.setCacheOption(CacheOption.LEAVE);
        try {
          self.execute();
        }
 catch (        Exception e) {
          exitCode=1;
          System.out.println(""String_Node_Str"" + e.getMessage());
          System.out.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
          break;
        }
        TextFile.stringToFile(buildReport(ig,null,self.filelog.toString(),Utilities.path(self.qaDir,""String_Node_Str"")),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""));
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        i++;
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ Constants.REVISION+ ""String_Node_Str""+ nowAsString());
    System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ toMB(Runtime.getRuntime().maxMemory())+ ""String_Node_Str"");
    Publisher self=new Publisher();
    if (hasParam(args,""String_Node_Str"")) {
      self.setSourceDir(getNamedParam(args,""String_Node_Str""));
      self.setDestDir(getNamedParam(args,""String_Node_Str""));
    }
 else     if (!hasParam(args,""String_Node_Str"") && args.length == 1 && new File(args[0]).exists()) {
      self.setConfigFile(args[0]);
    }
 else {
      self.setConfigFile(getNamedParam(args,""String_Node_Str""));
      if (Utilities.noString(self.getConfigFile()))       throw new Exception(""String_Node_Str"");
      if (!(new File(self.getConfigFile()).isAbsolute()))       self.setConfigFile(Utilities.path(System.getProperty(""String_Node_Str""),self.getConfigFile()));
    }
    self.setIgPack(getNamedParam(args,""String_Node_Str""));
    self.setTxServer(getNamedParam(args,""String_Node_Str""));
    self.setAutoBuildMode(hasNamedParam(args,""String_Node_Str""));
    self.watch=hasParam(args,""String_Node_Str"");
    if (hasParam(args,""String_Node_Str""))     self.setCacheOption(CacheOption.CLEAR_ALL);
 else     if (hasParam(args,""String_Node_Str""))     self.setCacheOption(CacheOption.CLEAR_ERRORS);
 else     self.setCacheOption(CacheOption.LEAVE);
    try {
      self.execute();
    }
 catch (    Exception e) {
      exitCode=1;
      self.log(""String_Node_Str"" + e.getMessage());
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      self.log(""String_Node_Str"");
      e.printStackTrace();
      for (      StackTraceElement st : e.getStackTrace()) {
        self.filelog.append(st.toString());
      }
      exitCode=1;
    }
 finally {
      if (!self.autoBuildMode) {
        TextFile.stringToFile(buildReport(getNamedParam(args,""String_Node_Str""),getNamedParam(args,""String_Node_Str""),self.filelog.toString(),Utilities.path(self.qaDir,""String_Node_Str"")),Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str""));
      }
    }
  }
  System.exit(exitCode);
}",0.9927259501727588
23276,"private void AddVsRef(ResourceContext rcontext,String value,XhtmlNode li){
  Resource res=rcontext == null ? null : rcontext.resolve(value);
  if (res != null && !(res instanceof MetadataResource)) {
    li.addText(value);
    return;
  }
  MetadataResource vs=(MetadataResource)res;
  if (vs == null)   context.fetchResource(ValueSet.class,value);
  if (vs == null)   context.fetchResource(StructureDefinition.class,value);
  if (vs == null)   context.fetchResource(Questionnaire.class,value);
  if (vs != null) {
    String ref=(String)vs.getUserData(""String_Node_Str"");
    ref=adjustForPath(ref);
    XhtmlNode a=li.ah(ref == null ? ""String_Node_Str"" : ref.replace(""String_Node_Str"",""String_Node_Str""));
    a.addText(value);
  }
 else {
    CodeSystem cs=context.fetchCodeSystem(value);
    if (cs != null) {
      String ref=(String)cs.getUserData(""String_Node_Str"");
      ref=adjustForPath(ref);
      XhtmlNode a=li.ah(ref == null ? ""String_Node_Str"" : ref.replace(""String_Node_Str"",""String_Node_Str""));
      a.addText(value);
    }
 else     if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
      XhtmlNode a=li.ah(value);
      a.tx(""String_Node_Str"");
    }
 else {
      if (value.startsWith(""String_Node_Str"") && !Utilities.existsInList(value,""String_Node_Str""))       System.out.println(""String_Node_Str"" + value);
      li.addText(value);
    }
  }
}","private void AddVsRef(ResourceContext rcontext,String value,XhtmlNode li){
  Resource res=rcontext == null ? null : rcontext.resolve(value);
  if (res != null && !(res instanceof MetadataResource)) {
    li.addText(value);
    return;
  }
  MetadataResource vs=(MetadataResource)res;
  if (vs == null)   vs=context.fetchResource(ValueSet.class,value);
  if (vs == null)   vs=context.fetchResource(StructureDefinition.class,value);
  if (vs == null)   vs=context.fetchResource(Questionnaire.class,value);
  if (vs != null) {
    String ref=(String)vs.getUserData(""String_Node_Str"");
    ref=adjustForPath(ref);
    XhtmlNode a=li.ah(ref == null ? ""String_Node_Str"" : ref.replace(""String_Node_Str"",""String_Node_Str""));
    a.addText(value);
  }
 else {
    CodeSystem cs=context.fetchCodeSystem(value);
    if (cs != null) {
      String ref=(String)cs.getUserData(""String_Node_Str"");
      ref=adjustForPath(ref);
      XhtmlNode a=li.ah(ref == null ? ""String_Node_Str"" : ref.replace(""String_Node_Str"",""String_Node_Str""));
      a.addText(value);
    }
 else     if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
      XhtmlNode a=li.ah(value);
      a.tx(""String_Node_Str"");
    }
 else {
      if (value.startsWith(""String_Node_Str"") && !Utilities.existsInList(value,""String_Node_Str""))       System.out.println(""String_Node_Str"" + value);
      li.addText(value);
    }
  }
}",0.9967776584317938
23277,"public ValidationResult validateCode(String system,String code,String display){
  try {
    if (system.equals(""String_Node_Str""))     return verifySnomed(code,display);
  }
 catch (  Exception e) {
    return new ValidationResult(IssueSeverity.WARNING,""String_Node_Str"" + code + ""String_Node_Str""+ e.getMessage());
  }
  try {
    if (system.equals(""String_Node_Str""))     return verifyLoinc(code,display);
    if (system.equals(""String_Node_Str""))     return verifyUcum(code,display);
    if (codeSystems.containsKey(system) && codeSystems.get(system) != null) {
      return verifyCode(codeSystems.get(system),code,display);
    }
    if (system.startsWith(""String_Node_Str""))     return new ValidationResult(new ConceptDefinitionComponent());
  }
 catch (  Exception e) {
    return new ValidationResult(IssueSeverity.ERROR,""String_Node_Str"" + code + ""String_Node_Str""+ system+ ""String_Node_Str""+ e.getMessage());
  }
  return new ValidationResult(IssueSeverity.WARNING,""String_Node_Str"" + system);
}","public ValidationResult validateCode(String system,String code,String display){
  try {
    if (system.equals(""String_Node_Str""))     return verifySnomed(code,display);
  }
 catch (  Exception e) {
    return new ValidationResult(IssueSeverity.WARNING,""String_Node_Str"" + code + ""String_Node_Str""+ e.getMessage());
  }
  try {
    if (system.equals(""String_Node_Str""))     return verifyLoinc(code,display);
    if (system.equals(""String_Node_Str""))     return verifyUcum(code,display);
    if (codeSystems.containsKey(system) && codeSystems.get(system) != null) {
      return verifyCode(codeSystems.get(system),code,display);
    }
    if (system.startsWith(""String_Node_Str""))     return new ValidationResult(new ConceptDefinitionComponent());
  }
 catch (  Exception e) {
    return new ValidationResult(IssueSeverity.ERROR,""String_Node_Str"" + code + ""String_Node_Str""+ system+ ""String_Node_Str""+ e.getMessage());
  }
  return super.validateCode(system,code,display);
}",0.9468354430379748
23278,"private ValidationResult verifyUcum(String code,String display){
  String s=ucum.validate(code);
  ConceptDefinitionComponent def=new ConceptDefinitionComponent();
  def.setCode(code);
  def.setDisplay(ucum.getCommonDisplay(code));
  return new ValidationResult(def);
}","private ValidationResult verifyUcum(String code,String display){
  String s=ucum.validate(code);
  if (s != null)   return new ValidationResult(IssueSeverity.ERROR,s);
 else {
    ConceptDefinitionComponent def=new ConceptDefinitionComponent();
    def.setCode(code);
    def.setDisplay(ucum.getCommonDisplay(code));
    return new ValidationResult(def);
  }
}",0.794912559618442
23279,"public void dump() throws IOException {
  ln(""String_Node_Str"");
  ln_i(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  addNote();
  for (  Section s : sections) {
    if (s.hasContent()) {
      ln_i(""String_Node_Str"");
      ln(""String_Node_Str"" + Utilities.escapeXml(s.title) + ""String_Node_Str"");
      for (      Rule r : s.rules) {
        if (!r.asserts.isEmpty()) {
          ln_i(""String_Node_Str"" + Utilities.escapeXml(r.name) + ""String_Node_Str"");
          for (          Assert a : r.asserts)           ln(""String_Node_Str"" + Utilities.escapeXml(a.test) + ""String_Node_Str""+ Utilities.escapeXml(a.message)+ ""String_Node_Str"");
          ln_o(""String_Node_Str"");
        }
      }
      ln_o(""String_Node_Str"");
    }
  }
  ln_o(""String_Node_Str"");
  flush();
  close();
}","public void dump() throws IOException {
  ln(""String_Node_Str"");
  ln_i(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  addNote();
  for (  Section s : sections) {
    if (s.hasRegularContent()) {
      ln_i(""String_Node_Str"");
      ln(""String_Node_Str"" + Utilities.escapeXml(s.title) + ""String_Node_Str"");
      for (      Rule r : s.getRegularRules()) {
        if (!r.asserts.isEmpty()) {
          ln_i(""String_Node_Str"" + Utilities.escapeXml(r.name) + ""String_Node_Str"");
          for (          Assert a : r.asserts)           ln(""String_Node_Str"" + Utilities.escapeXml(a.test) + ""String_Node_Str""+ Utilities.escapeXml(a.message)+ ""String_Node_Str"");
          ln_o(""String_Node_Str"");
        }
      }
      ln_o(""String_Node_Str"");
    }
    if (s.hasSpecialContent()) {
      int i=1;
      for (      Rule r : s.getSpecialRules()) {
        ln_i(""String_Node_Str"");
        ln(""String_Node_Str"" + Utilities.escapeXml(s.title) + ""String_Node_Str""+ i+ ""String_Node_Str"");
        i++;
        if (!r.asserts.isEmpty()) {
          ln_i(""String_Node_Str"" + Utilities.escapeXml(r.name) + ""String_Node_Str"");
          for (          Assert a : r.asserts)           ln(""String_Node_Str"" + Utilities.escapeXml(a.test) + ""String_Node_Str""+ Utilities.escapeXml(a.message)+ ""String_Node_Str"");
          ln_o(""String_Node_Str"");
        }
        ln_o(""String_Node_Str"");
      }
    }
  }
  ln_o(""String_Node_Str"");
  flush();
  close();
}",0.7073813708260105
23280,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!findMatchingElement(e.getId(),derived.getSnapshot().getElement()))     throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
  }
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().hasElement() ? derived.getDifferential().getElement().size() - 1 : -1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!findMatchingElement(e.getId(),derived.getSnapshot().getElement()))     throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
  }
}",0.9881925522252498
23281,"private void generateIds(List<ElementDefinition> list,String name) throws DefinitionException {
  if (list.isEmpty())   return;
  Map<String,String> idMap=new HashMap<String,String>();
  List<String> paths=new ArrayList<String>();
  for (  ElementDefinition ed : list) {
    if (!ed.hasPath())     throw new DefinitionException(""String_Node_Str"" + Integer.toString(list.indexOf(ed)) + ""String_Node_Str""+ name);
    int depth=charCount(ed.getPath(),'.');
    String tail=tail(ed.getPath());
    while (depth < paths.size() && paths.size() > 0)     paths.remove(paths.size() - 1);
    String t=ed.hasSliceName() ? tail + ""String_Node_Str"" + checkName(ed.getSliceName()) : name != null ? tail + ""String_Node_Str"" + checkName(name) : tail;
    name=null;
    StringBuilder b=new StringBuilder();
    for (    String s : paths) {
      b.append(s);
      b.append(""String_Node_Str"");
    }
    b.append(t);
    String bs=b.toString();
    idMap.put(ed.hasId() ? ed.getId() : ed.getPath(),bs);
    ed.setId(bs);
    paths.add(t);
    if (ed.hasContentReference()) {
      String s=ed.getContentReference().substring(1);
      if (idMap.containsKey(s))       ed.setContentReference(""String_Node_Str"" + idMap.get(s));
    }
  }
}","private void generateIds(List<ElementDefinition> list,String name) throws DefinitionException {
  if (list.isEmpty())   return;
  Map<String,String> idMap=new HashMap<String,String>();
  List<String> paths=new ArrayList<String>();
  for (  ElementDefinition ed : list) {
    if (!ed.hasPath())     throw new DefinitionException(""String_Node_Str"" + Integer.toString(list.indexOf(ed)) + ""String_Node_Str""+ name);
    int depth=charCount(ed.getPath(),'.');
    String tail=tail(ed.getPath());
    if (depth > paths.size()) {
      String[] pl=ed.getPath().split(""String_Node_Str"");
      for (int i=paths.size(); i < pl.length - 1; i++)       paths.add(pl[i]);
    }
    while (depth < paths.size() && paths.size() > 0)     paths.remove(paths.size() - 1);
    String t=ed.hasSliceName() ? tail + ""String_Node_Str"" + checkName(ed.getSliceName()) : name != null ? tail + ""String_Node_Str"" + checkName(name) : tail;
    name=null;
    StringBuilder b=new StringBuilder();
    for (    String s : paths) {
      b.append(s);
      b.append(""String_Node_Str"");
    }
    b.append(t);
    String bs=b.toString();
    idMap.put(ed.hasId() ? ed.getId() : ed.getPath(),bs);
    ed.setId(bs);
    paths.add(t);
    if (ed.hasContentReference()) {
      String s=ed.getContentReference().substring(1);
      if (idMap.containsKey(s))       ed.setContentReference(""String_Node_Str"" + idMap.get(s));
    }
  }
}",0.93348623853211
23282,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResourceWithException(Class<T> class_,String uri) throws FHIRException {
  if (class_ == null) {
    return null;
  }
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == OperationDefinition.class) {
      OperationDefinition od=operations.get(uri);
      return (T)od;
    }
 else     if (class_ == SearchParameter.class) {
      SearchParameter od=searchParameters.get(uri);
      return (T)od;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
 else     if (class_ == StructureMap.class) {
      if (transforms.containsKey(uri))       return (T)transforms.get(uri);
 else       return null;
    }
  }
  throw new FHIRException(""String_Node_Str"" + class_.getName() + ""String_Node_Str""+ uri+ ""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResourceWithException(Class<T> class_,String uri) throws FHIRException {
  if (class_ == null) {
    return null;
  }
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == Resource.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
      if (operations.containsKey(uri))       return (T)operations.get(uri);
      if (searchParameters.containsKey(uri))       return (T)searchParameters.get(uri);
      if (maps.containsKey(uri))       return (T)maps.get(uri);
      if (transforms.containsKey(uri))       return (T)transforms.get(uri);
      return null;
    }
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == OperationDefinition.class) {
      OperationDefinition od=operations.get(uri);
      return (T)od;
    }
 else     if (class_ == SearchParameter.class) {
      SearchParameter od=searchParameters.get(uri);
      return (T)od;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
 else     if (class_ == StructureMap.class) {
      if (transforms.containsKey(uri))       return (T)transforms.get(uri);
 else       return null;
    }
  }
  throw new FHIRException(""String_Node_Str"" + class_.getName() + ""String_Node_Str""+ uri+ ""String_Node_Str"");
}",0.8489941431117902
23283,"private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !u.startsWith(""String_Node_Str"") && !(r.getResource() instanceof CodeSystem) && !(r.getResource() instanceof ImplementationGuide))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getAbsolutePath());
  generateValidationPack();
}","private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !u.startsWith(""String_Node_Str"") && !(r.getResource() instanceof CodeSystem) && !(r.getResource() instanceof ImplementationGuide))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
        if (!uc.startsWith(igpkp.getCanonical()))         map.path(uc,igpkp.getLinkFor(r));
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getAbsolutePath());
  generateValidationPack();
}",0.9668826493880488
23284,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  HashMap<String,ElementDefinition> snapshotElements=new HashMap<String,ElementDefinition>();
  for (  ElementDefinition e : derived.getSnapshot().getElement()) {
    snapshotElements.put(e.getId(),e);
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!snapshotElements.containsKey(e.getId()))     throw new DefinitionException(""String_Node_Str"" + e.getId());
  }
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  HashMap<String,ElementDefinition> snapshotElements=new HashMap<String,ElementDefinition>();
  for (  ElementDefinition e : derived.getSnapshot().getElement()) {
    snapshotElements.put(e.getId(),e);
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!snapshotElements.containsKey(e.getId()))     throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
  }
}",0.991880341880342
23285,"private void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}","private void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    List<String> errors=new ArrayList<String>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.sortDifferential(sd,p,url,errors);
    for (    String err : errors)     msgs.add(new ValidationMessage(Source.ProfileValidator,IssueType.EXCEPTION,""String_Node_Str"" + err,ValidationMessage.IssueSeverity.ERROR));
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == ValidationMessage.IssueSeverity.ERROR || msg.getLevel() == ValidationMessage.IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}",0.8640285629277001
23286,"private boolean displayLeaf(ResourceWrapper res,BaseWrapper ew,ElementDefinition defn,XhtmlNode x,String name,boolean showCodeDetails) throws FHIRException, UnsupportedEncodingException, IOException {
  if (ew == null)   return false;
  Base e=ew.getBase();
  if (e == null)   return false;
  Map<String,String> displayHints=readDisplayHints(defn);
  if (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 3);
  if (!showCodeDetails && e instanceof PrimitiveType && isDefault(displayHints,((PrimitiveType)e)))   return false;
  if (e instanceof StringType) {
    x.addText(name + ""String_Node_Str"" + ((StringType)e).getValue());
    return true;
  }
 else   if (e instanceof CodeType) {
    x.addText(name + ""String_Node_Str"" + ((CodeType)e).getValue());
    return true;
  }
 else   if (e instanceof IdType) {
    x.addText(name + ""String_Node_Str"" + ((IdType)e).getValue());
    return true;
  }
 else   if (e instanceof UriType) {
    x.addText(name + ""String_Node_Str"" + ((UriType)e).getValue());
    return true;
  }
 else   if (e instanceof DateTimeType) {
    x.addText(name + ""String_Node_Str"" + ((DateTimeType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof InstantType) {
    x.addText(name + ""String_Node_Str"" + ((InstantType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof Extension) {
    return false;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.DateType) {
    x.addText(name + ""String_Node_Str"" + ((org.hl7.fhir.dstu3.model.DateType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof Enumeration) {
    x.addText(((Enumeration<?>)e).getValue().toString());
    return true;
  }
 else   if (e instanceof BooleanType) {
    if (((BooleanType)e).getValue()) {
      x.addText(name);
      return true;
    }
  }
 else   if (e instanceof CodeableConcept) {
    renderCodeableConcept((CodeableConcept)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Coding) {
    renderCoding((Coding)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Annotation) {
    renderAnnotation((Annotation)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.IntegerType) {
    x.addText(Integer.toString(((org.hl7.fhir.dstu3.model.IntegerType)e).getValue()));
    return true;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.DecimalType) {
    x.addText(((org.hl7.fhir.dstu3.model.DecimalType)e).getValue().toString());
    return true;
  }
 else   if (e instanceof Identifier) {
    renderIdentifier((Identifier)e,x);
    return true;
  }
 else   if (e instanceof HumanName) {
    renderHumanName((HumanName)e,x);
    return true;
  }
 else   if (e instanceof SampledData) {
    renderSampledData((SampledData)e,x);
    return true;
  }
 else   if (e instanceof Address) {
    renderAddress((Address)e,x);
    return true;
  }
 else   if (e instanceof ContactPoint) {
    renderContactPoint((ContactPoint)e,x);
    return true;
  }
 else   if (e instanceof Timing) {
    renderTiming((Timing)e,x);
    return true;
  }
 else   if (e instanceof Quantity) {
    renderQuantity((Quantity)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Ratio) {
    renderQuantity(((Ratio)e).getNumerator(),x,showCodeDetails);
    x.tx(""String_Node_Str"");
    renderQuantity(((Ratio)e).getDenominator(),x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Period) {
    Period p=(Period)e;
    x.addText(name + ""String_Node_Str"");
    x.addText(!p.hasStart() ? ""String_Node_Str"" : p.getStartElement().toHumanDisplay());
    x.tx(""String_Node_Str"");
    x.addText(!p.hasEnd() ? ""String_Node_Str"" : p.getEndElement().toHumanDisplay());
    return true;
  }
 else   if (e instanceof Reference) {
    Reference r=(Reference)e;
    if (r.hasDisplayElement())     x.addText(r.getDisplay());
 else     if (r.hasReferenceElement()) {
      ResourceWithReference tr=resolveReference(res,r.getReference());
      x.addText(tr == null ? r.getReference() : ""String_Node_Str"");
    }
 else     x.tx(""String_Node_Str"");
    return true;
  }
 else   if (e instanceof Narrative) {
    return false;
  }
 else   if (e instanceof Resource) {
    return false;
  }
 else   if (e instanceof ContactDetail) {
    return false;
  }
 else   if (e instanceof Range) {
    return false;
  }
 else   if (e instanceof Meta) {
    return false;
  }
 else   if (e instanceof Dosage) {
    return false;
  }
 else   if (e instanceof Signature) {
    return false;
  }
 else   if (!(e instanceof Attachment))   throw new NotImplementedException(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str"");
  return false;
}","private boolean displayLeaf(ResourceWrapper res,BaseWrapper ew,ElementDefinition defn,XhtmlNode x,String name,boolean showCodeDetails) throws FHIRException, UnsupportedEncodingException, IOException {
  if (ew == null)   return false;
  Base e=ew.getBase();
  if (e == null)   return false;
  Map<String,String> displayHints=readDisplayHints(defn);
  if (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 3);
  if (!showCodeDetails && e instanceof PrimitiveType && isDefault(displayHints,((PrimitiveType)e)))   return false;
  if (e instanceof StringType) {
    x.addText(name + ""String_Node_Str"" + ((StringType)e).getValue());
    return true;
  }
 else   if (e instanceof CodeType) {
    x.addText(name + ""String_Node_Str"" + ((CodeType)e).getValue());
    return true;
  }
 else   if (e instanceof IdType) {
    x.addText(name + ""String_Node_Str"" + ((IdType)e).getValue());
    return true;
  }
 else   if (e instanceof UriType) {
    x.addText(name + ""String_Node_Str"" + ((UriType)e).getValue());
    return true;
  }
 else   if (e instanceof DateTimeType) {
    x.addText(name + ""String_Node_Str"" + ((DateTimeType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof InstantType) {
    x.addText(name + ""String_Node_Str"" + ((InstantType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof Extension) {
    return false;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.DateType) {
    x.addText(name + ""String_Node_Str"" + ((org.hl7.fhir.dstu3.model.DateType)e).toHumanDisplay());
    return true;
  }
 else   if (e instanceof Enumeration) {
    x.addText(((Enumeration<?>)e).getValue().toString());
    return true;
  }
 else   if (e instanceof BooleanType) {
    if (((BooleanType)e).getValue()) {
      x.addText(name);
      return true;
    }
  }
 else   if (e instanceof CodeableConcept) {
    renderCodeableConcept((CodeableConcept)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Coding) {
    renderCoding((Coding)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Annotation) {
    renderAnnotation((Annotation)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.IntegerType) {
    x.addText(Integer.toString(((org.hl7.fhir.dstu3.model.IntegerType)e).getValue()));
    return true;
  }
 else   if (e instanceof org.hl7.fhir.dstu3.model.DecimalType) {
    x.addText(((org.hl7.fhir.dstu3.model.DecimalType)e).getValue().toString());
    return true;
  }
 else   if (e instanceof Identifier) {
    renderIdentifier((Identifier)e,x);
    return true;
  }
 else   if (e instanceof HumanName) {
    renderHumanName((HumanName)e,x);
    return true;
  }
 else   if (e instanceof SampledData) {
    renderSampledData((SampledData)e,x);
    return true;
  }
 else   if (e instanceof Address) {
    renderAddress((Address)e,x);
    return true;
  }
 else   if (e instanceof ContactPoint) {
    renderContactPoint((ContactPoint)e,x);
    return true;
  }
 else   if (e instanceof Timing) {
    renderTiming((Timing)e,x);
    return true;
  }
 else   if (e instanceof Quantity) {
    renderQuantity((Quantity)e,x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Ratio) {
    renderQuantity(((Ratio)e).getNumerator(),x,showCodeDetails);
    x.tx(""String_Node_Str"");
    renderQuantity(((Ratio)e).getDenominator(),x,showCodeDetails);
    return true;
  }
 else   if (e instanceof Period) {
    Period p=(Period)e;
    x.addText(name + ""String_Node_Str"");
    x.addText(!p.hasStart() ? ""String_Node_Str"" : p.getStartElement().toHumanDisplay());
    x.tx(""String_Node_Str"");
    x.addText(!p.hasEnd() ? ""String_Node_Str"" : p.getEndElement().toHumanDisplay());
    return true;
  }
 else   if (e instanceof Reference) {
    Reference r=(Reference)e;
    if (r.hasDisplayElement())     x.addText(r.getDisplay());
 else     if (r.hasReferenceElement()) {
      ResourceWithReference tr=resolveReference(res,r.getReference());
      x.addText(tr == null ? r.getReference() : ""String_Node_Str"");
    }
 else     x.tx(""String_Node_Str"");
    return true;
  }
 else   if (e instanceof Narrative) {
    return false;
  }
 else   if (e instanceof Resource) {
    return false;
  }
 else   if (e instanceof ContactDetail) {
    return false;
  }
 else   if (e instanceof Range) {
    return false;
  }
 else   if (e instanceof Meta) {
    return false;
  }
 else   if (e instanceof Dosage) {
    return false;
  }
 else   if (e instanceof Signature) {
    return false;
  }
 else   if (e instanceof UsageContext) {
    return false;
  }
 else   if (e instanceof ElementDefinition) {
    return false;
  }
 else   if (!(e instanceof Attachment))   throw new NotImplementedException(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str"");
  return false;
}",0.9861712234772512
23287,"private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()) && !context.getTypeNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  if (hasMetadata(""String_Node_Str""))   sd.setName(metadata(""String_Node_Str""));
 else   sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setVersion(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  new ProfileUtilities(context,null,null).setIds(sd,false);
  return sd;
}","private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()) && !context.getTypeNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  if (hasMetadata(""String_Node_Str""))   sd.setName(metadata(""String_Node_Str""));
 else   sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setVersion(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.setIds(sd,false);
  return sd;
}",0.9953622590951252
23288,"private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws Exception {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  tlog(""String_Node_Str"" + describeValidationParameters(pin));
  for (  ParametersParameterComponent pp : pin.getParameter())   if (pp.getName().equals(""String_Node_Str""))   throw new Error(""String_Node_Str"");
  if (expProfile == null)   throw new Exception(""String_Node_Str"");
  pin.addParameter().setName(""String_Node_Str"").setResource(expProfile);
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN)         err=TerminologyServiceErrorClass.UNKNOWN;
 else         if (it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(null);
  saveToCache(res,cacheName);
  return res;
}","private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws Exception {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  tlog(""String_Node_Str"" + describeValidationParameters(pin));
  for (  ParametersParameterComponent pp : pin.getParameter())   if (pp.getName().equals(""String_Node_Str""))   throw new Error(""String_Node_Str"");
  if (expProfile == null)   throw new Exception(""String_Node_Str"");
  pin.addParameter().setName(""String_Node_Str"").setResource(expProfile);
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN)         err=TerminologyServiceErrorClass.UNKNOWN;
 else         if (it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(new ConceptDefinitionComponent());
  saveToCache(res,cacheName);
  return res;
}",0.9914744232698094
23289,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  HashMap<String,ElementDefinition> snapshotElements=new HashMap<String,ElementDefinition>();
  for (  ElementDefinition e : derived.getSnapshot().getElement()) {
    snapshotElements.put(e.getId(),e);
  }
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!snapshotElements.containsKey(e.getId()))     throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
  }
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(""String_Node_Str"",derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,false);
  for (  ElementDefinition e : derived.getDifferential().getElement()) {
    if (!findMatchingElement(e.getId(),derived.getSnapshot().getElement()))     throw new DefinitionException(""String_Node_Str"" + derived.getUrl() + ""String_Node_Str""+ e.getId());
  }
}",0.9052446011458792
23290,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing()))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          result.getElement().remove(result.getElement().size() - 1);
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
          diffCursor++;
          baseCursor++;
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(String indent,StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  System.out.println(indent + ""String_Node_Str"" + resultPathBase+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    System.out.println(indent + ""String_Node_Str"" + cpath+ ""String_Node_Str""+ baseCursor+ ""String_Node_Str""+ baseLimit+ ""String_Node_Str""+ diffCursor+ ""String_Node_Str""+ diffLimit+ ""String_Node_Str""+ slicingDone+ ""String_Node_Str"");
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing()))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          result.getElement().remove(result.getElement().size() - 1);
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing()) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        result.getElement().add(outcome);
        if (!diffMatches.get(0).hasSliceName()) {
          diffpos++;
        }
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(indent + ""String_Node_Str"",result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        if (diffpos == diffMatches.size()) {
          diffCursor++;
        }
 else {
          while (diffpos < diffMatches.size()) {
            ElementDefinition diffItem=diffMatches.get(diffpos);
            for (            ElementDefinition baseItem : baseMatches)             if (baseItem.getSliceName().equals(diffItem.getSliceName()))             throw new DefinitionException(""String_Node_Str"");
            outcome=updateURLs(url,currentBase.copy());
            outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
            updateFromBase(outcome,currentBase);
            outcome.setSlicing(null);
            if (!outcome.getPath().startsWith(resultPathBase))             throw new DefinitionException(""String_Node_Str"");
            result.getElement().add(outcome);
            updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
            diffCursor=differential.getElement().indexOf(diffItem) + 1;
            if (!outcome.getType().isEmpty() && (differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
              if (!baseWalksInto(base.getElement(),baseCursor)) {
                if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                  if (outcome.getType().size() > 1)                   for (                  TypeRefComponent t : outcome.getType()) {
                    if (!t.getCode().equals(""String_Node_Str""))                     throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                  }
                  TypeRefComponent t=outcome.getType().get(0);
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  if (dt == null)                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                  contextName=dt.getUrl();
                  int start=diffCursor;
                  while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                   diffCursor++;
                  processPaths(indent + ""String_Node_Str"",result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
                }
 else                 if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                  StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                  for (                  ElementDefinition extEd : dt.getSnapshot().getElement()) {
                    if (extEd.getPath().contains(""String_Node_Str"")) {
                      ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                      extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                      markDerived(extUrlEd);
                      result.getElement().add(extUrlEd);
                    }
                  }
                }
              }
            }
            diffpos++;
          }
        }
        baseCursor++;
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}",0.7793790560921361
23291,"private void loadIg(JsonObject dep) throws Exception {
  String name=str(dep,""String_Node_Str"");
  if (!Utilities.isToken(name))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str"");
  String location=str(dep,""String_Node_Str"");
  String source=ostr(dep,""String_Node_Str"");
  if (Utilities.noString(source))   source=location;
  log(""String_Node_Str"" + name + ""String_Node_Str""+ location+ ""String_Node_Str""+ source);
  Map<String,byte[]> files=fetchDefinitions(source,name);
  SpecMapManager igm=new SpecMapManager(files.get(""String_Node_Str""));
  igm.setName(name);
  igm.setBase(location);
  specMaps.add(igm);
  if (!Constants.VERSION.equals(igm.getVersion()))   log(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ name+ ""String_Node_Str""+ igm.getVersion()+ ""String_Node_Str"");
  for (  String fn : files.keySet()) {
    if (fn.endsWith(""String_Node_Str"")) {
      Resource r;
      try {
        org.hl7.fhir.dstu3.formats.JsonParser jp=new org.hl7.fhir.dstu3.formats.JsonParser();
        r=jp.parse(new ByteArrayInputStream(files.get(fn)));
      }
 catch (      Exception e) {
        throw new Exception(""String_Node_Str"" + fn + ""String_Node_Str""+ name,e);
      }
      if (r instanceof MetadataResource) {
        String u=((MetadataResource)r).getUrl();
        if (u != null) {
          String p=igm.getPath(u);
          if (p == null)           throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ u);
          r.setUserData(""String_Node_Str"",location + ""String_Node_Str"" + igpkp.doReplacements(p,r,null,null));
          context.seeResource(u,r);
        }
      }
    }
  }
}","private void loadIg(JsonObject dep) throws Exception {
  String name=str(dep,""String_Node_Str"");
  if (!Utilities.isToken(name))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str"");
  String location=str(dep,""String_Node_Str"");
  String source=ostr(dep,""String_Node_Str"");
  if (Utilities.noString(source))   source=location;
  log(""String_Node_Str"" + name + ""String_Node_Str""+ location+ ""String_Node_Str""+ source);
  Map<String,byte[]> files=fetchDefinitions(source,name);
  SpecMapManager igm=new SpecMapManager(files.get(""String_Node_Str""));
  igm.setName(name);
  igm.setBase(location);
  specMaps.add(igm);
  if (!Constants.VERSION.equals(igm.getVersion())) {
    log(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ name+ ""String_Node_Str""+ igm.getVersion()+ ""String_Node_Str"");
    deleteFromCache(source,name);
  }
  for (  String fn : files.keySet()) {
    if (fn.endsWith(""String_Node_Str"")) {
      Resource r;
      try {
        org.hl7.fhir.dstu3.formats.JsonParser jp=new org.hl7.fhir.dstu3.formats.JsonParser();
        r=jp.parse(new ByteArrayInputStream(files.get(fn)));
      }
 catch (      Exception e) {
        throw new Exception(""String_Node_Str"" + fn + ""String_Node_Str""+ name,e);
      }
      if (r instanceof MetadataResource) {
        String u=((MetadataResource)r).getUrl();
        if (u != null) {
          String p=igm.getPath(u);
          if (p == null)           throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ u);
          r.setUserData(""String_Node_Str"",location + ""String_Node_Str"" + igpkp.doReplacements(p,r,null,null));
          context.seeResource(u,r);
        }
      }
    }
  }
}",0.9872958257713248
23292,"public String content() throws EOperationOutcome, FHIRException, IOException, org.hl7.fhir.exceptions.FHIRException {
  CodeSystem csc=cs.copy();
  csc.setId(cs.getId());
  new NarrativeGenerator(prefix,prefix,context).generate(csc);
  return new XhtmlComposer().compose(csc.getText().getDiv());
}","public String content() throws EOperationOutcome, FHIRException, IOException, org.hl7.fhir.exceptions.FHIRException {
  CodeSystem csc=cs.copy();
  csc.setId(cs.getId());
  csc.setText(null);
  new NarrativeGenerator(prefix,prefix,context).generate(csc);
  return new XhtmlComposer().compose(csc.getText().getDiv());
}",0.9658536585365852
23293,"/** 
 * Converts the raw characters to XML escape characters.
 * @param rawContent
 * @param charset Null when charset is not known, so we assume it's unicode
 * @param isNoLines
 * @return escape string
 */
public static String escapeXML(String rawContent,String charset,boolean isNoLines){
  if (rawContent == null)   return ""String_Node_Str"";
 else {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < rawContent.length(); i++) {
      char ch=rawContent.charAt(i);
      if (ch == '\'')       sb.append(""String_Node_Str"");
 else       if (ch == '&')       sb.append(""String_Node_Str"");
 else       if (ch == '""')       sb.append(""String_Node_Str"");
 else       if (ch == '<')       sb.append(""String_Node_Str"");
 else       if (ch == '>')       sb.append(""String_Node_Str"");
 else       if (ch > '~' && charset != null && charSetImpliesAscii(charset))       sb.append(""String_Node_Str"" + Integer.toHexString(new Character(ch).hashCode()).toUpperCase() + ""String_Node_Str"");
 else       if (isNoLines) {
        if (ch == '\r')         sb.append(""String_Node_Str"");
 else         if (ch != '\n')         sb.append(ch);
      }
 else       sb.append(ch);
    }
    return sb.toString();
  }
}","/** 
 * Converts the raw characters to XML escape characters.
 * @param rawContent
 * @param charset Null when charset is not known, so we assume it's unicode
 * @param isNoLines
 * @return escape string
 */
public static String escapeXML(String rawContent,String charset,boolean isNoLines){
  if (rawContent == null)   return ""String_Node_Str"";
 else {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < rawContent.length(); i++) {
      char ch=rawContent.charAt(i);
      if (ch == '\'')       sb.append(""String_Node_Str"");
 else       if (ch == '&')       sb.append(""String_Node_Str"");
 else       if (ch == '""')       sb.append(""String_Node_Str"");
 else       if (ch == '<')       sb.append(""String_Node_Str"");
 else       if (ch == '>')       sb.append(""String_Node_Str"");
 else       if (ch > '~' && charset != null && charSetImpliesAscii(charset))       sb.append(""String_Node_Str"" + Integer.toHexString(ch).toUpperCase() + ""String_Node_Str"");
 else       if (isNoLines) {
        if (ch == '\r')         sb.append(""String_Node_Str"");
 else         if (ch != '\n')         sb.append(ch);
      }
 else       sb.append(ch);
    }
    return sb.toString();
  }
}",0.9798657718120806
23294,"@Override public void text(String content,boolean dontEscape) throws IOException {
  checkInElement();
  if (content != null) {
    if (pendingClose) {
      write(""String_Node_Str"");
      writePendingComment();
      pendingClose=false;
    }
    if (dontEscape)     write(content);
 else     write(XMLUtil.escapeXML(content,charset,false));
  }
}","@Override public void text(String content,boolean dontEscape) throws IOException {
  checkInElement();
  if (content != null) {
    if (pendingClose) {
      write(""String_Node_Str"");
      writePendingComment();
      pendingClose=false;
    }
    if (dontEscape)     write(content);
 else     write(XMLUtil.escapeXML(content,""String_Node_Str"",false));
  }
}",0.9661016949152542
23295,"private int writeAttributeSet(boolean special,int col,int wrap) throws IOException {
  if (attributes != null) {
    for (int i=0; i < attributes.length; i++) {
      String[] element=attributes[i];
      if (nameIsSpecial(element[0]) == special) {
        col=col + element[0].length() + element[1].length()+ 4;
        if (isPretty() && attributeLineWrap > 0 && col > attributeLineWrap && col > wrap) {
          write(lineType == LINE_UNIX ? ""String_Node_Str"" : ""String_Node_Str"");
          for (int j=0; j < wrap; j++)           write(""String_Node_Str"");
          col=wrap;
        }
        write(' ');
        write(element[0]);
        write(""String_Node_Str"");
        if (element[1] != null)         write(element[1]);
        write(""String_Node_Str"");
      }
    }
  }
  return col;
}","private int writeAttributeSet(boolean special,int col,int wrap) throws IOException {
  if (attributes != null) {
    for (int i=0; i < attributes.length; i++) {
      String[] element=attributes[i];
      if (nameIsSpecial(element[0]) == special) {
        col=col + element[0].length() + element[1].length()+ 4;
        if (isPretty() && attributeLineWrap > 0 && col > attributeLineWrap && col > wrap) {
          write(lineType == LINE_UNIX ? ""String_Node_Str"" : ""String_Node_Str"");
          for (int j=0; j < wrap; j++)           write(""String_Node_Str"");
          col=wrap;
        }
        write(' ');
        write(element[0]);
        write(""String_Node_Str"");
        if (element[1] != null)         write(xmlEscape(element[1]));
        write(""String_Node_Str"");
      }
    }
  }
  return col;
}",0.9931464174454828
23296,"public boolean addProfile(List<ValidationMessage> errors,String profile,boolean error,String path,Element element){
  String effectiveProfile=profile;
  String version=null;
  if (profile.contains(""String_Node_Str"")) {
    effectiveProfile=profile.substring(0,profile.indexOf('|') - 1);
    version=profile.substring(profile.indexOf('|'));
  }
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,effectiveProfile);
  if (warningOrError(error,errors,IssueType.INVALID,element.line(),element.col(),path,sd != null,""String_Node_Str"",profile)) {
    if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,version == null || (sd.getVersion() != null && sd.getVersion().equals(version)),""String_Node_Str"" + version + ""String_Node_Str""+ sd.getVersion()+ ""String_Node_Str""+ sd.getUrl(),profile)) {
      if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,sd.hasSnapshot(),""String_Node_Str"")) {
        if (!profiles.containsKey(sd)) {
          profiles.put(sd,new ProfileUsage(sd));
          addAncestorProfiles(sd);
          return true;
        }
      }
    }
  }
  return false;
}","public boolean addProfile(List<ValidationMessage> errors,String profile,boolean error,String path,Element element){
  String effectiveProfile=profile;
  String version=null;
  if (profile.contains(""String_Node_Str"")) {
    effectiveProfile=profile.substring(0,profile.indexOf('|'));
    version=profile.substring(profile.indexOf('|') + 1);
  }
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,effectiveProfile);
  if (warningOrError(error,errors,IssueType.INVALID,element.line(),element.col(),path,sd != null,""String_Node_Str"",profile)) {
    if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,version == null || (sd.getVersion() != null && sd.getVersion().equals(version)),""String_Node_Str"" + version + ""String_Node_Str""+ sd.getVersion()+ ""String_Node_Str""+ sd.getUrl(),profile)) {
      if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,sd.hasSnapshot(),""String_Node_Str"")) {
        if (!profiles.containsKey(sd)) {
          profiles.put(sd,new ProfileUsage(sd));
          addAncestorProfiles(sd);
          return true;
        }
      }
    }
  }
  return false;
}",0.9964726631393298
23297,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          result.getElement().remove(result.getElement().size() - 1);
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasSliceName()) {
          if (isExtension)           diffpos++;
        }
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getSliceName().equals(diffItem.getSliceName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (!outcome.getType().isEmpty() && (outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 for (                TypeRefComponent t : outcome.getType()) {
                  if (!t.getCode().equals(""String_Node_Str""))                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                }
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  if (extEd.getPath().contains(""String_Node_Str"")) {
                    ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                    extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                    markDerived(extUrlEd);
                    result.getElement().add(extUrlEd);
                  }
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          result.getElement().remove(result.getElement().size() - 1);
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasSliceName()) {
          if (isExtension)           diffpos++;
        }
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getSliceName().equals(diffItem.getSliceName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (!outcome.getType().isEmpty() && (outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 for (                TypeRefComponent t : outcome.getType()) {
                  if (!t.getCode().equals(""String_Node_Str""))                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                }
                TypeRefComponent t=outcome.getType().get(0);
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  if (extEd.getPath().contains(""String_Node_Str"")) {
                    ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                    extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                    markDerived(extUrlEd);
                    result.getElement().add(extUrlEd);
                  }
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}",0.9980960704141828
23298,"private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode().equals(""String_Node_Str"")) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getTargetProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasTargetProfile() && Utilities.isAbsoluteUrl(t.getTargetProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getTargetProfile(),null)));
      }
 else       if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getTargetProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getTargetProfile(),null)));
 else       if (t.hasTargetProfile())       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getTargetProfile(),t.getTargetProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        if (parts[0].startsWith(""String_Node_Str"") || parts[0].startsWith(""String_Node_Str""))         c.addPiece(checkForNoChange(t,gen.new Piece(parts[0],parts[1],t.getCode())));
 else         c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}","private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode() != null && t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode() != null && t.getCode().equals(""String_Node_Str"")) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getTargetProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasTargetProfile() && Utilities.isAbsoluteUrl(t.getTargetProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getTargetProfile(),null)));
      }
 else       if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getTargetProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getTargetProfile(),null)));
 else       if (t.hasTargetProfile())       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getTargetProfile(),t.getTargetProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        if (parts[0].startsWith(""String_Node_Str"") || parts[0].startsWith(""String_Node_Str""))         c.addPiece(checkForNoChange(t,gen.new Piece(parts[0],parts[1],t.getCode())));
 else         c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}",0.9964928331808478
23299,"private void parseExtensionElement(Sheet sheet,int row,StructureDefinition sd,ElementDefinition exe,boolean nested) throws Exception {
  String[] card=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
  if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))   throw new Exception(""String_Node_Str"" + sheet.getColumn(row,""String_Node_Str"") + ""String_Node_Str""+ getLocation(row));
  exe.setMin(Integer.parseInt(card[0]));
  exe.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(s))   exe.addCondition(s);
  exe.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  exe.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  exe.setComment(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  doAliases(sheet,row,exe);
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=exe.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  exe.setShort(sheet.getColumn(row,""String_Node_Str""));
  exe.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (nested && exe.getIsModifier())   throw new Exception(""String_Node_Str"" + getLocation(row));
  exe.getType().add(new TypeRefComponent().setCode(""String_Node_Str""));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
    ElementDefinition exv=new ElementDefinition();
    exv.setPath(exe.getPath() + ""String_Node_Str"");
    sd.getDifferential().getElement().add(exv);
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(bindingName)) {
      ElementDefinitionBindingComponent binding=bindings.get(bindingName);
      if (binding == null && !bindingName.startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
      exv.setBinding(binding);
    }
    s=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(s))     exv.setMaxLength(Integer.parseInt(s));
    TypeParser tp=new TypeParser();
    List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,metadata(""String_Node_Str""),context,false);
    exv.getType().addAll(tp.convert(context,exv.getPath(),types,false,exv));
    if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))     exv.addExample().setLabel(""String_Node_Str"").setValue(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),exv));
  }
}","private void parseExtensionElement(Sheet sheet,int row,StructureDefinition sd,ElementDefinition exe,boolean nested) throws Exception {
  String[] card=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
  if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))   throw new Exception(""String_Node_Str"" + sheet.getColumn(row,""String_Node_Str"") + ""String_Node_Str""+ getLocation(row));
  exe.setMin(Integer.parseInt(card[0]));
  exe.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(s))   exe.addCondition(s);
  exe.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  exe.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  exe.setComment(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  doAliases(sheet,row,exe);
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=exe.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  exe.setShort(sheet.getColumn(row,""String_Node_Str""));
  exe.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (nested && exe.getIsModifier())   throw new Exception(""String_Node_Str"" + getLocation(row));
  exe.getType().add(new TypeRefComponent().setCode(""String_Node_Str""));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
    ElementDefinition exv=new ElementDefinition();
    TypeParser tp=new TypeParser();
    List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,metadata(""String_Node_Str""),context,false);
    exv.getType().addAll(tp.convert(context,exv.getPath(),types,false,exv));
    if (exv.getType().size() > 1) {
      exv.setPath(exe.getPath() + ""String_Node_Str"");
      for (      TypeRefComponent t : exv.getType()) {
        if (!t.getCode().equals(""String_Node_Str"")) {
          exv.setPath(exe.getPath() + ""String_Node_Str"");
          break;
        }
      }
    }
 else {
      TypeRefComponent type=exv.getType().get(0);
      String name=type.getCode();
      exv.setPath(exe.getPath() + ""String_Node_Str"" + name.substring(0,1).toUpperCase()+ name.substring(1));
    }
    sd.getDifferential().getElement().add(exv);
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(bindingName)) {
      ElementDefinitionBindingComponent binding=bindings.get(bindingName);
      if (binding == null && !bindingName.startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
      exv.setBinding(binding);
    }
    s=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(s))     exv.setMaxLength(Integer.parseInt(s));
    if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))     exv.addExample().setLabel(""String_Node_Str"").setValue(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),exv));
  }
}",0.7158315298818045
23300,"private int processExtension(ElementDefn extensions,Sheet sheet,int row,Definitions definitions,String uri,Profile ap,List<ValidationMessage> issues,Map<String,Invariant> invariants) throws Exception {
  StructureDefinition ex=new StructureDefinition();
  ex.setUserData(ToolResourceUtilities.NAME_RES_IG,ig == null ? ""String_Node_Str"" : ig.getCode());
  ex.setUserData(""String_Node_Str"",ap);
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(version);
  if (ap.hasMetadata(""String_Node_Str""))   ToolingExtensions.addIntegerExtension(ex,ToolingExtensions.EXT_FMM_LEVEL,Integer.parseInt(ap.getFmmLevel()));
  if (ap.hasMetadata(""String_Node_Str""))   ToolingExtensions.setCodeExtension(ex,ToolingExtensions.EXT_WORKGROUP,ap.getWg());
  ToolResourceUtilities.updateUsage(ex,ap.getCategory());
  String name=sheet.getColumn(row,""String_Node_Str"");
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  ap.getExtensions().add(ex);
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str""))     for (    String s : sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""))     ex.addContextInvariant(s);
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      if (definitions != null)       definitions.checkContextValid(ex.getContextType(),c,this.name);
      ex.addContext(c);
    }
  }
  ex.setTitle(sheet.getColumn(row,""String_Node_Str""));
  ElementDefn exe=new ElementDefn();
  exe.setName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefn exu=new ElementDefn();
  exu.setName(""String_Node_Str"");
  exe.getElements().add(exu);
  exu.setFixed(new UriType(ex.getUrl()));
  exu.getTypes().add(new TypeRef().setName(""String_Node_Str""));
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (inv.getContext().equals(name))       exe.getInvariants().put(inv.getId(),inv);
    }
  }
  parseExtensionElement(sheet,row,definitions,exe,false);
  String sl=exe.getShortDefn();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getTitle());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(preProcessMarkdown(exe.getDefinition(),""String_Node_Str""));
  ex.setPublisher(ap.metadata(""String_Node_Str""));
  if (ap.hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,ap.metadata(""String_Node_Str"")));
  if (ap.hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(ap.metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (ap.hasMetadata(""String_Node_Str""))   ex.setStatus(PublicationStatus.fromCode(ap.metadata(""String_Node_Str"")));
  row++;
  if (ig == null || ig.isCore()) {
    if (!ex.getUrl().startsWith(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str"");
  }
 else {
    if (!ex.getUrl().startsWith(""String_Node_Str"" + ig.getCode() + ""String_Node_Str""))     throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ ig.getCode()+ ""String_Node_Str"");
  }
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefn p=findContext(exe,n.substring(0,n.lastIndexOf(""String_Node_Str"")),""String_Node_Str"" + name);
    ElementDefn child=new ElementDefn();
    p.getElements().add(child);
    child.setName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,definitions,child,true);
    if (invariants != null) {
      for (      Invariant inv : invariants.values()) {
        if (inv.getContext().equals(n))         child.getInvariants().put(inv.getId(),inv);
      }
    }
    row++;
  }
  ProfileGenerator gen=new ProfileGenerator(definitions,null,pkp,null,null,null,fpUsages);
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,pkp);
  gen.convertElements(exe,ex,null);
  ex.getDifferential().getElementFirstRep().getType().clear();
  utils.setIds(ex,false);
  StructureDefinition base=definitions != null ? definitions.getSnapShotForType(""String_Node_Str"") : this.context.getProfiles().get(""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.generateSnapshot(base,ex,ex.getUrl(),ex.getName());
  utils.setIds(ex,true);
  this.context.seeExtensionDefinition(""String_Node_Str"",ex);
  return row;
}","private int processExtension(ElementDefn extensions,Sheet sheet,int row,Definitions definitions,String uri,Profile ap,List<ValidationMessage> issues,Map<String,Invariant> invariants) throws Exception {
  StructureDefinition ex=new StructureDefinition();
  ex.setUserData(ToolResourceUtilities.NAME_RES_IG,ig == null ? ""String_Node_Str"" : ig.getCode());
  ex.setUserData(""String_Node_Str"",ap);
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(version);
  if (ap.hasMetadata(""String_Node_Str""))   ToolingExtensions.addIntegerExtension(ex,ToolingExtensions.EXT_FMM_LEVEL,Integer.parseInt(ap.getFmmLevel()));
  if (ap.hasMetadata(""String_Node_Str""))   ToolingExtensions.setCodeExtension(ex,ToolingExtensions.EXT_WORKGROUP,ap.getWg());
  ToolResourceUtilities.updateUsage(ex,ap.getCategory());
  String name=sheet.getColumn(row,""String_Node_Str"");
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  ap.getExtensions().add(ex);
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str""))     for (    String s : sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""))     ex.addContextInvariant(s);
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      if (definitions != null)       definitions.checkContextValid(ex.getContextType(),c.trim(),this.name);
      ex.addContext(c.trim());
    }
  }
  ex.setTitle(sheet.getColumn(row,""String_Node_Str""));
  ElementDefn exe=new ElementDefn();
  exe.setName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefn exu=new ElementDefn();
  exu.setName(""String_Node_Str"");
  exe.getElements().add(exu);
  exu.setFixed(new UriType(ex.getUrl()));
  exu.getTypes().add(new TypeRef().setName(""String_Node_Str""));
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (inv.getContext().equals(name))       exe.getInvariants().put(inv.getId(),inv);
    }
  }
  parseExtensionElement(sheet,row,definitions,exe,false);
  String sl=exe.getShortDefn();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getTitle());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(preProcessMarkdown(exe.getDefinition(),""String_Node_Str""));
  ex.setPublisher(ap.metadata(""String_Node_Str""));
  if (ap.hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,ap.metadata(""String_Node_Str"")));
  if (ap.hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(ap.metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (ap.hasMetadata(""String_Node_Str""))   ex.setStatus(PublicationStatus.fromCode(ap.metadata(""String_Node_Str"")));
  row++;
  if (ig == null || ig.isCore()) {
    if (!ex.getUrl().startsWith(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str"");
  }
 else {
    if (!ex.getUrl().startsWith(""String_Node_Str"" + ig.getCode() + ""String_Node_Str""))     throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ ig.getCode()+ ""String_Node_Str"");
  }
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefn p=findContext(exe,n.substring(0,n.lastIndexOf(""String_Node_Str"")),""String_Node_Str"" + name);
    ElementDefn child=new ElementDefn();
    p.getElements().add(child);
    child.setName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,definitions,child,true);
    if (invariants != null) {
      for (      Invariant inv : invariants.values()) {
        if (inv.getContext().equals(n))         child.getInvariants().put(inv.getId(),inv);
      }
    }
    row++;
  }
  ProfileGenerator gen=new ProfileGenerator(definitions,null,pkp,null,null,null,fpUsages);
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,pkp);
  gen.convertElements(exe,ex,null);
  ex.getDifferential().getElementFirstRep().getType().clear();
  utils.setIds(ex,false);
  StructureDefinition base=definitions != null ? definitions.getSnapShotForType(""String_Node_Str"") : this.context.getProfiles().get(""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.generateSnapshot(base,ex,ex.getUrl(),ex.getName());
  utils.setIds(ex,true);
  this.context.seeExtensionDefinition(""String_Node_Str"",ex);
  return row;
}",0.9986681887366818
23301,"private String itemList(List l){
  String s=""String_Node_Str"";
  for (int i=0; i < l.size(); i++) {
    Object o=l.get(i);
    String val=""String_Node_Str"";
    if (o instanceof StringType) {
      val=((StringType)o).getValue();
    }
 else     if (o instanceof UriType) {
      val=((UriType)o).getValue();
    }
 else     if (o instanceof IdType) {
      val=((IdType)o).getValue();
    }
 else     if (o instanceof Enumeration<?>) {
      val=o.toString();
    }
 else     if (o instanceof TypeRefComponent) {
      TypeRefComponent t=(TypeRefComponent)o;
      val=t.getCode() + (t.getProfile() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getProfile() + ""String_Node_Str"") + (t.getTargetProfile() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getTargetProfile() + ""String_Node_Str"")+ (t.getAggregation() == null || t.getAggregation().isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + itemList(t.getAggregation()) + ""String_Node_Str"");
    }
 else     if (o instanceof Coding) {
      Coding t=(Coding)o;
      val=(t.getSystem() == null ? ""String_Node_Str"" : t.getSystem()) + (t.getCode() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getCode()) + (t.getDisplay() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getDisplay() + ""String_Node_Str"");
    }
 else     if (o instanceof ElementDefinitionConstraintComponent) {
      ElementDefinitionConstraintComponent c=(ElementDefinitionConstraintComponent)o;
      val=c.getKey() + ""String_Node_Str"" + c.getHuman()+ ""String_Node_Str""+ c.getExpression()+ ""String_Node_Str"";
    }
 else {
      val=o.toString();
      val=val.substring(val.indexOf(""String_Node_Str"") + 1);
      val=val.substring(0,val.indexOf(""String_Node_Str""));
    }
    s=s + val + (i == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return s;
}","private String itemList(List l){
  StringBuilder s=new StringBuilder();
  for (int i=0; i < l.size(); i++) {
    Object o=l.get(i);
    String val=""String_Node_Str"";
    if (o instanceof StringType) {
      val=((StringType)o).getValue();
    }
 else     if (o instanceof UriType) {
      val=((UriType)o).getValue();
    }
 else     if (o instanceof IdType) {
      val=((IdType)o).getValue();
    }
 else     if (o instanceof Enumeration<?>) {
      val=o.toString();
    }
 else     if (o instanceof TypeRefComponent) {
      TypeRefComponent t=(TypeRefComponent)o;
      val=t.getCode() + (t.getProfile() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getProfile() + ""String_Node_Str"") + (t.getTargetProfile() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getTargetProfile() + ""String_Node_Str"")+ (t.getAggregation() == null || t.getAggregation().isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + itemList(t.getAggregation()) + ""String_Node_Str"");
    }
 else     if (o instanceof Coding) {
      Coding t=(Coding)o;
      val=(t.getSystem() == null ? ""String_Node_Str"" : t.getSystem()) + (t.getCode() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getCode()) + (t.getDisplay() == null ? ""String_Node_Str"" : ""String_Node_Str"" + t.getDisplay() + ""String_Node_Str"");
    }
 else     if (o instanceof ElementDefinitionConstraintComponent) {
      ElementDefinitionConstraintComponent c=(ElementDefinitionConstraintComponent)o;
      val=c.getKey() + ""String_Node_Str"" + c.getHuman()+ ""String_Node_Str""+ c.getExpression()+ ""String_Node_Str"";
    }
 else     if (o instanceof ElementDefinitionSlicingDiscriminatorComponent) {
      ElementDefinitionSlicingDiscriminatorComponent c=(ElementDefinitionSlicingDiscriminatorComponent)o;
      val=c.getType().toCode() + ""String_Node_Str"" + c.getPath()+ ""String_Node_Str"";
    }
 else {
      val=o.toString();
      val=val.substring(val.indexOf(""String_Node_Str"") + 1);
      val=val.substring(0,val.indexOf(""String_Node_Str""));
    }
    s=s.append(val);
    if (i == 0)     s.append(""String_Node_Str"");
  }
  return s.toString();
}",0.8988186954288649
23302,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          if (skipSlicingElement && i == 0) {
            ndc=ndc + 1;
            if (ndc > ndl)             continue;
          }
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasSliceName()) {
          if (isExtension)           diffpos++;
        }
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getSliceName().equals(diffItem.getSliceName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (!outcome.getType().isEmpty() && (outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 for (                TypeRefComponent t : outcome.getType()) {
                  if (!t.getCode().equals(""String_Node_Str""))                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                }
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  if (extEd.getPath().contains(""String_Node_Str"")) {
                    ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                    extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                    markDerived(extUrlEd);
                    result.getElement().add(extUrlEd);
                  }
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasSliceName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setSliceName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSliceName())         outcome.setSliceName(diffMatches.get(0).getSliceName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1) {
              for (              TypeRefComponent t : outcome.getType()) {
                if (!t.getCode().equals(""String_Node_Str""))                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              }
            }
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getSliceName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        boolean skipSlicingElement=false;
        if (!diffMatches.get(0).hasSliceName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          result.getElement().remove(result.getElement().size() - 1);
          skipSlicingElement=true;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (dSlice.hasOrderedElement() && bSlice.hasOrderedElement() && !orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasSliceName()) {
          if (isExtension)           diffpos++;
        }
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getSliceName().equals(outcome.getSliceName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getSliceName().equals(diffItem.getSliceName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,currentBase.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (!outcome.getType().isEmpty() && (outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"")&& isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 for (                TypeRefComponent t : outcome.getType()) {
                  if (!t.getCode().equals(""String_Node_Str""))                   throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                }
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  if (extEd.getPath().contains(""String_Node_Str"")) {
                    ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                    extUrlEd.setPath(fixedPath(outcome.getPath(),extUrlEd.getPath()));
                    markDerived(extUrlEd);
                    result.getElement().add(extUrlEd);
                  }
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
  int i=0;
  for (  ElementDefinition e : result.getElement()) {
    i++;
    if (e.hasMinElement() && e.getMinElement().getValue() == null)     throw new Error(""String_Node_Str"");
  }
}",0.9936953807740324
23303,"private void load(String type) throws Exception {
  dlog(LogCategory.PROGRESS,""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(LogCategory.PROGRESS,""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
          r.getResource().setUserData(""String_Node_Str"",r.getElement());
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        MetadataResource bc=(MetadataResource)r.getResource();
        boolean altered=false;
        if (businessVersion != null) {
          if (!bc.hasVersion()) {
            bc.setVersion(businessVersion);
            altered=true;
          }
 else           if (!bc.getVersion().equals(businessVersion))           throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ bc.getVersion()+ ""String_Node_Str""+ businessVersion);
        }
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(PublicationStatus.DRAFT);
        }
        if (altered)         r.setElement(convertToElement(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}","private void load(String type) throws Exception {
  dlog(LogCategory.PROGRESS,""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(LogCategory.PROGRESS,""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
          r.getResource().setUserData(""String_Node_Str"",r.getElement());
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        MetadataResource bc=(MetadataResource)r.getResource();
        boolean altered=false;
        if (businessVersion != null) {
          if (!bc.hasVersion()) {
            altered=true;
          }
 else           if (!bc.getVersion().equals(businessVersion))           System.out.println(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ bc.getVersion()+ ""String_Node_Str""+ businessVersion);
          bc.setVersion(businessVersion);
        }
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(PublicationStatus.DRAFT);
        }
        if (altered)         r.setElement(convertToElement(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}",0.8928046989720999
23304,"private void log(String name,List<Base> contents){
  if (hostServices == null || !hostServices.Log(name,contents)) {
    if (log.length() > 0)     log.append(""String_Node_Str"");
    log.append(name);
    log.append(""String_Node_Str"");
    boolean first=true;
    for (    Base b : contents) {
      if (first)       first=false;
 else       log.append(""String_Node_Str"");
      log.append(convertToString(b));
    }
  }
}","private void log(String name,List<Base> contents){
  if (hostServices == null || !hostServices.log(name,contents)) {
    if (log.length() > 0)     log.append(""String_Node_Str"");
    log.append(name);
    log.append(""String_Node_Str"");
    boolean first=true;
    for (    Base b : contents) {
      if (first)       first=false;
 else       log.append(""String_Node_Str"");
      log.append(convertToString(b));
    }
  }
}",0.997624703087886
23305,"private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    String s=convertToString(item);
    if (hostServices != null) {
      Base res=hostServices.resolveReference(context.appInfo,s);
      if (res != null)       result.add(res);
    }
  }
  return result;
}","private List<Base> funcResolve(ExecutionContext context,List<Base> focus,ExpressionNode exp){
  List<Base> result=new ArrayList<Base>();
  for (  Base item : focus) {
    if (hostServices != null) {
      String s=convertToString(item);
      if (item.fhirType().equals(""String_Node_Str"")) {
        Property p=item.getChildByName(""String_Node_Str"");
        if (p.hasValues())         s=convertToString(p.getValues().get(0));
      }
      Base res=null;
      if (s.startsWith(""String_Node_Str"")) {
        String id=s.substring(1);
        Property p=context.resource.getChildByName(""String_Node_Str"");
        for (        Base c : p.getValues()) {
          if (id.equals(c.getIdBase()))           res=c;
        }
      }
 else       res=hostServices.resolveReference(context.appInfo,s);
      if (res != null)       result.add(res);
    }
  }
  return result;
}",0.4186795491143317
23306,"@Override public IResourceValidator makeValidator(IWorkerContext ctxts) throws FHIRException {
  return new InstanceValidator(ctxts);
}","@Override public IResourceValidator makeValidator(IWorkerContext ctxt) throws FHIRException {
  return new InstanceValidator(ctxt,null);
}",0.9743589743589745
23307,"private void validateCnt(String cnt,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(Utilities.path(TestingUtilities.home(),""String_Node_Str"",""String_Node_Str""));
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  if (!TestingUtilities.silent)   System.out.println(""String_Node_Str"");
  ByteArrayInputStream file=new ByteArrayInputStream(cnt.getBytes(Charsets.UTF_8));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(null,errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      if (!TestingUtilities.silent)       System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
  if (!TestingUtilities.silent)   System.out.println(val.reportTimes());
}","private void validateCnt(String cnt,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(Utilities.path(TestingUtilities.home(),""String_Node_Str"",""String_Node_Str""));
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  if (!TestingUtilities.silent)   System.out.println(""String_Node_Str"");
  ByteArrayInputStream file=new ByteArrayInputStream(cnt.getBytes(Charsets.UTF_8));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context,null);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(null,errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      if (!TestingUtilities.silent)       System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
  if (!TestingUtilities.silent)   System.out.println(val.reportTimes());
}",0.9977283053157656
23308,"private void validate(String path,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(Utilities.path(TestingUtilities.home(),""String_Node_Str"",""String_Node_Str""));
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  if (!TestingUtilities.silent)   System.out.println(""String_Node_Str"" + path);
  FileInputStream file=new FileInputStream(Utilities.path(TestingUtilities.home(),path));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(null,errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      if (!TestingUtilities.silent)       System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
}","private void validate(String path,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(Utilities.path(TestingUtilities.home(),""String_Node_Str"",""String_Node_Str""));
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  if (!TestingUtilities.silent)   System.out.println(""String_Node_Str"" + path);
  FileInputStream file=new FileInputStream(Utilities.path(TestingUtilities.home(),path));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context,null);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(null,errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      if (!TestingUtilities.silent)       System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
}",0.9975926817525276
23309,"public void execute() throws Exception {
  InstanceValidator v=new InstanceValidator(SimpleWorkerContext.fromPack(pack.getAbsolutePath()));
  Document reg=parseXml(registry.getAbsolutePath());
  List<Element> tests=new ArrayList<Element>();
  XMLUtil.getNamedChildren(reg.getDocumentElement(),""String_Node_Str"",tests);
  String dir=Utilities.getDirectoryForFile(registry.getAbsolutePath()) + File.separator;
  for (  Element test : tests) {
    executeCase(v,dir,test);
  }
}","public void execute() throws Exception {
  InstanceValidator v=new InstanceValidator(SimpleWorkerContext.fromPack(pack.getAbsolutePath()),null);
  Document reg=parseXml(registry.getAbsolutePath());
  List<Element> tests=new ArrayList<Element>();
  XMLUtil.getNamedChildren(reg.getDocumentElement(),""String_Node_Str"",tests);
  String dir=Utilities.getDirectoryForFile(registry.getAbsolutePath()) + File.separator;
  for (  Element test : tests) {
    executeCase(v,dir,test);
  }
}",0.9947643979057592
23310,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setDisplay(src.getTitle());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getKeyword())   tgt.addCode(convertCoding(t));
  if (src.hasFhirVersion())   tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  if (src.hasBaseDefinition())   tgt.setBaseDefinition(src.getBaseDefinition());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  if (src.hasSnapshot())   tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setDisplay(src.getTitle());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getKeyword())   tgt.addCode(convertCoding(t));
  if (src.hasFhirVersion())   tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  if (src.hasBaseDefinition())   tgt.setBaseDefinition(src.getBaseDefinition());
  if (src.hasType() && src.getDerivation() == org.hl7.fhir.dstu3.model.StructureDefinition.TypeDerivationRule.CONSTRAINT)   tgt.setBaseType(src.getType());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  if (src.hasSnapshot())   tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}",0.9585866261398176
23311,"private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathReverse(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}","private Cell generateDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,boolean logicalModel,boolean allInvariants,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (logicalModel && ToolingExtensions.hasExtension(profile,""String_Node_Str"")) {
      if (root) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(profile,""String_Node_Str""),null));
      }
 else       if (!root && ToolingExtensions.hasExtension(definition,""String_Node_Str"") && !ToolingExtensions.readStringExtension(definition,""String_Node_Str"").equals(ToolingExtensions.readStringExtension(profile,""String_Node_Str""))) {
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(definition,""String_Node_Str""),null));
      }
    }
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"",definition.getContentReference()),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),translate(""String_Node_Str"",""String_Node_Str"",ed.getPath()),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (definition != null && definition.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(definition.getShortElement(),gen.new Piece(null,gt(definition.getShortElement()),null)));
      }
 else       if (fallback != null && fallback != null && fallback.hasShort()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.addPiece(checkForNoChange(fallback.getShortElement(),gen.new Piece(null,gt(fallback.getShortElement()),null)));
      }
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathReverse(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),egt(binding.getStrengthElement()),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!inv.hasSource() || allInvariants) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,gt(inv.getHumanElement()),null)));
          }
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,translate(""String_Node_Str"",""String_Node_Str"") + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
      }
    }
  }
  return c;
}",0.9697005632967683
23312,"private Cell generateGridDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getContentReference(),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),""String_Node_Str"" + ed.getPath(),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathReverse(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),binding.getStrength().toCode(),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getHuman(),null)));
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,""String_Node_Str"" + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
        if (definition.getComments() != null) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
          c.addPiece(gen.new Piece(""String_Node_Str""));
          c.addMarkdown(definition.getComments());
        }
      }
    }
  }
  return c;
}","private Cell generateGridDescription(HierarchicalTableGenerator gen,Row row,ElementDefinition definition,ElementDefinition fallback,boolean used,String baseURL,String url,StructureDefinition profile,String corePath,String imagePath,boolean root,ElementDefinition valueDefn) throws IOException {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.hasContentReference()) {
      ElementDefinition ed=getElementByName(profile.getSnapshot().getElement(),definition.getContentReference());
      if (ed == null)       c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + definition.getContentReference(),null));
 else       c.getPieces().add(gen.new Piece(""String_Node_Str"" + ed.getPath(),""String_Node_Str"" + ed.getPath(),null));
    }
    if (definition.getPath().endsWith(""String_Node_Str"") && definition.hasFixed()) {
      c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"" + buildJson(definition.getFixed()) + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
    }
 else {
      if (url != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        String ref=null;
        if (ed != null) {
          String p=ed.getUserString(""String_Node_Str"");
          if (p != null) {
            ref=p.startsWith(""String_Node_Str"") || igmode ? p : Utilities.pathReverse(corePath,p);
          }
        }
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,fullUrl,null));
      }
      if (definition.hasSlicing()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
      }
      if (definition != null) {
        ElementDefinitionBindingComponent binding=null;
        if (valueDefn != null && valueDefn.hasBinding() && !valueDefn.getBinding().isEmpty())         binding=valueDefn.getBinding();
 else         if (definition.hasBinding())         binding=definition.getBinding();
        if (binding != null && !binding.isEmpty()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          BindingResolution br=pkp.resolveBinding(profile,binding,definition.getPath());
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(binding,gen.new Piece(br.url == null ? null : Utilities.isAbsoluteUrl(br.url) || !pkp.prependLinks() ? br.url : corePath + br.url,br.display,null)));
          if (binding.hasStrength()) {
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(null,""String_Node_Str"",null)));
            c.getPieces().add(checkForNoChange(binding,gen.new Piece(corePath + ""String_Node_Str"" + binding.getStrength().toCode(),binding.getStrength().toCode(),binding.getStrength().getDefinition())));
            c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          }
        }
        for (        ElementDefinitionConstraintComponent inv : definition.getConstraint()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(inv,gen.new Piece(null,inv.getHuman(),null)));
        }
        if (definition.hasFixed()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getFixed(),gen.new Piece(null,buildJson(definition.getFixed()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasPattern()) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getPattern(),gen.new Piece(null,buildJson(definition.getPattern()),null).addStyle(""String_Node_Str"")));
        }
 else         if (definition.hasExample()) {
          for (          ElementDefinitionExampleComponent ex : definition.getExample()) {
            if (!c.getPieces().isEmpty())             c.addPiece(gen.new Piece(""String_Node_Str""));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,""String_Node_Str"" + (""String_Node_Str"".equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + ex.getLabel() + ""String_Node_Str"") + ""String_Node_Str"",null).addStyle(""String_Node_Str"")));
            c.getPieces().add(checkForNoChange(ex,gen.new Piece(null,buildJson(ex.getValue()),null).addStyle(""String_Node_Str"")));
          }
        }
        if (definition.hasMaxLength() && definition.getMaxLength() != 0) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str"")));
          c.getPieces().add(checkForNoChange(definition.getMaxLengthElement(),gen.new Piece(null,Integer.toString(definition.getMaxLength()),null).addStyle(""String_Node_Str"")));
        }
        if (profile != null) {
          for (          StructureDefinitionMappingComponent md : profile.getMapping()) {
            if (md.hasExtension(ToolingExtensions.EXT_TABLE_NAME)) {
              ElementDefinitionMappingComponent map=null;
              for (              ElementDefinitionMappingComponent m : definition.getMapping())               if (m.getIdentity().equals(md.getIdentity()))               map=m;
              if (map != null) {
                for (int i=0; i < definition.getMapping().size(); i++) {
                  c.addPiece(gen.new Piece(""String_Node_Str""));
                  c.getPieces().add(gen.new Piece(null,ToolingExtensions.readStringExtension(md,ToolingExtensions.EXT_TABLE_NAME) + ""String_Node_Str"" + map.getMap(),null));
                }
              }
            }
          }
        }
        if (definition.getComments() != null) {
          if (!c.getPieces().isEmpty())           c.addPiece(gen.new Piece(""String_Node_Str""));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
          c.addPiece(gen.new Piece(""String_Node_Str""));
          c.addMarkdown(definition.getComments());
        }
      }
    }
  }
  return c;
}",0.9627795178090174
23313,"private void checkPrimitive(List<ValidationMessage> errors,String path,String type,ElementDefinition context,Element e,StructureDefinition profile){
  if (isBlank(e.primitiveValue())) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.hasChildren(),""String_Node_Str"");
    return;
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(e.primitiveValue()) || ""String_Node_Str"".equals(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().equals(e.primitiveValue().trim()),""String_Node_Str"");
  }
  if (!type.equalsIgnoreCase(""String_Node_Str"") && e.hasPrimitiveValue()) {
    if (rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().length() > 0,""String_Node_Str"")) {
      warning(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().trim().equals(e.primitiveValue()),""String_Node_Str"");
    }
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!hasTime(e.primitiveValue()) || hasTimeZone(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"") && e.primitiveValue() != null) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,passesCodeWhitespaceRules(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (context.hasBinding() && e.primitiveValue() != null) {
    checkPrimitiveBinding(errors,path,type,context,e,profile);
  }
  if (type.equals(""String_Node_Str"")) {
    XhtmlNode xhtml=e.getXhtml();
    if (xhtml != null) {
      String ns=xhtml.getNsDecl();
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,FormatUtilities.XHTML_NS.equals(ns),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNS(errors,e,path,xhtml.getChildNodes());
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(xhtml.getName()),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNames(errors,e,path,xhtml.getChildNodes());
    }
  }
  if (context.hasFixed())   checkFixedValue(errors,path,e,context.getFixed(),context.getSliceName(),null);
}","private void checkPrimitive(List<ValidationMessage> errors,String path,String type,ElementDefinition context,Element e,StructureDefinition profile) throws FHIRException {
  if (isBlank(e.primitiveValue())) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.hasChildren(),""String_Node_Str"");
    return;
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(e.primitiveValue()) || ""String_Node_Str"".equals(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().equals(e.primitiveValue().trim()),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxLength() || context.getMaxLength() == 0 || e.primitiveValue().length() <= context.getMaxLength(),""String_Node_Str"" + context.getMaxLength());
  }
  if (type.equalsIgnoreCase(""String_Node_Str"") && e.hasPrimitiveValue()) {
    if (rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().length() > 0,""String_Node_Str"")) {
      warning(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().trim().equals(e.primitiveValue()),""String_Node_Str"");
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxLength() || context.getMaxLength() == 0 || e.primitiveValue().length() <= context.getMaxLength(),""String_Node_Str"" + context.getMaxLength());
    }
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!hasTime(e.primitiveValue()) || hasTimeZone(e.primitiveValue()),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxLength() || context.getMaxLength() == 0 || e.primitiveValue().length() <= context.getMaxLength(),""String_Node_Str"" + context.getMaxLength());
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxLength() || context.getMaxLength() == 0 || e.primitiveValue().length() <= context.getMaxLength(),""String_Node_Str"" + context.getMaxLength());
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxValueIntegerType() || !context.getMaxValueIntegerType().hasValue() || (context.getMaxValueIntegerType().getValue() >= new Integer(e.getValue()).intValue()),""String_Node_Str"" + (context.hasMaxValueIntegerType() ? context.getMaxValueIntegerType() : ""String_Node_Str""));
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMinValueIntegerType() || !context.getMinValueIntegerType().hasValue() || (context.getMinValueIntegerType().getValue() <= new Integer(e.getValue()).intValue()),""String_Node_Str"" + (context.hasMinValueIntegerType() ? context.getMinValueIntegerType() : ""String_Node_Str""));
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"") && e.primitiveValue() != null) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,passesCodeWhitespaceRules(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!context.hasMaxLength() || context.getMaxLength() == 0 || e.primitiveValue().length() <= context.getMaxLength(),""String_Node_Str"" + context.getMaxLength());
  }
  if (context.hasBinding() && e.primitiveValue() != null) {
    checkPrimitiveBinding(errors,path,type,context,e,profile);
  }
  if (type.equals(""String_Node_Str"")) {
    XhtmlNode xhtml=e.getXhtml();
    if (xhtml != null) {
      String ns=xhtml.getNsDecl();
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,FormatUtilities.XHTML_NS.equals(ns),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNS(errors,e,path,xhtml.getChildNodes());
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(xhtml.getName()),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNames(errors,e,path,xhtml.getChildNodes());
    }
  }
  if (context.hasFixed())   checkFixedValue(errors,path,e,context.getFixed(),context.getSliceName(),null);
}",0.6979881115683585
23314,"private void readBindings(Sheet sheet) throws Exception {
  for (int row=0; row < sheet.rows.size(); row++) {
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (Utilities.noString(bindingName) || bindingName.startsWith(""String_Node_Str""))     continue;
    ElementDefinitionBindingComponent bs=new ElementDefinitionBindingComponent();
    bindings.put(bindingName,bs);
    bs.setDescription(sheet.getColumn(row,""String_Node_Str""));
    bs.setStrength(readBindingStrength(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str"") && !Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
      bs.addExtension().setUrl(""String_Node_Str"").setValue(new Reference().setReference(sheet.getColumn(row,""String_Node_Str"")));
    }
    String type=sheet.getColumn(row,""String_Node_Str"");
    if (type == null || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      ValueSet vs=ValueSetUtilities.makeShareable(new ValueSet());
      vs.setId(ref.substring(1));
      vs.setUrl(base + ""String_Node_Str"" + ref.substring(1));
      bundle.addEntry().setResource(vs).setFullUrl(vs.getUrl());
      vs.setName(bindingName);
      String oid=sheet.getColumn(row,""String_Node_Str"");
      if (!Utilities.noString(oid))       ValueSetUtilities.setOID(vs,oid);
      String st=sheet.getColumn(row,""String_Node_Str"");
      if (Utilities.noString(st))       st=""String_Node_Str"";
      vs.getStatusElement().setValueAsString(st);
      String ws=sheet.getColumn(row,""String_Node_Str"");
      if (ws != null)       vs.getContactFirstRep().getTelecomFirstRep().setSystem(ContactPointSystem.URL).setValue(ws);
      String em=sheet.getColumn(row,""String_Node_Str"");
      if (em != null)       vs.getContactFirstRep().addTelecom().setSystem(ContactPointSystem.EMAIL).setValue(em);
      vs.setCopyright(sheet.getColumn(row,""String_Node_Str""));
      vs.setDescription(sheet.getColumn(row,""String_Node_Str""));
      Sheet css=xls.getSheets().get(ref.substring(1));
      if (css == null)       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str""+ ref+ ""String_Node_Str"");
      loadValueSet(vs,css,ref.substring(1));
    }
 else     if (type.equals(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"" + getLocation(row));
    }
 else     if (type.equals(""String_Node_Str"")) {
      bs.setValueSet(new Reference(sheet.getColumn(row,""String_Node_Str"")));
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      String id=ref.startsWith(""String_Node_Str"") ? ref.substring(9) : ref;
      if (!ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"")) {
        valuesetsToLoad.put(id,ref);
        ref=Utilities.pathReverse(base,""String_Node_Str"",id);
      }
      bs.setValueSet(new Reference(ref));
    }
 else {
      throw new Exception(""String_Node_Str"" + type + getLocation(row));
    }
  }
}","private void readBindings(Sheet sheet) throws Exception {
  for (int row=0; row < sheet.rows.size(); row++) {
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (Utilities.noString(bindingName) || bindingName.startsWith(""String_Node_Str""))     continue;
    ElementDefinitionBindingComponent bs=new ElementDefinitionBindingComponent();
    bindings.put(bindingName,bs);
    bs.setDescription(sheet.getColumn(row,""String_Node_Str""));
    bs.setStrength(readBindingStrength(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str"") && !Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
      bs.addExtension().setUrl(""String_Node_Str"").setValue(new Reference().setReference(sheet.getColumn(row,""String_Node_Str"")));
    }
    String type=sheet.getColumn(row,""String_Node_Str"");
    if (type == null || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      ValueSet vs=ValueSetUtilities.makeShareable(new ValueSet());
      vs.setId(ref.substring(1));
      vs.setUrl(base + ""String_Node_Str"" + ref.substring(1));
      bs.setValueSet(new Reference(""String_Node_Str"" + ref.substring(1)));
      bundle.addEntry().setResource(vs).setFullUrl(vs.getUrl());
      vs.setName(bindingName);
      String oid=sheet.getColumn(row,""String_Node_Str"");
      if (!Utilities.noString(oid))       ValueSetUtilities.setOID(vs,oid);
      String st=sheet.getColumn(row,""String_Node_Str"");
      if (Utilities.noString(st))       st=""String_Node_Str"";
      vs.getStatusElement().setValueAsString(st);
      String ws=sheet.getColumn(row,""String_Node_Str"");
      if (ws != null)       vs.getContactFirstRep().getTelecomFirstRep().setSystem(ContactPointSystem.URL).setValue(ws);
      String em=sheet.getColumn(row,""String_Node_Str"");
      if (em != null)       vs.getContactFirstRep().addTelecom().setSystem(ContactPointSystem.EMAIL).setValue(em);
      vs.setCopyright(sheet.getColumn(row,""String_Node_Str""));
      vs.setDescription(sheet.getColumn(row,""String_Node_Str""));
      Sheet css=xls.getSheets().get(ref.substring(1));
      if (css == null)       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str""+ ref+ ""String_Node_Str"");
      loadValueSet(vs,css,ref.substring(1));
    }
 else     if (type.equals(""String_Node_Str"")) {
      throw new Error(""String_Node_Str"" + getLocation(row));
    }
 else     if (type.equals(""String_Node_Str"")) {
      bs.setValueSet(new Reference(sheet.getColumn(row,""String_Node_Str"")));
    }
 else     if (type.equals(""String_Node_Str"")) {
      String ref=sheet.getColumn(row,""String_Node_Str"");
      String id=ref.startsWith(""String_Node_Str"") ? ref.substring(9) : ref;
      if (!ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"") && !ref.startsWith(""String_Node_Str"")) {
        valuesetsToLoad.put(id,ref);
        ref=Utilities.pathReverse(base,""String_Node_Str"",id);
      }
      bs.setValueSet(new Reference(ref));
    }
 else {
      throw new Exception(""String_Node_Str"" + type + getLocation(row));
    }
  }
}",0.9880744156463668
23315,"private List<ElementDefinition> getDiffMatches(StructureDefinitionDifferentialComponent context,String path,int start,int end,String profileName,String url) throws DefinitionException {
  List<ElementDefinition> result=new ArrayList<ElementDefinition>();
  for (int i=start; i <= end; i++) {
    String statedPath=context.getElement().get(i).getPath();
    if (statedPath.equals(path) || (path.endsWith(""String_Node_Str"") && statedPath.length() > path.length() - 2 && statedPath.substring(0,path.length() - 3).equals(path.substring(0,path.length() - 3)) && !statedPath.substring(path.length()).contains(""String_Node_Str""))) {
      result.add(context.getElement().get(i));
    }
  }
  return result;
}","private List<ElementDefinition> getDiffMatches(StructureDefinitionDifferentialComponent context,String path,int start,int end,String profileName,String url) throws DefinitionException {
  List<ElementDefinition> result=new ArrayList<ElementDefinition>();
  for (int i=start; i <= end; i++) {
    String statedPath=context.getElement().get(i).getPath();
    if (statedPath.equals(path) || (path.endsWith(""String_Node_Str"") && statedPath.length() > path.length() - 2 && statedPath.substring(0,path.length() - 3).equals(path.substring(0,path.length() - 3)) && (statedPath.length() < path.length() || !statedPath.substring(path.length()).contains(""String_Node_Str"")))) {
      result.add(context.getElement().get(i));
    }
  }
  return result;
}",0.9715869715869716
23316,"@Override public boolean supportsSystem(String system) throws TerminologyServiceException {
  if (codeSystems.containsKey(system))   return true;
 else   if (nonSupportedCodeSystems.contains(system))   return false;
 else   if (system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"")|| system.startsWith(""String_Node_Str""))   return false;
 else {
    if (noTerminologyServer)     return false;
    if (bndCodeSystems == null) {
      try {
        log(""String_Node_Str"" + system);
        bndCodeSystems=txServer.fetchFeed(txServer.getAddress() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        if (canRunWithoutTerminology) {
          noTerminologyServer=true;
          logger.logMessage(""String_Node_Str"");
          return false;
        }
 else         throw new TerminologyServiceException(e);
      }
    }
    if (bndCodeSystems != null) {
      for (      BundleEntryComponent be : bndCodeSystems.getEntry()) {
        CodeSystem cs=(CodeSystem)be.getResource();
        if (!codeSystems.containsKey(cs.getUrl())) {
          codeSystems.put(cs.getUrl(),null);
        }
      }
    }
    if (codeSystems.containsKey(system))     return true;
  }
  nonSupportedCodeSystems.add(system);
  return false;
}","@Override public boolean supportsSystem(String system) throws TerminologyServiceException {
  if (codeSystems.containsKey(system))   return true;
 else   if (nonSupportedCodeSystems.contains(system))   return false;
 else   if (system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"") || system.startsWith(""String_Node_Str"")|| system.startsWith(""String_Node_Str""))   return false;
 else {
    if (noTerminologyServer)     return false;
    if (bndCodeSystems == null) {
      try {
        log(""String_Node_Str"" + system);
        bndCodeSystems=txServer.fetchFeed(txServer.getAddress() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        if (canRunWithoutTerminology) {
          noTerminologyServer=true;
          log(""String_Node_Str"");
          return false;
        }
 else         throw new TerminologyServiceException(e);
      }
    }
    if (bndCodeSystems != null) {
      for (      BundleEntryComponent be : bndCodeSystems.getEntry()) {
        CodeSystem cs=(CodeSystem)be.getResource();
        if (!codeSystems.containsKey(cs.getUrl())) {
          codeSystems.put(cs.getUrl(),null);
        }
      }
    }
    if (codeSystems.containsKey(system))     return true;
  }
  nonSupportedCodeSystems.add(system);
  return false;
}",0.9945525291828794
23317,"private void log(String message){
  if (logger != null)   logger.logMessage(message);
}","private void log(String message){
  if (logger != null)   logger.logMessage(message);
 else   System.out.println(message);
}",0.8246445497630331
23318,"public void setDefinitions(Definitions definitions) throws Exception {
  this.definitions=definitions;
  breadCrumbManager.setDefinitions(definitions);
  FHIRToolingClient client;
  try {
    client=new FHIRToolingClient(tsServer);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getLocalizedMessage());
    client=null;
  }
  workerContext=new BuildWorkerContext(definitions,client,definitions.getCodeSystems(),definitions.getValuesets(),conceptMaps,profiles);
  workerContext.setDefinitions(definitions);
  workerContext.initTS(Utilities.path(folders.rootDir,""String_Node_Str""),tsServer);
  vsValidator=new ValueSetValidator(workerContext,definitions.getVsFixups(),definitions.getStyleExemptions());
  breadCrumbManager.setContext(workerContext);
}","public void setDefinitions(Definitions definitions) throws Exception {
  this.definitions=definitions;
  breadCrumbManager.setDefinitions(definitions);
  FHIRToolingClient client;
  try {
    client=new FHIRToolingClient(tsServer);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getLocalizedMessage());
    client=null;
  }
  workerContext=new BuildWorkerContext(definitions,client,definitions.getCodeSystems(),definitions.getValuesets(),conceptMaps,profiles);
  workerContext.setDefinitions(definitions);
  workerContext.setLogger(this);
  workerContext.initTS(Utilities.path(folders.rootDir,""String_Node_Str""),tsServer);
  vsValidator=new ValueSetValidator(workerContext,definitions.getVsFixups(),definitions.getStyleExemptions());
  breadCrumbManager.setContext(workerContext);
}",0.979179810725552
23319,"public JsonObject generate(ElementDefn root,String version,String genDate) throws Exception {
  enums.clear();
  enumDefs.clear();
  JsonObject schema=new JsonObject();
  JsonObject context=new JsonObject();
  schema.add(""String_Node_Str"",context);
  schema.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName());
  scanTypes(root,root);
  generateType(root,root.getName(),root,true,context);
  return schema;
}","public JsonObject generate(ElementDefn root,String version,String genDate) throws Exception {
  enums.clear();
  enumDefs.clear();
  JsonObject schema=new JsonObject();
  JsonObject context=new JsonObject();
  schema.add(""String_Node_Str"",context);
  scanTypes(root,root);
  generateType(root,root.getName(),root,true,context);
  return schema;
}",0.9010416666666666
23320,"private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  new ProfileUtilities(context,null,null).setIds(sd,false);
  return sd;
}","private StructureDefinition parseProfileSheet(String n,List<String> namedSheets,List<ValidationMessage> issues,boolean logical) throws Exception {
  StructureDefinition sd=new StructureDefinition();
  Map<String,ElementDefinitionConstraintComponent> invariants=new HashMap<String,ElementDefinitionConstraintComponent>();
  String name=logical ? ""String_Node_Str"" : n + ""String_Node_Str"";
  sheet=loadSheet(name);
  if (sheet != null)   invariants=readInvariants(sheet,n,name);
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefinition e=processLine(sd,sheet,row,invariants,true,row == 0);
    if (e != null)     for (    TypeRefComponent t : e.getType()) {
      if (t.hasProfile() && !""String_Node_Str"".equals(t.getCode()) && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  if (logical) {
    sd.setKind(StructureDefinitionKind.LOGICAL);
    sd.setId(sd.getDifferential().getElement().get(0).getPath());
    sd.getDifferential().getElementFirstRep().getType().clear();
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    sd.setBaseDefinition(""String_Node_Str"");
    sd.setDerivation(TypeDerivationRule.SPECIALIZATION);
    sd.setAbstract(false);
  }
 else {
    sd.setKind(StructureDefinitionKind.RESOURCE);
    sd.setDerivation(TypeDerivationRule.CONSTRAINT);
    sd.setAbstract(false);
    sd.setId(n.toLowerCase());
    sd.setType(sd.getDifferential().getElementFirstRep().getPath());
    if (sd.getDifferential().getElementFirstRep().getType().size() == 1 && sd.getDifferential().getElementFirstRep().getType().get(0).hasTargetProfile())     sd.setBaseDefinition(sd.getDifferential().getElementFirstRep().getType().get(0).getTargetProfile());
 else     sd.setBaseDefinition(""String_Node_Str"" + sd.getType());
    if (!context.getResourceNames().contains(sd.getType()) && !context.getTypeNames().contains(sd.getType()))     throw new Exception(""String_Node_Str"" + sd.getType());
  }
  sd.getDifferential().getElementFirstRep().getType().clear();
  sd.setUrl(base + ""String_Node_Str"" + sd.getId());
  bundle.addEntry().setResource(sd).setFullUrl(sd.getUrl());
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(sheet,row,metadata(""String_Node_Str""),issues,invariants);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(sd,sheet,true);
  }
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (Utilities.noString(inv.getUserString(""String_Node_Str"")))       throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
 else {
        ElementDefinition ed=findContext(sd,inv.getUserString(""String_Node_Str""),""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        ed.getConstraint().add(inv);
        if (Utilities.noString(inv.getXpath())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
        if (Utilities.noString(inv.getExpression())) {
          throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str"");
        }
 else         if (inv.getXpath().contains(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + sd.getId() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getHuman()+ ""String_Node_Str""+ inv.getXpath());
      }
    }
  }
  sd.setName(sd.getDifferential().getElementFirstRep().getShort());
  if (!sd.hasName())   sd.setName(""String_Node_Str"" + sd.getId());
  sd.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   sd.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   sd.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   sd.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   sd.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
 else   sd.setStatus(PublicationStatus.DRAFT);
  new ProfileUtilities(context,null,null).setIds(sd,false);
  return sd;
}",0.9946074201898188
23321,"private boolean runJekyll() throws IOException, InterruptedException {
  DefaultExecutor exec=new DefaultExecutor();
  exec.setExitValue(0);
  MyFilterHandler pumpHandler=new MyFilterHandler();
  PumpStreamHandler pump=new PumpStreamHandler(pumpHandler);
  exec.setStreamHandler(pump);
  exec.setWorkingDirectory(new File(tempDir));
  try {
    if (SystemUtils.IS_OS_WINDOWS)     exec.execute(org.apache.commons.exec.CommandLine.parse(""String_Node_Str"" + outputDir));
 else     exec.execute(org.apache.commons.exec.CommandLine.parse(""String_Node_Str"" + outputDir));
  }
 catch (  IOException ioex) {
    log(""String_Node_Str"" + pumpHandler.getBufferString());
    throw ioex;
  }
  return true;
}","private boolean runJekyll() throws IOException, InterruptedException {
  DefaultExecutor exec=new DefaultExecutor();
  exec.setExitValue(0);
  MyFilterHandler pumpHandler=new MyFilterHandler();
  PumpStreamHandler pump=new PumpStreamHandler(pumpHandler);
  exec.setStreamHandler(pump);
  exec.setWorkingDirectory(new File(tempDir));
  try {
    if (SystemUtils.IS_OS_WINDOWS)     exec.execute(org.apache.commons.exec.CommandLine.parse(""String_Node_Str"" + outputDir + ""String_Node_Str""));
 else     exec.execute(org.apache.commons.exec.CommandLine.parse(""String_Node_Str"" + outputDir + ""String_Node_Str""));
  }
 catch (  IOException ioex) {
    log(""String_Node_Str"" + pumpHandler.getBufferString());
    throw ioex;
  }
  return true;
}",0.9720670391061452
23322,"@Override public void handleCodeSystem(CodeSystem cs,ValueSet vs){
  cs.setId(vs.getId());
  cslist.add(cs);
}","@Override public void handleCodeSystem(CodeSystem cs,ValueSet vs){
  cs.setId(vs.getId());
  cs.setValueSet(vs.getUrl());
  cslist.add(cs);
}",0.8764940239043825
23323,"private ResourceWrapper fetchResource(BaseWrapper subject){
  if (resolver == null)   return null;
  String url=subject.getChildByName(""String_Node_Str"").value().toString();
  ResourceWithReference rr=resolver.resolve(url);
  return rr.resource;
}","private ResourceWrapper fetchResource(BaseWrapper subject){
  if (resolver == null)   return null;
  String url=subject.getChildByName(""String_Node_Str"").value().toString();
  ResourceWithReference rr=resolver.resolve(url);
  return rr == null ? null : rr.resource;
}",0.9610894941634242
23324,"private boolean isType(Base item,String type){
  if (item.fhirType().equals(type))   return true;
  return false;
}","private boolean isType(Base item,String type){
  if (type.equals(item.fhirType()))   return true;
  return false;
}",0.8956521739130435
23325,"private void analyseTarget(String ruleId,TransformContext context,VariablesForProfiling vars,StructureMap map,StructureMapGroupRuleTargetComponent tgt,String tv,TargetWriter tw,List<StructureDefinition> profiles,String sliceName) throws Exception {
  VariableForProfiling var=null;
  if (tgt.hasContext()) {
    var=vars.get(VariableMode.OUTPUT,tgt.getContext());
    if (var == null)     throw new Exception(""String_Node_Str"" + ruleId + ""String_Node_Str""+ tgt.getContext());
    if (!tgt.hasElement())     throw new Exception(""String_Node_Str"" + ruleId + ""String_Node_Str"");
  }
  TypeDetails type=null;
  if (tgt.hasTransform()) {
    type=analyseTransform(context,map,tgt,var,vars);
  }
 else   type=new TypeDetails(CollectionStatus.SINGLETON,var.property.baseProperty.getChild(tgt.getElement(),tgt.getElement()).getType(tgt.getElement()));
  if (tgt.getTransform() == StructureMapTransform.CREATE) {
    String s=getParamString(vars,tgt.getParameter().get(0));
    if (worker.getResourceNames().contains(s))     tw.newResource(tgt.getVariable(),s);
  }
 else {
    boolean mapsSrc=false;
    for (    StructureMapGroupRuleTargetParameterComponent p : tgt.getParameter()) {
      Type pr=p.getValue();
      if (pr instanceof IdType && ((IdType)pr).asStringValue().equals(tv))       mapsSrc=true;
    }
    if (mapsSrc) {
      if (var == null)       throw new Error(""String_Node_Str"" + ruleId + ""String_Node_Str"");
      tw.valueAssignment(tgt.getContext(),var.property.getPath() + ""String_Node_Str"" + tgt.getElement()+ getTransformSuffix(tgt.getTransform()));
    }
 else     if (tgt.hasContext()) {
      if (isSignificantElement(var.property,tgt.getElement())) {
        String td=describeTransform(tgt);
        if (td != null)         tw.keyAssignment(tgt.getContext(),var.property.getPath() + ""String_Node_Str"" + tgt.getElement()+ ""String_Node_Str""+ td);
      }
    }
  }
  Type fixed=generateFixedValue(tgt);
  PropertyWithType prop=updateProfile(var,tgt.getElement(),type,map,profiles,sliceName,fixed,tgt);
  if (tgt.hasVariable())   if (tgt.hasElement())   vars.add(VariableMode.OUTPUT,tgt.getVariable(),prop);
 else   vars.add(VariableMode.OUTPUT,tgt.getVariable(),prop);
}","private void analyseTarget(String ruleId,TransformContext context,VariablesForProfiling vars,StructureMap map,StructureMapGroupRuleTargetComponent tgt,String tv,TargetWriter tw,List<StructureDefinition> profiles,String sliceName) throws Exception {
  VariableForProfiling var=null;
  if (tgt.hasContext()) {
    var=vars.get(VariableMode.OUTPUT,tgt.getContext());
    if (var == null)     throw new Exception(""String_Node_Str"" + ruleId + ""String_Node_Str""+ tgt.getContext());
    if (!tgt.hasElement())     throw new Exception(""String_Node_Str"" + ruleId + ""String_Node_Str"");
  }
  TypeDetails type=null;
  if (tgt.hasTransform()) {
    type=analyseTransform(context,map,tgt,var,vars);
  }
 else {
    Property vp=var.property.baseProperty.getChild(tgt.getElement(),tgt.getElement());
    if (vp == null)     throw new Exception(""String_Node_Str"" + tgt.getElement() + ""String_Node_Str""+ var.property.path);
    type=new TypeDetails(CollectionStatus.SINGLETON,vp.getType(tgt.getElement()));
  }
  if (tgt.getTransform() == StructureMapTransform.CREATE) {
    String s=getParamString(vars,tgt.getParameter().get(0));
    if (worker.getResourceNames().contains(s))     tw.newResource(tgt.getVariable(),s);
  }
 else {
    boolean mapsSrc=false;
    for (    StructureMapGroupRuleTargetParameterComponent p : tgt.getParameter()) {
      Type pr=p.getValue();
      if (pr instanceof IdType && ((IdType)pr).asStringValue().equals(tv))       mapsSrc=true;
    }
    if (mapsSrc) {
      if (var == null)       throw new Error(""String_Node_Str"" + ruleId + ""String_Node_Str"");
      tw.valueAssignment(tgt.getContext(),var.property.getPath() + ""String_Node_Str"" + tgt.getElement()+ getTransformSuffix(tgt.getTransform()));
    }
 else     if (tgt.hasContext()) {
      if (isSignificantElement(var.property,tgt.getElement())) {
        String td=describeTransform(tgt);
        if (td != null)         tw.keyAssignment(tgt.getContext(),var.property.getPath() + ""String_Node_Str"" + tgt.getElement()+ ""String_Node_Str""+ td);
      }
    }
  }
  Type fixed=generateFixedValue(tgt);
  PropertyWithType prop=updateProfile(var,tgt.getElement(),type,map,profiles,sliceName,fixed,tgt);
  if (tgt.hasVariable())   if (tgt.hasElement())   vars.add(VariableMode.OUTPUT,tgt.getVariable(),prop);
 else   vars.add(VariableMode.OUTPUT,tgt.getVariable(),prop);
}",0.933716305788776
23326,"private List<Variables> processSource(String ruleId,TransformContext context,Variables vars,StructureMapGroupRuleSourceComponent src) throws FHIRException {
  Base b=vars.get(VariableMode.INPUT,src.getContext());
  if (b == null)   throw new FHIRException(""String_Node_Str"" + src.getContext());
  if (src.hasCondition()) {
    ExpressionNode expr=(ExpressionNode)src.getUserData(MAP_WHERE_EXPRESSION);
    if (expr == null) {
      expr=fpe.parse(src.getCondition());
      src.setUserData(MAP_WHERE_EXPRESSION,expr);
    }
    if (!fpe.evaluateToBoolean(vars,null,b,expr))     return null;
  }
  if (src.hasCheck()) {
    ExpressionNode expr=(ExpressionNode)src.getUserData(MAP_WHERE_CHECK);
    if (expr == null) {
      expr=fpe.parse(src.getCheck());
      src.setUserData(MAP_WHERE_CHECK,expr);
    }
    if (!fpe.evaluateToBoolean(null,b,expr))     throw new FHIRException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
  }
  List<Base> items=new ArrayList<Base>();
  if (!src.hasElement())   items.add(b);
 else {
    getChildrenByName(b,src.getElement(),items);
    if (items.size() == 0 && src.hasDefaultValue())     items.add(src.getDefaultValue());
  }
  if (src.hasType()) {
    List<Base> remove=new ArrayList<Base>();
    for (    Base item : items) {
      if (!isType(item,src.getType())) {
        remove.add(item);
      }
    }
    items.removeAll(remove);
  }
  if (src.hasListMode()) {
switch (src.getListMode()) {
case FIRST:
      Base bt=items.get(0);
    items.clear();
  items.add(bt);
break;
case NOTFIRST:
if (items.size() > 1) items.remove(0);
break;
case LAST:
bt=items.get(items.size() - 1);
items.clear();
items.add(bt);
break;
case NOTLAST:
if (items.size() > 1) items.remove(items.size() - 1);
break;
case ONLYONE:
if (items.size() > 1) items.clear();
break;
case NULL:
}
}
List<Variables> result=new ArrayList<Variables>();
for (Base r : items) {
Variables v=vars.copy();
if (src.hasVariable()) v.add(VariableMode.INPUT,src.getVariable(),r);
result.add(v);
}
return result;
}","private List<Variables> processSource(String ruleId,TransformContext context,Variables vars,StructureMapGroupRuleSourceComponent src) throws FHIRException {
  Base b=vars.get(VariableMode.INPUT,src.getContext());
  if (b == null)   throw new FHIRException(""String_Node_Str"" + src.getContext());
  if (src.hasCondition()) {
    ExpressionNode expr=(ExpressionNode)src.getUserData(MAP_WHERE_EXPRESSION);
    if (expr == null) {
      expr=fpe.parse(src.getCondition());
      src.setUserData(MAP_WHERE_EXPRESSION,expr);
    }
    if (!fpe.evaluateToBoolean(vars,null,b,expr))     return null;
  }
  if (src.hasCheck()) {
    ExpressionNode expr=(ExpressionNode)src.getUserData(MAP_WHERE_CHECK);
    if (expr == null) {
      expr=fpe.parse(src.getCheck());
      src.setUserData(MAP_WHERE_CHECK,expr);
    }
    if (!fpe.evaluateToBoolean(null,b,expr))     throw new FHIRException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
  }
  List<Base> items=new ArrayList<Base>();
  if (!src.hasElement())   items.add(b);
 else {
    getChildrenByName(b,src.getElement(),items);
    if (items.size() == 0 && src.hasDefaultValue())     items.add(src.getDefaultValue());
  }
  if (src.hasType()) {
    List<Base> remove=new ArrayList<Base>();
    for (    Base item : items) {
      if (item != null && !isType(item,src.getType())) {
        remove.add(item);
      }
    }
    items.removeAll(remove);
  }
  if (src.hasListMode()) {
switch (src.getListMode()) {
case FIRST:
      Base bt=items.get(0);
    items.clear();
  items.add(bt);
break;
case NOTFIRST:
if (items.size() > 1) items.remove(0);
break;
case LAST:
bt=items.get(items.size() - 1);
items.clear();
items.add(bt);
break;
case NOTLAST:
if (items.size() > 1) items.remove(items.size() - 1);
break;
case ONLYONE:
if (items.size() > 1) items.clear();
break;
case NULL:
}
}
List<Variables> result=new ArrayList<Variables>();
for (Base r : items) {
Variables v=vars.copy();
if (src.hasVariable()) v.add(VariableMode.INPUT,src.getVariable(),r);
result.add(v);
}
return result;
}",0.996039603960396
23327,"private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !u.startsWith(""String_Node_Str"") && !(r.getResource() instanceof CodeSystem))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getAbsolutePath());
  generateValidationPack();
}","private void generateZips() throws Exception {
  SpecMapManager map=new SpecMapManager(Constants.VERSION,Constants.REVISION,execTime,igpkp.getCanonical());
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      String u=igpkp.getCanonical() + r.getUrlTail();
      if (r.getResource() != null && r.getResource() instanceof MetadataResource) {
        String uc=((MetadataResource)r.getResource()).getUrl();
        if (uc != null && !u.equals(uc) && !u.startsWith(""String_Node_Str"") && !(r.getResource() instanceof CodeSystem) && !(r.getResource() instanceof ImplementationGuide))         throw new Exception(""String_Node_Str"" + u + ""String_Node_Str""+ uc);
      }
      map.path(u,igpkp.getLinkFor(r));
    }
  }
  for (  String s : new File(outputDir).list()) {
    if (s.endsWith(""String_Node_Str"")) {
      map.target(s);
    }
  }
  File df=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  df.deleteOnExit();
  map.save(df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.XML))   generateDefinitions(FhirFormat.XML,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.JSON))   generateDefinitions(FhirFormat.JSON,df.getAbsolutePath());
  if (generateExampleZip(FhirFormat.TURTLE))   generateDefinitions(FhirFormat.TURTLE,df.getAbsolutePath());
  generateValidationPack();
}",0.9798708697303457
23328,"public static String readStringExtension(DomainResource c,String uri){
  Extension ex=getExtension(c,uri);
  if (ex == null)   return null;
  if ((ex.getValue() instanceof StringType))   return ((StringType)ex.getValue()).getValue();
  if ((ex.getValue() instanceof UriType))   return ((UriType)ex.getValue()).getValue();
  if (ex.getValue() instanceof CodeType)   return ((CodeType)ex.getValue()).getValue();
  if ((ex.getValue() instanceof MarkdownType))   return ((MarkdownType)ex.getValue()).getValue();
  return null;
}","public static String readStringExtension(DomainResource c,String uri){
  Extension ex=getExtension(c,uri);
  if (ex == null)   return null;
  if ((ex.getValue() instanceof StringType))   return ((StringType)ex.getValue()).getValue();
  if ((ex.getValue() instanceof UriType))   return ((UriType)ex.getValue()).getValue();
  if (ex.getValue() instanceof CodeType)   return ((CodeType)ex.getValue()).getValue();
  if (ex.getValue() instanceof IntegerType)   return ((IntegerType)ex.getValue()).asStringValue();
  if ((ex.getValue() instanceof MarkdownType))   return ((MarkdownType)ex.getValue()).getValue();
  return null;
}",0.9136878814298168
23329,"private void genExtensionRow(ImplementationGuideDefn ig,StringBuilder s,StructureDefinition ed) throws Exception {
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"" + ed.getUserString(""String_Node_Str"") + ""String_Node_Str""+ ed.getId()+ ""String_Node_Str"");
  s.append(""String_Node_Str"" + Utilities.escapeXml(ed.getName()) + ""String_Node_Str"");
  s.append(""String_Node_Str"" + displayExtensionCardinality(ed) + ""String_Node_Str"");
  s.append(""String_Node_Str"" + determineExtensionType(ed) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
  boolean first=true;
  if (ed.getContextType() == ExtensionContext.RESOURCE) {
    for (    StringType t : ed.getContext()) {
      if (first)       first=false;
 else       s.append(""String_Node_Str"");
      String ref=Utilities.oidRoot(t.getValue());
      if (ref.startsWith(""String_Node_Str""))       ref=ref.substring(1);
      if (definitions.hasResource(ref))       s.append(""String_Node_Str"" + ref.toLowerCase() + ""String_Node_Str""+ t.getValue()+ ""String_Node_Str"");
 else       s.append(t.getValue());
    }
  }
 else   if (ed.getContextType() == ExtensionContext.DATATYPE) {
    for (    StringType t : ed.getContext()) {
      if (first)       first=false;
 else       s.append(""String_Node_Str"");
      String ref=Utilities.oidRoot(t.getValue());
      if (ref.startsWith(""String_Node_Str""))       ref=ref.substring(1);
      if (definitions.hasElementDefn(ref)) {
        s.append(""String_Node_Str"" + definitions.getSrcFile(ref) + ""String_Node_Str""+ Utilities.oidRoot(t.getValue())+ ""String_Node_Str""+ t.getValue()+ ""String_Node_Str"");
      }
 else       s.append(t.getValue());
    }
  }
 else   throw new Error(""String_Node_Str"");
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"" + ToolingExtensions.readStringExtension(ed,ToolingExtensions.EXT_FMM_LEVEL) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
}","private void genExtensionRow(ImplementationGuideDefn ig,StringBuilder s,StructureDefinition ed) throws Exception {
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"" + ed.getUserString(""String_Node_Str"") + ""String_Node_Str""+ ed.getId()+ ""String_Node_Str"");
  s.append(""String_Node_Str"" + Utilities.escapeXml(ed.getName()) + ""String_Node_Str"");
  s.append(""String_Node_Str"" + displayExtensionCardinality(ed) + ""String_Node_Str"");
  s.append(""String_Node_Str"" + determineExtensionType(ed) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
  boolean first=true;
  if (ed.getContextType() == ExtensionContext.RESOURCE) {
    for (    StringType t : ed.getContext()) {
      if (first)       first=false;
 else       s.append(""String_Node_Str"");
      String ref=Utilities.oidRoot(t.getValue());
      if (ref.startsWith(""String_Node_Str""))       ref=ref.substring(1);
      if (definitions.hasResource(ref))       s.append(""String_Node_Str"" + ref.toLowerCase() + ""String_Node_Str""+ t.getValue()+ ""String_Node_Str"");
 else       s.append(t.getValue());
    }
  }
 else   if (ed.getContextType() == ExtensionContext.DATATYPE) {
    for (    StringType t : ed.getContext()) {
      if (first)       first=false;
 else       s.append(""String_Node_Str"");
      String ref=Utilities.oidRoot(t.getValue());
      if (ref.startsWith(""String_Node_Str""))       ref=ref.substring(1);
      if (definitions.hasElementDefn(ref)) {
        s.append(""String_Node_Str"" + definitions.getSrcFile(ref) + ""String_Node_Str""+ Utilities.oidRoot(t.getValue())+ ""String_Node_Str""+ t.getValue()+ ""String_Node_Str"");
      }
 else       s.append(t.getValue());
    }
  }
 else   throw new Error(""String_Node_Str"");
  s.append(""String_Node_Str"");
  String fmm=ToolingExtensions.readStringExtension(ed,ToolingExtensions.EXT_FMM_LEVEL);
  s.append(""String_Node_Str"" + (Utilities.noString(fmm) ? ""String_Node_Str"" : fmm) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
}",0.9676915059927044
23330,"public String processMarkdown(String location,String text) throws Exception {
  try {
    if (text == null)     return ""String_Node_Str"";
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    while (text.contains(""String_Node_Str"")) {
      String left=text.substring(0,text.indexOf(""String_Node_Str""));
      String linkText=text.substring(text.indexOf(""String_Node_Str"") + 3,text.indexOf(""String_Node_Str""));
      String right=text.substring(text.indexOf(""String_Node_Str"") + 3);
      String url=getBySpecMap(linkText);
      String[] parts=linkText.split(""String_Node_Str"");
      if (url == null && parts[0].contains(""String_Node_Str"")) {
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,parts[0]);
        if (ed == null)         throw new Error(""String_Node_Str"" + parts[0]);
        url=ed.getUserData(""String_Node_Str"") + ""String_Node_Str"";
      }
      if (Utilities.noString(url)) {
        String[] paths=parts[0].split(""String_Node_Str"");
        StructureDefinition p=new ProfileUtilities(context,null,null).getProfile(null,paths[0]);
        if (p != null) {
          String suffix=(paths.length > 1) ? ""String_Node_Str"" + parts[0] : ""String_Node_Str"";
          if (p.getUserData(""String_Node_Str"") == null)           url=paths[0].toLowerCase() + suffix;
 else           url=p.getUserData(""String_Node_Str"") + suffix;
        }
 else {
          throw new Exception(""String_Node_Str"" + linkText + ""String_Node_Str"");
        }
      }
      text=left + ""String_Node_Str"" + linkText+ ""String_Node_Str""+ url+ ""String_Node_Str""+ right;
    }
    if (!Utilities.noString(prefix)) {
      int i=text.length() - 3;
      while (i > 0) {
        if (text.substring(i,i + 2).equals(""String_Node_Str"")) {
          if (!text.substring(i,i + 7).equals(""String_Node_Str"") && !text.substring(i,i + 7).equals(""String_Node_Str"")) {
            text=text.substring(0,i) + ""String_Node_Str"" + prefix+ text.substring(i + 2);
          }
        }
        i--;
      }
    }
    String s=Processor.process(checkEscape(text));
    return s;
  }
 catch (  Throwable e) {
    throw new Exception(""String_Node_Str"" + text,e);
  }
}","public String processMarkdown(String location,String text) throws Exception {
  try {
    if (text == null)     return ""String_Node_Str"";
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    while (text.contains(""String_Node_Str"")) {
      String left=text.substring(0,text.indexOf(""String_Node_Str""));
      String linkText=text.substring(text.indexOf(""String_Node_Str"") + 3,text.indexOf(""String_Node_Str""));
      String right=text.substring(text.indexOf(""String_Node_Str"") + 3);
      String url=getBySpecMap(linkText);
      String[] parts=linkText.split(""String_Node_Str"");
      if (url == null && parts[0].contains(""String_Node_Str"")) {
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,parts[0]);
        if (ed == null)         throw new Error(""String_Node_Str"" + parts[0]);
        url=ed.getUserData(""String_Node_Str"") + ""String_Node_Str"";
      }
      if (Utilities.noString(url)) {
        String[] paths=parts[0].split(""String_Node_Str"");
        StructureDefinition p=new ProfileUtilities(context,null,null).getProfile(null,paths[0]);
        if (p != null) {
          String suffix=(paths.length > 1) ? ""String_Node_Str"" + parts[0] : ""String_Node_Str"";
          if (p.getUserData(""String_Node_Str"") == null)           url=paths[0].toLowerCase() + suffix;
 else           url=p.getUserData(""String_Node_Str"") + suffix;
        }
 else {
          throw new Exception(""String_Node_Str"" + linkText + ""String_Node_Str"");
        }
      }
      text=left + ""String_Node_Str"" + linkText+ ""String_Node_Str""+ url+ ""String_Node_Str""+ right;
    }
    if (!Utilities.noString(prefix)) {
      int i=text.length() - 3;
      while (i > 0) {
        if (text.substring(i,i + 2).equals(""String_Node_Str"") && i + 7 <= text.length()) {
          if (!text.substring(i,i + 7).equals(""String_Node_Str"") && !text.substring(i,i + 7).equals(""String_Node_Str"")) {
            text=text.substring(0,i) + ""String_Node_Str"" + prefix+ text.substring(i + 2);
          }
        }
        i--;
      }
    }
    String s=Processor.process(checkEscape(text));
    return s;
  }
 catch (  Throwable e) {
    throw new Exception(""String_Node_Str"" + text,e);
  }
}",0.9628610729023384
23331,"public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  if (src.hasSearchType()) {
    tgt.setType(src.getSearchType().toCode());
    tgt.setType(""String_Node_Str"");
  }
 else   tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  if (src.hasSearchType()) {
    tgt.setType(src.getSearchType().toCode());
    tgt.setType(""String_Node_Str"");
  }
 else   tgt.setType(src.getType());
  if (src.hasProfile())   tgt.setProfile(convertReference(src.getProfile()));
  if (src.hasBinding())   tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.9800166527893422
23332,"public org.hl7.fhir.dstu2.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition tgt=new org.hl7.fhir.dstu2.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  if (src.hasSliceName())   tgt.setName(src.getSliceName());
 else   tgt.setName(src.getId());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setNameReference(src.getContentReference().substring(1));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition tgt=new org.hl7.fhir.dstu2.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  if (src.hasSliceName())   tgt.setName(src.getSliceName());
 else   tgt.setName(src.getId());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  if (src.hasSlicing())   tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  if (src.hasBase())   tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setNameReference(src.getContentReference().substring(1));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  if (src.hasBinding())   tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}",0.9838803651194408
23333,"public org.hl7.fhir.dstu2.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition tgt=new org.hl7.fhir.dstu2.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getPurpose());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setNotes(src.getComment());
  tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  if (src.getType())   for (  org.hl7.fhir.dstu3.model.CodeType t : src.getResource())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition tgt=new org.hl7.fhir.dstu2.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getPurpose());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setNotes(src.getComment());
  if (src.hasBase())   tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  if (src.getType())   for (  org.hl7.fhir.dstu3.model.CodeType t : src.getResource())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.9929506545820744
23334,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  if (src.hasProfile())   tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}",0.9922077922077922
23335,"public org.hl7.fhir.dstu2.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.CapabilityStatement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance tgt=new org.hl7.fhir.dstu2.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getPurpose());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.CapabilityStatement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance tgt=new org.hl7.fhir.dstu2.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasDate())   tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getPurpose());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  if (src.hasImplementation())   tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}",0.9921419518377692
23336,"public org.hl7.fhir.dstu2.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ContactPoint tgt=new org.hl7.fhir.dstu2.model.ContactPoint();
  copyElement(src,tgt);
  tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ContactPoint tgt=new org.hl7.fhir.dstu2.model.ContactPoint();
  copyElement(src,tgt);
  if (src.hasSystem())   tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  if (src.hasPeriod())   tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9030520646319568
23337,"public org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (advisor.ignoreEntry(src))   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  org.hl7.fhir.dstu2.model.Resource res=advisor.convert(src.getResource());
  if (res == null)   res=convertResource(src.getResource());
  tgt.setResource(res);
  tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (advisor.ignoreEntry(src))   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  org.hl7.fhir.dstu2.model.Resource res=advisor.convert(src.getResource());
  if (res == null)   res=convertResource(src.getResource());
  tgt.setResource(res);
  if (src.hasSearch())   tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  if (src.hasRequest())   tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  if (src.hasResponse())   tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}",0.957
23338,"public void copyResource(org.hl7.fhir.dstu3.model.Resource src,org.hl7.fhir.dstu2.model.Resource tgt) throws FHIRException {
  tgt.setId(src.getId());
  tgt.setMeta(convertMeta(src.getMeta()));
  tgt.setImplicitRules(src.getImplicitRules());
  tgt.setLanguage(src.getLanguage());
}","public void copyResource(org.hl7.fhir.dstu3.model.Resource src,org.hl7.fhir.dstu2.model.Resource tgt) throws FHIRException {
  tgt.setId(src.getId());
  if (src.hasMeta())   tgt.setMeta(convertMeta(src.getMeta()));
  if (src.hasImplicitRules())   tgt.setImplicitRules(src.getImplicitRules());
  if (src.hasLanguage())   tgt.setLanguage(src.getLanguage());
}",0.8213166144200627
23339,"public org.hl7.fhir.dstu2.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Identifier tgt=new org.hl7.fhir.dstu2.model.Identifier();
  copyElement(src,tgt);
  tgt.setUse(convertIdentifierUse(src.getUse()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSystem(src.getSystem());
  tgt.setValue(src.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Identifier tgt=new org.hl7.fhir.dstu2.model.Identifier();
  copyElement(src,tgt);
  if (src.hasUse())   tgt.setUse(convertIdentifierUse(src.getUse()));
  if (src.hasType())   tgt.setType(convertCodeableConcept(src.getType()));
  if (src.hasSystem())   tgt.setSystem(src.getSystem());
  if (src.hasValue())   tgt.setValue(src.getValue());
  if (src.hasPeriod())   tgt.setPeriod(convertPeriod(src.getPeriod()));
  if (src.hasAssigner())   tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}",0.7414330218068536
23340,"public org.hl7.fhir.dstu2.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle tgt=new org.hl7.fhir.dstu2.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  if (src.hasTotal())   tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle tgt=new org.hl7.fhir.dstu2.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  if (src.hasTotal())   tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  if (src.hasSignature())   tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}",0.9718706047819972
23341,"private static void copyResource(org.hl7.fhir.dstu3.model.Resource src,org.hl7.fhir.dstu2016may.model.Resource tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  tgt.setMeta(convertMeta(src.getMeta()));
  if (src.hasImplicitRules())   tgt.setImplicitRules(src.getImplicitRules());
  if (src.hasLanguage())   tgt.setLanguage(src.getLanguage());
}","private static void copyResource(org.hl7.fhir.dstu3.model.Resource src,org.hl7.fhir.dstu2016may.model.Resource tgt) throws FHIRException {
  if (src.hasId())   tgt.setId(src.getId());
  if (src.hasMeta())   tgt.setMeta(convertMeta(src.getMeta()));
  if (src.hasImplicitRules())   tgt.setImplicitRules(src.getImplicitRules());
  if (src.hasLanguage())   tgt.setLanguage(src.getLanguage());
}",0.9538866930171278
23342,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  if (src.hasSliceName())   tgt.setName(src.getSliceName());
  if (src.hasLabel())   tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  if (src.hasShort())   tgt.setShort(src.getShort());
  if (src.hasDefinition())   tgt.setDefinition(src.getDefinition());
  if (src.hasComments())   tgt.setComments(src.getComments());
  if (src.hasRequirements())   tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  if (src.hasMin())   tgt.setMin(src.getMin());
  if (src.hasMax())   tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setContentReference(src.getContentReference());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  if (src.hasMeaningWhenMissing())   tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  if (src.hasMaxLength())   tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  if (src.hasMustSupport())   tgt.setMustSupport(src.getMustSupport());
  if (src.hasIsModifier())   tgt.setIsModifier(src.getIsModifier());
  if (src.hasIsSummary())   tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  if (src.hasSliceName())   tgt.setName(src.getSliceName());
  if (src.hasLabel())   tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  if (src.hasSlicing())   tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  if (src.hasShort())   tgt.setShort(src.getShort());
  if (src.hasDefinition())   tgt.setDefinition(src.getDefinition());
  if (src.hasComments())   tgt.setComments(src.getComments());
  if (src.hasRequirements())   tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  if (src.hasMin())   tgt.setMin(src.getMin());
  if (src.hasMax())   tgt.setMax(src.getMax());
  if (src.hasBase())   tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setContentReference(src.getContentReference());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  if (src.hasMeaningWhenMissing())   tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  if (src.hasMaxLength())   tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  if (src.hasMustSupport())   tgt.setMustSupport(src.getMustSupport());
  if (src.hasIsModifier())   tgt.setIsModifier(src.getIsModifier());
  if (src.hasIsSummary())   tgt.setIsSummary(src.getIsSummary());
  if (src.hasBinding())   tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}",0.9855021834061136
23343,"public static org.hl7.fhir.dstu2016may.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet tgt=new org.hl7.fhir.dstu2016may.model.ValueSet();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasName())   tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.getCompose().hasLockedDate())   tgt.setLockedDate(src.getCompose().getLockedDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasImmutable())   tgt.setImmutable(src.getImmutable());
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  if (src.hasExtensible())   tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet tgt=new org.hl7.fhir.dstu2016may.model.ValueSet();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  if (src.hasName())   tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.getCompose().hasLockedDate())   tgt.setLockedDate(src.getCompose().getLockedDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasImmutable())   tgt.setImmutable(src.getImmutable());
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  if (src.hasExtensible())   tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  if (src.hasExpansion())   tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}",0.9743863393810032
23344,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setDisplay(src.getTitle());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getKeyword())   tgt.addCode(convertCoding(t));
  if (src.hasFhirVersion())   tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  if (src.hasBaseDefinition())   tgt.setBaseDefinition(src.getBaseDefinition());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  if (src.hasUrl())   tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasVersion())   tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  if (src.hasTitle())   tgt.setDisplay(src.getTitle());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  if (src.hasExperimental())   tgt.setExperimental(src.getExperimental());
  if (src.hasPublisher())   tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactDetail t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  if (src.hasDate())   tgt.setDate(src.getDate());
  if (src.hasDescription())   tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.UsageContext t : src.getUseContext())   if (t.hasValueCodeableConcept())   tgt.addUseContext(convertCodeableConcept(t.getValueCodeableConcept()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getJurisdiction())   tgt.addUseContext(convertCodeableConcept(t));
  if (src.hasPurpose())   tgt.setRequirements(src.getPurpose());
  if (src.hasCopyright())   tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getKeyword())   tgt.addCode(convertCoding(t));
  if (src.hasFhirVersion())   tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  if (src.hasBaseDefinition())   tgt.setBaseDefinition(src.getBaseDefinition());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  if (src.hasSnapshot())   tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}",0.9923273657289002
23345,"private static void copyDomainResource(org.hl7.fhir.dstu3.model.DomainResource src,org.hl7.fhir.dstu2016may.model.DomainResource tgt) throws FHIRException {
  copyResource(src,tgt);
  tgt.setText(convertNarrative(src.getText()));
  for (  org.hl7.fhir.dstu3.model.Resource t : src.getContained())   tgt.addContained(convertResource(t));
  for (  org.hl7.fhir.dstu3.model.Extension t : src.getExtension())   tgt.addExtension(convertExtension(t));
  for (  org.hl7.fhir.dstu3.model.Extension t : src.getModifierExtension())   tgt.addModifierExtension(convertExtension(t));
}","private static void copyDomainResource(org.hl7.fhir.dstu3.model.DomainResource src,org.hl7.fhir.dstu2016may.model.DomainResource tgt) throws FHIRException {
  copyResource(src,tgt);
  if (src.hasText())   tgt.setText(convertNarrative(src.getText()));
  for (  org.hl7.fhir.dstu3.model.Resource t : src.getContained())   tgt.addContained(convertResource(t));
  for (  org.hl7.fhir.dstu3.model.Extension t : src.getExtension())   tgt.addExtension(convertExtension(t));
  for (  org.hl7.fhir.dstu3.model.Extension t : src.getModifierExtension())   tgt.addModifierExtension(convertExtension(t));
}",0.9819742489270388
23346,"private void load(String type) throws Exception {
  dlog(""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        MetadataResource bc=(MetadataResource)r.getResource();
        boolean altered=false;
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(PublicationStatus.DRAFT);
        }
        if (altered)         r.setElement(convertToElement(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          if (!(bc instanceof StructureDefinition))           context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}","private void load(String type) throws Exception {
  dlog(""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        MetadataResource bc=(MetadataResource)r.getResource();
        boolean altered=false;
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(PublicationStatus.DRAFT);
        }
        if (altered)         r.setElement(convertToElement(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}",0.9792166266986412
23347,"private ElementDefinitionConstraintComponent getConstraint(List<ElementDefinitionConstraintComponent> constraints,String id){
  for (  ElementDefinitionConstraintComponent c : constraints)   if (c.getKey().equals(id))   return c;
  return null;
}","private ElementDefinitionConstraintComponent getConstraint(List<ElementDefinitionConstraintComponent> constraints,String id){
  for (  ElementDefinitionConstraintComponent c : constraints) {
    if (c.hasKey() && c.getKey().equals(id))     return c;
    if (!c.hasKey() && c.toString().equals(id))     return c;
  }
  return null;
}",0.7923875432525952
23348,"private String invariants(List<ElementDefinitionConstraintComponent> constraints){
  if (constraints.isEmpty())   return null;
  StringBuilder s=new StringBuilder();
  if (constraints.size() > 0) {
    s.append(""String_Node_Str"");
    List<String> ids=new ArrayList<String>();
    for (    ElementDefinitionConstraintComponent id : constraints)     ids.add(id.getKey());
    Collections.sort(ids);
    boolean b=false;
    for (    String id : ids) {
      ElementDefinitionConstraintComponent inv=getConstraint(constraints,id);
      if (b)       s.append(""String_Node_Str"");
 else       b=true;
      s.append(""String_Node_Str"" + id + ""String_Node_Str""+ Utilities.escapeXml(inv.getHuman())+ ""String_Node_Str""+ Utilities.escapeXml(inv.getXpath())+ ""String_Node_Str"");
    }
  }
  return s.toString();
}","private String invariants(List<ElementDefinitionConstraintComponent> constraints){
  if (constraints.isEmpty())   return null;
  StringBuilder s=new StringBuilder();
  if (constraints.size() > 0) {
    s.append(""String_Node_Str"");
    List<String> ids=new ArrayList<String>();
    for (    ElementDefinitionConstraintComponent id : constraints)     ids.add(id.hasKey() ? id.getKey() : id.toString());
    Collections.sort(ids);
    boolean b=false;
    for (    String id : ids) {
      ElementDefinitionConstraintComponent inv=getConstraint(constraints,id);
      if (b)       s.append(""String_Node_Str"");
 else       b=true;
      s.append(""String_Node_Str"" + id + ""String_Node_Str""+ Utilities.escapeXml(inv.getHuman())+ ""String_Node_Str""+ Utilities.escapeXml(inv.getXpath())+ ""String_Node_Str"");
    }
  }
  return s.toString();
}",0.9779951100244498
23349,"private void produceSpec() throws Exception {
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    LogicalModel lm : ig.getLogicalModels()) {
      page.log(""String_Node_Str"" + lm.getId(),LogMessageType.Process);
      produceLogicalModel(lm,ig);
    }
  }
  for (  StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
    String filename=""String_Node_Str"" + ed.getUrl().substring(40).toLowerCase();
    ed.setUserData(""String_Node_Str"",filename);
    ImplementationGuideDefn ig=page.getDefinitions().getIgs().get(ed.getUserString(ToolResourceUtilities.NAME_RES_IG));
    ed.setUserData(""String_Node_Str"",(ig.isCore() ? ""String_Node_Str"" : ig.getCode() + File.separator) + filename + ""String_Node_Str"");
  }
  loadValueSets2();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  StructureDefinition ae : page.getWorkerContext().getExtensionDefinitions().values())   produceExtensionDefinition(ae);
  checkAllOk();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    produceResource1(r,r.isAbstract());
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && !rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r,false);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
    produceResource2(r,true,rname.equals(""String_Node_Str"") ? ""String_Node_Str"" : null,false);
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && !rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r,false,null,false);
    }
  }
  for (  String rname : page.getDefinitions().getResourceTemplates().keySet()) {
    ResourceDefn r=page.getDefinitions().getResourceTemplates().get(rname);
    produceResource2(r,false,null,true);
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  Bundle searchParamsFeed=new Bundle();
  searchParamsFeed.setId(""String_Node_Str"");
  searchParamsFeed.setType(BundleType.COLLECTION);
  searchParamsFeed.setMeta(new Meta().setLastUpdated(page.getResourceBundle().getMeta().getLastUpdated()));
  for (  ResourceDefn rd : page.getDefinitions().getBaseResources().values())   addSearchParams(searchParamsFeed,rd);
  for (  String n : page.getDefinitions().sortedResourceNames()) {
    ResourceDefn rd=page.getDefinitions().getResources().get(n);
    addSearchParams(searchParamsFeed,rd);
  }
  for (  Profile cp : page.getDefinitions().getPackList()) {
    addSearchParams(searchParamsFeed,cp);
  }
  checkBundleURLs(searchParamsFeed);
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    String n : ig.getPageList()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceIgPage(n,ig);
    }
    for (    ImplementationGuidePageComponent page : ig.getSpecialPages()) {
      produceIgPage(ig,page);
    }
    for (    Profile p : ig.getProfiles()) {
      if (!p.getOperations().isEmpty()) {
        produceIgOperations(ig,p);
      }
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
      if (!ig.isCore())       produceIgPage(n,ig,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  String n : page.getDefinitions().getDictionaries().keySet()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceDictionary(page.getDefinitions().getDictionaries().get(n));
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    Profile p : page.getDefinitions().getPackList()) {
      page.log(""String_Node_Str"" + p.getId(),LogMessageType.Process);
      produceConformancePackage(""String_Node_Str"",p,null);
    }
    produceV2();
    produceV3();
    page.getVsValidator().checkDuplicates(page.getValidationErrors());
    if (buildFlags.get(""String_Node_Str"")) {
      page.getToc().put(""String_Node_Str"",new TocEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
      page.log(""String_Node_Str"",LogMessageType.Process);
      producePage(""String_Node_Str"",null);
    }
    checkAllOk();
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkBundleURLs(page.getResourceBundle());
    checkStructureDefinitions(page.getResourceBundle());
    FileOutputStream s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getResourceBundle());
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getResourceBundle());
    s.close();
    checkBundleURLs(page.getTypeBundle());
    checkStructureDefinitions(page.getTypeBundle());
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getTypeBundle());
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getTypeBundle());
    s.close();
    Bundle extensionsFeed=new Bundle();
    extensionsFeed.setId(""String_Node_Str"");
    extensionsFeed.setType(BundleType.COLLECTION);
    extensionsFeed.setMeta(new Meta().setLastUpdated(page.getResourceBundle().getMeta().getLastUpdated()));
    Set<String> urls=new HashSet<String>();
    for (    StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
      if (!urls.contains(ed.getUrl())) {
        urls.add(ed.getUrl());
        extensionsFeed.getEntry().add(new BundleEntryComponent().setResource(ed).setFullUrl(ed.getUrl()));
      }
    }
    checkBundleURLs(extensionsFeed);
    checkStructureDefinitions(extensionsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addOtherProfiles(profileBundle,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addOtherProfiles(profileBundle,cp);
    }
    checkBundleURLs(profileBundle);
    checkStructureDefinitions(profileBundle);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileBundle);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileBundle);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    checkBundleURLs(dataElements);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    checkBundleURLs(valueSetsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    checkBundleURLs(conceptMapsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Bundle v2Valuesets=new Bundle();
    v2Valuesets.setType(BundleType.COLLECTION);
    v2Valuesets.setId(""String_Node_Str"");
    v2Valuesets.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    for (    ValueSet vs : page.getValueSets().values())     if (vs.getUrl().contains(""String_Node_Str""))     v2Valuesets.addEntry().setFullUrl(vs.getUrl()).setResource(vs);
    for (    CodeSystem cs : page.getCodeSystems().values())     if (cs != null && cs.getUrl().contains(""String_Node_Str""))     v2Valuesets.addEntry().setFullUrl(cs.getUrl()).setResource(cs);
    checkBundleURLs(v2Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    v2Valuesets=null;
    Bundle v3Valuesets=new Bundle();
    v3Valuesets.setType(BundleType.COLLECTION);
    v3Valuesets.setId(""String_Node_Str"");
    v3Valuesets.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    for (    ValueSet vs : page.getValueSets().values())     if (vs.getUrl().contains(""String_Node_Str""))     v3Valuesets.addEntry().setFullUrl(vs.getUrl()).setResource(vs);
    for (    CodeSystem cs : page.getCodeSystems().values())     if (cs != null && cs.getUrl().contains(""String_Node_Str""))     v3Valuesets.addEntry().setFullUrl(cs.getUrl()).setResource(cs);
    checkBundleURLs(v3Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Bundle expansionFeed=new Bundle();
    expansionFeed.setId(""String_Node_Str"");
    expansionFeed.setType(BundleType.COLLECTION);
    expansionFeed.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    expansionFeed.getFormatCommentsPre().add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    for (    ValueSet vs : page.getValueSets().values()) {
      if (vs.getUserData(ToolResourceUtilities.NAME_VS_USE_MARKER) != null) {
        ValueSet evs=null;
        if (vs.hasUserData(""String_Node_Str""))         evs=(ValueSet)vs.getUserData(""String_Node_Str"");
 else {
          ValueSetExpansionOutcome vse=page.getWorkerContext().expandVS(vs,true,false);
          if (vse.getValueset() != null) {
            evs=vse.getValueset();
            vs.setUserData(""String_Node_Str"",evs);
          }
        }
        if (evs != null) {
          ValueSet vsc=vs.copy();
          vsc.setText(null);
          vsc.setExpansion(evs.getExpansion());
          expansionFeed.addEntry().setFullUrl(vsc.getUrl()).setResource(vsc);
        }
      }
    }
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,expansionFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,expansionFeed);
    s.close();
    produceComparisons();
    produceSpecMap();
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    DSTU2ValidationConvertor dstu2=new DSTU2ValidationConvertor();
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    page.getDiffEngine().saveR2AsR3(zip);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().tmpDir + ""String_Node_Str"");
    zip.addFolder(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().tmpDir,""String_Node_Str""),false);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    javaReferencePlatform.buildIGPublisher(page.getFolders().dstDir + ""String_Node_Str"");
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,""String_Node_Str"");
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFilesFiltered(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    zip.close();
    if (web) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      produceZip();
    }
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getHTMLChecker().produce();
    checkAllOk();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}","private void produceSpec() throws Exception {
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    LogicalModel lm : ig.getLogicalModels()) {
      page.log(""String_Node_Str"" + lm.getId(),LogMessageType.Process);
      produceLogicalModel(lm,ig);
    }
  }
  for (  StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
    String filename=""String_Node_Str"" + ed.getUrl().substring(40).toLowerCase();
    ed.setUserData(""String_Node_Str"",filename);
    ImplementationGuideDefn ig=page.getDefinitions().getIgs().get(ed.getUserString(ToolResourceUtilities.NAME_RES_IG));
    ed.setUserData(""String_Node_Str"",(ig.isCore() ? ""String_Node_Str"" : ig.getCode() + File.separator) + filename + ""String_Node_Str"");
  }
  loadValueSets2();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  StructureDefinition ae : page.getWorkerContext().getExtensionDefinitions().values())   produceExtensionDefinition(ae);
  checkAllOk();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    produceResource1(r,r.isAbstract());
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && !rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r,false);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
    produceResource2(r,true,rname.equals(""String_Node_Str"") ? ""String_Node_Str"" : null,false);
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && !rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r,false,null,false);
    }
  }
  for (  String rname : page.getDefinitions().getResourceTemplates().keySet()) {
    ResourceDefn r=page.getDefinitions().getResourceTemplates().get(rname);
    produceResource2(r,false,null,true);
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  Bundle searchParamsFeed=new Bundle();
  searchParamsFeed.setId(""String_Node_Str"");
  searchParamsFeed.setType(BundleType.COLLECTION);
  searchParamsFeed.setMeta(new Meta().setLastUpdated(page.getResourceBundle().getMeta().getLastUpdated()));
  for (  ResourceDefn rd : page.getDefinitions().getBaseResources().values())   addSearchParams(searchParamsFeed,rd);
  for (  String n : page.getDefinitions().sortedResourceNames()) {
    ResourceDefn rd=page.getDefinitions().getResources().get(n);
    addSearchParams(searchParamsFeed,rd);
  }
  for (  Profile cp : page.getDefinitions().getPackList()) {
    addSearchParams(searchParamsFeed,cp);
  }
  checkBundleURLs(searchParamsFeed);
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    String n : ig.getPageList()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceIgPage(n,ig);
    }
    for (    ImplementationGuidePageComponent page : ig.getSpecialPages()) {
      produceIgPage(ig,page);
    }
    for (    Profile p : ig.getProfiles()) {
      if (!p.getOperations().isEmpty()) {
        produceIgOperations(ig,p);
      }
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
      if (!ig.isCore())       produceIgPage(n,ig,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  String n : page.getDefinitions().getDictionaries().keySet()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceDictionary(page.getDefinitions().getDictionaries().get(n));
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    Profile p : page.getDefinitions().getPackList()) {
      page.log(""String_Node_Str"" + p.getId(),LogMessageType.Process);
      produceConformancePackage(""String_Node_Str"",p,null);
    }
    produceV2();
    produceV3();
    page.getVsValidator().checkDuplicates(page.getValidationErrors());
    if (buildFlags.get(""String_Node_Str"")) {
      page.getToc().put(""String_Node_Str"",new TocEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
      page.log(""String_Node_Str"",LogMessageType.Process);
      producePage(""String_Node_Str"",null);
    }
    checkAllOk();
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkBundleURLs(page.getResourceBundle());
    checkStructureDefinitions(page.getResourceBundle());
    FileOutputStream s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getResourceBundle());
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getResourceBundle());
    s.close();
    checkBundleURLs(page.getTypeBundle());
    checkStructureDefinitions(page.getTypeBundle());
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getTypeBundle());
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,page.getTypeBundle());
    s.close();
    Bundle extensionsFeed=new Bundle();
    extensionsFeed.setId(""String_Node_Str"");
    extensionsFeed.setType(BundleType.COLLECTION);
    extensionsFeed.setMeta(new Meta().setLastUpdated(page.getResourceBundle().getMeta().getLastUpdated()));
    Set<String> urls=new HashSet<String>();
    for (    StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
      if (!urls.contains(ed.getUrl())) {
        urls.add(ed.getUrl());
        extensionsFeed.getEntry().add(new BundleEntryComponent().setResource(ed).setFullUrl(ed.getUrl()));
      }
    }
    checkBundleURLs(extensionsFeed);
    checkStructureDefinitions(extensionsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addOtherProfiles(profileBundle,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addOtherProfiles(profileBundle,cp);
    }
    checkBundleURLs(profileBundle);
    checkStructureDefinitions(profileBundle);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileBundle);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileBundle);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    checkBundleURLs(dataElements);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    checkBundleURLs(valueSetsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    checkBundleURLs(conceptMapsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Bundle v2Valuesets=new Bundle();
    v2Valuesets.setType(BundleType.COLLECTION);
    v2Valuesets.setId(""String_Node_Str"");
    v2Valuesets.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    for (    ValueSet vs : page.getValueSets().values())     if (vs.getUrl().contains(""String_Node_Str""))     v2Valuesets.addEntry().setFullUrl(vs.getUrl()).setResource(vs);
    for (    CodeSystem cs : page.getCodeSystems().values())     if (cs != null && cs.getUrl().contains(""String_Node_Str""))     v2Valuesets.addEntry().setFullUrl(cs.getUrl()).setResource(cs);
    checkBundleURLs(v2Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    v2Valuesets=null;
    Bundle v3Valuesets=new Bundle();
    v3Valuesets.setType(BundleType.COLLECTION);
    v3Valuesets.setId(""String_Node_Str"");
    v3Valuesets.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    for (    ValueSet vs : page.getValueSets().values())     if (vs.getUrl().contains(""String_Node_Str""))     v3Valuesets.addEntry().setFullUrl(vs.getUrl()).setResource(vs);
    for (    CodeSystem cs : page.getCodeSystems().values())     if (cs != null && cs.getUrl().contains(""String_Node_Str""))     v3Valuesets.addEntry().setFullUrl(cs.getUrl()).setResource(cs);
    checkBundleURLs(v3Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Bundle expansionFeed=new Bundle();
    expansionFeed.setId(""String_Node_Str"");
    expansionFeed.setType(BundleType.COLLECTION);
    expansionFeed.setMeta(new Meta().setLastUpdated(page.getGenDate().getTime()));
    expansionFeed.getFormatCommentsPre().add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    for (    ValueSet vs : page.getValueSets().values()) {
      if (vs.getUserData(ToolResourceUtilities.NAME_VS_USE_MARKER) != null) {
        ValueSet evs=null;
        if (vs.hasUserData(""String_Node_Str""))         evs=(ValueSet)vs.getUserData(""String_Node_Str"");
 else {
          ValueSetExpansionOutcome vse=page.getWorkerContext().expandVS(vs,true,false);
          if (vse.getValueset() != null) {
            evs=vse.getValueset();
            vs.setUserData(""String_Node_Str"",evs);
          }
        }
        if (evs != null) {
          ValueSet vsc=vs.copy();
          vsc.setText(null);
          vsc.setExpansion(evs.getExpansion());
          expansionFeed.addEntry().setFullUrl(vsc.getUrl()).setResource(vsc);
        }
      }
    }
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,expansionFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,expansionFeed);
    s.close();
    produceComparisons();
    produceSpecMap();
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    DSTU2ValidationConvertor dstu2=new DSTU2ValidationConvertor();
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    dstu2.convert(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"");
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().tmpDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    page.getDiffEngine().saveR2AsR3(zip);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().tmpDir + ""String_Node_Str"");
    zip.addFolder(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().srcDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().tmpDir,""String_Node_Str""),false);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    javaReferencePlatform.buildIGPublisher(page.getFolders().dstDir + ""String_Node_Str"");
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,""String_Node_Str"");
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFilesFiltered(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceZip();
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getHTMLChecker().produce();
    checkAllOk();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}",0.9994915909137128
23350,"private int processExtension(Sheet sheet,int row,String uri,List<ValidationMessage> issues,Map<String,ElementDefinitionConstraintComponent> invariants) throws Exception {
  String name=sheet.getColumn(row,""String_Node_Str"");
  StructureDefinition ex=new StructureDefinition();
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  bundle.addEntry().setResource(ex).setFullUrl(ex.getUrl());
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(Constants.VERSION);
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str""))     for (    String s : sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""))     ex.addContextInvariant(s);
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      checkContextValid(ex.getContextType(),c,this.name);
      ex.addContext(c);
    }
  }
  ex.setTitle(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exe=ex.getDifferential().addElement();
  exe.setPath(""String_Node_Str"");
  exe.setSliceName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exu=ex.getDifferential().addElement();
  exu.setPath(""String_Node_Str"");
  exu.setFixed(new UriType(ex.getUrl()));
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (inv.getKey().equals(name))       exe.getConstraint().add(inv);
    }
  }
  parseExtensionElement(sheet,row,ex,exe,false);
  String sl=exe.getShort();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getTitle());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(exe.getDefinition());
  ex.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.OTHER,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   ex.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
  row++;
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefinition child=ex.getDifferential().addElement();
    child.setPath(""String_Node_Str"");
    child.setSliceName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,ex,child,true);
    if (invariants != null) {
      for (      ElementDefinitionConstraintComponent inv : invariants.values()) {
        if (inv.getKey().equals(n))         child.getConstraint().add(inv);
      }
    }
    row++;
  }
  ex.getDifferential().getElementFirstRep().getType().clear();
  if (ex.getDifferential().getElementFirstRep().hasRequirements()) {
    ex.setPurpose(ex.getDifferential().getElementFirstRep().getRequirements());
    ex.getDifferential().getElementFirstRep().setRequirements(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasLabel()) {
    ex.setTitle(ex.getDifferential().getElementFirstRep().getLabel());
    ex.getDifferential().getElementFirstRep().setLabel(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasCode()) {
    ex.getKeyword().addAll(ex.getDifferential().getElementFirstRep().getCode());
    ex.getDifferential().getElementFirstRep().getCode().clear();
  }
  StructureDefinition base=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.setIds(ex,false);
  return row;
}","private int processExtension(Sheet sheet,int row,String uri,List<ValidationMessage> issues,Map<String,ElementDefinitionConstraintComponent> invariants) throws Exception {
  String name=sheet.getColumn(row,""String_Node_Str"");
  StructureDefinition ex=new StructureDefinition();
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  bundle.addEntry().setResource(ex).setFullUrl(ex.getUrl());
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(Constants.VERSION);
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    if (sheet.hasColumn(""String_Node_Str""))     for (    String s : sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""))     ex.addContextInvariant(s);
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      checkContextValid(ex.getContextType(),c,this.name);
      ex.addContext(c);
    }
  }
  ex.setTitle(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exe=ex.getDifferential().addElement();
  exe.setPath(""String_Node_Str"");
  exe.setSliceName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exu=ex.getDifferential().addElement();
  exu.setPath(""String_Node_Str"");
  exu.setFixed(new UriType(ex.getUrl()));
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (inv.getKey().equals(name))       exe.getConstraint().add(inv);
    }
  }
  parseExtensionElement(sheet,row,ex,exe,false);
  String sl=exe.getShort();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getTitle());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(exe.getDefinition());
  ex.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.OTHER,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   ex.setStatus(PublicationStatus.fromCode(metadata(""String_Node_Str"")));
  row++;
  boolean hasChild=false;
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    hasChild=true;
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefinition child=ex.getDifferential().addElement();
    child.setPath(""String_Node_Str"");
    child.setSliceName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,ex,child,true);
    if (invariants != null) {
      for (      ElementDefinitionConstraintComponent inv : invariants.values()) {
        if (inv.getKey().equals(n))         child.getConstraint().add(inv);
      }
    }
    row++;
  }
  if (hasChild) {
    boolean found=false;
    for (    ElementDefinition exv : ex.getDifferential().getElement())     if (exv.getPath().startsWith(""String_Node_Str"")) {
      found=true;
      exv.setMax(""String_Node_Str"");
    }
    if (!found) {
      ex.getDifferential().addElement().setPath(""String_Node_Str"").setMax(""String_Node_Str"");
    }
  }
  ex.getDifferential().getElementFirstRep().getType().clear();
  if (ex.getDifferential().getElementFirstRep().hasRequirements()) {
    ex.setPurpose(ex.getDifferential().getElementFirstRep().getRequirements());
    ex.getDifferential().getElementFirstRep().setRequirements(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasLabel()) {
    ex.setTitle(ex.getDifferential().getElementFirstRep().getLabel());
    ex.getDifferential().getElementFirstRep().setLabel(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasCode()) {
    ex.getKeyword().addAll(ex.getDifferential().getElementFirstRep().getCode());
    ex.getDifferential().getElementFirstRep().getCode().clear();
  }
  StructureDefinition base=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.setIds(ex,false);
  return row;
}",0.957874682472481
23351,"@Override public boolean hasPrimitiveValue(){
  return property.isPrimitive(name) || property.IsLogicalAndHasPrimitiveValue(name);
}","@Override public boolean hasPrimitiveValue(){
  return property.isPrimitiveName(name) || property.IsLogicalAndHasPrimitiveValue(name);
}",0.9850746268656716
23352,"public boolean isPrimitive(String name){
  String code=name;
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + code);
  return sd != null && sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE;
}","/** 
 * Is the given type a primitive
 * @param E.g. ""integer""
 */
public boolean isPrimitive(String code){
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + code);
  return sd != null && sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE;
}",0.8235294117647058
23353,"private String determineCacheId(ValueSet vs,boolean heirarchical) throws Exception {
  ValueSet vsid=new ValueSet();
  vsid.setCompose(vs.getCompose());
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,vsid);
  b.close();
  String s=new String(b.toByteArray());
  for (  ConceptSetComponent inc : vs.getCompose().getInclude()) {
    CodeSystem cs=fetchCodeSystem(inc.getSystem());
    if (cs != null)     s=s + cacheValue(cs);
  }
  s=s + ""String_Node_Str"" + Boolean.toString(heirarchical);
  String r=Integer.toString(s.hashCode());
  return r;
}","private String determineCacheId(ValueSet vs,boolean heirarchical) throws Exception {
  ValueSet vsid=new ValueSet();
  vsid.setCompose(vs.getCompose());
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,vsid);
  b.close();
  String s=new String(b.toByteArray(),Charsets.UTF_8);
  for (  ConceptSetComponent inc : vs.getCompose().getInclude()) {
    CodeSystem cs=fetchCodeSystem(inc.getSystem());
    if (cs != null) {
      String css=cacheValue(cs);
      s=s + css;
    }
  }
  s=s + ""String_Node_Str"" + Boolean.toString(heirarchical);
  String r=Integer.toString(s.hashCode());
  return r;
}",0.9447310243183492
23354,"private String cacheValue(CodeSystem cs) throws IOException {
  CodeSystem csid=new CodeSystem();
  csid.setId(cs.getId());
  csid.setVersion(cs.getVersion());
  csid.setContent(cs.getContent());
  csid.setHierarchyMeaning(CodeSystemHierarchyMeaning.GROUPEDBY);
  for (  ConceptDefinitionComponent cc : cs.getConcept())   csid.getConcept().add(processCSConcept(cc));
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,csid);
  b.close();
  return new String(b.toByteArray());
}","private String cacheValue(CodeSystem cs) throws IOException {
  CodeSystem csid=new CodeSystem();
  csid.setId(cs.getId());
  csid.setVersion(cs.getVersion());
  csid.setContent(cs.getContent());
  csid.setHierarchyMeaning(CodeSystemHierarchyMeaning.GROUPEDBY);
  for (  ConceptDefinitionComponent cc : cs.getConcept())   csid.getConcept().add(processCSConcept(cc));
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,csid);
  b.close();
  return new String(b.toByteArray(),Charsets.UTF_8);
}",0.987298899237934
23355,"private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode().equals(""String_Node_Str"")) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getTargetProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasTargetProfile() && Utilities.isAbsoluteUrl(t.getTargetProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getTargetProfile(),null)));
      }
 else       if (t.hasProfile() && t.getTargetProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getTargetProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getTargetProfile(),null)));
 else       if (t.hasTargetProfile())       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getTargetProfile(),t.getTargetProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        if (parts[0].startsWith(""String_Node_Str"") || parts[0].startsWith(""String_Node_Str""))         c.addPiece(checkForNoChange(t,gen.new Piece(parts[0],parts[1],t.getCode())));
 else         c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}","private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode().equals(""String_Node_Str"")) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getTargetProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasTargetProfile() && Utilities.isAbsoluteUrl(t.getTargetProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getTargetProfile());
        if (sd != null) {
          String disp=sd.hasTitle() ? sd.getTitle() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getTargetProfile(),null)));
      }
 else       if (t.hasTargetProfile() && t.getTargetProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getTargetProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getTargetProfile(),null)));
 else       if (t.hasTargetProfile())       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getTargetProfile(),t.getTargetProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        if (parts[0].startsWith(""String_Node_Str"") || parts[0].startsWith(""String_Node_Str""))         c.addPiece(checkForNoChange(t,gen.new Piece(parts[0],parts[1],t.getCode())));
 else         c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece((t.getProfile().startsWith(corePath) ? corePath : ""String_Node_Str"") + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}",0.9995407225964482
23356,"private void generateSummaryOutputs() throws Exception {
  log(""String_Node_Str"");
  generateResourceReferences();
  generateDataFile();
  JsonObject data=new JsonObject();
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(""String_Node_Str"")) {
        StructureDefinition sd=(StructureDefinition)r.getResource();
        JsonObject item=new JsonObject();
        data.add(sd.getId(),item);
        item.addProperty(""String_Node_Str"",sd.getUrl());
        item.addProperty(""String_Node_Str"",sd.getName());
        item.addProperty(""String_Node_Str"",sd.getUserString(""String_Node_Str""));
        item.addProperty(""String_Node_Str"",sd.getKind().toCode());
        item.addProperty(""String_Node_Str"",sd.getType());
        item.addProperty(""String_Node_Str"",sd.getBaseDefinition());
        StructureDefinition base=sd.hasBaseDefinition() ? context.fetchResource(StructureDefinition.class,sd.getBaseDefinition()) : null;
        if (base != null) {
          item.addProperty(""String_Node_Str"",base.getName());
          item.addProperty(""String_Node_Str"",base.getUserString(""String_Node_Str""));
        }
        item.addProperty(""String_Node_Str"",sd.getStatus().toCode());
        item.addProperty(""String_Node_Str"",sd.getDate().toString());
        item.addProperty(""String_Node_Str"",sd.getPublisher());
        item.addProperty(""String_Node_Str"",sd.getCopyright());
        item.addProperty(""String_Node_Str"",sd.getDescription());
        if (sd.getContextType() != null)         item.addProperty(""String_Node_Str"",sd.getContextType().getDisplay());
        if (!sd.getContext().isEmpty()) {
          JsonArray contexts=new JsonArray();
          item.add(""String_Node_Str"",contexts);
          for (          StringType context : sd.getContext()) {
            contexts.add(new JsonPrimitive(context.asStringValue()));
          }
        }
      }
    }
  }
  for (  FetchedResource r : examples) {
    FetchedResource baseRes=getResourceForUri(r.getExampleUri());
    if (baseRes == null)     throw new Exception(""String_Node_Str"" + r.getExampleUri() + ""String_Node_Str""+ r.getUrlTail());
    baseRes.addExample(r);
  }
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String json=gson.toJson(data);
  TextFile.stringToFile(json,Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  JsonObject pages=new JsonObject();
  addPageDataRow(pages,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",breadCrumbForPage(sourceIg.getPage(),true),examples);
  addPageData(pages,sourceIg.getPage(),""String_Node_Str"",""String_Node_Str"",true);
  json=pages.toString();
  TextFile.stringToFile(json,Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
}","private void generateSummaryOutputs() throws Exception {
  log(""String_Node_Str"");
  generateResourceReferences();
  generateDataFile();
  JsonObject data=new JsonObject();
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(""String_Node_Str"")) {
        StructureDefinition sd=(StructureDefinition)r.getResource();
        JsonObject item=new JsonObject();
        data.add(sd.getId(),item);
        item.addProperty(""String_Node_Str"",sd.getUrl());
        item.addProperty(""String_Node_Str"",sd.getName());
        item.addProperty(""String_Node_Str"",sd.getUserString(""String_Node_Str""));
        item.addProperty(""String_Node_Str"",sd.getKind().toCode());
        item.addProperty(""String_Node_Str"",sd.getType());
        item.addProperty(""String_Node_Str"",sd.getBaseDefinition());
        StructureDefinition base=sd.hasBaseDefinition() ? context.fetchResource(StructureDefinition.class,sd.getBaseDefinition()) : null;
        if (base != null) {
          item.addProperty(""String_Node_Str"",base.getName());
          item.addProperty(""String_Node_Str"",base.getUserString(""String_Node_Str""));
        }
        item.addProperty(""String_Node_Str"",sd.getStatus().toCode());
        item.addProperty(""String_Node_Str"",sd.getDate().toString());
        item.addProperty(""String_Node_Str"",sd.getPublisher());
        item.addProperty(""String_Node_Str"",sd.getCopyright());
        item.addProperty(""String_Node_Str"",sd.getDescription());
        if (sd.getContextType() != null)         item.addProperty(""String_Node_Str"",sd.getContextType().getDisplay());
        if (!sd.getContext().isEmpty()) {
          JsonArray contexts=new JsonArray();
          item.add(""String_Node_Str"",contexts);
          for (          StringType context : sd.getContext()) {
            contexts.add(new JsonPrimitive(context.asStringValue()));
          }
        }
      }
    }
  }
  for (  FetchedResource r : examples) {
    FetchedResource baseRes=getResourceForUri(r.getExampleUri());
    if (baseRes == null)     throw new Exception(""String_Node_Str"" + r.getExampleUri() + ""String_Node_Str""+ r.getUrlTail());
    baseRes.addExample(r);
  }
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String json=gson.toJson(data);
  TextFile.stringToFile(json,Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  if (sourceIg.hasPage()) {
    JsonObject pages=new JsonObject();
    addPageDataRow(pages,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",breadCrumbForPage(sourceIg.getPage(),true),examples);
    addPageData(pages,sourceIg.getPage(),""String_Node_Str"",""String_Node_Str"",true);
    json=pages.toString();
    TextFile.stringToFile(json,Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  }
}",0.9924460431654676
23357,"private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (""String_Node_Str"".equals(tr.getCode()))     res.add(tr.getProfile());
  }
  return res;
}","private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (tr.getCode() != null && ""String_Node_Str"".equals(tr.getCode()) && tr.getProfile() != null)     res.add(tr.getProfile());
  }
  return res;
}",0.9087656529516994
23358,"@Override public FetchedFile fetch(Type source,FetchedFile src) throws Exception {
  if (source instanceof Reference) {
    String s=((Reference)source).getReference();
    if (!s.contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String type=s.substring(0,s.indexOf(""String_Node_Str""));
    String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
    try {
      ResourceType rt=ResourceType.fromCode(type);
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    }
    if (!id.matches(FormatUtilities.ID_REGEX))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String fn=pkp.getSourceFor(type + ""String_Node_Str"" + id);
    List<String> dirs=new ArrayList<>();
    dirs.add(Utilities.getDirectoryForFile(src.getPath()));
    dirs.addAll(resourceDirs);
    if (Utilities.noString(fn)) {
      fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ dirs.toString());
    }
 else {
      fn=findFile(dirs,fn);
      if (!exists(fn))       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ fn);
    }
    return fetch(fn);
  }
 else   if (source instanceof UriType) {
    UriType s=(UriType)source;
    String fn=Utilities.path(Utilities.getDirectoryForFile(src.getPath()),s.getValueAsString());
    return fetch(fn);
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}","@Override public FetchedFile fetch(Type source,FetchedFile src) throws Exception {
  if (source instanceof Reference) {
    String s=((Reference)source).getReference();
    if (!s.contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String type=s.substring(0,s.indexOf(""String_Node_Str""));
    String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
    if (!pkp.getContext().hasResource(StructureDefinition.class,""String_Node_Str"" + type))     throw new Exception(""String_Node_Str"" + s);
    if (!id.matches(FormatUtilities.ID_REGEX))     throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
    String fn=pkp.getSourceFor(type + ""String_Node_Str"" + id);
    List<String> dirs=new ArrayList<>();
    dirs.add(Utilities.getDirectoryForFile(src.getPath()));
    dirs.addAll(resourceDirs);
    if (Utilities.noString(fn)) {
      fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,type.toLowerCase() + ""String_Node_Str"" + id+ ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       fn=findFile(dirs,id + ""String_Node_Str"");
      if (fn == null)       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type.toLowerCase()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ id+ ""String_Node_Str""+ dirs.toString());
    }
 else {
      fn=findFile(dirs,fn);
      if (!exists(fn))       throw new Exception(""String_Node_Str"" + type + ""String_Node_Str""+ id+ ""String_Node_Str""+ fn);
    }
    return fetch(fn);
  }
 else   if (source instanceof UriType) {
    UriType s=(UriType)source;
    String fn=Utilities.path(Utilities.getDirectoryForFile(src.getPath()),s.getValueAsString());
    return fetch(fn);
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}",0.9419327190914936
23359,"public void generate(Definitions definitions,IniFile ini,String tmpResDir,String xsdDir,String dstDir,String srcDir,String version,String genDate,BuildWorkerContext workerContext) throws Exception {
  this.genDate=genDate;
  this.version=version;
  this.workerContext=workerContext;
  File dir=new CSFile(xsdDir);
  File[] list=dir.listFiles();
  if (list != null) {
    for (    File f : list) {
      if (!f.isDirectory() && f.getName().endsWith(""String_Node_Str""))       f.delete();
    }
  }
  JsonObject schema=new JsonObject();
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.add(""String_Node_Str"",new JsonObject());
  for (  TypeRef tr : definitions.getKnownTypes()) {
    if (!definitions.getPrimitives().containsKey(tr.getName()) && !definitions.getConstraints().containsKey(tr.getName())) {
      TypeDefn root=definitions.getElementDefn(tr.getName());
      JsonObject s=new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root,version,genDate,null);
      save(s,xsdDir + root.getName() + ""String_Node_Str"");
      new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root,version,genDate,schema);
    }
  }
  List<String> names=new ArrayList<String>();
  names.addAll(definitions.getResources().keySet());
  names.add(""String_Node_Str"");
  Collections.sort(names);
  for (  String name : names) {
    ResourceDefn root=definitions.getResourceByName(name);
    JsonObject s=new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root.getRoot(),version,genDate,null);
    save(s,xsdDir + root.getName() + ""String_Node_Str"");
    new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root.getRoot(),version,genDate,schema);
  }
  addAllResourcesChoice(schema,names);
  save(schema,xsdDir + ""String_Node_Str"");
  dir=new CSFile(xsdDir);
  list=dir.listFiles();
  for (  File f : list) {
    if (!f.isDirectory() && f.getName().endsWith(""String_Node_Str""))     Utilities.copyFile(f,new CSFile(dstDir + f.getName()));
  }
}","public void generate(Definitions definitions,IniFile ini,String tmpResDir,String xsdDir,String dstDir,String srcDir,String version,String genDate,BuildWorkerContext workerContext) throws Exception {
  this.genDate=genDate;
  this.version=version;
  this.workerContext=workerContext;
  File dir=new CSFile(xsdDir);
  File[] list=dir.listFiles();
  if (list != null) {
    for (    File f : list) {
      if (!f.isDirectory() && f.getName().endsWith(""String_Node_Str""))       f.delete();
    }
  }
  JsonObject schema=new JsonObject();
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.addProperty(""String_Node_Str"",""String_Node_Str"");
  schema.add(""String_Node_Str"",new JsonObject());
  for (  TypeRef tr : definitions.getKnownTypes()) {
    if (!definitions.getPrimitives().containsKey(tr.getName()) && !definitions.getConstraints().containsKey(tr.getName())) {
      TypeDefn root=definitions.getElementDefn(tr.getName());
      JsonObject s=new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root,version,genDate,null);
      save(s,xsdDir + root.getName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root,version,genDate,schema);
    }
  }
  List<String> names=new ArrayList<String>();
  names.addAll(definitions.getResources().keySet());
  names.addAll(definitions.getBaseResources().keySet());
  names.add(""String_Node_Str"");
  Collections.sort(names);
  for (  String name : names) {
    ResourceDefn root=definitions.getResourceByName(name);
    JsonObject s=new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root.getRoot(),version,genDate,null);
    save(s,xsdDir + root.getName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    new JsonGenerator(definitions,workerContext,definitions.getKnownTypes()).generate(root.getRoot(),version,genDate,schema);
  }
  addAllResourcesChoice(schema,names);
  save(generateAllResourceChoice(names),xsdDir + ""String_Node_Str"");
  save(schema,xsdDir + ""String_Node_Str"");
  dir=new CSFile(xsdDir);
  list=dir.listFiles();
  for (  File f : list) {
    if (!f.isDirectory() && f.getName().endsWith(""String_Node_Str""))     Utilities.copyFile(f,new CSFile(dstDir + f.getName()));
  }
}",0.9540229885057472
23360,"private JsonObject generateType(ElementDefn root,String name,ElementDefn struc,boolean isResource,JsonObject base,boolean relative) throws IOException, Exception {
  String parent=isResource ? root.typeCode() : ""String_Node_Str"";
  JsonObject r=new JsonObject();
  base.add(name,r);
  JsonArray ao=new JsonArray();
  r.add(""String_Node_Str"",ao);
  JsonObject sup=new JsonObject();
  ao.add(sup);
  sup.addProperty(""String_Node_Str"",(relative ? ""String_Node_Str"" : parent + ""String_Node_Str"") + ""String_Node_Str"" + parent);
  JsonObject self=new JsonObject();
  ao.add(self);
  self.addProperty(""String_Node_Str"",root.getDefinition());
  Set<String> required=new HashSet<String>();
  JsonObject props=new JsonObject();
  self.add(""String_Node_Str"",props);
  if (isResource && definitions.hasResource(root.getName())) {
    JsonObject rt=new JsonObject();
    props.add(""String_Node_Str"",rt);
    rt.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName() + ""String_Node_Str"");
    rt.addProperty(""String_Node_Str"",""String_Node_Str"");
    JsonArray enums=new JsonArray();
    enums.add(new JsonPrimitive(root.getName()));
    rt.add(""String_Node_Str"",enums);
    required.add(""String_Node_Str"");
  }
  for (  ElementDefn e : struc.getElements()) {
    if (e.getName().equals(""String_Node_Str""))     generateAny(root,e,""String_Node_Str"",props,relative);
 else     generateElement(root,e,required,props,relative);
  }
  if (required.size() > 0) {
    JsonArray req=new JsonArray();
    self.add(""String_Node_Str"",req);
    for (    String s : required) {
      req.add(new JsonPrimitive(s));
    }
  }
  return props;
}","private JsonObject generateType(ElementDefn root,String name,ElementDefn struc,boolean isResource,JsonObject base,boolean relative) throws IOException, Exception {
  String parent=isResource ? root.typeCode() : ""String_Node_Str"";
  JsonObject r=new JsonObject();
  name=name.replace(""String_Node_Str"",""String_Node_Str"");
  base.add(name,r);
  JsonArray ao=new JsonArray();
  r.add(""String_Node_Str"",ao);
  if (!name.equals(""String_Node_Str"")) {
    JsonObject sup=new JsonObject();
    ao.add(sup);
    if ((parent == null) || (parent.isEmpty()) || (parent.equals(""String_Node_Str""))|| (parent.equals(""String_Node_Str"")))     parent=""String_Node_Str"";
    sup.addProperty(""String_Node_Str"",(relative ? ""String_Node_Str"" : parent.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"" + parent.replace(""String_Node_Str"",""String_Node_Str""));
  }
  JsonObject self=new JsonObject();
  ao.add(self);
  self.addProperty(""String_Node_Str"",root.getDefinition());
  Set<String> required=new HashSet<String>();
  JsonObject props=new JsonObject();
  self.add(""String_Node_Str"",props);
  if (isResource && definitions.hasResource(root.getName())) {
    JsonObject rt=new JsonObject();
    props.add(""String_Node_Str"",rt);
    rt.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName() + ""String_Node_Str"");
    rt.addProperty(""String_Node_Str"",""String_Node_Str"");
    JsonArray enums=new JsonArray();
    enums.add(new JsonPrimitive(root.getName()));
    rt.add(""String_Node_Str"",enums);
    required.add(""String_Node_Str"");
  }
  for (  ElementDefn e : struc.getElements()) {
    if (e.getName().equals(""String_Node_Str""))     generateAny(root,e,""String_Node_Str"",props,relative);
 else     generateElement(root,e,required,props,relative);
  }
  if (required.size() > 0) {
    JsonArray req=new JsonArray();
    self.add(""String_Node_Str"",req);
    for (    String s : required) {
      req.add(new JsonPrimitive(s));
    }
  }
  return props;
}",0.8938888888888888
23361,"private String encodeType(ElementDefn e,TypeRef type,boolean params) throws Exception {
  if (type.isResourceReference())   return ""String_Node_Str"";
 else   if (type.getName().equals(""String_Node_Str"")) {
    String en=null;
    if (e.hasBinding()) {
      BindingSpecification cd=e.getBinding();
      if (cd != null && cd.getBinding() == BindingSpecification.BindingMethod.CodeList) {
        en=cd.getValueSet().getName();
        if (!cd.isShared()) {
          enums.put(en,cd.getValueSet());
          enumDefs.put(en,cd.getDefinition());
        }
        return en;
      }
    }
    return ""String_Node_Str"";
  }
 else   if (!type.hasParams() || !params) {
    if (type.getName().equals(""String_Node_Str""))     return ""String_Node_Str"";
 else     return type.getName();
  }
 else   if (type.getParams().size() > 1)   throw new Exception(""String_Node_Str"");
 else   return type.getName() + ""String_Node_Str"" + upFirst(type.getParams().get(0));
}","private String encodeType(ElementDefn e,TypeRef type,boolean params) throws Exception {
  if (type.isResourceReference())   return ""String_Node_Str"";
 else   if (type.getName().equals(""String_Node_Str"")) {
    String en=null;
    if (e.hasBinding()) {
      BindingSpecification cd=e.getBinding();
      if (cd != null && cd.getBinding() == BindingSpecification.BindingMethod.CodeList) {
        en=cd.getValueSet().getName();
        if (!cd.isShared()) {
          enums.put(en,cd.getValueSet());
          enumDefs.put(en,cd.getDefinition());
        }
        return en;
      }
    }
    return ""String_Node_Str"";
  }
 else   if (!type.hasParams() || !params) {
    if (type.getName().equals(""String_Node_Str""))     return ""String_Node_Str"";
 else     if (definitions.getConstraints().containsKey(type.getName())) {
      ProfiledType pt=definitions.getConstraints().get(type.getName());
      return pt.getBaseType();
    }
 else     return type.getName();
  }
 else   if (type.getParams().size() > 1)   throw new Exception(""String_Node_Str"");
 else   return type.getName() + ""String_Node_Str"" + upFirst(type.getParams().get(0));
}",0.9124820659971306
23362,"private void generateElement(ElementDefn root,ElementDefn e,Set<String> required,JsonObject props,boolean relative) throws Exception {
  if (e.getTypes().size() > 1 || (e.getTypes().size() == 1 && e.getTypes().get(0).isWildcardType())) {
    if (!e.getName().contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1)     generateAny(root,e,e.getName().replace(""String_Node_Str"",""String_Node_Str""),props,relative);
 else {
      for (      TypeRef t : e.getTypes()) {
        JsonObject property=new JsonObject();
        JsonObject property_=null;
        String en=e.getName().replace(""String_Node_Str"",""String_Node_Str"");
        props.add(en + upFirst(t.getName()),property);
        property.addProperty(""String_Node_Str"",e.getDefinition());
        String tref=null;
        String type=null;
        String pattern=null;
        if (definitions.getPrimitives().containsKey(t.getName())) {
          DefinedCode def=definitions.getPrimitives().get(t.getName());
          type=def.getJsonType();
          pattern=def.getRegex();
          if (!Utilities.noString(pattern))           property.addProperty(""String_Node_Str"",pattern);
          property.addProperty(""String_Node_Str"",type);
          property_=new JsonObject();
          props.add(en + upFirst(t.getName()) + ""String_Node_Str"",property_);
          property_.addProperty(""String_Node_Str"",""String_Node_Str"" + en + upFirst(t.getName()));
          tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
          property_.addProperty(""String_Node_Str"",tref);
        }
 else {
          String tn=encodeType(e,t,true);
          tref=(relative ? ""String_Node_Str"" : tn + ""String_Node_Str"") + ""String_Node_Str"" + tn;
          property.addProperty(""String_Node_Str"",tref);
        }
      }
    }
  }
 else {
    JsonObject property=new JsonObject();
    JsonObject property_=null;
    props.add(e.getName(),property);
    property.addProperty(""String_Node_Str"",e.getDefinition());
    String tref=null;
    String type=null;
    String pattern=null;
    if (e.usesCompositeType()) {
      ElementDefn ref=root.getElementByName(definitions,e.typeCode().substring(1),true,false);
      String rtn=types.get(ref);
      if (rtn == null)       throw new Exception(""String_Node_Str"" + types.toString() + ""String_Node_Str"");
      tref=""String_Node_Str"" + rtn;
    }
 else     if (e.getTypes().size() == 0 && e.getElements().size() > 0) {
      tref=""String_Node_Str"" + types.get(e);
    }
 else     if (e.getTypes().size() == 1) {
      if (definitions.getPrimitives().containsKey(e.typeCode())) {
        DefinedCode def=definitions.getPrimitives().get(e.typeCode());
        type=def.getJsonType();
        pattern=def.getRegex();
        property_=new JsonObject();
        props.add(e.getName() + ""String_Node_Str"",property_);
        property_.addProperty(""String_Node_Str"",""String_Node_Str"" + e.getName());
        tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
        if (e.getBinding() != null) {
          ValueSet vs=enums.get(e.getBinding().getName());
          if (vs != null) {
            ValueSet ex=workerContext.expandVS(vs,true,false).getValueset();
            JsonArray enums=new JsonArray();
            for (            ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
              enums.add(new JsonPrimitive(cc.getCode()));
            }
            property.add(""String_Node_Str"",enums);
            pattern=null;
          }
        }
      }
 else {
        String tn=encodeType(e,e.getTypes().get(0),true);
        tref=(relative ? ""String_Node_Str"" : tn + ""String_Node_Str"") + ""String_Node_Str"" + tn;
      }
    }
 else     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ Integer.toString(e.getTypes().size()));
    if (e.unbounded()) {
      property.addProperty(""String_Node_Str"",""String_Node_Str"");
      if (property_ != null) {
        JsonObject items=new JsonObject();
        property.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",type);
        if (!Utilities.noString(pattern))         items.addProperty(""String_Node_Str"",pattern);
        items=new JsonObject();
        property_.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",tref);
      }
 else {
        JsonObject items=new JsonObject();
        property.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",tref);
      }
    }
 else {
      if (property_ != null) {
        property.addProperty(""String_Node_Str"",type);
        if (!Utilities.noString(pattern))         property.addProperty(""String_Node_Str"",pattern);
        property_.addProperty(""String_Node_Str"",tref);
      }
 else       property.addProperty(""String_Node_Str"",tref);
    }
    if (e.getMinCardinality() > 0 && property_ == null)     required.add(e.getName());
  }
}","private void generateElement(ElementDefn root,ElementDefn e,Set<String> required,JsonObject props,boolean relative) throws Exception {
  if (e.getTypes().size() > 1 || (e.getTypes().size() == 1 && e.getTypes().get(0).isWildcardType())) {
    if (!e.getName().contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1)     generateAny(root,e,e.getName().replace(""String_Node_Str"",""String_Node_Str""),props,relative);
 else {
      for (      TypeRef t : e.getTypes()) {
        JsonObject property=new JsonObject();
        JsonObject property_=null;
        String en=e.getName().replace(""String_Node_Str"",""String_Node_Str"");
        props.add(en + upFirst(t.getName()),property);
        property.addProperty(""String_Node_Str"",e.getDefinition());
        String tref=null;
        String type=null;
        String pattern=null;
        if (definitions.getPrimitives().containsKey(t.getName())) {
          DefinedCode def=definitions.getPrimitives().get(t.getName());
          type=def.getJsonType();
          pattern=def.getRegex();
          if (!Utilities.noString(pattern))           property.addProperty(""String_Node_Str"",pattern);
          property.addProperty(""String_Node_Str"",type);
          property_=new JsonObject();
          props.add(""String_Node_Str"" + en + upFirst(t.getName()),property_);
          property_.addProperty(""String_Node_Str"",""String_Node_Str"" + en + upFirst(t.getName()));
          tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
          property_.addProperty(""String_Node_Str"",tref);
        }
 else {
          String tn=encodeType(e,t,true);
          tref=(relative ? ""String_Node_Str"" : tn.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"" + tn.replace(""String_Node_Str"",""String_Node_Str"");
          property.addProperty(""String_Node_Str"",tref);
        }
      }
    }
  }
 else {
    JsonObject property=new JsonObject();
    JsonObject property_=null;
    props.add(e.getName(),property);
    property.addProperty(""String_Node_Str"",e.getDefinition());
    String tref=null;
    String type=null;
    String pattern=null;
    if (e.usesCompositeType()) {
      ElementDefn ref=root.getElementByName(definitions,e.typeCode().substring(1),true,false);
      String rtn=types.get(ref);
      if (rtn == null)       throw new Exception(""String_Node_Str"" + types.toString() + ""String_Node_Str"");
      if (rtn == ""String_Node_Str"")       rtn=""String_Node_Str"";
      type=rtn;
      tref=""String_Node_Str"" + rtn.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (e.getTypes().size() == 0 && e.getElements().size() > 0) {
      tref=""String_Node_Str"" + types.get(e).replace(""String_Node_Str"",""String_Node_Str"");
      type=types.get(e).replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (e.getTypes().size() == 1) {
      String tn=encodeType(e,e.getTypes().get(0),true);
      type=tn;
      if (definitions.getPrimitives().containsKey(e.typeCode())) {
        DefinedCode def=definitions.getPrimitives().get(e.typeCode());
        type=def.getJsonType();
        pattern=def.getRegex();
        property_=new JsonObject();
        props.add(""String_Node_Str"" + e.getName(),property_);
        property_.addProperty(""String_Node_Str"",""String_Node_Str"" + e.getName());
        tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
        BindingSpecification cd=e.getBinding();
        if (cd != null && (cd.getBinding() == BindingSpecification.BindingMethod.CodeList)) {
          ValueSet vs=cd.getValueSet();
          if (vs != null) {
            ValueSet ex=workerContext.expandVS(vs,true,false).getValueset();
            JsonArray enums=new JsonArray();
            for (            ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
              enums.add(new JsonPrimitive(cc.getCode()));
            }
            property.add(""String_Node_Str"",enums);
            pattern=null;
          }
        }
      }
 else {
        tref=(relative ? ""String_Node_Str"" : tn.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"" + tn.replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ Integer.toString(e.getTypes().size()));
    if (e.unbounded()) {
      property.addProperty(""String_Node_Str"",""String_Node_Str"");
      if (property_ != null) {
        property_.addProperty(""String_Node_Str"",""String_Node_Str"");
        JsonObject items=new JsonObject();
        property.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",type);
        if (!Utilities.noString(pattern))         items.addProperty(""String_Node_Str"",pattern);
        items=new JsonObject();
        property_.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",tref);
      }
 else {
        JsonObject items=new JsonObject();
        property.add(""String_Node_Str"",items);
        items.addProperty(""String_Node_Str"",tref);
      }
    }
 else {
      if (property_ != null) {
        property.addProperty(""String_Node_Str"",type);
        if (!Utilities.noString(pattern))         property.addProperty(""String_Node_Str"",pattern);
        property_.addProperty(""String_Node_Str"",tref);
      }
 else       if (""String_Node_Str"".equals(e.getName()) && ""String_Node_Str"".equals(type)) {
        property.addProperty(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        property.addProperty(""String_Node_Str"",tref);
      }
    }
    if (e.getMinCardinality() > 0 && property_ == null)     required.add(e.getName());
  }
}",0.6897887648740891
23363,"public JsonObject generate(ElementDefn root,String version,String genDate,JsonObject mainSchema) throws Exception {
  enums.clear();
  enumDefs.clear();
  JsonObject schema=mainSchema;
  JsonObject definitions;
  if (schema == null) {
    schema=new JsonObject();
    schema.addProperty(""String_Node_Str"",""String_Node_Str"");
    schema.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName());
    schema.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName());
    schema.addProperty(""String_Node_Str"",""String_Node_Str"");
    definitions=new JsonObject();
    schema.add(""String_Node_Str"",definitions);
  }
 else   definitions=schema.getAsJsonObject(""String_Node_Str"");
  scanTypes(root,root);
  generateType(root,root.getName(),root,true,definitions,mainSchema != null);
  for (  ElementDefn e : structures) {
    generateType(root,types.get(e),e,false,definitions,mainSchema != null);
  }
  return schema;
}","public JsonObject generate(ElementDefn root,String version,String genDate,JsonObject mainSchema) throws Exception {
  enums.clear();
  enumDefs.clear();
  JsonObject schema=mainSchema;
  JsonObject definitions;
  if (schema == null) {
    schema=new JsonObject();
    schema.addProperty(""String_Node_Str"",""String_Node_Str"");
    schema.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName());
    schema.addProperty(""String_Node_Str"",""String_Node_Str"" + root.getName().replace(""String_Node_Str"",""String_Node_Str""));
    schema.addProperty(""String_Node_Str"",""String_Node_Str"");
    definitions=new JsonObject();
    schema.add(""String_Node_Str"",definitions);
  }
 else   definitions=schema.getAsJsonObject(""String_Node_Str"");
  scanTypes(root,root);
  generateType(root,root.getName(),root,true,definitions,mainSchema != null);
  for (  ElementDefn e : structures) {
    generateType(root,types.get(e),e,false,definitions,mainSchema != null);
  }
  return schema;
}",0.976353126642144
23364,"private void generateAny(ElementDefn root,ElementDefn e,String prefix,JsonObject props,boolean relative) throws Exception {
  for (  TypeRef t : datatypes) {
    JsonObject property=new JsonObject();
    JsonObject property_=null;
    String en=e.getName().replace(""String_Node_Str"",""String_Node_Str"");
    props.add(en + upFirst(t.getName()),property);
    property.addProperty(""String_Node_Str"",e.getDefinition());
    String tref=null;
    String type=null;
    String pattern=null;
    if (definitions.getPrimitives().containsKey(t.getName())) {
      DefinedCode def=definitions.getPrimitives().get(t.getName());
      type=def.getJsonType();
      pattern=def.getRegex();
      if (!Utilities.noString(pattern))       property.addProperty(""String_Node_Str"",pattern);
      property.addProperty(""String_Node_Str"",type);
      property_=new JsonObject();
      props.add(en + upFirst(t.getName()) + ""String_Node_Str"",property_);
      property_.addProperty(""String_Node_Str"",""String_Node_Str"" + en + upFirst(t.getName()));
      tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
      property_.addProperty(""String_Node_Str"",tref);
    }
 else {
      String tn=encodeType(e,t,true);
      tref=(relative ? ""String_Node_Str"" : tn + ""String_Node_Str"") + ""String_Node_Str"" + tn;
      property.addProperty(""String_Node_Str"",tref);
    }
  }
}","private void generateAny(ElementDefn root,ElementDefn e,String prefix,JsonObject props,boolean relative) throws Exception {
  for (  TypeRef t : datatypes) {
    JsonObject property=new JsonObject();
    JsonObject property_=null;
    String en=e.getName().replace(""String_Node_Str"",""String_Node_Str"");
    props.add(en + upFirst(t.getName()),property);
    property.addProperty(""String_Node_Str"",e.getDefinition());
    String tref=null;
    String type=null;
    String pattern=null;
    if (definitions.getPrimitives().containsKey(t.getName())) {
      DefinedCode def=definitions.getPrimitives().get(t.getName());
      type=def.getJsonType();
      pattern=def.getRegex();
      if (!Utilities.noString(pattern))       property.addProperty(""String_Node_Str"",pattern);
      property.addProperty(""String_Node_Str"",type);
      property_=new JsonObject();
      props.add(""String_Node_Str"" + en + upFirst(t.getName()),property_);
      property_.addProperty(""String_Node_Str"",""String_Node_Str"" + en + upFirst(t.getName()));
      tref=(relative ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
      property_.addProperty(""String_Node_Str"",tref);
    }
 else {
      String tn=encodeType(e,t,true);
      tref=(relative ? ""String_Node_Str"" : tn.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"" + tn.replace(""String_Node_Str"",""String_Node_Str"");
      property.addProperty(""String_Node_Str"",tref);
    }
  }
}",0.7111581920903954
23365,"private void loadPaths(JsonObject igs) throws Exception {
  JsonElement e=igs.get(""String_Node_Str"");
  if (e == null)   throw new Exception(""String_Node_Str"");
  canonical=e.getAsString();
  defaultConfig=igs.getAsJsonObject(""String_Node_Str"");
  resourceConfig=igs.getAsJsonObject(""String_Node_Str"");
  if (resourceConfig == null)   throw new Exception(""String_Node_Str"");
  for (  Entry<String,JsonElement> pp : resourceConfig.entrySet()) {
    if (!pp.getKey().startsWith(""String_Node_Str"")) {
      String s=pp.getKey();
      if (!s.contains(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + s);
      String type=s.substring(0,s.indexOf(""String_Node_Str""));
      String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
      try {
        ResourceType.fromCode(type);
      }
 catch (      Exception ex) {
        throw new Exception(""String_Node_Str"" + s);
      }
      if (!id.matches(FormatUtilities.ID_REGEX))       throw new Exception(""String_Node_Str"" + s);
      if (!(pp.getValue() instanceof JsonObject))       throw new Exception(""String_Node_Str"");
      JsonObject o=(JsonObject)pp.getValue();
      JsonElement p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
      p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
      p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
    }
  }
}","private void loadPaths(JsonObject igs) throws Exception {
  JsonElement e=igs.get(""String_Node_Str"");
  if (e == null)   throw new Exception(""String_Node_Str"");
  canonical=e.getAsString();
  defaultConfig=igs.getAsJsonObject(""String_Node_Str"");
  resourceConfig=igs.getAsJsonObject(""String_Node_Str"");
  if (resourceConfig == null)   throw new Exception(""String_Node_Str"");
  for (  Entry<String,JsonElement> pp : resourceConfig.entrySet()) {
    if (!pp.getKey().startsWith(""String_Node_Str"")) {
      String s=pp.getKey();
      if (!s.contains(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + s);
      String type=s.substring(0,s.indexOf(""String_Node_Str""));
      String id=s.substring(s.indexOf(""String_Node_Str"") + 1);
      if (!context.hasResource(StructureDefinition.class,""String_Node_Str"" + type))       throw new Exception(""String_Node_Str"" + s);
      if (!id.matches(FormatUtilities.ID_REGEX))       throw new Exception(""String_Node_Str"" + s);
      if (!(pp.getValue() instanceof JsonObject))       throw new Exception(""String_Node_Str"");
      JsonObject o=(JsonObject)pp.getValue();
      JsonElement p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
      p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
      p=o.get(""String_Node_Str"");
      if (p != null && !(p instanceof JsonPrimitive) && !((JsonPrimitive)p).isString())       throw new Exception(""String_Node_Str"");
    }
  }
}",0.940998487140696
23366,"private void generateByProfile(ResourceWrapper res,StructureDefinition profile,BaseWrapper e,List<ElementDefinition> allElements,ElementDefinition defn,List<ElementDefinition> children,XhtmlNode x,String path,boolean showCodeDetails) throws FHIRException, UnsupportedEncodingException, IOException {
  if (children.isEmpty()) {
    renderLeaf(res,e,defn,x,false,showCodeDetails,readDisplayHints(defn),path);
  }
 else {
    for (    PropertyWrapper p : splitExtensions(profile,e.children())) {
      if (p.hasValues()) {
        ElementDefinition child=getElementDefinition(children,path + ""String_Node_Str"" + p.getName(),p);
        if (child != null) {
          Map<String,String> displayHints=readDisplayHints(child);
          if (!exemptFromRendering(child)) {
            List<ElementDefinition> grandChildren=getChildrenForPath(allElements,path + ""String_Node_Str"" + p.getName());
            filterGrandChildren(grandChildren,path + ""String_Node_Str"" + p.getName(),p);
            if (p.getValues().size() > 0 && child != null) {
              if (isPrimitive(child)) {
                XhtmlNode para=x.addTag(""String_Node_Str"");
                String name=p.getName();
                if (name.endsWith(""String_Node_Str""))                 name=name.substring(0,name.length() - 3);
                if (showCodeDetails || !isDefaultValue(displayHints,p.getValues())) {
                  para.addTag(""String_Node_Str"").addText(name);
                  para.addText(""String_Node_Str"");
                  if (renderAsList(child) && p.getValues().size() > 1) {
                    XhtmlNode list=x.addTag(""String_Node_Str"");
                    for (                    BaseWrapper v : p.getValues())                     renderLeaf(res,v,child,list.addTag(""String_Node_Str""),false,showCodeDetails,displayHints,path);
                  }
 else {
                    boolean first=true;
                    for (                    BaseWrapper v : p.getValues()) {
                      if (first)                       first=false;
 else                       para.addText(""String_Node_Str"");
                      renderLeaf(res,v,child,para,false,showCodeDetails,displayHints,path);
                    }
                  }
                }
              }
 else               if (canDoTable(path,p,grandChildren)) {
                x.addTag(""String_Node_Str"").addText(Utilities.capitalize(Utilities.camelCase(Utilities.pluralizeMe(p.getName()))));
                XhtmlNode tbl=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
                XhtmlNode tr=tbl.addTag(""String_Node_Str"");
                tr.addTag(""String_Node_Str"").addText(""String_Node_Str"");
                addColumnHeadings(tr,grandChildren);
                for (                BaseWrapper v : p.getValues()) {
                  if (v != null) {
                    tr=tbl.addTag(""String_Node_Str"");
                    tr.addTag(""String_Node_Str"").addText(""String_Node_Str"");
                    addColumnValues(res,tr,grandChildren,v,showCodeDetails,displayHints,path);
                  }
                }
              }
 else {
                for (                BaseWrapper v : p.getValues()) {
                  if (v != null) {
                    XhtmlNode bq=x.addTag(""String_Node_Str"");
                    bq.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(p.getName());
                    generateByProfile(res,profile,v,allElements,child,grandChildren,bq,path + ""String_Node_Str"" + p.getName(),showCodeDetails);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}","private void generateByProfile(ResourceWrapper res,StructureDefinition profile,BaseWrapper e,List<ElementDefinition> allElements,ElementDefinition defn,List<ElementDefinition> children,XhtmlNode x,String path,boolean showCodeDetails) throws FHIRException, UnsupportedEncodingException, IOException {
  if (children.isEmpty()) {
    renderLeaf(res,e,defn,x,false,showCodeDetails,readDisplayHints(defn),path);
  }
 else {
    for (    PropertyWrapper p : splitExtensions(profile,e.children())) {
      if (p.hasValues()) {
        ElementDefinition child=getElementDefinition(children,path + ""String_Node_Str"" + p.getName(),p);
        if (child != null) {
          Map<String,String> displayHints=readDisplayHints(child);
          if (!exemptFromRendering(child)) {
            List<ElementDefinition> grandChildren=getChildrenForPath(allElements,path + ""String_Node_Str"" + p.getName());
            filterGrandChildren(grandChildren,path + ""String_Node_Str"" + p.getName(),p);
            if (p.getValues().size() > 0 && child != null) {
              if (isPrimitive(child)) {
                XhtmlNode para=x.addTag(""String_Node_Str"");
                String name=p.getName();
                if (name.endsWith(""String_Node_Str""))                 name=name.substring(0,name.length() - 3);
                if (showCodeDetails || !isDefaultValue(displayHints,p.getValues())) {
                  para.addTag(""String_Node_Str"").addText(name);
                  para.addText(""String_Node_Str"");
                  if (renderAsList(child) && p.getValues().size() > 1) {
                    XhtmlNode list=x.addTag(""String_Node_Str"");
                    for (                    BaseWrapper v : p.getValues())                     renderLeaf(res,v,child,list.addTag(""String_Node_Str""),false,showCodeDetails,displayHints,path);
                  }
 else {
                    boolean first=true;
                    for (                    BaseWrapper v : p.getValues()) {
                      if (first)                       first=false;
 else                       para.addText(""String_Node_Str"");
                      renderLeaf(res,v,child,para,false,showCodeDetails,displayHints,path);
                    }
                  }
                }
              }
 else               if (canDoTable(path,p,grandChildren)) {
                x.addTag(getHeader()).addText(Utilities.capitalize(Utilities.camelCase(Utilities.pluralizeMe(p.getName()))));
                XhtmlNode tbl=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
                XhtmlNode tr=tbl.addTag(""String_Node_Str"");
                tr.addTag(""String_Node_Str"").addText(""String_Node_Str"");
                addColumnHeadings(tr,grandChildren);
                for (                BaseWrapper v : p.getValues()) {
                  if (v != null) {
                    tr=tbl.addTag(""String_Node_Str"");
                    tr.addTag(""String_Node_Str"").addText(""String_Node_Str"");
                    addColumnValues(res,tr,grandChildren,v,showCodeDetails,displayHints,path);
                  }
                }
              }
 else {
                for (                BaseWrapper v : p.getValues()) {
                  if (v != null) {
                    XhtmlNode bq=x.addTag(""String_Node_Str"");
                    bq.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(p.getName());
                    generateByProfile(res,profile,v,allElements,child,grandChildren,bq,path + ""String_Node_Str"" + p.getName(),showCodeDetails);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9961738179830556
23367,"private boolean generateExpansion(XhtmlNode x,ValueSet vs,ValueSet src,boolean header) throws FHIRFormatError, DefinitionException, IOException {
  boolean hasExtensions=false;
  List<String> langs=new ArrayList<String>();
  Map<ConceptMap,String> mymaps=new HashMap<ConceptMap,String>();
  if (header) {
    XhtmlNode h=x.addTag(""String_Node_Str"");
    h.addText(""String_Node_Str"");
    if (IsNotFixedExpansion(vs))     addMarkdown(x,vs.getDescription());
    if (vs.hasCopyright())     generateCopyright(x,vs);
  }
  if (ToolingExtensions.hasExtension(vs.getExpansion(),""String_Node_Str""))   x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"").addText(vs.getExpansion().getContains().isEmpty() ? tooCostlyNoteEmpty : tooCostlyNoteNotEmpty);
 else {
    Integer count=countMembership(vs);
    if (count == null)     x.addTag(""String_Node_Str"").addText(""String_Node_Str"");
 else     x.addTag(""String_Node_Str"").addText(""String_Node_Str"" + count.toString() + ""String_Node_Str"");
  }
  CodeSystem allCS=null;
  boolean doSystem=true;
  boolean doDefinition=checkDoDefinition(vs.getExpansion().getContains());
  if (doSystem && allFromOneSystem(vs)) {
    doSystem=false;
    XhtmlNode p=x.addTag(""String_Node_Str"");
    p.addText(""String_Node_Str"");
    allCS=context.fetchCodeSystem(vs.getExpansion().getContains().get(0).getSystem());
    String ref=null;
    if (allCS != null)     ref=getCsRef(allCS);
    if (ref == null)     p.addTag(""String_Node_Str"").addText(vs.getExpansion().getContains().get(0).getSystem());
 else     p.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",prefix + ref).addTag(""String_Node_Str"").addText(vs.getExpansion().getContains().get(0).getSystem());
  }
  XhtmlNode t=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  if (doSystem)   tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  if (doDefinition)   tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  addMapHeaders(tr,mymaps);
  for (  ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
    addExpansionRowToTable(t,c,0,doSystem,doDefinition,mymaps,allCS,langs);
  }
  if (langs.size() > 0) {
    Collections.sort(langs);
    x.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
    t=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
    tr=t.addTag(""String_Node_Str"");
    tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
    for (    String lang : langs)     tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(describeLang(lang));
    for (    ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
      addLanguageRow(c,t,langs);
    }
  }
  return hasExtensions;
}","private boolean generateExpansion(XhtmlNode x,ValueSet vs,ValueSet src,boolean header) throws FHIRFormatError, DefinitionException, IOException {
  boolean hasExtensions=false;
  List<String> langs=new ArrayList<String>();
  Map<ConceptMap,String> mymaps=new HashMap<ConceptMap,String>();
  if (header) {
    XhtmlNode h=x.addTag(getHeader());
    h.addText(""String_Node_Str"");
    if (IsNotFixedExpansion(vs))     addMarkdown(x,vs.getDescription());
    if (vs.hasCopyright())     generateCopyright(x,vs);
  }
  if (ToolingExtensions.hasExtension(vs.getExpansion(),""String_Node_Str""))   x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"").addText(vs.getExpansion().getContains().isEmpty() ? tooCostlyNoteEmpty : tooCostlyNoteNotEmpty);
 else {
    Integer count=countMembership(vs);
    if (count == null)     x.addTag(""String_Node_Str"").addText(""String_Node_Str"");
 else     x.addTag(""String_Node_Str"").addText(""String_Node_Str"" + count.toString() + ""String_Node_Str"");
  }
  CodeSystem allCS=null;
  boolean doSystem=true;
  boolean doDefinition=checkDoDefinition(vs.getExpansion().getContains());
  if (doSystem && allFromOneSystem(vs)) {
    doSystem=false;
    XhtmlNode p=x.addTag(""String_Node_Str"");
    p.addText(""String_Node_Str"");
    allCS=context.fetchCodeSystem(vs.getExpansion().getContains().get(0).getSystem());
    String ref=null;
    if (allCS != null)     ref=getCsRef(allCS);
    if (ref == null)     p.addTag(""String_Node_Str"").addText(vs.getExpansion().getContains().get(0).getSystem());
 else     p.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",prefix + ref).addTag(""String_Node_Str"").addText(vs.getExpansion().getContains().get(0).getSystem());
  }
  XhtmlNode t=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  if (doSystem)   tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  if (doDefinition)   tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
  addMapHeaders(tr,mymaps);
  for (  ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
    addExpansionRowToTable(t,c,0,doSystem,doDefinition,mymaps,allCS,langs);
  }
  if (langs.size() > 0) {
    Collections.sort(langs);
    x.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
    t=x.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"");
    tr=t.addTag(""String_Node_Str"");
    tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(""String_Node_Str"");
    for (    String lang : langs)     tr.addTag(""String_Node_Str"").addTag(""String_Node_Str"").addText(describeLang(lang));
    for (    ValueSetExpansionContainsComponent c : vs.getExpansion().getContains()) {
      addLanguageRow(c,t,langs);
    }
  }
  return hasExtensions;
}",0.9954022988505749
23368,"private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (tr.getCode().equals(""String_Node_Str""))     res.add(tr.getProfile());
  }
  return res;
}","private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (""String_Node_Str"".equals(tr.getCode()))     res.add(tr.getProfile());
  }
  return res;
}",0.8858267716535433
23369,"private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (tr.getCode().equals(""String_Node_Str""))     res.add(tr.getProfile());
  }
  return res;
}","private List<String> listReferenceProfiles(ElementDefinition ed){
  List<String> res=new ArrayList<String>();
  for (  TypeRefComponent tr : ed.getType()) {
    if (""String_Node_Str"".equals(tr.getCode()))     res.add(tr.getProfile());
  }
  return res;
}",0.8858267716535433
23370,"@Override public List<BaseConformance> allConformanceResources(){
  List<BaseConformance> result=new ArrayList<BaseConformance>();
  result.addAll(structures.values());
  result.addAll(codeSystems.values());
  result.addAll(valueSets.values());
  result.addAll(maps.values());
  result.addAll(transforms.values());
  return result;
}","@Override public List<BaseConformance> allConformanceResources(){
  List<BaseConformance> result=new ArrayList<BaseConformance>();
  result.addAll(structures.values());
  result.addAll(codeSystems.values());
  result.addAll(valueSets.values());
  result.addAll(maps.values());
  result.addAll(transforms.values());
  result.addAll(searchparams);
  return result;
}",0.9555236728837876
23371,"public void seeResource(String url,Resource r) throws FHIRException {
  if (r instanceof StructureDefinition)   seeProfile(url,(StructureDefinition)r);
 else   if (r instanceof ValueSet)   seeValueSet(url,(ValueSet)r);
 else   if (r instanceof CodeSystem)   seeCodeSystem(url,(CodeSystem)r);
 else   if (r instanceof ConceptMap)   maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else   if (r instanceof StructureMap)   transforms.put(((StructureMap)r).getUrl(),(StructureMap)r);
 else   if (r instanceof NamingSystem)   systems.add((NamingSystem)r);
}","public void seeResource(String url,Resource r) throws FHIRException {
  if (r instanceof StructureDefinition)   seeProfile(url,(StructureDefinition)r);
 else   if (r instanceof ValueSet)   seeValueSet(url,(ValueSet)r);
 else   if (r instanceof CodeSystem)   seeCodeSystem(url,(CodeSystem)r);
 else   if (r instanceof ConceptMap)   maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else   if (r instanceof StructureMap)   transforms.put(((StructureMap)r).getUrl(),(StructureMap)r);
 else   if (r instanceof NamingSystem)   systems.add((NamingSystem)r);
 else   if (r instanceof SearchParameter)   searchparams.add((SearchParameter)r);
}",0.93109243697479
23372,"@Override public void setValueAsString(String theValue) throws IllegalArgumentException {
  this.attributes=null;
  this.childNodes=null;
  this.content=null;
  this.name=null;
  this.nodeType=null;
  if (isBlank(theValue)) {
    return;
  }
  String val=theValue.trim();
  if (!val.startsWith(""String_Node_Str"")) {
    val=""String_Node_Str"" + DECL_XMLNS + ""String_Node_Str""+ val+ ""String_Node_Str"";
  }
  if (val.startsWith(""String_Node_Str"") && val.endsWith(""String_Node_Str"")) {
    return;
  }
  val=XhtmlDt.preprocessXhtmlNamespaceDeclaration(val);
  try {
    XhtmlNode fragment=new XhtmlParser().parseFragment(val);
    this.attributes=fragment.attributes;
    this.childNodes=fragment.childNodes;
    this.content=fragment.content;
    this.name=fragment.name;
    this.nodeType=fragment.nodeType;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void setValueAsString(String theValue) throws IllegalArgumentException {
  this.attributes=null;
  this.childNodes=null;
  this.content=null;
  this.name=null;
  this.nodeType=null;
  if (theValue == null || theValue.length() == 0) {
    return;
  }
  String val=theValue.trim();
  if (!val.startsWith(""String_Node_Str"")) {
    val=""String_Node_Str"" + DECL_XMLNS + ""String_Node_Str""+ val+ ""String_Node_Str"";
  }
  if (val.startsWith(""String_Node_Str"") && val.endsWith(""String_Node_Str"")) {
    return;
  }
  val=XhtmlDt.preprocessXhtmlNamespaceDeclaration(val);
  try {
    XhtmlNode fragment=new XhtmlParser().parseFragment(val);
    this.attributes=fragment.attributes;
    this.childNodes=fragment.childNodes;
    this.content=fragment.content;
    this.name=fragment.name;
    this.nodeType=fragment.nodeType;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.975774647887324
23373,"public void closeDifferential(StructureDefinition base,StructureDefinition derived) throws FHIRException {
  for (  ElementDefinition edb : base.getSnapshot().getElement()) {
    if (isImmediateChild(edb) && !edb.getPath().endsWith(""String_Node_Str"")) {
      ElementDefinition edm=getMatchInDerived(edb,derived.getDifferential().getElement());
      if (edm == null) {
        ElementDefinition edd=derived.getDifferential().addElement();
        edd.setPath(edb.getPath());
        edd.setMax(""String_Node_Str"");
      }
 else {
        closeChildren(base,edb,derived,edm);
      }
    }
  }
  sortDifferential(base,derived,derived.getName(),new ArrayList<String>());
}","public void closeDifferential(StructureDefinition base,StructureDefinition derived) throws FHIRException {
  for (  ElementDefinition edb : base.getSnapshot().getElement()) {
    if (isImmediateChild(edb) && !edb.getPath().endsWith(""String_Node_Str"")) {
      ElementDefinition edm=getMatchInDerived(edb,derived.getDifferential().getElement());
      if (edm == null) {
        ElementDefinition edd=derived.getDifferential().addElement();
        edd.setPath(edb.getPath());
        edd.setMax(""String_Node_Str"");
      }
 else       if (edb.hasSlicing()) {
        closeChildren(base,edb,derived,edm);
      }
    }
  }
  sortDifferential(base,derived,derived.getName(),new ArrayList<String>());
}",0.9795620437956204
23374,"public List<Element> getChildren(String name){
  List<Element> res=new ArrayList<Element>();
  for (  Element child : children) {
    if (name.equals(child.getName()))     res.add(child);
  }
  return res;
}","public List<Element> getChildren(String name){
  List<Element> res=new ArrayList<Element>();
  if (children != null)   for (  Element child : children) {
    if (name.equals(child.getName()))     res.add(child);
  }
  return res;
}",0.9452054794520548
23375,"private Element getValueForDiscriminator(Object appContext,List<ValidationMessage> errors,Element element,String discriminator,ElementDefinition criteria,NodeStack stack) throws FHIRException, IOException {
  String p=stack.getLiteralPath();
  Element focus=element;
  String[] dlist=discriminator.split(""String_Node_Str"");
  for (  String d : dlist) {
    if (focus.fhirType().equals(""String_Node_Str"") && d.equals(""String_Node_Str"")) {
      String url=focus.getChildValue(""String_Node_Str"");
      if (Utilities.noString(url))       throw new FHIRException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ element.getProperty().getName());
      Element target=resolve(appContext,url,stack,errors,p);
      if (target == null)       throw new FHIRException(""String_Node_Str"" + url + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=target;
    }
 else {
      List<Element> children=focus.getChildren(d);
      if (children.isEmpty())       throw new FHIRException(""String_Node_Str"" + d + ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      if (children.size() > 1)       throw new FHIRException(""String_Node_Str"" + Integer.toString(children.size()) + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=children.get(0);
      p=p + ""String_Node_Str"" + d;
    }
  }
  return focus;
}","private Element getValueForDiscriminator(Object appContext,List<ValidationMessage> errors,Element element,String discriminator,ElementDefinition criteria,NodeStack stack) throws FHIRException, IOException {
  String p=stack.getLiteralPath() + ""String_Node_Str"" + element.getName();
  Element focus=element;
  String[] dlist=discriminator.split(""String_Node_Str"");
  for (  String d : dlist) {
    if (focus.fhirType().equals(""String_Node_Str"") && d.equals(""String_Node_Str"")) {
      String url=focus.getChildValue(""String_Node_Str"");
      if (Utilities.noString(url))       throw new FHIRException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ element.getProperty().getName());
      Element target=resolve(appContext,url,stack,errors,p);
      if (target == null)       throw new FHIRException(""String_Node_Str"" + url + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=target;
    }
 else     if (d.equals(""String_Node_Str"") && focus.isPrimitive()) {
      return focus;
    }
 else {
      List<Element> children=focus.getChildren(d);
      if (children.isEmpty())       throw new FHIRException(""String_Node_Str"" + d + ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      if (children.size() > 1)       throw new FHIRException(""String_Node_Str"" + Integer.toString(children.size()) + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=children.get(0);
      p=p + ""String_Node_Str"" + d;
    }
  }
  return focus;
}",0.9565217391304348
23376,"public void closeDifferential(StructureDefinition base,StructureDefinition derived) throws FHIRException {
  for (  ElementDefinition edb : base.getSnapshot().getElement()) {
    if (isImmediateChild(edb) && !edb.getPath().endsWith(""String_Node_Str"")) {
      ElementDefinition edm=getMatchInDerived(edb,derived.getDifferential().getElement());
      if (edm == null) {
        ElementDefinition edd=derived.getDifferential().addElement();
        edd.setPath(edb.getPath());
        edd.setMax(""String_Node_Str"");
      }
 else {
        closeChildren(base,edb,derived,edm);
      }
    }
  }
  sortDifferential(base,derived,derived.getName(),new ArrayList<String>());
}","public void closeDifferential(StructureDefinition base,StructureDefinition derived) throws FHIRException {
  for (  ElementDefinition edb : base.getSnapshot().getElement()) {
    if (isImmediateChild(edb) && !edb.getPath().endsWith(""String_Node_Str"")) {
      ElementDefinition edm=getMatchInDerived(edb,derived.getDifferential().getElement());
      if (edm == null) {
        ElementDefinition edd=derived.getDifferential().addElement();
        edd.setPath(edb.getPath());
        edd.setMax(""String_Node_Str"");
      }
 else       if (edb.hasSlicing()) {
        closeChildren(base,edb,derived,edm);
      }
    }
  }
  sortDifferential(base,derived,derived.getName(),new ArrayList<String>());
}",0.9795620437956204
23377,"public List<Element> getChildren(String name){
  List<Element> res=new ArrayList<Element>();
  for (  Element child : children) {
    if (name.equals(child.getName()))     res.add(child);
  }
  return res;
}","public List<Element> getChildren(String name){
  List<Element> res=new ArrayList<Element>();
  if (children != null)   for (  Element child : children) {
    if (name.equals(child.getName()))     res.add(child);
  }
  return res;
}",0.9452054794520548
23378,"private Element getValueForDiscriminator(Object appContext,List<ValidationMessage> errors,Element element,String discriminator,ElementDefinition criteria,NodeStack stack) throws FHIRException, IOException {
  String p=stack.getLiteralPath();
  Element focus=element;
  String[] dlist=discriminator.split(""String_Node_Str"");
  for (  String d : dlist) {
    if (focus.fhirType().equals(""String_Node_Str"") && d.equals(""String_Node_Str"")) {
      String url=focus.getChildValue(""String_Node_Str"");
      if (Utilities.noString(url))       throw new FHIRException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ element.getProperty().getName());
      Element target=resolve(appContext,url,stack,errors,p);
      if (target == null)       throw new FHIRException(""String_Node_Str"" + url + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=target;
    }
 else {
      List<Element> children=focus.getChildren(d);
      if (children.isEmpty())       throw new FHIRException(""String_Node_Str"" + d + ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      if (children.size() > 1)       throw new FHIRException(""String_Node_Str"" + Integer.toString(children.size()) + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=children.get(0);
      p=p + ""String_Node_Str"" + d;
    }
  }
  return focus;
}","private Element getValueForDiscriminator(Object appContext,List<ValidationMessage> errors,Element element,String discriminator,ElementDefinition criteria,NodeStack stack) throws FHIRException, IOException {
  String p=stack.getLiteralPath() + ""String_Node_Str"" + element.getName();
  Element focus=element;
  String[] dlist=discriminator.split(""String_Node_Str"");
  for (  String d : dlist) {
    if (focus.fhirType().equals(""String_Node_Str"") && d.equals(""String_Node_Str"")) {
      String url=focus.getChildValue(""String_Node_Str"");
      if (Utilities.noString(url))       throw new FHIRException(""String_Node_Str"" + discriminator + ""String_Node_Str""+ element.getProperty().getName());
      Element target=resolve(appContext,url,stack,errors,p);
      if (target == null)       throw new FHIRException(""String_Node_Str"" + url + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=target;
    }
 else     if (d.equals(""String_Node_Str"") && focus.isPrimitive()) {
      return focus;
    }
 else {
      List<Element> children=focus.getChildren(d);
      if (children.isEmpty())       throw new FHIRException(""String_Node_Str"" + d + ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      if (children.size() > 1)       throw new FHIRException(""String_Node_Str"" + Integer.toString(children.size()) + ""String_Node_Str""+ d+ ""String_Node_Str""+ discriminator+ ""String_Node_Str""+ element.getProperty().getName());
      focus=children.get(0);
      p=p + ""String_Node_Str"" + d;
    }
  }
  return focus;
}",0.9565217391304348
23379,"private void addPageDataRow(JsonObject pages,String url,String title,String label,String breadcrumb,Set<FetchedResource> examples){
  JsonObject jsonPage=new JsonObject();
  pages.add(url,jsonPage);
  jsonPage.addProperty(""String_Node_Str"",title);
  jsonPage.addProperty(""String_Node_Str"",label);
  jsonPage.addProperty(""String_Node_Str"",breadcrumb);
  String baseUrl=url.substring(0,url.indexOf(""String_Node_Str""));
  String contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
  if (new File(contentFile).exists()) {
    jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  }
  contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
  if (new File(contentFile).exists()) {
    jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  }
  if (examples != null) {
    JsonArray exampleArray=new JsonArray();
    jsonPage.add(""String_Node_Str"",exampleArray);
    TreeSet<ImplementationGuidePageComponent> examplePages=new TreeSet<ImplementationGuidePageComponent>(new ImplementationGuidePageComponentComparator());
    for (    FetchedResource exampleResource : examples) {
      ImplementationGuidePageComponent page=pageForFetchedResource(exampleResource);
      if (page == null)       throw new Error(""String_Node_Str"" + exampleResource.getId());
 else       examplePages.add(page);
    }
    for (    ImplementationGuidePageComponent examplePage : examplePages) {
      JsonObject exampleItem=new JsonObject();
      exampleArray.add(exampleItem);
      exampleItem.addProperty(""String_Node_Str"",examplePage.getSource());
      exampleItem.addProperty(""String_Node_Str"",examplePage.getTitle());
    }
  }
}","private void addPageDataRow(JsonObject pages,String url,String title,String label,String breadcrumb,Set<FetchedResource> examples){
  JsonObject jsonPage=new JsonObject();
  pages.add(url,jsonPage);
  jsonPage.addProperty(""String_Node_Str"",title);
  jsonPage.addProperty(""String_Node_Str"",label);
  jsonPage.addProperty(""String_Node_Str"",breadcrumb);
  String baseUrl=url.substring(0,url.indexOf(""String_Node_Str""));
  String contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
  if (new File(contentFile).exists()) {
    jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  }
  contentFile=pagesDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ baseUrl+ ""String_Node_Str"";
  if (new File(contentFile).exists()) {
    jsonPage.addProperty(""String_Node_Str"",""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  }
  if (examples != null) {
    JsonArray exampleArray=new JsonArray();
    jsonPage.add(""String_Node_Str"",exampleArray);
    TreeSet<ImplementationGuidePageComponent> examplePages=new TreeSet<ImplementationGuidePageComponent>(new ImplementationGuidePageComponentComparator());
    for (    FetchedResource exampleResource : examples) {
      ImplementationGuidePageComponent page=pageForFetchedResource(exampleResource);
      if (page != null)       examplePages.add(page);
    }
    for (    ImplementationGuidePageComponent examplePage : examplePages) {
      JsonObject exampleItem=new JsonObject();
      exampleArray.add(exampleItem);
      exampleItem.addProperty(""String_Node_Str"",examplePage.getSource());
      exampleItem.addProperty(""String_Node_Str"",examplePage.getTitle());
    }
  }
}",0.9752947782144864
23380,"private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb,boolean includeExamples){
  String sourceBase=Utilities.changeFileExt(page.getSource(),""String_Node_Str"");
  addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    if (includeExamples) {
      FetchedResource r=resources.get(source);
      addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),r.getExamples());
    }
 else     addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true),includeExamples);
    i++;
  }
}","private void addPageData(JsonObject pages,ImplementationGuidePageComponent page,String source,String title,String label,String breadcrumb,boolean includeExamples){
  String sourceBase=Utilities.changeFileExt(page.getSource(),""String_Node_Str"");
  addPageDataRow(pages,source,title,label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  if (page.getKind().equals(ImplementationGuide.GuidePageKind.RESOURCE) && page.getFormat().equals(""String_Node_Str"")) {
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    if (includeExamples) {
      FetchedResource r=resources.get(source);
      if (r != null)       addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),r.getExamples());
    }
 else     addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
    addPageDataRow(pages,sourceBase + ""String_Node_Str"",page.getTitle() + ""String_Node_Str"",label,breadcrumb + breadCrumbForPage(page,false),null);
  }
  int i=1;
  for (  ImplementationGuidePageComponent childPage : page.getPage()) {
    addPageData(pages,childPage,(label.equals(""String_Node_Str"") ? ""String_Node_Str"" : label + ""String_Node_Str"") + Integer.toString(i),breadcrumb + breadCrumbForPage(page,true),includeExamples);
    i++;
  }
}",0.9955099422706865
23381,"public static org.hl7.fhir.dstu2016may.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeSystem)   return convertCodeSystem((org.hl7.fhir.dstu3.model.CodeSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CompartmentDefinition)   return convertCompartmentDefinition((org.hl7.fhir.dstu3.model.CompartmentDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public static org.hl7.fhir.dstu2016may.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeSystem)   return convertCodeSystem((org.hl7.fhir.dstu3.model.CodeSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CompartmentDefinition)   return convertCompartmentDefinition((org.hl7.fhir.dstu3.model.CompartmentDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9880205362236166
23382,"private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd,boolean close) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  utils.setIds(sd,true);
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      if (close)       utils.closeDifferential(base,sd);
 else       utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,true);
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (!sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  validateExpressions(f,sd);
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(convertToElement(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}","private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd,boolean close) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  utils.setIds(sd,true);
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      if (close)       utils.closeDifferential(base,sd);
 else       utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,true);
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (!sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(convertToElement(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}",0.9919556171983356
23383,"private void loadConformance() throws Exception {
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  generateSnapshots();
  generateLogicalMaps();
  load(""String_Node_Str"");
  generateAdditionalExamples();
  executeTransforms();
}","private void loadConformance() throws Exception {
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  load(""String_Node_Str"");
  generateSnapshots();
  generateLogicalMaps();
  load(""String_Node_Str"");
  generateAdditionalExamples();
  executeTransforms();
  validateExpressions();
}",0.9694749694749696
23384,"public ValueSetExpansionOutcome(String error,ExpansionErrorClass errorClass){
  this.valueset=null;
  this.service=null;
  this.error=error;
  this.errorClass=errorClass;
}","public ValueSetExpansionOutcome(String error,TerminologyServiceErrorClass errorClass){
  this.valueset=null;
  this.service=null;
  this.error=error;
  this.errorClass=errorClass;
}",0.9348441926345608
23385,"public ExpansionErrorClass getErrorClass(){
  return errorClass;
}","public TerminologyServiceErrorClass getErrorClass(){
  return errorClass;
}",0.8368794326241135
23386,"@Override public ValueSetExpansionOutcome expand(ValueSet source,ExpansionProfile profile){
  if (profile == null)   profile=makeDefaultExpansion();
  try {
    focus=source.copy();
    focus.setExpansion(new ValueSet.ValueSetExpansionComponent());
    focus.getExpansion().setTimestampElement(DateTimeType.now());
    focus.getExpansion().setIdentifier(Factory.createUUID());
    if (!profile.getUrl().startsWith(""String_Node_Str""))     focus.getExpansion().addParameter().setName(""String_Node_Str"").setValue(new UriType(profile.getUrl()));
    if (source.hasCompose())     handleCompose(source.getCompose(),focus.getExpansion().getParameter(),profile);
    if (canBeHeirarchy) {
      for (      ValueSetExpansionContainsComponent c : roots) {
        focus.getExpansion().getContains().add(c);
      }
    }
 else {
      for (      ValueSetExpansionContainsComponent c : codes) {
        if (map.containsKey(key(c)) && !c.getAbstract()) {
          focus.getExpansion().getContains().add(c);
          c.getContains().clear();
        }
      }
    }
    if (total > 0) {
      focus.getExpansion().setTotal(total);
    }
    return new ValueSetExpansionOutcome(focus);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  NoTerminologyServiceException e) {
    return new ValueSetExpansionOutcome(new ValueSetCheckerSimple(source,factory,context),e.getMessage(),ExpansionErrorClass.NOSERVICE);
  }
catch (  Exception e) {
    return new ValueSetExpansionOutcome(new ValueSetCheckerSimple(source,factory,context),e.getMessage(),ExpansionErrorClass.UNKNOWN);
  }
}","@Override public ValueSetExpansionOutcome expand(ValueSet source,ExpansionProfile profile){
  if (profile == null)   profile=makeDefaultExpansion();
  try {
    focus=source.copy();
    focus.setExpansion(new ValueSet.ValueSetExpansionComponent());
    focus.getExpansion().setTimestampElement(DateTimeType.now());
    focus.getExpansion().setIdentifier(Factory.createUUID());
    if (!profile.getUrl().startsWith(""String_Node_Str""))     focus.getExpansion().addParameter().setName(""String_Node_Str"").setValue(new UriType(profile.getUrl()));
    if (source.hasCompose())     handleCompose(source.getCompose(),focus.getExpansion().getParameter(),profile);
    if (canBeHeirarchy) {
      for (      ValueSetExpansionContainsComponent c : roots) {
        focus.getExpansion().getContains().add(c);
      }
    }
 else {
      for (      ValueSetExpansionContainsComponent c : codes) {
        if (map.containsKey(key(c)) && !c.getAbstract()) {
          focus.getExpansion().getContains().add(c);
          c.getContains().clear();
        }
      }
    }
    if (total > 0) {
      focus.getExpansion().setTotal(total);
    }
    return new ValueSetExpansionOutcome(focus);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  NoTerminologyServiceException e) {
    return new ValueSetExpansionOutcome(new ValueSetCheckerSimple(source,factory,context),e.getMessage(),TerminologyServiceErrorClass.NOSERVICE);
  }
catch (  Exception e) {
    return new ValueSetExpansionOutcome(new ValueSetCheckerSimple(source,factory,context),e.getMessage(),TerminologyServiceErrorClass.UNKNOWN);
  }
}",0.9829652996845426
23387,"private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv()),ExpansionErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}","private void loadCache() throws FHIRFormatError, IOException {
  File[] files=new File(cacheFolder).listFiles();
  for (  File f : files) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      final FileInputStream is=new FileInputStream(f);
      try {
        Resource r=context.newXmlParser().setOutputStyle(OutputStyle.PRETTY).parse(is);
        if (r instanceof OperationOutcome) {
          OperationOutcome oo=(OperationOutcome)r;
          expansions.put(ToolingExtensions.getExtension(oo,VS_ID_EXT).getValue().toString(),new ValueSetExpansionOutcome(new XhtmlComposer().setXmlOnly(true).composePlainText(oo.getText().getDiv()),TerminologyServiceErrorClass.UNKNOWN));
        }
 else {
          ValueSet vs=(ValueSet)r;
          expansions.put(vs.getUrl(),new ValueSetExpansionOutcome(vs));
        }
      }
  finally {
        IOUtils.closeQuietly(is);
      }
    }
  }
}",0.9847198641765704
23388,"@Test public void testTransformProfilesCDA() throws FileNotFoundException, Exception {
  Map<String,StructureMap> maps=new HashMap<String,StructureMap>();
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  StructureMapUtilities scu=new StructureMapUtilities(TestingUtilities.context,maps,null);
  for (  String f : new File(""String_Node_Str"").list()) {
    try {
      StructureDefinition sd=(StructureDefinition)new XmlParser().parse(new FileInputStream(""String_Node_Str"" + f));
      ((SimpleWorkerContext)TestingUtilities.context).seeResource(sd.getUrl(),sd);
    }
 catch (    Exception e) {
    }
  }
  for (  String f : new File(""String_Node_Str"").list()) {
    try {
      StructureMap map=scu.parse(TextFile.fileToString(""String_Node_Str"" + f));
      maps.put(map.getUrl(),map);
    }
 catch (    Exception e) {
    }
  }
  List<StructureDefinition> result=scu.transformProfile(null,maps.get(""String_Node_Str""));
  for (  StructureDefinition sd : result)   new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(new FileOutputStream(""String_Node_Str"" + sd.getId() + ""String_Node_Str""),sd);
}","@Test public void testTransformProfilesCDA() throws FileNotFoundException, Exception {
  Map<String,StructureMap> maps=new HashMap<String,StructureMap>();
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  StructureMapUtilities scu=new StructureMapUtilities(TestingUtilities.context,maps,null);
  for (  String f : new File(""String_Node_Str"").list()) {
    try {
      StructureDefinition sd=(StructureDefinition)new XmlParser().parse(new FileInputStream(""String_Node_Str"" + f));
      ((SimpleWorkerContext)TestingUtilities.context).seeResource(sd.getUrl(),sd);
    }
 catch (    Exception e) {
    }
  }
  for (  String f : new File(""String_Node_Str"").list()) {
    try {
      StructureMap map=scu.parse(TextFile.fileToString(""String_Node_Str"" + f));
      maps.put(map.getUrl(),map);
    }
 catch (    Exception e) {
    }
  }
  List<StructureDefinition> result=scu.analyse(null,maps.get(""String_Node_Str"")).getProfiles();
  for (  StructureDefinition sd : result)   new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(new FileOutputStream(""String_Node_Str"" + sd.getId() + ""String_Node_Str""),sd);
}",0.962079250106519
23389,"public ValidationResult(IssueSeverity error,String error2,ExpansionErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}","public ValidationResult(IssueSeverity error,String error2,TerminologyServiceErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}",0.9348441926345608
23390,"public boolean IsNoService(){
  return errorClass == ExpansionErrorClass.NOSERVICE;
}","public boolean IsNoService(){
  return errorClass == TerminologyServiceErrorClass.NOSERVICE;
}",0.8715083798882681
23391,"public ExpansionErrorClass getErrorClass(){
  return errorClass;
}","public TerminologyServiceErrorClass getErrorClass(){
  return errorClass;
}",0.8368794326241135
23392,"private void executeRule(String indent,TransformContext context,StructureMap map,Variables vars,StructureMapGroupComponent group,StructureMapGroupRuleComponent rule) throws Exception {
  log(indent + ""String_Node_Str"" + rule.getName());
  Variables srcVars=vars.copy();
  if (rule.getSource().size() != 1)   throw new Exception(""String_Node_Str"");
  List<Variables> source=analyseSource(context,srcVars,rule.getSource().get(0));
  if (source != null) {
    for (    Variables v : source) {
      for (      StructureMapGroupRuleTargetComponent t : rule.getTarget()) {
        processTarget(context,v,map,t);
      }
      if (rule.hasRule()) {
        for (        StructureMapGroupRuleComponent childrule : rule.getRule()) {
          executeRule(indent + ""String_Node_Str"",context,map,v,group,childrule);
        }
      }
 else       if (rule.hasDependent()) {
        for (        StructureMapGroupRuleDependentComponent dependent : rule.getDependent()) {
          executeDependency(indent + ""String_Node_Str"",context,map,v,group,dependent);
        }
      }
    }
  }
}","private void executeRule(String indent,TransformContext context,StructureMap map,Variables vars,StructureMapGroupComponent group,StructureMapGroupRuleComponent rule) throws Exception {
  log(indent + ""String_Node_Str"" + rule.getName());
  Variables srcVars=vars.copy();
  if (rule.getSource().size() != 1)   throw new Exception(""String_Node_Str"");
  List<Variables> source=processSource(context,srcVars,rule.getSource().get(0));
  if (source != null) {
    for (    Variables v : source) {
      for (      StructureMapGroupRuleTargetComponent t : rule.getTarget()) {
        processTarget(context,v,map,t);
      }
      if (rule.hasRule()) {
        for (        StructureMapGroupRuleComponent childrule : rule.getRule()) {
          executeRule(indent + ""String_Node_Str"",context,map,v,group,childrule);
        }
      }
 else       if (rule.hasDependent()) {
        for (        StructureMapGroupRuleDependentComponent dependent : rule.getDependent()) {
          executeDependency(indent + ""String_Node_Str"",context,map,v,group,dependent);
        }
      }
    }
  }
}",0.9934944237918216
23393,"private void executeRuleProfile(String indent,TransformContext context,StructureMap map,Variables vars,StructureMapGroupComponent group,StructureMapGroupRuleComponent rule) throws Exception {
  log(indent + ""String_Node_Str"" + rule.getName());
  Variables srcVars=vars.copy();
  if (rule.getSource().size() != 1)   throw new Exception(""String_Node_Str"");
  List<Variables> source=analyseSource(context,srcVars,rule.getSource().get(0));
  if (source != null) {
    for (    Variables v : source) {
      for (      StructureMapGroupRuleTargetComponent t : rule.getTarget()) {
        processTarget(context,v,map,t);
      }
      if (rule.hasRule()) {
        for (        StructureMapGroupRuleComponent childrule : rule.getRule()) {
          executeRule(indent + ""String_Node_Str"",context,map,v,group,childrule);
        }
      }
 else       if (rule.hasDependent()) {
        for (        StructureMapGroupRuleDependentComponent dependent : rule.getDependent()) {
          executeDependency(indent + ""String_Node_Str"",context,map,v,group,dependent);
        }
      }
    }
  }
}","private void executeRuleProfile(String indent,TransformContext context,StructureMap map,Variables vars,StructureMapGroupComponent group,StructureMapGroupRuleComponent rule) throws Exception {
  log(indent + ""String_Node_Str"" + rule.getName());
  Variables srcVars=vars.copy();
  if (rule.getSource().size() != 1)   throw new Exception(""String_Node_Str"");
  List<Variables> source=processSource(context,srcVars,rule.getSource().get(0));
  if (source != null) {
    for (    Variables v : source) {
      for (      StructureMapGroupRuleTargetComponent t : rule.getTarget()) {
        processTarget(context,v,map,t);
      }
      if (rule.hasRule()) {
        for (        StructureMapGroupRuleComponent childrule : rule.getRule()) {
          executeRule(indent + ""String_Node_Str"",context,map,v,group,childrule);
        }
      }
 else       if (rule.hasDependent()) {
        for (        StructureMapGroupRuleDependentComponent dependent : rule.getDependent()) {
          executeDependency(indent + ""String_Node_Str"",context,map,v,group,dependent);
        }
      }
    }
  }
}",0.9935364727608494
23394,"private void checkCodeableConcept(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition theElementCntext){
  if (theElementCntext != null && theElementCntext.hasBinding()) {
    ElementDefinitionBindingComponent binding=theElementCntext.getBinding();
    if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,binding != null,""String_Node_Str"" + path + ""String_Node_Str"")) {
      if (binding.hasValueSet() && binding.getValueSet() instanceof Reference) {
        ValueSet valueset=resolveBindingReference(profile,binding.getValueSet(),profile.getUrl());
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,valueset != null,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str"")) {
          try {
            CodeableConcept cc=readAsCodeableConcept(element);
            if (!cc.hasCoding()) {
              if (binding.getStrength() == BindingStrength.REQUIRED)               rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl());
 else               if (binding.getStrength() == BindingStrength.EXTENSIBLE)               warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl());
            }
 else {
              long t=System.nanoTime();
              boolean bindingsOk=true;
              if (binding.getStrength() != BindingStrength.EXAMPLE) {
                boolean atLeastOneSystemIsSupported=false;
                for (                Coding nextCoding : cc.getCoding()) {
                  String nextSystem=nextCoding.getSystem();
                  if (isNotBlank(nextSystem) && context.supportsSystem(nextSystem)) {
                    atLeastOneSystemIsSupported=true;
                    break;
                  }
                }
                if (!atLeastOneSystemIsSupported && binding.getStrength() == BindingStrength.EXAMPLE) {
                }
 else {
                  ValidationResult vr=context.validateCode(cc,valueset);
                  txTime=txTime + (System.nanoTime() - t);
                  if (!vr.isOk()) {
                    bindingsOk=false;
                    if (vr.getErrorClass() == ExpansionErrorClass.VALUESET_UNSUPPORTED || vr.getErrorClass() == ExpansionErrorClass.NOSERVICE) {
                      if (binding.getStrength() == BindingStrength.REQUIRED)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.EXTENSIBLE)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.PREFERRED)                       hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                    }
 else {
                      if (binding.getStrength() == BindingStrength.REQUIRED)                       rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.EXTENSIBLE)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.PREFERRED)                       hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                    }
                  }
 else                   if (vr.getMessage() != null)                   warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,vr.getMessage());
                }
                if (bindingsOk) {
                  for (                  Coding nextCoding : cc.getCoding()) {
                    String nextCode=nextCoding.getCode();
                    String nextSystem=nextCoding.getSystem();
                    if (isNotBlank(nextCode) && isNotBlank(nextSystem) && context.supportsSystem(nextSystem)) {
                      ValidationResult vr=context.validateCode(nextSystem,nextCode,null);
                      if (!vr.isOk()) {
                        warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"",nextCode,nextSystem);
                      }
                    }
                  }
                }
                txTime=txTime + (System.nanoTime() - t);
              }
            }
          }
 catch (          Exception e) {
            warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
          }
        }
      }
 else       if (binding.hasValueSet()) {
        hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
      }
 else       if (!noBindingMsgSuppressed) {
        hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + path + ""String_Node_Str"");
      }
    }
  }
}","private void checkCodeableConcept(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition theElementCntext){
  if (theElementCntext != null && theElementCntext.hasBinding()) {
    ElementDefinitionBindingComponent binding=theElementCntext.getBinding();
    if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,binding != null,""String_Node_Str"" + path + ""String_Node_Str"")) {
      if (binding.hasValueSet() && binding.getValueSet() instanceof Reference) {
        ValueSet valueset=resolveBindingReference(profile,binding.getValueSet(),profile.getUrl());
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,valueset != null,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str"")) {
          try {
            CodeableConcept cc=readAsCodeableConcept(element);
            if (!cc.hasCoding()) {
              if (binding.getStrength() == BindingStrength.REQUIRED)               rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl());
 else               if (binding.getStrength() == BindingStrength.EXTENSIBLE)               warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl());
            }
 else {
              long t=System.nanoTime();
              boolean bindingsOk=true;
              if (binding.getStrength() != BindingStrength.EXAMPLE) {
                boolean atLeastOneSystemIsSupported=false;
                for (                Coding nextCoding : cc.getCoding()) {
                  String nextSystem=nextCoding.getSystem();
                  if (isNotBlank(nextSystem) && context.supportsSystem(nextSystem)) {
                    atLeastOneSystemIsSupported=true;
                    break;
                  }
                }
                if (!atLeastOneSystemIsSupported && binding.getStrength() == BindingStrength.EXAMPLE) {
                }
 else {
                  ValidationResult vr=context.validateCode(cc,valueset);
                  txTime=txTime + (System.nanoTime() - t);
                  if (!vr.isOk()) {
                    bindingsOk=false;
                    if (vr.getErrorClass() == TerminologyServiceErrorClass.VALUESET_UNSUPPORTED || vr.getErrorClass() == TerminologyServiceErrorClass.NOSERVICE) {
                      if (binding.getStrength() == BindingStrength.REQUIRED)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.EXTENSIBLE)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.PREFERRED)                       hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                    }
 else {
                      if (binding.getStrength() == BindingStrength.REQUIRED)                       rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.EXTENSIBLE)                       warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                       if (binding.getStrength() == BindingStrength.PREFERRED)                       hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                    }
                  }
 else                   if (vr.getMessage() != null)                   warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,vr.getMessage());
                }
                if (bindingsOk) {
                  for (                  Coding nextCoding : cc.getCoding()) {
                    String nextCode=nextCoding.getCode();
                    String nextSystem=nextCoding.getSystem();
                    if (isNotBlank(nextCode) && isNotBlank(nextSystem) && context.supportsSystem(nextSystem)) {
                      ValidationResult vr=context.validateCode(nextSystem,nextCode,null);
                      if (!vr.isOk()) {
                        warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"",nextCode,nextSystem);
                      }
                    }
                  }
                }
                txTime=txTime + (System.nanoTime() - t);
              }
            }
          }
 catch (          Exception e) {
            warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
          }
        }
      }
 else       if (binding.hasValueSet()) {
        hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
      }
 else       if (!noBindingMsgSuppressed) {
        hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + path + ""String_Node_Str"");
      }
    }
  }
}",0.9954414992402498
23395,"private void checkCoding(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition theElementCntext,boolean inCodeableConcept){
  String code=element.getNamedChildValue(""String_Node_Str"");
  String system=element.getNamedChildValue(""String_Node_Str"");
  String display=element.getNamedChildValue(""String_Node_Str"");
  rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,isAbsolute(system),""String_Node_Str"");
  if (system != null && code != null) {
    try {
      if (checkCode(errors,element,path,code,system,display))       if (theElementCntext != null && theElementCntext.getBinding() != null) {
        ElementDefinitionBindingComponent binding=theElementCntext.getBinding();
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,binding != null,""String_Node_Str"" + path + ""String_Node_Str"")) {
          if (binding.hasValueSet() && binding.getValueSet() instanceof Reference) {
            ValueSet valueset=resolveBindingReference(profile,binding.getValueSet(),profile.getUrl());
            if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,valueset != null,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str"")) {
              try {
                Coding c=readAsCoding(element);
                long t=System.nanoTime();
                ValidationResult vr=context.validateCode(c,valueset);
                txTime=txTime + (System.nanoTime() - t);
                if (!vr.isOk()) {
                  if (vr.IsNoService())                   hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
 else                   if (vr.getErrorClass() == ExpansionErrorClass.VALUESET_UNSUPPORTED || vr.getErrorClass() == ExpansionErrorClass.NOSERVICE) {
                    if (binding.getStrength() == BindingStrength.REQUIRED)                     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                     if (binding.getStrength() == BindingStrength.EXTENSIBLE)                     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                     if (binding.getStrength() == BindingStrength.PREFERRED)                     hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                  }
 else                   if (binding.getStrength() == BindingStrength.REQUIRED)                   rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                   if (binding.getStrength() == BindingStrength.EXTENSIBLE)                   warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                   if (binding.getStrength() == BindingStrength.PREFERRED)                   hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                }
              }
 catch (              Exception e) {
                warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
              }
            }
          }
 else           if (binding.hasValueSet()) {
            hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
          }
 else           if (!inCodeableConcept && !noBindingMsgSuppressed) {
            hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + path + ""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception e) {
      rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    }
  }
}","private void checkCoding(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition theElementCntext,boolean inCodeableConcept){
  String code=element.getNamedChildValue(""String_Node_Str"");
  String system=element.getNamedChildValue(""String_Node_Str"");
  String display=element.getNamedChildValue(""String_Node_Str"");
  rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,isAbsolute(system),""String_Node_Str"");
  if (system != null && code != null) {
    try {
      if (checkCode(errors,element,path,code,system,display))       if (theElementCntext != null && theElementCntext.getBinding() != null) {
        ElementDefinitionBindingComponent binding=theElementCntext.getBinding();
        if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,binding != null,""String_Node_Str"" + path + ""String_Node_Str"")) {
          if (binding.hasValueSet() && binding.getValueSet() instanceof Reference) {
            ValueSet valueset=resolveBindingReference(profile,binding.getValueSet(),profile.getUrl());
            if (warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,valueset != null,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str"")) {
              try {
                Coding c=readAsCoding(element);
                long t=System.nanoTime();
                ValidationResult vr=context.validateCode(c,valueset);
                txTime=txTime + (System.nanoTime() - t);
                if (!vr.isOk()) {
                  if (vr.IsNoService())                   hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
 else                   if (vr.getErrorClass() == TerminologyServiceErrorClass.VALUESET_UNSUPPORTED || vr.getErrorClass() == TerminologyServiceErrorClass.NOSERVICE) {
                    if (binding.getStrength() == BindingStrength.REQUIRED)                     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                     if (binding.getStrength() == BindingStrength.EXTENSIBLE)                     warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                     if (binding.getStrength() == BindingStrength.PREFERRED)                     hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                  }
 else                   if (binding.getStrength() == BindingStrength.REQUIRED)                   rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                   if (binding.getStrength() == BindingStrength.EXTENSIBLE)                   warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
 else                   if (binding.getStrength() == BindingStrength.PREFERRED)                   hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + describeReference(binding.getValueSet()) + ""String_Node_Str""+ valueset.getUrl()+ ""String_Node_Str"");
                }
              }
 catch (              Exception e) {
                warning(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
              }
            }
          }
 else           if (binding.hasValueSet()) {
            hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"");
          }
 else           if (!inCodeableConcept && !noBindingMsgSuppressed) {
            hint(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + path + ""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception e) {
      rule(errors,IssueType.CODEINVALID,element.line(),element.col(),path,false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    }
  }
}",0.993975903614458
23396,"public Resource transform(byte[] source,FhirFormat cntType,String mapUri) throws Exception {
  StructureMapUtilities scu=new StructureMapUtilities(context,null);
  org.hl7.fhir.dstu3.elementmodel.Element src=Manager.parse(context,new ByteArrayInputStream(source),cntType);
  StructureMap map=scu.getLibrary().get(mapUri);
  if (map == null)   throw new Error(""String_Node_Str"" + mapUri);
  Resource dst=ResourceFactory.createResource(""String_Node_Str"");
  scu.transform(null,src,map,dst);
  return dst;
}","public Resource transform(byte[] source,FhirFormat cntType,String mapUri) throws Exception {
  StructureMapUtilities scu=new StructureMapUtilities(context);
  org.hl7.fhir.dstu3.elementmodel.Element src=Manager.parse(context,new ByteArrayInputStream(source),cntType);
  StructureMap map=scu.getLibrary().get(mapUri);
  if (map == null)   throw new Error(""String_Node_Str"" + mapUri);
  Resource dst=ResourceFactory.createResource(""String_Node_Str"");
  scu.transform(null,src,map,dst);
  return dst;
}",0.9950149551345964
23397,"private FhirFormat checkIsResource(String path){
  String ext=Utilities.getFileExtension(path);
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.XML;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.JSON;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TURTLE;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TEXT;
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.XML);
    return FhirFormat.XML;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.JSON);
    return FhirFormat.JSON;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.TURTLE);
    return FhirFormat.TURTLE;
  }
 catch (  Exception e) {
  }
  try {
    new StructureMapUtilities(context,null,null).parse(TextFile.fileToString(path));
    return FhirFormat.TEXT;
  }
 catch (  Exception e) {
  }
  return null;
}","private FhirFormat checkIsResource(String path){
  String ext=Utilities.getFileExtension(path);
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.XML;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.JSON;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TURTLE;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TEXT;
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.XML);
    return FhirFormat.XML;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.JSON);
    return FhirFormat.JSON;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.TURTLE);
    return FhirFormat.TURTLE;
  }
 catch (  Exception e) {
  }
  try {
    new StructureMapUtilities(context,null,null,null).parse(TextFile.fileToString(path));
    return FhirFormat.TEXT;
  }
 catch (  Exception e) {
  }
  return null;
}",0.997511199601792
23398,"public ValueSetExpansionOutcome(String error,ExpansionErrorClass errorClass){
  this.valueset=null;
  this.service=null;
  this.error=error;
  this.errorClass=errorClass;
}","public ValueSetExpansionOutcome(String error,TerminologyServiceErrorClass errorClass){
  this.valueset=null;
  this.service=null;
  this.error=error;
  this.errorClass=errorClass;
}",0.9348441926345608
23399,"public ExpansionErrorClass getErrorClass(){
  return errorClass;
}","public TerminologyServiceErrorClass getErrorClass(){
  return errorClass;
}",0.8368794326241135
23400,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if ((outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                  extUrlEd.setPath(fixedPath(contextPathDst,extUrlEd.getPath()));
                  updateFromBase(extUrlEd,currentBase);
                  markDerived(extUrlEd);
                  result.getElement().add(extUrlEd);
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPathSrc,String contextPathDst,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPathSrc,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName+ ""String_Node_Str""+ url);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ url);
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPathSrc,contextPathDst,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPathSrc,contextPathDst,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPathDst,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if ((outcome.getType().get(0).getCode().equals(""String_Node_Str"") || differential.getElement().size() > diffCursor) && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (!baseWalksInto(base.getElement(),baseCursor)) {
              if (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
                if (outcome.getType().size() > 1)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                if (dt == null)                 throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
                contextName=dt.getUrl();
                int start=diffCursor;
                while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))                 diffCursor++;
                processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),outcome.getPath(),trimDifferential,contextName,resultPathBase,false);
              }
 else               if (outcome.getType().get(0).getCode().equals(""String_Node_Str"")) {
                StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
                for (                ElementDefinition extEd : dt.getSnapshot().getElement()) {
                  ElementDefinition extUrlEd=updateURLs(url,extEd.copy());
                  extUrlEd.setPath(fixedPath(contextPathDst,extUrlEd.getPath()));
                  updateFromBase(extUrlEd,currentBase);
                  markDerived(extUrlEd);
                  result.getElement().add(extUrlEd);
                }
              }
            }
          }
          diffpos++;
        }
      }
    }
  }
}",0.9983753854315176
23401,"public void closeDifferential(StructureDefinition base,StructureDefinition derived){
}","public void closeDifferential(StructureDefinition base,StructureDefinition derived) throws FHIRException {
  for (  ElementDefinition edb : base.getSnapshot().getElement()) {
    if (isImmediateChild(edb) && !edb.getPath().endsWith(""String_Node_Str"")) {
      ElementDefinition edm=getMatchInDerived(edb,derived.getDifferential().getElement());
      if (edm == null) {
        ElementDefinition edd=derived.getDifferential().addElement();
        edd.setPath(edb.getPath());
        edd.setMax(""String_Node_Str"");
      }
 else {
        closeChildren(base,edb,derived,edm);
      }
    }
  }
  sortDifferential(base,derived,derived.getName(),new ArrayList<String>());
}",0.2272126816380449
23402,"private void getChildTypesByName(String type,String name,TypeDetails result) throws PathEngineException, DefinitionException {
  if (Utilities.noString(type))   throw new PathEngineException(""String_Node_Str"");
  if (type.equals(""String_Node_Str""))   return;
  String url=null;
  if (type.contains(""String_Node_Str"")) {
    url=type.substring(0,type.indexOf(""String_Node_Str""));
  }
 else {
    url=type;
  }
  String tail=""String_Node_Str"";
  StructureDefinition sd=worker.fetchResource(StructureDefinition.class,url);
  if (sd == null)   throw new DefinitionException(""String_Node_Str"" + type);
  List<StructureDefinition> sdl=new ArrayList<StructureDefinition>();
  ElementDefinitionMatch m=null;
  if (type.contains(""String_Node_Str""))   m=getElementDefinition(sd,type.substring(type.indexOf(""String_Node_Str"") + 1),false);
  if (m != null && hasDataType(m.definition)) {
    if (m.fixedType != null) {
      StructureDefinition dt=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + m.fixedType);
      if (dt == null)       throw new DefinitionException(""String_Node_Str"" + m.fixedType);
      sdl.add(dt);
    }
 else     for (    TypeRefComponent t : m.definition.getType()) {
      StructureDefinition dt=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getCode());
      if (dt == null)       throw new DefinitionException(""String_Node_Str"" + t.getCode());
      sdl.add(dt);
    }
  }
 else {
    sdl.add(sd);
    if (type.contains(""String_Node_Str"")) {
      tail=type.substring(type.indexOf(""String_Node_Str"") + 1);
      tail=tail.substring(tail.indexOf(""String_Node_Str""));
    }
  }
  for (  StructureDefinition sdi : sdl) {
    String path=sdi.getSnapshot().getElement().get(0).getPath() + tail + ""String_Node_Str"";
    if (name.equals(""String_Node_Str"")) {
      assert(result.getCollectionStatus() == CollectionStatus.UNORDERED);
      for (      ElementDefinition ed : sdi.getSnapshot().getElement()) {
        if (ed.getPath().startsWith(path))         for (        TypeRefComponent t : ed.getType()) {
          if (t.hasCode() && t.getCodeElement().hasValue()) {
            String tn=null;
            if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))             tn=sdi.getType() + ""String_Node_Str"" + ed.getPath();
 else             tn=t.getCode();
            if (t.getCode().equals(""String_Node_Str"")) {
              for (              String rn : worker.getResourceNames()) {
                if (!result.hasType(worker,rn)) {
                  getChildTypesByName(result.addType(rn),""String_Node_Str"",result);
                }
              }
            }
 else             if (!result.hasType(worker,tn)) {
              getChildTypesByName(result.addType(tn),""String_Node_Str"",result);
            }
          }
        }
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      assert(result.getCollectionStatus() == CollectionStatus.UNORDERED);
      for (      ElementDefinition ed : sdi.getSnapshot().getElement()) {
        if (ed.getPath().startsWith(path) && !ed.getPath().substring(path.length()).contains(""String_Node_Str""))         for (        TypeRefComponent t : ed.getType()) {
          if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))           result.addType(sdi.getType() + ""String_Node_Str"" + ed.getPath());
 else           if (t.getCode().equals(""String_Node_Str""))           result.addTypes(worker.getResourceNames());
 else           result.addType(t.getCode());
        }
      }
    }
 else {
      path=sdi.getSnapshot().getElement().get(0).getPath() + tail + ""String_Node_Str""+ name;
      ElementDefinitionMatch ed=getElementDefinition(sdi,path,false);
      if (ed != null) {
        if (!Utilities.noString(ed.getFixedType()))         result.addType(ed.getFixedType());
 else         for (        TypeRefComponent t : ed.getDefinition().getType()) {
          if (Utilities.noString(t.getCode()))           break;
          if (t.hasProfile())           result.addType(t.getProfile());
          if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))           result.addType(sdi.getUrl() + ""String_Node_Str"" + path);
 else           if (t.getCode().equals(""String_Node_Str""))           result.addTypes(worker.getResourceNames());
 else           result.addType(t.getCode());
        }
      }
    }
  }
}","private void getChildTypesByName(String type,String name,TypeDetails result) throws PathEngineException, DefinitionException {
  if (Utilities.noString(type))   throw new PathEngineException(""String_Node_Str"");
  if (type.equals(""String_Node_Str""))   return;
  String url=null;
  if (type.contains(""String_Node_Str"")) {
    url=type.substring(0,type.indexOf(""String_Node_Str""));
  }
 else {
    url=type;
  }
  String tail=""String_Node_Str"";
  StructureDefinition sd=worker.fetchResource(StructureDefinition.class,url);
  if (sd == null)   throw new DefinitionException(""String_Node_Str"" + type);
  List<StructureDefinition> sdl=new ArrayList<StructureDefinition>();
  ElementDefinitionMatch m=null;
  if (type.contains(""String_Node_Str""))   m=getElementDefinition(sd,type.substring(type.indexOf(""String_Node_Str"") + 1),false);
  if (m != null && hasDataType(m.definition)) {
    if (m.fixedType != null) {
      StructureDefinition dt=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + m.fixedType);
      if (dt == null)       throw new DefinitionException(""String_Node_Str"" + m.fixedType);
      sdl.add(dt);
    }
 else     for (    TypeRefComponent t : m.definition.getType()) {
      StructureDefinition dt=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getCode());
      if (dt == null)       throw new DefinitionException(""String_Node_Str"" + t.getCode());
      sdl.add(dt);
    }
  }
 else {
    sdl.add(sd);
    if (type.contains(""String_Node_Str"")) {
      tail=type.substring(type.indexOf(""String_Node_Str"") + 1);
      tail=tail.substring(tail.indexOf(""String_Node_Str""));
    }
  }
  for (  StructureDefinition sdi : sdl) {
    String path=sdi.getSnapshot().getElement().get(0).getPath() + tail + ""String_Node_Str"";
    if (name.equals(""String_Node_Str"")) {
      assert(result.getCollectionStatus() == CollectionStatus.UNORDERED);
      for (      ElementDefinition ed : sdi.getSnapshot().getElement()) {
        if (ed.getPath().startsWith(path))         for (        TypeRefComponent t : ed.getType()) {
          if (t.hasCode() && t.getCodeElement().hasValue()) {
            String tn=null;
            if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))             tn=sdi.getType() + ""String_Node_Str"" + ed.getPath();
 else             tn=t.getCode();
            if (t.getCode().equals(""String_Node_Str"")) {
              for (              String rn : worker.getResourceNames()) {
                if (!result.hasType(worker,rn)) {
                  getChildTypesByName(result.addType(rn),""String_Node_Str"",result);
                }
              }
            }
 else             if (!result.hasType(worker,tn)) {
              getChildTypesByName(result.addType(tn),""String_Node_Str"",result);
            }
          }
        }
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      assert(result.getCollectionStatus() == CollectionStatus.UNORDERED);
      for (      ElementDefinition ed : sdi.getSnapshot().getElement()) {
        if (ed.getPath().startsWith(path) && !ed.getPath().substring(path.length()).contains(""String_Node_Str""))         for (        TypeRefComponent t : ed.getType()) {
          if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))           result.addType(sdi.getType() + ""String_Node_Str"" + ed.getPath());
 else           if (t.getCode().equals(""String_Node_Str""))           result.addTypes(worker.getResourceNames());
 else           result.addType(t.getCode());
        }
      }
    }
 else {
      path=sdi.getSnapshot().getElement().get(0).getPath() + tail + ""String_Node_Str""+ name;
      ElementDefinitionMatch ed=getElementDefinition(sdi,path,false);
      if (ed != null) {
        if (!Utilities.noString(ed.getFixedType()))         result.addType(ed.getFixedType());
 else         for (        TypeRefComponent t : ed.getDefinition().getType()) {
          if (Utilities.noString(t.getCode()))           break;
          if (t.hasProfile() && !t.getCode().equals(""String_Node_Str""))           result.addType(t.getProfile());
          if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))           result.addType(sdi.getUrl() + ""String_Node_Str"" + path);
 else           if (t.getCode().equals(""String_Node_Str""))           result.addTypes(worker.getResourceNames());
 else           result.addType(t.getCode());
        }
      }
    }
  }
}",0.9952628017144146
23403,"private void saveToCache(ValidationResult res,String cacheName) throws IOException {
  if (cacheName == null)   return;
  if (res.getDisplay() != null)   TextFile.stringToFile(res.getDisplay(),cacheName);
 else   if (res.getSeverity() == IssueSeverity.WARNING)   TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
 else   TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
}","private void saveToCache(ValidationResult res,String cacheName) throws IOException {
  if (cacheName == null)   return;
  if (res.getDisplay() != null)   TextFile.stringToFile(res.getDisplay(),cacheName);
 else   if (res.getMessage() != null) {
    if (res.getSeverity() == IssueSeverity.WARNING)     TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
 else     TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
  }
}",0.9495412844036696
23404,"private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws IOException {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  log(""String_Node_Str"" + describeValidationParameters(pin));
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN || it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(null);
  saveToCache(res,cacheName);
  return res;
}","private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws IOException {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  log(""String_Node_Str"" + describeValidationParameters(pin));
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN)         err=TerminologyServiceErrorClass.UNKNOWN;
 else         if (it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(null);
  saveToCache(res,cacheName);
  return res;
}",0.977710843373494
23405,"public ValidationResult(IssueSeverity error,String error2,TerminologyServiceErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}","public ValidationResult(IssueSeverity severity,String message,TerminologyServiceErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}",0.9453551912568308
23406,"public ValidationMessage(Source source,OperationOutcome.IssueType type,String message,IssueSeverity level){
  super();
  this.line=-1;
  this.col=-1;
  this.message=message;
  this.level=level;
  this.source=source;
  this.type=type;
  if (type == null)   throw new Error(""String_Node_Str"");
}","public ValidationMessage(Source source,OperationOutcome.IssueType type,String message,IssueSeverity level){
  super();
  this.line=-1;
  this.col=-1;
  if (message == null)   throw new Error(""String_Node_Str"");
  this.message=message;
  this.level=level;
  this.source=source;
  this.type=type;
  if (type == null)   throw new Error(""String_Node_Str"");
}",0.6367851622874807
23407,"private void saveToCache(ValidationResult res,String cacheName) throws IOException {
  if (cacheName == null)   return;
  if (res.getDisplay() != null)   TextFile.stringToFile(res.getDisplay(),cacheName);
 else   if (res.getSeverity() == IssueSeverity.WARNING)   TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
 else   TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
}","private void saveToCache(ValidationResult res,String cacheName) throws IOException {
  if (cacheName == null)   return;
  if (res.getDisplay() != null)   TextFile.stringToFile(res.getDisplay(),cacheName);
 else   if (res.getMessage() != null) {
    if (res.getSeverity() == IssueSeverity.WARNING)     TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
 else     TextFile.stringToFile(""String_Node_Str"" + res.getMessage(),cacheName);
  }
}",0.9495412844036696
23408,"private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws IOException {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  log(""String_Node_Str"" + describeValidationParameters(pin));
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN || it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(null);
  saveToCache(res,cacheName);
  return res;
}","private ValidationResult serverValidateCode(Parameters pin,boolean doCache) throws IOException {
  if (noTerminologyServer)   return new ValidationResult(null,null,TerminologyServiceErrorClass.NOSERVICE);
  String cacheName=doCache ? generateCacheName(pin) : null;
  ValidationResult res=loadFromCache(cacheName);
  if (res != null)   return res;
  log(""String_Node_Str"" + describeValidationParameters(pin));
  Parameters pout=txServer.operateType(ValueSet.class,""String_Node_Str"",pin);
  boolean ok=false;
  String message=""String_Node_Str"";
  String display=null;
  TerminologyServiceErrorClass err=TerminologyServiceErrorClass.UNKNOWN;
  for (  ParametersParameterComponent p : pout.getParameter()) {
    if (p.getName().equals(""String_Node_Str""))     ok=((BooleanType)p.getValue()).getValue().booleanValue();
 else     if (p.getName().equals(""String_Node_Str""))     message=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str""))     display=((StringType)p.getValue()).getValue();
 else     if (p.getName().equals(""String_Node_Str"")) {
      try {
        IssueType it=IssueType.fromCode(((StringType)p.getValue()).getValue());
        if (it == IssueType.UNKNOWN)         err=TerminologyServiceErrorClass.UNKNOWN;
 else         if (it == IssueType.NOTSUPPORTED)         err=TerminologyServiceErrorClass.VALUESET_UNSUPPORTED;
      }
 catch (      FHIRException e) {
      }
    }
  }
  if (!ok)   res=new ValidationResult(IssueSeverity.ERROR,message,err);
 else   if (display != null)   res=new ValidationResult(new ConceptDefinitionComponent().setDisplay(display));
 else   res=new ValidationResult(null);
  saveToCache(res,cacheName);
  return res;
}",0.977710843373494
23409,"public ValidationResult(IssueSeverity error,String error2,TerminologyServiceErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}","public ValidationResult(IssueSeverity severity,String message,TerminologyServiceErrorClass errorClass){
  this.severity=severity;
  this.message=message;
  this.errorClass=errorClass;
}",0.9453551912568308
23410,"public ValidationMessage(Source source,OperationOutcome.IssueType type,String message,IssueSeverity level){
  super();
  this.line=-1;
  this.col=-1;
  this.message=message;
  this.level=level;
  this.source=source;
  this.type=type;
  if (type == null)   throw new Error(""String_Node_Str"");
}","public ValidationMessage(Source source,OperationOutcome.IssueType type,String message,IssueSeverity level){
  super();
  this.line=-1;
  this.col=-1;
  if (message == null)   throw new Error(""String_Node_Str"");
  this.message=message;
  this.level=level;
  this.source=source;
  this.type=type;
  if (type == null)   throw new Error(""String_Node_Str"");
}",0.6367851622874807
23411,"@SuppressWarnings(""String_Node_Str"") @Test public void test() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.exceptions.FHIRException {
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  if (fp == null)   fp=new FluentPathEngine(TestingUtilities.context);
  String input=test.getAttribute(""String_Node_Str"");
  String expression=XMLUtil.getNamedChild(test,""String_Node_Str"").getTextContent();
  boolean fail=""String_Node_Str"".equals(XMLUtil.getNamedChild(test,""String_Node_Str"").getAttribute(""String_Node_Str""));
  Resource res=null;
  List<Base> outcome=new ArrayList<Base>();
  ExpressionNode node=fp.parse(expression);
  try {
    if (Utilities.noString(input))     fp.check(null,null,null,node);
 else {
      res=new XmlParser().parse(new FileInputStream(Utilities.path(""String_Node_Str"",input)));
      fp.check(res,res.getResourceType().toString(),res.getResourceType().toString(),node);
    }
    outcome=fp.evaluate(res,node);
    Assert.assertTrue(String.format(""String_Node_Str"",expression),!fail);
  }
 catch (  Exception e) {
    Assert.assertTrue(String.format(""String_Node_Str"" + e.getMessage(),expression),fail);
  }
  if (""String_Node_Str"".equals(test.getAttribute(""String_Node_Str""))) {
    boolean ok=fp.convertToBoolean(outcome);
    outcome.clear();
    outcome.add(new BooleanType(ok));
  }
  if (fp.hasLog())   System.out.println(fp.takeLog());
  List<Element> expected=new ArrayList<Element>();
  XMLUtil.getNamedChildren(test,""String_Node_Str"",expected);
  Assert.assertTrue(String.format(""String_Node_Str"",expected.size(),outcome.size()),outcome.size() == expected.size());
  for (int i=0; i < Math.min(outcome.size(),expected.size()); i++) {
    String tn=expected.get(i).getAttribute(""String_Node_Str"");
    if (!Utilities.noString(tn)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,tn,outcome.get(i).fhirType()),tn.equals(outcome.get(i).fhirType()));
    }
    String v=expected.get(i).getTextContent();
    if (!Utilities.noString(v)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,outcome.get(i).fhirType()),outcome.get(i) instanceof PrimitiveType);
      Assert.assertTrue(String.format(""String_Node_Str"",i,v,outcome.get(i).toString()),v.equals(((PrimitiveType)outcome.get(i)).asStringValue()));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Test public void test() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.exceptions.FHIRException {
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  if (fp == null)   fp=new FluentPathEngine(TestingUtilities.context);
  String input=test.getAttribute(""String_Node_Str"");
  String expression=XMLUtil.getNamedChild(test,""String_Node_Str"").getTextContent();
  boolean fail=""String_Node_Str"".equals(XMLUtil.getNamedChild(test,""String_Node_Str"").getAttribute(""String_Node_Str""));
  Resource res=null;
  List<Base> outcome=new ArrayList<Base>();
  ExpressionNode node=fp.parse(expression);
  try {
    if (Utilities.noString(input))     fp.check(null,null,node);
 else {
      res=new XmlParser().parse(new FileInputStream(Utilities.path(""String_Node_Str"",input)));
      fp.check(res,res.getResourceType().toString(),res.getResourceType().toString(),node);
    }
    outcome=fp.evaluate(res,node);
    Assert.assertTrue(String.format(""String_Node_Str"",expression),!fail);
  }
 catch (  Exception e) {
    Assert.assertTrue(String.format(""String_Node_Str"" + e.getMessage(),expression),fail);
  }
  if (""String_Node_Str"".equals(test.getAttribute(""String_Node_Str""))) {
    boolean ok=fp.convertToBoolean(outcome);
    outcome.clear();
    outcome.add(new BooleanType(ok));
  }
  if (fp.hasLog())   System.out.println(fp.takeLog());
  List<Element> expected=new ArrayList<Element>();
  XMLUtil.getNamedChildren(test,""String_Node_Str"",expected);
  Assert.assertTrue(String.format(""String_Node_Str"",expected.size(),outcome.size()),outcome.size() == expected.size());
  for (int i=0; i < Math.min(outcome.size(),expected.size()); i++) {
    String tn=expected.get(i).getAttribute(""String_Node_Str"");
    if (!Utilities.noString(tn)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,tn,outcome.get(i).fhirType()),tn.equals(outcome.get(i).fhirType()));
    }
    String v=expected.get(i).getTextContent();
    if (!Utilities.noString(v)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,outcome.get(i).fhirType()),outcome.get(i) instanceof PrimitiveType);
      Assert.assertTrue(String.format(""String_Node_Str"",i,v,outcome.get(i).toString()),v.equals(((PrimitiveType)outcome.get(i)).asStringValue()));
    }
  }
}",0.9989382034402208
23412,"private void parseTarget(StructureMapGroupRuleComponent rule,FHIRLexer lexer) throws FHIRException {
  StructureMapGroupRuleTargetComponent target=rule.addTarget();
  String start=lexer.take();
  if (lexer.hasToken(""String_Node_Str"")) {
    target.setContext(start);
    start=null;
    lexer.token(""String_Node_Str"");
    target.setElement(lexer.take());
  }
  String name;
  boolean isConstant=false;
  if (lexer.hasToken(""String_Node_Str"")) {
    if (start != null)     target.setContext(start);
    lexer.token(""String_Node_Str"");
    isConstant=lexer.isConstant(true);
    name=lexer.take();
  }
 else   name=start;
  if (""String_Node_Str"".equals(name)) {
    target.setTransform(StructureMapTransform.EVALUATE);
    ExpressionNode node=fpe.parse(lexer);
    target.setUserData(MAP_EXPRESSION,node);
    target.addParameter().setValue(new StringType(node.toString()));
    lexer.token(""String_Node_Str"");
  }
 else   if (lexer.hasToken(""String_Node_Str"")) {
    target.setTransform(StructureMapTransform.fromCode(name));
    lexer.token(""String_Node_Str"");
    if (target.getTransform() == StructureMapTransform.EVALUATE) {
      parseParameter(target,lexer);
      lexer.token(""String_Node_Str"");
      ExpressionNode node=fpe.parse(lexer);
      target.setUserData(MAP_EXPRESSION,node);
      target.addParameter().setValue(new StringType(node.toString()));
    }
 else {
      while (!lexer.hasToken(""String_Node_Str"")) {
        parseParameter(target,lexer);
        if (!lexer.hasToken(""String_Node_Str""))         lexer.token(""String_Node_Str"");
      }
    }
    lexer.token(""String_Node_Str"");
  }
 else   if (name != null) {
    target.setTransform(StructureMapTransform.COPY);
    if (!isConstant) {
      String id=name;
      while (lexer.hasToken(""String_Node_Str"")) {
        id=id + lexer.take() + lexer.take();
      }
      target.addParameter().setValue(new IdType(id));
    }
 else     target.addParameter().setValue(readConstant(name,lexer));
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    target.setVariable(lexer.take());
  }
  while (Utilities.existsInList(lexer.getCurrent(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    if (lexer.getCurrent().equals(""String_Node_Str"")) {
      target.addListMode(StructureMapListMode.SHARE);
      lexer.next();
      target.setListRuleId(lexer.take());
    }
 else     if (lexer.getCurrent().equals(""String_Node_Str""))     target.addListMode(StructureMapListMode.FIRST);
 else     target.addListMode(StructureMapListMode.LAST);
    lexer.next();
  }
}","private void parseTarget(StructureMapGroupRuleComponent rule,FHIRLexer lexer) throws FHIRException {
  StructureMapGroupRuleTargetComponent target=rule.addTarget();
  String start=lexer.take();
  if (lexer.hasToken(""String_Node_Str"")) {
    target.setContext(start);
    target.setContextType(StructureMapContextType.VARIABLE);
    start=null;
    lexer.token(""String_Node_Str"");
    target.setElement(lexer.take());
  }
  String name;
  boolean isConstant=false;
  if (lexer.hasToken(""String_Node_Str"")) {
    if (start != null)     target.setContext(start);
    lexer.token(""String_Node_Str"");
    isConstant=lexer.isConstant(true);
    name=lexer.take();
  }
 else   name=start;
  if (""String_Node_Str"".equals(name)) {
    target.setTransform(StructureMapTransform.EVALUATE);
    ExpressionNode node=fpe.parse(lexer);
    target.setUserData(MAP_EXPRESSION,node);
    target.addParameter().setValue(new StringType(node.toString()));
    lexer.token(""String_Node_Str"");
  }
 else   if (lexer.hasToken(""String_Node_Str"")) {
    target.setTransform(StructureMapTransform.fromCode(name));
    lexer.token(""String_Node_Str"");
    if (target.getTransform() == StructureMapTransform.EVALUATE) {
      parseParameter(target,lexer);
      lexer.token(""String_Node_Str"");
      ExpressionNode node=fpe.parse(lexer);
      target.setUserData(MAP_EXPRESSION,node);
      target.addParameter().setValue(new StringType(node.toString()));
    }
 else {
      while (!lexer.hasToken(""String_Node_Str"")) {
        parseParameter(target,lexer);
        if (!lexer.hasToken(""String_Node_Str""))         lexer.token(""String_Node_Str"");
      }
    }
    lexer.token(""String_Node_Str"");
  }
 else   if (name != null) {
    target.setTransform(StructureMapTransform.COPY);
    if (!isConstant) {
      String id=name;
      while (lexer.hasToken(""String_Node_Str"")) {
        id=id + lexer.take() + lexer.take();
      }
      target.addParameter().setValue(new IdType(id));
    }
 else     target.addParameter().setValue(readConstant(name,lexer));
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    target.setVariable(lexer.take());
  }
  while (Utilities.existsInList(lexer.getCurrent(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    if (lexer.getCurrent().equals(""String_Node_Str"")) {
      target.addListMode(StructureMapListMode.SHARE);
      lexer.next();
      target.setListRuleId(lexer.take());
    }
 else     if (lexer.getCurrent().equals(""String_Node_Str""))     target.addListMode(StructureMapListMode.FIRST);
 else     target.addListMode(StructureMapListMode.LAST);
    lexer.next();
  }
}",0.9882759946184894
23413,"private void renderTarget(StringBuilder b,StructureMapGroupRuleTargetComponent rt) throws FHIRException {
  if (rt.hasContext()) {
    b.append(rt.getContext());
    if (rt.hasElement()) {
      b.append('.');
      b.append(rt.getElement());
    }
  }
  if (rt.hasTransform()) {
    if (rt.hasContext())     b.append(""String_Node_Str"");
    if (rt.getTransform() == StructureMapTransform.COPY && rt.getParameter().size() == 1) {
      renderTransformParam(b,rt.getParameter().get(0));
    }
 else     if (rt.getTransform() == StructureMapTransform.EVALUATE && rt.getParameter().size() == 1) {
      b.append(""String_Node_Str"");
      b.append(((StringType)rt.getParameter().get(0).getValue()).asStringValue());
      b.append(""String_Node_Str"");
    }
 else     if (rt.getTransform() == StructureMapTransform.EVALUATE && rt.getParameter().size() == 2) {
      b.append(rt.getTransform().toCode());
      b.append(""String_Node_Str"");
      b.append(((IdType)rt.getParameter().get(0).getValue()).asStringValue());
      b.append(((StringType)rt.getParameter().get(1).getValue()).asStringValue());
      b.append(""String_Node_Str"");
    }
 else {
      b.append(rt.getTransform().toCode());
      b.append(""String_Node_Str"");
      boolean first=true;
      for (      StructureMapGroupRuleTargetParameterComponent rtp : rt.getParameter()) {
        if (first)         first=false;
 else         b.append(""String_Node_Str"");
        renderTransformParam(b,rtp);
      }
      b.append(""String_Node_Str"");
    }
  }
  if (rt.hasVariable()) {
    b.append(""String_Node_Str"");
    b.append(rt.getVariable());
  }
  for (  Enumeration<StructureMapListMode> lm : rt.getListMode()) {
    b.append(""String_Node_Str"");
    b.append(lm.getValue().toCode());
    if (lm.getValue() == StructureMapListMode.SHARE) {
      b.append(""String_Node_Str"");
      b.append(rt.getListRuleId());
    }
  }
}","private void renderTarget(StringBuilder b,StructureMapGroupRuleTargetComponent rt) throws FHIRException {
  if (rt.hasContext()) {
    if (rt.getContextType() == StructureMapContextType.TYPE)     b.append(""String_Node_Str"");
    b.append(rt.getContext());
    if (rt.hasElement()) {
      b.append('.');
      b.append(rt.getElement());
    }
  }
  if (rt.hasTransform()) {
    if (rt.hasContext())     b.append(""String_Node_Str"");
    if (rt.getTransform() == StructureMapTransform.COPY && rt.getParameter().size() == 1) {
      renderTransformParam(b,rt.getParameter().get(0));
    }
 else     if (rt.getTransform() == StructureMapTransform.EVALUATE && rt.getParameter().size() == 1) {
      b.append(""String_Node_Str"");
      b.append(((StringType)rt.getParameter().get(0).getValue()).asStringValue());
      b.append(""String_Node_Str"");
    }
 else     if (rt.getTransform() == StructureMapTransform.EVALUATE && rt.getParameter().size() == 2) {
      b.append(rt.getTransform().toCode());
      b.append(""String_Node_Str"");
      b.append(((IdType)rt.getParameter().get(0).getValue()).asStringValue());
      b.append(((StringType)rt.getParameter().get(1).getValue()).asStringValue());
      b.append(""String_Node_Str"");
    }
 else {
      b.append(rt.getTransform().toCode());
      b.append(""String_Node_Str"");
      boolean first=true;
      for (      StructureMapGroupRuleTargetParameterComponent rtp : rt.getParameter()) {
        if (first)         first=false;
 else         b.append(""String_Node_Str"");
        renderTransformParam(b,rtp);
      }
      b.append(""String_Node_Str"");
    }
  }
  if (rt.hasVariable()) {
    b.append(""String_Node_Str"");
    b.append(rt.getVariable());
  }
  for (  Enumeration<StructureMapListMode> lm : rt.getListMode()) {
    b.append(""String_Node_Str"");
    b.append(lm.getValue().toCode());
    if (lm.getValue() == StructureMapListMode.SHARE) {
      b.append(""String_Node_Str"");
      b.append(rt.getListRuleId());
    }
  }
}",0.9756602796478508
23414,"private void parseConceptMap(StructureMap result,FHIRLexer lexer) throws FHIRLexerException {
  lexer.token(""String_Node_Str"");
  ConceptMap map=new ConceptMap();
  String id=lexer.readConstant(""String_Node_Str"");
  if (!id.startsWith(""String_Node_Str""))   lexer.error(""String_Node_Str"");
  map.setId(id.substring(1));
  result.getContained().add(map);
  lexer.token(""String_Node_Str"");
  lexer.skipComments();
  Map<String,String> prefixes=new HashMap<String,String>();
  while (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    String n=lexer.take();
    lexer.token(""String_Node_Str"");
    String v=lexer.readConstant(""String_Node_Str"");
    prefixes.put(n,v);
  }
  while (!lexer.hasToken(""String_Node_Str"")) {
    String srcs=readPrefix(prefixes,lexer);
    lexer.token(""String_Node_Str"");
    String sc=lexer.take();
    ConceptMapEquivalence eq=readEquivalence(lexer);
    String tgts=(eq != ConceptMapEquivalence.UNMATCHED) ? readPrefix(prefixes,lexer) : ""String_Node_Str"";
    ConceptMapGroupComponent g=getGroup(map,srcs,tgts);
    SourceElementComponent e=g.addElement();
    e.setCode(sc);
    TargetElementComponent tgt=e.addTarget();
    if (eq != ConceptMapEquivalence.EQUIVALENT)     tgt.setEquivalence(eq);
    if (tgt.getEquivalence() != ConceptMapEquivalence.UNMATCHED) {
      lexer.token(""String_Node_Str"");
      tgt.setCode(lexer.take());
    }
    if (lexer.hasComment())     tgt.setComments(lexer.take().substring(2).trim());
  }
  lexer.token(""String_Node_Str"");
}","private void parseConceptMap(StructureMap result,FHIRLexer lexer) throws FHIRLexerException {
  lexer.token(""String_Node_Str"");
  ConceptMap map=new ConceptMap();
  String id=lexer.readConstant(""String_Node_Str"");
  if (!id.startsWith(""String_Node_Str""))   lexer.error(""String_Node_Str"");
  map.setId(id.substring(1));
  map.setStatus(ConformanceResourceStatus.DRAFT);
  result.getContained().add(map);
  lexer.token(""String_Node_Str"");
  lexer.skipComments();
  Map<String,String> prefixes=new HashMap<String,String>();
  while (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    String n=lexer.take();
    lexer.token(""String_Node_Str"");
    String v=lexer.readConstant(""String_Node_Str"");
    prefixes.put(n,v);
  }
  while (!lexer.hasToken(""String_Node_Str"")) {
    String srcs=readPrefix(prefixes,lexer);
    lexer.token(""String_Node_Str"");
    String sc=lexer.take();
    ConceptMapEquivalence eq=readEquivalence(lexer);
    String tgts=(eq != ConceptMapEquivalence.UNMATCHED) ? readPrefix(prefixes,lexer) : ""String_Node_Str"";
    ConceptMapGroupComponent g=getGroup(map,srcs,tgts);
    SourceElementComponent e=g.addElement();
    e.setCode(sc);
    TargetElementComponent tgt=e.addTarget();
    if (eq != ConceptMapEquivalence.EQUIVALENT)     tgt.setEquivalence(eq);
    if (tgt.getEquivalence() != ConceptMapEquivalence.UNMATCHED) {
      lexer.token(""String_Node_Str"");
      tgt.setCode(lexer.take());
    }
    if (lexer.hasComment())     tgt.setComments(lexer.take().substring(2).trim());
  }
  lexer.token(""String_Node_Str"");
}",0.98378728923476
23415,"public StructureMap generateMapFromMappings(StructureDefinition sd) throws IOException, FHIRException {
  String id=getLogicalMappingId(sd);
  if (id == null)   return null;
  String prefix=ToolingExtensions.readStringExtension(sd,ToolingExtensions.EXT_MAPPING_PREFIX);
  String suffix=ToolingExtensions.readStringExtension(sd,ToolingExtensions.EXT_MAPPING_SUFFIX);
  if (prefix == null || suffix == null)   return null;
  StringBuilder b=new StringBuilder();
  b.append(prefix);
  ElementDefinition root=sd.getSnapshot().getElementFirstRep();
  String m=getMapping(root,id);
  if (m != null)   b.append(m + ""String_Node_Str"");
  addChildMappings(b,id,""String_Node_Str"",sd,root,false);
  b.append(""String_Node_Str"");
  b.append(suffix);
  b.append(""String_Node_Str"");
  TextFile.stringToFile(b.toString(),""String_Node_Str"");
  StructureMap map=parse(b.toString());
  map.setId(tail(map.getUrl()));
  map.getText().setStatus(NarrativeStatus.GENERATED);
  map.getText().setDiv(new XhtmlNode(NodeType.Element));
  map.getText().getDiv().addTag(""String_Node_Str"").addText(render(map));
  return map;
}","public StructureMap generateMapFromMappings(StructureDefinition sd) throws IOException, FHIRException {
  String id=getLogicalMappingId(sd);
  if (id == null)   return null;
  String prefix=ToolingExtensions.readStringExtension(sd,ToolingExtensions.EXT_MAPPING_PREFIX);
  String suffix=ToolingExtensions.readStringExtension(sd,ToolingExtensions.EXT_MAPPING_SUFFIX);
  if (prefix == null || suffix == null)   return null;
  StringBuilder b=new StringBuilder();
  b.append(prefix);
  ElementDefinition root=sd.getSnapshot().getElementFirstRep();
  String m=getMapping(root,id);
  if (m != null)   b.append(m + ""String_Node_Str"");
  addChildMappings(b,id,""String_Node_Str"",sd,root,false);
  b.append(""String_Node_Str"");
  b.append(suffix);
  b.append(""String_Node_Str"");
  TextFile.stringToFile(b.toString(),""String_Node_Str"");
  StructureMap map=parse(b.toString());
  map.setId(tail(map.getUrl()));
  map.getText().setStatus(NarrativeStatus.GENERATED);
  map.getText().setDiv(new XhtmlNode(NodeType.Element,""String_Node_Str""));
  map.getText().getDiv().addTag(""String_Node_Str"").addText(render(map));
  return map;
}",0.9918625678119348
23416,"private TypeDetails analyseTransform(TransformContext context,StructureMap map,StructureMapGroupRuleTargetComponent tgt,VariableForProfiling var,VariablesForProfiling vars) throws FHIRException {
switch (tgt.getTransform()) {
case CREATE:
    String p=getParamString(vars,tgt.getParameter().get(0));
  return new TypeDetails(CollectionStatus.SINGLETON,p);
case COPY:
return getParam(vars,tgt.getParameter().get(0));
case EVALUATE:
ExpressionNode expr=(ExpressionNode)tgt.getUserData(MAP_EXPRESSION);
if (expr == null) {
expr=fpe.parse(getParamString(vars,tgt.getParameter().get(tgt.getParameter().size() - 1)));
tgt.setUserData(MAP_WHERE_EXPRESSION,expr);
}
return fpe.check(vars,null,null,expr);
case TRANSLATE:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case CC:
ProfiledType res=new ProfiledType(""String_Node_Str"");
if (tgt.getParameter().size() >= 2 && isParamId(vars,tgt.getParameter().get(1))) {
TypeDetails td=vars.get(null,getParamId(vars,tgt.getParameter().get(1))).property.types;
if (td != null && td.hasBinding()) res.addBinding(td.getBinding());
}
return new TypeDetails(CollectionStatus.SINGLETON,res);
case C:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case REFERENCE:
String profile=vars.get(VariableMode.OUTPUT,getParamId(vars,tgt.getParameterFirstRep())).property.getProfileProperty().getStructure().getUrl();
TypeDetails td=new TypeDetails(CollectionStatus.SINGLETON);
td.addType(""String_Node_Str"",profile);
return td;
default :
throw new Error(""String_Node_Str"" + tgt.getTransform().toCode());
}
}","private TypeDetails analyseTransform(TransformContext context,StructureMap map,StructureMapGroupRuleTargetComponent tgt,VariableForProfiling var,VariablesForProfiling vars) throws FHIRException {
switch (tgt.getTransform()) {
case CREATE:
    String p=getParamString(vars,tgt.getParameter().get(0));
  return new TypeDetails(CollectionStatus.SINGLETON,p);
case COPY:
return getParam(vars,tgt.getParameter().get(0));
case EVALUATE:
ExpressionNode expr=(ExpressionNode)tgt.getUserData(MAP_EXPRESSION);
if (expr == null) {
expr=fpe.parse(getParamString(vars,tgt.getParameter().get(tgt.getParameter().size() - 1)));
tgt.setUserData(MAP_WHERE_EXPRESSION,expr);
}
return fpe.check(vars,null,expr);
case TRANSLATE:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case CC:
ProfiledType res=new ProfiledType(""String_Node_Str"");
if (tgt.getParameter().size() >= 2 && isParamId(vars,tgt.getParameter().get(1))) {
TypeDetails td=vars.get(null,getParamId(vars,tgt.getParameter().get(1))).property.types;
if (td != null && td.hasBinding()) res.addBinding(td.getBinding());
}
return new TypeDetails(CollectionStatus.SINGLETON,res);
case C:
return new TypeDetails(CollectionStatus.SINGLETON,""String_Node_Str"");
case REFERENCE:
String profile=vars.get(VariableMode.OUTPUT,getParamId(vars,tgt.getParameterFirstRep())).property.getProfileProperty().getStructure().getUrl();
TypeDetails td=new TypeDetails(CollectionStatus.SINGLETON);
td.addType(""String_Node_Str"",profile);
return td;
default :
throw new Error(""String_Node_Str"" + tgt.getTransform().toCode());
}
}",0.9984061204972904
23417,"private void parseSource(StructureMapGroupRuleComponent rule,FHIRLexer lexer) throws FHIRException {
  StructureMapGroupRuleSourceComponent source=rule.addSource();
  if (lexer.hasToken(""String_Node_Str""))   lexer.next();
 else   source.setRequired(true);
  source.setContext(lexer.take());
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    source.setElement(lexer.take());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    String type=lexer.takeDottedToken();
    String min=lexer.take();
    lexer.token(""String_Node_Str"");
    String max=lexer.take();
  }
  if (Utilities.existsInList(lexer.getCurrent(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   if (lexer.getCurrent().equals(""String_Node_Str"")) {
    source.setListMode(StructureMapListMode.SHARE);
    lexer.take();
  }
 else   source.setListMode(StructureMapListMode.fromCode(lexer.take()));
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    source.setVariable(lexer.take());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    ExpressionNode node=fpe.parse(lexer);
    source.setUserData(MAP_WHERE_EXPRESSION,node);
    source.setCondition(node.toString());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    ExpressionNode node=fpe.parse(lexer);
    source.setUserData(MAP_WHERE_CHECK,node);
    source.setCheck(node.toString());
  }
}","private void parseSource(StructureMapGroupRuleComponent rule,FHIRLexer lexer) throws FHIRException {
  StructureMapGroupRuleSourceComponent source=rule.addSource();
  if (lexer.hasToken(""String_Node_Str""))   lexer.next();
 else   source.setRequired(true);
  source.setContext(lexer.take());
  source.setContextType(StructureMapContextType.VARIABLE);
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    source.setElement(lexer.take());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.token(""String_Node_Str"");
    String type=lexer.takeDottedToken();
    String min=lexer.take();
    lexer.token(""String_Node_Str"");
    String max=lexer.take();
  }
  if (Utilities.existsInList(lexer.getCurrent(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))   if (lexer.getCurrent().equals(""String_Node_Str"")) {
    source.setListMode(StructureMapListMode.SHARE);
    lexer.take();
  }
 else   source.setListMode(StructureMapListMode.fromCode(lexer.take()));
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    source.setVariable(lexer.take());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    ExpressionNode node=fpe.parse(lexer);
    source.setUserData(MAP_WHERE_EXPRESSION,node);
    source.setCondition(node.toString());
  }
  if (lexer.hasToken(""String_Node_Str"")) {
    lexer.take();
    ExpressionNode node=fpe.parse(lexer);
    source.setUserData(MAP_WHERE_CHECK,node);
    source.setCheck(node.toString());
  }
}",0.9797737401439836
23418,"public static void execute() throws Exception {
  ValidationEngineTests self=new ValidationEngineTests();
  self.testTransform();
  System.out.println(""String_Node_Str"");
}","public static void execute() throws Exception {
  ValidationEngineTests self=new ValidationEngineTests();
  self.test140Telus();
  System.out.println(""String_Node_Str"");
}",0.9620991253644317
23419,"private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasContentReference()) {
        return getElementDefinitionById(sd,ed.getContentReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(sd,sd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasContentReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionById(sd,ed.getContentReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}","private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasContentReference()) {
        return getElementDefinitionById(sd,ed.getContentReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(nsd,nsd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasContentReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionById(sd,ed.getContentReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}",0.9995037220843672
23420,"public Base translate(TransformContext context,StructureMap map,Base source,String conceptMapUrl,String fieldToReturn) throws FHIRException {
  Coding src=new Coding();
  if (source.isPrimitive()) {
    src.setCode(source.primitiveValue());
  }
 else   if (""String_Node_Str"".equals(source.fhirType())) {
    Base[] b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setSystem(b[0].primitiveValue());
    b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setCode(b[0].primitiveValue());
  }
 else   if (""String_Node_Str"".equals(source.fhirType())) {
    Base[] b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setSystem(b[0].primitiveValue());
    b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setCode(b[0].primitiveValue());
  }
 else   throw new FHIRException(""String_Node_Str"" + source.fhirType());
  if (conceptMapUrl.equals(""String_Node_Str"")) {
    String uri=worker.oid2Uri(src.getCode());
    if (uri == null)     uri=""String_Node_Str"" + src.getCode();
    if (""String_Node_Str"".equals(fieldToReturn))     return new UriType(uri);
 else     throw new FHIRException(""String_Node_Str"");
  }
 else {
    ConceptMap cmap=null;
    if (conceptMapUrl.startsWith(""String_Node_Str"")) {
      for (      Resource r : map.getContained()) {
        if (r instanceof ConceptMap && ((ConceptMap)r).getId().equals(conceptMapUrl.substring(1)))         cmap=(ConceptMap)r;
      }
    }
 else     cmap=worker.fetchResource(ConceptMap.class,conceptMapUrl);
    Coding outcome=null;
    boolean done=false;
    String message=null;
    if (cmap == null) {
      if (services == null)       message=""String_Node_Str"" + conceptMapUrl;
 else {
        outcome=services.translate(context.appInfo,src,conceptMapUrl);
        done=true;
      }
    }
 else {
      List<SourceElementComponentWrapper> list=new ArrayList<SourceElementComponentWrapper>();
      for (      ConceptMapGroupComponent g : cmap.getGroup()) {
        for (        SourceElementComponent e : g.getElement()) {
          if (!src.hasSystem() && src.getCode().equals(e.getCode()))           list.add(new SourceElementComponentWrapper(g,e));
 else           if (src.hasSystem() && src.getSystem().equals(g.getSource()) && src.getCode().equals(e.getCode()))           list.add(new SourceElementComponentWrapper(g,e));
        }
      }
      if (list.size() == 0)       done=true;
 else       if (list.get(0).comp.getTarget().size() == 0)       message=""String_Node_Str"" + conceptMapUrl + ""String_Node_Str""+ src.getCode();
 else {
        for (        TargetElementComponent tgt : list.get(0).comp.getTarget()) {
          if (tgt.getEquivalence() == ConceptMapEquivalence.EQUAL || tgt.getEquivalence() == ConceptMapEquivalence.EQUIVALENT || tgt.getEquivalence() == ConceptMapEquivalence.WIDER) {
            if (done) {
              message=""String_Node_Str"" + conceptMapUrl + ""String_Node_Str""+ src.getCode();
              done=false;
            }
 else {
              done=true;
              outcome=new Coding().setCode(tgt.getCode()).setSystem(list.get(0).group.getTarget());
            }
          }
 else           if (tgt.getEquivalence() == ConceptMapEquivalence.UNMATCHED) {
            done=true;
          }
        }
        if (!done)         message=""String_Node_Str"" + conceptMapUrl + ""String_Node_Str""+ src.getCode();
      }
    }
    if (!done)     throw new FHIRException(message);
    if (outcome == null)     return null;
    if (""String_Node_Str"".equals(fieldToReturn))     return new CodeType(outcome.getCode());
 else     return outcome;
  }
}","public Base translate(TransformContext context,StructureMap map,Base source,String conceptMapUrl,String fieldToReturn) throws FHIRException {
  Coding src=new Coding();
  if (source.isPrimitive()) {
    src.setCode(source.primitiveValue());
  }
 else   if (""String_Node_Str"".equals(source.fhirType())) {
    Base[] b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setSystem(b[0].primitiveValue());
    b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setCode(b[0].primitiveValue());
  }
 else   if (""String_Node_Str"".equals(source.fhirType())) {
    Base[] b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setSystem(b[0].primitiveValue());
    b=source.getProperty(""String_Node_Str"".hashCode(),""String_Node_Str"",true);
    if (b.length == 1)     src.setCode(b[0].primitiveValue());
  }
 else   throw new FHIRException(""String_Node_Str"" + source.fhirType());
  String su=conceptMapUrl;
  if (conceptMapUrl.equals(""String_Node_Str"")) {
    String uri=worker.oid2Uri(src.getCode());
    if (uri == null)     uri=""String_Node_Str"" + src.getCode();
    if (""String_Node_Str"".equals(fieldToReturn))     return new UriType(uri);
 else     throw new FHIRException(""String_Node_Str"");
  }
 else {
    ConceptMap cmap=null;
    if (conceptMapUrl.startsWith(""String_Node_Str"")) {
      for (      Resource r : map.getContained()) {
        if (r instanceof ConceptMap && ((ConceptMap)r).getId().equals(conceptMapUrl.substring(1))) {
          cmap=(ConceptMap)r;
          su=map.getUrl() + conceptMapUrl;
        }
      }
    }
 else     cmap=worker.fetchResource(ConceptMap.class,conceptMapUrl);
    Coding outcome=null;
    boolean done=false;
    String message=null;
    if (cmap == null) {
      if (services == null)       message=""String_Node_Str"" + conceptMapUrl;
 else {
        outcome=services.translate(context.appInfo,src,conceptMapUrl);
        done=true;
      }
    }
 else {
      List<SourceElementComponentWrapper> list=new ArrayList<SourceElementComponentWrapper>();
      for (      ConceptMapGroupComponent g : cmap.getGroup()) {
        for (        SourceElementComponent e : g.getElement()) {
          if (!src.hasSystem() && src.getCode().equals(e.getCode()))           list.add(new SourceElementComponentWrapper(g,e));
 else           if (src.hasSystem() && src.getSystem().equals(g.getSource()) && src.getCode().equals(e.getCode()))           list.add(new SourceElementComponentWrapper(g,e));
        }
      }
      if (list.size() == 0)       done=true;
 else       if (list.get(0).comp.getTarget().size() == 0)       message=""String_Node_Str"" + su + ""String_Node_Str""+ src.getCode();
 else {
        for (        TargetElementComponent tgt : list.get(0).comp.getTarget()) {
          if (tgt.getEquivalence() == null || tgt.getEquivalence() == ConceptMapEquivalence.EQUAL || tgt.getEquivalence() == ConceptMapEquivalence.EQUIVALENT || tgt.getEquivalence() == ConceptMapEquivalence.WIDER) {
            if (done) {
              message=""String_Node_Str"" + su + ""String_Node_Str""+ src.getCode();
              done=false;
            }
 else {
              done=true;
              outcome=new Coding().setCode(tgt.getCode()).setSystem(list.get(0).group.getTarget());
            }
          }
 else           if (tgt.getEquivalence() == ConceptMapEquivalence.UNMATCHED) {
            done=true;
          }
        }
        if (!done)         message=""String_Node_Str"" + su + ""String_Node_Str""+ src.getCode();
      }
    }
    if (!done)     throw new FHIRException(message);
    if (outcome == null)     return null;
    if (""String_Node_Str"".equals(fieldToReturn))     return new CodeType(outcome.getCode());
 else     return outcome;
  }
}",0.9788018433179724
23421,"private String getInputName(StructureMapGroupComponent g,StructureMapInputMode mode,String def) throws DefinitionException {
  String name=null;
  for (  StructureMapGroupInputComponent inp : g.getInput()) {
    if (inp.getMode() == mode)     if (name == null)     throw new DefinitionException(""String_Node_Str"");
 else     name=g.getName();
  }
  return name == null ? def : name;
}","private String getInputName(StructureMapGroupComponent g,StructureMapInputMode mode,String def) throws DefinitionException {
  String name=null;
  for (  StructureMapGroupInputComponent inp : g.getInput()) {
    if (inp.getMode() == mode)     if (name != null)     throw new DefinitionException(""String_Node_Str"");
 else     name=inp.getName();
  }
  return name == null ? def : name;
}",0.9922077922077922
23422,"private ConceptMapGroupComponent getGroup(ConceptMap map,String srcs,String tgts){
  for (  ConceptMapGroupComponent grp : map.getGroup()) {
    if (grp.getSource().equals(srcs) && grp.getTarget().equals(tgts))     return grp;
  }
  ConceptMapGroupComponent grp=map.addGroup();
  grp.setSource(srcs);
  grp.setTarget(tgts);
  return grp;
}","private ConceptMapGroupComponent getGroup(ConceptMap map,String srcs,String tgts){
  for (  ConceptMapGroupComponent grp : map.getGroup()) {
    if (grp.getSource().equals(srcs))     if ((tgts == null && !grp.hasTarget()) || (tgts != null && tgts.equals(grp.getTarget())))     return grp;
  }
  ConceptMapGroupComponent grp=map.addGroup();
  grp.setSource(srcs);
  grp.setTarget(tgts);
  return grp;
}",0.8864864864864865
23423,"private FhirFormat checkIsResource(String path){
  String ext=Utilities.getFileExtension(path);
  if (!Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    try {
      Manager.parse(context,new FileInputStream(path),FhirFormat.XML);
      return FhirFormat.XML;
    }
 catch (    Exception e) {
    }
  }
  if (!Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    try {
      Manager.parse(context,new FileInputStream(path),FhirFormat.JSON);
      return FhirFormat.JSON;
    }
 catch (    Exception e) {
    }
  }
  if (!Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    try {
      Manager.parse(context,new FileInputStream(path),FhirFormat.TURTLE);
      return FhirFormat.TURTLE;
    }
 catch (    Exception e) {
    }
  }
  if (!Utilities.existsInList(ext,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    try {
      new StructureMapUtilities(context,null,null).parse(TextFile.fileToString(path));
      return FhirFormat.TEXT;
    }
 catch (    Exception e) {
    }
  }
  return null;
}","private FhirFormat checkIsResource(String path){
  String ext=Utilities.getFileExtension(path);
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.XML;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.JSON;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TURTLE;
  if (Utilities.existsInList(ext,""String_Node_Str""))   return FhirFormat.TEXT;
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.XML);
    return FhirFormat.XML;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.JSON);
    return FhirFormat.JSON;
  }
 catch (  Exception e) {
  }
  try {
    Manager.parse(context,new FileInputStream(path),FhirFormat.TURTLE);
    return FhirFormat.TURTLE;
  }
 catch (  Exception e) {
  }
  try {
    new StructureMapUtilities(context,null,null).parse(TextFile.fileToString(path));
    return FhirFormat.TEXT;
  }
 catch (  Exception e) {
  }
  return null;
}",0.6276545540349221
23424,"public void loadIg(String src) throws IOException, FHIRException, Exception {
  String canonical=null;
  Map<String,byte[]> source=loadSource(src,""String_Node_Str"");
  for (  Entry<String,byte[]> t : source.entrySet()) {
    String fn=t.getKey();
    Resource res=null;
    if (fn.endsWith(""String_Node_Str""))     res=new XmlParser().parse(t.getValue());
 else     if (fn.endsWith(""String_Node_Str""))     res=new JsonParser().parse(t.getValue());
 else     if (fn.endsWith(""String_Node_Str""))     res=new StructureMapUtilities(context,null,null).parse(TextFile.bytesToString(t.getValue()));
    if (res != null && res instanceof BaseConformance) {
      context.seeResource(((BaseConformance)res).getUrl(),res);
    }
 else     if (res != null && res instanceof Questionnaire) {
      context.seeResource(((Questionnaire)res).getUrl(),res);
    }
    if (res instanceof ImplementationGuide)     canonical=((ImplementationGuide)res).getUrl();
  }
  if (canonical != null)   grabNatives(source,canonical);
}","public void loadIg(String src) throws IOException, FHIRException, Exception {
  String canonical=null;
  Map<String,byte[]> source=loadSource(src,""String_Node_Str"");
  for (  Entry<String,byte[]> t : source.entrySet()) {
    String fn=t.getKey();
    Resource res=null;
    try {
      if (fn.endsWith(""String_Node_Str""))       res=new XmlParser().parse(t.getValue());
 else       if (fn.endsWith(""String_Node_Str""))       res=new JsonParser().parse(t.getValue());
 else       if (fn.endsWith(""String_Node_Str""))       res=new StructureMapUtilities(context,null,null).parse(TextFile.bytesToString(t.getValue()));
    }
 catch (    Exception e) {
      throw new Exception(""String_Node_Str"" + fn + ""String_Node_Str""+ e.getMessage(),e);
    }
    if (res != null && res instanceof BaseConformance) {
      context.seeResource(((BaseConformance)res).getUrl(),res);
    }
 else     if (res != null && res instanceof Questionnaire) {
      context.seeResource(((Questionnaire)res).getUrl(),res);
    }
    if (res instanceof ImplementationGuide)     canonical=((ImplementationGuide)res).getUrl();
  }
  if (canonical != null)   grabNatives(source,canonical);
}",0.9305555555555556
23425,"private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasContentReference()) {
        return getElementDefinitionById(sd,ed.getContentReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(sd,sd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasContentReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionById(sd,ed.getContentReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}","private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasContentReference()) {
        return getElementDefinitionById(sd,ed.getContentReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(nsd,nsd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasContentReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionById(sd,ed.getContentReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}",0.9995037220843672
23426,"private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  utils.setIds(sd,true);
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,true);
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (!sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  FluentPathEngine fpe=new FluentPathEngine(context);
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    for (    ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
      if (inv.hasExpression()) {
        try {
          ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
          if (n == null) {
            n=fpe.parse(inv.getExpression());
            inv.setUserData(""String_Node_Str"",n);
          }
          fpe.check(null,sd.getKind() == StructureDefinitionKind.RESOURCE ? sd.getType() : ""String_Node_Str"",ed.getPath(),n);
        }
 catch (        Exception e) {
          f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl() + ""String_Node_Str"" + ed.getPath()+ ""String_Node_Str""+ inv.getKey(),e.getMessage(),IssueSeverity.ERROR));
        }
      }
    }
  }
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(convertToElement(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}","private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  utils.setIds(sd,true);
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,true);
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (!sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  validateExpressions(f,sd);
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(convertToElement(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}",0.799721835883171
23427,"private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,NodeStack stack) throws FHIRException, FHIRException {
  ResourceProfiles resourceProfiles=getResourceProfiles(resource);
  if (!resourceProfiles.isProcessed())   checkDeclaredProfiles(resourceProfiles,errors,resource,element,stack);
  if (!resourceProfiles.isProcessed()) {
    resourceProfiles.setProcessed();
    if (!resourceProfiles.hasProfiles() && (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str""))) {
      validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    }
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
 else {
    for (    ProfileUsage profileUsage : resourceProfiles.uncheckedProfiles()) {
      profileUsage.setChecked();
      validateElement(errors,profileUsage.getProfile(),profileUsage.getProfile().getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    }
  }
}","private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,NodeStack stack) throws FHIRException, FHIRException {
  ResourceProfiles resourceProfiles=getResourceProfiles(resource);
  if (!resourceProfiles.isProcessed())   checkDeclaredProfiles(resourceProfiles,errors,resource,element,stack);
  if (!resourceProfiles.isProcessed()) {
    resourceProfiles.setProcessed();
    if (!resourceProfiles.hasProfiles() && (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str""))) {
      validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    }
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
  for (  ProfileUsage profileUsage : resourceProfiles.uncheckedProfiles()) {
    profileUsage.setChecked();
    validateElement(errors,profileUsage.getProfile(),profileUsage.getProfile().getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
  }
}",0.9370786516853932
23428,"private void generateOutputsStructureDefinition(FetchedFile f,FetchedResource r,StructureDefinition sd,Map<String,String> vars,boolean regen) throws Exception {
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  StructureDefinitionRenderer sdr=new StructureDefinitionRenderer(context,checkAppendSlash(specPath),sd,Utilities.path(tempDir),igpkp,specMaps);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.summary(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.header(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.diff(igpkp.getDefinitionsName(r)),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.snapshot(igpkp.getDefinitionsName(r)),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.tx(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.inv(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.dict(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.mappings(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.csvs(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId(),sdr.exampleList(fileList),f.getOutputNames(),r,vars,null);
  if (!regen && sd.getKind() != StructureDefinitionKind.LOGICAL && igpkp.wantGen(r,""String_Node_Str"")) {
    String path=Utilities.path(tempDir,r.getId() + ""String_Node_Str"");
    f.getOutputNames().add(path);
    new ProfileUtilities(context,errors,igpkp).generateSchematrons(new FileOutputStream(path),sd);
  }
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
}","private void generateOutputsStructureDefinition(FetchedFile f,FetchedResource r,StructureDefinition sd,Map<String,String> vars,boolean regen) throws Exception {
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  StructureDefinitionRenderer sdr=new StructureDefinitionRenderer(context,checkAppendSlash(specPath),sd,Utilities.path(tempDir),igpkp,specMaps);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.summary(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.header(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.diff(igpkp.getDefinitionsName(r)),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.snapshot(igpkp.getDefinitionsName(r)),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.tx(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.inv(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.dict(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",sdr.mappings(),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
  if (igpkp.wantGen(r,""String_Node_Str""))   fragment(""String_Node_Str"" + sd.getId(),sdr.exampleList(fileList),f.getOutputNames(),r,vars,null);
  if (igpkp.wantGen(r,""String_Node_Str"")) {
    String path=Utilities.path(tempDir,r.getId() + ""String_Node_Str"");
    f.getOutputNames().add(path);
    new ProfileUtilities(context,errors,igpkp).generateCsvs(new FileOutputStream(path),sd);
  }
  if (!regen && sd.getKind() != StructureDefinitionKind.LOGICAL && igpkp.wantGen(r,""String_Node_Str"")) {
    String path=Utilities.path(tempDir,r.getId() + ""String_Node_Str"");
    f.getOutputNames().add(path);
    new ProfileUtilities(context,errors,igpkp).generateSchematrons(new FileOutputStream(path),sd);
  }
  if (igpkp.wantGen(r,""String_Node_Str""))   fragmentError(""String_Node_Str"" + sd.getId() + ""String_Node_Str"",""String_Node_Str"",f.getOutputNames());
}",0.916998378298688
23429,"private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasNameReference()) {
        return getElementDefinitionById(sd,ed.getNameReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(sd,sd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasNameReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionById(sd,ed.getNameReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}","private ElementDefinitionMatch getElementDefinition(StructureDefinition sd,String path,boolean allowTypedName) throws PathEngineException {
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(path)) {
      if (ed.hasNameReference()) {
        return getElementDefinitionByName(sd,ed.getNameReference());
      }
 else       return new ElementDefinitionMatch(ed,null);
    }
    if (ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3)) && path.length() == ed.getPath().length() - 3)     return new ElementDefinitionMatch(ed,null);
    if (allowTypedName && ed.getPath().endsWith(""String_Node_Str"") && path.startsWith(ed.getPath().substring(0,ed.getPath().length() - 3))&& path.length() > ed.getPath().length() - 3) {
      String s=Utilities.uncapitalize(path.substring(ed.getPath().length() - 3));
      if (primitiveTypes.contains(s))       return new ElementDefinitionMatch(ed,s);
 else       return new ElementDefinitionMatch(ed,path.substring(ed.getPath().length() - 3));
    }
    if (ed.getPath().contains(""String_Node_Str"") && path.startsWith(ed.getPath() + ""String_Node_Str"") && (ed.getType().size() > 0)&& !isAbstractType(ed.getType())) {
      if (ed.getType().size() > 1)       throw new PathEngineException(""String_Node_Str"");
      StructureDefinition nsd=worker.fetchResource(StructureDefinition.class,""String_Node_Str"" + ed.getType().get(0).getCode());
      if (nsd == null)       throw new PathEngineException(""String_Node_Str"" + ed.getType().get(0).getCode());
      return getElementDefinition(nsd,nsd.getId() + path.substring(ed.getPath().length()),allowTypedName);
    }
    if (ed.hasNameReference() && path.startsWith(ed.getPath() + ""String_Node_Str"")) {
      ElementDefinitionMatch m=getElementDefinitionByName(sd,ed.getNameReference());
      return getElementDefinition(sd,m.definition.getPath() + path.substring(ed.getPath().length()),allowTypedName);
    }
  }
  return null;
}",0.9965087281795512
23430,"private ExpressionNode parseExpression(FHIRLexer lexer,boolean proximal) throws FHIRLexerException {
  ExpressionNode result=new ExpressionNode(lexer.nextId());
  SourceLocation c=lexer.getCurrentStartLocation();
  result.setStart(lexer.getCurrentLocation());
  if (lexer.getCurrent().equals(""String_Node_Str"")) {
    lexer.take();
    lexer.setCurrent(""String_Node_Str"" + lexer.getCurrent());
  }
  if (lexer.getCurrent().equals(""String_Node_Str"")) {
    lexer.take();
    lexer.setCurrent(""String_Node_Str"" + lexer.getCurrent());
  }
  if (lexer.isConstant(false)) {
    checkConstant(lexer.getCurrent(),lexer);
    result.setConstant(lexer.take());
    result.setKind(Kind.Constant);
    result.setEnd(lexer.getCurrentLocation());
  }
 else   if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    result.setKind(Kind.Group);
    result.setGroup(parseExpression(lexer,true));
    if (!""String_Node_Str"".equals(lexer.getCurrent()))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    result.setEnd(lexer.getCurrentLocation());
    lexer.next();
  }
 else {
    if (!lexer.isToken() && !lexer.getCurrent().startsWith(""String_Node_Str""))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    if (lexer.getCurrent().startsWith(""String_Node_Str""))     result.setName(lexer.readConstant(""String_Node_Str""));
 else     result.setName(lexer.take());
    result.setEnd(lexer.getCurrentLocation());
    if (!result.checkName())     throw lexer.error(""String_Node_Str"" + result.getName() + ""String_Node_Str"");
    if (""String_Node_Str"".equals(lexer.getCurrent())) {
      Function f=Function.fromCode(result.getName());
      FunctionDetails details=null;
      if (f == null) {
        details=hostServices.resolveFunction(result.getName());
        if (details == null)         throw lexer.error(""String_Node_Str"" + result.getName() + ""String_Node_Str"");
        f=Function.Custom;
      }
      result.setKind(Kind.Function);
      result.setFunction(f);
      lexer.next();
      while (!""String_Node_Str"".equals(lexer.getCurrent())) {
        result.getParameters().add(parseExpression(lexer,true));
        if (""String_Node_Str"".equals(lexer.getCurrent()))         lexer.next();
 else         if (!""String_Node_Str"".equals(lexer.getCurrent()))         throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
      }
      result.setEnd(lexer.getCurrentLocation());
      lexer.next();
      checkParameters(lexer,c,result,details);
    }
 else     result.setKind(Kind.Name);
  }
  ExpressionNode focus=result;
  if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    ExpressionNode item=new ExpressionNode(lexer.nextId());
    item.setKind(Kind.Function);
    item.setFunction(ExpressionNode.Function.Item);
    item.getParameters().add(parseExpression(lexer,true));
    if (!lexer.getCurrent().equals(""String_Node_Str""))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    lexer.next();
    result.setInner(item);
    focus=item;
  }
  if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    focus.setInner(parseExpression(lexer,false));
  }
  result.setProximal(proximal);
  if (proximal) {
    while (lexer.isOp()) {
      focus.setOperation(ExpressionNode.Operation.fromCode(lexer.getCurrent()));
      focus.setOpStart(lexer.getCurrentStartLocation());
      focus.setOpEnd(lexer.getCurrentLocation());
      lexer.next();
      focus.setOpNext(parseExpression(lexer,false));
      focus=focus.getOpNext();
    }
    result=organisePrecedence(lexer,result);
  }
  return result;
}","private ExpressionNode parseExpression(FHIRLexer lexer,boolean proximal) throws FHIRLexerException {
  ExpressionNode result=new ExpressionNode(lexer.nextId());
  SourceLocation c=lexer.getCurrentStartLocation();
  result.setStart(lexer.getCurrentLocation());
  if (lexer.getCurrent().equals(""String_Node_Str"")) {
    lexer.take();
    lexer.setCurrent(""String_Node_Str"" + lexer.getCurrent());
  }
  if (lexer.getCurrent().equals(""String_Node_Str"")) {
    lexer.take();
    lexer.setCurrent(""String_Node_Str"" + lexer.getCurrent());
  }
  if (lexer.isConstant(false)) {
    checkConstant(lexer.getCurrent(),lexer);
    result.setConstant(lexer.take());
    result.setKind(Kind.Constant);
    result.setEnd(lexer.getCurrentLocation());
  }
 else   if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    result.setKind(Kind.Group);
    result.setGroup(parseExpression(lexer,true));
    if (!""String_Node_Str"".equals(lexer.getCurrent()))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    result.setEnd(lexer.getCurrentLocation());
    lexer.next();
  }
 else {
    if (!lexer.isToken() && !lexer.getCurrent().startsWith(""String_Node_Str""))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    if (lexer.getCurrent().startsWith(""String_Node_Str""))     result.setName(lexer.readConstant(""String_Node_Str""));
 else     result.setName(lexer.take());
    result.setEnd(lexer.getCurrentLocation());
    if (!result.checkName())     throw lexer.error(""String_Node_Str"" + result.getName() + ""String_Node_Str"");
    if (""String_Node_Str"".equals(lexer.getCurrent())) {
      Function f=Function.fromCode(result.getName());
      FunctionDetails details=null;
      if (f == null) {
        details=hostServices != null ? hostServices.resolveFunction(result.getName()) : null;
        if (details == null)         throw lexer.error(""String_Node_Str"" + result.getName() + ""String_Node_Str"");
        f=Function.Custom;
      }
      result.setKind(Kind.Function);
      result.setFunction(f);
      lexer.next();
      while (!""String_Node_Str"".equals(lexer.getCurrent())) {
        result.getParameters().add(parseExpression(lexer,true));
        if (""String_Node_Str"".equals(lexer.getCurrent()))         lexer.next();
 else         if (!""String_Node_Str"".equals(lexer.getCurrent()))         throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
      }
      result.setEnd(lexer.getCurrentLocation());
      lexer.next();
      checkParameters(lexer,c,result,details);
    }
 else     result.setKind(Kind.Name);
  }
  ExpressionNode focus=result;
  if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    ExpressionNode item=new ExpressionNode(lexer.nextId());
    item.setKind(Kind.Function);
    item.setFunction(ExpressionNode.Function.Item);
    item.getParameters().add(parseExpression(lexer,true));
    if (!lexer.getCurrent().equals(""String_Node_Str""))     throw lexer.error(""String_Node_Str"" + lexer.getCurrent() + ""String_Node_Str"");
    lexer.next();
    result.setInner(item);
    focus=item;
  }
  if (""String_Node_Str"".equals(lexer.getCurrent())) {
    lexer.next();
    focus.setInner(parseExpression(lexer,false));
  }
  result.setProximal(proximal);
  if (proximal) {
    while (lexer.isOp()) {
      focus.setOperation(ExpressionNode.Operation.fromCode(lexer.getCurrent()));
      focus.setOpStart(lexer.getCurrentStartLocation());
      focus.setOpEnd(lexer.getCurrentLocation());
      lexer.next();
      focus.setOpNext(parseExpression(lexer,false));
      focus=focus.getOpNext();
    }
    result=organisePrecedence(lexer,result);
  }
  return result;
}",0.9942934782608696
23431,"private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('\\');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}","private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}",0.997923875432526
23432,"private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('\\');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}","private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}",0.997923875432526
23433,"private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('\\');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}","private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}",0.997923875432526
23434,"private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}","private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
i++;
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}",0.9965493443754312
23435,"private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  if (noInvariantChecks)   return;
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        ok=fpe.evaluateToBoolean(resource,element,n);
        if (!Utilities.noString(msg))         msg=""String_Node_Str"" + msg + ""String_Node_Str"";
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}","private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  if (noInvariantChecks)   return;
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        try {
          ok=fpe.evaluateToBoolean(resource,element,n);
        }
 catch (        PathEngineException e) {
          throw new FHIRException(""String_Node_Str"" + inv.getExpression() + ""String_Node_Str""+ profile.getUrl()+ ""String_Node_Str""+ path+ ""String_Node_Str""+ e.getMessage());
        }
        if (!Utilities.noString(msg))         msg=""String_Node_Str"" + msg + ""String_Node_Str"";
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}",0.9267580974613364
23436,"private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}","private String processConstantString(String s) throws PathEngineException {
  StringBuilder b=new StringBuilder();
  int i=1;
  while (i < s.length() - 1) {
    char ch=s.charAt(i);
    if (ch == '\\') {
      i++;
switch (s.charAt(i)) {
case 't':
        b.append('\t');
      break;
case 'r':
    b.append('\r');
  break;
case 'n':
b.append('\n');
break;
case 'f':
b.append('\f');
break;
case '\'':
b.append('\'');
break;
case '\\':
b.append('\\');
break;
case '/':
b.append('/');
break;
case 'u':
i++;
int uc=Integer.parseInt(s.substring(i,i + 4),16);
b.append((char)uc);
i=i + 4;
break;
default :
throw new PathEngineException(""String_Node_Str"" + s.charAt(i));
}
i++;
}
 else {
b.append(ch);
i++;
}
}
return b.toString();
}",0.9965493443754312
23437,"private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  if (noInvariantChecks)   return;
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        ok=fpe.evaluateToBoolean(resource,element,n);
        if (!Utilities.noString(msg))         msg=""String_Node_Str"" + msg + ""String_Node_Str"";
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}","private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  if (noInvariantChecks)   return;
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        try {
          ok=fpe.evaluateToBoolean(resource,element,n);
        }
 catch (        PathEngineException e) {
          throw new FHIRException(""String_Node_Str"" + inv.getExpression() + ""String_Node_Str""+ profile.getUrl()+ ""String_Node_Str""+ path+ ""String_Node_Str""+ e.getMessage());
        }
        if (!Utilities.noString(msg))         msg=""String_Node_Str"" + msg + ""String_Node_Str"";
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}",0.9267580974613364
23438,"private String makePathLink(ElementDefinition element){
  if (!element.hasName())   return element.getPath();
  if (!element.getPath().contains(""String_Node_Str""))   return element.getName();
  return element.getPath().substring(0,element.getPath().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + element.getName();
}","private String makePathLink(ElementDefinition element){
  return element.getId();
}",0.4039408866995074
23439,"private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,ValidationProfileSet profiles,NodeStack stack) throws FHIRException, FHIRException {
  if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str"")) {
    validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    if (profiles != null)     for (    StructureDefinition profile : profiles.getDefinitions())     validateElement(errors,profile,profile.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    checkDeclaredProfiles(errors,resource,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
}","private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,ValidationProfileSet profiles,NodeStack stack) throws FHIRException, FHIRException {
  if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str"")) {
    if (profiles == null || profiles.empty())     validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    if (profiles != null)     for (    StructureDefinition profile : profiles.getDefinitions())     validateElement(errors,profile,profile.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    checkDeclaredProfiles(errors,resource,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
}",0.9786839666357738
23440,"private String makePathLink(ElementDefinition element){
  if (!element.hasName())   return element.getPath();
  if (!element.getPath().contains(""String_Node_Str""))   return element.getName();
  return element.getPath().substring(0,element.getPath().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + element.getName();
}","private String makePathLink(ElementDefinition element){
  return element.getId();
}",0.4039408866995074
23441,"private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,ValidationProfileSet profiles,NodeStack stack) throws FHIRException, FHIRException {
  if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str"")) {
    if (profiles == null)     validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    if (profiles != null)     for (    StructureDefinition profile : profiles.getDefinitions())     validateElement(errors,profile,profile.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    checkDeclaredProfiles(errors,resource,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
}","private void start(List<ValidationMessage> errors,Element resource,Element element,StructureDefinition defn,ValidationProfileSet profiles,NodeStack stack) throws FHIRException, FHIRException {
  if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),stack.getLiteralPath(),defn.hasSnapshot(),""String_Node_Str"")) {
    if (profiles == null || profiles.empty())     validateElement(errors,defn,defn.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    if (profiles != null)     for (    StructureDefinition profile : profiles.getDefinitions())     validateElement(errors,profile,profile.getSnapshot().getElement().get(0),null,null,resource,element,element.getName(),stack,false);
    checkDeclaredProfiles(errors,resource,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateBundle(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateObservation(errors,element,stack);
    if (element.getType().equals(""String_Node_Str""))     validateQuestionannaireResponse(errors,element,stack);
  }
}",0.9908424908424908
23442,"private String makePathLink(ElementDefinition element){
  if (!element.hasName())   return element.getPath();
  if (!element.getPath().contains(""String_Node_Str""))   return element.getName();
  return element.getPath().substring(0,element.getPath().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + element.getName();
}","private String makePathLink(ElementDefinition element){
  return element.getId();
}",0.4039408866995074
23443,"private String makePathLink(ElementDefinition element){
  if (!element.hasName())   return element.getPath();
  if (!element.getPath().contains(""String_Node_Str""))   return element.getName();
  return element.getPath().substring(0,element.getPath().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + element.getName();
}","private String makePathLink(ElementDefinition element){
  return element.getId();
}",0.4039408866995074
23444,"public ExecutionTypeContext(Object appInfo,String resource,String context,TypeDetails thisItem){
  super();
  this.appInfo=appInfo;
  this.resource=resource;
  this.context=context;
}","public ExecutionTypeContext(Object appInfo,String resource,String context,TypeDetails thisItem){
  super();
  this.appInfo=appInfo;
  this.resource=resource;
  this.context=context;
  this.thisItem=thisItem;
}",0.9336734693877552
23445,"public ExecutionTypeContext(Object appInfo,String resource,String context,TypeDetails thisItem){
  super();
  this.appInfo=appInfo;
  this.resource=resource;
  this.context=context;
}","public ExecutionTypeContext(Object appInfo,String resource,String context,TypeDetails thisItem){
  super();
  this.appInfo=appInfo;
  this.resource=resource;
  this.context=context;
  this.thisItem=thisItem;
}",0.9336734693877552
23446,"public static void main(String[] args) throws Exception {
  CKMImporter self=new CKMImporter();
  for (  String s : new File(""String_Node_Str"").list()) {
    if (s.endsWith(""String_Node_Str"") && !s.contains(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + s);
      org.hl7.fhir.dstu2016may.formats.XmlParser xp=new org.hl7.fhir.dstu2016may.formats.XmlParser();
      org.hl7.fhir.dstu2016may.model.Resource r14=xp.parse(new FileInputStream(""String_Node_Str"" + s));
      org.hl7.fhir.dstu3.model.Resource r17=VersionConvertor_14_20.convertResource(r14);
      org.hl7.fhir.dstu3.formats.XmlParser xc=new org.hl7.fhir.dstu3.formats.XmlParser();
      xc.setOutputStyle(OutputStyle.PRETTY);
      xc.compose(new FileOutputStream(""String_Node_Str"" + s),r17);
    }
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  CKMImporter self=new CKMImporter();
  for (  String s : new File(""String_Node_Str"").list()) {
    if (s.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + s);
      org.hl7.fhir.dstu2016may.formats.XmlParser xp=new org.hl7.fhir.dstu2016may.formats.XmlParser();
      org.hl7.fhir.dstu2016may.model.Resource r14=xp.parse(new FileInputStream(""String_Node_Str"" + s));
      org.hl7.fhir.dstu3.model.Resource r17=VersionConvertor_14_20.convertResource(r14);
      org.hl7.fhir.dstu3.formats.XmlParser xc=new org.hl7.fhir.dstu3.formats.XmlParser();
      xc.setOutputStyle(OutputStyle.PRETTY);
      xc.compose(new FileOutputStream(""String_Node_Str"" + s),r17);
    }
  }
  System.out.println(""String_Node_Str"");
}",0.9728059332509272
23447,"public static boolean isAbsoluteUrl(String ref){
  return ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"")|| ref.startsWith(""String_Node_Str"");
}","public static boolean isAbsoluteUrl(String ref){
  return ref != null && ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"");
}",0.4716981132075472
23448,"/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().equals(""String_Node_Str"")) {
      if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}","/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().equals(""String_Node_Str"")) {
      if (criteria.getFixed() == null)       return false;
 else       if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}",0.9736735520453624
23449,"public String getDisplay(){
  return definition == null ? ""String_Node_Str"" : definition.getDisplay();
}","public String getDisplay(){
  return definition == null ? null : definition.getDisplay();
}",0.9025641025641026
23450,"private Element getFromBundle(Element bundle,String ref,String fullUrl){
  List<Element> entries=new ArrayList<Element>();
  bundle.getNamedChildren(""String_Node_Str"",entries);
  for (  Element we : entries) {
    Element res=we.getNamedChild(""String_Node_Str"");
    if (res != null) {
      String url=genFullUrl(bundle.getNamedChildValue(""String_Node_Str""),we.getNamedChildValue(""String_Node_Str""),res.getName(),res.getNamedChildValue(""String_Node_Str""));
      if (url.endsWith(ref))       return res;
    }
  }
  return null;
}","private Element getFromBundle(Element bundle,String ref,String fullUrl,List<ValidationMessage> errors,String path){
  String targetUrl=null;
  String version=null;
  if (ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"")) {
    if (ref.contains(""String_Node_Str"")) {
      targetUrl=ref.substring(0,ref.indexOf(""String_Node_Str"") - 1);
      version=ref.substring(ref.indexOf(""String_Node_Str"") + 10);
    }
 else     targetUrl=ref;
  }
 else   if (fullUrl == null) {
    rule(errors,IssueType.REQUIRED,-1,-1,path,path.startsWith(""String_Node_Str""),""String_Node_Str"");
    return null;
  }
 else   if (ref.split(""String_Node_Str"").length != 2) {
    rule(errors,IssueType.INVALID,-1,-1,path,false,""String_Node_Str"" + ref);
    return null;
  }
 else {
    String base=""String_Node_Str"";
    if (fullUrl.startsWith(""String_Node_Str"")) {
      String[] parts=fullUrl.split(""String_Node_Str"");
      for (int i=0; i < parts.length - 1; i++) {
        base=base + parts[i] + ""String_Node_Str"";
      }
    }
 else {
      String[] parts;
      parts=fullUrl.split(""String_Node_Str"");
      for (int i=0; i < parts.length - 2; i++) {
        base=base + parts[i] + ""String_Node_Str"";
      }
    }
    String id=null;
    if (ref.contains(""String_Node_Str"")) {
      version=ref.substring(ref.indexOf(""String_Node_Str"") + 10);
      id=ref.substring(0,ref.indexOf(""String_Node_Str"") - 1);
    }
 else     if (base.startsWith(""String_Node_Str""))     id=ref.split(""String_Node_Str"")[1];
 else     id=ref;
    targetUrl=base + id;
  }
  List<Element> entries=new ArrayList<Element>();
  bundle.getNamedChildren(""String_Node_Str"",entries);
  Element match=null;
  for (  Element we : entries) {
    if (we.getChildValue(""String_Node_Str"").equals(targetUrl)) {
      Element r=we.getNamedChild(""String_Node_Str"");
      if (version == null) {
        rule(errors,IssueType.FORBIDDEN,-1,-1,path,match == null,""String_Node_Str"" + ref);
        match=r;
      }
 else {
        try {
          if (r.getChildren(""String_Node_Str"").get(0).getChildValue(""String_Node_Str"").equals(version)) {
            rule(errors,IssueType.FORBIDDEN,-1,-1,path,match == null,""String_Node_Str"" + ref);
            match=r;
          }
        }
 catch (        Exception e) {
          warning(errors,IssueType.REQUIRED,-1,-1,path,r.getChildren(""String_Node_Str"").size() == 1 && r.getChildren(""String_Node_Str"").get(0).getChildValue(""String_Node_Str"") != null,""String_Node_Str"" + targetUrl + ""String_Node_Str"");
        }
      }
    }
  }
  warning(errors,IssueType.REQUIRED,-1,-1,path,match != null || !targetUrl.startsWith(""String_Node_Str""),""String_Node_Str"" + ref);
  return match;
}",0.1695232159551262
23451,"private StructureDefinition checkExtension(List<ValidationMessage> errors,String path,Element element,ElementDefinition def,StructureDefinition profile,NodeStack stack){
  String url=element.getNamedChildValue(""String_Node_Str"");
  boolean isModifier=element.getName().equals(""String_Node_Str"");
  long t=System.nanoTime();
  StructureDefinition ex=context.fetchResource(StructureDefinition.class,url);
  sdTime=sdTime + (System.nanoTime() - t);
  if (ex == null) {
    if (!rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,allowUnknownExtension(url),""String_Node_Str"" + url + ""String_Node_Str""))     warning(errors,IssueType.STRUCTURE,element.line(),element.col(),path,allowUnknownExtension(url),""String_Node_Str"" + url);
  }
 else {
    if (def.getIsModifier())     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"");
 else     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",!ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"");
    checkExtensionContext(errors,element,ex,stack,ex.getUrl());
    if (isModifier)     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"" + url + ""String_Node_Str"");
 else     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",!ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"" + url + ""String_Node_Str"");
  }
  return ex;
}","private StructureDefinition checkExtension(List<ValidationMessage> errors,String path,Element element,ElementDefinition def,StructureDefinition profile,NodeStack stack) throws FHIRException {
  String url=element.getNamedChildValue(""String_Node_Str"");
  boolean isModifier=element.getName().equals(""String_Node_Str"");
  long t=System.nanoTime();
  StructureDefinition ex=context.fetchResource(StructureDefinition.class,url);
  sdTime=sdTime + (System.nanoTime() - t);
  if (ex == null) {
    if (!rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,allowUnknownExtension(url),""String_Node_Str"" + url + ""String_Node_Str""))     warning(errors,IssueType.STRUCTURE,element.line(),element.col(),path,allowUnknownExtension(url),""String_Node_Str"" + url);
  }
 else {
    if (def.getIsModifier())     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"");
 else     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",!ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"");
    checkExtensionContext(errors,element,ex,stack,ex.getUrl());
    if (isModifier)     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"" + url + ""String_Node_Str"");
 else     rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path + ""String_Node_Str"" + url+ ""String_Node_Str"",!ex.getSnapshot().getElement().get(0).getIsModifier(),""String_Node_Str"" + url + ""String_Node_Str"");
    validateElement(errors,ex,ex.getSnapshot().getElement().get(0),null,null,element,element,""String_Node_Str"",stack,false);
  }
  return ex;
}",0.9585798816568049
23452,"/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().equals(""String_Node_Str"")) {
      if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}","/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().equals(""String_Node_Str"")) {
      if (criteria.getFixed() == null)       return false;
 else       if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}",0.9736735520453624
23453,"private void checkReference(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition container,String parentType,NodeStack stack){
  String ref=element.getNamedChildValue(""String_Node_Str"");
  if (Utilities.noString(ref)) {
    warning(errors,IssueType.STRUCTURE,element.line(),element.col(),path,!Utilities.noString(element.getNamedChildValue(""String_Node_Str"")),""String_Node_Str"");
    return;
  }
  Element we=resolve(ref,stack);
  String ft;
  if (we != null)   ft=we.getType();
 else   ft=tryParse(ref);
  if (hint(errors,IssueType.STRUCTURE,element.line(),element.col(),path,ft != null,""String_Node_Str"")) {
    boolean ok=false;
    CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
    for (    TypeRefComponent type : container.getType()) {
      if (!ok && type.getCode().equals(""String_Node_Str"")) {
        if (!type.hasProfile() || type.getProfile().equals(""String_Node_Str""))         ok=true;
 else {
          String pr=type.getProfile();
          String bt=getBaseType(profile,pr);
          if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,bt != null,""String_Node_Str"" + pr + ""String_Node_Str"")) {
            b.append(bt);
            ok=bt.equals(ft);
          }
 else           ok=true;
        }
      }
      if (!ok && type.getCode().equals(""String_Node_Str"")) {
        ok=true;
      }
    }
    rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,ok,""String_Node_Str"" + ft + ""String_Node_Str""+ b.toString()+ ""String_Node_Str"");
  }
}","private void checkReference(List<ValidationMessage> errors,String path,Element element,StructureDefinition profile,ElementDefinition container,String parentType,NodeStack stack){
  String ref=element.getNamedChildValue(""String_Node_Str"");
  if (Utilities.noString(ref)) {
    warning(errors,IssueType.STRUCTURE,element.line(),element.col(),path,!Utilities.noString(element.getNamedChildValue(""String_Node_Str"")),""String_Node_Str"");
    return;
  }
  String refType=ref.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : (localResolve(ref,stack,errors,path) != null ? ""String_Node_Str"" : ""String_Node_Str"");
  Element we=resolve(ref,stack,errors,path);
  String ft;
  if (we != null)   ft=we.getType();
 else   ft=tryParse(ref);
  rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,we != null || !refType.equals(""String_Node_Str""),""String_Node_Str"");
  if (hint(errors,IssueType.STRUCTURE,element.line(),element.col(),path,ft != null,""String_Node_Str"")) {
    boolean ok=false;
    CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
    for (    TypeRefComponent type : container.getType()) {
      if (!ok && type.getCode().equals(""String_Node_Str"")) {
        if (!type.hasProfile() || type.getProfile().equals(""String_Node_Str""))         ok=true;
 else {
          String pr=type.getProfile();
          String bt=getBaseType(profile,pr);
          if (rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,bt != null,""String_Node_Str"" + pr + ""String_Node_Str"")) {
            b.append(bt);
            ok=bt.equals(ft);
          }
 else           ok=true;
          if (ok && type.hasAggregation()) {
            rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,!type.getAggregation().equals(ElementDefinition.AggregationMode.CONTAINED) || refType.equals(""String_Node_Str""),""String_Node_Str"");
            rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,!type.getAggregation().equals(ElementDefinition.AggregationMode.BUNDLED) || refType.equals(""String_Node_Str""),""String_Node_Str"");
            rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,type.getAggregation().equals(ElementDefinition.AggregationMode.CONTAINED) || !refType.equals(""String_Node_Str""),""String_Node_Str"");
          }
        }
      }
      if (!ok && type.getCode().equals(""String_Node_Str"")) {
        ok=true;
      }
    }
    rule(errors,IssueType.STRUCTURE,element.line(),element.col(),path,ok,""String_Node_Str"" + ft + ""String_Node_Str""+ b.toString()+ ""String_Node_Str"");
  }
}",0.5009727626459144
23454,"private Element getValueForDiscriminator(Element element,String discriminator,ElementDefinition criteria){
  return null;
}","private Element getValueForDiscriminator(Element element,String discriminator,ElementDefinition criteria) throws FHIRException {
  throw new FHIRException(""String_Node_Str"");
}",0.7692307692307693
23455,"private boolean valueMatchesCriteria(Element value,ElementDefinition criteria){
  return false;
}","private boolean valueMatchesCriteria(Element value,ElementDefinition criteria) throws FHIRException {
  throw new FHIRException(""String_Node_Str"");
}",0.7398373983739838
23456,"private void checkPrimitive(List<ValidationMessage> errors,String path,String type,ElementDefinition context,Element e,StructureDefinition profile){
  if (isBlank(e.primitiveValue())) {
    return;
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(e.primitiveValue()) || ""String_Node_Str"".equals(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().equals(e.primitiveValue().trim()),""String_Node_Str"");
  }
  if (!type.equalsIgnoreCase(""String_Node_Str"") && e.hasPrimitiveValue()) {
    if (rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().length() > 0,""String_Node_Str"")) {
      warning(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().trim().equals(e.primitiveValue()),""String_Node_Str"");
    }
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!hasTime(e.primitiveValue()) || hasTimeZone(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"") && e.primitiveValue() != null) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,passesCodeWhitespaceRules(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (context.hasBinding() && e.primitiveValue() != null) {
    checkPrimitiveBinding(errors,path,type,context,e,profile);
  }
  if (type.equals(""String_Node_Str"")) {
    XhtmlNode xhtml=e.getXhtml();
    if (xhtml != null) {
      String ns=xhtml.getNsDecl();
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,FormatUtilities.XHTML_NS.equals(ns),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNS(errors,e,path,xhtml.getChildNodes());
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(xhtml.getName()),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNames(errors,e,path,xhtml.getChildNodes());
    }
  }
}","private void checkPrimitive(List<ValidationMessage> errors,String path,String type,ElementDefinition context,Element e,StructureDefinition profile){
  if (isBlank(e.primitiveValue())) {
    return;
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(e.primitiveValue()) || ""String_Node_Str"".equals(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!e.primitiveValue().startsWith(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().equals(e.primitiveValue().trim()),""String_Node_Str"");
  }
  if (!type.equalsIgnoreCase(""String_Node_Str"") && e.hasPrimitiveValue()) {
    if (rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().length() > 0,""String_Node_Str"")) {
      warning(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue() == null || e.primitiveValue().trim().equals(e.primitiveValue()),""String_Node_Str"");
    }
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,!hasTime(e.primitiveValue()) || hasTimeZone(e.primitiveValue()),""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,e.primitiveValue().matches(""String_Node_Str""),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,yearIsValid(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"") && e.primitiveValue() != null) {
    rule(errors,IssueType.INVALID,e.line(),e.col(),path,passesCodeWhitespaceRules(e.primitiveValue()),""String_Node_Str"" + e.primitiveValue() + ""String_Node_Str"");
  }
  if (context.hasBinding() && e.primitiveValue() != null) {
    checkPrimitiveBinding(errors,path,type,context,e,profile);
  }
  if (type.equals(""String_Node_Str"")) {
    XhtmlNode xhtml=e.getXhtml();
    if (xhtml != null) {
      String ns=xhtml.getNsDecl();
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,FormatUtilities.XHTML_NS.equals(ns),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNS(errors,e,path,xhtml.getChildNodes());
      rule(errors,IssueType.INVALID,e.line(),e.col(),path,""String_Node_Str"".equals(xhtml.getName()),""String_Node_Str"" + ns + ""String_Node_Str"");
      checkInnerNames(errors,e,path,xhtml.getChildNodes());
    }
  }
  if (context.hasFixed())   checkFixedValue(errors,path,e,context.getFixed(),context.getName());
}",0.983852172465457
23457,"private boolean isValidFHIRUrn(String uri){
  return (uri.equals(""String_Node_Str""));
}","private boolean isValidFHIRUrn(String uri){
  return (uri.equals(""String_Node_Str"")) || uri.startsWith(""String_Node_Str"");
}",0.8246445497630331
23458,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  updateMaps(base,derived);
  setIds(derived,derived.getName());
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  if (!derived.getDifferential().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"");
  processPaths(derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,false,base.getUrl(),null,false);
  if (!derived.getSnapshot().getElementFirstRep().getType().isEmpty())   throw new Error(""String_Node_Str"" + derived.getSnapshot().getElementFirstRep().getPath() + ""String_Node_Str""+ derived.getUrl()+ ""String_Node_Str""+ base.getUrl());
  updateMaps(base,derived);
  setIds(derived,derived.getName());
}",0.9656292286874154
23459,"private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=r.getConfig() == null ? null : ostr(r.getConfig(),""String_Node_Str"");
      if (ver == null)       ver=version;
      if (!ver.equals(Constants.VERSION)) {
        if (""String_Node_Str"".equals(ver)) {
          file.getErrors().clear();
          org.hl7.fhir.dstu2.model.Resource res2=null;
          if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else           if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
          org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor_10_20(null).convertResource(res2);
          e=new ObjectConverter(context).convert(res);
          r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
          r.setResource(res);
        }
 else         throw new Exception(""String_Node_Str"" + ver);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=r.getConfig() == null ? null : ostr(r.getConfig(),""String_Node_Str"");
      if (ver == null)       ver=version;
      if (""String_Node_Str"".equals(ver)) {
        file.getErrors().clear();
        org.hl7.fhir.dstu2.model.Resource res2=null;
        if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else         if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
        org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor_10_20(null).convertResource(res2);
        e=new ObjectConverter(context).convert(res);
        r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
        r.setResource(res);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}",0.8894518654997697
23460,"private void loadValidationPack() throws FileNotFoundException, IOException, FHIRException {
  String source;
  if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   throw new FHIRException(""String_Node_Str"" + version);
  log(""String_Node_Str"" + source);
  String fn=grabToLocalCache(source);
  log(""String_Node_Str"");
  context=SimpleWorkerContext.fromPack(fn);
}","private void loadValidationPack() throws FileNotFoundException, IOException, FHIRException {
  String source;
  if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   if (version.equals(""String_Node_Str""))   source=""String_Node_Str"";
 else   throw new FHIRException(""String_Node_Str"" + version);
  if (new File(""String_Node_Str"").exists())   context=SimpleWorkerContext.fromPack(""String_Node_Str"");
 else {
    log(""String_Node_Str"" + source);
    String fn=grabToLocalCache(source);
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(fn);
  }
}",0.8360498561840843
23461,"private Coding buildCoding(String uri,String code) throws FHIRException {
  String system=null;
  ValueSet vs=worker.fetchResource(ValueSet.class,uri);
  if (vs != null) {
    ValueSetExpansionOutcome vse=worker.expandVS(vs,true,false);
    if (vse.getError() != null)     throw new FHIRException(vse.getError());
    for (    ValueSetExpansionContainsComponent t : vse.getValueset().getExpansion().getContains()) {
      if (code.equals(t.getCode()) && t.hasSystem()) {
        system=t.getSystem();
        break;
      }
    }
    if (system == null)     throw new FHIRException(""String_Node_Str"" + code + ""String_Node_Str""+ uri+ ""String_Node_Str"");
  }
 else   system=uri;
  return new Coding().setSystem(system).setCode(code);
}","private Coding buildCoding(String uri,String code) throws FHIRException {
  String system=null;
  ValueSet vs=worker.fetchResource(ValueSet.class,uri);
  if (vs != null) {
    ValueSetExpansionOutcome vse=worker.expandVS(vs,true,false);
    if (vse.getError() != null)     throw new FHIRException(vse.getError());
    CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
    for (    ValueSetExpansionContainsComponent t : vse.getValueset().getExpansion().getContains()) {
      if (t.hasCode())       b.append(t.getCode());
      if (code.equals(t.getCode()) && t.hasSystem()) {
        system=t.getSystem();
        break;
      }
      if (code.equalsIgnoreCase(t.getDisplay()) && t.hasSystem()) {
        system=t.getSystem();
        break;
      }
    }
    if (system == null)     throw new FHIRException(""String_Node_Str"" + code + ""String_Node_Str""+ uri+ ""String_Node_Str""+ b.toString()+ ""String_Node_Str"");
  }
 else   system=uri;
  return new Coding().setSystem(system).setCode(code);
}",0.8420448018380241
23462,"@Override public void setProperty(String name,Base value) throws FHIRException {
  if (name.equals(""String_Node_Str""))   this.url=castToUri(value);
 else   if (name.equals(""String_Node_Str""))   this.getIdentifier().add(castToIdentifier(value));
 else   if (name.equals(""String_Node_Str""))   this.version=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.name=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.title=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.status=new ActivityDefinitionStatusEnumFactory().fromType(value);
 else   if (name.equals(""String_Node_Str""))   this.experimental=castToBoolean(value);
 else   if (name.equals(""String_Node_Str""))   this.description=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.purpose=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.usage=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.publicationDate=castToDate(value);
 else   if (name.equals(""String_Node_Str""))   this.lastReviewDate=castToDate(value);
 else   if (name.equals(""String_Node_Str""))   this.effectivePeriod=castToPeriod(value);
 else   if (name.equals(""String_Node_Str""))   this.getCoverage().add(castToUsageContext(value));
 else   if (name.equals(""String_Node_Str""))   this.getTopic().add(castToCodeableConcept(value));
 else   if (name.equals(""String_Node_Str""))   this.getContributor().add(castToContributor(value));
 else   if (name.equals(""String_Node_Str""))   this.publisher=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.getContact().add(castToContactDetail(value));
 else   if (name.equals(""String_Node_Str""))   this.copyright=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.getRelatedResource().add(castToRelatedResource(value));
 else   if (name.equals(""String_Node_Str""))   this.getLibrary().add(castToReference(value));
 else   if (name.equals(""String_Node_Str""))   this.category=new ActivityDefinitionCategoryEnumFactory().fromType(value);
 else   if (name.equals(""String_Node_Str""))   this.code=castToCodeableConcept(value);
 else   if (name.equals(""String_Node_Str""))   this.timing=(Type)value;
 else   if (name.equals(""String_Node_Str""))   this.location=castToReference(value);
 else   if (name.equals(""String_Node_Str""))   this.getParticipantType().add(new ActivityParticipantTypeEnumFactory().fromType(value));
 else   if (name.equals(""String_Node_Str""))   this.product=(Type)value;
 else   if (name.equals(""String_Node_Str""))   this.quantity=castToSimpleQuantity(value);
 else   if (name.equals(""String_Node_Str""))   this.transform=castToReference(value);
 else   if (name.equals(""String_Node_Str""))   this.getDynamicValue().add((ActivityDefinitionDynamicValueComponent)value);
 else   super.setProperty(name,value);
}","@Override public void setProperty(String name,Base value) throws FHIRException {
  if (name.equals(""String_Node_Str""))   this.url=castToUri(value);
 else   if (name.equals(""String_Node_Str""))   this.getIdentifier().add(castToIdentifier(value));
 else   if (name.equals(""String_Node_Str""))   this.version=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.name=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.title=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.status=new ActivityDefinitionStatusEnumFactory().fromType(value);
 else   if (name.equals(""String_Node_Str""))   this.experimental=castToBoolean(value);
 else   if (name.equals(""String_Node_Str""))   this.description=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.purpose=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.usage=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.publicationDate=castToDate(value);
 else   if (name.equals(""String_Node_Str""))   this.lastReviewDate=castToDate(value);
 else   if (name.equals(""String_Node_Str""))   this.effectivePeriod=castToPeriod(value);
 else   if (name.equals(""String_Node_Str""))   this.getCoverage().add(castToUsageContext(value));
 else   if (name.equals(""String_Node_Str""))   this.getTopic().add(castToCodeableConcept(value));
 else   if (name.equals(""String_Node_Str""))   this.getContributor().add(castToContributor(value));
 else   if (name.equals(""String_Node_Str""))   this.publisher=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.getContact().add(castToContactDetail(value));
 else   if (name.equals(""String_Node_Str""))   this.copyright=castToString(value);
 else   if (name.equals(""String_Node_Str""))   this.getRelatedResource().add(castToRelatedResource(value));
 else   if (name.equals(""String_Node_Str""))   this.getLibrary().add(castToReference(value));
 else   if (name.equals(""String_Node_Str""))   this.category=new ActivityDefinitionCategoryEnumFactory().fromType(value);
 else   if (name.equals(""String_Node_Str""))   this.code=castToCodeableConcept(value);
 else   if (name.equals(""String_Node_Str""))   this.timing=castToType(value);
 else   if (name.equals(""String_Node_Str""))   this.location=castToReference(value);
 else   if (name.equals(""String_Node_Str""))   this.getParticipantType().add(new ActivityParticipantTypeEnumFactory().fromType(value));
 else   if (name.equals(""String_Node_Str""))   this.product=castToType(value);
 else   if (name.equals(""String_Node_Str""))   this.quantity=castToSimpleQuantity(value);
 else   if (name.equals(""String_Node_Str""))   this.transform=castToReference(value);
 else   if (name.equals(""String_Node_Str""))   this.getDynamicValue().add((ActivityDefinitionDynamicValueComponent)value);
 else   super.setProperty(name,value);
}",0.992979992979993
23463,"@Override public void setProperty(String name,Base value) throws FHIRException {
  if (name.equals(""String_Node_Str""))   this.author=(Type)value;
 else   if (name.equals(""String_Node_Str""))   this.time=castToDateTime(value);
 else   if (name.equals(""String_Node_Str""))   this.text=castToString(value);
 else   super.setProperty(name,value);
}","@Override public void setProperty(String name,Base value) throws FHIRException {
  if (name.equals(""String_Node_Str""))   this.author=castToType(value);
 else   if (name.equals(""String_Node_Str""))   this.time=castToDateTime(value);
 else   if (name.equals(""String_Node_Str""))   this.text=castToString(value);
 else   super.setProperty(name,value);
}",0.9710144927536232
23464,"public static void main(String[] args) throws Exception {
  CKMImporter self=new CKMImporter();
  for (  String s : new File(""String_Node_Str"").list()) {
    if (s.endsWith(""String_Node_Str"") && !s.contains(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + s);
      org.hl7.fhir.dstu2016may.formats.XmlParser xp=new org.hl7.fhir.dstu2016may.formats.XmlParser();
      org.hl7.fhir.dstu2016may.model.Resource r14=xp.parse(new FileInputStream(""String_Node_Str"" + s));
      org.hl7.fhir.dstu3.model.Resource r17=VersionConvertor_14_20.convertResource(r14);
      org.hl7.fhir.dstu3.formats.XmlParser xc=new org.hl7.fhir.dstu3.formats.XmlParser();
      xc.compose(new FileOutputStream(""String_Node_Str"" + s),r17);
    }
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  CKMImporter self=new CKMImporter();
  for (  String s : new File(""String_Node_Str"").list()) {
    if (s.endsWith(""String_Node_Str"") && !s.contains(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + s);
      org.hl7.fhir.dstu2016may.formats.XmlParser xp=new org.hl7.fhir.dstu2016may.formats.XmlParser();
      org.hl7.fhir.dstu2016may.model.Resource r14=xp.parse(new FileInputStream(""String_Node_Str"" + s));
      org.hl7.fhir.dstu3.model.Resource r17=VersionConvertor_14_20.convertResource(r14);
      org.hl7.fhir.dstu3.formats.XmlParser xc=new org.hl7.fhir.dstu3.formats.XmlParser();
      xc.setOutputStyle(OutputStyle.PRETTY);
      xc.compose(new FileOutputStream(""String_Node_Str"" + s),r17);
    }
  }
  System.out.println(""String_Node_Str"");
}",0.9720323182100684
23465,"public org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent convertMedicationStatementDosageComponent(org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent convertMedicationStatementDosageComponent(org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9904440697020798
23466,"public org.hl7.fhir.dstu2.model.DocumentManifest convertDocumentManifest(org.hl7.fhir.dstu3.model.DocumentManifest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest tgt=new org.hl7.fhir.dstu2.model.DocumentManifest();
  copyDomainResource(src,tgt);
  tgt.setMasterIdentifier(convertIdentifier(src.getMasterIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setCreated(src.getCreated());
  tgt.setSource(src.getSource());
  tgt.setStatus(convertDocumentReferenceStatus(src.getStatus()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestContentComponent t : src.getContent())   tgt.addContent(convertDocumentManifestContentComponent(t));
  for (  org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestRelatedComponent t : src.getRelated())   tgt.addRelated(convertDocumentManifestRelatedComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentManifest convertDocumentManifest(org.hl7.fhir.dstu3.model.DocumentManifest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest tgt=new org.hl7.fhir.dstu2.model.DocumentManifest();
  copyDomainResource(src,tgt);
  tgt.setMasterIdentifier(convertIdentifier(src.getMasterIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setCreated(src.getCreated());
  tgt.setSource(src.getSource());
  tgt.setStatus(convertDocumentReferenceStatus(src.getStatus()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestContentComponent t : src.getContent())   tgt.addContent(convertDocumentManifestContentComponent(t));
  for (  org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestRelatedComponent t : src.getRelated())   tgt.addRelated(convertDocumentManifestRelatedComponent(t));
  return tgt;
}",0.9937060348019252
23467,"public org.hl7.fhir.dstu2.model.Specimen convertSpecimen(org.hl7.fhir.dstu3.model.Specimen src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen tgt=new org.hl7.fhir.dstu2.model.Specimen();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAccessionIdentifier(convertIdentifier(src.getAccessionIdentifier()));
  tgt.setStatus(convertSpecimenStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setReceivedTime(src.getReceivedTime());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getParent())   tgt.addParent(convertReference(t));
  tgt.setCollection(convertSpecimenCollectionComponent(src.getCollection()));
  for (  org.hl7.fhir.dstu3.model.Specimen.SpecimenTreatmentComponent t : src.getTreatment())   tgt.addTreatment(convertSpecimenTreatmentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Specimen.SpecimenContainerComponent t : src.getContainer())   tgt.addContainer(convertSpecimenContainerComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Specimen convertSpecimen(org.hl7.fhir.dstu3.model.Specimen src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Specimen tgt=new org.hl7.fhir.dstu2.model.Specimen();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAccessionIdentifier(convertIdentifier(src.getAccessionIdentifier()));
  tgt.setStatus(convertSpecimenStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setReceivedTime(src.getReceivedTime());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getParent())   tgt.addParent(convertReference(t));
  tgt.setCollection(convertSpecimenCollectionComponent(src.getCollection()));
  for (  org.hl7.fhir.dstu3.model.Specimen.SpecimenTreatmentComponent t : src.getTreatment())   tgt.addTreatment(convertSpecimenTreatmentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Specimen.SpecimenContainerComponent t : src.getContainer())   tgt.addContainer(convertSpecimenContainerComponent(t));
  return tgt;
}",0.9927751806204844
23468,"public org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent convertMedicationPackageComponent(org.hl7.fhir.dstu3.model.Medication.MedicationPackageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent();
  copyElement(src,tgt);
  tgt.setContainer(convertCodeableConcept(src.getContainer()));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationPackageContentComponent t : src.getContent())   tgt.addContent(convertMedicationPackageContentComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent convertMedicationPackageComponent(org.hl7.fhir.dstu3.model.Medication.MedicationPackageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationPackageComponent();
  copyElement(src,tgt);
  tgt.setContainer(convertCodeableConcept(src.getContainer()));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationPackageContentComponent t : src.getContent())   tgt.addContent(convertMedicationPackageContentComponent(t));
  return tgt;
}",0.9867909867909868
23469,"public org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent convertMessageDestinationComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageDestinationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setTarget(convertReference(src.getTarget()));
  tgt.setEndpoint(src.getEndpoint());
  return tgt;
}","public org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent convertMessageDestinationComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageDestinationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageDestinationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setTarget(convertReference(src.getTarget()));
  tgt.setEndpoint(src.getEndpoint());
  return tgt;
}",0.9846153846153848
23470,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent convertConformanceMessagingComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent t : src.getEndpoint())   tgt.addEndpoint(convertConformanceMessagingEndpointComponent(t));
  tgt.setReliableCache(src.getReliableCache());
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent t : src.getEvent())   tgt.addEvent(convertConformanceMessagingEventComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent convertConformanceMessagingComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent t : src.getEndpoint())   tgt.addEndpoint(convertConformanceMessagingEndpointComponent(t));
  tgt.setReliableCache(src.getReliableCache());
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent t : src.getEvent())   tgt.addEvent(convertConformanceMessagingEventComponent(t));
  return tgt;
}",0.9902130109383996
23471,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent convertImplementationGuideContactComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent convertImplementationGuideContactComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9866666666666668
23472,"public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent convertOperationDefinitionContactComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent convertOperationDefinitionContactComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9866666666666668
23473,"public org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent convertSystemInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertSystemRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent convertSystemInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.SystemInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertSystemRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9839773798303488
23474,"public org.hl7.fhir.dstu2.model.MedicationStatement convertMedicationStatement(org.hl7.fhir.dstu3.model.MedicationStatement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement tgt=new org.hl7.fhir.dstu2.model.MedicationStatement();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationStatementStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setInformationSource(convertReference(src.getInformationSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  tgt.setDateAsserted(src.getDateAsserted());
  tgt.setWasNotTaken(src.getNotTaken());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotTaken())   tgt.addReasonNotTaken(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent t : src.getDosage())   tgt.addDosage(convertMedicationStatementDosageComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationStatement convertMedicationStatement(org.hl7.fhir.dstu3.model.MedicationStatement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement tgt=new org.hl7.fhir.dstu2.model.MedicationStatement();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationStatementStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setInformationSource(convertReference(src.getInformationSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  tgt.setDateAsserted(src.getDateAsserted());
  tgt.setWasNotTaken(src.getNotTaken());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotTaken())   tgt.addReasonNotTaken(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent t : src.getDosage())   tgt.addDosage(convertMedicationStatementDosageComponent(t));
  return tgt;
}",0.9938249182709772
23475,"public org.hl7.fhir.dstu2.model.CarePlan convertCarePlan(org.hl7.fhir.dstu3.model.CarePlan src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan tgt=new org.hl7.fhir.dstu2.model.CarePlan();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertCarePlanStatus(src.getStatus()));
  tgt.setContext(convertReference(src.getContext()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setModified(src.getModified());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupport())   tgt.addSupport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent t : src.getRelatedPlan())   tgt.addRelatedPlan(convertCarePlanRelatedPlanComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent t : src.getActivity())   tgt.addActivity(convertCarePlanActivityComponent(t));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.CarePlan convertCarePlan(org.hl7.fhir.dstu3.model.CarePlan src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CarePlan tgt=new org.hl7.fhir.dstu2.model.CarePlan();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertCarePlanStatus(src.getStatus()));
  tgt.setContext(convertReference(src.getContext()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setModified(src.getModified());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupport())   tgt.addSupport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent t : src.getRelatedPlan())   tgt.addRelatedPlan(convertCarePlanRelatedPlanComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent t : src.getActivity())   tgt.addActivity(convertCarePlanActivityComponent(t));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}",0.9946524064171124
23476,"public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent convertDocumentReferenceContentComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent();
  copyElement(src,tgt);
  tgt.setAttachment(convertAttachment(src.getAttachment()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getFormat())   tgt.addFormat(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent convertDocumentReferenceContentComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContentComponent();
  copyElement(src,tgt);
  tgt.setAttachment(convertAttachment(src.getAttachment()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getFormat())   tgt.addFormat(convertCoding(t));
  return tgt;
}",0.9866457187745484
23477,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent convertImplementationGuidePackageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent t : src.getResource())   tgt.addResource(convertImplementationGuidePackageResourceComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent convertImplementationGuidePackageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent t : src.getResource())   tgt.addResource(convertImplementationGuidePackageResourceComponent(t));
  return tgt;
}",0.9888961463096017
23478,"public org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent convertEpisodeOfCareStatusHistoryComponent(org.hl7.fhir.dstu3.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent tgt=new org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent();
  copyElement(src,tgt);
  tgt.setStatus(convertEpisodeOfCareStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent convertEpisodeOfCareStatusHistoryComponent(org.hl7.fhir.dstu3.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent tgt=new org.hl7.fhir.dstu2.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent();
  copyElement(src,tgt);
  tgt.setStatus(convertEpisodeOfCareStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9854327335047128
23479,"public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent convertElementDefinitionSlicingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionSlicingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getDiscriminator())   tgt.addDiscriminator(t.getValue());
  tgt.setDescription(src.getDescription());
  tgt.setOrdered(src.getOrdered());
  tgt.setRules(convertSlicingRules(src.getRules()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent convertElementDefinitionSlicingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionSlicingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionSlicingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getDiscriminator())   tgt.addDiscriminator(t.getValue());
  tgt.setDescription(src.getDescription());
  tgt.setOrdered(src.getOrdered());
  tgt.setRules(convertSlicingRules(src.getRules()));
  return tgt;
}",0.9882352941176472
23480,"public org.hl7.fhir.dstu2.model.SimpleQuantity convertSimpleQuantity(org.hl7.fhir.dstu3.model.SimpleQuantity src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SimpleQuantity tgt=new org.hl7.fhir.dstu2.model.SimpleQuantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.SimpleQuantity convertSimpleQuantity(org.hl7.fhir.dstu3.model.SimpleQuantity src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SimpleQuantity tgt=new org.hl7.fhir.dstu2.model.SimpleQuantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.983218163869694
23481,"public org.hl7.fhir.dstu2.model.Medication convertMedication(org.hl7.fhir.dstu3.model.Medication src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication tgt=new org.hl7.fhir.dstu2.model.Medication();
  copyDomainResource(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setIsBrand(src.getIsBrand());
  tgt.setManufacturer(convertReference(src.getManufacturer()));
  tgt.setProduct(convertMedicationProductComponent(src.getProduct()));
  tgt.setPackage(convertMedicationPackageComponent(src.getPackage()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication convertMedication(org.hl7.fhir.dstu3.model.Medication src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication tgt=new org.hl7.fhir.dstu2.model.Medication();
  copyDomainResource(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setIsBrand(src.getIsBrand());
  tgt.setManufacturer(convertReference(src.getManufacturer()));
  tgt.setProduct(convertMedicationProductComponent(src.getProduct()));
  tgt.setPackage(convertMedicationPackageComponent(src.getPackage()));
  return tgt;
}",0.9857022708158116
23482,"public org.hl7.fhir.dstu2.model.Goal convertGoal(org.hl7.fhir.dstu3.model.Goal src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Goal tgt=new org.hl7.fhir.dstu2.model.Goal();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStart(convertType(src.getStart()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription().getText());
  tgt.setStatus(convertGoalStatus(src.getStatus()));
  tgt.setStatusDate(src.getStatusDate());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getStatusReason())   tgt.setStatusReason(convertCodeableConcept(t));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent t : src.getOutcome())   tgt.addOutcome(convertGoalOutcomeComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Goal convertGoal(org.hl7.fhir.dstu3.model.Goal src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Goal tgt=new org.hl7.fhir.dstu2.model.Goal();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStart(convertType(src.getStart()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription().getText());
  tgt.setStatus(convertGoalStatus(src.getStatus()));
  tgt.setStatusDate(src.getStatusDate());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getStatusReason())   tgt.setStatusReason(convertCodeableConcept(t));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent t : src.getOutcome())   tgt.addOutcome(convertGoalOutcomeComponent(t));
  return tgt;
}",0.9935921598190728
23483,"public org.hl7.fhir.dstu2.model.FamilyMemberHistory convertFamilyMemberHistory(org.hl7.fhir.dstu3.model.FamilyMemberHistory src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.FamilyMemberHistory tgt=new org.hl7.fhir.dstu2.model.FamilyMemberHistory();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setDate(src.getDate());
  tgt.setStatus(convertFamilyHistoryStatus(src.getStatus()));
  tgt.setName(src.getName());
  tgt.setRelationship(convertCodeableConcept(src.getRelationship()));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBorn(convertType(src.getBorn()));
  tgt.setAge(convertType(src.getAge()));
  tgt.setDeceased(convertType(src.getDeceased()));
  tgt.setNote(convertAnnotation(src.getNote()));
  for (  org.hl7.fhir.dstu3.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent t : src.getCondition())   tgt.addCondition(convertFamilyMemberHistoryConditionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.FamilyMemberHistory convertFamilyMemberHistory(org.hl7.fhir.dstu3.model.FamilyMemberHistory src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.FamilyMemberHistory tgt=new org.hl7.fhir.dstu2.model.FamilyMemberHistory();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setDate(src.getDate());
  tgt.setStatus(convertFamilyHistoryStatus(src.getStatus()));
  tgt.setName(src.getName());
  tgt.setRelationship(convertCodeableConcept(src.getRelationship()));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBorn(convertType(src.getBorn()));
  tgt.setAge(convertType(src.getAge()));
  tgt.setDeceased(convertType(src.getDeceased()));
  tgt.setNote(convertAnnotation(src.getNote()));
  for (  org.hl7.fhir.dstu3.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent t : src.getCondition())   tgt.addCondition(convertFamilyMemberHistoryConditionComponent(t));
  return tgt;
}",0.992507712648744
23484,"public org.hl7.fhir.dstu2.model.Annotation convertAnnotation(org.hl7.fhir.dstu3.model.Annotation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Annotation tgt=new org.hl7.fhir.dstu2.model.Annotation();
  copyElement(src,tgt);
  tgt.setAuthor(convertType(src.getAuthor()));
  tgt.setTime(src.getTime());
  tgt.setText(src.getText());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Annotation convertAnnotation(org.hl7.fhir.dstu3.model.Annotation src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Annotation tgt=new org.hl7.fhir.dstu2.model.Annotation();
  copyElement(src,tgt);
  tgt.setAuthor(convertType(src.getAuthor()));
  tgt.setTime(src.getTime());
  tgt.setText(src.getText());
  return tgt;
}",0.9786700125470514
23485,"public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}",0.987012987012987
23486,"public org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent convertCompositionAttesterComponent(org.hl7.fhir.dstu3.model.Composition.CompositionAttesterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent tgt=new org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Composition.CompositionAttestationMode> t : src.getMode())   tgt.addMode(convertCompositionAttestationMode(t.getValue()));
  tgt.setTime(src.getTime());
  tgt.setParty(convertReference(src.getParty()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent convertCompositionAttesterComponent(org.hl7.fhir.dstu3.model.Composition.CompositionAttesterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent tgt=new org.hl7.fhir.dstu2.model.Composition.CompositionAttesterComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Composition.CompositionAttestationMode> t : src.getMode())   tgt.addMode(convertCompositionAttestationMode(t.getValue()));
  tgt.setTime(src.getTime());
  tgt.setParty(convertReference(src.getParty()));
  return tgt;
}",0.9879175550817342
23487,"public org.hl7.fhir.dstu2.model.SupplyRequest convertSupplyRequest(org.hl7.fhir.dstu3.model.SupplyRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest tgt=new org.hl7.fhir.dstu2.model.SupplyRequest();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setDate(src.getDate());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyRequestStatus(src.getStatus()));
  tgt.setKind(convertCodeableConcept(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupplier())   tgt.addSupplier(convertReference(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setWhen(convertSupplyRequestWhenComponent(src.getWhen()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.SupplyRequest convertSupplyRequest(org.hl7.fhir.dstu3.model.SupplyRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest tgt=new org.hl7.fhir.dstu2.model.SupplyRequest();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setDate(src.getDate());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyRequestStatus(src.getStatus()));
  tgt.setKind(convertCodeableConcept(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupplier())   tgt.addSupplier(convertReference(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setWhen(convertSupplyRequestWhenComponent(src.getWhen()));
  return tgt;
}",0.989946777054997
23488,"public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent convertImmunizationRecommendationRecommendationDateCriterionComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent convertImmunizationRecommendationRecommendationDateCriterionComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.98859825620389
23489,"public org.hl7.fhir.dstu2.model.Person convertPerson(org.hl7.fhir.dstu3.model.Person src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Person tgt=new org.hl7.fhir.dstu2.model.Person();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.addName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setPhoto(convertAttachment(src.getPhoto()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.Person.PersonLinkComponent t : src.getLink())   tgt.addLink(convertPersonLinkComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Person convertPerson(org.hl7.fhir.dstu3.model.Person src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Person tgt=new org.hl7.fhir.dstu2.model.Person();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.addName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setPhoto(convertAttachment(src.getPhoto()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.Person.PersonLinkComponent t : src.getLink())   tgt.addLink(convertPersonLinkComponent(t));
  return tgt;
}",0.992248062015504
23490,"public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent convertImmunizationRecommendationRecommendationProtocolComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent();
  copyElement(src,tgt);
  tgt.setDoseSequence(src.getDoseSequence());
  tgt.setDescription(src.getDescription());
  tgt.setAuthority(convertReference(src.getAuthority()));
  tgt.setSeries(src.getSeries());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent convertImmunizationRecommendationRecommendationProtocolComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent();
  copyElement(src,tgt);
  tgt.setDoseSequence(src.getDoseSequence());
  tgt.setDescription(src.getDescription());
  tgt.setAuthority(convertReference(src.getAuthority()));
  tgt.setSeries(src.getSeries());
  return tgt;
}",0.9895897121861604
23491,"public org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent convertQuestionnaireGroupComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent tgt=new org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setText(src.getText());
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   if (t.getType() == org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemType.GROUP)   tgt.addGroup(convertQuestionnaireGroupComponent(t));
 else   tgt.addQuestion(convertQuestionnaireQuestionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent convertQuestionnaireGroupComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent tgt=new org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setText(src.getText());
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   if (t.getType() == org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemType.GROUP)   tgt.addGroup(convertQuestionnaireGroupComponent(t));
 else   tgt.addQuestion(convertQuestionnaireQuestionComponent(t));
  return tgt;
}",0.990904226859283
23492,"public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent convertDocumentReferenceContextRelatedComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextRelatedComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setRef(convertReference(src.getRef()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent convertDocumentReferenceContextRelatedComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextRelatedComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextRelatedComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setRef(convertReference(src.getRef()));
  return tgt;
}",0.9863013698630136
23493,"public org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent convertDetectedIssueMitigationComponent(org.hl7.fhir.dstu3.model.DetectedIssue.DetectedIssueMitigationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent tgt=new org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent();
  copyElement(src,tgt);
  tgt.setAction(convertCodeableConcept(src.getAction()));
  tgt.setDate(src.getDate());
  tgt.setAuthor(convertReference(src.getAuthor()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent convertDetectedIssueMitigationComponent(org.hl7.fhir.dstu3.model.DetectedIssue.DetectedIssueMitigationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent tgt=new org.hl7.fhir.dstu2.model.DetectedIssue.DetectedIssueMitigationComponent();
  copyElement(src,tgt);
  tgt.setAction(convertCodeableConcept(src.getAction()));
  tgt.setDate(src.getDate());
  tgt.setAuthor(convertReference(src.getAuthor()));
  return tgt;
}",0.985774058577406
23494,"public org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent convertDiagnosticReportImageComponent(org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent();
  copyElement(src,tgt);
  tgt.setComment(src.getComment());
  tgt.setLink(convertReference(src.getLink()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent convertDiagnosticReportImageComponent(org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport.DiagnosticReportImageComponent();
  copyElement(src,tgt);
  tgt.setComment(src.getComment());
  tgt.setLink(convertReference(src.getLink()));
  return tgt;
}",0.984360625574977
23495,"public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  if (src.hasSearchType()) {
    tgt.setType(src.getSearchType().toCode());
    tgt.setType(""String_Node_Str"");
  }
 else   tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  if (src.hasSearchType()) {
    tgt.setType(src.getSearchType().toCode());
    tgt.setType(""String_Node_Str"");
  }
 else   tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.9927257167308516
23496,"public org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent convertBundleEntrySearchComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntrySearchComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent();
  copyElement(src,tgt);
  tgt.setMode(convertSearchEntryMode(src.getMode()));
  tgt.setScore(src.getScore());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent convertBundleEntrySearchComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntrySearchComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntrySearchComponent();
  copyElement(src,tgt);
  tgt.setMode(convertSearchEntryMode(src.getMode()));
  tgt.setScore(src.getScore());
  return tgt;
}",0.9824922760041196
23497,"public org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent convertFriendlyLanguageComponent(org.hl7.fhir.dstu3.model.Contract.FriendlyLanguageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent convertFriendlyLanguageComponent(org.hl7.fhir.dstu3.model.Contract.FriendlyLanguageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.FriendlyLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}",0.9811738648947952
23498,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent convertImplementationGuideGlobalComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent convertImplementationGuideGlobalComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideGlobalComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}",0.9852302345786272
23499,"public org.hl7.fhir.dstu2.model.ReferralRequest convertReferralRequest(org.hl7.fhir.dstu3.model.ReferralRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ReferralRequest tgt=new org.hl7.fhir.dstu2.model.ReferralRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertReferralStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setFulfillmentTime(convertPeriod(src.getFulfillmentTime()));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setSpecialty(convertCodeableConcept(src.getSpecialty()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceRequested())   tgt.addServiceRequested(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ReferralRequest convertReferralRequest(org.hl7.fhir.dstu3.model.ReferralRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ReferralRequest tgt=new org.hl7.fhir.dstu2.model.ReferralRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertReferralStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setFulfillmentTime(convertPeriod(src.getFulfillmentTime()));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setSpecialty(convertCodeableConcept(src.getSpecialty()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceRequested())   tgt.addServiceRequested(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  return tgt;
}",0.9936162223056704
23500,"public org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent convertDataElementContactComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent tgt=new org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent convertDataElementContactComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent tgt=new org.hl7.fhir.dstu2.model.DataElement.DataElementContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9849690539345712
23501,"public org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent convertItemsComponent(org.hl7.fhir.dstu3.model.ProcessRequest.ItemsComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent tgt=new org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent();
  copyElement(src,tgt);
  tgt.setSequenceLinkId(src.getSequenceLinkId());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent convertItemsComponent(org.hl7.fhir.dstu3.model.ProcessRequest.ItemsComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent tgt=new org.hl7.fhir.dstu2.model.ProcessRequest.ItemsComponent();
  copyElement(src,tgt);
  tgt.setSequenceLinkId(src.getSequenceLinkId());
  return tgt;
}",0.9798339264531436
23502,"public org.hl7.fhir.dstu2.model.Binary convertBinary(org.hl7.fhir.dstu3.model.Binary src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Binary tgt=new org.hl7.fhir.dstu2.model.Binary();
  copyResource(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setContent(src.getContent());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Binary convertBinary(org.hl7.fhir.dstu3.model.Binary src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Binary tgt=new org.hl7.fhir.dstu2.model.Binary();
  copyResource(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setContent(src.getContent());
  return tgt;
}",0.975886524822695
23503,"public org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent convertComputableLanguageComponent(org.hl7.fhir.dstu3.model.Contract.ComputableLanguageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent convertComputableLanguageComponent(org.hl7.fhir.dstu3.model.Contract.ComputableLanguageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ComputableLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}",0.9815817984832068
23504,"public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent convertAuditEventEntityComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setType(convertCoding(src.getType()));
  tgt.setRole(convertCoding(src.getRole()));
  tgt.setLifecycle(convertCoding(src.getLifecycle()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurityLabel())   tgt.addSecurityLabel(convertCoding(t));
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setQuery(src.getQuery());
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityDetailComponent t : src.getDetail())   tgt.addDetail(convertAuditEventEntityDetailComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent convertAuditEventEntityComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setType(convertCoding(src.getType()));
  tgt.setRole(convertCoding(src.getRole()));
  tgt.setLifecycle(convertCoding(src.getLifecycle()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurityLabel())   tgt.addSecurityLabel(convertCoding(t));
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setQuery(src.getQuery());
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityDetailComponent t : src.getDetail())   tgt.addDetail(convertAuditEventEntityDetailComponent(t));
  return tgt;
}",0.991900905192949
23505,"public org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent convertQuestionnaireItemToGroup(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   if (t.hasAnswer())   tgt.addQuestion(convertQuestionnaireItemToQuestion(t));
 else   tgt.addGroup(convertQuestionnaireItemToGroup(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent convertQuestionnaireItemToGroup(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   if (t.hasAnswer())   tgt.addQuestion(convertQuestionnaireItemToQuestion(t));
 else   tgt.addGroup(convertQuestionnaireItemToGroup(t));
  return tgt;
}",0.9893014474512272
23506,"public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent convertAuditEventSourceComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventSourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent();
  copyElement(src,tgt);
  tgt.setSite(src.getSite());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent convertAuditEventSourceComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventSourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventSourceComponent();
  copyElement(src,tgt);
  tgt.setSite(src.getSite());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  return tgt;
}",0.9857022708158116
23507,"public org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent convertVisionPrescriptionDispenseComponent(org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent tgt=new org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent();
  copyElement(src,tgt);
  tgt.setProduct(convertCoding(src.getProduct()));
  tgt.setEye(convertVisionEyes(src.getEye()));
  tgt.setSphere(src.getSphere());
  tgt.setCylinder(src.getCylinder());
  tgt.setAxis(src.getAxis());
  tgt.setPrism(src.getPrism());
  tgt.setBase(convertVisionBase(src.getBase()));
  tgt.setAdd(src.getAdd());
  tgt.setPower(src.getPower());
  tgt.setBackCurve(src.getBackCurve());
  tgt.setDiameter(src.getDiameter());
  tgt.setDuration(convertSimpleQuantity(src.getDuration()));
  tgt.setColor(src.getColor());
  tgt.setBrand(src.getBrand());
  tgt.setNotes(src.getNotes());
  return tgt;
}","public org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent convertVisionPrescriptionDispenseComponent(org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent tgt=new org.hl7.fhir.dstu2.model.VisionPrescription.VisionPrescriptionDispenseComponent();
  copyElement(src,tgt);
  tgt.setProduct(convertCoding(src.getProduct()));
  tgt.setEye(convertVisionEyes(src.getEye()));
  tgt.setSphere(src.getSphere());
  tgt.setCylinder(src.getCylinder());
  tgt.setAxis(src.getAxis());
  tgt.setPrism(src.getPrism());
  tgt.setBase(convertVisionBase(src.getBase()));
  tgt.setAdd(src.getAdd());
  tgt.setPower(src.getPower());
  tgt.setBackCurve(src.getBackCurve());
  tgt.setDiameter(src.getDiameter());
  tgt.setDuration(convertSimpleQuantity(src.getDuration()));
  tgt.setColor(src.getColor());
  tgt.setBrand(src.getBrand());
  tgt.setNotes(src.getNotes());
  return tgt;
}",0.9920449227889564
23508,"public org.hl7.fhir.dstu2.model.Organization convertOrganization(org.hl7.fhir.dstu3.model.Organization src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Organization tgt=new org.hl7.fhir.dstu2.model.Organization();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setPartOf(convertReference(src.getPartOf()));
  for (  org.hl7.fhir.dstu3.model.Organization.OrganizationContactComponent t : src.getContact())   tgt.addContact(convertOrganizationContactComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Organization convertOrganization(org.hl7.fhir.dstu3.model.Organization src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Organization tgt=new org.hl7.fhir.dstu2.model.Organization();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setPartOf(convertReference(src.getPartOf()));
  for (  org.hl7.fhir.dstu3.model.Organization.OrganizationContactComponent t : src.getContact())   tgt.addContact(convertOrganizationContactComponent(t));
  return tgt;
}",0.9911412193850964
23509,"public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent convertMedicationOrderSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderSubstitutionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setReason(convertCodeableConcept(src.getReason()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent convertMedicationOrderSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderSubstitutionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setReason(convertCodeableConcept(src.getReason()));
  return tgt;
}",0.984360625574977
23510,"public org.hl7.fhir.dstu2.model.BodySite convertBodySite(org.hl7.fhir.dstu3.model.BodySite src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.BodySite tgt=new org.hl7.fhir.dstu2.model.BodySite();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getModifier())   tgt.addModifier(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getImage())   tgt.addImage(convertAttachment(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.BodySite convertBodySite(org.hl7.fhir.dstu3.model.BodySite src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.BodySite tgt=new org.hl7.fhir.dstu2.model.BodySite();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getModifier())   tgt.addModifier(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getImage())   tgt.addImage(convertAttachment(t));
  return tgt;
}",0.9890393294648614
23511,"public org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent convertImagingStudySeriesInstanceComponent(org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesInstanceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent tgt=new org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent();
  copyElement(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setNumber(src.getNumber());
  tgt.setSopClass(src.getSopClass());
  tgt.setTitle(src.getTitle());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent convertImagingStudySeriesInstanceComponent(org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesInstanceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent tgt=new org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesInstanceComponent();
  copyElement(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setNumber(src.getNumber());
  tgt.setSopClass(src.getSopClass());
  tgt.setTitle(src.getTitle());
  return tgt;
}",0.9858451290591174
23512,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent convertValueSetExpansionContainsComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setAbstract(src.getAbstract());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent convertValueSetExpansionContainsComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionContainsComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setAbstract(src.getAbstract());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}",0.9892063492063492
23513,"public org.hl7.fhir.dstu2.model.AuditEvent convertAuditEvent(org.hl7.fhir.dstu3.model.AuditEvent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent tgt=new org.hl7.fhir.dstu2.model.AuditEvent();
  copyDomainResource(src,tgt);
  tgt.getEvent().setType(convertCoding(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSubtype())   tgt.getEvent().addSubtype(convertCoding(t));
  tgt.getEvent().setAction(convertAuditEventAction(src.getAction()));
  tgt.getEvent().setDateTime(src.getRecorded());
  tgt.getEvent().setOutcome(convertAuditEventOutcome(src.getOutcome()));
  tgt.getEvent().setOutcomeDesc(src.getOutcomeDesc());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getPurposeOfEvent())   tgt.getEvent().addPurposeOfEvent(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentComponent t : src.getAgent())   tgt.addParticipant(convertAuditEventAgentComponent(t));
  tgt.setSource(convertAuditEventSourceComponent(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityComponent t : src.getEntity())   tgt.addObject(convertAuditEventEntityComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent convertAuditEvent(org.hl7.fhir.dstu3.model.AuditEvent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent tgt=new org.hl7.fhir.dstu2.model.AuditEvent();
  copyDomainResource(src,tgt);
  tgt.getEvent().setType(convertCoding(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSubtype())   tgt.getEvent().addSubtype(convertCoding(t));
  tgt.getEvent().setAction(convertAuditEventAction(src.getAction()));
  tgt.getEvent().setDateTime(src.getRecorded());
  tgt.getEvent().setOutcome(convertAuditEventOutcome(src.getOutcome()));
  tgt.getEvent().setOutcomeDesc(src.getOutcomeDesc());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getPurposeOfEvent())   tgt.getEvent().addPurposeOfEvent(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentComponent t : src.getAgent())   tgt.addParticipant(convertAuditEventAgentComponent(t));
  tgt.setSource(convertAuditEventSourceComponent(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityComponent t : src.getEntity())   tgt.addObject(convertAuditEventEntityComponent(t));
  return tgt;
}",0.992901878914405
23514,"public org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent convertDataElementMappingComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent tgt=new org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComment());
  return tgt;
}","public org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent convertDataElementMappingComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent tgt=new org.hl7.fhir.dstu2.model.DataElement.DataElementMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComment());
  return tgt;
}",0.9847533632286996
23515,"public org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent convertFamilyMemberHistoryConditionComponent(org.hl7.fhir.dstu3.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent tgt=new org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent convertFamilyMemberHistoryConditionComponent(org.hl7.fhir.dstu3.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent tgt=new org.hl7.fhir.dstu2.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}",0.9881035689293212
23516,"public org.hl7.fhir.dstu2.model.Coverage convertCoverage(org.hl7.fhir.dstu3.model.Coverage src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Coverage tgt=new org.hl7.fhir.dstu2.model.Coverage();
  copyDomainResource(src,tgt);
  if (src.hasIssuerReference())   tgt.setIssuer((org.hl7.fhir.dstu2.model.Reference)convertType(src.getIssuer()));
  tgt.setBin(new org.hl7.fhir.dstu2.model.Identifier().setValue(src.getBin()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setType(convertCoding(src.getType()));
  if (src.hasPlanholderIdentifier())   tgt.setSubscriberId((org.hl7.fhir.dstu2.model.Identifier)convertType(src.getPlanholder()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setGroup(src.getGroup());
  tgt.setPlan(src.getPlan());
  tgt.setSubPlan(src.getSubPlan());
  tgt.setDependent(src.getDependent());
  tgt.setSequence(src.getSequence());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getContract())   tgt.addContract(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Coverage convertCoverage(org.hl7.fhir.dstu3.model.Coverage src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Coverage tgt=new org.hl7.fhir.dstu2.model.Coverage();
  copyDomainResource(src,tgt);
  if (src.hasIssuerReference())   tgt.setIssuer((org.hl7.fhir.dstu2.model.Reference)convertType(src.getIssuer()));
  tgt.setBin(new org.hl7.fhir.dstu2.model.Identifier().setValue(src.getBin()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setType(convertCoding(src.getType()));
  if (src.hasPlanholderIdentifier())   tgt.setSubscriberId((org.hl7.fhir.dstu2.model.Identifier)convertType(src.getPlanholder()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setGroup(src.getGroup());
  tgt.setPlan(src.getPlan());
  tgt.setSubPlan(src.getSubPlan());
  tgt.setDependent(src.getDependent());
  tgt.setSequence(src.getSequence());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getContract())   tgt.addContract(convertReference(t));
  return tgt;
}",0.9923042100497964
23517,"public org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent convertSubstanceInstanceComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceInstanceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExpiry(src.getExpiry());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent convertSubstanceInstanceComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceInstanceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceInstanceComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExpiry(src.getExpiry());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  return tgt;
}",0.985022026431718
23518,"public org.hl7.fhir.dstu2.model.Narrative convertNarrative(org.hl7.fhir.dstu3.model.Narrative src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Narrative tgt=new org.hl7.fhir.dstu2.model.Narrative();
  copyElement(src,tgt);
  tgt.setStatus(convertNarrativeStatus(src.getStatus()));
  tgt.setDiv(src.getDiv());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Narrative convertNarrative(org.hl7.fhir.dstu3.model.Narrative src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Narrative tgt=new org.hl7.fhir.dstu2.model.Narrative();
  copyElement(src,tgt);
  tgt.setStatus(convertNarrativeStatus(src.getStatus()));
  tgt.setDiv(src.getDiv());
  return tgt;
}",0.9771812080536912
23519,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent convertTestActionComponent(org.hl7.fhir.dstu3.model.TestScript.TestActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent convertTestActionComponent(org.hl7.fhir.dstu3.model.TestScript.TestActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTestActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}",0.9847533632286996
23520,"public org.hl7.fhir.dstu2.model.Location convertLocation(org.hl7.fhir.dstu3.model.Location src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Location tgt=new org.hl7.fhir.dstu2.model.Location();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertLocationStatus(src.getStatus()));
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setMode(convertLocationMode(src.getMode()));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  tgt.setPhysicalType(convertCodeableConcept(src.getPhysicalType()));
  tgt.setPosition(convertLocationPositionComponent(src.getPosition()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setPartOf(convertReference(src.getPartOf()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Location convertLocation(org.hl7.fhir.dstu3.model.Location src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Location tgt=new org.hl7.fhir.dstu2.model.Location();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertLocationStatus(src.getStatus()));
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setMode(convertLocationMode(src.getMode()));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  tgt.setPhysicalType(convertCodeableConcept(src.getPhysicalType()));
  tgt.setPosition(convertLocationPositionComponent(src.getPosition()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setPartOf(convertReference(src.getPartOf()));
  return tgt;
}",0.9920893438808748
23521,"public org.hl7.fhir.dstu2.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition tgt=new org.hl7.fhir.dstu2.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  tgt.setName(src.getId());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setNameReference(src.getContentReference().substring(1));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition tgt=new org.hl7.fhir.dstu2.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  tgt.setName(src.getId());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  if (src.hasContentReference())   tgt.setNameReference(src.getContentReference().substring(1));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}",0.99655102454859
23522,"public org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent convertCompositionEventComponent(org.hl7.fhir.dstu3.model.Composition.CompositionEventComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent tgt=new org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCode())   tgt.addCode(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDetail())   tgt.addDetail(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent convertCompositionEventComponent(org.hl7.fhir.dstu3.model.Composition.CompositionEventComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent tgt=new org.hl7.fhir.dstu2.model.Composition.CompositionEventComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCode())   tgt.addCode(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDetail())   tgt.addDetail(convertReference(t));
  return tgt;
}",0.9874538745387452
23523,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent convertConceptSetFilterComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent();
  copyElement(src,tgt);
  tgt.setProperty(src.getProperty());
  tgt.setOp(convertFilterOperator(src.getOp()));
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent convertConceptSetFilterComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetFilterComponent();
  copyElement(src,tgt);
  tgt.setProperty(src.getProperty());
  tgt.setOp(convertFilterOperator(src.getOp()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.9837008628954936
23524,"public org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent convertObservationComponentComponent(org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent convertObservationComponentComponent(org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationComponentComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  return tgt;
}",0.9892744479495268
23525,"public org.hl7.fhir.dstu2.model.Contract.TermActorComponent convertTermAgentComponent(org.hl7.fhir.dstu3.model.Contract.TermAgentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.TermActorComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermActorComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getActor()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.TermActorComponent convertTermAgentComponent(org.hl7.fhir.dstu3.model.Contract.TermAgentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.TermActorComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermActorComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getActor()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  return tgt;
}",0.983947119924457
23526,"public org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent convertQuestionnaireItemToQuestion(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent convertQuestionnaireItemToQuestion(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  return tgt;
}",0.9877256317689532
23527,"public org.hl7.fhir.dstu2.model.Contract convertContract(org.hl7.fhir.dstu3.model.Contract src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract tgt=new org.hl7.fhir.dstu2.model.Contract();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setIssued(src.getIssued());
  tgt.setApplies(convertPeriod(src.getApplies()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSubject())   tgt.addSubject(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthority())   tgt.addAuthority(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDomain())   tgt.addDomain(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSubType())   tgt.addSubType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getAction())   tgt.addAction(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getActionReason())   tgt.addActionReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Contract.AgentComponent t : src.getAgent())   tgt.addActor(convertAgentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.SignatoryComponent t : src.getSigner())   tgt.addSigner(convertSignatoryComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.ValuedItemComponent t : src.getValuedItem())   tgt.addValuedItem(convertValuedItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermComponent t : src.getTerm())   tgt.addTerm(convertTermComponent(t));
  tgt.setBinding(convertType(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.Contract.FriendlyLanguageComponent t : src.getFriendly())   tgt.addFriendly(convertFriendlyLanguageComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.LegalLanguageComponent t : src.getLegal())   tgt.addLegal(convertLegalLanguageComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.ComputableLanguageComponent t : src.getRule())   tgt.addRule(convertComputableLanguageComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract convertContract(org.hl7.fhir.dstu3.model.Contract src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract tgt=new org.hl7.fhir.dstu2.model.Contract();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setIssued(src.getIssued());
  tgt.setApplies(convertPeriod(src.getApplies()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSubject())   tgt.addSubject(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthority())   tgt.addAuthority(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDomain())   tgt.addDomain(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSubType())   tgt.addSubType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getAction())   tgt.addAction(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getActionReason())   tgt.addActionReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Contract.AgentComponent t : src.getAgent())   tgt.addActor(convertAgentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.SignatoryComponent t : src.getSigner())   tgt.addSigner(convertSignatoryComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.ValuedItemComponent t : src.getValuedItem())   tgt.addValuedItem(convertValuedItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermComponent t : src.getTerm())   tgt.addTerm(convertTermComponent(t));
  tgt.setBinding(convertType(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.Contract.FriendlyLanguageComponent t : src.getFriendly())   tgt.addFriendly(convertFriendlyLanguageComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.LegalLanguageComponent t : src.getLegal())   tgt.addLegal(convertLegalLanguageComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.ComputableLanguageComponent t : src.getRule())   tgt.addRule(convertComputableLanguageComponent(t));
  return tgt;
}",0.9960419091967404
23528,"public org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent convertDocumentManifestRelatedComponent(org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestRelatedComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent tgt=new org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setRef(convertReference(src.getRef()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent convertDocumentManifestRelatedComponent(org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestRelatedComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent tgt=new org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestRelatedComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setRef(convertReference(src.getRef()));
  return tgt;
}",0.9852558542931484
23529,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent convertNutritionOrderEnteralFormulaAdministrationComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaAdministrationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent();
  copyElement(src,tgt);
  tgt.setSchedule(convertTiming(src.getSchedule()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent convertNutritionOrderEnteralFormulaAdministrationComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaAdministrationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaAdministrationComponent();
  copyElement(src,tgt);
  tgt.setSchedule(convertTiming(src.getSchedule()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}",0.9881533101045296
23530,"public org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent convertMessageSourceComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageSourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setSoftware(src.getSoftware());
  tgt.setVersion(src.getVersion());
  tgt.setContact(convertContactPoint(src.getContact()));
  tgt.setEndpoint(src.getEndpoint());
  return tgt;
}","public org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent convertMessageSourceComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageSourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageSourceComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setSoftware(src.getSoftware());
  tgt.setVersion(src.getVersion());
  tgt.setContact(convertContactPoint(src.getContact()));
  tgt.setEndpoint(src.getEndpoint());
  return tgt;
}",0.98598516075845
23531,"public org.hl7.fhir.dstu2.model.Flag convertFlag(org.hl7.fhir.dstu3.model.Flag src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Flag tgt=new org.hl7.fhir.dstu2.model.Flag();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setStatus(convertFlagStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Flag convertFlag(org.hl7.fhir.dstu3.model.Flag src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Flag tgt=new org.hl7.fhir.dstu2.model.Flag();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setStatus(convertFlagStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}",0.9888670595939753
23532,"public org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent convertBundleEntryResponseComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryResponseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent();
  copyElement(src,tgt);
  tgt.setStatus(src.getStatus());
  tgt.setLocation(src.getLocation());
  tgt.setEtag(src.getEtag());
  tgt.setLastModified(src.getLastModified());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent convertBundleEntryResponseComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryResponseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryResponseComponent();
  copyElement(src,tgt);
  tgt.setStatus(src.getStatus());
  tgt.setLocation(src.getLocation());
  tgt.setEtag(src.getEtag());
  tgt.setLastModified(src.getLastModified());
  return tgt;
}",0.9847533632286996
23533,"public org.hl7.fhir.dstu2.model.QuestionnaireResponse convertQuestionnaireResponse(org.hl7.fhir.dstu3.model.QuestionnaireResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setQuestionnaire(convertReference(src.getQuestionnaire()));
  tgt.setStatus(convertQuestionnaireResponseStatus(src.getStatus()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setAuthored(src.getAuthored());
  tgt.setSource(convertReference(src.getSource()));
  tgt.setEncounter(convertReference(src.getContext()));
  if (src.getItem().size() != 1)   throw new FHIRException(""String_Node_Str"");
  tgt.setGroup(convertQuestionnaireItemToGroup(src.getItem().get(0)));
  return tgt;
}","public org.hl7.fhir.dstu2.model.QuestionnaireResponse convertQuestionnaireResponse(org.hl7.fhir.dstu3.model.QuestionnaireResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setQuestionnaire(convertReference(src.getQuestionnaire()));
  tgt.setStatus(convertQuestionnaireResponseStatus(src.getStatus()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setAuthored(src.getAuthored());
  tgt.setSource(convertReference(src.getSource()));
  tgt.setEncounter(convertReference(src.getContext()));
  if (src.getItem().size() != 1)   throw new FHIRException(""String_Node_Str"");
  tgt.setGroup(convertQuestionnaireItemToGroup(src.getItem().get(0)));
  return tgt;
}",0.9910761154855644
23534,"public org.hl7.fhir.dstu2.model.Type convertType(org.hl7.fhir.dstu3.model.Type src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.dstu3.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BooleanType)   return convertBoolean((org.hl7.fhir.dstu3.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeType)   return convertCode((org.hl7.fhir.dstu3.model.CodeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateType)   return convertDate((org.hl7.fhir.dstu3.model.DateType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateTimeType)   return convertDateTime((org.hl7.fhir.dstu3.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DecimalType)   return convertDecimal((org.hl7.fhir.dstu3.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IdType)   return convertId((org.hl7.fhir.dstu3.model.IdType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.InstantType)   return convertInstant((org.hl7.fhir.dstu3.model.InstantType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IntegerType)   return convertInteger((org.hl7.fhir.dstu3.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.dstu3.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OidType)   return convertOid((org.hl7.fhir.dstu3.model.OidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.dstu3.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StringType)   return convertString((org.hl7.fhir.dstu3.model.StringType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TimeType)   return convertTime((org.hl7.fhir.dstu3.model.TimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.dstu3.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UriType)   return convertUri((org.hl7.fhir.dstu3.model.UriType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UuidType)   return convertUuid((org.hl7.fhir.dstu3.model.UuidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Extension)   return convertExtension((org.hl7.fhir.dstu3.model.Extension)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Narrative)   return convertNarrative((org.hl7.fhir.dstu3.model.Narrative)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Annotation)   return convertAnnotation((org.hl7.fhir.dstu3.model.Annotation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Attachment)   return convertAttachment((org.hl7.fhir.dstu3.model.Attachment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.dstu3.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coding)   return convertCoding((org.hl7.fhir.dstu3.model.Coding)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Identifier)   return convertIdentifier((org.hl7.fhir.dstu3.model.Identifier)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Period)   return convertPeriod((org.hl7.fhir.dstu3.model.Period)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Quantity)   return convertQuantity((org.hl7.fhir.dstu3.model.Quantity)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Range)   return convertRange((org.hl7.fhir.dstu3.model.Range)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Ratio)   return convertRatio((org.hl7.fhir.dstu3.model.Ratio)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Reference)   return convertReference((org.hl7.fhir.dstu3.model.Reference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SampledData)   return convertSampledData((org.hl7.fhir.dstu3.model.SampledData)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Signature)   return convertSignature((org.hl7.fhir.dstu3.model.Signature)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Address)   return convertAddress((org.hl7.fhir.dstu3.model.Address)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.dstu3.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ElementDefinition)   return convertElementDefinition((org.hl7.fhir.dstu3.model.ElementDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HumanName)   return convertHumanName((org.hl7.fhir.dstu3.model.HumanName)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Meta)   return convertMeta((org.hl7.fhir.dstu3.model.Meta)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Timing)   return convertTiming((org.hl7.fhir.dstu3.model.Timing)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Age)   return convertAge((org.hl7.fhir.dstu3.model.Age)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Count)   return convertCount((org.hl7.fhir.dstu3.model.Count)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Distance)   return convertDistance((org.hl7.fhir.dstu3.model.Distance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Duration)   return convertDuration((org.hl7.fhir.dstu3.model.Duration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Money)   return convertMoney((org.hl7.fhir.dstu3.model.Money)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SimpleQuantity)   return convertSimpleQuantity((org.hl7.fhir.dstu3.model.SimpleQuantity)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public org.hl7.fhir.dstu2.model.Type convertType(org.hl7.fhir.dstu3.model.Type src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.dstu3.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BooleanType)   return convertBoolean((org.hl7.fhir.dstu3.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeType)   return convertCode((org.hl7.fhir.dstu3.model.CodeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateType)   return convertDate((org.hl7.fhir.dstu3.model.DateType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateTimeType)   return convertDateTime((org.hl7.fhir.dstu3.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DecimalType)   return convertDecimal((org.hl7.fhir.dstu3.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IdType)   return convertId((org.hl7.fhir.dstu3.model.IdType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.InstantType)   return convertInstant((org.hl7.fhir.dstu3.model.InstantType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IntegerType)   return convertInteger((org.hl7.fhir.dstu3.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.dstu3.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OidType)   return convertOid((org.hl7.fhir.dstu3.model.OidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.dstu3.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StringType)   return convertString((org.hl7.fhir.dstu3.model.StringType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TimeType)   return convertTime((org.hl7.fhir.dstu3.model.TimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.dstu3.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UriType)   return convertUri((org.hl7.fhir.dstu3.model.UriType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UuidType)   return convertUuid((org.hl7.fhir.dstu3.model.UuidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Extension)   return convertExtension((org.hl7.fhir.dstu3.model.Extension)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Narrative)   return convertNarrative((org.hl7.fhir.dstu3.model.Narrative)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Annotation)   return convertAnnotation((org.hl7.fhir.dstu3.model.Annotation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Attachment)   return convertAttachment((org.hl7.fhir.dstu3.model.Attachment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.dstu3.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coding)   return convertCoding((org.hl7.fhir.dstu3.model.Coding)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Identifier)   return convertIdentifier((org.hl7.fhir.dstu3.model.Identifier)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Period)   return convertPeriod((org.hl7.fhir.dstu3.model.Period)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Quantity)   return convertQuantity((org.hl7.fhir.dstu3.model.Quantity)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Range)   return convertRange((org.hl7.fhir.dstu3.model.Range)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Ratio)   return convertRatio((org.hl7.fhir.dstu3.model.Ratio)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Reference)   return convertReference((org.hl7.fhir.dstu3.model.Reference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SampledData)   return convertSampledData((org.hl7.fhir.dstu3.model.SampledData)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Signature)   return convertSignature((org.hl7.fhir.dstu3.model.Signature)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Address)   return convertAddress((org.hl7.fhir.dstu3.model.Address)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.dstu3.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ElementDefinition)   return convertElementDefinition((org.hl7.fhir.dstu3.model.ElementDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HumanName)   return convertHumanName((org.hl7.fhir.dstu3.model.HumanName)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Meta)   return convertMeta((org.hl7.fhir.dstu3.model.Meta)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Timing)   return convertTiming((org.hl7.fhir.dstu3.model.Timing)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Age)   return convertAge((org.hl7.fhir.dstu3.model.Age)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Count)   return convertCount((org.hl7.fhir.dstu3.model.Count)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Distance)   return convertDistance((org.hl7.fhir.dstu3.model.Distance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Duration)   return convertDuration((org.hl7.fhir.dstu3.model.Duration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Money)   return convertMoney((org.hl7.fhir.dstu3.model.Money)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SimpleQuantity)   return convertSimpleQuantity((org.hl7.fhir.dstu3.model.SimpleQuantity)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9984655654842496
23535,"public org.hl7.fhir.dstu2.model.Group convertGroup(org.hl7.fhir.dstu3.model.Group src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Group tgt=new org.hl7.fhir.dstu2.model.Group();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setType(convertGroupType(src.getType()));
  tgt.setActual(src.getActual());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setName(src.getName());
  tgt.setQuantity(src.getQuantity());
  for (  org.hl7.fhir.dstu3.model.Group.GroupCharacteristicComponent t : src.getCharacteristic())   tgt.addCharacteristic(convertGroupCharacteristicComponent(t));
  for (  org.hl7.fhir.dstu3.model.Group.GroupMemberComponent t : src.getMember())   tgt.addMember(convertGroupMemberComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Group convertGroup(org.hl7.fhir.dstu3.model.Group src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Group tgt=new org.hl7.fhir.dstu2.model.Group();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setType(convertGroupType(src.getType()));
  tgt.setActual(src.getActual());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setName(src.getName());
  tgt.setQuantity(src.getQuantity());
  for (  org.hl7.fhir.dstu3.model.Group.GroupCharacteristicComponent t : src.getCharacteristic())   tgt.addCharacteristic(convertGroupCharacteristicComponent(t));
  for (  org.hl7.fhir.dstu3.model.Group.GroupMemberComponent t : src.getMember())   tgt.addMember(convertGroupMemberComponent(t));
  return tgt;
}",0.9903900508762012
23536,"public org.hl7.fhir.dstu2.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet tgt=new org.hl7.fhir.dstu2.model.ValueSet();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier i : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(i));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setLockedDate(src.getLockedDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setImmutable(src.getImmutable());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet tgt=new org.hl7.fhir.dstu2.model.ValueSet();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier i : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(i));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setLockedDate(src.getLockedDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setImmutable(src.getImmutable());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}",0.9936779471922648
23537,"public org.hl7.fhir.dstu2.model.Distance convertDistance(org.hl7.fhir.dstu3.model.Distance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Distance tgt=new org.hl7.fhir.dstu2.model.Distance();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Distance convertDistance(org.hl7.fhir.dstu3.model.Distance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Distance tgt=new org.hl7.fhir.dstu2.model.Distance();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9821615949632738
23538,"public org.hl7.fhir.dstu2.model.DataElement convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DataElement tgt=new org.hl7.fhir.dstu2.model.DataElement();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setStringency(convertDataElementStringency(src.getStringency()));
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DataElement convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DataElement tgt=new org.hl7.fhir.dstu2.model.DataElement();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setStringency(convertDataElementStringency(src.getStringency()));
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9937338739402876
23539,"public org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent convertSpecimenContainerComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenContainerComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDescription(src.getDescription());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setCapacity(convertSimpleQuantity(src.getCapacity()));
  tgt.setSpecimenQuantity(convertSimpleQuantity(src.getSpecimenQuantity()));
  tgt.setAdditive(convertType(src.getAdditive()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent convertSpecimenContainerComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenContainerComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenContainerComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDescription(src.getDescription());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setCapacity(convertSimpleQuantity(src.getCapacity()));
  tgt.setSpecimenQuantity(convertSimpleQuantity(src.getSpecimenQuantity()));
  tgt.setAdditive(convertType(src.getAdditive()));
  return tgt;
}",0.9894736842105264
23540,"public org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent convertValuedItemComponent(org.hl7.fhir.dstu3.model.Contract.ValuedItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertType(src.getEntity()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setEffectiveTime(src.getEffectiveTime());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setUnitPrice(convertMoney(src.getUnitPrice()));
  tgt.setFactor(src.getFactor());
  tgt.setPoints(src.getPoints());
  tgt.setNet(convertMoney(src.getNet()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent convertValuedItemComponent(org.hl7.fhir.dstu3.model.Contract.ValuedItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ValuedItemComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertType(src.getEntity()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setEffectiveTime(src.getEffectiveTime());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setUnitPrice(convertMoney(src.getUnitPrice()));
  tgt.setFactor(src.getFactor());
  tgt.setPoints(src.getPoints());
  tgt.setNet(convertMoney(src.getNet()));
  return tgt;
}",0.9887193098871933
23541,"public org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent convertPractitionerQualificationComponent(org.hl7.fhir.dstu3.model.Practitioner.PractitionerQualificationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent tgt=new org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setIssuer(convertReference(src.getIssuer()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent convertPractitionerQualificationComponent(org.hl7.fhir.dstu3.model.Practitioner.PractitionerQualificationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent tgt=new org.hl7.fhir.dstu2.model.Practitioner.PractitionerQualificationComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setIssuer(convertReference(src.getIssuer()));
  return tgt;
}",0.98838004101162
23542,"public org.hl7.fhir.dstu2.model.Patient convertPatient(org.hl7.fhir.dstu3.model.Patient src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Patient tgt=new org.hl7.fhir.dstu2.model.Patient();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.addName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  tgt.setDeceased(convertType(src.getDeceased()));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setMaritalStatus(convertCodeableConcept(src.getMaritalStatus()));
  tgt.setMultipleBirth(convertType(src.getMultipleBirth()));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  for (  org.hl7.fhir.dstu3.model.Patient.ContactComponent t : src.getContact())   tgt.addContact(convertContactComponent(t));
  tgt.setAnimal(convertAnimalComponent(src.getAnimal()));
  for (  org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent t : src.getCommunication())   tgt.addCommunication(convertPatientCommunicationComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGeneralPractitioner())   tgt.addCareProvider(convertReference(t));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  for (  org.hl7.fhir.dstu3.model.Patient.PatientLinkComponent t : src.getLink())   tgt.addLink(convertPatientLinkComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Patient convertPatient(org.hl7.fhir.dstu3.model.Patient src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Patient tgt=new org.hl7.fhir.dstu2.model.Patient();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.addName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  tgt.setDeceased(convertType(src.getDeceased()));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setMaritalStatus(convertCodeableConcept(src.getMaritalStatus()));
  tgt.setMultipleBirth(convertType(src.getMultipleBirth()));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  for (  org.hl7.fhir.dstu3.model.Patient.ContactComponent t : src.getContact())   tgt.addContact(convertContactComponent(t));
  tgt.setAnimal(convertAnimalComponent(src.getAnimal()));
  for (  org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent t : src.getCommunication())   tgt.addCommunication(convertPatientCommunicationComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGeneralPractitioner())   tgt.addCareProvider(convertReference(t));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  for (  org.hl7.fhir.dstu3.model.Patient.PatientLinkComponent t : src.getLink())   tgt.addLink(convertPatientLinkComponent(t));
  return tgt;
}",0.9953103448275862
23543,"public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent convertImmunizationRecommendationRecommendationComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent();
  copyElement(src,tgt);
  tgt.setDate(src.getDate());
  tgt.setVaccineCode(convertCodeableConcept(src.getVaccineCode()));
  tgt.setDoseNumber(src.getDoseNumber());
  tgt.setForecastStatus(convertCodeableConcept(src.getForecastStatus()));
  for (  org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent t : src.getDateCriterion())   tgt.addDateCriterion(convertImmunizationRecommendationRecommendationDateCriterionComponent(t));
  tgt.setProtocol(convertImmunizationRecommendationRecommendationProtocolComponent(src.getProtocol()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingImmunization())   tgt.addSupportingImmunization(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingPatientInformation())   tgt.addSupportingPatientInformation(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent convertImmunizationRecommendationRecommendationComponent(org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent();
  copyElement(src,tgt);
  tgt.setDate(src.getDate());
  tgt.setVaccineCode(convertCodeableConcept(src.getVaccineCode()));
  tgt.setDoseNumber(src.getDoseNumber());
  tgt.setForecastStatus(convertCodeableConcept(src.getForecastStatus()));
  for (  org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent t : src.getDateCriterion())   tgt.addDateCriterion(convertImmunizationRecommendationRecommendationDateCriterionComponent(t));
  tgt.setProtocol(convertImmunizationRecommendationRecommendationProtocolComponent(src.getProtocol()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingImmunization())   tgt.addSupportingImmunization(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingPatientInformation())   tgt.addSupportingPatientInformation(convertReference(t));
  return tgt;
}",0.9941156109380408
23544,"public org.hl7.fhir.dstu2.model.EligibilityResponse convertEligibilityResponse(org.hl7.fhir.dstu3.model.EligibilityResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EligibilityResponse tgt=new org.hl7.fhir.dstu2.model.EligibilityResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganization())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProvider())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganization())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.EligibilityResponse convertEligibilityResponse(org.hl7.fhir.dstu3.model.EligibilityResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EligibilityResponse tgt=new org.hl7.fhir.dstu2.model.EligibilityResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganization())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProvider())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganization())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  return tgt;
}",0.9927628778203492
23545,"public org.hl7.fhir.dstu2.model.Account convertAccount(org.hl7.fhir.dstu3.model.Account src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Account tgt=new org.hl7.fhir.dstu2.model.Account();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setName(src.getName());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setStatus(convertAccountStatus(src.getStatus()));
  tgt.setActivePeriod(convertPeriod(src.getActive()));
  tgt.setCurrency(convertCoding(src.getCurrency()));
  tgt.setBalance(convertMoney(src.getBalance()));
  tgt.setCoveragePeriod(convertPeriod(src.getCoveragePeriod()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setOwner(convertReference(src.getOwner()));
  tgt.setDescription(src.getDescription());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Account convertAccount(org.hl7.fhir.dstu3.model.Account src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Account tgt=new org.hl7.fhir.dstu2.model.Account();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setName(src.getName());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setStatus(convertAccountStatus(src.getStatus()));
  tgt.setActivePeriod(convertPeriod(src.getActive()));
  tgt.setCurrency(convertCoding(src.getCurrency()));
  tgt.setBalance(convertMoney(src.getBalance()));
  tgt.setCoveragePeriod(convertPeriod(src.getCoveragePeriod()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setOwner(convertReference(src.getOwner()));
  tgt.setDescription(src.getDescription());
  return tgt;
}",0.990633608815427
23546,"public org.hl7.fhir.dstu2.model.DiagnosticOrder convertDiagnosticOrder(org.hl7.fhir.dstu3.model.DiagnosticRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setOrderer(convertReference(src.getRequester()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DiagnosticOrder convertDiagnosticOrder(org.hl7.fhir.dstu3.model.DiagnosticRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setOrderer(convertReference(src.getRequester()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}",0.9910854745673832
23547,"public org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent convertImmunizationExplanationComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationExplanationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent convertImmunizationExplanationComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationExplanationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationExplanationComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  return tgt;
}",0.9878484631879916
23548,"public org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent convertSearchParameterContactComponent(org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent tgt=new org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent convertSearchParameterContactComponent(org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent tgt=new org.hl7.fhir.dstu2.model.SearchParameter.SearchParameterContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9858686616791354
23549,"public org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent convertTargetElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent();
  copyElement(src,tgt);
  tgt.setCodeSystem(g.getTarget());
  tgt.setCode(src.getCode());
  tgt.setEquivalence(convertConceptMapEquivalence(src.getEquivalence()));
  tgt.setComments(src.getComments());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getDependsOn())   tgt.addDependsOn(convertOtherElementComponent(t));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getProduct())   tgt.addProduct(convertOtherElementComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent convertTargetElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.TargetElementComponent();
  copyElement(src,tgt);
  tgt.setCodeSystem(g.getTarget());
  tgt.setCode(src.getCode());
  tgt.setEquivalence(convertConceptMapEquivalence(src.getEquivalence()));
  tgt.setComments(src.getComments());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getDependsOn())   tgt.addDependsOn(convertOtherElementComponent(t));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getProduct())   tgt.addProduct(convertOtherElementComponent(t));
  return tgt;
}",0.9907658881042912
23550,"public org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent convertSupplyRequestWhenComponent(org.hl7.fhir.dstu3.model.SupplyRequest.SupplyRequestWhenComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent tgt=new org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSchedule(convertTiming(src.getSchedule()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent convertSupplyRequestWhenComponent(org.hl7.fhir.dstu3.model.SupplyRequest.SupplyRequestWhenComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent tgt=new org.hl7.fhir.dstu2.model.SupplyRequest.SupplyRequestWhenComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSchedule(convertTiming(src.getSchedule()));
  return tgt;
}",0.9840972871842844
23551,"public org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent convertCommunicationRequestPayloadComponent(org.hl7.fhir.dstu3.model.CommunicationRequest.CommunicationRequestPayloadComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent tgt=new org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent convertCommunicationRequestPayloadComponent(org.hl7.fhir.dstu3.model.CommunicationRequest.CommunicationRequestPayloadComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent tgt=new org.hl7.fhir.dstu2.model.CommunicationRequest.CommunicationRequestPayloadComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}",0.9846708746618577
23552,"public org.hl7.fhir.dstu2.model.Slot convertSlot(org.hl7.fhir.dstu3.model.Slot src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Slot tgt=new org.hl7.fhir.dstu2.model.Slot();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.setType(convertCodeableConcept(t));
  tgt.setSchedule(convertReference(src.getSchedule()));
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  tgt.setOverbooked(src.getOverbooked());
  tgt.setComment(src.getComment());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Slot convertSlot(org.hl7.fhir.dstu3.model.Slot src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Slot tgt=new org.hl7.fhir.dstu2.model.Slot();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.setType(convertCodeableConcept(t));
  tgt.setSchedule(convertReference(src.getSchedule()));
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  tgt.setOverbooked(src.getOverbooked());
  tgt.setComment(src.getComment());
  return tgt;
}",0.9877433309300648
23553,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent convertSetupActionOperationComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setResource(src.getResource());
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setAccept(convertContentType(src.getAccept()));
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setDestination(src.getDestination());
  tgt.setEncodeRequestUrl(src.getEncodeRequestUrl());
  tgt.setParams(src.getParams());
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent t : src.getRequestHeader())   tgt.addRequestHeader(convertSetupActionOperationRequestHeaderComponent(t));
  tgt.setResponseId(src.getResponseId());
  tgt.setSourceId(src.getSourceId());
  tgt.setTargetId(src.getTargetId());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent convertSetupActionOperationComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setResource(src.getResource());
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setAccept(convertContentType(src.getAccept()));
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setDestination(src.getDestination());
  tgt.setEncodeRequestUrl(src.getEncodeRequestUrl());
  tgt.setParams(src.getParams());
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent t : src.getRequestHeader())   tgt.addRequestHeader(convertSetupActionOperationRequestHeaderComponent(t));
  tgt.setResponseId(src.getResponseId());
  tgt.setSourceId(src.getSourceId());
  tgt.setTargetId(src.getTargetId());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.992972302604382
23554,"public org.hl7.fhir.dstu2.model.Meta convertMeta(org.hl7.fhir.dstu3.model.Meta src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Meta tgt=new org.hl7.fhir.dstu2.model.Meta();
  copyElement(src,tgt);
  tgt.setVersionId(src.getVersionId());
  tgt.setLastUpdated(src.getLastUpdated());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getProfile())   tgt.addProfile(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurity())   tgt.addSecurity(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Meta convertMeta(org.hl7.fhir.dstu3.model.Meta src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Meta tgt=new org.hl7.fhir.dstu2.model.Meta();
  copyElement(src,tgt);
  tgt.setVersionId(src.getVersionId());
  tgt.setLastUpdated(src.getLastUpdated());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getProfile())   tgt.addProfile(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurity())   tgt.addSecurity(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}",0.9865824782951856
23555,"public org.hl7.fhir.dstu2.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.dstu3.model.DiagnosticReport src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRequest())   tgt.addRequest(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.dstu3.model.DiagnosticReport src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRequest())   tgt.addRequest(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}",0.99501027296742
23556,"public org.hl7.fhir.dstu2.model.Patient.ContactComponent convertContactComponent(org.hl7.fhir.dstu3.model.Patient.ContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Patient.ContactComponent tgt=new org.hl7.fhir.dstu2.model.Patient.ContactComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRelationship())   tgt.addRelationship(convertCodeableConcept(t));
  tgt.setName(convertHumanName(src.getName()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setOrganization(convertReference(src.getOrganization()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Patient.ContactComponent convertContactComponent(org.hl7.fhir.dstu3.model.Patient.ContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Patient.ContactComponent tgt=new org.hl7.fhir.dstu2.model.Patient.ContactComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRelationship())   tgt.addRelationship(convertCodeableConcept(t));
  tgt.setName(convertHumanName(src.getName()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setOrganization(convertReference(src.getOrganization()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9902017291066284
23557,"public org.hl7.fhir.dstu3.model.ExplanationOfBenefit convertExplanationOfBenefit(org.hl7.fhir.dstu2.model.ExplanationOfBenefit src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.ExplanationOfBenefit tgt=new org.hl7.fhir.dstu3.model.ExplanationOfBenefit();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu2.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setDisposition(src.getDisposition());
  tgt.setOrganization(convertType(src.getOrganization()));
  return tgt;
}","public org.hl7.fhir.dstu3.model.ExplanationOfBenefit convertExplanationOfBenefit(org.hl7.fhir.dstu2.model.ExplanationOfBenefit src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu3.model.ExplanationOfBenefit tgt=new org.hl7.fhir.dstu3.model.ExplanationOfBenefit();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu2.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setDisposition(src.getDisposition());
  tgt.setOrganization(convertType(src.getOrganization()));
  return tgt;
}",0.988169798190675
23558,"public org.hl7.fhir.dstu2.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition tgt=new org.hl7.fhir.dstu2.model.StructureDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setDisplay(src.getDisplay());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  tgt.setConstrainedType(src.getType());
  tgt.setBase(src.getBaseDefinition());
  tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  if (tgt.hasBase()) {
    if (tgt.hasDifferential())     tgt.getDifferential().getElement().get(0).addType().setCode(tail(tgt.getBase()));
    if (tgt.hasSnapshot())     tgt.getSnapshot().getElement().get(0).addType().setCode(tail(tgt.getBase()));
  }
  return tgt;
}","public org.hl7.fhir.dstu2.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition tgt=new org.hl7.fhir.dstu2.model.StructureDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setDisplay(src.getDisplay());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  tgt.setConstrainedType(src.getType());
  tgt.setBase(src.getBaseDefinition());
  tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  if (tgt.hasBase()) {
    if (tgt.hasDifferential())     tgt.getDifferential().getElement().get(0).addType().setCode(tail(tgt.getBase()));
    if (tgt.hasSnapshot())     tgt.getSnapshot().getElement().get(0).addType().setCode(tail(tgt.getBase()));
  }
  return tgt;
}",0.9962954892133362
23559,"public org.hl7.fhir.dstu2.model.Media convertMedia(org.hl7.fhir.dstu3.model.Media src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Media tgt=new org.hl7.fhir.dstu2.model.Media();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setType(convertDigitalMediaType(src.getType()));
  tgt.setSubtype(convertCodeableConcept(src.getSubtype()));
  tgt.setView(convertCodeableConcept(src.getView()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setOperator(convertReference(src.getOperator()));
  tgt.setDeviceName(src.getDeviceName());
  tgt.setHeight(src.getHeight());
  tgt.setWidth(src.getWidth());
  tgt.setFrames(src.getFrames());
  tgt.setDuration(src.getDuration());
  tgt.setContent(convertAttachment(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Media convertMedia(org.hl7.fhir.dstu3.model.Media src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Media tgt=new org.hl7.fhir.dstu2.model.Media();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setType(convertDigitalMediaType(src.getType()));
  tgt.setSubtype(convertCodeableConcept(src.getSubtype()));
  tgt.setView(convertCodeableConcept(src.getView()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setOperator(convertReference(src.getOperator()));
  tgt.setDeviceName(src.getDeviceName());
  tgt.setHeight(src.getHeight());
  tgt.setWidth(src.getWidth());
  tgt.setFrames(src.getFrames());
  tgt.setDuration(src.getDuration());
  tgt.setContent(convertAttachment(src.getContent()));
  return tgt;
}",0.9905607995558025
23560,"public org.hl7.fhir.dstu2.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition tgt=new org.hl7.fhir.dstu2.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setNotes(src.getComment());
  tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationDefinition tgt=new org.hl7.fhir.dstu2.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setNotes(src.getComment());
  tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.994107452339688
23561,"public org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent convertNamingSystemContactComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent tgt=new org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent convertNamingSystemContactComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent tgt=new org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9852045256744996
23562,"public org.hl7.fhir.dstu2.model.Composition.SectionComponent convertSectionComponent(org.hl7.fhir.dstu3.model.Composition.SectionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Composition.SectionComponent tgt=new org.hl7.fhir.dstu2.model.Composition.SectionComponent();
  copyElement(src,tgt);
  tgt.setTitle(src.getTitle());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setText(convertNarrative(src.getText()));
  tgt.setMode(src.getMode().toCode());
  tgt.setOrderedBy(convertCodeableConcept(src.getOrderedBy()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getEntry())   tgt.addEntry(convertReference(t));
  tgt.setEmptyReason(convertCodeableConcept(src.getEmptyReason()));
  for (  org.hl7.fhir.dstu3.model.Composition.SectionComponent t : src.getSection())   tgt.addSection(convertSectionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Composition.SectionComponent convertSectionComponent(org.hl7.fhir.dstu3.model.Composition.SectionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Composition.SectionComponent tgt=new org.hl7.fhir.dstu2.model.Composition.SectionComponent();
  copyElement(src,tgt);
  tgt.setTitle(src.getTitle());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setText(convertNarrative(src.getText()));
  tgt.setMode(src.getMode().toCode());
  tgt.setOrderedBy(convertCodeableConcept(src.getOrderedBy()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getEntry())   tgt.addEntry(convertReference(t));
  tgt.setEmptyReason(convertCodeableConcept(src.getEmptyReason()));
  for (  org.hl7.fhir.dstu3.model.Composition.SectionComponent t : src.getSection())   tgt.addSection(convertSectionComponent(t));
  return tgt;
}",0.990623276337562
23563,"public org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent convertHealthcareServiceAvailableTimeComponent(org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceAvailableTimeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent tgt=new org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.HealthcareService.DaysOfWeek> t : src.getDaysOfWeek())   tgt.addDaysOfWeek(convertDaysOfWeek(t.getValue()));
  tgt.setAllDay(src.getAllDay());
  tgt.setAvailableStartTime(src.getAvailableStartTime());
  tgt.setAvailableEndTime(src.getAvailableEndTime());
  return tgt;
}","public org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent convertHealthcareServiceAvailableTimeComponent(org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceAvailableTimeComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent tgt=new org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceAvailableTimeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.HealthcareService.DaysOfWeek> t : src.getDaysOfWeek())   tgt.addDaysOfWeek(convertDaysOfWeek(t.getValue()));
  tgt.setAllDay(src.getAllDay());
  tgt.setAvailableStartTime(src.getAvailableStartTime());
  tgt.setAvailableEndTime(src.getAvailableEndTime());
  return tgt;
}",0.9898142600359496
23564,"public org.hl7.fhir.dstu2.model.EnrollmentResponse convertEnrollmentResponse(org.hl7.fhir.dstu3.model.EnrollmentResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EnrollmentResponse tgt=new org.hl7.fhir.dstu2.model.EnrollmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  return tgt;
}","public org.hl7.fhir.dstu2.model.EnrollmentResponse convertEnrollmentResponse(org.hl7.fhir.dstu3.model.EnrollmentResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EnrollmentResponse tgt=new org.hl7.fhir.dstu2.model.EnrollmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  return tgt;
}",0.9869130100076984
23565,"public org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent convertGoalOutcomeComponent(org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent tgt=new org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent();
  copyElement(src,tgt);
  tgt.setResult(convertType(src.getResult()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent convertGoalOutcomeComponent(org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent tgt=new org.hl7.fhir.dstu2.model.Goal.GoalOutcomeComponent();
  copyElement(src,tgt);
  tgt.setResult(convertType(src.getResult()));
  return tgt;
}",0.9791921664626684
23566,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent convertSetupActionComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent convertSetupActionComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}",0.9848888888888888
23567,"public org.hl7.fhir.dstu2.model.Address convertAddress(org.hl7.fhir.dstu3.model.Address src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Address tgt=new org.hl7.fhir.dstu2.model.Address();
  copyElement(src,tgt);
  tgt.setUse(convertAddressUse(src.getUse()));
  tgt.setType(convertAddressType(src.getType()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLine())   tgt.addLine(t.getValue());
  tgt.setCity(src.getCity());
  tgt.setDistrict(src.getDistrict());
  tgt.setState(src.getState());
  tgt.setPostalCode(src.getPostalCode());
  tgt.setCountry(src.getCountry());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Address convertAddress(org.hl7.fhir.dstu3.model.Address src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Address tgt=new org.hl7.fhir.dstu2.model.Address();
  copyElement(src,tgt);
  tgt.setUse(convertAddressUse(src.getUse()));
  tgt.setType(convertAddressType(src.getType()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLine())   tgt.addLine(t.getValue());
  tgt.setCity(src.getCity());
  tgt.setDistrict(src.getDistrict());
  tgt.setState(src.getState());
  tgt.setPostalCode(src.getPostalCode());
  tgt.setCountry(src.getCountry());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9882515549412578
23568,"public org.hl7.fhir.dstu2.model.Patient.AnimalComponent convertAnimalComponent(org.hl7.fhir.dstu3.model.Patient.AnimalComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Patient.AnimalComponent tgt=new org.hl7.fhir.dstu2.model.Patient.AnimalComponent();
  copyElement(src,tgt);
  tgt.setSpecies(convertCodeableConcept(src.getSpecies()));
  tgt.setBreed(convertCodeableConcept(src.getBreed()));
  tgt.setGenderStatus(convertCodeableConcept(src.getGenderStatus()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Patient.AnimalComponent convertAnimalComponent(org.hl7.fhir.dstu3.model.Patient.AnimalComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Patient.AnimalComponent tgt=new org.hl7.fhir.dstu2.model.Patient.AnimalComponent();
  copyElement(src,tgt);
  tgt.setSpecies(convertCodeableConcept(src.getSpecies()));
  tgt.setBreed(convertCodeableConcept(src.getBreed()));
  tgt.setGenderStatus(convertCodeableConcept(src.getGenderStatus()));
  return tgt;
}",0.9840972871842844
23569,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent convertNutritionOrderOralDietComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Timing t : src.getSchedule())   tgt.addSchedule(convertTiming(t));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietNutrientComponent t : src.getNutrient())   tgt.addNutrient(convertNutritionOrderOralDietNutrientComponent(t));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietTextureComponent t : src.getTexture())   tgt.addTexture(convertNutritionOrderOralDietTextureComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFluidConsistencyType())   tgt.addFluidConsistencyType(convertCodeableConcept(t));
  tgt.setInstruction(src.getInstruction());
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent convertNutritionOrderOralDietComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Timing t : src.getSchedule())   tgt.addSchedule(convertTiming(t));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietNutrientComponent t : src.getNutrient())   tgt.addNutrient(convertNutritionOrderOralDietNutrientComponent(t));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietTextureComponent t : src.getTexture())   tgt.addTexture(convertNutritionOrderOralDietTextureComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFluidConsistencyType())   tgt.addFluidConsistencyType(convertCodeableConcept(t));
  tgt.setInstruction(src.getInstruction());
  return tgt;
}",0.9930753564154786
23570,"public org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent convertQuestionnaireResponseItemAnswerComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addGroup(convertQuestionnaireItemToGroup(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent convertQuestionnaireResponseItemAnswerComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent tgt=new org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addGroup(convertQuestionnaireItemToGroup(t));
  return tgt;
}",0.987600291757841
23571,"public org.hl7.fhir.dstu2.model.Reference convertReference(org.hl7.fhir.dstu3.model.Reference src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Reference tgt=new org.hl7.fhir.dstu2.model.Reference();
  copyElement(src,tgt);
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Reference convertReference(org.hl7.fhir.dstu3.model.Reference src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Reference tgt=new org.hl7.fhir.dstu2.model.Reference();
  copyElement(src,tgt);
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}",0.976551724137931
23572,"public org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent convertCommunicationPayloadComponent(org.hl7.fhir.dstu3.model.Communication.CommunicationPayloadComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent tgt=new org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent convertCommunicationPayloadComponent(org.hl7.fhir.dstu3.model.Communication.CommunicationPayloadComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent tgt=new org.hl7.fhir.dstu2.model.Communication.CommunicationPayloadComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}",0.982706002034588
23573,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}",0.9942548158161542
23574,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent convertSetupActionOperationRequestHeaderComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent();
  copyElement(src,tgt);
  tgt.setField(src.getField());
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent convertSetupActionOperationRequestHeaderComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionOperationRequestHeaderComponent();
  copyElement(src,tgt);
  tgt.setField(src.getField());
  tgt.setValue(src.getValue());
  return tgt;
}",0.9855810008481763
23575,"public org.hl7.fhir.dstu2.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.Conformance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance tgt=new org.hl7.fhir.dstu2.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.Conformance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance tgt=new org.hl7.fhir.dstu2.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}",0.9954630370963438
23576,"public org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseQuestionComponent(org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseQuestionComponent(org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  return tgt;
}",0.9882026370575988
23577,"public org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent convertObservationRelatedComponent(org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent();
  copyElement(src,tgt);
  tgt.setType(convertObservationRelationshipType(src.getType()));
  tgt.setTarget(convertReference(src.getTarget()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent convertObservationRelatedComponent(org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationRelatedComponent();
  copyElement(src,tgt);
  tgt.setType(convertObservationRelationshipType(src.getType()));
  tgt.setTarget(convertReference(src.getTarget()));
  return tgt;
}",0.9843317972350232
23578,"public org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent convertMedicationPackageContentComponent(org.hl7.fhir.dstu3.model.Medication.MedicationPackageContentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent();
  copyElement(src,tgt);
  if (src.hasItemReference())   tgt.setItem((org.hl7.fhir.dstu2.model.Reference)convertType(src.getItem()));
  tgt.setAmount(convertSimpleQuantity(src.getAmount()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent convertMedicationPackageContentComponent(org.hl7.fhir.dstu3.model.Medication.MedicationPackageContentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationPackageContentComponent();
  copyElement(src,tgt);
  if (src.hasItemReference())   tgt.setItem((org.hl7.fhir.dstu2.model.Reference)convertType(src.getItem()));
  tgt.setAmount(convertSimpleQuantity(src.getAmount()));
  return tgt;
}",0.986212489862125
23579,"public org.hl7.fhir.dstu2.model.Encounter convertEncounter(org.hl7.fhir.dstu3.model.Encounter src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Encounter tgt=new org.hl7.fhir.dstu2.model.Encounter();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertEncounterState(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterStatusHistoryComponent t : src.getStatusHistory())   tgt.addStatusHistory(convertEncounterStatusHistoryComponent(t));
  tgt.setClass_(convertEncounterClass(src.getClass_()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getEpisodeOfCare())   tgt.addEpisodeOfCare(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getIncomingReferral())   tgt.addIncomingReferral(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterParticipantComponent t : src.getParticipant())   tgt.addParticipant(convertEncounterParticipantComponent(t));
  tgt.setAppointment(convertReference(src.getAppointment()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setLength(convertDuration(src.getLength()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getIndication())   tgt.addIndication(convertReference(t));
  tgt.setHospitalization(convertEncounterHospitalizationComponent(src.getHospitalization()));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterLocationComponent t : src.getLocation())   tgt.addLocation(convertEncounterLocationComponent(t));
  tgt.setServiceProvider(convertReference(src.getServiceProvider()));
  tgt.setPartOf(convertReference(src.getPartOf()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Encounter convertEncounter(org.hl7.fhir.dstu3.model.Encounter src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Encounter tgt=new org.hl7.fhir.dstu2.model.Encounter();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertEncounterState(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterStatusHistoryComponent t : src.getStatusHistory())   tgt.addStatusHistory(convertEncounterStatusHistoryComponent(t));
  tgt.setClass_(convertEncounterClass(src.getClass_()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getEpisodeOfCare())   tgt.addEpisodeOfCare(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getIncomingReferral())   tgt.addIncomingReferral(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterParticipantComponent t : src.getParticipant())   tgt.addParticipant(convertEncounterParticipantComponent(t));
  tgt.setAppointment(convertReference(src.getAppointment()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setLength(convertDuration(src.getLength()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getIndication())   tgt.addIndication(convertReference(t));
  tgt.setHospitalization(convertEncounterHospitalizationComponent(src.getHospitalization()));
  for (  org.hl7.fhir.dstu3.model.Encounter.EncounterLocationComponent t : src.getLocation())   tgt.addLocation(convertEncounterLocationComponent(t));
  tgt.setServiceProvider(convertReference(src.getServiceProvider()));
  tgt.setPartOf(convertReference(src.getPartOf()));
  return tgt;
}",0.995906573561281
23580,"public org.hl7.fhir.dstu2.model.Questionnaire convertQuestionnaire(org.hl7.fhir.dstu3.model.Questionnaire src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Questionnaire tgt=new org.hl7.fhir.dstu2.model.Questionnaire();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertQuestionnaireStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent root=tgt.getGroup();
  root.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept()) {
    root.addConcept(convertCoding(t));
  }
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getSubjectType())   tgt.addSubjectType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   if (t.getType() == org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemType.GROUP)   root.addGroup(convertQuestionnaireGroupComponent(t));
 else   root.addQuestion(convertQuestionnaireQuestionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Questionnaire convertQuestionnaire(org.hl7.fhir.dstu3.model.Questionnaire src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Questionnaire tgt=new org.hl7.fhir.dstu2.model.Questionnaire();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertQuestionnaireStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  org.hl7.fhir.dstu2.model.Questionnaire.GroupComponent root=tgt.getGroup();
  root.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept()) {
    root.addConcept(convertCoding(t));
  }
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getSubjectType())   tgt.addSubjectType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   if (t.getType() == org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemType.GROUP)   root.addGroup(convertQuestionnaireGroupComponent(t));
 else   root.addQuestion(convertQuestionnaireQuestionComponent(t));
  return tgt;
}",0.9936353425683264
23581,"public org.hl7.fhir.dstu2.model.DeviceMetric convertDeviceMetric(org.hl7.fhir.dstu3.model.DeviceMetric src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceMetric tgt=new org.hl7.fhir.dstu2.model.DeviceMetric();
  copyDomainResource(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setUnit(convertCodeableConcept(src.getUnit()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setParent(convertReference(src.getParent()));
  tgt.setOperationalStatus(convertDeviceMetricOperationalStatus(src.getOperationalStatus()));
  tgt.setColor(convertDeviceMetricColor(src.getColor()));
  tgt.setCategory(convertDeviceMetricCategory(src.getCategory()));
  tgt.setMeasurementPeriod(convertTiming(src.getMeasurementPeriod()));
  for (  org.hl7.fhir.dstu3.model.DeviceMetric.DeviceMetricCalibrationComponent t : src.getCalibration())   tgt.addCalibration(convertDeviceMetricCalibrationComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceMetric convertDeviceMetric(org.hl7.fhir.dstu3.model.DeviceMetric src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceMetric tgt=new org.hl7.fhir.dstu2.model.DeviceMetric();
  copyDomainResource(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setUnit(convertCodeableConcept(src.getUnit()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setParent(convertReference(src.getParent()));
  tgt.setOperationalStatus(convertDeviceMetricOperationalStatus(src.getOperationalStatus()));
  tgt.setColor(convertDeviceMetricColor(src.getColor()));
  tgt.setCategory(convertDeviceMetricCategory(src.getCategory()));
  tgt.setMeasurementPeriod(convertTiming(src.getMeasurementPeriod()));
  for (  org.hl7.fhir.dstu3.model.DeviceMetric.DeviceMetricCalibrationComponent t : src.getCalibration())   tgt.addCalibration(convertDeviceMetricCalibrationComponent(t));
  return tgt;
}",0.9918543363679924
23582,"public org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent convertNotesComponent(org.hl7.fhir.dstu3.model.PaymentReconciliation.NotesComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setText(src.getText());
  return tgt;
}","public org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent convertNotesComponent(org.hl7.fhir.dstu3.model.PaymentReconciliation.NotesComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation.NotesComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setText(src.getText());
  return tgt;
}",0.982086406743941
23583,"public org.hl7.fhir.dstu2.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ContactPoint tgt=new org.hl7.fhir.dstu2.model.ContactPoint();
  copyElement(src,tgt);
  tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ContactPoint tgt=new org.hl7.fhir.dstu2.model.ContactPoint();
  copyElement(src,tgt);
  tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9838249286393912
23584,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent convertConformanceMessagingEventComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCoding(src.getCode()));
  tgt.setCategory(convertMessageSignificanceCategory(src.getCategory()));
  tgt.setMode(convertConformanceEventMode(src.getMode()));
  tgt.setFocus(src.getFocus());
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setResponse(convertReference(src.getResponse()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent convertConformanceMessagingEventComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEventComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCoding(src.getCode()));
  tgt.setCategory(convertMessageSignificanceCategory(src.getCategory()));
  tgt.setMode(convertConformanceEventMode(src.getMode()));
  tgt.setFocus(src.getFocus());
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setResponse(convertReference(src.getResponse()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9897280966767372
23585,"public org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent convertDocumentManifestContentComponent(org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestContentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent tgt=new org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent();
  copyElement(src,tgt);
  tgt.setP(convertType(src.getP()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent convertDocumentManifestContentComponent(org.hl7.fhir.dstu3.model.DocumentManifest.DocumentManifestContentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent tgt=new org.hl7.fhir.dstu2.model.DocumentManifest.DocumentManifestContentComponent();
  copyElement(src,tgt);
  tgt.setP(convertType(src.getP()));
  return tgt;
}",0.983218163869694
23586,"public org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent convertObservationReferenceRangeComponent(org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getMeaning())   tgt.setMeaning(convertCodeableConcept(c));
  tgt.setAge(convertRange(src.getAge()));
  tgt.setText(src.getText());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent convertObservationReferenceRangeComponent(org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getMeaning())   tgt.setMeaning(convertCodeableConcept(c));
  tgt.setAge(convertRange(src.getAge()));
  tgt.setText(src.getText());
  return tgt;
}",0.988704318936877
23587,"public org.hl7.fhir.dstu2.model.ProcedureRequest convertProcedureRequest(org.hl7.fhir.dstu3.model.ProcedureRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ProcedureRequest tgt=new org.hl7.fhir.dstu2.model.ProcedureRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setScheduled(convertType(src.getScheduled()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setStatus(convertProcedureRequestStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNotes())   tgt.addNotes(convertAnnotation(t));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setOrderedOn(src.getOrderedOn());
  tgt.setOrderer(convertReference(src.getOrderer()));
  tgt.setPriority(convertProcedureRequestPriority(src.getPriority()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ProcedureRequest convertProcedureRequest(org.hl7.fhir.dstu3.model.ProcedureRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ProcedureRequest tgt=new org.hl7.fhir.dstu2.model.ProcedureRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setScheduled(convertType(src.getScheduled()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setStatus(convertProcedureRequestStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNotes())   tgt.addNotes(convertAnnotation(t));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setOrderedOn(src.getOrderedOn());
  tgt.setOrderer(convertReference(src.getOrderer()));
  tgt.setPriority(convertProcedureRequestPriority(src.getPriority()));
  return tgt;
}",0.9932991722506898
23588,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent convertConceptSetComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent t : src.getConcept())   tgt.addConcept(convertConceptReferenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent t : src.getFilter())   tgt.addFilter(convertConceptSetFilterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent convertConceptSetComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent t : src.getConcept())   tgt.addConcept(convertConceptReferenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent t : src.getFilter())   tgt.addFilter(convertConceptSetFilterComponent(t));
  return tgt;
}",0.98839590443686
23589,"public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent convertAuditEventEntityDetailComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityDetailComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent convertAuditEventEntityDetailComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventEntityDetailComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventObjectDetailComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setValue(src.getValue());
  return tgt;
}",0.983084577114428
23590,"public org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent convertSubstanceIngredientComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent();
  copyElement(src,tgt);
  tgt.setQuantity(convertRatio(src.getQuantity()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent convertSubstanceIngredientComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent();
  copyElement(src,tgt);
  tgt.setQuantity(convertRatio(src.getQuantity()));
  return tgt;
}",0.9820485744456178
23591,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  tgt.setSource(src.getSource());
  tgt.setName(src.getTitle());
  tgt.setKind(convertGuidePageKind(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPackage())   tgt.addPackage(t.getValue());
  tgt.setFormat(src.getFormat());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  tgt.setSource(src.getSource());
  tgt.setName(src.getTitle());
  tgt.setKind(convertGuidePageKind(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPackage())   tgt.addPackage(t.getValue());
  tgt.setFormat(src.getFormat());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}",0.9913924050632912
23592,"public org.hl7.fhir.dstu2.model.SearchParameter convertSearchParameter(org.hl7.fhir.dstu3.model.SearchParameter src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SearchParameter tgt=new org.hl7.fhir.dstu2.model.SearchParameter();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent t : src.getContact())   tgt.addContact(convertSearchParameterContactComponent(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(src.getCode());
  tgt.setBase(src.getBase());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDescription(src.getDescription());
  org.hl7.fhir.dstu2.utils.ToolingExtensions.setStringExtension(tgt,ToolingExtensions.EXT_EXPRESSION,src.getExpression());
  tgt.setXpath(src.getXpath());
  tgt.setXpathUsage(convertXPathUsageType(src.getXpathUsage()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.SearchParameter convertSearchParameter(org.hl7.fhir.dstu3.model.SearchParameter src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SearchParameter tgt=new org.hl7.fhir.dstu2.model.SearchParameter();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent t : src.getContact())   tgt.addContact(convertSearchParameterContactComponent(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(src.getCode());
  tgt.setBase(src.getBase());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDescription(src.getDescription());
  org.hl7.fhir.dstu2.utils.ToolingExtensions.setStringExtension(tgt,ToolingExtensions.EXT_EXPRESSION,src.getExpression());
  tgt.setXpath(src.getXpath());
  tgt.setXpathUsage(convertXPathUsageType(src.getXpathUsage()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  return tgt;
}",0.9931972789115646
23593,"public org.hl7.fhir.dstu2.model.Extension convertExtension(org.hl7.fhir.dstu3.model.Extension src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Extension tgt=new org.hl7.fhir.dstu2.model.Extension();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Extension convertExtension(org.hl7.fhir.dstu3.model.Extension src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Extension tgt=new org.hl7.fhir.dstu2.model.Extension();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.9763560500695412
23594,"public org.hl7.fhir.dstu2.model.ConceptMap convertConceptMap(org.hl7.fhir.dstu3.model.ConceptMap src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ConceptMap tgt=new org.hl7.fhir.dstu2.model.ConceptMap();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ConceptMap convertConceptMap(org.hl7.fhir.dstu3.model.ConceptMap src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ConceptMap tgt=new org.hl7.fhir.dstu2.model.ConceptMap();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}",0.9937797292352726
23595,"public org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent convertResourceInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertTypeRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent convertResourceInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ResourceInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertTypeRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9842154131847726
23596,"public org.hl7.fhir.dstu2.model.TestScript convertTestScript(org.hl7.fhir.dstu3.model.TestScript src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript tgt=new org.hl7.fhir.dstu2.model.TestScript();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent t : src.getContact())   tgt.addContact(convertTestScriptContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setMetadata(convertTestScriptMetadataComponent(src.getMetadata()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent t : src.getFixture())   tgt.addFixture(convertTestScriptFixtureComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent t : src.getVariable())   tgt.addVariable(convertTestScriptVariableComponent(t));
  tgt.setSetup(convertTestScriptSetupComponent(src.getSetup()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent t : src.getTest())   tgt.addTest(convertTestScriptTestComponent(t));
  tgt.setTeardown(convertTestScriptTeardownComponent(src.getTeardown()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript convertTestScript(org.hl7.fhir.dstu3.model.TestScript src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript tgt=new org.hl7.fhir.dstu2.model.TestScript();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent t : src.getContact())   tgt.addContact(convertTestScriptContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setMetadata(convertTestScriptMetadataComponent(src.getMetadata()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent t : src.getFixture())   tgt.addFixture(convertTestScriptFixtureComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent t : src.getVariable())   tgt.addVariable(convertTestScriptVariableComponent(t));
  tgt.setSetup(convertTestScriptSetupComponent(src.getSetup()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent t : src.getTest())   tgt.addTest(convertTestScriptTestComponent(t));
  tgt.setTeardown(convertTestScriptTeardownComponent(src.getTeardown()));
  return tgt;
}",0.995279089141905
23597,"public org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent convertImmunizationVaccinationProtocolComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationVaccinationProtocolComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent();
  copyElement(src,tgt);
  tgt.setDoseSequence(src.getDoseSequence());
  tgt.setDescription(src.getDescription());
  tgt.setAuthority(convertReference(src.getAuthority()));
  tgt.setSeries(src.getSeries());
  tgt.setSeriesDoses(src.getSeriesDoses());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getTargetDisease())   tgt.addTargetDisease(convertCodeableConcept(t));
  tgt.setDoseStatus(convertCodeableConcept(src.getDoseStatus()));
  tgt.setDoseStatusReason(convertCodeableConcept(src.getDoseStatusReason()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent convertImmunizationVaccinationProtocolComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationVaccinationProtocolComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationVaccinationProtocolComponent();
  copyElement(src,tgt);
  tgt.setDoseSequence(src.getDoseSequence());
  tgt.setDescription(src.getDescription());
  tgt.setAuthority(convertReference(src.getAuthority()));
  tgt.setSeries(src.getSeries());
  tgt.setSeriesDoses(src.getSeriesDoses());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getTargetDisease())   tgt.addTargetDisease(convertCodeableConcept(t));
  tgt.setDoseStatus(convertCodeableConcept(src.getDoseStatus()));
  tgt.setDoseStatusReason(convertCodeableConcept(src.getDoseStatusReason()));
  return tgt;
}",0.9914357682619648
23598,"public org.hl7.fhir.dstu2.model.Location.LocationPositionComponent convertLocationPositionComponent(org.hl7.fhir.dstu3.model.Location.LocationPositionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Location.LocationPositionComponent tgt=new org.hl7.fhir.dstu2.model.Location.LocationPositionComponent();
  copyElement(src,tgt);
  tgt.setLongitude(src.getLongitude());
  tgt.setLatitude(src.getLatitude());
  tgt.setAltitude(src.getAltitude());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Location.LocationPositionComponent convertLocationPositionComponent(org.hl7.fhir.dstu3.model.Location.LocationPositionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Location.LocationPositionComponent tgt=new org.hl7.fhir.dstu2.model.Location.LocationPositionComponent();
  copyElement(src,tgt);
  tgt.setLongitude(src.getLongitude());
  tgt.setLatitude(src.getLatitude());
  tgt.setAltitude(src.getAltitude());
  return tgt;
}",0.9836065573770492
23599,"public org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseGroupComponent(org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent t : src.getGroup())   tgt.addItem(convertQuestionnaireResponseGroupComponent(t));
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent t : src.getQuestion())   tgt.addItem(convertQuestionnaireResponseQuestionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseGroupComponent(org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.GroupComponent t : src.getGroup())   tgt.addItem(convertQuestionnaireResponseGroupComponent(t));
  for (  org.hl7.fhir.dstu2.model.QuestionnaireResponse.QuestionComponent t : src.getQuestion())   tgt.addItem(convertQuestionnaireResponseQuestionComponent(t));
  return tgt;
}",0.9906951286261632
23600,"public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent convertStructureDefinitionContactComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent convertStructureDefinitionContactComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9866666666666668
23601,"public org.hl7.fhir.dstu2.model.EnrollmentRequest convertEnrollmentRequest(org.hl7.fhir.dstu3.model.EnrollmentRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EnrollmentRequest tgt=new org.hl7.fhir.dstu2.model.EnrollmentRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setCoverage(convertReference(src.getCoverage()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.EnrollmentRequest convertEnrollmentRequest(org.hl7.fhir.dstu3.model.EnrollmentRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EnrollmentRequest tgt=new org.hl7.fhir.dstu2.model.EnrollmentRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setCoverage(convertReference(src.getCoverage()));
  return tgt;
}",0.9870525514089872
23602,"public org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent convertAllergyIntoleranceReactionComponent(org.hl7.fhir.dstu3.model.AllergyIntolerance.AllergyIntoleranceReactionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent tgt=new org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent();
  copyElement(src,tgt);
  tgt.setSubstance(convertCodeableConcept(src.getSubstance()));
  tgt.setCertainty(convertAllergyIntoleranceCertainty(src.getCertainty()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getManifestation())   tgt.addManifestation(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  tgt.setOnset(src.getOnset());
  tgt.setSeverity(convertAllergyIntoleranceSeverity(src.getSeverity()));
  tgt.setExposureRoute(convertCodeableConcept(src.getExposureRoute()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(convertAnnotation(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent convertAllergyIntoleranceReactionComponent(org.hl7.fhir.dstu3.model.AllergyIntolerance.AllergyIntoleranceReactionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent tgt=new org.hl7.fhir.dstu2.model.AllergyIntolerance.AllergyIntoleranceReactionComponent();
  copyElement(src,tgt);
  tgt.setSubstance(convertCodeableConcept(src.getSubstance()));
  tgt.setCertainty(convertAllergyIntoleranceCertainty(src.getCertainty()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getManifestation())   tgt.addManifestation(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  tgt.setOnset(src.getOnset());
  tgt.setSeverity(convertAllergyIntoleranceSeverity(src.getSeverity()));
  tgt.setExposureRoute(convertCodeableConcept(src.getExposureRoute()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(convertAnnotation(t));
  return tgt;
}",0.9921550530687586
23603,"public org.hl7.fhir.dstu2.model.Immunization convertImmunization(org.hl7.fhir.dstu3.model.Immunization src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Immunization tgt=new org.hl7.fhir.dstu2.model.Immunization();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(src.getStatus().toCode());
  tgt.setDate(src.getDate());
  tgt.setVaccineCode(convertCodeableConcept(src.getVaccineCode()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  tgt.setReported(src.getReported());
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setManufacturer(convertReference(src.getManufacturer()));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setLotNumber(src.getLotNumber());
  tgt.setExpirationDate(src.getExpirationDate());
  tgt.setSite(convertCodeableConcept(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setDoseQuantity(convertSimpleQuantity(src.getDoseQuantity()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  tgt.setExplanation(convertImmunizationExplanationComponent(src.getExplanation()));
  for (  org.hl7.fhir.dstu3.model.Immunization.ImmunizationReactionComponent t : src.getReaction())   tgt.addReaction(convertImmunizationReactionComponent(t));
  for (  org.hl7.fhir.dstu3.model.Immunization.ImmunizationVaccinationProtocolComponent t : src.getVaccinationProtocol())   tgt.addVaccinationProtocol(convertImmunizationVaccinationProtocolComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Immunization convertImmunization(org.hl7.fhir.dstu3.model.Immunization src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Immunization tgt=new org.hl7.fhir.dstu2.model.Immunization();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(src.getStatus().toCode());
  tgt.setDate(src.getDate());
  tgt.setVaccineCode(convertCodeableConcept(src.getVaccineCode()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  tgt.setReported(src.getReported());
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setManufacturer(convertReference(src.getManufacturer()));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setLotNumber(src.getLotNumber());
  tgt.setExpirationDate(src.getExpirationDate());
  tgt.setSite(convertCodeableConcept(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setDoseQuantity(convertSimpleQuantity(src.getDoseQuantity()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  tgt.setExplanation(convertImmunizationExplanationComponent(src.getExplanation()));
  for (  org.hl7.fhir.dstu3.model.Immunization.ImmunizationReactionComponent t : src.getReaction())   tgt.addReaction(convertImmunizationReactionComponent(t));
  for (  org.hl7.fhir.dstu3.model.Immunization.ImmunizationVaccinationProtocolComponent t : src.getVaccinationProtocol())   tgt.addVaccinationProtocol(convertImmunizationVaccinationProtocolComponent(t));
  return tgt;
}",0.9953077560033122
23604,"public org.hl7.fhir.dstu2.model.Person.PersonLinkComponent convertPersonLinkComponent(org.hl7.fhir.dstu3.model.Person.PersonLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Person.PersonLinkComponent tgt=new org.hl7.fhir.dstu2.model.Person.PersonLinkComponent();
  copyElement(src,tgt);
  tgt.setTarget(convertReference(src.getTarget()));
  tgt.setAssurance(convertIdentityAssuranceLevel(src.getAssurance()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Person.PersonLinkComponent convertPersonLinkComponent(org.hl7.fhir.dstu3.model.Person.PersonLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Person.PersonLinkComponent tgt=new org.hl7.fhir.dstu2.model.Person.PersonLinkComponent();
  copyElement(src,tgt);
  tgt.setTarget(convertReference(src.getTarget()));
  tgt.setAssurance(convertIdentityAssuranceLevel(src.getAssurance()));
  return tgt;
}",0.9825641025641024
23605,"public org.hl7.fhir.dstu2.model.DocumentReference convertDocumentReference(org.hl7.fhir.dstu3.model.DocumentReference src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentReference tgt=new org.hl7.fhir.dstu2.model.DocumentReference();
  copyDomainResource(src,tgt);
  tgt.setMasterIdentifier(convertIdentifier(src.getMasterIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setClass_(convertCodeableConcept(src.getClass_()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setCustodian(convertReference(src.getCustodian()));
  tgt.setAuthenticator(convertReference(src.getAuthenticator()));
  tgt.setCreated(src.getCreated());
  tgt.setIndexed(src.getIndexed());
  tgt.setStatus(convertDocumentReferenceStatus(src.getStatus()));
  tgt.setDocStatus(convertCodeableConcept(src.getDocStatus()));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceRelatesToComponent t : src.getRelatesTo())   tgt.addRelatesTo(convertDocumentReferenceRelatesToComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSecurityLabel())   tgt.addSecurityLabel(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContentComponent t : src.getContent())   tgt.addContent(convertDocumentReferenceContentComponent(t));
  tgt.setContext(convertDocumentReferenceContextComponent(src.getContext()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentReference convertDocumentReference(org.hl7.fhir.dstu3.model.DocumentReference src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentReference tgt=new org.hl7.fhir.dstu2.model.DocumentReference();
  copyDomainResource(src,tgt);
  tgt.setMasterIdentifier(convertIdentifier(src.getMasterIdentifier()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setClass_(convertCodeableConcept(src.getClass_()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setCustodian(convertReference(src.getCustodian()));
  tgt.setAuthenticator(convertReference(src.getAuthenticator()));
  tgt.setCreated(src.getCreated());
  tgt.setIndexed(src.getIndexed());
  tgt.setStatus(convertDocumentReferenceStatus(src.getStatus()));
  tgt.setDocStatus(convertCodeableConcept(src.getDocStatus()));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceRelatesToComponent t : src.getRelatesTo())   tgt.addRelatesTo(convertDocumentReferenceRelatesToComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSecurityLabel())   tgt.addSecurityLabel(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContentComponent t : src.getContent())   tgt.addContent(convertDocumentReferenceContentComponent(t));
  tgt.setContext(convertDocumentReferenceContextComponent(src.getContext()));
  return tgt;
}",0.9950451763334304
23606,"public org.hl7.fhir.dstu2.model.MedicationDispense convertMedicationDispense(org.hl7.fhir.dstu3.model.MedicationDispense src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense tgt=new org.hl7.fhir.dstu2.model.MedicationDispense();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertMedicationDispenseStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setDispenser(convertReference(src.getDispenser()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthorizingPrescription())   tgt.addAuthorizingPrescription(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setDaysSupply(convertSimpleQuantity(src.getDaysSupply()));
  tgt.setWhenPrepared(src.getWhenPrepared());
  tgt.setWhenHandedOver(src.getWhenHandedOver());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationDispenseDosageInstructionComponent(t));
  tgt.setSubstitution(convertMedicationDispenseSubstitutionComponent(src.getSubstitution()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationDispense convertMedicationDispense(org.hl7.fhir.dstu3.model.MedicationDispense src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense tgt=new org.hl7.fhir.dstu2.model.MedicationDispense();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertMedicationDispenseStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setDispenser(convertReference(src.getDispenser()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthorizingPrescription())   tgt.addAuthorizingPrescription(convertReference(t));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setDaysSupply(convertSimpleQuantity(src.getDaysSupply()));
  tgt.setWhenPrepared(src.getWhenPrepared());
  tgt.setWhenHandedOver(src.getWhenHandedOver());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationDispenseDosageInstructionComponent(t));
  tgt.setSubstitution(convertMedicationDispenseSubstitutionComponent(src.getSubstitution()));
  return tgt;
}",0.9947384710615907
23607,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent convertConformanceRestOperationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(convertReference(src.getDefinition()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent convertConformanceRestOperationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestOperationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(convertReference(src.getDefinition()));
  return tgt;
}",0.9843893480257117
23608,"public org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent convertMedicationDispenseDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent convertMedicationDispenseDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9913132345426674
23609,"public org.hl7.fhir.dstu2.model.PaymentNotice convertPaymentNotice(org.hl7.fhir.dstu3.model.PaymentNotice src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.PaymentNotice tgt=new org.hl7.fhir.dstu2.model.PaymentNotice();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasTargetReference())   tgt.setTarget((org.hl7.fhir.dstu2.model.Reference)convertType(src.getTarget()));
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasResponseReference())   tgt.setResponse((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  tgt.setPaymentStatus(convertCoding(src.getPaymentStatus()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.PaymentNotice convertPaymentNotice(org.hl7.fhir.dstu3.model.PaymentNotice src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.PaymentNotice tgt=new org.hl7.fhir.dstu2.model.PaymentNotice();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasTargetReference())   tgt.setTarget((org.hl7.fhir.dstu2.model.Reference)convertType(src.getTarget()));
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasResponseReference())   tgt.setResponse((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  tgt.setPaymentStatus(convertCoding(src.getPaymentStatus()));
  return tgt;
}",0.992501102779003
23610,"public org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent convertDetailsComponent(org.hl7.fhir.dstu3.model.PaymentReconciliation.DetailsComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  if (src.hasResponseReference())   tgt.setResponce((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  if (src.hasSubmitterReference())   tgt.setSubmitter((org.hl7.fhir.dstu2.model.Reference)convertType(src.getSubmitter()));
  if (src.hasPayeeReference())   tgt.setPayee((org.hl7.fhir.dstu2.model.Reference)convertType(src.getPayee()));
  tgt.setDate(src.getDate());
  tgt.setAmount(convertMoney(src.getAmount()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent convertDetailsComponent(org.hl7.fhir.dstu3.model.PaymentReconciliation.DetailsComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation.DetailsComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  if (src.hasResponseReference())   tgt.setResponce((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  if (src.hasSubmitterReference())   tgt.setSubmitter((org.hl7.fhir.dstu2.model.Reference)convertType(src.getSubmitter()));
  if (src.hasPayeeReference())   tgt.setPayee((org.hl7.fhir.dstu2.model.Reference)convertType(src.getPayee()));
  tgt.setDate(src.getDate());
  tgt.setAmount(convertMoney(src.getAmount()));
  return tgt;
}",0.9915632754342432
23611,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent convertValueSetExpansionComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setTimestamp(src.getTimestamp());
  tgt.setTotal(src.getTotal());
  tgt.setOffset(src.getOffset());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent t : src.getParameter())   tgt.addParameter(convertValueSetExpansionParameterComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent convertValueSetExpansionComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setTimestamp(src.getTimestamp());
  tgt.setTotal(src.getTotal());
  tgt.setOffset(src.getOffset());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent t : src.getParameter())   tgt.addParameter(convertValueSetExpansionParameterComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}",0.9904655075715086
23612,"public org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent convertGroupCharacteristicComponent(org.hl7.fhir.dstu3.model.Group.GroupCharacteristicComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent tgt=new org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(convertType(src.getValue()));
  tgt.setExclude(src.getExclude());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent convertGroupCharacteristicComponent(org.hl7.fhir.dstu3.model.Group.GroupCharacteristicComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent tgt=new org.hl7.fhir.dstu2.model.Group.GroupCharacteristicComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setValue(convertType(src.getValue()));
  tgt.setExclude(src.getExclude());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9855810008481763
23613,"public org.hl7.fhir.dstu2.model.MessageHeader convertMessageHeader(org.hl7.fhir.dstu3.model.MessageHeader src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MessageHeader tgt=new org.hl7.fhir.dstu2.model.MessageHeader();
  copyDomainResource(src,tgt);
  tgt.setTimestamp(src.getTimestamp());
  tgt.setEvent(convertCoding(src.getEvent()));
  tgt.setResponse(convertMessageHeaderResponseComponent(src.getResponse()));
  tgt.setSource(convertMessageSourceComponent(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.MessageHeader.MessageDestinationComponent t : src.getDestination())   tgt.addDestination(convertMessageDestinationComponent(t));
  tgt.setEnterer(convertReference(src.getEnterer()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setReceiver(convertReference(src.getReceiver()));
  tgt.setResponsible(convertReference(src.getResponsible()));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getData())   tgt.addData(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MessageHeader convertMessageHeader(org.hl7.fhir.dstu3.model.MessageHeader src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader tgt=new org.hl7.fhir.dstu2.model.MessageHeader();
  copyDomainResource(src,tgt);
  tgt.setTimestamp(src.getTimestamp());
  tgt.setEvent(convertCoding(src.getEvent()));
  tgt.setResponse(convertMessageHeaderResponseComponent(src.getResponse()));
  tgt.setSource(convertMessageSourceComponent(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.MessageHeader.MessageDestinationComponent t : src.getDestination())   tgt.addDestination(convertMessageDestinationComponent(t));
  tgt.setEnterer(convertReference(src.getEnterer()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setReceiver(convertReference(src.getReceiver()));
  tgt.setResponsible(convertReference(src.getResponsible()));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getData())   tgt.addData(convertReference(t));
  return tgt;
}",0.9921767142199724
23614,"public org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent convertClinicalImpressionInvestigationsComponent(org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getItem())   tgt.addItem(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent convertClinicalImpressionInvestigationsComponent(org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getItem())   tgt.addItem(convertReference(t));
  return tgt;
}",0.9874167283493708
23615,"public org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent convertMessageHeaderResponseComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageHeaderResponseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setCode(convertResponseType(src.getCode()));
  tgt.setDetails(convertReference(src.getDetails()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent convertMessageHeaderResponseComponent(org.hl7.fhir.dstu3.model.MessageHeader.MessageHeaderResponseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent tgt=new org.hl7.fhir.dstu2.model.MessageHeader.MessageHeaderResponseComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setCode(convertResponseType(src.getCode()));
  tgt.setDetails(convertReference(src.getDetails()));
  return tgt;
}",0.9857022708158116
23616,"public org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent convertSpecimenCollectionComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenCollectionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent();
  copyElement(src,tgt);
  tgt.setCollector(convertReference(src.getCollector()));
  tgt.setCollected(convertType(src.getCollected()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent convertSpecimenCollectionComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenCollectionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent();
  copyElement(src,tgt);
  tgt.setCollector(convertReference(src.getCollector()));
  tgt.setCollected(convertType(src.getCollected()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  return tgt;
}",0.9879347054648688
23617,"public org.hl7.fhir.dstu2.model.ImagingStudy convertImagingStudy(org.hl7.fhir.dstu3.model.ImagingStudy src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy tgt=new org.hl7.fhir.dstu2.model.ImagingStudy();
  copyDomainResource(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setAccession(convertIdentifier(src.getAccession()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAvailability(convertInstanceAvailability(src.getAvailability()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getModalityList())   tgt.addModalityList(convertCoding(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setStarted(src.getStarted());
  tgt.setReferrer(convertReference(src.getReferrer()));
  tgt.setInterpreter(convertReference(src.getInterpreter()));
  tgt.setNumberOfSeries(src.getNumberOfSeries());
  tgt.setNumberOfInstances(src.getNumberOfInstances());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProcedure())   tgt.addProcedure(convertReference(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesComponent t : src.getSeries())   tgt.addSeries(convertImagingStudySeriesComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImagingStudy convertImagingStudy(org.hl7.fhir.dstu3.model.ImagingStudy src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy tgt=new org.hl7.fhir.dstu2.model.ImagingStudy();
  copyDomainResource(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setAccession(convertIdentifier(src.getAccession()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAvailability(convertInstanceAvailability(src.getAvailability()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getModalityList())   tgt.addModalityList(convertCoding(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setStarted(src.getStarted());
  tgt.setReferrer(convertReference(src.getReferrer()));
  tgt.setInterpreter(convertReference(src.getInterpreter()));
  tgt.setNumberOfSeries(src.getNumberOfSeries());
  tgt.setNumberOfInstances(src.getNumberOfInstances());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProcedure())   tgt.addProcedure(convertReference(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesComponent t : src.getSeries())   tgt.addSeries(convertImagingStudySeriesComponent(t));
  return tgt;
}",0.993518871521159
23618,"public org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent convertPatientCommunicationComponent(org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent tgt=new org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(convertCodeableConcept(src.getLanguage()));
  tgt.setPreferred(src.getPreferred());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent convertPatientCommunicationComponent(org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent tgt=new org.hl7.fhir.dstu2.model.Patient.PatientCommunicationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(convertCodeableConcept(src.getLanguage()));
  tgt.setPreferred(src.getPreferred());
  return tgt;
}",0.983669548511047
23619,"public org.hl7.fhir.dstu2.model.OperationOutcome convertOperationOutcome(org.hl7.fhir.dstu3.model.OperationOutcome src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationOutcome tgt=new org.hl7.fhir.dstu2.model.OperationOutcome();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent t : src.getIssue())   tgt.addIssue(convertOperationOutcomeIssueComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationOutcome convertOperationOutcome(org.hl7.fhir.dstu3.model.OperationOutcome src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationOutcome tgt=new org.hl7.fhir.dstu2.model.OperationOutcome();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent t : src.getIssue())   tgt.addIssue(convertOperationOutcomeIssueComponent(t));
  return tgt;
}",0.9825997952917092
23620,"public org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent convertNamingSystemUniqueIdComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent tgt=new org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent();
  copyElement(src,tgt);
  tgt.setType(convertNamingSystemIdentifierType(src.getType()));
  tgt.setValue(src.getValue());
  tgt.setPreferred(src.getPreferred());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent convertNamingSystemUniqueIdComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent tgt=new org.hl7.fhir.dstu2.model.NamingSystem.NamingSystemUniqueIdComponent();
  copyElement(src,tgt);
  tgt.setType(convertNamingSystemIdentifierType(src.getType()));
  tgt.setValue(src.getValue());
  tgt.setPreferred(src.getPreferred());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9863891112890312
23621,"public org.hl7.fhir.dstu2.model.Schedule convertSchedule(org.hl7.fhir.dstu3.model.Schedule src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Schedule tgt=new org.hl7.fhir.dstu2.model.Schedule();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.addType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setPlanningHorizon(convertPeriod(src.getPlanningHorizon()));
  tgt.setComment(src.getComment());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Schedule convertSchedule(org.hl7.fhir.dstu3.model.Schedule src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Schedule tgt=new org.hl7.fhir.dstu2.model.Schedule();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.addType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setPlanningHorizon(convertPeriod(src.getPlanningHorizon()));
  tgt.setComment(src.getComment());
  return tgt;
}",0.9873605947955392
23622,"public org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent convertConceptMapContactComponent(org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent convertConceptMapContactComponent(org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.ConceptMapContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9847259658580412
23623,"public org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent convertMedicationDispenseSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseSubstitutionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResponsibleParty())   tgt.addResponsibleParty(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent convertMedicationDispenseSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseSubstitutionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResponsibleParty())   tgt.addResponsibleParty(convertReference(t));
  return tgt;
}",0.9894344313238036
23624,"public org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent convertCarePlanActivityDetailComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityDetailComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent();
  copyElement(src,tgt);
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.addReasonCode(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.addReasonReference(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  tgt.setStatus(convertCarePlanActivityStatus(src.getStatus()));
  tgt.setStatusReason(convertCodeableConcept(src.getStatusReason()));
  tgt.setProhibited(src.getProhibited());
  tgt.setScheduled(convertType(src.getScheduled()));
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setProduct(convertType(src.getProduct()));
  tgt.setDailyAmount(convertSimpleQuantity(src.getDailyAmount()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setDescription(src.getDescription());
  return tgt;
}","public org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent convertCarePlanActivityDetailComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityDetailComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityDetailComponent();
  copyElement(src,tgt);
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.addReasonCode(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.addReasonReference(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  tgt.setStatus(convertCarePlanActivityStatus(src.getStatus()));
  tgt.setStatusReason(convertCodeableConcept(src.getStatusReason()));
  tgt.setProhibited(src.getProhibited());
  tgt.setScheduled(convertType(src.getScheduled()));
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setProduct(convertType(src.getProduct()));
  tgt.setDailyAmount(convertSimpleQuantity(src.getDailyAmount()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setDescription(src.getDescription());
  return tgt;
}",0.9943615257048092
23625,"public org.hl7.fhir.dstu2.model.Duration convertDuration(org.hl7.fhir.dstu3.model.Duration src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Duration tgt=new org.hl7.fhir.dstu2.model.Duration();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Duration convertDuration(org.hl7.fhir.dstu3.model.Duration src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Duration tgt=new org.hl7.fhir.dstu2.model.Duration();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9821615949632738
23626,"public org.hl7.fhir.dstu2.model.Basic convertBasic(org.hl7.fhir.dstu3.model.Basic src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Basic tgt=new org.hl7.fhir.dstu2.model.Basic();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCreated(src.getCreated());
  tgt.setAuthor(convertReference(src.getAuthor()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Basic convertBasic(org.hl7.fhir.dstu3.model.Basic src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Basic tgt=new org.hl7.fhir.dstu2.model.Basic();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCreated(src.getCreated());
  tgt.setAuthor(convertReference(src.getAuthor()));
  return tgt;
}",0.9854077253218884
23627,"public org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent convertOtherElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent();
  copyElement(src,tgt);
  tgt.setElement(src.getProperty());
  tgt.setCodeSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent convertOtherElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.OtherElementComponent();
  copyElement(src,tgt);
  tgt.setElement(src.getProperty());
  tgt.setCodeSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.98284561049445
23628,"public org.hl7.fhir.dstu2.model.ImmunizationRecommendation convertImmunizationRecommendation(org.hl7.fhir.dstu3.model.ImmunizationRecommendation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent t : src.getRecommendation())   tgt.addRecommendation(convertImmunizationRecommendationRecommendationComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImmunizationRecommendation convertImmunizationRecommendation(org.hl7.fhir.dstu3.model.ImmunizationRecommendation src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImmunizationRecommendation tgt=new org.hl7.fhir.dstu2.model.ImmunizationRecommendation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  for (  org.hl7.fhir.dstu3.model.ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent t : src.getRecommendation())   tgt.addRecommendation(convertImmunizationRecommendationRecommendationComponent(t));
  return tgt;
}",0.9889825016202204
23629,"public org.hl7.fhir.dstu2.model.NamingSystem convertNamingSystem(org.hl7.fhir.dstu3.model.NamingSystem src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NamingSystem tgt=new org.hl7.fhir.dstu2.model.NamingSystem();
  copyDomainResource(src,tgt);
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertNamingSystemType(src.getKind()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent t : src.getContact())   tgt.addContact(convertNamingSystemContactComponent(t));
  tgt.setResponsible(src.getResponsible());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setUsage(src.getUsage());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent t : src.getUniqueId())   tgt.addUniqueId(convertNamingSystemUniqueIdComponent(t));
  tgt.setReplacedBy(convertReference(src.getReplacedBy()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NamingSystem convertNamingSystem(org.hl7.fhir.dstu3.model.NamingSystem src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NamingSystem tgt=new org.hl7.fhir.dstu2.model.NamingSystem();
  copyDomainResource(src,tgt);
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertNamingSystemType(src.getKind()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent t : src.getContact())   tgt.addContact(convertNamingSystemContactComponent(t));
  tgt.setResponsible(src.getResponsible());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setUsage(src.getUsage());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent t : src.getUniqueId())   tgt.addUniqueId(convertNamingSystemUniqueIdComponent(t));
  tgt.setReplacedBy(convertReference(src.getReplacedBy()));
  return tgt;
}",0.9929431299294312
23630,"public org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent convertPractitionerPractitionerRoleComponent(org.hl7.fhir.dstu3.model.Practitioner.PractitionerRoleComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent tgt=new org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent();
  copyElement(src,tgt);
  tgt.setManagingOrganization(convertReference(src.getOrganization()));
  tgt.setRole(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialty())   tgt.addSpecialty(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getLocation())   tgt.addLocation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getHealthcareService())   tgt.addHealthcareService(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent convertPractitionerPractitionerRoleComponent(org.hl7.fhir.dstu3.model.Practitioner.PractitionerRoleComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent tgt=new org.hl7.fhir.dstu2.model.Practitioner.PractitionerPractitionerRoleComponent();
  copyElement(src,tgt);
  tgt.setManagingOrganization(convertReference(src.getOrganization()));
  tgt.setRole(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialty())   tgt.addSpecialty(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getLocation())   tgt.addLocation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getHealthcareService())   tgt.addHealthcareService(convertReference(t));
  return tgt;
}",0.9914529914529916
23631,"public org.hl7.fhir.dstu2.model.Subscription convertSubscription(org.hl7.fhir.dstu3.model.Subscription src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Subscription tgt=new org.hl7.fhir.dstu2.model.Subscription();
  copyDomainResource(src,tgt);
  tgt.setCriteria(src.getCriteria());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getContact())   tgt.addContact(convertContactPoint(t));
  tgt.setReason(src.getReason());
  tgt.setStatus(convertSubscriptionStatus(src.getStatus()));
  tgt.setError(src.getError());
  tgt.setChannel(convertSubscriptionChannelComponent(src.getChannel()));
  tgt.setEnd(src.getEnd());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Subscription convertSubscription(org.hl7.fhir.dstu3.model.Subscription src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Subscription tgt=new org.hl7.fhir.dstu2.model.Subscription();
  copyDomainResource(src,tgt);
  tgt.setCriteria(src.getCriteria());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getContact())   tgt.addContact(convertContactPoint(t));
  tgt.setReason(src.getReason());
  tgt.setStatus(convertSubscriptionStatus(src.getStatus()));
  tgt.setError(src.getError());
  tgt.setChannel(convertSubscriptionChannelComponent(src.getChannel()));
  tgt.setEnd(src.getEnd());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}",0.9890534449452671
23632,"public org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AllergyIntolerance)   return convertAllergyIntolerance((org.hl7.fhir.dstu3.model.AllergyIntolerance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Appointment)   return convertAppointment((org.hl7.fhir.dstu3.model.Appointment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.dstu3.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.dstu3.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Basic)   return convertBasic((org.hl7.fhir.dstu3.model.Basic)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Binary)   return convertBinary((org.hl7.fhir.dstu3.model.Binary)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BodySite)   return convertBodySite((org.hl7.fhir.dstu3.model.BodySite)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CarePlan)   return convertCarePlan((org.hl7.fhir.dstu3.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.dstu3.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Communication)   return convertCommunication((org.hl7.fhir.dstu3.model.Communication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.dstu3.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Composition)   return convertComposition((org.hl7.fhir.dstu3.model.Composition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Condition)   return convertCondition((org.hl7.fhir.dstu3.model.Condition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Contract)   return convertContract((org.hl7.fhir.dstu3.model.Contract)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coverage)   return convertCoverage((org.hl7.fhir.dstu3.model.Coverage)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.dstu3.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Device)   return convertDevice((org.hl7.fhir.dstu3.model.Device)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.dstu3.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.dstu3.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseRequest)   return convertDeviceUseRequest((org.hl7.fhir.dstu3.model.DeviceUseRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.dstu3.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticRequest)   return convertDiagnosticOrder((org.hl7.fhir.dstu3.model.DiagnosticRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.dstu3.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.dstu3.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.dstu3.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityRequest)   return convertEligibilityRequest((org.hl7.fhir.dstu3.model.EligibilityRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityResponse)   return convertEligibilityResponse((org.hl7.fhir.dstu3.model.EligibilityResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Encounter)   return convertEncounter((org.hl7.fhir.dstu3.model.Encounter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.dstu3.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.dstu3.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.dstu3.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.dstu3.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.dstu3.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Flag)   return convertFlag((org.hl7.fhir.dstu3.model.Flag)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Goal)   return convertGoal((org.hl7.fhir.dstu3.model.Goal)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Group)   return convertGroup((org.hl7.fhir.dstu3.model.Group)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.dstu3.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.dstu3.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Immunization)   return convertImmunization((org.hl7.fhir.dstu3.model.Immunization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.dstu3.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ListResource)   return convertList((org.hl7.fhir.dstu3.model.ListResource)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Location)   return convertLocation((org.hl7.fhir.dstu3.model.Location)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Media)   return convertMedia((org.hl7.fhir.dstu3.model.Media)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Medication)   return convertMedication((org.hl7.fhir.dstu3.model.Medication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationAdministration)   return convertMedicationAdministration((org.hl7.fhir.dstu3.model.MedicationAdministration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.dstu3.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationOrder)   return convertMedicationOrder((org.hl7.fhir.dstu3.model.MedicationOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.dstu3.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.dstu3.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NutritionRequest)   return convertNutritionOrder((org.hl7.fhir.dstu3.model.NutritionRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Observation)   return convertObservation((org.hl7.fhir.dstu3.model.Observation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Organization)   return convertOrganization((org.hl7.fhir.dstu3.model.Organization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Patient)   return convertPatient((org.hl7.fhir.dstu3.model.Patient)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentNotice)   return convertPaymentNotice((org.hl7.fhir.dstu3.model.PaymentNotice)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentReconciliation)   return convertPaymentReconciliation((org.hl7.fhir.dstu3.model.PaymentReconciliation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Person)   return convertPerson((org.hl7.fhir.dstu3.model.Person)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Practitioner)   return convertPractitioner((org.hl7.fhir.dstu3.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Procedure)   return convertProcedure((org.hl7.fhir.dstu3.model.Procedure)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.dstu3.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessRequest)   return convertProcessRequest((org.hl7.fhir.dstu3.model.ProcessRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessResponse)   return convertProcessResponse((org.hl7.fhir.dstu3.model.ProcessResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Provenance)   return convertProvenance((org.hl7.fhir.dstu3.model.Provenance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   return convertReferralRequest((org.hl7.fhir.dstu3.model.ReferralRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.dstu3.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.dstu3.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Schedule)   return convertSchedule((org.hl7.fhir.dstu3.model.Schedule)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Slot)   return convertSlot((org.hl7.fhir.dstu3.model.Slot)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Specimen)   return convertSpecimen((org.hl7.fhir.dstu3.model.Specimen)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Subscription)   return convertSubscription((org.hl7.fhir.dstu3.model.Subscription)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Substance)   return convertSubstance((org.hl7.fhir.dstu3.model.Substance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.dstu3.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.dstu3.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AllergyIntolerance)   return convertAllergyIntolerance((org.hl7.fhir.dstu3.model.AllergyIntolerance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Appointment)   return convertAppointment((org.hl7.fhir.dstu3.model.Appointment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.dstu3.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.dstu3.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Basic)   return convertBasic((org.hl7.fhir.dstu3.model.Basic)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Binary)   return convertBinary((org.hl7.fhir.dstu3.model.Binary)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BodySite)   return convertBodySite((org.hl7.fhir.dstu3.model.BodySite)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CarePlan)   return convertCarePlan((org.hl7.fhir.dstu3.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.dstu3.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Communication)   return convertCommunication((org.hl7.fhir.dstu3.model.Communication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.dstu3.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Composition)   return convertComposition((org.hl7.fhir.dstu3.model.Composition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Condition)   return convertCondition((org.hl7.fhir.dstu3.model.Condition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Contract)   return convertContract((org.hl7.fhir.dstu3.model.Contract)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coverage)   return convertCoverage((org.hl7.fhir.dstu3.model.Coverage)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.dstu3.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Device)   return convertDevice((org.hl7.fhir.dstu3.model.Device)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.dstu3.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.dstu3.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseRequest)   return convertDeviceUseRequest((org.hl7.fhir.dstu3.model.DeviceUseRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.dstu3.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticRequest)   return convertDiagnosticOrder((org.hl7.fhir.dstu3.model.DiagnosticRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.dstu3.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.dstu3.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.dstu3.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityRequest)   return convertEligibilityRequest((org.hl7.fhir.dstu3.model.EligibilityRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityResponse)   return convertEligibilityResponse((org.hl7.fhir.dstu3.model.EligibilityResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Encounter)   return convertEncounter((org.hl7.fhir.dstu3.model.Encounter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.dstu3.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.dstu3.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.dstu3.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.dstu3.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.dstu3.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Flag)   return convertFlag((org.hl7.fhir.dstu3.model.Flag)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Goal)   return convertGoal((org.hl7.fhir.dstu3.model.Goal)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Group)   return convertGroup((org.hl7.fhir.dstu3.model.Group)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.dstu3.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.dstu3.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Immunization)   return convertImmunization((org.hl7.fhir.dstu3.model.Immunization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.dstu3.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ListResource)   return convertList((org.hl7.fhir.dstu3.model.ListResource)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Location)   return convertLocation((org.hl7.fhir.dstu3.model.Location)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Media)   return convertMedia((org.hl7.fhir.dstu3.model.Media)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Medication)   return convertMedication((org.hl7.fhir.dstu3.model.Medication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationAdministration)   return convertMedicationAdministration((org.hl7.fhir.dstu3.model.MedicationAdministration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.dstu3.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationOrder)   return convertMedicationOrder((org.hl7.fhir.dstu3.model.MedicationOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.dstu3.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.dstu3.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NutritionRequest)   return convertNutritionOrder((org.hl7.fhir.dstu3.model.NutritionRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Observation)   return convertObservation((org.hl7.fhir.dstu3.model.Observation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Organization)   return convertOrganization((org.hl7.fhir.dstu3.model.Organization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Patient)   return convertPatient((org.hl7.fhir.dstu3.model.Patient)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentNotice)   return convertPaymentNotice((org.hl7.fhir.dstu3.model.PaymentNotice)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentReconciliation)   return convertPaymentReconciliation((org.hl7.fhir.dstu3.model.PaymentReconciliation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Person)   return convertPerson((org.hl7.fhir.dstu3.model.Person)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Practitioner)   return convertPractitioner((org.hl7.fhir.dstu3.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Procedure)   return convertProcedure((org.hl7.fhir.dstu3.model.Procedure)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.dstu3.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessRequest)   return convertProcessRequest((org.hl7.fhir.dstu3.model.ProcessRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessResponse)   return convertProcessResponse((org.hl7.fhir.dstu3.model.ProcessResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Provenance)   return convertProvenance((org.hl7.fhir.dstu3.model.Provenance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   return convertReferralRequest((org.hl7.fhir.dstu3.model.ReferralRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.dstu3.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.dstu3.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Schedule)   return convertSchedule((org.hl7.fhir.dstu3.model.Schedule)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Slot)   return convertSlot((org.hl7.fhir.dstu3.model.Slot)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Specimen)   return convertSpecimen((org.hl7.fhir.dstu3.model.Specimen)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Subscription)   return convertSubscription((org.hl7.fhir.dstu3.model.Subscription)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Substance)   return convertSubstance((org.hl7.fhir.dstu3.model.Substance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.dstu3.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.dstu3.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9992978978234832
23633,"public org.hl7.fhir.dstu2.model.DetectedIssue convertDetectedIssue(org.hl7.fhir.dstu3.model.DetectedIssue src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DetectedIssue tgt=new org.hl7.fhir.dstu2.model.DetectedIssue();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSeverity(convertDetectedIssueSeverity(src.getSeverity()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImplicated())   tgt.addImplicated(convertReference(t));
  tgt.setDetail(src.getDetail());
  tgt.setDate(src.getDate());
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setReference(src.getReference());
  for (  org.hl7.fhir.dstu3.model.DetectedIssue.DetectedIssueMitigationComponent t : src.getMitigation())   tgt.addMitigation(convertDetectedIssueMitigationComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DetectedIssue convertDetectedIssue(org.hl7.fhir.dstu3.model.DetectedIssue src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DetectedIssue tgt=new org.hl7.fhir.dstu2.model.DetectedIssue();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSeverity(convertDetectedIssueSeverity(src.getSeverity()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImplicated())   tgt.addImplicated(convertReference(t));
  tgt.setDetail(src.getDetail());
  tgt.setDate(src.getDate());
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setReference(src.getReference());
  for (  org.hl7.fhir.dstu3.model.DetectedIssue.DetectedIssueMitigationComponent t : src.getMitigation())   tgt.addMitigation(convertDetectedIssueMitigationComponent(t));
  return tgt;
}",0.9914701455092824
23634,"public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent convertElementDefinitionBaseComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBaseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent convertElementDefinitionBaseComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBaseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBaseComponent();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  return tgt;
}",0.9845313921747044
23635,"public org.hl7.fhir.dstu2.model.Timing convertTiming(org.hl7.fhir.dstu3.model.Timing src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Timing tgt=new org.hl7.fhir.dstu2.model.Timing();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.DateTimeType t : src.getEvent())   tgt.addEvent(t.getValue());
  tgt.setRepeat(convertTimingRepeatComponent(src.getRepeat()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Timing convertTiming(org.hl7.fhir.dstu3.model.Timing src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Timing tgt=new org.hl7.fhir.dstu2.model.Timing();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.DateTimeType t : src.getEvent())   tgt.addEvent(t.getValue());
  tgt.setRepeat(convertTimingRepeatComponent(src.getRepeat()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}",0.9825282631038028
23636,"public org.hl7.fhir.dstu2.model.Practitioner convertPractitioner(org.hl7.fhir.dstu3.model.Practitioner src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Practitioner tgt=new org.hl7.fhir.dstu2.model.Practitioner();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.setName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  for (  org.hl7.fhir.dstu3.model.Practitioner.PractitionerRoleComponent t : src.getRole())   tgt.addPractitionerRole(convertPractitionerPractitionerRoleComponent(t));
  for (  org.hl7.fhir.dstu3.model.Practitioner.PractitionerQualificationComponent t : src.getQualification())   tgt.addQualification(convertPractitionerQualificationComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCommunication())   tgt.addCommunication(convertCodeableConcept(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Practitioner convertPractitioner(org.hl7.fhir.dstu3.model.Practitioner src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Practitioner tgt=new org.hl7.fhir.dstu2.model.Practitioner();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setActive(src.getActive());
  for (  org.hl7.fhir.dstu3.model.HumanName t : src.getName())   tgt.setName(convertHumanName(t));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  for (  org.hl7.fhir.dstu3.model.Practitioner.PractitionerRoleComponent t : src.getRole())   tgt.addPractitionerRole(convertPractitionerPractitionerRoleComponent(t));
  for (  org.hl7.fhir.dstu3.model.Practitioner.PractitionerQualificationComponent t : src.getQualification())   tgt.addQualification(convertPractitionerQualificationComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCommunication())   tgt.addCommunication(convertCodeableConcept(t));
  return tgt;
}",0.9941359089341152
23637,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent convertImplementationGuideDependencyComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent();
  copyElement(src,tgt);
  tgt.setType(convertGuideDependencyType(src.getType()));
  tgt.setUri(src.getUri());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent convertImplementationGuideDependencyComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuideDependencyComponent();
  copyElement(src,tgt);
  tgt.setType(convertGuideDependencyType(src.getType()));
  tgt.setUri(src.getUri());
  return tgt;
}",0.985774058577406
23638,"public org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent convertSpecimenTreatmentComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenTreatmentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setProcedure(convertCodeableConcept(src.getProcedure()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAdditive())   tgt.addAdditive(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent convertSpecimenTreatmentComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenTreatmentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenTreatmentComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setProcedure(convertCodeableConcept(src.getProcedure()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAdditive())   tgt.addAdditive(convertReference(t));
  return tgt;
}",0.9863453815261044
23639,"public org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null)   return null;
  if (advisor.ignoreEntry(src))   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  org.hl7.fhir.dstu2.model.Resource res=advisor.convert(src.getResource());
  if (res == null)   res=convertResource(src.getResource());
  tgt.setResource(res);
  tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (advisor.ignoreEntry(src))   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  org.hl7.fhir.dstu2.model.Resource res=advisor.convert(src.getResource());
  if (res == null)   res=convertResource(src.getResource());
  tgt.setResource(res);
  tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}",0.9911041339612768
23640,"public org.hl7.fhir.dstu2.model.Money convertMoney(org.hl7.fhir.dstu3.model.Money src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Money tgt=new org.hl7.fhir.dstu2.model.Money();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Money convertMoney(org.hl7.fhir.dstu3.model.Money src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Money tgt=new org.hl7.fhir.dstu2.model.Money();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9815817984832068
23641,"public org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent convertProvenanceEntityComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceEntityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent();
  copyElement(src,tgt);
  tgt.setRole(convertProvenanceEntityRole(src.getRole()));
  tgt.setType(convertCoding(src.getType()));
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent convertProvenanceEntityComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceEntityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceEntityComponent();
  copyElement(src,tgt);
  tgt.setRole(convertProvenanceEntityRole(src.getRole()));
  tgt.setType(convertCoding(src.getType()));
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}",0.9856054191363252
23642,"public org.hl7.fhir.dstu2.model.List_.ListEntryComponent convertListEntry(org.hl7.fhir.dstu3.model.ListResource.ListEntryComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.List_.ListEntryComponent tgt=new org.hl7.fhir.dstu2.model.List_.ListEntryComponent();
  copyBackboneElement(src,tgt);
  tgt.setFlag(convertCodeableConcept(src.getFlag()));
  tgt.setDeleted(src.getDeleted());
  tgt.setDate(src.getDate());
  tgt.setItem(convertReference(src.getItem()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.List_.ListEntryComponent convertListEntry(org.hl7.fhir.dstu3.model.ListResource.ListEntryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.List_.ListEntryComponent tgt=new org.hl7.fhir.dstu2.model.List_.ListEntryComponent();
  copyBackboneElement(src,tgt);
  tgt.setFlag(convertCodeableConcept(src.getFlag()));
  tgt.setDeleted(src.getDeleted());
  tgt.setDate(src.getDate());
  tgt.setItem(convertReference(src.getItem()));
  return tgt;
}",0.983947119924457
23643,"public org.hl7.fhir.dstu2.model.ImplementationGuide convertImplementationGuide(org.hl7.fhir.dstu3.model.ImplementationGuide src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent t : src.getContact())   tgt.addContact(convertImplementationGuideContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent t : src.getDependency())   tgt.addDependency(convertImplementationGuideDependencyComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent t : src.getPackage())   tgt.addPackage(convertImplementationGuidePackageComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent t : src.getGlobal())   tgt.addGlobal(convertImplementationGuideGlobalComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getBinary())   tgt.addBinary(t.getValue());
  tgt.setPage(convertImplementationGuidePageComponent(src.getPage()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide convertImplementationGuide(org.hl7.fhir.dstu3.model.ImplementationGuide src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent t : src.getContact())   tgt.addContact(convertImplementationGuideContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent t : src.getDependency())   tgt.addDependency(convertImplementationGuideDependencyComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent t : src.getPackage())   tgt.addPackage(convertImplementationGuidePackageComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent t : src.getGlobal())   tgt.addGlobal(convertImplementationGuideGlobalComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getBinary())   tgt.addBinary(t.getValue());
  tgt.setPage(convertImplementationGuidePageComponent(src.getPage()));
  return tgt;
}",0.9951525520387796
23644,"public org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent convertSubscriptionChannelComponent(org.hl7.fhir.dstu3.model.Subscription.SubscriptionChannelComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent tgt=new org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent();
  copyElement(src,tgt);
  tgt.setType(convertSubscriptionChannelType(src.getType()));
  tgt.setEndpoint(src.getEndpoint());
  tgt.setPayload(src.getPayload());
  tgt.setHeader(src.getHeader());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent convertSubscriptionChannelComponent(org.hl7.fhir.dstu3.model.Subscription.SubscriptionChannelComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent tgt=new org.hl7.fhir.dstu2.model.Subscription.SubscriptionChannelComponent();
  copyElement(src,tgt);
  tgt.setType(convertSubscriptionChannelType(src.getType()));
  tgt.setEndpoint(src.getEndpoint());
  tgt.setPayload(src.getPayload());
  tgt.setHeader(src.getHeader());
  return tgt;
}",0.9859154929577464
23645,"public org.hl7.fhir.dstu2.model.Substance convertSubstance(org.hl7.fhir.dstu3.model.Substance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Substance tgt=new org.hl7.fhir.dstu2.model.Substance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Substance.SubstanceInstanceComponent t : src.getInstance())   tgt.addInstance(convertSubstanceInstanceComponent(t));
  for (  org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent t : src.getIngredient())   tgt.addIngredient(convertSubstanceIngredientComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Substance convertSubstance(org.hl7.fhir.dstu3.model.Substance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Substance tgt=new org.hl7.fhir.dstu2.model.Substance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Substance.SubstanceInstanceComponent t : src.getInstance())   tgt.addInstance(convertSubstanceInstanceComponent(t));
  for (  org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent t : src.getIngredient())   tgt.addIngredient(convertSubstanceIngredientComponent(t));
  return tgt;
}",0.9908944831280128
23646,"public org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent convertTypeRefComponent(org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  if (src.hasProfile())   tgt.addProfile(src.getProfile());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.AggregationMode> t : src.getAggregation())   tgt.addAggregation(convertAggregationMode(t.getValue()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent convertTypeRefComponent(org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  if (src.hasProfile())   tgt.addProfile(src.getProfile());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.AggregationMode> t : src.getAggregation())   tgt.addAggregation(convertAggregationMode(t.getValue()));
  return tgt;
}",0.9874167283493708
23647,"public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent convertElementDefinitionConstraintComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent();
  copyElement(src,tgt);
  tgt.setKey(src.getKey());
  tgt.setRequirements(src.getRequirements());
  tgt.setSeverity(convertConstraintSeverity(src.getSeverity()));
  tgt.setHuman(src.getHuman());
  if (src.hasExpression())   ToolingExtensions.addStringExtension(tgt,ToolingExtensions.EXT_EXPRESSION,src.getExpression());
  tgt.setXpath(src.getXpath());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent convertElementDefinitionConstraintComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionConstraintComponent();
  copyElement(src,tgt);
  tgt.setKey(src.getKey());
  tgt.setRequirements(src.getRequirements());
  tgt.setSeverity(convertConstraintSeverity(src.getSeverity()));
  tgt.setHuman(src.getHuman());
  if (src.hasExpression())   ToolingExtensions.addStringExtension(tgt,ToolingExtensions.EXT_EXPRESSION,src.getExpression());
  tgt.setXpath(src.getXpath());
  return tgt;
}",0.98965307364577
23648,"public org.hl7.fhir.dstu2.model.DeviceUseRequest convertDeviceUseRequest(org.hl7.fhir.dstu3.model.DeviceUseRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceUseRequest tgt=new org.hl7.fhir.dstu2.model.DeviceUseRequest();
  copyDomainResource(src,tgt);
  tgt.setStatus(convertDeviceUseRequestStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getContext()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.addIndication(convertCodeableConcept(t));
  for (  Annotation t : src.getNote())   tgt.addNotes(t.getText());
  tgt.setOrderedOn(src.getAuthored());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setTiming(convertType(src.getOccurrence()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceUseRequest convertDeviceUseRequest(org.hl7.fhir.dstu3.model.DeviceUseRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceUseRequest tgt=new org.hl7.fhir.dstu2.model.DeviceUseRequest();
  copyDomainResource(src,tgt);
  tgt.setStatus(convertDeviceUseRequestStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getContext()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.addIndication(convertCodeableConcept(t));
  for (  Annotation t : src.getNote())   tgt.addNotes(t.getText());
  tgt.setOrderedOn(src.getAuthored());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setTiming(convertType(src.getOccurrence()));
  return tgt;
}",0.9905292479108636
23649,"public org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent convertMedicationProductComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent();
  copyElement(src,tgt);
  tgt.setForm(convertCodeableConcept(src.getForm()));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationProductIngredientComponent t : src.getIngredient())   tgt.addIngredient(convertMedicationProductIngredientComponent(t));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationProductBatchComponent t : src.getBatch())   tgt.addBatch(convertMedicationProductBatchComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent convertMedicationProductComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductComponent();
  copyElement(src,tgt);
  tgt.setForm(convertCodeableConcept(src.getForm()));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationProductIngredientComponent t : src.getIngredient())   tgt.addIngredient(convertMedicationProductIngredientComponent(t));
  for (  org.hl7.fhir.dstu3.model.Medication.MedicationProductBatchComponent t : src.getBatch())   tgt.addBatch(convertMedicationProductBatchComponent(t));
  return tgt;
}",0.9893948845913912
23650,"private org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus convertParticipantStatus(org.hl7.fhir.dstu3.model.AppointmentResponse.ParticipantStatus src){
switch (src) {
case ACCEPTED:
    return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.ACCEPTED;
case DECLINED:
  return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.DECLINED;
case TENTATIVE:
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.TENTATIVE;
case NEEDSACTION:
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.NEEDSACTION;
default :
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.NULL;
}
}","private org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus convertParticipantStatus(org.hl7.fhir.dstu3.model.AppointmentResponse.ParticipantStatus src){
  if (src == null)   return null;
switch (src) {
case ACCEPTED:
    return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.ACCEPTED;
case DECLINED:
  return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.DECLINED;
case TENTATIVE:
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.TENTATIVE;
case NEEDSACTION:
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.NEEDSACTION;
default :
return org.hl7.fhir.dstu2.model.AppointmentResponse.ParticipantStatus.NULL;
}
}",0.975
23651,"public org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent convertTermValuedItemComponent(org.hl7.fhir.dstu3.model.Contract.TermValuedItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertType(src.getEntity()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setEffectiveTime(src.getEffectiveTime());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setUnitPrice(convertMoney(src.getUnitPrice()));
  tgt.setFactor(src.getFactor());
  tgt.setPoints(src.getPoints());
  tgt.setNet(convertMoney(src.getNet()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent convertTermValuedItemComponent(org.hl7.fhir.dstu3.model.Contract.TermValuedItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermValuedItemComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertType(src.getEntity()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setEffectiveTime(src.getEffectiveTime());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setUnitPrice(convertMoney(src.getUnitPrice()));
  tgt.setFactor(src.getFactor());
  tgt.setPoints(src.getPoints());
  tgt.setNet(convertMoney(src.getNet()));
  return tgt;
}",0.989010989010989
23652,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent convertValueSetContactComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent convertValueSetContactComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9842154131847726
23653,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent convertNutritionOrderEnteralFormulaComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent();
  copyElement(src,tgt);
  tgt.setBaseFormulaType(convertCodeableConcept(src.getBaseFormulaType()));
  tgt.setBaseFormulaProductName(src.getBaseFormulaProductName());
  tgt.setAdditiveType(convertCodeableConcept(src.getAdditiveType()));
  tgt.setAdditiveProductName(src.getAdditiveProductName());
  tgt.setCaloricDensity(convertSimpleQuantity(src.getCaloricDensity()));
  tgt.setRouteofAdministration(convertCodeableConcept(src.getRouteofAdministration()));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaAdministrationComponent t : src.getAdministration())   tgt.addAdministration(convertNutritionOrderEnteralFormulaAdministrationComponent(t));
  tgt.setMaxVolumeToDeliver(convertSimpleQuantity(src.getMaxVolumeToDeliver()));
  tgt.setAdministrationInstruction(src.getAdministrationInstruction());
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent convertNutritionOrderEnteralFormulaComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderEnteralFormulaComponent();
  copyElement(src,tgt);
  tgt.setBaseFormulaType(convertCodeableConcept(src.getBaseFormulaType()));
  tgt.setBaseFormulaProductName(src.getBaseFormulaProductName());
  tgt.setAdditiveType(convertCodeableConcept(src.getAdditiveType()));
  tgt.setAdditiveProductName(src.getAdditiveProductName());
  tgt.setCaloricDensity(convertSimpleQuantity(src.getCaloricDensity()));
  tgt.setRouteofAdministration(convertCodeableConcept(src.getRouteofAdministration()));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestEnteralFormulaAdministrationComponent t : src.getAdministration())   tgt.addAdministration(convertNutritionOrderEnteralFormulaAdministrationComponent(t));
  tgt.setMaxVolumeToDeliver(convertSimpleQuantity(src.getMaxVolumeToDeliver()));
  tgt.setAdministrationInstruction(src.getAdministrationInstruction());
  return tgt;
}",0.993453985367732
23654,"public org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent convertMedicationProductBatchComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductBatchComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent();
  copyElement(src,tgt);
  tgt.setLotNumber(src.getLotNumber());
  tgt.setExpirationDate(src.getExpirationDate());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent convertMedicationProductBatchComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductBatchComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductBatchComponent();
  copyElement(src,tgt);
  tgt.setLotNumber(src.getLotNumber());
  tgt.setExpirationDate(src.getExpirationDate());
  return tgt;
}",0.9839773798303488
23655,"public org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent convertQuestionnaireQuestionComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent tgt=new org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setText(src.getText());
  tgt.setType(convertQuestionnaireItemType(src.getType()));
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  tgt.setOptions(convertReference(src.getOptions()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent t : src.getOption())   if (t.hasValueCoding())   try {
    tgt.addOption(convertCoding(t.getValueCoding()));
  }
 catch (  org.hl7.fhir.dstu3.exceptions.FHIRException e) {
    throw new FHIRException(e);
  }
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addGroup(convertQuestionnaireGroupComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent convertQuestionnaireQuestionComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent tgt=new org.hl7.fhir.dstu2.model.Questionnaire.QuestionComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setText(src.getText());
  tgt.setType(convertQuestionnaireItemType(src.getType()));
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  tgt.setOptions(convertReference(src.getOptions()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent t : src.getOption())   if (t.hasValueCoding())   try {
    tgt.addOption(convertCoding(t.getValueCoding()));
  }
 catch (  org.hl7.fhir.dstu3.exceptions.FHIRException e) {
    throw new FHIRException(e);
  }
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addGroup(convertQuestionnaireGroupComponent(t));
  return tgt;
}",0.9928780896522832
23656,"public org.hl7.fhir.dstu2.model.Signature convertSignature(org.hl7.fhir.dstu3.model.Signature src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Signature tgt=new org.hl7.fhir.dstu2.model.Signature();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  tgt.setWhen(src.getWhen());
  tgt.setWho(convertType(src.getWho()));
  tgt.setContentType(src.getContentType());
  tgt.setBlob(src.getBlob());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Signature convertSignature(org.hl7.fhir.dstu3.model.Signature src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Signature tgt=new org.hl7.fhir.dstu2.model.Signature();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  tgt.setWhen(src.getWhen());
  tgt.setWho(convertType(src.getWho()));
  tgt.setContentType(src.getContentType());
  tgt.setBlob(src.getBlob());
  return tgt;
}",0.9837940896091516
23657,"public org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent convertMedicationAdministrationDosageComponent(org.hl7.fhir.dstu3.model.MedicationAdministration.MedicationAdministrationDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent convertMedicationAdministrationDosageComponent(org.hl7.fhir.dstu3.model.MedicationAdministration.MedicationAdministrationDosageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}",0.9889106327462492
23658,"public org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent convertTimingRepeatComponent(org.hl7.fhir.dstu3.model.Timing.TimingRepeatComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent tgt=new org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent();
  copyElement(src,tgt);
  tgt.setBounds(convertType(src.getBounds()));
  tgt.setCount(src.getCount());
  tgt.setDuration(src.getDuration());
  tgt.setDurationMax(src.getDurationMax());
  tgt.setDurationUnits(convertUnitsOfTime(src.getDurationUnit()));
  tgt.setFrequency(src.getFrequency());
  tgt.setFrequencyMax(src.getFrequencyMax());
  tgt.setPeriod(src.getPeriod());
  tgt.setPeriodMax(src.getPeriodMax());
  tgt.setPeriodUnits(convertUnitsOfTime(src.getPeriodUnit()));
  tgt.setWhen(convertEventTiming(src.getWhen()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent convertTimingRepeatComponent(org.hl7.fhir.dstu3.model.Timing.TimingRepeatComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent tgt=new org.hl7.fhir.dstu2.model.Timing.TimingRepeatComponent();
  copyElement(src,tgt);
  tgt.setBounds(convertType(src.getBounds()));
  tgt.setCount(src.getCount());
  tgt.setDuration(src.getDuration());
  tgt.setDurationMax(src.getDurationMax());
  tgt.setDurationUnits(convertUnitsOfTime(src.getDurationUnit()));
  tgt.setFrequency(src.getFrequency());
  tgt.setFrequencyMax(src.getFrequencyMax());
  tgt.setPeriod(src.getPeriod());
  tgt.setPeriodMax(src.getPeriodMax());
  tgt.setPeriodUnits(convertUnitsOfTime(src.getPeriodUnit()));
  tgt.setWhen(convertEventTiming(src.getWhen()));
  return tgt;
}",0.9902912621359224
23659,"public org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent convertSourceElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent();
  copyElement(src,tgt);
  tgt.setCodeSystem(g.getSource());
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent t : src.getTarget())   tgt.addTarget(convertTargetElementComponent(t,g));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent convertSourceElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent tgt=new org.hl7.fhir.dstu2.model.ConceptMap.SourceElementComponent();
  copyElement(src,tgt);
  tgt.setCodeSystem(g.getSource());
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent t : src.getTarget())   tgt.addTarget(convertTargetElementComponent(t,g));
  return tgt;
}",0.9872468117029256
23660,"public org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent convertEncounterHospitalizationComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterHospitalizationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent();
  copyElement(src,tgt);
  tgt.setPreAdmissionIdentifier(convertIdentifier(src.getPreAdmissionIdentifier()));
  tgt.setOrigin(convertReference(src.getOrigin()));
  tgt.setAdmitSource(convertCodeableConcept(src.getAdmitSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAdmittingDiagnosis())   tgt.addAdmittingDiagnosis(convertReference(t));
  tgt.setReAdmission(convertCodeableConcept(src.getReAdmission()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getDietPreference())   tgt.addDietPreference(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialCourtesy())   tgt.addSpecialCourtesy(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialArrangement())   tgt.addSpecialArrangement(convertCodeableConcept(t));
  tgt.setDestination(convertReference(src.getDestination()));
  tgt.setDischargeDisposition(convertCodeableConcept(src.getDischargeDisposition()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDischargeDiagnosis())   tgt.addDischargeDiagnosis(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent convertEncounterHospitalizationComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterHospitalizationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterHospitalizationComponent();
  copyElement(src,tgt);
  tgt.setPreAdmissionIdentifier(convertIdentifier(src.getPreAdmissionIdentifier()));
  tgt.setOrigin(convertReference(src.getOrigin()));
  tgt.setAdmitSource(convertCodeableConcept(src.getAdmitSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAdmittingDiagnosis())   tgt.addAdmittingDiagnosis(convertReference(t));
  tgt.setReAdmission(convertCodeableConcept(src.getReAdmission()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getDietPreference())   tgt.addDietPreference(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialCourtesy())   tgt.addSpecialCourtesy(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialArrangement())   tgt.addSpecialArrangement(convertCodeableConcept(t));
  tgt.setDestination(convertReference(src.getDestination()));
  tgt.setDischargeDisposition(convertCodeableConcept(src.getDischargeDisposition()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDischargeDiagnosis())   tgt.addDischargeDiagnosis(convertReference(t));
  return tgt;
}",0.994424401443096
23661,"public org.hl7.fhir.dstu2.model.HumanName convertHumanName(org.hl7.fhir.dstu3.model.HumanName src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.HumanName tgt=new org.hl7.fhir.dstu2.model.HumanName();
  copyElement(src,tgt);
  tgt.setUse(convertNameUse(src.getUse()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getFamily())   tgt.addFamily(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getGiven())   tgt.addGiven(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPrefix())   tgt.addPrefix(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSuffix())   tgt.addSuffix(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.HumanName convertHumanName(org.hl7.fhir.dstu3.model.HumanName src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.HumanName tgt=new org.hl7.fhir.dstu2.model.HumanName();
  copyElement(src,tgt);
  tgt.setUse(convertNameUse(src.getUse()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getFamily())   tgt.addFamily(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getGiven())   tgt.addGiven(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPrefix())   tgt.addPrefix(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSuffix())   tgt.addSuffix(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9893148962916404
23662,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent convertConceptReferenceDesignationComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent convertConceptReferenceDesignationComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.985178727114211
23663,"public org.hl7.fhir.dstu2.model.Encounter.EncounterClass convertEncounterClass(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null)   return null;
  if (src.getSystem().equals(""String_Node_Str"")) {
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.INPATIENT;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.AMBULATORY;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.EMERGENCY;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.HOME;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.FIELD;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.DAYTIME;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.VIRTUAL;
  }
  return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.NULL;
}","public org.hl7.fhir.dstu2.model.Encounter.EncounterClass convertEncounterClass(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src.getSystem().equals(""String_Node_Str"")) {
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.INPATIENT;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.AMBULATORY;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.EMERGENCY;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.HOME;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.FIELD;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.DAYTIME;
    if (src.getCode().equals(""String_Node_Str""))     return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.VIRTUAL;
  }
  return org.hl7.fhir.dstu2.model.Encounter.EncounterClass.NULL;
}",0.9925274725274724
23664,"public org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent convertParametersParameterComponent(org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent tgt=new org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  tgt.setResource(convertResource(src.getResource()));
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getPart())   tgt.addPart(convertParametersParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent convertParametersParameterComponent(org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent tgt=new org.hl7.fhir.dstu2.model.Parameters.ParametersParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  tgt.setResource(convertResource(src.getResource()));
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getPart())   tgt.addPart(convertParametersParameterComponent(t));
  return tgt;
}",0.9879175550817342
23665,"public org.hl7.fhir.dstu2.model.DeviceComponent convertDeviceComponent(org.hl7.fhir.dstu3.model.DeviceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceComponent tgt=new org.hl7.fhir.dstu2.model.DeviceComponent();
  copyDomainResource(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setLastSystemChange(src.getLastSystemChange());
  tgt.setSource(convertReference(src.getSource()));
  tgt.setParent(convertReference(src.getParent()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getOperationalStatus())   tgt.addOperationalStatus(convertCodeableConcept(t));
  tgt.setParameterGroup(convertCodeableConcept(src.getParameterGroup()));
  tgt.setMeasurementPrinciple(convertMeasmntPrinciple(src.getMeasurementPrinciple()));
  for (  org.hl7.fhir.dstu3.model.DeviceComponent.DeviceComponentProductionSpecificationComponent t : src.getProductionSpecification())   tgt.addProductionSpecification(convertDeviceComponentProductionSpecificationComponent(t));
  tgt.setLanguageCode(convertCodeableConcept(src.getLanguageCode()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceComponent convertDeviceComponent(org.hl7.fhir.dstu3.model.DeviceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceComponent tgt=new org.hl7.fhir.dstu2.model.DeviceComponent();
  copyDomainResource(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setLastSystemChange(src.getLastSystemChange());
  tgt.setSource(convertReference(src.getSource()));
  tgt.setParent(convertReference(src.getParent()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getOperationalStatus())   tgt.addOperationalStatus(convertCodeableConcept(t));
  tgt.setParameterGroup(convertCodeableConcept(src.getParameterGroup()));
  tgt.setMeasurementPrinciple(convertMeasmntPrinciple(src.getMeasurementPrinciple()));
  for (  org.hl7.fhir.dstu3.model.DeviceComponent.DeviceComponentProductionSpecificationComponent t : src.getProductionSpecification())   tgt.addProductionSpecification(convertDeviceComponentProductionSpecificationComponent(t));
  tgt.setLanguageCode(convertCodeableConcept(src.getLanguageCode()));
  return tgt;
}",0.9928780896522832
23666,"public org.hl7.fhir.dstu2.model.RelatedPerson convertRelatedPerson(org.hl7.fhir.dstu3.model.RelatedPerson src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.RelatedPerson tgt=new org.hl7.fhir.dstu2.model.RelatedPerson();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setRelationship(convertCodeableConcept(src.getRelationship()));
  if (!src.getName().isEmpty())   tgt.setName(convertHumanName(src.getName().get(0)));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.RelatedPerson convertRelatedPerson(org.hl7.fhir.dstu3.model.RelatedPerson src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.RelatedPerson tgt=new org.hl7.fhir.dstu2.model.RelatedPerson();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setRelationship(convertCodeableConcept(src.getRelationship()));
  if (!src.getName().isEmpty())   tgt.setName(convertHumanName(src.getName().get(0)));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setGender(convertAdministrativeGender(src.getGender()));
  tgt.setBirthDate(src.getBirthDate());
  for (  org.hl7.fhir.dstu3.model.Address t : src.getAddress())   tgt.addAddress(convertAddress(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPhoto())   tgt.addPhoto(convertAttachment(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9923042100497964
23667,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent convertConformanceImplementationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceImplementationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent convertConformanceImplementationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceImplementationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceImplementationComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.9840075258701788
23668,"public org.hl7.fhir.dstu2.model.Contract.ActorComponent convertAgentComponent(org.hl7.fhir.dstu3.model.Contract.AgentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.ActorComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ActorComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getActor()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.ActorComponent convertAgentComponent(org.hl7.fhir.dstu3.model.Contract.AgentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.ActorComponent tgt=new org.hl7.fhir.dstu2.model.Contract.ActorComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getActor()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  return tgt;
}",0.9833169774288518
23669,"public org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent convertOperationOutcomeIssueComponent(org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent tgt=new org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent();
  copyElement(src,tgt);
  tgt.setSeverity(convertIssueSeverity(src.getSeverity()));
  tgt.setCode(convertIssueType(src.getCode()));
  tgt.setDetails(convertCodeableConcept(src.getDetails()));
  tgt.setDiagnostics(src.getDiagnostics());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLocation())   tgt.addLocation(t.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent convertOperationOutcomeIssueComponent(org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent tgt=new org.hl7.fhir.dstu2.model.OperationOutcome.OperationOutcomeIssueComponent();
  copyElement(src,tgt);
  tgt.setSeverity(convertIssueSeverity(src.getSeverity()));
  tgt.setCode(convertIssueType(src.getCode()));
  tgt.setDetails(convertCodeableConcept(src.getDetails()));
  tgt.setDiagnostics(src.getDiagnostics());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLocation())   tgt.addLocation(t.getValue());
  return tgt;
}",0.9889967637540452
23670,"public org.hl7.fhir.dstu2.model.ClinicalImpression convertClinicalImpression(org.hl7.fhir.dstu3.model.ClinicalImpression src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getSubject()));
  tgt.setAssessor(convertReference(src.getAssessor()));
  tgt.setStatus(convertClinicalImpressionStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  tgt.setPrevious(convertReference(src.getPrevious()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProblem())   tgt.addProblem(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent t : src.getInvestigations())   tgt.addInvestigations(convertClinicalImpressionInvestigationsComponent(t));
  for (  UriType t : src.getProtocol())   tgt.setProtocol(t.asStringValue());
  tgt.setSummary(src.getSummary());
  for (  org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionFindingComponent t : src.getFinding())   tgt.addFinding(convertClinicalImpressionFindingComponent(t));
  tgt.setPrognosis(src.getPrognosisCodeableConceptFirstRep().getText());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPlan())   tgt.addPlan(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAction())   tgt.addAction(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ClinicalImpression convertClinicalImpression(org.hl7.fhir.dstu3.model.ClinicalImpression src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getSubject()));
  tgt.setAssessor(convertReference(src.getAssessor()));
  tgt.setStatus(convertClinicalImpressionStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  tgt.setPrevious(convertReference(src.getPrevious()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProblem())   tgt.addProblem(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionInvestigationsComponent t : src.getInvestigations())   tgt.addInvestigations(convertClinicalImpressionInvestigationsComponent(t));
  for (  UriType t : src.getProtocol())   tgt.setProtocol(t.asStringValue());
  tgt.setSummary(src.getSummary());
  for (  org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionFindingComponent t : src.getFinding())   tgt.addFinding(convertClinicalImpressionFindingComponent(t));
  tgt.setPrognosis(src.getPrognosisCodeableConceptFirstRep().getText());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPlan())   tgt.addPlan(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAction())   tgt.addAction(convertReference(t));
  return tgt;
}",0.9943912900032992
23671,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent convertConformanceRestResourceSearchParamComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(src.getDefinition());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Conformance.SearchModifierCode> t : src.getModifier())   tgt.addModifier(convertSearchModifierCode(t.getValue()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getChain())   tgt.addChain(t.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent convertConformanceRestResourceSearchParamComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestResourceSearchParamComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(src.getDefinition());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Conformance.SearchModifierCode> t : src.getModifier())   tgt.addModifier(convertSearchModifierCode(t.getValue()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getChain())   tgt.addChain(t.getValue());
  return tgt;
}",0.9919393077287814
23672,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent convertConformanceRestSecurityCertificateComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setBlob(src.getBlob());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent convertConformanceRestSecurityCertificateComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityCertificateComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setBlob(src.getBlob());
  return tgt;
}",0.9849424269264836
23673,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent convertConformanceRestSecurityComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent();
  copyElement(src,tgt);
  tgt.setCors(src.getCors());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getService())   tgt.addService(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent t : src.getCertificate())   tgt.addCertificate(convertConformanceRestSecurityCertificateComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent convertConformanceRestSecurityComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestSecurityComponent();
  copyElement(src,tgt);
  tgt.setCors(src.getCors());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getService())   tgt.addService(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent t : src.getCertificate())   tgt.addCertificate(convertConformanceRestSecurityCertificateComponent(t));
  return tgt;
}",0.9898020395920816
23674,"public org.hl7.fhir.dstu2.model.SampledData convertSampledData(org.hl7.fhir.dstu3.model.SampledData src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SampledData tgt=new org.hl7.fhir.dstu2.model.SampledData();
  copyElement(src,tgt);
  tgt.setOrigin(convertSimpleQuantity(src.getOrigin()));
  tgt.setPeriod(src.getPeriod());
  tgt.setFactor(src.getFactor());
  tgt.setLowerLimit(src.getLowerLimit());
  tgt.setUpperLimit(src.getUpperLimit());
  tgt.setDimensions(src.getDimensions());
  tgt.setData(src.getData());
  return tgt;
}","public org.hl7.fhir.dstu2.model.SampledData convertSampledData(org.hl7.fhir.dstu3.model.SampledData src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SampledData tgt=new org.hl7.fhir.dstu2.model.SampledData();
  copyElement(src,tgt);
  tgt.setOrigin(convertSimpleQuantity(src.getOrigin()));
  tgt.setPeriod(src.getPeriod());
  tgt.setFactor(src.getFactor());
  tgt.setLowerLimit(src.getLowerLimit());
  tgt.setUpperLimit(src.getUpperLimit());
  tgt.setDimensions(src.getDimensions());
  tgt.setData(src.getData());
  return tgt;
}",0.9852813852813852
23675,"public org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent convertImagingStudySeriesComponent(org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent tgt=new org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent();
  copyElement(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setNumber(src.getNumber());
  tgt.setModality(convertCoding(src.getModality()));
  tgt.setDescription(src.getDescription());
  tgt.setNumberOfInstances(src.getNumberOfInstances());
  tgt.setAvailability(convertInstanceAvailability(src.getAvailability()));
  tgt.setBodySite(convertCoding(src.getBodySite()));
  tgt.setLaterality(convertCoding(src.getLaterality()));
  tgt.setStarted(src.getStarted());
  for (  org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesInstanceComponent t : src.getInstance())   tgt.addInstance(convertImagingStudySeriesInstanceComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent convertImagingStudySeriesComponent(org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent tgt=new org.hl7.fhir.dstu2.model.ImagingStudy.ImagingStudySeriesComponent();
  copyElement(src,tgt);
  tgt.setUid(src.getUid());
  tgt.setNumber(src.getNumber());
  tgt.setModality(convertCoding(src.getModality()));
  tgt.setDescription(src.getDescription());
  tgt.setNumberOfInstances(src.getNumberOfInstances());
  tgt.setAvailability(convertInstanceAvailability(src.getAvailability()));
  tgt.setBodySite(convertCoding(src.getBodySite()));
  tgt.setLaterality(convertCoding(src.getLaterality()));
  tgt.setStarted(src.getStarted());
  for (  org.hl7.fhir.dstu3.model.ImagingStudy.ImagingStudySeriesInstanceComponent t : src.getInstance())   tgt.addInstance(convertImagingStudySeriesInstanceComponent(t));
  return tgt;
}",0.9917993246502652
23676,"public org.hl7.fhir.dstu2.model.Ratio convertRatio(org.hl7.fhir.dstu3.model.Ratio src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Ratio tgt=new org.hl7.fhir.dstu2.model.Ratio();
  copyElement(src,tgt);
  tgt.setNumerator(convertQuantity(src.getNumerator()));
  tgt.setDenominator(convertQuantity(src.getDenominator()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Ratio convertRatio(org.hl7.fhir.dstu3.model.Ratio src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Ratio tgt=new org.hl7.fhir.dstu2.model.Ratio();
  copyElement(src,tgt);
  tgt.setNumerator(convertQuantity(src.getNumerator()));
  tgt.setDenominator(convertQuantity(src.getDenominator()));
  return tgt;
}",0.9778933680104032
23677,"public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent convertImplementationGuidePackageResourceComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent();
  copyElement(src,tgt);
  if (src.getExample())   tgt.setPurpose(org.hl7.fhir.dstu2.model.ImplementationGuide.GuideResourcePurpose.EXAMPLE);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setAcronym(src.getAcronym());
  tgt.setSource(convertType(src.getSource()));
  tgt.setExampleFor(convertReference(src.getExampleFor()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent convertImplementationGuidePackageResourceComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent tgt=new org.hl7.fhir.dstu2.model.ImplementationGuide.ImplementationGuidePackageResourceComponent();
  copyElement(src,tgt);
  if (src.getExample())   tgt.setPurpose(org.hl7.fhir.dstu2.model.ImplementationGuide.GuideResourcePurpose.EXAMPLE);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setAcronym(src.getAcronym());
  tgt.setSource(convertType(src.getSource()));
  tgt.setExampleFor(convertReference(src.getExampleFor()));
  return tgt;
}",0.990235496840896
23678,"public org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent convertProvenanceAgentComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent();
  copyElement(src,tgt);
  tgt.setRole(convertCoding(src.getRole()));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setUserId(convertIdentifier(src.getUserId()));
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentRelatedAgentComponent t : src.getRelatedAgent())   tgt.addRelatedAgent(convertProvenanceAgentRelatedAgentComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent convertProvenanceAgentComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentComponent();
  copyElement(src,tgt);
  tgt.setRole(convertCoding(src.getRole()));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setUserId(convertIdentifier(src.getUserId()));
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentRelatedAgentComponent t : src.getRelatedAgent())   tgt.addRelatedAgent(convertProvenanceAgentRelatedAgentComponent(t));
  return tgt;
}",0.9884117246080436
23679,"public org.hl7.fhir.dstu2.model.Parameters convertParameters(org.hl7.fhir.dstu3.model.Parameters src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Parameters tgt=new org.hl7.fhir.dstu2.model.Parameters();
  copyResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getParameter())   tgt.addParameter(convertParametersParameterComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Parameters convertParameters(org.hl7.fhir.dstu3.model.Parameters src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Parameters tgt=new org.hl7.fhir.dstu2.model.Parameters();
  copyResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getParameter())   tgt.addParameter(convertParametersParameterComponent(t));
  return tgt;
}",0.981132075471698
23680,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent convertConformanceContactComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent convertConformanceContactComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9849690539345712
23681,"public org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent convertAppointmentParticipantComponent(org.hl7.fhir.dstu3.model.Appointment.AppointmentParticipantComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent tgt=new org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setRequired(convertParticipantRequired(src.getRequired()));
  tgt.setStatus(convertParticipationStatus(src.getStatus()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent convertAppointmentParticipantComponent(org.hl7.fhir.dstu3.model.Appointment.AppointmentParticipantComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent tgt=new org.hl7.fhir.dstu2.model.Appointment.AppointmentParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setRequired(convertParticipantRequired(src.getRequired()));
  tgt.setStatus(convertParticipationStatus(src.getStatus()));
  return tgt;
}",0.9884117246080436
23682,"public org.hl7.fhir.dstu2.model.Communication convertCommunication(org.hl7.fhir.dstu3.model.Communication src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Communication tgt=new org.hl7.fhir.dstu2.model.Communication();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSender(convertReference(src.getSender()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Communication.CommunicationPayloadComponent t : src.getPayload())   tgt.addPayload(convertCommunicationPayloadComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getMedium())   tgt.addMedium(convertCodeableConcept(t));
  tgt.setStatus(convertCommunicationStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setSent(src.getSent());
  tgt.setReceived(src.getReceived());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  tgt.setSubject(convertReference(src.getSubject()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Communication convertCommunication(org.hl7.fhir.dstu3.model.Communication src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Communication tgt=new org.hl7.fhir.dstu2.model.Communication();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSender(convertReference(src.getSender()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Communication.CommunicationPayloadComponent t : src.getPayload())   tgt.addPayload(convertCommunicationPayloadComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getMedium())   tgt.addMedium(convertCodeableConcept(t));
  tgt.setStatus(convertCommunicationStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setSent(src.getSent());
  tgt.setReceived(src.getReceived());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  tgt.setSubject(convertReference(src.getSubject()));
  return tgt;
}",0.993351583887368
23683,"public org.hl7.fhir.dstu2.model.ProcessRequest convertProcessRequest(org.hl7.fhir.dstu3.model.ProcessRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ProcessRequest tgt=new org.hl7.fhir.dstu2.model.ProcessRequest();
  copyDomainResource(src,tgt);
  tgt.setAction(convertActionList(src.getAction()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasTargetReference())   tgt.setTarget((org.hl7.fhir.dstu2.model.Reference)convertType(src.getTarget()));
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  if (src.hasResponseReference())   tgt.setResponse((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  tgt.setNullify(src.getNullify());
  tgt.setReference(src.getReference());
  for (  org.hl7.fhir.dstu3.model.ProcessRequest.ItemsComponent t : src.getItem())   tgt.addItem(convertItemsComponent(t));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getInclude())   tgt.addInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getExclude())   tgt.addExclude(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ProcessRequest convertProcessRequest(org.hl7.fhir.dstu3.model.ProcessRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ProcessRequest tgt=new org.hl7.fhir.dstu2.model.ProcessRequest();
  copyDomainResource(src,tgt);
  tgt.setAction(convertActionList(src.getAction()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasTargetReference())   tgt.setTarget((org.hl7.fhir.dstu2.model.Reference)convertType(src.getTarget()));
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  if (src.hasResponseReference())   tgt.setResponse((org.hl7.fhir.dstu2.model.Reference)convertType(src.getResponse()));
  tgt.setNullify(src.getNullify());
  tgt.setReference(src.getReference());
  for (  org.hl7.fhir.dstu3.model.ProcessRequest.ItemsComponent t : src.getItem())   tgt.addItem(convertItemsComponent(t));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getInclude())   tgt.addInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getExclude())   tgt.addExclude(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9949808089754946
23684,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent convertTestScriptTestComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestActionComponent t : src.getAction())   tgt.addAction(convertTestActionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent convertTestScriptTestComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTestComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestActionComponent t : src.getAction())   tgt.addAction(convertTestActionComponent(t));
  return tgt;
}",0.9860312243221035
23685,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent convertNutritionOrderSupplementComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestSupplementComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setProductName(src.getProductName());
  for (  org.hl7.fhir.dstu3.model.Timing t : src.getSchedule())   tgt.addSchedule(convertTiming(t));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setInstruction(src.getInstruction());
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent convertNutritionOrderSupplementComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestSupplementComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderSupplementComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setProductName(src.getProductName());
  for (  org.hl7.fhir.dstu3.model.Timing t : src.getSchedule())   tgt.addSchedule(convertTiming(t));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setInstruction(src.getInstruction());
  return tgt;
}",0.9890251775338929
23686,"public org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent convertPatientLinkComponent(org.hl7.fhir.dstu3.model.Patient.PatientLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent tgt=new org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent();
  copyElement(src,tgt);
  tgt.setOther(convertReference(src.getOther()));
  tgt.setType(convertLinkType(src.getType()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent convertPatientLinkComponent(org.hl7.fhir.dstu3.model.Patient.PatientLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent tgt=new org.hl7.fhir.dstu2.model.Patient.PatientLinkComponent();
  copyElement(src,tgt);
  tgt.setOther(convertReference(src.getOther()));
  tgt.setType(convertLinkType(src.getType()));
  return tgt;
}",0.9819341126461212
23687,"public org.hl7.fhir.dstu2.model.DeviceUseStatement convertDeviceUseStatement(org.hl7.fhir.dstu3.model.DeviceUseStatement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceUseStatement tgt=new org.hl7.fhir.dstu2.model.DeviceUseStatement();
  copyDomainResource(src,tgt);
  tgt.setBodySite(convertType(src.getBodySite()));
  tgt.setWhenUsed(convertPeriod(src.getWhenUsed()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getIndication())   tgt.addIndication(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getNotes())   tgt.addNotes(t.getValue());
  tgt.setRecordedOn(src.getRecordedOn());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setTiming(convertType(src.getTiming()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceUseStatement convertDeviceUseStatement(org.hl7.fhir.dstu3.model.DeviceUseStatement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceUseStatement tgt=new org.hl7.fhir.dstu2.model.DeviceUseStatement();
  copyDomainResource(src,tgt);
  tgt.setBodySite(convertType(src.getBodySite()));
  tgt.setWhenUsed(convertPeriod(src.getWhenUsed()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getIndication())   tgt.addIndication(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getNotes())   tgt.addNotes(t.getValue());
  tgt.setRecordedOn(src.getRecordedOn());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setTiming(convertType(src.getTiming()));
  return tgt;
}",0.991223541559112
23688,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent convertTeardownActionComponent(org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent convertTeardownActionComponent(org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  return tgt;
}",0.983284169124877
23689,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent convertTestScriptTeardownComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTeardownComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent t : src.getAction())   tgt.addAction(convertTeardownActionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent convertTestScriptTeardownComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTeardownComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptTeardownComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent t : src.getAction())   tgt.addAction(convertTeardownActionComponent(t));
  return tgt;
}",0.9848888888888888
23690,"public org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent convertCarePlanActivityComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getActionResulting())   tgt.addActionResulting(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getProgress())   tgt.addProgress(convertAnnotation(t));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setDetail(convertCarePlanActivityDetailComponent(src.getDetail()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent convertCarePlanActivityComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanActivityComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getActionResulting())   tgt.addActionResulting(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getProgress())   tgt.addProgress(convertAnnotation(t));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setDetail(convertCarePlanActivityDetailComponent(src.getDetail()));
  return tgt;
}",0.9888816219751472
23691,"public org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent convertBundleLinkComponent(org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent();
  copyElement(src,tgt);
  tgt.setRelation(src.getRelation());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent convertBundleLinkComponent(org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleLinkComponent();
  copyElement(src,tgt);
  tgt.setRelation(src.getRelation());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.9802555168408827
23692,"public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent convertAuditEventAgentComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setUserId(convertIdentifier(src.getUserId()));
  tgt.setAltId(src.getAltId());
  tgt.setName(src.getName());
  tgt.setRequestor(src.getRequestor());
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getPolicy())   tgt.addPolicy(t.getValue());
  tgt.setMedia(convertCoding(src.getMedia()));
  tgt.setNetwork(convertAuditEventAgentNetworkComponent(src.getNetwork()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getPurposeOfUse())   tgt.addPurposeOfUse(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent convertAuditEventAgentComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getRole())   tgt.addRole(convertCodeableConcept(t));
  tgt.setReference(convertReference(src.getReference()));
  tgt.setUserId(convertIdentifier(src.getUserId()));
  tgt.setAltId(src.getAltId());
  tgt.setName(src.getName());
  tgt.setRequestor(src.getRequestor());
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getPolicy())   tgt.addPolicy(t.getValue());
  tgt.setMedia(convertCoding(src.getMedia()));
  tgt.setNetwork(convertAuditEventAgentNetworkComponent(src.getNetwork()));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getPurposeOfUse())   tgt.addPurposeOfUse(convertCoding(t));
  return tgt;
}",0.9924745462594068
23693,"public org.hl7.fhir.dstu2.model.MedicationOrder convertMedicationOrder(org.hl7.fhir.dstu3.model.MedicationOrder src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder tgt=new org.hl7.fhir.dstu2.model.MedicationOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationOrderStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.setReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.setReason(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationOrderDosageInstructionComponent(t));
  tgt.setDispenseRequest(convertMedicationOrderDispenseRequestComponent(src.getDispenseRequest()));
  tgt.setSubstitution(convertMedicationOrderSubstitutionComponent(src.getSubstitution()));
  tgt.setPriorPrescription(convertReference(src.getPriorPrescription()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationOrder convertMedicationOrder(org.hl7.fhir.dstu3.model.MedicationOrder src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder tgt=new org.hl7.fhir.dstu2.model.MedicationOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationOrderStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.setReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.setReason(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationOrderDosageInstructionComponent(t));
  tgt.setDispenseRequest(convertMedicationOrderDispenseRequestComponent(src.getDispenseRequest()));
  tgt.setSubstitution(convertMedicationOrderSubstitutionComponent(src.getSubstitution()));
  tgt.setPriorPrescription(convertReference(src.getPriorPrescription()));
  return tgt;
}",0.994566954298498
23694,"public org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent convertImmunizationReactionComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationReactionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent();
  copyElement(src,tgt);
  tgt.setDate(src.getDate());
  tgt.setDetail(convertReference(src.getDetail()));
  tgt.setReported(src.getReported());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent convertImmunizationReactionComponent(org.hl7.fhir.dstu3.model.Immunization.ImmunizationReactionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent tgt=new org.hl7.fhir.dstu2.model.Immunization.ImmunizationReactionComponent();
  copyElement(src,tgt);
  tgt.setDate(src.getDate());
  tgt.setDetail(convertReference(src.getDetail()));
  tgt.setReported(src.getReported());
  return tgt;
}",0.9847806624888094
23695,"public org.hl7.fhir.dstu2.model.Condition convertCondition(org.hl7.fhir.dstu3.model.Condition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Condition tgt=new org.hl7.fhir.dstu2.model.Condition();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setAsserter(convertReference(src.getAsserter()));
  tgt.setDateRecorded(src.getDateRecorded());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setClinicalStatus(src.getClinicalStatus().toCode());
  tgt.setVerificationStatus(convertConditionVerificationStatus(src.getVerificationStatus()));
  tgt.setSeverity(convertCodeableConcept(src.getSeverity()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setAbatement(convertType(src.getAbatement()));
  tgt.setStage(convertConditionStageComponent(src.getStage()));
  for (  org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent t : src.getEvidence())   tgt.addEvidence(convertConditionEvidenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Condition convertCondition(org.hl7.fhir.dstu3.model.Condition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Condition tgt=new org.hl7.fhir.dstu2.model.Condition();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setAsserter(convertReference(src.getAsserter()));
  tgt.setDateRecorded(src.getDateRecorded());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setClinicalStatus(src.getClinicalStatus().toCode());
  tgt.setVerificationStatus(convertConditionVerificationStatus(src.getVerificationStatus()));
  tgt.setSeverity(convertCodeableConcept(src.getSeverity()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setAbatement(convertType(src.getAbatement()));
  tgt.setStage(convertConditionStageComponent(src.getStage()));
  for (  org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent t : src.getEvidence())   tgt.addEvidence(convertConditionEvidenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  return tgt;
}",0.9938472674629026
23696,"public org.hl7.fhir.dstu2.model.MedicationAdministration convertMedicationAdministration(org.hl7.fhir.dstu3.model.MedicationAdministration src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationAdministrationStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffectiveTime(convertType(src.getEffectiveTime()));
  tgt.setPrescription(convertReference(src.getPrescription()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonGiven())   tgt.addReasonGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDevice())   tgt.addDevice(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  tgt.setDosage(convertMedicationAdministrationDosageComponent(src.getDosage()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationAdministration convertMedicationAdministration(org.hl7.fhir.dstu3.model.MedicationAdministration src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationAdministrationStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffectiveTime(convertType(src.getEffectiveTime()));
  tgt.setPrescription(convertReference(src.getPrescription()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonGiven())   tgt.addReasonGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDevice())   tgt.addDevice(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  tgt.setDosage(convertMedicationAdministrationDosageComponent(src.getDosage()));
  return tgt;
}",0.9940288022479804
23697,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent convertSetupActionAssertComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionAssertComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent();
  copyElement(src,tgt);
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setDirection(convertAssertionDirectionType(src.getDirection()));
  tgt.setCompareToSourceId(src.getCompareToSourceId());
  tgt.setCompareToSourcePath(src.getCompareToSourcePath());
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setHeaderField(src.getHeaderField());
  tgt.setMinimumId(src.getMinimumId());
  tgt.setNavigationLinks(src.getNavigationLinks());
  tgt.setOperator(convertAssertionOperatorType(src.getOperator()));
  tgt.setPath(src.getPath());
  tgt.setResource(src.getResource());
  tgt.setResponse(convertAssertionResponseTypes(src.getResponse()));
  tgt.setResponseCode(src.getResponseCode());
  tgt.setSourceId(src.getSourceId());
  tgt.setValidateProfileId(src.getValidateProfileId());
  tgt.setValue(src.getValue());
  tgt.setWarningOnly(src.getWarningOnly());
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent convertSetupActionAssertComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionAssertComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupActionAssertComponent();
  copyElement(src,tgt);
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setDirection(convertAssertionDirectionType(src.getDirection()));
  tgt.setCompareToSourceId(src.getCompareToSourceId());
  tgt.setCompareToSourcePath(src.getCompareToSourcePath());
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setHeaderField(src.getHeaderField());
  tgt.setMinimumId(src.getMinimumId());
  tgt.setNavigationLinks(src.getNavigationLinks());
  tgt.setOperator(convertAssertionOperatorType(src.getOperator()));
  tgt.setPath(src.getPath());
  tgt.setResource(src.getResource());
  tgt.setResponse(convertAssertionResponseTypes(src.getResponse()));
  tgt.setResponseCode(src.getResponseCode());
  tgt.setSourceId(src.getSourceId());
  tgt.setValidateProfileId(src.getValidateProfileId());
  tgt.setValue(src.getValue());
  tgt.setWarningOnly(src.getWarningOnly());
  return tgt;
}",0.9936066190297104
23698,"public org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent convertLegalLanguageComponent(org.hl7.fhir.dstu3.model.Contract.LegalLanguageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent convertLegalLanguageComponent(org.hl7.fhir.dstu3.model.Contract.LegalLanguageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent tgt=new org.hl7.fhir.dstu2.model.Contract.LegalLanguageComponent();
  copyElement(src,tgt);
  tgt.setContent(convertType(src.getContent()));
  return tgt;
}",0.9805269186712484
23699,"public org.hl7.fhir.dstu2.model.PaymentReconciliation convertPaymentReconciliation(org.hl7.fhir.dstu3.model.PaymentReconciliation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProviderReference())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganizationReference())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  for (  org.hl7.fhir.dstu3.model.PaymentReconciliation.DetailsComponent t : src.getDetail())   tgt.addDetail(convertDetailsComponent(t));
  tgt.setForm(convertCoding(src.getForm()));
  tgt.setTotal(convertMoney(src.getTotal()));
  for (  org.hl7.fhir.dstu3.model.PaymentReconciliation.NotesComponent t : src.getNote())   tgt.addNote(convertNotesComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.PaymentReconciliation convertPaymentReconciliation(org.hl7.fhir.dstu3.model.PaymentReconciliation src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.PaymentReconciliation tgt=new org.hl7.fhir.dstu2.model.PaymentReconciliation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProviderReference())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganizationReference())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  for (  org.hl7.fhir.dstu3.model.PaymentReconciliation.DetailsComponent t : src.getDetail())   tgt.addDetail(convertDetailsComponent(t));
  tgt.setForm(convertCoding(src.getForm()));
  tgt.setTotal(convertMoney(src.getTotal()));
  for (  org.hl7.fhir.dstu3.model.PaymentReconciliation.NotesComponent t : src.getNote())   tgt.addNote(convertNotesComponent(t));
  return tgt;
}",0.9947579401788468
23700,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent convertConformanceMessagingEndpointComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent();
  copyElement(src,tgt);
  tgt.setProtocol(convertCoding(src.getProtocol()));
  tgt.setAddress(src.getAddress());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent convertConformanceMessagingEndpointComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceMessagingEndpointComponent();
  copyElement(src,tgt);
  tgt.setProtocol(convertCoding(src.getProtocol()));
  tgt.setAddress(src.getAddress());
  return tgt;
}",0.9849157054126
23701,"public org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent convertDeviceComponentProductionSpecificationComponent(org.hl7.fhir.dstu3.model.DeviceComponent.DeviceComponentProductionSpecificationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent tgt=new org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent();
  copyElement(src,tgt);
  tgt.setSpecType(convertCodeableConcept(src.getSpecType()));
  tgt.setComponentId(convertIdentifier(src.getComponentId()));
  tgt.setProductionSpec(src.getProductionSpec());
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent convertDeviceComponentProductionSpecificationComponent(org.hl7.fhir.dstu3.model.DeviceComponent.DeviceComponentProductionSpecificationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent tgt=new org.hl7.fhir.dstu2.model.DeviceComponent.DeviceComponentProductionSpecificationComponent();
  copyElement(src,tgt);
  tgt.setSpecType(convertCodeableConcept(src.getSpecType()));
  tgt.setComponentId(convertIdentifier(src.getComponentId()));
  tgt.setProductionSpec(src.getProductionSpec());
  return tgt;
}",0.9881201956673656
23702,"public org.hl7.fhir.dstu2.model.Count convertCount(org.hl7.fhir.dstu3.model.Count src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Count tgt=new org.hl7.fhir.dstu2.model.Count();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Count convertCount(org.hl7.fhir.dstu3.model.Count src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Count tgt=new org.hl7.fhir.dstu2.model.Count();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9815817984832068
23703,"public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent convertStructureDefinitionDifferentialComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionDifferentialComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent convertStructureDefinitionDifferentialComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionDifferentialComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionDifferentialComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9867704280155642
23704,"public org.hl7.fhir.dstu2.model.Quantity convertQuantity(org.hl7.fhir.dstu3.model.Quantity src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Quantity tgt=new org.hl7.fhir.dstu2.model.Quantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Quantity convertQuantity(org.hl7.fhir.dstu3.model.Quantity src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Quantity tgt=new org.hl7.fhir.dstu2.model.Quantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9821615949632738
23705,"public org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent convertMedicationProductIngredientComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductIngredientComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent();
  copyElement(src,tgt);
  if (src.hasItemReference())   tgt.setItem((org.hl7.fhir.dstu2.model.Reference)convertType(src.getItem()));
  tgt.setAmount(convertRatio(src.getAmount()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent convertMedicationProductIngredientComponent(org.hl7.fhir.dstu3.model.Medication.MedicationProductIngredientComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Medication.MedicationProductIngredientComponent();
  copyElement(src,tgt);
  if (src.hasItemReference())   tgt.setItem((org.hl7.fhir.dstu2.model.Reference)convertType(src.getItem()));
  tgt.setAmount(convertRatio(src.getAmount()));
  return tgt;
}",0.9863453815261044
23706,"public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent convertAuditEventAgentNetworkComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentNetworkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent();
  copyElement(src,tgt);
  tgt.setAddress(src.getAddress());
  tgt.setType(convertAuditEventParticipantNetworkType(src.getType()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent convertAuditEventAgentNetworkComponent(org.hl7.fhir.dstu3.model.AuditEvent.AuditEventAgentNetworkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent tgt=new org.hl7.fhir.dstu2.model.AuditEvent.AuditEventParticipantNetworkComponent();
  copyElement(src,tgt);
  tgt.setAddress(src.getAddress());
  tgt.setType(convertAuditEventParticipantNetworkType(src.getType()));
  return tgt;
}",0.9849690539345712
23707,"public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent convertDocumentReferenceRelatesToComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceRelatesToComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent();
  copyElement(src,tgt);
  tgt.setCode(convertDocumentRelationshipType(src.getCode()));
  tgt.setTarget(convertReference(src.getTarget()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent convertDocumentReferenceRelatesToComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceRelatesToComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceRelatesToComponent();
  copyElement(src,tgt);
  tgt.setCode(convertDocumentRelationshipType(src.getCode()));
  tgt.setTarget(convertReference(src.getTarget()));
  return tgt;
}",0.9859154929577464
23708,"public org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent convertEncounterStatusHistoryComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterStatusHistoryComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent();
  copyElement(src,tgt);
  tgt.setStatus(convertEncounterState(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent convertEncounterStatusHistoryComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterStatusHistoryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterStatusHistoryComponent();
  copyElement(src,tgt);
  tgt.setStatus(convertEncounterState(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9843317972350232
23709,"public org.hl7.fhir.dstu2.model.AppointmentResponse convertAppointmentResponse(org.hl7.fhir.dstu3.model.AppointmentResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AppointmentResponse tgt=new org.hl7.fhir.dstu2.model.AppointmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAppointment(convertReference(src.getAppointment()));
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getParticipantType())   tgt.addParticipantType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setParticipantStatus(convertParticipantStatus(src.getParticipantStatus()));
  tgt.setComment(src.getComment());
  return tgt;
}","public org.hl7.fhir.dstu2.model.AppointmentResponse convertAppointmentResponse(org.hl7.fhir.dstu3.model.AppointmentResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AppointmentResponse tgt=new org.hl7.fhir.dstu2.model.AppointmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setAppointment(convertReference(src.getAppointment()));
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getParticipantType())   tgt.addParticipantType(convertCodeableConcept(t));
  tgt.setActor(convertReference(src.getActor()));
  tgt.setParticipantStatus(convertParticipantStatus(src.getParticipantStatus()));
  tgt.setComment(src.getComment());
  return tgt;
}",0.9903354178510516
23710,"public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent convertMedicationOrderDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent convertMedicationOrderDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9910667367314766
23711,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent convertTestScriptMetadataLinkComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setDescription(src.getDescription());
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent convertTestScriptMetadataLinkComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataLinkComponent();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setDescription(src.getDescription());
  return tgt;
}",0.9834146341463414
23712,"public org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent convertProcedurePerformerComponent(org.hl7.fhir.dstu3.model.Procedure.ProcedurePerformerComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent tgt=new org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent();
  copyElement(src,tgt);
  tgt.setActor(convertReference(src.getActor()));
  tgt.setRole(convertCodeableConcept(src.getRole()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent convertProcedurePerformerComponent(org.hl7.fhir.dstu3.model.Procedure.ProcedurePerformerComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent tgt=new org.hl7.fhir.dstu2.model.Procedure.ProcedurePerformerComponent();
  copyElement(src,tgt);
  tgt.setActor(convertReference(src.getActor()));
  tgt.setRole(convertCodeableConcept(src.getRole()));
  return tgt;
}",0.983669548511047
23713,"public org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent convertCarePlanRelatedPlanComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCarePlanRelationship(src.getCode()));
  tgt.setPlan(convertReference(src.getPlan()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent convertCarePlanRelatedPlanComponent(org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent tgt=new org.hl7.fhir.dstu2.model.CarePlan.CarePlanRelatedPlanComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCarePlanRelationship(src.getCode()));
  tgt.setPlan(convertReference(src.getPlan()));
  return tgt;
}",0.9837940896091516
23714,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent convertNutritionOrderOralDietTextureComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietTextureComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent();
  copyElement(src,tgt);
  tgt.setModifier(convertCodeableConcept(src.getModifier()));
  tgt.setFoodType(convertCodeableConcept(src.getFoodType()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent convertNutritionOrderOralDietTextureComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietTextureComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietTextureComponent();
  copyElement(src,tgt);
  tgt.setModifier(convertCodeableConcept(src.getModifier()));
  tgt.setFoodType(convertCodeableConcept(src.getFoodType()));
  return tgt;
}",0.986279257465698
23715,"public org.hl7.fhir.dstu2.model.Composition convertComposition(org.hl7.fhir.dstu3.model.Composition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Composition tgt=new org.hl7.fhir.dstu2.model.Composition();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setDate(src.getDate());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setClass_(convertCodeableConcept(src.getClass_()));
  tgt.setTitle(src.getTitle());
  tgt.setStatus(convertCompositionStatus(src.getStatus()));
  tgt.setConfidentiality(src.getConfidentiality().toCode());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Composition.CompositionAttesterComponent t : src.getAttester())   tgt.addAttester(convertCompositionAttesterComponent(t));
  tgt.setCustodian(convertReference(src.getCustodian()));
  for (  org.hl7.fhir.dstu3.model.Composition.CompositionEventComponent t : src.getEvent())   tgt.addEvent(convertCompositionEventComponent(t));
  tgt.setEncounter(convertReference(src.getEncounter()));
  for (  org.hl7.fhir.dstu3.model.Composition.SectionComponent t : src.getSection())   tgt.addSection(convertSectionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Composition convertComposition(org.hl7.fhir.dstu3.model.Composition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Composition tgt=new org.hl7.fhir.dstu2.model.Composition();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setDate(src.getDate());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setClass_(convertCodeableConcept(src.getClass_()));
  tgt.setTitle(src.getTitle());
  tgt.setStatus(convertCompositionStatus(src.getStatus()));
  tgt.setConfidentiality(src.getConfidentiality().toCode());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Composition.CompositionAttesterComponent t : src.getAttester())   tgt.addAttester(convertCompositionAttesterComponent(t));
  tgt.setCustodian(convertReference(src.getCustodian()));
  for (  org.hl7.fhir.dstu3.model.Composition.CompositionEventComponent t : src.getEvent())   tgt.addEvent(convertCompositionEventComponent(t));
  tgt.setEncounter(convertReference(src.getEncounter()));
  for (  org.hl7.fhir.dstu3.model.Composition.SectionComponent t : src.getSection())   tgt.addSection(convertSectionComponent(t));
  return tgt;
}",0.9937751739289638
23716,"public org.hl7.fhir.dstu2.model.Appointment convertAppointment(org.hl7.fhir.dstu3.model.Appointment src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Appointment tgt=new org.hl7.fhir.dstu2.model.Appointment();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertAppointmentStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.setType(convertCodeableConcept(t));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  tgt.setPriority(src.getPriority());
  tgt.setDescription(src.getDescription());
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  tgt.setMinutesDuration(src.getMinutesDuration());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSlot())   tgt.addSlot(convertReference(t));
  tgt.setComment(src.getComment());
  for (  org.hl7.fhir.dstu3.model.Appointment.AppointmentParticipantComponent t : src.getParticipant())   tgt.addParticipant(convertAppointmentParticipantComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Appointment convertAppointment(org.hl7.fhir.dstu3.model.Appointment src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Appointment tgt=new org.hl7.fhir.dstu2.model.Appointment();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertAppointmentStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.setType(convertCodeableConcept(t));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  tgt.setPriority(src.getPriority());
  tgt.setDescription(src.getDescription());
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  tgt.setMinutesDuration(src.getMinutesDuration());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSlot())   tgt.addSlot(convertReference(t));
  tgt.setComment(src.getComment());
  for (  org.hl7.fhir.dstu3.model.Appointment.AppointmentParticipantComponent t : src.getParticipant())   tgt.addParticipant(convertAppointmentParticipantComponent(t));
  return tgt;
}",0.9926119078661452
23717,"public org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent convertBundleEntryRequestComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryRequestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent();
  copyElement(src,tgt);
  tgt.setMethod(convertHTTPVerb(src.getMethod()));
  tgt.setUrl(src.getUrl());
  tgt.setIfNoneMatch(src.getIfNoneMatch());
  tgt.setIfModifiedSince(src.getIfModifiedSince());
  tgt.setIfMatch(src.getIfMatch());
  tgt.setIfNoneExist(src.getIfNoneExist());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent convertBundleEntryRequestComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryRequestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent tgt=new org.hl7.fhir.dstu2.model.Bundle.BundleEntryRequestComponent();
  copyElement(src,tgt);
  tgt.setMethod(convertHTTPVerb(src.getMethod()));
  tgt.setUrl(src.getUrl());
  tgt.setIfNoneMatch(src.getIfNoneMatch());
  tgt.setIfModifiedSince(src.getIfModifiedSince());
  tgt.setIfMatch(src.getIfMatch());
  tgt.setIfNoneExist(src.getIfNoneExist());
  return tgt;
}",0.9871114480667172
23718,"public org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent convertDeviceMetricCalibrationComponent(org.hl7.fhir.dstu3.model.DeviceMetric.DeviceMetricCalibrationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent tgt=new org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent();
  copyElement(src,tgt);
  tgt.setType(convertDeviceMetricCalibrationType(src.getType()));
  tgt.setState(convertDeviceMetricCalibrationState(src.getState()));
  tgt.setTime(src.getTime());
  return tgt;
}","public org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent convertDeviceMetricCalibrationComponent(org.hl7.fhir.dstu3.model.DeviceMetric.DeviceMetricCalibrationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent tgt=new org.hl7.fhir.dstu2.model.DeviceMetric.DeviceMetricCalibrationComponent();
  copyElement(src,tgt);
  tgt.setType(convertDeviceMetricCalibrationType(src.getType()));
  tgt.setState(convertDeviceMetricCalibrationState(src.getState()));
  tgt.setTime(src.getTime());
  return tgt;
}",0.9862570735650767
23719,"public org.hl7.fhir.dstu2.model.ProcessResponse convertProcessResponse(org.hl7.fhir.dstu3.model.ProcessResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ProcessResponse tgt=new org.hl7.fhir.dstu2.model.ProcessResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setOutcome(convertCoding(src.getOutcome()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProviderReference())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganizationReference())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  tgt.setForm(convertCoding(src.getForm()));
  for (  org.hl7.fhir.dstu3.model.ProcessResponse.ProcessResponseNotesComponent t : src.getNotes())   tgt.addNotes(convertProcessResponseNotesComponent(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getError())   tgt.addError(convertCoding(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ProcessResponse convertProcessResponse(org.hl7.fhir.dstu3.model.ProcessResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ProcessResponse tgt=new org.hl7.fhir.dstu2.model.ProcessResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setOutcome(convertCoding(src.getOutcome()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProviderReference())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganizationReference())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  tgt.setForm(convertCoding(src.getForm()));
  for (  org.hl7.fhir.dstu3.model.ProcessResponse.ProcessResponseNotesComponent t : src.getNotes())   tgt.addNotes(convertProcessResponseNotesComponent(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getError())   tgt.addError(convertCoding(t));
  return tgt;
}",0.9944426283099052
23720,"public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent convertDocumentReferenceContextComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent();
  copyElement(src,tgt);
  tgt.setEncounter(convertReference(src.getEncounter()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getEvent())   tgt.addEvent(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setFacilityType(convertCodeableConcept(src.getFacilityType()));
  tgt.setPracticeSetting(convertCodeableConcept(src.getPracticeSetting()));
  tgt.setSourcePatientInfo(convertReference(src.getSourcePatientInfo()));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextRelatedComponent t : src.getRelated())   tgt.addRelated(convertDocumentReferenceContextRelatedComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent convertDocumentReferenceContextComponent(org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent tgt=new org.hl7.fhir.dstu2.model.DocumentReference.DocumentReferenceContextComponent();
  copyElement(src,tgt);
  tgt.setEncounter(convertReference(src.getEncounter()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getEvent())   tgt.addEvent(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setFacilityType(convertCodeableConcept(src.getFacilityType()));
  tgt.setPracticeSetting(convertCodeableConcept(src.getPracticeSetting()));
  tgt.setSourcePatientInfo(convertReference(src.getSourcePatientInfo()));
  for (  org.hl7.fhir.dstu3.model.DocumentReference.DocumentReferenceContextRelatedComponent t : src.getRelated())   tgt.addRelated(convertDocumentReferenceContextRelatedComponent(t));
  return tgt;
}",0.9922972360670592
23721,"public org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent convertConditionStageComponent(org.hl7.fhir.dstu3.model.Condition.ConditionStageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent tgt=new org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent();
  copyElement(src,tgt);
  tgt.setSummary(convertCodeableConcept(src.getSummary()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAssessment())   tgt.addAssessment(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent convertConditionStageComponent(org.hl7.fhir.dstu3.model.Condition.ConditionStageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent tgt=new org.hl7.fhir.dstu2.model.Condition.ConditionStageComponent();
  copyElement(src,tgt);
  tgt.setSummary(convertCodeableConcept(src.getSummary()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAssessment())   tgt.addAssessment(convertReference(t));
  return tgt;
}",0.985022026431718
23722,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent convertTestScriptMetadataComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent t : src.getLink())   tgt.addLink(convertTestScriptMetadataLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent t : src.getCapability())   tgt.addCapability(convertTestScriptMetadataCapabilityComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent convertTestScriptMetadataComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent t : src.getLink())   tgt.addLink(convertTestScriptMetadataLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent t : src.getCapability())   tgt.addCapability(convertTestScriptMetadataCapabilityComponent(t));
  return tgt;
}",0.988704318936877
23723,"public org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent convertHealthcareServiceNotAvailableComponent(org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceNotAvailableComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent tgt=new org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setDuring(convertPeriod(src.getDuring()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent convertHealthcareServiceNotAvailableComponent(org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceNotAvailableComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent tgt=new org.hl7.fhir.dstu2.model.HealthcareService.HealthcareServiceNotAvailableComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setDuring(convertPeriod(src.getDuring()));
  return tgt;
}",0.9857502095557418
23724,"public org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent convertProcedureFocalDeviceComponent(org.hl7.fhir.dstu3.model.Procedure.ProcedureFocalDeviceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent tgt=new org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent();
  copyElement(src,tgt);
  tgt.setAction(convertCodeableConcept(src.getAction()));
  tgt.setManipulated(convertReference(src.getManipulated()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent convertProcedureFocalDeviceComponent(org.hl7.fhir.dstu3.model.Procedure.ProcedureFocalDeviceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent tgt=new org.hl7.fhir.dstu2.model.Procedure.ProcedureFocalDeviceComponent();
  copyElement(src,tgt);
  tgt.setAction(convertCodeableConcept(src.getAction()));
  tgt.setManipulated(convertReference(src.getManipulated()));
  return tgt;
}",0.9844464775846294
23725,"public org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent convertEncounterLocationComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterLocationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent();
  copyElement(src,tgt);
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setStatus(convertEncounterLocationStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent convertEncounterLocationComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterLocationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterLocationComponent();
  copyElement(src,tgt);
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setStatus(convertEncounterLocationStatus(src.getStatus()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9854077253218884
23726,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent convertTestScriptFixtureComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent();
  copyElement(src,tgt);
  tgt.setAutocreate(src.getAutocreate());
  tgt.setAutodelete(src.getAutodelete());
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent convertTestScriptFixtureComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptFixtureComponent();
  copyElement(src,tgt);
  tgt.setAutocreate(src.getAutocreate());
  tgt.setAutodelete(src.getAutodelete());
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}",0.9846984698469848
23727,"public org.hl7.fhir.dstu2.model.EpisodeOfCare convertEpisodeOfCare(org.hl7.fhir.dstu3.model.EpisodeOfCare src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EpisodeOfCare tgt=new org.hl7.fhir.dstu2.model.EpisodeOfCare();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertEpisodeOfCareStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent t : src.getStatusHistory())   tgt.addStatusHistory(convertEpisodeOfCareStatusHistoryComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getCondition())   tgt.addCondition(convertReference(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReferralRequest())   tgt.addReferralRequest(convertReference(t));
  tgt.setCareManager(convertReference(src.getCareManager()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.EpisodeOfCare convertEpisodeOfCare(org.hl7.fhir.dstu3.model.EpisodeOfCare src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EpisodeOfCare tgt=new org.hl7.fhir.dstu2.model.EpisodeOfCare();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertEpisodeOfCareStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.EpisodeOfCare.EpisodeOfCareStatusHistoryComponent t : src.getStatusHistory())   tgt.addStatusHistory(convertEpisodeOfCareStatusHistoryComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getCondition())   tgt.addCondition(convertReference(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setManagingOrganization(convertReference(src.getManagingOrganization()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReferralRequest())   tgt.addReferralRequest(convertReference(t));
  tgt.setCareManager(convertReference(src.getCareManager()));
  return tgt;
}",0.9932405566600396
23728,"public org.hl7.fhir.dstu2.model.Group.GroupMemberComponent convertGroupMemberComponent(org.hl7.fhir.dstu3.model.Group.GroupMemberComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Group.GroupMemberComponent tgt=new org.hl7.fhir.dstu2.model.Group.GroupMemberComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getEntity()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setInactive(src.getInactive());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Group.GroupMemberComponent convertGroupMemberComponent(org.hl7.fhir.dstu3.model.Group.GroupMemberComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Group.GroupMemberComponent tgt=new org.hl7.fhir.dstu2.model.Group.GroupMemberComponent();
  copyElement(src,tgt);
  tgt.setEntity(convertReference(src.getEntity()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setInactive(src.getInactive());
  return tgt;
}",0.983151635282458
23729,"public org.hl7.fhir.dstu2.model.AllergyIntolerance convertAllergyIntolerance(org.hl7.fhir.dstu3.model.AllergyIntolerance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.AllergyIntolerance tgt=new org.hl7.fhir.dstu2.model.AllergyIntolerance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertAllergyIntoleranceStatus(src.getStatus()));
  tgt.setType(convertAllergyIntoleranceType(src.getType()));
  tgt.setCategory(convertAllergyIntoleranceCategory(src.getCategory()));
  tgt.setCriticality(convertAllergyIntoleranceCriticality(src.getCriticality()));
  tgt.setSubstance(convertCodeableConcept(src.getCode()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setRecordedDate(src.getAttestedDate());
  tgt.setRecorder(convertReference(src.getRecorder()));
  tgt.setReporter(convertReference(src.getReporter()));
  tgt.setOnset(src.getOnset());
  tgt.setLastOccurence(src.getLastOccurrence());
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.AllergyIntolerance.AllergyIntoleranceReactionComponent t : src.getReaction())   tgt.addReaction(convertAllergyIntoleranceReactionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.AllergyIntolerance convertAllergyIntolerance(org.hl7.fhir.dstu3.model.AllergyIntolerance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.AllergyIntolerance tgt=new org.hl7.fhir.dstu2.model.AllergyIntolerance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertAllergyIntoleranceStatus(src.getStatus()));
  tgt.setType(convertAllergyIntoleranceType(src.getType()));
  tgt.setCategory(convertAllergyIntoleranceCategory(src.getCategory()));
  tgt.setCriticality(convertAllergyIntoleranceCriticality(src.getCriticality()));
  tgt.setSubstance(convertCodeableConcept(src.getCode()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setRecordedDate(src.getAttestedDate());
  tgt.setRecorder(convertReference(src.getRecorder()));
  tgt.setReporter(convertReference(src.getReporter()));
  tgt.setOnset(src.getOnset());
  tgt.setLastOccurence(src.getLastOccurrence());
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.AllergyIntolerance.AllergyIntoleranceReactionComponent t : src.getReaction())   tgt.addReaction(convertAllergyIntoleranceReactionComponent(t));
  return tgt;
}",0.1816184547784694
23730,"public org.hl7.fhir.dstu2.model.Age convertAge(org.hl7.fhir.dstu3.model.Age src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Age tgt=new org.hl7.fhir.dstu2.model.Age();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Age convertAge(org.hl7.fhir.dstu3.model.Age src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Age tgt=new org.hl7.fhir.dstu2.model.Age();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9811738648947952
23731,"public org.hl7.fhir.dstu2.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Identifier tgt=new org.hl7.fhir.dstu2.model.Identifier();
  copyElement(src,tgt);
  tgt.setUse(convertIdentifierUse(src.getUse()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSystem(src.getSystem());
  tgt.setValue(src.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Identifier tgt=new org.hl7.fhir.dstu2.model.Identifier();
  copyElement(src,tgt);
  tgt.setUse(convertIdentifierUse(src.getUse()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSystem(src.getSystem());
  tgt.setValue(src.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}",0.9849955869373344
23732,"public org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent convertEncounterParticipantComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterParticipantComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setIndividual(convertReference(src.getIndividual()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent convertEncounterParticipantComponent(org.hl7.fhir.dstu3.model.Encounter.EncounterParticipantComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent tgt=new org.hl7.fhir.dstu2.model.Encounter.EncounterParticipantComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getType())   tgt.addType(convertCodeableConcept(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setIndividual(convertReference(src.getIndividual()));
  return tgt;
}",0.9868522815158546
23733,"public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent convertNutritionOrderOralDietNutrientComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietNutrientComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent();
  copyElement(src,tgt);
  tgt.setModifier(convertCodeableConcept(src.getModifier()));
  tgt.setAmount(convertSimpleQuantity(src.getAmount()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent convertNutritionOrderOralDietNutrientComponent(org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestOralDietNutrientComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent tgt=new org.hl7.fhir.dstu2.model.NutritionOrder.NutritionOrderOralDietNutrientComponent();
  copyElement(src,tgt);
  tgt.setModifier(convertCodeableConcept(src.getModifier()));
  tgt.setAmount(convertSimpleQuantity(src.getAmount()));
  return tgt;
}",0.986279257465698
23734,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent convertConformanceSoftwareComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceSoftwareComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setVersion(src.getVersion());
  tgt.setReleaseDate(src.getReleaseDate());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent convertConformanceSoftwareComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceSoftwareComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceSoftwareComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setVersion(src.getVersion());
  tgt.setReleaseDate(src.getReleaseDate());
  return tgt;
}",0.9842446709916588
23735,"public org.hl7.fhir.dstu2.model.Provenance convertProvenance(org.hl7.fhir.dstu3.model.Provenance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Provenance tgt=new org.hl7.fhir.dstu2.model.Provenance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getTarget())   tgt.addTarget(convertReference(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setRecorded(src.getRecorded());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getReason())   tgt.addReason().addCoding(convertCoding(t));
  tgt.setActivity(new org.hl7.fhir.dstu2.model.CodeableConcept().addCoding(convertCoding(src.getActivity())));
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getPolicy())   tgt.addPolicy(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentComponent t : src.getAgent())   tgt.addAgent(convertProvenanceAgentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceEntityComponent t : src.getEntity())   tgt.addEntity(convertProvenanceEntityComponent(t));
  for (  org.hl7.fhir.dstu3.model.Signature t : src.getSignature())   tgt.addSignature(convertSignature(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Provenance convertProvenance(org.hl7.fhir.dstu3.model.Provenance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Provenance tgt=new org.hl7.fhir.dstu2.model.Provenance();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getTarget())   tgt.addTarget(convertReference(t));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setRecorded(src.getRecorded());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getReason())   tgt.addReason().addCoding(convertCoding(t));
  tgt.setActivity(new org.hl7.fhir.dstu2.model.CodeableConcept().addCoding(convertCoding(src.getActivity())));
  tgt.setLocation(convertReference(src.getLocation()));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getPolicy())   tgt.addPolicy(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentComponent t : src.getAgent())   tgt.addAgent(convertProvenanceAgentComponent(t));
  for (  org.hl7.fhir.dstu3.model.Provenance.ProvenanceEntityComponent t : src.getEntity())   tgt.addEntity(convertProvenanceEntityComponent(t));
  for (  org.hl7.fhir.dstu3.model.Signature t : src.getSignature())   tgt.addSignature(convertSignature(t));
  return tgt;
}",0.9932297889287136
23736,"public org.hl7.fhir.dstu2.model.List_ convertList(org.hl7.fhir.dstu3.model.ListResource src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.List_ tgt=new org.hl7.fhir.dstu2.model.List_();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setTitle(src.getTitle());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setStatus(convertListStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setOrderedBy(convertCodeableConcept(src.getOrderedBy()));
  tgt.setMode(convertListMode(src.getMode()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.ListResource.ListEntryComponent t : src.getEntry())   tgt.addEntry(convertListEntry(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.List_ convertList(org.hl7.fhir.dstu3.model.ListResource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.List_ tgt=new org.hl7.fhir.dstu2.model.List_();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setTitle(src.getTitle());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setStatus(convertListStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setOrderedBy(convertCodeableConcept(src.getOrderedBy()));
  tgt.setMode(convertListMode(src.getMode()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.ListResource.ListEntryComponent t : src.getEntry())   tgt.addEntry(convertListEntry(t));
  return tgt;
}",0.9919163100332856
23737,"public org.hl7.fhir.dstu2.model.Observation convertObservation(org.hl7.fhir.dstu3.model.Observation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation tgt=new org.hl7.fhir.dstu2.model.Observation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertObservationStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getCategory())   tgt.setCategory(convertCodeableConcept(c));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  tgt.setInterpretation(convertCodeableConcept(src.getInterpretation()));
  tgt.setComments(src.getComment());
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setSpecimen(convertReference(src.getSpecimen()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent t : src.getRelated())   tgt.addRelated(convertObservationRelatedComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent t : src.getComponent())   tgt.addComponent(convertObservationComponentComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Observation convertObservation(org.hl7.fhir.dstu3.model.Observation src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Observation tgt=new org.hl7.fhir.dstu2.model.Observation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertObservationStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getCategory())   tgt.setCategory(convertCodeableConcept(c));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  tgt.setInterpretation(convertCodeableConcept(src.getInterpretation()));
  tgt.setComments(src.getComment());
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setSpecimen(convertReference(src.getSpecimen()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent t : src.getRelated())   tgt.addRelated(convertObservationRelatedComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent t : src.getComponent())   tgt.addComponent(convertObservationComponentComponent(t));
  return tgt;
}",0.9955601984852442
23738,"public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent convertStructureDefinitionMappingComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComments());
  return tgt;
}","public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent convertStructureDefinitionMappingComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComments());
  return tgt;
}",0.986518636003172
23739,"public org.hl7.fhir.dstu2.model.SupplyDelivery convertSupplyDelivery(org.hl7.fhir.dstu3.model.SupplyDelivery src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyDelivery tgt=new org.hl7.fhir.dstu2.model.SupplyDelivery();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyDeliveryStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setSupplier(convertReference(src.getSupplier()));
  tgt.setWhenPrepared(convertPeriod(src.getWhenPrepared()));
  tgt.setTime(src.getTime());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.SupplyDelivery convertSupplyDelivery(org.hl7.fhir.dstu3.model.SupplyDelivery src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.SupplyDelivery tgt=new org.hl7.fhir.dstu2.model.SupplyDelivery();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyDeliveryStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setSupplier(convertReference(src.getSupplier()));
  tgt.setWhenPrepared(convertPeriod(src.getWhenPrepared()));
  tgt.setTime(src.getTime());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  return tgt;
}",0.9908355795148248
23740,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent convertTestScriptMetadataCapabilityComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent();
  copyElement(src,tgt);
  tgt.setRequired(src.getRequired());
  tgt.setValidated(src.getValidated());
  tgt.setDescription(src.getDescription());
  tgt.setDestination(src.getDestination());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getLink())   tgt.addLink(t.getValue());
  tgt.setConformance(convertReference(src.getConformance()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent convertTestScriptMetadataCapabilityComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptMetadataCapabilityComponent();
  copyElement(src,tgt);
  tgt.setRequired(src.getRequired());
  tgt.setValidated(src.getValidated());
  tgt.setDescription(src.getDescription());
  tgt.setDestination(src.getDestination());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getLink())   tgt.addLink(t.getValue());
  tgt.setConformance(convertReference(src.getConformance()));
  return tgt;
}",0.9892200380469244
23741,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent convertTestScriptSetupComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptSetupComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent t : src.getAction())   tgt.addAction(convertSetupActionComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent convertTestScriptSetupComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptSetupComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptSetupComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent t : src.getAction())   tgt.addAction(convertSetupActionComponent(t));
  return tgt;
}",0.984302862419206
23742,"public org.hl7.fhir.dstu2.model.Contract.TermComponent convertTermComponent(org.hl7.fhir.dstu3.model.Contract.TermComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.TermComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setIssued(src.getIssued());
  tgt.setApplies(convertPeriod(src.getApplies()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSubType(convertCodeableConcept(src.getSubType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getAction())   tgt.addAction(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getActionReason())   tgt.addActionReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermAgentComponent t : src.getAgent())   tgt.addActor(convertTermAgentComponent(t));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.Contract.TermValuedItemComponent t : src.getValuedItem())   tgt.addValuedItem(convertTermValuedItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermComponent t : src.getGroup())   tgt.addGroup(convertTermComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.TermComponent convertTermComponent(org.hl7.fhir.dstu3.model.Contract.TermComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.TermComponent tgt=new org.hl7.fhir.dstu2.model.Contract.TermComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setIssued(src.getIssued());
  tgt.setApplies(convertPeriod(src.getApplies()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSubType(convertCodeableConcept(src.getSubType()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getAction())   tgt.addAction(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getActionReason())   tgt.addActionReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermAgentComponent t : src.getAgent())   tgt.addActor(convertTermAgentComponent(t));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.Contract.TermValuedItemComponent t : src.getValuedItem())   tgt.addValuedItem(convertTermValuedItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Contract.TermComponent t : src.getGroup())   tgt.addGroup(convertTermComponent(t));
  return tgt;
}",0.9932991722506898
23743,"public org.hl7.fhir.dstu2.model.Attachment convertAttachment(org.hl7.fhir.dstu3.model.Attachment src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Attachment tgt=new org.hl7.fhir.dstu2.model.Attachment();
  copyElement(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setLanguage(src.getLanguage());
  tgt.setData(src.getData());
  tgt.setUrl(src.getUrl());
  tgt.setSize(src.getSize());
  tgt.setHash(src.getHash());
  tgt.setTitle(src.getTitle());
  tgt.setCreation(src.getCreation());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Attachment convertAttachment(org.hl7.fhir.dstu3.model.Attachment src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Attachment tgt=new org.hl7.fhir.dstu2.model.Attachment();
  copyElement(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setLanguage(src.getLanguage());
  tgt.setData(src.getData());
  tgt.setUrl(src.getUrl());
  tgt.setSize(src.getSize());
  tgt.setHash(src.getHash());
  tgt.setTitle(src.getTitle());
  tgt.setCreation(src.getCreation());
  return tgt;
}",0.9848619768477292
23744,"public org.hl7.fhir.dstu2.model.HealthcareService convertHealthcareService(org.hl7.fhir.dstu3.model.HealthcareService src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.HealthcareService tgt=new org.hl7.fhir.dstu2.model.HealthcareService();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setProvidedBy(convertReference(src.getProvidedBy()));
  tgt.setServiceCategory(convertCodeableConcept(src.getServiceCategory()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.addServiceType().setType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialty()) {
    if (!tgt.hasServiceType())     tgt.addServiceType();
    tgt.getServiceType().get(0).addSpecialty(convertCodeableConcept(t));
  }
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getLocation())   tgt.setLocation(convertReference(t));
  tgt.setServiceName(src.getServiceName());
  tgt.setComment(src.getComment());
  tgt.setExtraDetails(src.getExtraDetails());
  tgt.setPhoto(convertAttachment(src.getPhoto()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getCoverageArea())   tgt.addCoverageArea(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceProvisionCode())   tgt.addServiceProvisionCode(convertCodeableConcept(t));
  tgt.setEligibility(convertCodeableConcept(src.getEligibility()));
  tgt.setEligibilityNote(src.getEligibilityNote());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getProgramName())   tgt.addProgramName(t.getValue());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCharacteristic())   tgt.addCharacteristic(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReferralMethod())   tgt.addReferralMethod(convertCodeableConcept(t));
  tgt.setPublicKey(src.getPublicKey());
  tgt.setAppointmentRequired(src.getAppointmentRequired());
  for (  org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceAvailableTimeComponent t : src.getAvailableTime())   tgt.addAvailableTime(convertHealthcareServiceAvailableTimeComponent(t));
  for (  org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceNotAvailableComponent t : src.getNotAvailable())   tgt.addNotAvailable(convertHealthcareServiceNotAvailableComponent(t));
  tgt.setAvailabilityExceptions(src.getAvailabilityExceptions());
  return tgt;
}","public org.hl7.fhir.dstu2.model.HealthcareService convertHealthcareService(org.hl7.fhir.dstu3.model.HealthcareService src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.HealthcareService tgt=new org.hl7.fhir.dstu2.model.HealthcareService();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setProvidedBy(convertReference(src.getProvidedBy()));
  tgt.setServiceCategory(convertCodeableConcept(src.getServiceCategory()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceType())   tgt.addServiceType().setType(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getSpecialty()) {
    if (!tgt.hasServiceType())     tgt.addServiceType();
    tgt.getServiceType().get(0).addSpecialty(convertCodeableConcept(t));
  }
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getLocation())   tgt.setLocation(convertReference(t));
  tgt.setServiceName(src.getServiceName());
  tgt.setComment(src.getComment());
  tgt.setExtraDetails(src.getExtraDetails());
  tgt.setPhoto(convertAttachment(src.getPhoto()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getCoverageArea())   tgt.addCoverageArea(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getServiceProvisionCode())   tgt.addServiceProvisionCode(convertCodeableConcept(t));
  tgt.setEligibility(convertCodeableConcept(src.getEligibility()));
  tgt.setEligibilityNote(src.getEligibilityNote());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getProgramName())   tgt.addProgramName(t.getValue());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCharacteristic())   tgt.addCharacteristic(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReferralMethod())   tgt.addReferralMethod(convertCodeableConcept(t));
  tgt.setPublicKey(src.getPublicKey());
  tgt.setAppointmentRequired(src.getAppointmentRequired());
  for (  org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceAvailableTimeComponent t : src.getAvailableTime())   tgt.addAvailableTime(convertHealthcareServiceAvailableTimeComponent(t));
  for (  org.hl7.fhir.dstu3.model.HealthcareService.HealthcareServiceNotAvailableComponent t : src.getNotAvailable())   tgt.addNotAvailable(convertHealthcareServiceNotAvailableComponent(t));
  tgt.setAvailabilityExceptions(src.getAvailabilityExceptions());
  return tgt;
}",0.9967575815372878
23745,"public org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent convertOrganizationContactComponent(org.hl7.fhir.dstu3.model.Organization.OrganizationContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent tgt=new org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent();
  copyElement(src,tgt);
  tgt.setPurpose(convertCodeableConcept(src.getPurpose()));
  tgt.setName(convertHumanName(src.getName()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent convertOrganizationContactComponent(org.hl7.fhir.dstu3.model.Organization.OrganizationContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent tgt=new org.hl7.fhir.dstu2.model.Organization.OrganizationContactComponent();
  copyElement(src,tgt);
  tgt.setPurpose(convertCodeableConcept(src.getPurpose()));
  tgt.setName(convertHumanName(src.getName()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  tgt.setAddress(convertAddress(src.getAddress()));
  return tgt;
}",0.9879347054648688
23746,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent convertCodeSystem(org.hl7.fhir.dstu3.model.CodeSystem src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setCaseSensitive(src.getCaseSensitive());
  for (  ConceptDefinitionComponent cc : src.getConcept())   tgt.addConcept(convertCodeSystemConcept(src,cc));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent convertCodeSystem(org.hl7.fhir.dstu3.model.CodeSystem src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetCodeSystemComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setCaseSensitive(src.getCaseSensitive());
  for (  ConceptDefinitionComponent cc : src.getConcept())   tgt.addConcept(convertCodeSystemConcept(src,cc));
  return tgt;
}",0.985726280436608
23747,"public org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent convertProcessResponseNotesComponent(org.hl7.fhir.dstu3.model.ProcessResponse.ProcessResponseNotesComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent tgt=new org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setText(src.getText());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent convertProcessResponseNotesComponent(org.hl7.fhir.dstu3.model.ProcessResponse.ProcessResponseNotesComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent tgt=new org.hl7.fhir.dstu2.model.ProcessResponse.ProcessResponseNotesComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setText(src.getText());
  return tgt;
}",0.9838249286393912
23748,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent convertTestScriptVariableComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setHeaderField(src.getHeaderField());
  tgt.setPath(src.getPath());
  tgt.setSourceId(src.getSourceId());
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent convertTestScriptVariableComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptVariableComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setHeaderField(src.getHeaderField());
  tgt.setPath(src.getPath());
  tgt.setSourceId(src.getSourceId());
  return tgt;
}",0.9848888888888888
23749,"public org.hl7.fhir.dstu2.model.NutritionOrder convertNutritionOrder(org.hl7.fhir.dstu3.model.NutritionRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder tgt=new org.hl7.fhir.dstu2.model.NutritionOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertNutritionOrderStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateTime(src.getDateTime());
  tgt.setOrderer(convertReference(src.getOrderer()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAllergyIntolerance())   tgt.addAllergyIntolerance(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFoodPreferenceModifier())   tgt.addFoodPreferenceModifier(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getExcludeFoodModifier())   tgt.addExcludeFoodModifier(convertCodeableConcept(t));
  tgt.setOralDiet(convertNutritionOrderOralDietComponent(src.getOralDiet()));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestSupplementComponent t : src.getSupplement())   tgt.addSupplement(convertNutritionOrderSupplementComponent(t));
  tgt.setEnteralFormula(convertNutritionOrderEnteralFormulaComponent(src.getEnteralFormula()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.NutritionOrder convertNutritionOrder(org.hl7.fhir.dstu3.model.NutritionRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.NutritionOrder tgt=new org.hl7.fhir.dstu2.model.NutritionOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertNutritionOrderStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateTime(src.getDateTime());
  tgt.setOrderer(convertReference(src.getOrderer()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAllergyIntolerance())   tgt.addAllergyIntolerance(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFoodPreferenceModifier())   tgt.addFoodPreferenceModifier(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getExcludeFoodModifier())   tgt.addExcludeFoodModifier(convertCodeableConcept(t));
  tgt.setOralDiet(convertNutritionOrderOralDietComponent(src.getOralDiet()));
  for (  org.hl7.fhir.dstu3.model.NutritionRequest.NutritionRequestSupplementComponent t : src.getSupplement())   tgt.addSupplement(convertNutritionOrderSupplementComponent(t));
  tgt.setEnteralFormula(convertNutritionOrderEnteralFormulaComponent(src.getEnteralFormula()));
  return tgt;
}",0.9942078364565587
23750,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent convertValueSetExpansionParameterComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent convertValueSetExpansionParameterComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetExpansionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.9838862559241706
23751,"public org.hl7.fhir.dstu2.model.Contract.SignatoryComponent convertSignatoryComponent(org.hl7.fhir.dstu3.model.Contract.SignatoryComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Contract.SignatoryComponent tgt=new org.hl7.fhir.dstu2.model.Contract.SignatoryComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setParty(convertReference(src.getParty()));
  for (  org.hl7.fhir.dstu3.model.Signature t : src.getSignature())   tgt.setSignature(Base64.encodeBase64String(t.getBlob()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Contract.SignatoryComponent convertSignatoryComponent(org.hl7.fhir.dstu3.model.Contract.SignatoryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Contract.SignatoryComponent tgt=new org.hl7.fhir.dstu2.model.Contract.SignatoryComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setParty(convertReference(src.getParty()));
  for (  org.hl7.fhir.dstu3.model.Signature t : src.getSignature())   tgt.setSignature(Base64.encodeBase64String(t.getBlob()));
  return tgt;
}",0.9856054191363252
23752,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent convertCodeSystemDesignation(ConceptDefinitionDesignationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setLanguage(src.getLanguage());
  tgt.setValue(src.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent convertCodeSystemDesignation(ConceptDefinitionDesignationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setLanguage(src.getLanguage());
  tgt.setValue(src.getValue());
  return tgt;
}",0.9838249286393912
23753,"public org.hl7.fhir.dstu2.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Bundle tgt=new org.hl7.fhir.dstu2.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Bundle tgt=new org.hl7.fhir.dstu2.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}",0.9872659176029962
23754,"public org.hl7.fhir.dstu2.model.Range convertRange(org.hl7.fhir.dstu3.model.Range src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Range tgt=new org.hl7.fhir.dstu2.model.Range();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Range convertRange(org.hl7.fhir.dstu3.model.Range src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Range tgt=new org.hl7.fhir.dstu2.model.Range();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  return tgt;
}",0.9770580296896086
23755,"public org.hl7.fhir.dstu2.model.EligibilityRequest convertEligibilityRequest(org.hl7.fhir.dstu3.model.EligibilityRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EligibilityRequest tgt=new org.hl7.fhir.dstu2.model.EligibilityRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.EligibilityRequest convertEligibilityRequest(org.hl7.fhir.dstu3.model.EligibilityRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.EligibilityRequest tgt=new org.hl7.fhir.dstu2.model.EligibilityRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasProviderReference())   tgt.setProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getProvider()));
  if (src.hasOrganizationReference())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  return tgt;
}",0.9901105293775452
23756,"public org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent convertConditionEvidenceComponent(org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent tgt=new org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDetail())   tgt.addDetail(convertReference(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent convertConditionEvidenceComponent(org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent tgt=new org.hl7.fhir.dstu2.model.Condition.ConditionEvidenceComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDetail())   tgt.addDetail(convertReference(t));
  return tgt;
}",0.9850483729111698
23757,"public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent convertElementDefinitionBindingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBindingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setDescription(src.getDescription());
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent convertElementDefinitionBindingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setDescription(src.getDescription());
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}",0.9866247049567268
23758,"public org.hl7.fhir.dstu2.model.CodeableConcept convertCodeableConcept(org.hl7.fhir.dstu3.model.CodeableConcept src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CodeableConcept tgt=new org.hl7.fhir.dstu2.model.CodeableConcept();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCoding())   tgt.addCoding(convertCoding(t));
  tgt.setText(src.getText());
  return tgt;
}","public org.hl7.fhir.dstu2.model.CodeableConcept convertCodeableConcept(org.hl7.fhir.dstu3.model.CodeableConcept src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CodeableConcept tgt=new org.hl7.fhir.dstu2.model.CodeableConcept();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCoding())   tgt.addCoding(convertCoding(t));
  tgt.setText(src.getText());
  return tgt;
}",0.9808342728297632
23759,"public org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent convertClinicalImpressionFindingComponent(org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionFindingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent();
  copyElement(src,tgt);
  if (src.hasItemCodeableConcept())   try {
    tgt.setItem(convertCodeableConcept(src.getItemCodeableConcept()));
  }
 catch (  org.hl7.fhir.dstu3.exceptions.FHIRException e) {
  }
  tgt.setCause(src.getCause());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent convertClinicalImpressionFindingComponent(org.hl7.fhir.dstu3.model.ClinicalImpression.ClinicalImpressionFindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent tgt=new org.hl7.fhir.dstu2.model.ClinicalImpression.ClinicalImpressionFindingComponent();
  copyElement(src,tgt);
  if (src.hasItemCodeableConcept())   try {
    tgt.setItem(convertCodeableConcept(src.getItemCodeableConcept()));
  }
 catch (  org.hl7.fhir.dstu3.exceptions.FHIRException e) {
  }
  tgt.setCause(src.getCause());
  return tgt;
}",0.9878831076265148
23760,"public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent convertMedicationOrderDispenseRequestComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDispenseRequestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent();
  copyElement(src,tgt);
  tgt.setValidityPeriod(convertPeriod(src.getValidityPeriod()));
  tgt.setNumberOfRepeatsAllowed(src.getNumberOfRepeatsAllowed());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setExpectedSupplyDuration(convertDuration(src.getExpectedSupplyDuration()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent convertMedicationOrderDispenseRequestComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDispenseRequestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent();
  copyElement(src,tgt);
  tgt.setValidityPeriod(convertPeriod(src.getValidityPeriod()));
  tgt.setNumberOfRepeatsAllowed(src.getNumberOfRepeatsAllowed());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setExpectedSupplyDuration(convertDuration(src.getExpectedSupplyDuration()));
  return tgt;
}",0.9890393294648614
23761,"public org.hl7.fhir.dstu2.model.Device convertDevice(org.hl7.fhir.dstu3.model.Device src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Device tgt=new org.hl7.fhir.dstu2.model.Device();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setUdi(src.getUdiCarrier().getValue());
  tgt.setStatus(convertDeviceStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setLotNumber(src.getLotNumber());
  tgt.setManufacturer(src.getManufacturer());
  tgt.setManufactureDate(src.getManufactureDate());
  tgt.setExpiry(src.getExpirationDate());
  tgt.setModel(src.getModel());
  tgt.setVersion(src.getVersion());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setOwner(convertReference(src.getOwner()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getContact())   tgt.addContact(convertContactPoint(t));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Device convertDevice(org.hl7.fhir.dstu3.model.Device src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Device tgt=new org.hl7.fhir.dstu2.model.Device();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setUdi(src.getUdiCarrier().getValue());
  tgt.setStatus(convertDeviceStatus(src.getStatus()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setLotNumber(src.getLotNumber());
  tgt.setManufacturer(src.getManufacturer());
  tgt.setManufactureDate(src.getManufactureDate());
  tgt.setExpiry(src.getExpirationDate());
  tgt.setModel(src.getModel());
  tgt.setVersion(src.getVersion());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setOwner(convertReference(src.getOwner()));
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getContact())   tgt.addContact(convertContactPoint(t));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}",0.9928840519045624
23762,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent convertCodeSystemConcept(CodeSystem cs,ConceptDefinitionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent();
  copyElement(src,tgt);
  tgt.setAbstract(CodeSystemUtilities.isAbstract(cs,src));
  tgt.setCode(src.getCode());
  tgt.setDefinition(src.getDefinition());
  tgt.setDisplay(src.getDisplay());
  for (  ConceptDefinitionComponent cc : src.getConcept())   tgt.addConcept(convertCodeSystemConcept(cs,cc));
  for (  ConceptDefinitionDesignationComponent cc : src.getDesignation())   tgt.addDesignation(convertCodeSystemDesignation(cc));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent convertCodeSystemConcept(CodeSystem cs,ConceptDefinitionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptDefinitionComponent();
  copyElement(src,tgt);
  tgt.setAbstract(CodeSystemUtilities.isAbstract(cs,src));
  tgt.setCode(src.getCode());
  tgt.setDefinition(src.getDefinition());
  tgt.setDisplay(src.getDisplay());
  for (  ConceptDefinitionComponent cc : src.getConcept())   tgt.addConcept(convertCodeSystemConcept(cs,cc));
  for (  ConceptDefinitionDesignationComponent cc : src.getDesignation())   tgt.addDesignation(convertCodeSystemDesignation(cc));
  return tgt;
}",0.9891788669637174
23763,"public org.hl7.fhir.dstu2.model.Period convertPeriod(org.hl7.fhir.dstu3.model.Period src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Period tgt=new org.hl7.fhir.dstu2.model.Period();
  copyElement(src,tgt);
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Period convertPeriod(org.hl7.fhir.dstu3.model.Period src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Period tgt=new org.hl7.fhir.dstu2.model.Period();
  copyElement(src,tgt);
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  return tgt;
}",0.9743589743589745
23764,"public org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent convertValueSetComposeComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetComposeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getImport())   tgt.addImport(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getInclude())   tgt.addInclude(convertConceptSetComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getExclude())   tgt.addExclude(convertConceptSetComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent convertValueSetComposeComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetComposeComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getImport())   tgt.addImport(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getInclude())   tgt.addInclude(convertConceptSetComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getExclude())   tgt.addExclude(convertConceptSetComponent(t));
  return tgt;
}",0.9888084265964452
23765,"public org.hl7.fhir.dstu2.model.VisionPrescription convertVisionPrescription(org.hl7.fhir.dstu3.model.VisionPrescription src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.VisionPrescription tgt=new org.hl7.fhir.dstu2.model.VisionPrescription();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setReason(convertType(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent t : src.getDispense())   tgt.addDispense(convertVisionPrescriptionDispenseComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.VisionPrescription convertVisionPrescription(org.hl7.fhir.dstu3.model.VisionPrescription src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.VisionPrescription tgt=new org.hl7.fhir.dstu2.model.VisionPrescription();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setReason(convertType(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent t : src.getDispense())   tgt.addDispense(convertVisionPrescriptionDispenseComponent(t));
  return tgt;
}",0.9904761904761904
23766,"public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent convertStructureDefinitionSnapshotComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionSnapshotComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent convertStructureDefinitionSnapshotComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionSnapshotComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent tgt=new org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionSnapshotComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9863453815261044
23767,"public org.hl7.fhir.dstu2.model.CommunicationRequest convertCommunicationRequest(org.hl7.fhir.dstu3.model.CommunicationRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CommunicationRequest tgt=new org.hl7.fhir.dstu2.model.CommunicationRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSender(convertReference(src.getSender()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CommunicationRequest.CommunicationRequestPayloadComponent t : src.getPayload())   tgt.addPayload(convertCommunicationRequestPayloadComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getMedium())   tgt.addMedium(convertCodeableConcept(t));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setStatus(convertCommunicationRequestStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setScheduled(convertType(src.getScheduled()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  tgt.setRequestedOn(src.getRequestedOn());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.CommunicationRequest convertCommunicationRequest(org.hl7.fhir.dstu3.model.CommunicationRequest src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.CommunicationRequest tgt=new org.hl7.fhir.dstu2.model.CommunicationRequest();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setSender(convertReference(src.getSender()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRecipient())   tgt.addRecipient(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CommunicationRequest.CommunicationRequestPayloadComponent t : src.getPayload())   tgt.addPayload(convertCommunicationRequestPayloadComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getMedium())   tgt.addMedium(convertCodeableConcept(t));
  tgt.setRequester(convertReference(src.getRequester()));
  tgt.setStatus(convertCommunicationRequestStatus(src.getStatus()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setScheduled(convertType(src.getScheduled()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  tgt.setRequestedOn(src.getRequestedOn());
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  return tgt;
}",0.9943048576214404
23768,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent convertConformanceRestComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent();
  copyElement(src,tgt);
  tgt.setMode(convertRestfulConformanceMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setSecurity(convertConformanceRestSecurityComponent(src.getSecurity()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent t : src.getResource())   tgt.addResource(convertConformanceRestResourceComponent(t));
  boolean batch=false;
  boolean transaction=false;
  for (  org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent t : src.getInteraction()) {
    if (t.getCode().equals(SystemRestfulInteraction.BATCH))     batch=true;
 else     tgt.addInteraction(convertSystemInteractionComponent(t));
    if (t.getCode().equals(SystemRestfulInteraction.TRANSACTION))     transaction=true;
  }
  if (batch)   tgt.setTransactionMode(transaction ? org.hl7.fhir.dstu2.model.Conformance.TransactionMode.BOTH : org.hl7.fhir.dstu2.model.Conformance.TransactionMode.BATCH);
 else   tgt.setTransactionMode(transaction ? org.hl7.fhir.dstu2.model.Conformance.TransactionMode.TRANSACTION : org.hl7.fhir.dstu2.model.Conformance.TransactionMode.NOTSUPPORTED);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent t : src.getOperation())   tgt.addOperation(convertConformanceRestOperationComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getCompartment())   tgt.addCompartment(t.getValue());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent convertConformanceRestComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceRestComponent();
  copyElement(src,tgt);
  tgt.setMode(convertRestfulConformanceMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setSecurity(convertConformanceRestSecurityComponent(src.getSecurity()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent t : src.getResource())   tgt.addResource(convertConformanceRestResourceComponent(t));
  boolean batch=false;
  boolean transaction=false;
  for (  org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent t : src.getInteraction()) {
    if (t.getCode().equals(SystemRestfulInteraction.BATCH))     batch=true;
 else     tgt.addInteraction(convertSystemInteractionComponent(t));
    if (t.getCode().equals(SystemRestfulInteraction.TRANSACTION))     transaction=true;
  }
  if (batch)   tgt.setTransactionMode(transaction ? org.hl7.fhir.dstu2.model.Conformance.TransactionMode.BOTH : org.hl7.fhir.dstu2.model.Conformance.TransactionMode.BATCH);
 else   tgt.setTransactionMode(transaction ? org.hl7.fhir.dstu2.model.Conformance.TransactionMode.TRANSACTION : org.hl7.fhir.dstu2.model.Conformance.TransactionMode.NOTSUPPORTED);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent t : src.getOperation())   tgt.addOperation(convertConformanceRestOperationComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getCompartment())   tgt.addCompartment(t.getValue());
  return tgt;
}",0.995686374016747
23769,"public org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent convertTestScriptContactComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent convertTestScriptContactComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent tgt=new org.hl7.fhir.dstu2.model.TestScript.TestScriptContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9847259658580412
23770,"public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent convertElementDefinitionMappingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setLanguage(src.getLanguage());
  tgt.setMap(src.getMap());
  return tgt;
}","public org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent convertElementDefinitionMappingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2.model.ElementDefinition.ElementDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setLanguage(src.getLanguage());
  tgt.setMap(src.getMap());
  return tgt;
}",0.9854077253218884
23771,"public org.hl7.fhir.dstu2.model.Coding convertCoding(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Coding tgt=new org.hl7.fhir.dstu2.model.Coding();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setUserSelected(src.getUserSelected());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Coding convertCoding(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Coding tgt=new org.hl7.fhir.dstu2.model.Coding();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setUserSelected(src.getUserSelected());
  return tgt;
}",0.9812568908489526
23772,"public org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent convertConceptReferenceComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptReferenceDesignationComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent convertConceptReferenceComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent tgt=new org.hl7.fhir.dstu2.model.ValueSet.ConceptReferenceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptReferenceDesignationComponent(t));
  return tgt;
}",0.9868114817688132
23773,"public org.hl7.fhir.dstu2.model.RiskAssessment convertRiskAssessment(org.hl7.fhir.dstu3.model.RiskAssessment src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.RiskAssessment tgt=new org.hl7.fhir.dstu2.model.RiskAssessment();
  copyDomainResource(src,tgt);
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCondition(convertReference(src.getCondition()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getBasis())   tgt.addBasis(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.RiskAssessment.RiskAssessmentPredictionComponent t : src.getPrediction())   tgt.addPrediction(convertRiskAssessmentPredictionComponent(t));
  tgt.setMitigation(src.getMitigation());
  return tgt;
}","public org.hl7.fhir.dstu2.model.RiskAssessment convertRiskAssessment(org.hl7.fhir.dstu3.model.RiskAssessment src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.RiskAssessment tgt=new org.hl7.fhir.dstu2.model.RiskAssessment();
  copyDomainResource(src,tgt);
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setCondition(convertReference(src.getCondition()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setPerformer(convertReference(src.getPerformer()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getBasis())   tgt.addBasis(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.RiskAssessment.RiskAssessmentPredictionComponent t : src.getPrediction())   tgt.addPrediction(convertRiskAssessmentPredictionComponent(t));
  tgt.setMitigation(src.getMitigation());
  return tgt;
}",0.9913309535951046
23774,"public org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent convertConformanceDocumentComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent();
  copyElement(src,tgt);
  tgt.setMode(convertDocumentMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent convertConformanceDocumentComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent tgt=new org.hl7.fhir.dstu2.model.Conformance.ConformanceDocumentComponent();
  copyElement(src,tgt);
  tgt.setMode(convertDocumentMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}",0.9854077253218884
23775,"public org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent convertRiskAssessmentPredictionComponent(org.hl7.fhir.dstu3.model.RiskAssessment.RiskAssessmentPredictionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent tgt=new org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent();
  copyElement(src,tgt);
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  tgt.setProbability(convertType(src.getProbability()));
  tgt.setRelativeRisk(src.getRelativeRisk());
  tgt.setWhen(convertType(src.getWhen()));
  tgt.setRationale(src.getRationale());
  return tgt;
}","public org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent convertRiskAssessmentPredictionComponent(org.hl7.fhir.dstu3.model.RiskAssessment.RiskAssessmentPredictionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent tgt=new org.hl7.fhir.dstu2.model.RiskAssessment.RiskAssessmentPredictionComponent();
  copyElement(src,tgt);
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  tgt.setProbability(convertType(src.getProbability()));
  tgt.setRelativeRisk(src.getRelativeRisk());
  tgt.setWhen(convertType(src.getWhen()));
  tgt.setRationale(src.getRationale());
  return tgt;
}",0.9880701754385964
23776,"public org.hl7.fhir.dstu2.model.Procedure convertProcedure(org.hl7.fhir.dstu3.model.Procedure src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Procedure tgt=new org.hl7.fhir.dstu2.model.Procedure();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertProcedureStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setNotPerformed(src.getNotPerformed());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotPerformed())   tgt.addReasonNotPerformed(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  tgt.setReason(convertType(src.getReasonCodeFirstRep()));
  for (  org.hl7.fhir.dstu3.model.Procedure.ProcedurePerformerComponent t : src.getPerformer())   tgt.addPerformer(convertProcedurePerformerComponent(t));
  tgt.setPerformed(convertType(src.getPerformed()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReport())   tgt.addReport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getComplication())   tgt.addComplication(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFollowUp())   tgt.addFollowUp(convertCodeableConcept(t));
  tgt.setRequest(convertReference(src.getRequest()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNotes())   tgt.addNotes(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Procedure.ProcedureFocalDeviceComponent t : src.getFocalDevice())   tgt.addFocalDevice(convertProcedureFocalDeviceComponent(t));
  return tgt;
}","public org.hl7.fhir.dstu2.model.Procedure convertProcedure(org.hl7.fhir.dstu3.model.Procedure src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Procedure tgt=new org.hl7.fhir.dstu2.model.Procedure();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertProcedureStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setNotPerformed(src.getNotPerformed());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotPerformed())   tgt.addReasonNotPerformed(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  tgt.setReason(convertType(src.getReasonCodeFirstRep()));
  for (  org.hl7.fhir.dstu3.model.Procedure.ProcedurePerformerComponent t : src.getPerformer())   tgt.addPerformer(convertProcedurePerformerComponent(t));
  tgt.setPerformed(convertType(src.getPerformed()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setLocation(convertReference(src.getLocation()));
  tgt.setOutcome(convertCodeableConcept(src.getOutcome()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReport())   tgt.addReport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getComplication())   tgt.addComplication(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getFollowUp())   tgt.addFollowUp(convertCodeableConcept(t));
  tgt.setRequest(convertReference(src.getRequest()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNotes())   tgt.addNotes(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Procedure.ProcedureFocalDeviceComponent t : src.getFocalDevice())   tgt.addFocalDevice(convertProcedureFocalDeviceComponent(t));
  return tgt;
}",0.995850622406639
23777,"public org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent convertProvenanceAgentRelatedAgentComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentRelatedAgentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setTarget(src.getTarget());
  return tgt;
}","public org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent convertProvenanceAgentRelatedAgentComponent(org.hl7.fhir.dstu3.model.Provenance.ProvenanceAgentRelatedAgentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent tgt=new org.hl7.fhir.dstu2.model.Provenance.ProvenanceAgentRelatedAgentComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setTarget(src.getTarget());
  return tgt;
}",0.9846431797651308
23778,"public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent convertQuestionnaireItemEnableWhenComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemEnableWhenComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent();
  copyElement(src,tgt);
  tgt.setQuestion(src.getQuestion());
  tgt.setAnswered(src.getHasAnswer());
  tgt.setAnswer(convertType(src.getAnswer()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent convertQuestionnaireItemEnableWhenComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemEnableWhenComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemEnableWhenComponent();
  copyElement(src,tgt);
  tgt.setQuestion(src.getQuestion());
  tgt.setAnswered(src.getHasAnswer());
  tgt.setAnswer(convertType(src.getAnswer()));
  return tgt;
}",0.9864325618515564
23779,"public static org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent convertNamingSystemUniqueIdComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent();
  copyElement(src,tgt);
  tgt.setType(convertNamingSystemIdentifierType(src.getType()));
  tgt.setValue(src.getValue());
  tgt.setPreferred(src.getPreferred());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent convertNamingSystemUniqueIdComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemUniqueIdComponent();
  copyElement(src,tgt);
  tgt.setType(convertNamingSystemIdentifierType(src.getType()));
  tgt.setValue(src.getValue());
  tgt.setPreferred(src.getPreferred());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9869130100076984
23780,"public static org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent convertConceptMapContactComponent(org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent convertConceptMapContactComponent(org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.ConceptMapContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9853826311263972
23781,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent convertConformanceMessagingComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent t : src.getEndpoint())   tgt.addEndpoint(convertConformanceMessagingEndpointComponent(t));
  tgt.setReliableCache(src.getReliableCache());
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent t : src.getEvent())   tgt.addEvent(convertConformanceMessagingEventComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent convertConformanceMessagingComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent t : src.getEndpoint())   tgt.addEndpoint(convertConformanceMessagingEndpointComponent(t));
  tgt.setReliableCache(src.getReliableCache());
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent t : src.getEvent())   tgt.addEvent(convertConformanceMessagingEventComponent(t));
  return tgt;
}",0.9904868494683828
23782,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent convertImplementationGuideContactComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent convertImplementationGuideContactComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9871698113207548
23783,"public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent convertOperationDefinitionContactComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent convertOperationDefinitionContactComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9871698113207548
23784,"public static org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent convertSystemInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertSystemRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent convertSystemInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.SystemInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertSystemRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9846984698469848
23785,"public static org.hl7.fhir.dstu2016may.model.Duration convertDuration(org.hl7.fhir.dstu3.model.Duration src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Duration tgt=new org.hl7.fhir.dstu2016may.model.Duration();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Duration convertDuration(org.hl7.fhir.dstu3.model.Duration src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Duration tgt=new org.hl7.fhir.dstu2016may.model.Duration();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9830508474576272
23786,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent convertImplementationGuidePackageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent t : src.getResource())   tgt.addResource(convertImplementationGuidePackageResourceComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent convertImplementationGuidePackageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent t : src.getResource())   tgt.addResource(convertImplementationGuidePackageResourceComponent(t));
  return tgt;
}",0.989247311827957
23787,"public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent convertCompartmentDefinitionContactComponent(org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent convertCompartmentDefinitionContactComponent(org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9875091844232182
23788,"public static org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent convertOtherElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent();
  copyElement(src,tgt);
  tgt.setElement(src.getProperty());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent convertOtherElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.OtherElementComponent();
  copyElement(src,tgt);
  tgt.setElement(src.getProperty());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9835430784123912
23789,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent convertElementDefinitionSlicingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionSlicingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getDiscriminator())   tgt.addDiscriminator(t.getValue());
  tgt.setDescription(src.getDescription());
  tgt.setOrdered(src.getOrdered());
  tgt.setRules(convertSlicingRules(src.getRules()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent convertElementDefinitionSlicingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionSlicingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionSlicingComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getDiscriminator())   tgt.addDiscriminator(t.getValue());
  tgt.setDescription(src.getDescription());
  tgt.setOrdered(src.getOrdered());
  tgt.setRules(convertSlicingRules(src.getRules()));
  return tgt;
}",0.988628762541806
23790,"public static org.hl7.fhir.dstu2016may.model.SimpleQuantity convertSimpleQuantity(org.hl7.fhir.dstu3.model.SimpleQuantity src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.SimpleQuantity tgt=new org.hl7.fhir.dstu2016may.model.SimpleQuantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.SimpleQuantity convertSimpleQuantity(org.hl7.fhir.dstu3.model.SimpleQuantity src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.SimpleQuantity tgt=new org.hl7.fhir.dstu2016may.model.SimpleQuantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9840075258701788
23791,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent convertConceptDefinitionDesignationComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionDesignationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent convertConceptDefinitionDesignationComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionDesignationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.9860312243221035
23792,"public static org.hl7.fhir.dstu2016may.model.NamingSystem convertNamingSystem(org.hl7.fhir.dstu3.model.NamingSystem src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem();
  copyDomainResource(src,tgt);
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertNamingSystemType(src.getKind()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent t : src.getContact())   tgt.addContact(convertNamingSystemContactComponent(t));
  tgt.setResponsible(src.getResponsible());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setUsage(src.getUsage());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent t : src.getUniqueId())   tgt.addUniqueId(convertNamingSystemUniqueIdComponent(t));
  tgt.setReplacedBy(convertReference(src.getReplacedBy()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.NamingSystem convertNamingSystem(org.hl7.fhir.dstu3.model.NamingSystem src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem();
  copyDomainResource(src,tgt);
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertNamingSystemType(src.getKind()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent t : src.getContact())   tgt.addContact(convertNamingSystemContactComponent(t));
  tgt.setResponsible(src.getResponsible());
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setUsage(src.getUsage());
  for (  org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemUniqueIdComponent t : src.getUniqueId())   tgt.addUniqueId(convertNamingSystemUniqueIdComponent(t));
  tgt.setReplacedBy(convertReference(src.getReplacedBy()));
  return tgt;
}",0.9930866205774704
23793,"public static org.hl7.fhir.dstu2016may.model.Annotation convertAnnotation(org.hl7.fhir.dstu3.model.Annotation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Annotation tgt=new org.hl7.fhir.dstu2016may.model.Annotation();
  copyElement(src,tgt);
  tgt.setAuthor(convertType(src.getAuthor()));
  tgt.setTime(src.getTime());
  tgt.setText(src.getText());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Annotation convertAnnotation(org.hl7.fhir.dstu3.model.Annotation src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Annotation tgt=new org.hl7.fhir.dstu2016may.model.Annotation();
  copyElement(src,tgt);
  tgt.setAuthor(convertType(src.getAuthor()));
  tgt.setTime(src.getTime());
  tgt.setText(src.getText());
  return tgt;
}",0.9799291617473436
23794,"public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent convertOperationDefinitionParameterBindingComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}",0.9874908020603383
23795,"public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseItemComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent convertQuestionnaireResponseItemComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  tgt.setText(src.getText());
  tgt.setSubject(convertReference(src.getSubject()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent t : src.getAnswer())   tgt.addAnswer(convertQuestionnaireResponseItemAnswerComponent(t));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}",0.991504247876062
23796,"public static org.hl7.fhir.dstu2016may.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeSystem)   return convertCodeSystem((org.hl7.fhir.dstu3.model.CodeSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CompartmentDefinition)   return convertCompartmentDefinition((org.hl7.fhir.dstu3.model.CompartmentDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public static org.hl7.fhir.dstu2016may.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeSystem)   return convertCodeSystem((org.hl7.fhir.dstu3.model.CodeSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CompartmentDefinition)   return convertCompartmentDefinition((org.hl7.fhir.dstu3.model.CompartmentDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9969691567124264
23797,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent convertElementDefinitionBaseComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBaseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent convertElementDefinitionBaseComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBaseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBaseComponent();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  return tgt;
}",0.9852045256744996
23798,"public static org.hl7.fhir.dstu2016may.model.Timing convertTiming(org.hl7.fhir.dstu3.model.Timing src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Timing tgt=new org.hl7.fhir.dstu2016may.model.Timing();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.DateTimeType t : src.getEvent())   tgt.addEvent(t.getValue());
  tgt.setRepeat(convertTimingRepeatComponent(src.getRepeat()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Timing convertTiming(org.hl7.fhir.dstu3.model.Timing src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Timing tgt=new org.hl7.fhir.dstu2016may.model.Timing();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.DateTimeType t : src.getEvent())   tgt.addEvent(t.getValue());
  tgt.setRepeat(convertTimingRepeatComponent(src.getRepeat()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  return tgt;
}",0.9833822091886608
23799,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent convertConceptPropertyComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptPropertyComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent convertConceptPropertyComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptPropertyComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionPropertyComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.984126984126984
23800,"public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  tgt.setType(src.getType());
  tgt.setSearchType(convertSearchParamType(src.getSearchType()));
  tgt.setProfile(convertReference(src.getProfile()));
  tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent convertOperationDefinitionParameterComponent(org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition.OperationDefinitionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setUse(convertOperationParameterUse(src.getUse()));
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setDocumentation(src.getDocumentation());
  tgt.setType(src.getType());
  tgt.setSearchType(convertSearchParamType(src.getSearchType()));
  tgt.setProfile(convertReference(src.getProfile()));
  tgt.setBinding(convertOperationDefinitionParameterBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getPart())   tgt.addPart(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.9925274725274724
23801,"public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent convertBundleEntrySearchComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntrySearchComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent();
  copyElement(src,tgt);
  tgt.setMode(convertSearchEntryMode(src.getMode()));
  tgt.setScore(src.getScore());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent convertBundleEntrySearchComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntrySearchComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntrySearchComponent();
  copyElement(src,tgt);
  tgt.setMode(convertSearchEntryMode(src.getMode()));
  tgt.setScore(src.getScore());
  return tgt;
}",0.9833496571988248
23802,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent convertImplementationGuideGlobalComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent convertImplementationGuideGlobalComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideGlobalComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}",0.9858451290591174
23803,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent convertPropertyComponent(org.hl7.fhir.dstu3.model.CodeSystem.PropertyComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDescription(src.getDescription());
  tgt.setType(convertPropertyType(src.getType()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent convertPropertyComponent(org.hl7.fhir.dstu3.model.CodeSystem.PropertyComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemPropertyComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDescription(src.getDescription());
  tgt.setType(convertPropertyType(src.getType()));
  return tgt;
}",0.9845594913714804
23804,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent convertTestScriptDestinationComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptDestinationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent();
  copyElement(src,tgt);
  tgt.setIndex(src.getIndex());
  tgt.setProfile(convertCoding(src.getProfile()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent convertTestScriptDestinationComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptDestinationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptDestinationComponent();
  copyElement(src,tgt);
  tgt.setIndex(src.getIndex());
  tgt.setProfile(convertCoding(src.getProfile()));
  return tgt;
}",0.984360625574977
23805,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent convertImplementationGuideDependencyComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent();
  copyElement(src,tgt);
  tgt.setType(convertGuideDependencyType(src.getType()));
  tgt.setUri(src.getUri());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent convertImplementationGuideDependencyComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuideDependencyComponent();
  copyElement(src,tgt);
  tgt.setType(convertGuideDependencyType(src.getType()));
  tgt.setUri(src.getUri());
  return tgt;
}",0.9863453815261044
23806,"public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  tgt.setResource(convertResource(src.getResource()));
  tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent convertBundleEntryComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  tgt.setFullUrl(src.getFullUrl());
  tgt.setResource(convertResource(src.getResource()));
  tgt.setSearch(convertBundleEntrySearchComponent(src.getSearch()));
  tgt.setRequest(convertBundleEntryRequestComponent(src.getRequest()));
  tgt.setResponse(convertBundleEntryResponseComponent(src.getResponse()));
  return tgt;
}",0.9897280966767372
23807,"public static org.hl7.fhir.dstu2016may.model.Money convertMoney(org.hl7.fhir.dstu3.model.Money src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Money tgt=new org.hl7.fhir.dstu2016may.model.Money();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Money convertMoney(org.hl7.fhir.dstu3.model.Money src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Money tgt=new org.hl7.fhir.dstu2016may.model.Money();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9825282631038028
23808,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide convertImplementationGuide(org.hl7.fhir.dstu3.model.ImplementationGuide src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent t : src.getContact())   tgt.addContact(convertImplementationGuideContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent t : src.getDependency())   tgt.addDependency(convertImplementationGuideDependencyComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent t : src.getPackage())   tgt.addPackage(convertImplementationGuidePackageComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent t : src.getGlobal())   tgt.addGlobal(convertImplementationGuideGlobalComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getBinary())   tgt.addBinary(t.getValue());
  tgt.setPage(convertImplementationGuidePageComponent(src.getPage()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide convertImplementationGuide(org.hl7.fhir.dstu3.model.ImplementationGuide src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideContactComponent t : src.getContact())   tgt.addContact(convertImplementationGuideContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideDependencyComponent t : src.getDependency())   tgt.addDependency(convertImplementationGuideDependencyComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageComponent t : src.getPackage())   tgt.addPackage(convertImplementationGuidePackageComponent(t));
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuideGlobalComponent t : src.getGlobal())   tgt.addGlobal(convertImplementationGuideGlobalComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getBinary())   tgt.addBinary(t.getValue());
  tgt.setPage(convertImplementationGuidePageComponent(src.getPage()));
  return tgt;
}",0.99522069159404
23809,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent convertTypeRefComponent(org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.addProfile(src.getProfile());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.AggregationMode> t : src.getAggregation())   tgt.addAggregation(convertAggregationMode(t.getValue()));
  tgt.setVersioning(convertReferenceVersionRules(src.getVersioning()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent convertTypeRefComponent(org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.TypeRefComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.addProfile(src.getProfile());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.AggregationMode> t : src.getAggregation())   tgt.addAggregation(convertAggregationMode(t.getValue()));
  tgt.setVersioning(convertReferenceVersionRules(src.getVersioning()));
  return tgt;
}",0.9886439545758184
23810,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent convertElementDefinitionConstraintComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent();
  copyElement(src,tgt);
  tgt.setKey(src.getKey());
  tgt.setRequirements(src.getRequirements());
  tgt.setSeverity(convertConstraintSeverity(src.getSeverity()));
  tgt.setHuman(src.getHuman());
  tgt.setExpression(src.getExpression());
  tgt.setXpath(src.getXpath());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent convertElementDefinitionConstraintComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionConstraintComponent();
  copyElement(src,tgt);
  tgt.setKey(src.getKey());
  tgt.setRequirements(src.getRequirements());
  tgt.setSeverity(convertConstraintSeverity(src.getSeverity()));
  tgt.setHuman(src.getHuman());
  tgt.setExpression(src.getExpression());
  tgt.setXpath(src.getXpath());
  return tgt;
}",0.9888670595939753
23811,"public static org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent convertDataElementContactComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent tgt=new org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent convertDataElementContactComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent tgt=new org.hl7.fhir.dstu2016may.model.DataElement.DataElementContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9856054191363252
23812,"public static org.hl7.fhir.dstu2016may.model.Binary convertBinary(org.hl7.fhir.dstu3.model.Binary src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Binary tgt=new org.hl7.fhir.dstu2016may.model.Binary();
  copyResource(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setContent(src.getContent());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Binary convertBinary(org.hl7.fhir.dstu3.model.Binary src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Binary tgt=new org.hl7.fhir.dstu2016may.model.Binary();
  copyResource(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setContent(src.getContent());
  return tgt;
}",0.9774834437086092
23813,"public static org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent convertVisionPrescriptionDispenseComponent(org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent tgt=new org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent();
  copyElement(src,tgt);
  tgt.setProduct(convertCoding(src.getProduct()));
  tgt.setEye(convertVisionEyes(src.getEye()));
  tgt.setSphere(src.getSphere());
  tgt.setCylinder(src.getCylinder());
  tgt.setAxis(src.getAxis());
  tgt.setPrism(src.getPrism());
  tgt.setBase(convertVisionBase(src.getBase()));
  tgt.setAdd(src.getAdd());
  tgt.setPower(src.getPower());
  tgt.setBackCurve(src.getBackCurve());
  tgt.setDiameter(src.getDiameter());
  tgt.setDuration(convertSimpleQuantity(src.getDuration()));
  tgt.setColor(src.getColor());
  tgt.setBrand(src.getBrand());
  tgt.setNotes(src.getNotes());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent convertVisionPrescriptionDispenseComponent(org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent tgt=new org.hl7.fhir.dstu2016may.model.VisionPrescription.VisionPrescriptionDispenseComponent();
  copyElement(src,tgt);
  tgt.setProduct(convertCoding(src.getProduct()));
  tgt.setEye(convertVisionEyes(src.getEye()));
  tgt.setSphere(src.getSphere());
  tgt.setCylinder(src.getCylinder());
  tgt.setAxis(src.getAxis());
  tgt.setPrism(src.getPrism());
  tgt.setBase(convertVisionBase(src.getBase()));
  tgt.setAdd(src.getAdd());
  tgt.setPower(src.getPower());
  tgt.setBackCurve(src.getBackCurve());
  tgt.setDiameter(src.getDiameter());
  tgt.setDuration(convertSimpleQuantity(src.getDuration()));
  tgt.setColor(src.getColor());
  tgt.setBrand(src.getBrand());
  tgt.setNotes(src.getNotes());
  return tgt;
}",0.9922267946959304
23814,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent convertValueSetContactComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent convertValueSetContactComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9849157054126
23815,"public static org.hl7.fhir.dstu2016may.model.Signature convertSignature(org.hl7.fhir.dstu3.model.Signature src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Signature tgt=new org.hl7.fhir.dstu2016may.model.Signature();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  tgt.setWhen(src.getWhen());
  tgt.setWho(convertType(src.getWho()));
  tgt.setContentType(src.getContentType());
  tgt.setBlob(src.getBlob());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Signature convertSignature(org.hl7.fhir.dstu3.model.Signature src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Signature tgt=new org.hl7.fhir.dstu2016may.model.Signature();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getType())   tgt.addType(convertCoding(t));
  tgt.setWhen(src.getWhen());
  tgt.setWho(convertType(src.getWho()));
  tgt.setContentType(src.getContentType());
  tgt.setBlob(src.getBlob());
  return tgt;
}",0.9845313921747044
23816,"public static org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent convertTimingRepeatComponent(org.hl7.fhir.dstu3.model.Timing.TimingRepeatComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent tgt=new org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent();
  copyElement(src,tgt);
  tgt.setBounds(convertType(src.getBounds()));
  tgt.setCount(src.getCount());
  tgt.setCountMax(src.getCountMax());
  tgt.setDuration(src.getDuration());
  tgt.setDurationMax(src.getDurationMax());
  tgt.setDurationUnit(convertUnitsOfTime(src.getDurationUnit()));
  tgt.setFrequency(src.getFrequency());
  tgt.setFrequencyMax(src.getFrequencyMax());
  tgt.setPeriod(src.getPeriod());
  tgt.setPeriodMax(src.getPeriodMax());
  tgt.setPeriodUnit(convertUnitsOfTime(src.getPeriodUnit()));
  tgt.setWhen(convertEventTiming(src.getWhen()));
  tgt.setOffset(src.getOffset());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent convertTimingRepeatComponent(org.hl7.fhir.dstu3.model.Timing.TimingRepeatComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent tgt=new org.hl7.fhir.dstu2016may.model.Timing.TimingRepeatComponent();
  copyElement(src,tgt);
  tgt.setBounds(convertType(src.getBounds()));
  tgt.setCount(src.getCount());
  tgt.setCountMax(src.getCountMax());
  tgt.setDuration(src.getDuration());
  tgt.setDurationMax(src.getDurationMax());
  tgt.setDurationUnit(convertUnitsOfTime(src.getDurationUnit()));
  tgt.setFrequency(src.getFrequency());
  tgt.setFrequencyMax(src.getFrequencyMax());
  tgt.setPeriod(src.getPeriod());
  tgt.setPeriodMax(src.getPeriodMax());
  tgt.setPeriodUnit(convertUnitsOfTime(src.getPeriodUnit()));
  tgt.setWhen(convertEventTiming(src.getWhen()));
  tgt.setOffset(src.getOffset());
  return tgt;
}",0.9912416280267904
23817,"public static org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent convertSourceElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent();
  copyElement(src,tgt);
  tgt.setSystem(g.getSource());
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent t : src.getTarget())   tgt.addTarget(convertTargetElementComponent(t,g));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent convertSourceElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.SourceElementComponent();
  copyElement(src,tgt);
  tgt.setSystem(g.getSource());
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent t : src.getTarget())   tgt.addTarget(convertTargetElementComponent(t,g));
  return tgt;
}",0.9876363636363636
23818,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent convertValueSetExpansionContainsComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setAbstract(src.getAbstract());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent convertValueSetExpansionContainsComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionContainsComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setAbstract(src.getAbstract());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}",0.9895384615384616
23819,"public static org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent convertDataElementMappingComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComment(src.getComment());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent convertDataElementMappingComponent(org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.DataElement.DataElementMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComment(src.getComment());
  return tgt;
}",0.9853826311263972
23820,"public static org.hl7.fhir.dstu2016may.model.HumanName convertHumanName(org.hl7.fhir.dstu3.model.HumanName src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.HumanName tgt=new org.hl7.fhir.dstu2016may.model.HumanName();
  copyElement(src,tgt);
  tgt.setUse(convertNameUse(src.getUse()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getFamily())   tgt.addFamily(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getGiven())   tgt.addGiven(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPrefix())   tgt.addPrefix(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSuffix())   tgt.addSuffix(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.HumanName convertHumanName(org.hl7.fhir.dstu3.model.HumanName src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.HumanName tgt=new org.hl7.fhir.dstu2016may.model.HumanName();
  copyElement(src,tgt);
  tgt.setUse(convertNameUse(src.getUse()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getFamily())   tgt.addFamily(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getGiven())   tgt.addGiven(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPrefix())   tgt.addPrefix(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSuffix())   tgt.addSuffix(t.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9896404631322364
23821,"public static org.hl7.fhir.dstu2016may.model.Narrative convertNarrative(org.hl7.fhir.dstu3.model.Narrative src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Narrative tgt=new org.hl7.fhir.dstu2016may.model.Narrative();
  copyElement(src,tgt);
  tgt.setStatus(convertNarrativeStatus(src.getStatus()));
  tgt.setDiv(src.getDiv());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Narrative convertNarrative(org.hl7.fhir.dstu3.model.Narrative src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Narrative tgt=new org.hl7.fhir.dstu2016may.model.Narrative();
  copyElement(src,tgt);
  tgt.setStatus(convertNarrativeStatus(src.getStatus()));
  tgt.setDiv(src.getDiv());
  return tgt;
}",0.978616352201258
23822,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent convertTestActionComponent(org.hl7.fhir.dstu3.model.TestScript.TestActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent convertTestActionComponent(org.hl7.fhir.dstu3.model.TestScript.TestActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}",0.9846153846153848
23823,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent convertConceptReferenceDesignationComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent convertConceptReferenceDesignationComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceDesignationComponent();
  copyElement(src,tgt);
  tgt.setLanguage(src.getLanguage());
  tgt.setUse(convertCoding(src.getUse()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.985726280436608
23824,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  tgt.setName(src.getName());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  tgt.setContentReference(src.getContentReference());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition convertElementDefinition(org.hl7.fhir.dstu3.model.ElementDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition();
  copyElement(src,tgt);
  tgt.setPath(src.getPath());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.ElementDefinition.PropertyRepresentation> t : src.getRepresentation())   tgt.addRepresentation(convertPropertyRepresentation(t.getValue()));
  tgt.setName(src.getName());
  tgt.setLabel(src.getLabel());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setSlicing(convertElementDefinitionSlicingComponent(src.getSlicing()));
  tgt.setShort(src.getShort());
  tgt.setDefinition(src.getDefinition());
  tgt.setComments(src.getComments());
  tgt.setRequirements(src.getRequirements());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getAlias())   tgt.addAlias(t.getValue());
  tgt.setMin(src.getMin());
  tgt.setMax(src.getMax());
  tgt.setBase(convertElementDefinitionBaseComponent(src.getBase()));
  tgt.setContentReference(src.getContentReference());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.TypeRefComponent t : src.getType())   tgt.addType(convertTypeRefComponent(t));
  tgt.setDefaultValue(convertType(src.getDefaultValue()));
  tgt.setMeaningWhenMissing(src.getMeaningWhenMissing());
  tgt.setFixed(convertType(src.getFixed()));
  tgt.setPattern(convertType(src.getPattern()));
  tgt.setExample(convertType(src.getExample()));
  tgt.setMinValue(convertType(src.getMinValue()));
  tgt.setMaxValue(convertType(src.getMaxValue()));
  tgt.setMaxLength(src.getMaxLength());
  for (  org.hl7.fhir.dstu3.model.IdType t : src.getCondition())   tgt.addCondition(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionConstraintComponent t : src.getConstraint())   tgt.addConstraint(convertElementDefinitionConstraintComponent(t));
  tgt.setMustSupport(src.getMustSupport());
  tgt.setIsModifier(src.getIsModifier());
  tgt.setIsSummary(src.getIsSummary());
  tgt.setBinding(convertElementDefinitionBindingComponent(src.getBinding()));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertElementDefinitionMappingComponent(t));
  return tgt;
}",0.9965284868286706
23825,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent convertConceptSetFilterComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent();
  copyElement(src,tgt);
  tgt.setProperty(src.getProperty());
  tgt.setOp(convertFilterOperator(src.getOp()));
  tgt.setValue(src.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent convertConceptSetFilterComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetFilterComponent();
  copyElement(src,tgt);
  tgt.setProperty(src.getProperty());
  tgt.setOp(convertFilterOperator(src.getOp()));
  tgt.setValue(src.getValue());
  return tgt;
}",0.9844464775846294
23826,"public static org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent convertParametersParameterComponent(org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  tgt.setResource(convertResource(src.getResource()));
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getPart())   tgt.addPart(convertParametersParameterComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent convertParametersParameterComponent(org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.Parameters.ParametersParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  tgt.setResource(convertResource(src.getResource()));
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getPart())   tgt.addPart(convertParametersParameterComponent(t));
  return tgt;
}",0.9883321894303364
23827,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent convertConformanceImplementationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceImplementationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent convertConformanceImplementationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceImplementationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceImplementationComponent();
  copyElement(src,tgt);
  tgt.setDescription(src.getDescription());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.9847259658580412
23828,"public static org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent convertOperationOutcomeIssueComponent(org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent();
  copyElement(src,tgt);
  tgt.setSeverity(convertIssueSeverity(src.getSeverity()));
  tgt.setCode(convertIssueType(src.getCode()));
  tgt.setDetails(convertCodeableConcept(src.getDetails()));
  tgt.setDiagnostics(src.getDiagnostics());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLocation())   tgt.addLocation(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getExpression())   tgt.addExpression(t.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent convertOperationOutcomeIssueComponent(org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent tgt=new org.hl7.fhir.dstu2016may.model.OperationOutcome.OperationOutcomeIssueComponent();
  copyElement(src,tgt);
  tgt.setSeverity(convertIssueSeverity(src.getSeverity()));
  tgt.setCode(convertIssueType(src.getCode()));
  tgt.setDetails(convertCodeableConcept(src.getDetails()));
  tgt.setDiagnostics(src.getDiagnostics());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLocation())   tgt.addLocation(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getExpression())   tgt.addExpression(t.getValue());
  return tgt;
}",0.9905817174515236
23829,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent convertConformanceRestResourceSearchParamComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(src.getDefinition());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Conformance.SearchModifierCode> t : src.getModifier())   tgt.addModifier(convertSearchModifierCode(t.getValue()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getChain())   tgt.addChain(t.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent convertConformanceRestResourceSearchParamComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceSearchParamComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(src.getDefinition());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDocumentation(src.getDocumentation());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Enumeration<org.hl7.fhir.dstu3.model.Conformance.SearchModifierCode> t : src.getModifier())   tgt.addModifier(convertSearchModifierCode(t.getValue()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getChain())   tgt.addChain(t.getValue());
  return tgt;
}",0.9921259842519684
23830,"public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent convertQuestionnaireItemOptionComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent convertQuestionnaireItemOptionComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemOptionComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.9838862559241706
23831,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent convertConformanceRestSecurityCertificateComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setBlob(src.getBlob());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent convertConformanceRestSecurityCertificateComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityCertificateComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setBlob(src.getBlob());
  return tgt;
}",0.9855810008481763
23832,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent convertConformanceRestSecurityComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent();
  copyElement(src,tgt);
  tgt.setCors(src.getCors());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getService())   tgt.addService(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent t : src.getCertificate())   tgt.addCertificate(convertConformanceRestSecurityCertificateComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent convertConformanceRestSecurityComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestSecurityComponent();
  copyElement(src,tgt);
  tgt.setCors(src.getCors());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getService())   tgt.addService(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestSecurityCertificateComponent t : src.getCertificate())   tgt.addCertificate(convertConformanceRestSecurityCertificateComponent(t));
  return tgt;
}",0.99009900990099
23833,"public static org.hl7.fhir.dstu2016may.model.SampledData convertSampledData(org.hl7.fhir.dstu3.model.SampledData src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.SampledData tgt=new org.hl7.fhir.dstu2016may.model.SampledData();
  copyElement(src,tgt);
  tgt.setOrigin(convertSimpleQuantity(src.getOrigin()));
  tgt.setPeriod(src.getPeriod());
  tgt.setFactor(src.getFactor());
  tgt.setLowerLimit(src.getLowerLimit());
  tgt.setUpperLimit(src.getUpperLimit());
  tgt.setDimensions(src.getDimensions());
  tgt.setData(src.getData());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.SampledData convertSampledData(org.hl7.fhir.dstu3.model.SampledData src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.SampledData tgt=new org.hl7.fhir.dstu2016may.model.SampledData();
  copyElement(src,tgt);
  tgt.setOrigin(convertSimpleQuantity(src.getOrigin()));
  tgt.setPeriod(src.getPeriod());
  tgt.setFactor(src.getFactor());
  tgt.setLowerLimit(src.getLowerLimit());
  tgt.setUpperLimit(src.getUpperLimit());
  tgt.setDimensions(src.getDimensions());
  tgt.setData(src.getData());
  return tgt;
}",0.9858921161825728
23834,"public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent convertBundleEntryResponseComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryResponseComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent();
  copyElement(src,tgt);
  tgt.setStatus(src.getStatus());
  tgt.setLocation(src.getLocation());
  tgt.setEtag(src.getEtag());
  tgt.setLastModified(src.getLastModified());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent convertBundleEntryResponseComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryResponseComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryResponseComponent();
  copyElement(src,tgt);
  tgt.setStatus(src.getStatus());
  tgt.setLocation(src.getLocation());
  tgt.setEtag(src.getEtag());
  tgt.setLastModified(src.getLastModified());
  return tgt;
}",0.9854077253218884
23835,"public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse convertQuestionnaireResponse(org.hl7.fhir.dstu3.model.QuestionnaireResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setQuestionnaire(convertReference(src.getQuestionnaire()));
  tgt.setStatus(convertQuestionnaireResponseStatus(src.getStatus()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setAuthored(src.getAuthored());
  tgt.setSource(convertReference(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse convertQuestionnaireResponse(org.hl7.fhir.dstu3.model.QuestionnaireResponse src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setQuestionnaire(convertReference(src.getQuestionnaire()));
  tgt.setStatus(convertQuestionnaireResponseStatus(src.getStatus()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getContext()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setAuthored(src.getAuthored());
  tgt.setSource(convertReference(src.getSource()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}",0.9914872308462694
23836,"public static org.hl7.fhir.dstu2016may.model.Type convertType(org.hl7.fhir.dstu3.model.Type src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.dstu3.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BooleanType)   return convertBoolean((org.hl7.fhir.dstu3.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeType)   return convertCode((org.hl7.fhir.dstu3.model.CodeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateType)   return convertDate((org.hl7.fhir.dstu3.model.DateType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateTimeType)   return convertDateTime((org.hl7.fhir.dstu3.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DecimalType)   return convertDecimal((org.hl7.fhir.dstu3.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IdType)   return convertId((org.hl7.fhir.dstu3.model.IdType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.InstantType)   return convertInstant((org.hl7.fhir.dstu3.model.InstantType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IntegerType)   return convertInteger((org.hl7.fhir.dstu3.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.dstu3.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OidType)   return convertOid((org.hl7.fhir.dstu3.model.OidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.dstu3.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StringType)   return convertString((org.hl7.fhir.dstu3.model.StringType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TimeType)   return convertTime((org.hl7.fhir.dstu3.model.TimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.dstu3.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UriType)   return convertUri((org.hl7.fhir.dstu3.model.UriType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UuidType)   return convertUuid((org.hl7.fhir.dstu3.model.UuidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Extension)   return convertExtension((org.hl7.fhir.dstu3.model.Extension)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Narrative)   return convertNarrative((org.hl7.fhir.dstu3.model.Narrative)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Age)   return convertAge((org.hl7.fhir.dstu3.model.Age)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Annotation)   return convertAnnotation((org.hl7.fhir.dstu3.model.Annotation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Attachment)   return convertAttachment((org.hl7.fhir.dstu3.model.Attachment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.dstu3.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coding)   return convertCoding((org.hl7.fhir.dstu3.model.Coding)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Count)   return convertCount((org.hl7.fhir.dstu3.model.Count)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Distance)   return convertDistance((org.hl7.fhir.dstu3.model.Distance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Duration)   return convertDuration((org.hl7.fhir.dstu3.model.Duration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Identifier)   return convertIdentifier((org.hl7.fhir.dstu3.model.Identifier)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Money)   return convertMoney((org.hl7.fhir.dstu3.model.Money)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Period)   return convertPeriod((org.hl7.fhir.dstu3.model.Period)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Quantity)   return convertQuantity((org.hl7.fhir.dstu3.model.Quantity)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Range)   return convertRange((org.hl7.fhir.dstu3.model.Range)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Ratio)   return convertRatio((org.hl7.fhir.dstu3.model.Ratio)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Reference)   return convertReference((org.hl7.fhir.dstu3.model.Reference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SampledData)   return convertSampledData((org.hl7.fhir.dstu3.model.SampledData)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Signature)   return convertSignature((org.hl7.fhir.dstu3.model.Signature)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Address)   return convertAddress((org.hl7.fhir.dstu3.model.Address)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.dstu3.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ElementDefinition)   return convertElementDefinition((org.hl7.fhir.dstu3.model.ElementDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HumanName)   return convertHumanName((org.hl7.fhir.dstu3.model.HumanName)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Meta)   return convertMeta((org.hl7.fhir.dstu3.model.Meta)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Timing)   return convertTiming((org.hl7.fhir.dstu3.model.Timing)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public static org.hl7.fhir.dstu2016may.model.Type convertType(org.hl7.fhir.dstu3.model.Type src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Base64BinaryType)   return convertBase64Binary((org.hl7.fhir.dstu3.model.Base64BinaryType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BooleanType)   return convertBoolean((org.hl7.fhir.dstu3.model.BooleanType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeType)   return convertCode((org.hl7.fhir.dstu3.model.CodeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateType)   return convertDate((org.hl7.fhir.dstu3.model.DateType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DateTimeType)   return convertDateTime((org.hl7.fhir.dstu3.model.DateTimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DecimalType)   return convertDecimal((org.hl7.fhir.dstu3.model.DecimalType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IdType)   return convertId((org.hl7.fhir.dstu3.model.IdType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.InstantType)   return convertInstant((org.hl7.fhir.dstu3.model.InstantType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.IntegerType)   return convertInteger((org.hl7.fhir.dstu3.model.IntegerType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MarkdownType)   return convertMarkdown((org.hl7.fhir.dstu3.model.MarkdownType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OidType)   return convertOid((org.hl7.fhir.dstu3.model.OidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PositiveIntType)   return convertPositiveInt((org.hl7.fhir.dstu3.model.PositiveIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StringType)   return convertString((org.hl7.fhir.dstu3.model.StringType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TimeType)   return convertTime((org.hl7.fhir.dstu3.model.TimeType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UnsignedIntType)   return convertUnsignedInt((org.hl7.fhir.dstu3.model.UnsignedIntType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UriType)   return convertUri((org.hl7.fhir.dstu3.model.UriType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.UuidType)   return convertUuid((org.hl7.fhir.dstu3.model.UuidType)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Extension)   return convertExtension((org.hl7.fhir.dstu3.model.Extension)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Narrative)   return convertNarrative((org.hl7.fhir.dstu3.model.Narrative)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Age)   return convertAge((org.hl7.fhir.dstu3.model.Age)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Annotation)   return convertAnnotation((org.hl7.fhir.dstu3.model.Annotation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Attachment)   return convertAttachment((org.hl7.fhir.dstu3.model.Attachment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CodeableConcept)   return convertCodeableConcept((org.hl7.fhir.dstu3.model.CodeableConcept)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coding)   return convertCoding((org.hl7.fhir.dstu3.model.Coding)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Count)   return convertCount((org.hl7.fhir.dstu3.model.Count)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Distance)   return convertDistance((org.hl7.fhir.dstu3.model.Distance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Duration)   return convertDuration((org.hl7.fhir.dstu3.model.Duration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Identifier)   return convertIdentifier((org.hl7.fhir.dstu3.model.Identifier)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Money)   return convertMoney((org.hl7.fhir.dstu3.model.Money)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Period)   return convertPeriod((org.hl7.fhir.dstu3.model.Period)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Quantity)   return convertQuantity((org.hl7.fhir.dstu3.model.Quantity)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Range)   return convertRange((org.hl7.fhir.dstu3.model.Range)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Ratio)   return convertRatio((org.hl7.fhir.dstu3.model.Ratio)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Reference)   return convertReference((org.hl7.fhir.dstu3.model.Reference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SampledData)   return convertSampledData((org.hl7.fhir.dstu3.model.SampledData)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Signature)   return convertSignature((org.hl7.fhir.dstu3.model.Signature)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Address)   return convertAddress((org.hl7.fhir.dstu3.model.Address)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ContactPoint)   return convertContactPoint((org.hl7.fhir.dstu3.model.ContactPoint)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ElementDefinition)   return convertElementDefinition((org.hl7.fhir.dstu3.model.ElementDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HumanName)   return convertHumanName((org.hl7.fhir.dstu3.model.HumanName)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Meta)   return convertMeta((org.hl7.fhir.dstu3.model.Meta)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Timing)   return convertTiming((org.hl7.fhir.dstu3.model.Timing)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.9984295612009236
23837,"public static org.hl7.fhir.dstu2016may.model.Ratio convertRatio(org.hl7.fhir.dstu3.model.Ratio src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Ratio tgt=new org.hl7.fhir.dstu2016may.model.Ratio();
  copyElement(src,tgt);
  tgt.setNumerator(convertQuantity(src.getNumerator()));
  tgt.setDenominator(convertQuantity(src.getDenominator()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Ratio convertRatio(org.hl7.fhir.dstu3.model.Ratio src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Ratio tgt=new org.hl7.fhir.dstu2016may.model.Ratio();
  copyElement(src,tgt);
  tgt.setNumerator(convertQuantity(src.getNumerator()));
  tgt.setDenominator(convertQuantity(src.getDenominator()));
  return tgt;
}",0.9792429792429792
23838,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent convertImplementationGuidePackageResourceComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent();
  copyElement(src,tgt);
  tgt.setExample(src.getExample());
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setAcronym(src.getAcronym());
  tgt.setSource(convertType(src.getSource()));
  tgt.setExampleFor(convertReference(src.getExampleFor()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent convertImplementationGuidePackageResourceComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePackageResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePackageResourceComponent();
  copyElement(src,tgt);
  tgt.setExample(src.getExample());
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  tgt.setAcronym(src.getAcronym());
  tgt.setSource(convertType(src.getSource()));
  tgt.setExampleFor(convertReference(src.getExampleFor()));
  return tgt;
}",0.9895641497851444
23839,"public static org.hl7.fhir.dstu2016may.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet tgt=new org.hl7.fhir.dstu2016may.model.ValueSet();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setLockedDate(src.getLockedDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setImmutable(src.getImmutable());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet convertValueSet(org.hl7.fhir.dstu3.model.ValueSet src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet tgt=new org.hl7.fhir.dstu2016may.model.ValueSet();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.setIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetContactComponent t : src.getContact())   tgt.addContact(convertValueSetContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setLockedDate(src.getLockedDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setImmutable(src.getImmutable());
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setExtensible(src.getExtensible());
  tgt.setCompose(convertValueSetComposeComponent(src.getCompose()));
  tgt.setExpansion(convertValueSetExpansionComponent(src.getExpansion()));
  return tgt;
}",0.9937933552391384
23840,"public static org.hl7.fhir.dstu2016may.model.Parameters convertParameters(org.hl7.fhir.dstu3.model.Parameters src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Parameters tgt=new org.hl7.fhir.dstu2016may.model.Parameters();
  copyResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getParameter())   tgt.addParameter(convertParametersParameterComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Parameters convertParameters(org.hl7.fhir.dstu3.model.Parameters src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Parameters tgt=new org.hl7.fhir.dstu2016may.model.Parameters();
  copyResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent t : src.getParameter())   tgt.addParameter(convertParametersParameterComponent(t));
  return tgt;
}",0.982124079915878
23841,"public static org.hl7.fhir.dstu2016may.model.Distance convertDistance(org.hl7.fhir.dstu3.model.Distance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Distance tgt=new org.hl7.fhir.dstu2016may.model.Distance();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Distance convertDistance(org.hl7.fhir.dstu3.model.Distance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Distance tgt=new org.hl7.fhir.dstu2016may.model.Distance();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9830508474576272
23842,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent convertConformanceContactComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent convertConformanceContactComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9856054191363252
23843,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent convertTestScriptTestComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestActionComponent t : src.getAction())   tgt.addAction(convertTestActionComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent convertTestScriptTestComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTestComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestActionComponent t : src.getAction())   tgt.addAction(convertTestActionComponent(t));
  return tgt;
}",0.9865824782951856
23844,"public static org.hl7.fhir.dstu2016may.model.DataElement convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.DataElement tgt=new org.hl7.fhir.dstu2016may.model.DataElement();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setStringency(convertDataElementStringency(src.getStringency()));
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.DataElement convertDataElement(org.hl7.fhir.dstu3.model.DataElement src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.DataElement tgt=new org.hl7.fhir.dstu2016may.model.DataElement();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  tgt.setDate(src.getDate());
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementContactComponent t : src.getContact())   tgt.addContact(convertDataElementContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setCopyright(src.getCopyright());
  tgt.setStringency(convertDataElementStringency(src.getStringency()));
  for (  org.hl7.fhir.dstu3.model.DataElement.DataElementMappingComponent t : src.getMapping())   tgt.addMapping(convertDataElementMappingComponent(t));
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9938472674629026
23845,"public static org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent convertTeardownActionComponent(org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent convertTeardownActionComponent(org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TeardownActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  return tgt;
}",0.9831181727904668
23846,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent convertTestScriptTeardownComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTeardownComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent t : src.getAction())   tgt.addAction(convertTeardownActionComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent convertTestScriptTeardownComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptTeardownComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptTeardownComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TeardownActionComponent t : src.getAction())   tgt.addAction(convertTeardownActionComponent(t));
  return tgt;
}",0.985531914893617
23847,"public static org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent convertBundleLinkComponent(org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent();
  copyElement(src,tgt);
  tgt.setRelation(src.getRelation());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent convertBundleLinkComponent(org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleLinkComponent();
  copyElement(src,tgt);
  tgt.setRelation(src.getRelation());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.9813391877058176
23848,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent convertTestScriptOriginComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptOriginComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent();
  copyElement(src,tgt);
  tgt.setIndex(src.getIndex());
  tgt.setProfile(convertCoding(src.getProfile()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent convertTestScriptOriginComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptOriginComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptOriginComponent();
  copyElement(src,tgt);
  tgt.setIndex(src.getIndex());
  tgt.setProfile(convertCoding(src.getProfile()));
  return tgt;
}",0.9836065573770492
23849,"public static org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent convertSearchParameterContactComponent(org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent tgt=new org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent convertSearchParameterContactComponent(org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent tgt=new org.hl7.fhir.dstu2016may.model.SearchParameter.SearchParameterContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9864325618515564
23850,"public static org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent convertTargetElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent();
  copyElement(src,tgt);
  tgt.setSystem(g.getTarget());
  tgt.setCode(src.getCode());
  tgt.setEquivalence(convertConceptMapEquivalence(src.getEquivalence()));
  tgt.setComments(src.getComments());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getDependsOn())   tgt.addDependsOn(convertOtherElementComponent(t));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getProduct())   tgt.addProduct(convertOtherElementComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent convertTargetElementComponent(org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent src,org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap.TargetElementComponent();
  copyElement(src,tgt);
  tgt.setSystem(g.getTarget());
  tgt.setCode(src.getCode());
  tgt.setEquivalence(convertConceptMapEquivalence(src.getEquivalence()));
  tgt.setComments(src.getComments());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getDependsOn())   tgt.addDependsOn(convertOtherElementComponent(t));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.OtherElementComponent t : src.getProduct())   tgt.addProduct(convertOtherElementComponent(t));
  return tgt;
}",0.9909718534253852
23851,"public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent convertCompartmentDefinitionResourceComponent(org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionResourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getParam())   tgt.addParam(t.getValue());
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent convertCompartmentDefinitionResourceComponent(org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition.CompartmentDefinitionResourceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getParam())   tgt.addParam(t.getValue());
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9881533101045296
23852,"public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent convertSetupActionAssertComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionAssertComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent();
  copyElement(src,tgt);
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setDirection(convertAssertionDirectionType(src.getDirection()));
  tgt.setCompareToSourceId(src.getCompareToSourceId());
  tgt.setCompareToSourcePath(src.getCompareToSourcePath());
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setHeaderField(src.getHeaderField());
  tgt.setMinimumId(src.getMinimumId());
  tgt.setNavigationLinks(src.getNavigationLinks());
  tgt.setOperator(convertAssertionOperatorType(src.getOperator()));
  tgt.setPath(src.getPath());
  tgt.setResource(src.getResource());
  tgt.setResponse(convertAssertionResponseTypes(src.getResponse()));
  tgt.setResponseCode(src.getResponseCode());
  tgt.setSourceId(src.getSourceId());
  tgt.setValidateProfileId(src.getValidateProfileId());
  tgt.setValue(src.getValue());
  tgt.setWarningOnly(src.getWarningOnly());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent convertSetupActionAssertComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionAssertComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionAssertComponent();
  copyElement(src,tgt);
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setDirection(convertAssertionDirectionType(src.getDirection()));
  tgt.setCompareToSourceId(src.getCompareToSourceId());
  tgt.setCompareToSourcePath(src.getCompareToSourcePath());
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setHeaderField(src.getHeaderField());
  tgt.setMinimumId(src.getMinimumId());
  tgt.setNavigationLinks(src.getNavigationLinks());
  tgt.setOperator(convertAssertionOperatorType(src.getOperator()));
  tgt.setPath(src.getPath());
  tgt.setResource(src.getResource());
  tgt.setResponse(convertAssertionResponseTypes(src.getResponse()));
  tgt.setResponseCode(src.getResponseCode());
  tgt.setSourceId(src.getSourceId());
  tgt.setValidateProfileId(src.getValidateProfileId());
  tgt.setValue(src.getValue());
  tgt.setWarningOnly(src.getWarningOnly());
  return tgt;
}",0.9935824839562098
23853,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent convertConformanceMessagingEndpointComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent();
  copyElement(src,tgt);
  tgt.setProtocol(convertCoding(src.getProtocol()));
  tgt.setAddress(src.getAddress());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent convertConformanceMessagingEndpointComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEndpointComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEndpointComponent();
  copyElement(src,tgt);
  tgt.setProtocol(convertCoding(src.getProtocol()));
  tgt.setAddress(src.getAddress());
  return tgt;
}",0.9855564995751912
23854,"public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent convertSetupActionOperationComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setResource(src.getResource());
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setAccept(convertContentType(src.getAccept()));
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setDestination(src.getDestination());
  tgt.setEncodeRequestUrl(src.getEncodeRequestUrl());
  tgt.setOrigin(src.getOrigin());
  tgt.setParams(src.getParams());
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent t : src.getRequestHeader())   tgt.addRequestHeader(convertSetupActionOperationRequestHeaderComponent(t));
  tgt.setResponseId(src.getResponseId());
  tgt.setSourceId(src.getSourceId());
  tgt.setTargetId(src.getTargetId());
  tgt.setUrl(src.getUrl());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent convertSetupActionOperationComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationComponent();
  copyElement(src,tgt);
  tgt.setType(convertCoding(src.getType()));
  tgt.setResource(src.getResource());
  tgt.setLabel(src.getLabel());
  tgt.setDescription(src.getDescription());
  tgt.setAccept(convertContentType(src.getAccept()));
  tgt.setContentType(convertContentType(src.getContentType()));
  tgt.setDestination(src.getDestination());
  tgt.setEncodeRequestUrl(src.getEncodeRequestUrl());
  tgt.setOrigin(src.getOrigin());
  tgt.setParams(src.getParams());
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent t : src.getRequestHeader())   tgt.addRequestHeader(convertSetupActionOperationRequestHeaderComponent(t));
  tgt.setResponseId(src.getResponseId());
  tgt.setSourceId(src.getSourceId());
  tgt.setTargetId(src.getTargetId());
  tgt.setUrl(src.getUrl());
  return tgt;
}",0.9931368591037544
23855,"public static org.hl7.fhir.dstu2016may.model.Count convertCount(org.hl7.fhir.dstu3.model.Count src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Count tgt=new org.hl7.fhir.dstu2016may.model.Count();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Count convertCount(org.hl7.fhir.dstu3.model.Count src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Count tgt=new org.hl7.fhir.dstu2016may.model.Count();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9825282631038028
23856,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent convertStructureDefinitionDifferentialComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionDifferentialComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent convertStructureDefinitionDifferentialComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionDifferentialComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionDifferentialComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9872659176029962
23857,"public static org.hl7.fhir.dstu2016may.model.Meta convertMeta(org.hl7.fhir.dstu3.model.Meta src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Meta tgt=new org.hl7.fhir.dstu2016may.model.Meta();
  copyElement(src,tgt);
  tgt.setVersionId(src.getVersionId());
  tgt.setLastUpdated(src.getLastUpdated());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getProfile())   tgt.addProfile(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurity())   tgt.addSecurity(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Meta convertMeta(org.hl7.fhir.dstu3.model.Meta src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Meta tgt=new org.hl7.fhir.dstu2016may.model.Meta();
  copyElement(src,tgt);
  tgt.setVersionId(src.getVersionId());
  tgt.setLastUpdated(src.getLastUpdated());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getProfile())   tgt.addProfile(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getSecurity())   tgt.addSecurity(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getTag())   tgt.addTag(convertCoding(t));
  return tgt;
}",0.9870918754745636
23858,"public static org.hl7.fhir.dstu2016may.model.Quantity convertQuantity(org.hl7.fhir.dstu3.model.Quantity src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Quantity tgt=new org.hl7.fhir.dstu2016may.model.Quantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Quantity convertQuantity(org.hl7.fhir.dstu3.model.Quantity src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Quantity tgt=new org.hl7.fhir.dstu2016may.model.Quantity();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9830508474576272
23859,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setDisplay(src.getDisplay());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  tgt.setBaseType(src.getType());
  tgt.setBaseDefinition(src.getBaseDefinition());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition convertStructureDefinition(org.hl7.fhir.dstu3.model.StructureDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setDisplay(src.getDisplay());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent t : src.getContact())   tgt.addContact(convertStructureDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCode())   tgt.addCode(convertCoding(t));
  tgt.setFhirVersion(src.getFhirVersion());
  for (  org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent t : src.getMapping())   tgt.addMapping(convertStructureDefinitionMappingComponent(t));
  tgt.setKind(convertStructureDefinitionKind(src.getKind()));
  tgt.setAbstract(src.getAbstract());
  tgt.setContextType(convertExtensionContext(src.getContextType()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getContext())   tgt.addContext(t.getValue());
  tgt.setBaseType(src.getType());
  tgt.setBaseDefinition(src.getBaseDefinition());
  tgt.setDerivation(convertTypeDerivationRule(src.getDerivation()));
  tgt.setSnapshot(convertStructureDefinitionSnapshotComponent(src.getSnapshot()));
  tgt.setDifferential(convertStructureDefinitionDifferentialComponent(src.getDifferential()));
  return tgt;
}",0.9960252513444002
23860,"public static org.hl7.fhir.dstu2016may.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setComment(src.getComment());
  tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationDefinition convertOperationDefinition(org.hl7.fhir.dstu3.model.OperationDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationDefinition tgt=new org.hl7.fhir.dstu2016may.model.OperationDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setKind(convertOperationKind(src.getKind()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionContactComponent t : src.getContact())   tgt.addContact(convertOperationDefinitionContactComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setIdempotent(src.getIdempotent());
  tgt.setCode(src.getCode());
  tgt.setComment(src.getComment());
  tgt.setBase(convertReference(src.getBase()));
  tgt.setSystem(src.getSystem());
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  tgt.setInstance(src.getInstance());
  for (  org.hl7.fhir.dstu3.model.OperationDefinition.OperationDefinitionParameterComponent t : src.getParameter())   tgt.addParameter(convertOperationDefinitionParameterComponent(t));
  return tgt;
}",0.994662480376766
23861,"public static org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent convertNamingSystemContactComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent convertNamingSystemContactComponent(org.hl7.fhir.dstu3.model.NamingSystem.NamingSystemContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent tgt=new org.hl7.fhir.dstu2016may.model.NamingSystem.NamingSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9858215179316095
23862,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent convertTestScriptRulesetComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptRulesetComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent();
  copyElement(src,tgt);
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent convertTestScriptRulesetComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptRulesetComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRulesetComponent();
  copyElement(src,tgt);
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}",0.9828801611278952
23863,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent convertTestScriptMetadataLinkComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setDescription(src.getDescription());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent convertTestScriptMetadataLinkComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataLinkComponent();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setDescription(src.getDescription());
  return tgt;
}",0.984186046511628
23864,"public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent convertSetupActionComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent convertSetupActionComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionComponent();
  copyElement(src,tgt);
  tgt.setOperation(convertSetupActionOperationComponent(src.getOperation()));
  tgt.setAssert(convertSetupActionAssertComponent(src.getAssert()));
  return tgt;
}",0.9847533632286996
23865,"public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent convertBundleEntryRequestComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryRequestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent();
  copyElement(src,tgt);
  tgt.setMethod(convertHTTPVerb(src.getMethod()));
  tgt.setUrl(src.getUrl());
  tgt.setIfNoneMatch(src.getIfNoneMatch());
  tgt.setIfModifiedSince(src.getIfModifiedSince());
  tgt.setIfMatch(src.getIfMatch());
  tgt.setIfNoneExist(src.getIfNoneExist());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent convertBundleEntryRequestComponent(org.hl7.fhir.dstu3.model.Bundle.BundleEntryRequestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent tgt=new org.hl7.fhir.dstu2016may.model.Bundle.BundleEntryRequestComponent();
  copyElement(src,tgt);
  tgt.setMethod(convertHTTPVerb(src.getMethod()));
  tgt.setUrl(src.getUrl());
  tgt.setIfNoneMatch(src.getIfNoneMatch());
  tgt.setIfModifiedSince(src.getIfModifiedSince());
  tgt.setIfMatch(src.getIfMatch());
  tgt.setIfNoneExist(src.getIfNoneExist());
  return tgt;
}",0.987582176771366
23866,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent convertTestScriptMetadataComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent t : src.getLink())   tgt.addLink(convertTestScriptMetadataLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent t : src.getCapability())   tgt.addCapability(convertTestScriptMetadataCapabilityComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent convertTestScriptMetadataComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataLinkComponent t : src.getLink())   tgt.addLink(convertTestScriptMetadataLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent t : src.getCapability())   tgt.addCapability(convertTestScriptMetadataCapabilityComponent(t));
  return tgt;
}",0.9890675241157556
23867,"public static org.hl7.fhir.dstu2016may.model.Address convertAddress(org.hl7.fhir.dstu3.model.Address src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Address tgt=new org.hl7.fhir.dstu2016may.model.Address();
  copyElement(src,tgt);
  tgt.setUse(convertAddressUse(src.getUse()));
  tgt.setType(convertAddressType(src.getType()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLine())   tgt.addLine(t.getValue());
  tgt.setCity(src.getCity());
  tgt.setDistrict(src.getDistrict());
  tgt.setState(src.getState());
  tgt.setPostalCode(src.getPostalCode());
  tgt.setCountry(src.getCountry());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Address convertAddress(org.hl7.fhir.dstu3.model.Address src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Address tgt=new org.hl7.fhir.dstu2016may.model.Address();
  copyElement(src,tgt);
  tgt.setUse(convertAddressUse(src.getUse()));
  tgt.setType(convertAddressType(src.getType()));
  tgt.setText(src.getText());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getLine())   tgt.addLine(t.getValue());
  tgt.setCity(src.getCity());
  tgt.setDistrict(src.getDistrict());
  tgt.setState(src.getState());
  tgt.setPostalCode(src.getPostalCode());
  tgt.setCountry(src.getCountry());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9886439545758184
23868,"public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent convertQuestionnaireResponseItemAnswerComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent convertQuestionnaireResponseItemAnswerComponent(org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent tgt=new org.hl7.fhir.dstu2016may.model.QuestionnaireResponse.QuestionnaireResponseItemAnswerComponent();
  copyElement(src,tgt);
  tgt.setValue(convertType(src.getValue()));
  for (  org.hl7.fhir.dstu3.model.QuestionnaireResponse.QuestionnaireResponseItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireResponseItemComponent(t));
  return tgt;
}",0.9889682024659312
23869,"public static org.hl7.fhir.dstu2016may.model.Reference convertReference(org.hl7.fhir.dstu3.model.Reference src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Reference tgt=new org.hl7.fhir.dstu2016may.model.Reference();
  copyElement(src,tgt);
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Reference convertReference(org.hl7.fhir.dstu3.model.Reference src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Reference tgt=new org.hl7.fhir.dstu2016may.model.Reference();
  copyElement(src,tgt);
  tgt.setReference(src.getReference());
  tgt.setDisplay(src.getDisplay());
  return tgt;
}",0.9780645161290322
23870,"public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent convertQuestionnaireItemComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setPrefix(src.getPrefix());
  tgt.setText(src.getText());
  tgt.setType(convertQuestionnaireItemType(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemEnableWhenComponent t : src.getEnableWhen())   tgt.addEnableWhen(convertQuestionnaireItemEnableWhenComponent(t));
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  tgt.setReadOnly(src.getReadOnly());
  tgt.setMaxLength(src.getMaxLength());
  tgt.setOptions(convertReference(src.getOptions()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent t : src.getOption())   tgt.addOption(convertQuestionnaireItemOptionComponent(t));
  tgt.setInitial(convertType(src.getInitial()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireItemComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent convertQuestionnaireItemComponent(org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire.QuestionnaireItemComponent();
  copyElement(src,tgt);
  tgt.setLinkId(src.getLinkId());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  tgt.setPrefix(src.getPrefix());
  tgt.setText(src.getText());
  tgt.setType(convertQuestionnaireItemType(src.getType()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemEnableWhenComponent t : src.getEnableWhen())   tgt.addEnableWhen(convertQuestionnaireItemEnableWhenComponent(t));
  tgt.setRequired(src.getRequired());
  tgt.setRepeats(src.getRepeats());
  tgt.setReadOnly(src.getReadOnly());
  tgt.setMaxLength(src.getMaxLength());
  tgt.setOptions(convertReference(src.getOptions()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemOptionComponent t : src.getOption())   tgt.addOption(convertQuestionnaireItemOptionComponent(t));
  tgt.setInitial(convertType(src.getInitial()));
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireItemComponent(t));
  return tgt;
}",0.9941520467836256
23871,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent convertConformanceRestResourceComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestResourceComponent();
  copyElement(src,tgt);
  tgt.setType(src.getType());
  tgt.setProfile(convertReference(src.getProfile()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertResourceInteractionComponent(t));
  tgt.setVersioning(convertResourceVersionPolicy(src.getVersioning()));
  tgt.setReadHistory(src.getReadHistory());
  tgt.setUpdateCreate(src.getUpdateCreate());
  tgt.setConditionalCreate(src.getConditionalCreate());
  tgt.setConditionalUpdate(src.getConditionalUpdate());
  tgt.setConditionalDelete(convertConditionalDeleteStatus(src.getConditionalDelete()));
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchInclude())   tgt.addSearchInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getSearchRevInclude())   tgt.addSearchRevInclude(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  return tgt;
}",0.9943502824858758
23872,"public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent convertSetupActionOperationRequestHeaderComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent();
  copyElement(src,tgt);
  tgt.setField(src.getField());
  tgt.setValue(src.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent convertSetupActionOperationRequestHeaderComponent(org.hl7.fhir.dstu3.model.TestScript.SetupActionOperationRequestHeaderComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.SetupActionOperationRequestHeaderComponent();
  copyElement(src,tgt);
  tgt.setField(src.getField());
  tgt.setValue(src.getValue());
  return tgt;
}",0.9854576561163388
23873,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent convertCodeSystemFilterComponent(org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemFilterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDescription(src.getDescription());
  for (  Enumeration<FilterOperator> t : src.getOperator())   tgt.addOperator(t.getValue().toCode());
  tgt.setValue(src.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent convertCodeSystemFilterComponent(org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemFilterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemFilterComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDescription(src.getDescription());
  for (  Enumeration<FilterOperator> t : src.getOperator())   tgt.addOperator(t.getValue().toCode());
  tgt.setValue(src.getValue());
  return tgt;
}",0.9867909867909868
23874,"public static org.hl7.fhir.dstu2016may.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.Conformance src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance tgt=new org.hl7.fhir.dstu2016may.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance convertConformance(org.hl7.fhir.dstu3.model.Conformance src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance tgt=new org.hl7.fhir.dstu2016may.model.Conformance();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceContactComponent t : src.getContact())   tgt.addContact(convertConformanceContactComponent(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setKind(convertConformanceStatementKind(src.getKind()));
  tgt.setSoftware(convertConformanceSoftwareComponent(src.getSoftware()));
  tgt.setImplementation(convertConformanceImplementationComponent(src.getImplementation()));
  tgt.setFhirVersion(src.getFhirVersion());
  tgt.setAcceptUnknown(convertUnknownContentCode(src.getAcceptUnknown()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getFormat())   tgt.addFormat(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent t : src.getRest())   tgt.addRest(convertConformanceRestComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingComponent t : src.getMessaging())   tgt.addMessaging(convertConformanceMessagingComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent t : src.getDocument())   tgt.addDocument(convertConformanceDocumentComponent(t));
  return tgt;
}",0.995795201582983
23875,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent convertTestScriptFixtureComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent();
  copyElement(src,tgt);
  tgt.setAutocreate(src.getAutocreate());
  tgt.setAutodelete(src.getAutodelete());
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent convertTestScriptFixtureComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptFixtureComponent();
  copyElement(src,tgt);
  tgt.setAutocreate(src.getAutocreate());
  tgt.setAutodelete(src.getAutodelete());
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}",0.9853574504737296
23876,"public static org.hl7.fhir.dstu2016may.model.Questionnaire convertQuestionnaire(org.hl7.fhir.dstu3.model.Questionnaire src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertQuestionnaireStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getSubjectType())   tgt.addSubjectType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireItemComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Questionnaire convertQuestionnaire(org.hl7.fhir.dstu3.model.Questionnaire src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Questionnaire tgt=new org.hl7.fhir.dstu2016may.model.Questionnaire();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setVersion(src.getVersion());
  tgt.setStatus(convertQuestionnaireStatus(src.getStatus()));
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setTitle(src.getTitle());
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getConcept())   tgt.addConcept(convertCoding(t));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getSubjectType())   tgt.addSubjectType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.Questionnaire.QuestionnaireItemComponent t : src.getItem())   tgt.addItem(convertQuestionnaireItemComponent(t));
  return tgt;
}",0.9932779754843812
23877,"public static org.hl7.fhir.dstu2016may.model.Age convertAge(org.hl7.fhir.dstu3.model.Age src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Age tgt=new org.hl7.fhir.dstu2016may.model.Age();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Age convertAge(org.hl7.fhir.dstu3.model.Age src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Age tgt=new org.hl7.fhir.dstu2016may.model.Age();
  copyElement(src,tgt);
  tgt.setValue(src.getValue());
  tgt.setComparator(convertQuantityComparator(src.getComparator()));
  tgt.setUnit(src.getUnit());
  tgt.setSystem(src.getSystem());
  tgt.setCode(src.getCode());
  return tgt;
}",0.9821615949632738
23878,"public static org.hl7.fhir.dstu2016may.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Identifier tgt=new org.hl7.fhir.dstu2016may.model.Identifier();
  copyElement(src,tgt);
  tgt.setUse(convertIdentifierUse(src.getUse()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSystem(src.getSystem());
  tgt.setValue(src.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Identifier convertIdentifier(org.hl7.fhir.dstu3.model.Identifier src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Identifier tgt=new org.hl7.fhir.dstu2016may.model.Identifier();
  copyElement(src,tgt);
  tgt.setUse(convertIdentifierUse(src.getUse()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setSystem(src.getSystem());
  tgt.setValue(src.getValue());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  tgt.setAssigner(convertReference(src.getAssigner()));
  return tgt;
}",0.985629754860524
23879,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent convertConformanceSoftwareComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceSoftwareComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setVersion(src.getVersion());
  tgt.setReleaseDate(src.getReleaseDate());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent convertConformanceSoftwareComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceSoftwareComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceSoftwareComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setVersion(src.getVersion());
  tgt.setReleaseDate(src.getReleaseDate());
  return tgt;
}",0.9849424269264836
23880,"public static org.hl7.fhir.dstu2016may.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ContactPoint tgt=new org.hl7.fhir.dstu2016may.model.ContactPoint();
  copyElement(src,tgt);
  tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ContactPoint convertContactPoint(org.hl7.fhir.dstu3.model.ContactPoint src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ContactPoint tgt=new org.hl7.fhir.dstu2016may.model.ContactPoint();
  copyElement(src,tgt);
  tgt.setSystem(convertContactPointSystem(src.getSystem()));
  tgt.setValue(src.getValue());
  tgt.setUse(convertContactPointUse(src.getUse()));
  tgt.setRank(src.getRank());
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  return tgt;
}",0.9845594913714804
23881,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent convertConformanceMessagingEventComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCoding(src.getCode()));
  tgt.setCategory(convertMessageSignificanceCategory(src.getCategory()));
  tgt.setMode(convertConformanceEventMode(src.getMode()));
  tgt.setFocus(src.getFocus());
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setResponse(convertReference(src.getResponse()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent convertConformanceMessagingEventComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceMessagingEventComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceMessagingEventComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCoding(src.getCode()));
  tgt.setCategory(convertMessageSignificanceCategory(src.getCategory()));
  tgt.setMode(convertConformanceEventMode(src.getMode()));
  tgt.setFocus(src.getFocus());
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setResponse(convertReference(src.getResponse()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9900293255131964
23882,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent convertStructureDefinitionMappingComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComments());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent convertStructureDefinitionMappingComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setUri(src.getUri());
  tgt.setName(src.getName());
  tgt.setComments(src.getComments());
  return tgt;
}",0.9870327993897788
23883,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent convertTestScriptMetadataCapabilityComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent();
  copyElement(src,tgt);
  tgt.setRequired(src.getRequired());
  tgt.setValidated(src.getValidated());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.IntegerType t : src.getOrigin())   tgt.addOrigin(t.getValue());
  tgt.setDestination(src.getDestination());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getLink())   tgt.addLink(t.getValue());
  tgt.setConformance(convertReference(src.getConformance()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent convertTestScriptMetadataCapabilityComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptMetadataCapabilityComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptMetadataCapabilityComponent();
  copyElement(src,tgt);
  tgt.setRequired(src.getRequired());
  tgt.setValidated(src.getValidated());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.IntegerType t : src.getOrigin())   tgt.addOrigin(t.getValue());
  tgt.setDestination(src.getDestination());
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getLink())   tgt.addLink(t.getValue());
  tgt.setConformance(convertReference(src.getConformance()));
  return tgt;
}",0.9906747120131651
23884,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent convertTestScriptSetupComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptSetupComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent t : src.getAction())   tgt.addAction(convertSetupActionComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent convertTestScriptSetupComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptSetupComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptSetupComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.TestScript.SetupActionComponent t : src.getAction())   tgt.addAction(convertSetupActionComponent(t));
  return tgt;
}",0.9849955869373344
23885,"public static org.hl7.fhir.dstu2016may.model.Attachment convertAttachment(org.hl7.fhir.dstu3.model.Attachment src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Attachment tgt=new org.hl7.fhir.dstu2016may.model.Attachment();
  copyElement(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setLanguage(src.getLanguage());
  tgt.setData(src.getData());
  tgt.setUrl(src.getUrl());
  tgt.setSize(src.getSize());
  tgt.setHash(src.getHash());
  tgt.setTitle(src.getTitle());
  tgt.setCreation(src.getCreation());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Attachment convertAttachment(org.hl7.fhir.dstu3.model.Attachment src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Attachment tgt=new org.hl7.fhir.dstu2016may.model.Attachment();
  copyElement(src,tgt);
  tgt.setContentType(src.getContentType());
  tgt.setLanguage(src.getLanguage());
  tgt.setData(src.getData());
  tgt.setUrl(src.getUrl());
  tgt.setSize(src.getSize());
  tgt.setHash(src.getHash());
  tgt.setTitle(src.getTitle());
  tgt.setCreation(src.getCreation());
  return tgt;
}",0.9855072463768116
23886,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent convertConceptSetComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent t : src.getConcept())   tgt.addConcept(convertConceptReferenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent t : src.getFilter())   tgt.addFilter(convertConceptSetFilterComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent convertConceptSetComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptSetComponent();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent t : src.getConcept())   tgt.addConcept(convertConceptReferenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent t : src.getFilter())   tgt.addFilter(convertConceptSetFilterComponent(t));
  return tgt;
}",0.9887788778877888
23887,"public static org.hl7.fhir.dstu2016may.model.CodeSystem convertCodeSystem(org.hl7.fhir.dstu3.model.CodeSystem src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemContactComponent t : src.getContact())   tgt.addContact(convertCodeSystemContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setCaseSensitive(src.getCaseSensitive());
  tgt.setValueSet(src.getValueSet());
  tgt.setCompositional(src.getCompositional());
  tgt.setVersionNeeded(src.getVersionNeeded());
  tgt.setContent(convertCodeSystemContentMode(src.getContent()));
  tgt.setCount(src.getCount());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemFilterComponent t : src.getFilter())   tgt.addFilter(convertCodeSystemFilterComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.PropertyComponent t : src.getProperty())   tgt.addProperty(convertPropertyComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent t : src.getConcept())   tgt.addConcept(convertConceptDefinitionComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem convertCodeSystem(org.hl7.fhir.dstu3.model.CodeSystem src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemContactComponent t : src.getContact())   tgt.addContact(convertCodeSystemContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setCaseSensitive(src.getCaseSensitive());
  tgt.setValueSet(src.getValueSet());
  tgt.setCompositional(src.getCompositional());
  tgt.setVersionNeeded(src.getVersionNeeded());
  tgt.setContent(convertCodeSystemContentMode(src.getContent()));
  tgt.setCount(src.getCount());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemFilterComponent t : src.getFilter())   tgt.addFilter(convertCodeSystemFilterComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.PropertyComponent t : src.getProperty())   tgt.addProperty(convertPropertyComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent t : src.getConcept())   tgt.addConcept(convertConceptDefinitionComponent(t));
  return tgt;
}",0.9952126161644608
23888,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent convertTestScriptVariableComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefaultValue(src.getDefaultValue());
  tgt.setHeaderField(src.getHeaderField());
  tgt.setPath(src.getPath());
  tgt.setSourceId(src.getSourceId());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent convertTestScriptVariableComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptVariableComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefaultValue(src.getDefaultValue());
  tgt.setHeaderField(src.getHeaderField());
  tgt.setPath(src.getPath());
  tgt.setSourceId(src.getSourceId());
  return tgt;
}",0.9865824782951856
23889,"public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  tgt.setSource(src.getSource());
  tgt.setName(src.getTitle());
  tgt.setKind(convertGuidePageKind(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPackage())   tgt.addPackage(t.getValue());
  tgt.setFormat(src.getFormat());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent convertImplementationGuidePageComponent(org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent tgt=new org.hl7.fhir.dstu2016may.model.ImplementationGuide.ImplementationGuidePageComponent();
  copyElement(src,tgt);
  tgt.setSource(src.getSource());
  tgt.setName(src.getTitle());
  tgt.setKind(convertGuidePageKind(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getType())   tgt.addType(t.getValue());
  for (  org.hl7.fhir.dstu3.model.StringType t : src.getPackage())   tgt.addPackage(t.getValue());
  tgt.setFormat(src.getFormat());
  for (  org.hl7.fhir.dstu3.model.ImplementationGuide.ImplementationGuidePageComponent t : src.getPage())   tgt.addPage(convertImplementationGuidePageComponent(t));
  return tgt;
}",0.9916049382716048
23890,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent convertValueSetExpansionParameterComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent convertValueSetExpansionParameterComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionParameterComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.9846153846153848
23891,"public static org.hl7.fhir.dstu2016may.model.SearchParameter convertSearchParameter(org.hl7.fhir.dstu3.model.SearchParameter src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.SearchParameter tgt=new org.hl7.fhir.dstu2016may.model.SearchParameter();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent t : src.getContact())   tgt.addContact(convertSearchParameterContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(src.getCode());
  tgt.setBase(src.getBase());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDescription(src.getDescription());
  tgt.setExpression(src.getExpression());
  tgt.setXpath(src.getXpath());
  tgt.setXpathUsage(convertXPathUsageType(src.getXpathUsage()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.SearchParameter convertSearchParameter(org.hl7.fhir.dstu3.model.SearchParameter src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.SearchParameter tgt=new org.hl7.fhir.dstu2016may.model.SearchParameter();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setDate(src.getDate());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.SearchParameter.SearchParameterContactComponent t : src.getContact())   tgt.addContact(convertSearchParameterContactComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(src.getCode());
  tgt.setBase(src.getBase());
  tgt.setType(convertSearchParamType(src.getType()));
  tgt.setDescription(src.getDescription());
  tgt.setExpression(src.getExpression());
  tgt.setXpath(src.getXpath());
  tgt.setXpathUsage(convertXPathUsageType(src.getXpathUsage()));
  for (  org.hl7.fhir.dstu3.model.CodeType t : src.getTarget())   tgt.addTarget(t.getValue());
  return tgt;
}",0.9935434865172806
23892,"public static org.hl7.fhir.dstu2016may.model.Extension convertExtension(org.hl7.fhir.dstu3.model.Extension src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Extension tgt=new org.hl7.fhir.dstu2016may.model.Extension();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Extension convertExtension(org.hl7.fhir.dstu3.model.Extension src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Extension tgt=new org.hl7.fhir.dstu2016may.model.Extension();
  copyElement(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setValue(convertType(src.getValue()));
  return tgt;
}",0.9778933680104032
23893,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent convertCodeSystemContactComponent(org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent convertCodeSystemContactComponent(org.hl7.fhir.dstu3.model.CodeSystem.CodeSystemContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.CodeSystemContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9853826311263972
23894,"public static org.hl7.fhir.dstu2016may.model.ConceptMap convertConceptMap(org.hl7.fhir.dstu3.model.ConceptMap src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ConceptMap convertConceptMap(org.hl7.fhir.dstu3.model.ConceptMap src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ConceptMap tgt=new org.hl7.fhir.dstu2016may.model.ConceptMap();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapContactComponent t : src.getContact())   tgt.addContact(convertConceptMapContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  tgt.setSource(convertType(src.getSource()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent g : src.getGroup())   for (  org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent t : g.getElement())   tgt.addElement(convertSourceElementComponent(t,g));
  return tgt;
}",0.9938914840100612
23895,"public static org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent convertResourceInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertTypeRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent convertResourceInteractionComponent(org.hl7.fhir.dstu3.model.Conformance.ResourceInteractionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ResourceInteractionComponent();
  copyElement(src,tgt);
  tgt.setCode(convertTypeRestfulInteraction(src.getCode()));
  tgt.setDocumentation(src.getDocumentation());
  return tgt;
}",0.9849157054126
23896,"public static org.hl7.fhir.dstu2016may.model.TestScript convertTestScript(org.hl7.fhir.dstu3.model.TestScript src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript tgt=new org.hl7.fhir.dstu2016may.model.TestScript();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent t : src.getContact())   tgt.addContact(convertTestScriptContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptOriginComponent t : src.getOrigin())   tgt.addOrigin(convertTestScriptOriginComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptDestinationComponent t : src.getDestination())   tgt.addDestination(convertTestScriptDestinationComponent(t));
  tgt.setMetadata(convertTestScriptMetadataComponent(src.getMetadata()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent t : src.getFixture())   tgt.addFixture(convertTestScriptFixtureComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent t : src.getVariable())   tgt.addVariable(convertTestScriptVariableComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptRuleComponent t : src.getRule())   tgt.addRule(convertTestScriptRuleComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptRulesetComponent t : src.getRuleset())   tgt.addRuleset(convertTestScriptRulesetComponent(t));
  tgt.setSetup(convertTestScriptSetupComponent(src.getSetup()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent t : src.getTest())   tgt.addTest(convertTestScriptTestComponent(t));
  tgt.setTeardown(convertTestScriptTeardownComponent(src.getTeardown()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript convertTestScript(org.hl7.fhir.dstu3.model.TestScript src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript tgt=new org.hl7.fhir.dstu2016may.model.TestScript();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setVersion(src.getVersion());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent t : src.getContact())   tgt.addContact(convertTestScriptContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getUseContext())   tgt.addUseContext(convertCodeableConcept(t));
  tgt.setRequirements(src.getRequirements());
  tgt.setCopyright(src.getCopyright());
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptOriginComponent t : src.getOrigin())   tgt.addOrigin(convertTestScriptOriginComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptDestinationComponent t : src.getDestination())   tgt.addDestination(convertTestScriptDestinationComponent(t));
  tgt.setMetadata(convertTestScriptMetadataComponent(src.getMetadata()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptFixtureComponent t : src.getFixture())   tgt.addFixture(convertTestScriptFixtureComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getProfile())   tgt.addProfile(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptVariableComponent t : src.getVariable())   tgt.addVariable(convertTestScriptVariableComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptRuleComponent t : src.getRule())   tgt.addRule(convertTestScriptRuleComponent(t));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptRulesetComponent t : src.getRuleset())   tgt.addRuleset(convertTestScriptRulesetComponent(t));
  tgt.setSetup(convertTestScriptSetupComponent(src.getSetup()));
  for (  org.hl7.fhir.dstu3.model.TestScript.TestScriptTestComponent t : src.getTest())   tgt.addTest(convertTestScriptTestComponent(t));
  tgt.setTeardown(convertTestScriptTeardownComponent(src.getTeardown()));
  return tgt;
}",0.9964955679241394
23897,"public static org.hl7.fhir.dstu2016may.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Bundle tgt=new org.hl7.fhir.dstu2016may.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Bundle convertBundle(org.hl7.fhir.dstu3.model.Bundle src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Bundle tgt=new org.hl7.fhir.dstu2016may.model.Bundle();
  copyResource(src,tgt);
  tgt.setType(convertBundleType(src.getType()));
  tgt.setTotal(src.getTotal());
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleLinkComponent t : src.getLink())   tgt.addLink(convertBundleLinkComponent(t));
  for (  org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent t : src.getEntry())   tgt.addEntry(convertBundleEntryComponent(t));
  tgt.setSignature(convertSignature(src.getSignature()));
  return tgt;
}",0.9877256317689532
23898,"public static org.hl7.fhir.dstu2016may.model.Range convertRange(org.hl7.fhir.dstu3.model.Range src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Range tgt=new org.hl7.fhir.dstu2016may.model.Range();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Range convertRange(org.hl7.fhir.dstu3.model.Range src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Range tgt=new org.hl7.fhir.dstu2016may.model.Range();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  return tgt;
}",0.9785082174462706
23899,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent convertStructureDefinitionContactComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent convertStructureDefinitionContactComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9871698113207548
23900,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent convertElementDefinitionBindingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBindingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setDescription(src.getDescription());
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent convertElementDefinitionBindingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionBindingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionBindingComponent();
  copyElement(src,tgt);
  tgt.setStrength(convertBindingStrength(src.getStrength()));
  tgt.setDescription(src.getDescription());
  tgt.setValueSet(convertType(src.getValueSet()));
  return tgt;
}",0.987130961392884
23901,"public static org.hl7.fhir.dstu2016may.model.CodeableConcept convertCodeableConcept(org.hl7.fhir.dstu3.model.CodeableConcept src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeableConcept tgt=new org.hl7.fhir.dstu2016may.model.CodeableConcept();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCoding())   tgt.addCoding(convertCoding(t));
  tgt.setText(src.getText());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeableConcept convertCodeableConcept(org.hl7.fhir.dstu3.model.CodeableConcept src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeableConcept tgt=new org.hl7.fhir.dstu2016may.model.CodeableConcept();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Coding t : src.getCoding())   tgt.addCoding(convertCoding(t));
  tgt.setText(src.getText());
  return tgt;
}",0.9818569903948772
23902,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent convertTestScriptRuleComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptRuleComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent();
  copyElement(src,tgt);
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent convertTestScriptRuleComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptRuleComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptRuleComponent();
  copyElement(src,tgt);
  tgt.setResource(convertReference(src.getResource()));
  return tgt;
}",0.9823468328141224
23903,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent convertConformanceRestOperationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(convertReference(src.getDefinition()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent convertConformanceRestOperationComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestOperationComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  tgt.setDefinition(convertReference(src.getDefinition()));
  return tgt;
}",0.9850746268656716
23904,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent convertValueSetExpansionComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setTimestamp(src.getTimestamp());
  tgt.setTotal(src.getTotal());
  tgt.setOffset(src.getOffset());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent t : src.getParameter())   tgt.addParameter(convertValueSetExpansionParameterComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent convertValueSetExpansionComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetExpansionComponent();
  copyElement(src,tgt);
  tgt.setIdentifier(src.getIdentifier());
  tgt.setTimestamp(src.getTimestamp());
  tgt.setTotal(src.getTotal());
  tgt.setOffset(src.getOffset());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionParameterComponent t : src.getParameter())   tgt.addParameter(convertValueSetExpansionParameterComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent t : src.getContains())   tgt.addContains(convertValueSetExpansionContainsComponent(t));
  return tgt;
}",0.9907255864702672
23905,"public static org.hl7.fhir.dstu2016may.model.Period convertPeriod(org.hl7.fhir.dstu3.model.Period src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Period tgt=new org.hl7.fhir.dstu2016may.model.Period();
  copyElement(src,tgt);
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Period convertPeriod(org.hl7.fhir.dstu3.model.Period src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Period tgt=new org.hl7.fhir.dstu2016may.model.Period();
  copyElement(src,tgt);
  tgt.setStart(src.getStart());
  tgt.setEnd(src.getEnd());
  return tgt;
}",0.976157082748948
23906,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent convertValueSetComposeComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetComposeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getImport())   tgt.addImport(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getInclude())   tgt.addInclude(convertConceptSetComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getExclude())   tgt.addExclude(convertConceptSetComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent convertValueSetComposeComponent(org.hl7.fhir.dstu3.model.ValueSet.ValueSetComposeComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ValueSetComposeComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getImport())   tgt.addImport(t.getValue());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getInclude())   tgt.addInclude(convertConceptSetComponent(t));
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent t : src.getExclude())   tgt.addExclude(convertConceptSetComponent(t));
  return tgt;
}",0.9891650732950924
23907,"public static org.hl7.fhir.dstu2016may.model.VisionPrescription convertVisionPrescription(org.hl7.fhir.dstu3.model.VisionPrescription src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.VisionPrescription tgt=new org.hl7.fhir.dstu2016may.model.VisionPrescription();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setReason(convertType(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent t : src.getDispense())   tgt.addDispense(convertVisionPrescriptionDispenseComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.VisionPrescription convertVisionPrescription(org.hl7.fhir.dstu3.model.VisionPrescription src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.VisionPrescription tgt=new org.hl7.fhir.dstu2016may.model.VisionPrescription();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setReason(convertType(src.getReason()));
  for (  org.hl7.fhir.dstu3.model.VisionPrescription.VisionPrescriptionDispenseComponent t : src.getDispense())   tgt.addDispense(convertVisionPrescriptionDispenseComponent(t));
  return tgt;
}",0.9907356948228884
23908,"public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent convertStructureDefinitionSnapshotComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionSnapshotComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent convertStructureDefinitionSnapshotComponent(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionSnapshotComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent tgt=new org.hl7.fhir.dstu2016may.model.StructureDefinition.StructureDefinitionSnapshotComponent();
  copyElement(src,tgt);
  for (  org.hl7.fhir.dstu3.model.ElementDefinition t : src.getElement())   tgt.addElement(convertElementDefinition(t));
  return tgt;
}",0.9868725868725868
23909,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent convertConformanceRestComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent();
  copyElement(src,tgt);
  tgt.setMode(convertRestfulConformanceMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setSecurity(convertConformanceRestSecurityComponent(src.getSecurity()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent t : src.getResource())   tgt.addResource(convertConformanceRestResourceComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertSystemInteractionComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent t : src.getOperation())   tgt.addOperation(convertConformanceRestOperationComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getCompartment())   tgt.addCompartment(t.getValue());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent convertConformanceRestComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceRestComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceRestComponent();
  copyElement(src,tgt);
  tgt.setMode(convertRestfulConformanceMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setSecurity(convertConformanceRestSecurityComponent(src.getSecurity()));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceComponent t : src.getResource())   tgt.addResource(convertConformanceRestResourceComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.SystemInteractionComponent t : src.getInteraction())   tgt.addInteraction(convertSystemInteractionComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestResourceSearchParamComponent t : src.getSearchParam())   tgt.addSearchParam(convertConformanceRestResourceSearchParamComponent(t));
  for (  org.hl7.fhir.dstu3.model.Conformance.ConformanceRestOperationComponent t : src.getOperation())   tgt.addOperation(convertConformanceRestOperationComponent(t));
  for (  org.hl7.fhir.dstu3.model.UriType t : src.getCompartment())   tgt.addCompartment(t.getValue());
  return tgt;
}",0.9939823008849558
23910,"public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent convertTestScriptContactComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent convertTestScriptContactComponent(org.hl7.fhir.dstu3.model.TestScript.TestScriptContactComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent tgt=new org.hl7.fhir.dstu2016may.model.TestScript.TestScriptContactComponent();
  copyElement(src,tgt);
  tgt.setName(src.getName());
  for (  org.hl7.fhir.dstu3.model.ContactPoint t : src.getTelecom())   tgt.addTelecom(convertContactPoint(t));
  return tgt;
}",0.9853826311263972
23911,"public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent convertElementDefinitionMappingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setLanguage(src.getLanguage());
  tgt.setMap(src.getMap());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent convertElementDefinitionMappingComponent(org.hl7.fhir.dstu3.model.ElementDefinition.ElementDefinitionMappingComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent tgt=new org.hl7.fhir.dstu2016may.model.ElementDefinition.ElementDefinitionMappingComponent();
  copyElement(src,tgt);
  tgt.setIdentity(src.getIdentity());
  tgt.setLanguage(src.getLanguage());
  tgt.setMap(src.getMap());
  return tgt;
}",0.9860082304526748
23912,"public static org.hl7.fhir.dstu2016may.model.Coding convertCoding(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Coding tgt=new org.hl7.fhir.dstu2016may.model.Coding();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setUserSelected(src.getUserSelected());
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Coding convertCoding(org.hl7.fhir.dstu3.model.Coding src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Coding tgt=new org.hl7.fhir.dstu2016may.model.Coding();
  copyElement(src,tgt);
  tgt.setSystem(src.getSystem());
  tgt.setVersion(src.getVersion());
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setUserSelected(src.getUserSelected());
  return tgt;
}",0.9822361546499476
23913,"public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent convertConceptDefinitionComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setDefinition(src.getDefinition());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptDefinitionDesignationComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptPropertyComponent t : src.getProperty())   tgt.addProperty(convertConceptPropertyComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent t : src.getConcept())   tgt.addConcept(convertConceptDefinitionComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent convertConceptDefinitionComponent(org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent tgt=new org.hl7.fhir.dstu2016may.model.CodeSystem.ConceptDefinitionComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  tgt.setDefinition(src.getDefinition());
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptDefinitionDesignationComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptPropertyComponent t : src.getProperty())   tgt.addProperty(convertConceptPropertyComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeSystem.ConceptDefinitionComponent t : src.getConcept())   tgt.addConcept(convertConceptDefinitionComponent(t));
  return tgt;
}",0.99171943497321
23914,"public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent convertConceptReferenceComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptReferenceDesignationComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent convertConceptReferenceComponent(org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent tgt=new org.hl7.fhir.dstu2016may.model.ValueSet.ConceptReferenceComponent();
  copyElement(src,tgt);
  tgt.setCode(src.getCode());
  tgt.setDisplay(src.getDisplay());
  for (  org.hl7.fhir.dstu3.model.ValueSet.ConceptReferenceDesignationComponent t : src.getDesignation())   tgt.addDesignation(convertConceptReferenceDesignationComponent(t));
  return tgt;
}",0.9873039581777446
23915,"public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent convertConformanceDocumentComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent();
  copyElement(src,tgt);
  tgt.setMode(convertDocumentMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent convertConformanceDocumentComponent(org.hl7.fhir.dstu3.model.Conformance.ConformanceDocumentComponent src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent tgt=new org.hl7.fhir.dstu2016may.model.Conformance.ConformanceDocumentComponent();
  copyElement(src,tgt);
  tgt.setMode(convertDocumentMode(src.getMode()));
  tgt.setDocumentation(src.getDocumentation());
  tgt.setProfile(convertReference(src.getProfile()));
  return tgt;
}",0.9860082304526748
23916,"public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition convertCompartmentDefinition(org.hl7.fhir.dstu3.model.CompartmentDefinition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionContactComponent t : src.getContact())   tgt.addContact(convertCompartmentDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(convertCompartmentType(src.getCode()));
  tgt.setSearch(src.getSearch());
  for (  org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionResourceComponent t : src.getResource())   tgt.addResource(convertCompartmentDefinitionResourceComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.CompartmentDefinition convertCompartmentDefinition(org.hl7.fhir.dstu3.model.CompartmentDefinition src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.CompartmentDefinition tgt=new org.hl7.fhir.dstu2016may.model.CompartmentDefinition();
  copyDomainResource(src,tgt);
  tgt.setUrl(src.getUrl());
  tgt.setName(src.getName());
  tgt.setStatus(convertConformanceResourceStatus(src.getStatus()));
  tgt.setExperimental(src.getExperimental());
  tgt.setPublisher(src.getPublisher());
  for (  org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionContactComponent t : src.getContact())   tgt.addContact(convertCompartmentDefinitionContactComponent(t));
  tgt.setDate(src.getDate());
  tgt.setDescription(src.getDescription());
  tgt.setRequirements(src.getRequirements());
  tgt.setCode(convertCompartmentType(src.getCode()));
  tgt.setSearch(src.getSearch());
  for (  org.hl7.fhir.dstu3.model.CompartmentDefinition.CompartmentDefinitionResourceComponent t : src.getResource())   tgt.addResource(convertCompartmentDefinitionResourceComponent(t));
  return tgt;
}",0.9927257167308516
23917,"public static org.hl7.fhir.dstu2016may.model.OperationOutcome convertOperationOutcome(org.hl7.fhir.dstu3.model.OperationOutcome src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2016may.model.OperationOutcome tgt=new org.hl7.fhir.dstu2016may.model.OperationOutcome();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent t : src.getIssue())   tgt.addIssue(convertOperationOutcomeIssueComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2016may.model.OperationOutcome convertOperationOutcome(org.hl7.fhir.dstu3.model.OperationOutcome src) throws FHIRException {
  if (src == null || src.isEmpty())   return null;
  org.hl7.fhir.dstu2016may.model.OperationOutcome tgt=new org.hl7.fhir.dstu2016may.model.OperationOutcome();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.OperationOutcome.OperationOutcomeIssueComponent t : src.getIssue())   tgt.addIssue(convertOperationOutcomeIssueComponent(t));
  return tgt;
}",0.9834469328140214
23918,"public boolean IsLogicalAndHasPrimitiveValue(String name){
  if (canBePrimitive != null)   return canBePrimitive;
  canBePrimitive=false;
  if (structure.getKind() != StructureDefinitionKind.LOGICAL)   return false;
  if (!hasType(name))   return false;
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,structure.getUrl().substring(0,structure.getUrl().lastIndexOf(""String_Node_Str"") + 1) + getType(name));
  if (sd == null || sd.getKind() != StructureDefinitionKind.LOGICAL)   return false;
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(sd.getId() + ""String_Node_Str"") && ed.getType().size() == 1 && isPrimitive(ed.getType().get(0).getCode())) {
      canBePrimitive=true;
      return true;
    }
  }
  return false;
}","public boolean IsLogicalAndHasPrimitiveValue(String name){
  canBePrimitive=false;
  if (structure.getKind() != StructureDefinitionKind.LOGICAL)   return false;
  if (!hasType(name))   return false;
  StructureDefinition sd=context.fetchResource(StructureDefinition.class,structure.getUrl().substring(0,structure.getUrl().lastIndexOf(""String_Node_Str"") + 1) + getType(name));
  if (sd == null)   sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + getType(name));
  if (sd != null && sd.getKind() == StructureDefinitionKind.PRIMITIVETYPE)   return true;
  if (sd == null || sd.getKind() != StructureDefinitionKind.LOGICAL)   return false;
  for (  ElementDefinition ed : sd.getSnapshot().getElement()) {
    if (ed.getPath().equals(sd.getId() + ""String_Node_Str"") && ed.getType().size() == 1 && isPrimitive(ed.getType().get(0).getCode())) {
      canBePrimitive=true;
      return true;
    }
  }
  return false;
}",0.8538283062645011
23919,"public String getType(String elementName){
  if (!definition.getPath().contains(""String_Node_Str""))   return definition.getPath();
  ElementDefinition ed=definition;
  if (definition.hasContentReference()) {
    if (!definition.getContentReference().startsWith(""String_Node_Str""))     throw new Error(""String_Node_Str"");
    boolean found=false;
    for (    ElementDefinition d : structure.getSnapshot().getElement()) {
      if (d.getPath().equals(definition.getContentReference().substring(1))) {
        found=true;
        ed=d;
      }
    }
    if (!found)     throw new Error(""String_Node_Str"" + definition.getContentReference());
  }
  if (ed.getType().size() == 0)   return null;
 else   if (ed.getType().size() > 1) {
    String t=ed.getType().get(0).getCode();
    boolean all=true;
    for (    TypeRefComponent tr : ed.getType()) {
      if (!t.equals(tr.getCode()))       all=false;
    }
    if (all)     return t;
    String tail=ed.getPath().substring(ed.getPath().lastIndexOf(""String_Node_Str"") + 1);
    if (tail.endsWith(""String_Node_Str"") && elementName != null && elementName.startsWith(tail.substring(0,tail.length() - 3))) {
      String name=elementName.substring(tail.length() - 3);
      return isPrimitive(lowFirst(name)) ? lowFirst(name) : name;
    }
 else     throw new Error(""String_Node_Str"" + elementName + ""String_Node_Str""+ ed.getPath());
  }
 else   if (ed.getType().get(0).getCode() == null) {
    return structure.getId();
  }
 else   return ed.getType().get(0).getCode();
}","public String getType(String elementName){
  if (!definition.getPath().contains(""String_Node_Str""))   return definition.getPath();
  ElementDefinition ed=definition;
  if (definition.hasContentReference()) {
    if (!definition.getContentReference().startsWith(""String_Node_Str""))     throw new Error(""String_Node_Str"");
    boolean found=false;
    for (    ElementDefinition d : structure.getSnapshot().getElement()) {
      if (d.hasId() && d.getId().equals(definition.getContentReference().substring(1))) {
        found=true;
        ed=d;
      }
    }
    if (!found)     throw new Error(""String_Node_Str"" + definition.getContentReference() + ""String_Node_Str""+ definition.getPath()+ ""String_Node_Str""+ structure.getUrl());
  }
  if (ed.getType().size() == 0)   return null;
 else   if (ed.getType().size() > 1) {
    String t=ed.getType().get(0).getCode();
    boolean all=true;
    for (    TypeRefComponent tr : ed.getType()) {
      if (!t.equals(tr.getCode()))       all=false;
    }
    if (all)     return t;
    String tail=ed.getPath().substring(ed.getPath().lastIndexOf(""String_Node_Str"") + 1);
    if (tail.endsWith(""String_Node_Str"") && elementName != null && elementName.startsWith(tail.substring(0,tail.length() - 3))) {
      String name=elementName.substring(tail.length() - 3);
      return isPrimitive(lowFirst(name)) ? lowFirst(name) : name;
    }
 else     throw new Error(""String_Node_Str"" + elementName + ""String_Node_Str""+ ed.getPath());
  }
 else   if (ed.getType().get(0).getCode() == null) {
    return structure.getId();
  }
 else   return ed.getType().get(0).getCode();
}",0.8480769230769231
23920,"public void populateLogicalSnapshot(StructureDefinition sd) throws FHIRException {
  sd.getSnapshot().getElement().add(sd.getDifferential().getElementFirstRep().copy());
  StructureDefinition base=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
  if (base == null)   throw new FHIRException(""String_Node_Str"" + sd.getBaseDefinition());
  copyElements(sd,base.getSnapshot().getElement());
  copyElements(sd,sd.getDifferential().getElement());
}","public void populateLogicalSnapshot(StructureDefinition sd) throws FHIRException {
  sd.getSnapshot().getElement().add(sd.getDifferential().getElementFirstRep().copy());
  StructureDefinition base=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
  if (base == null)   throw new FHIRException(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl());
  copyElements(sd,base.getSnapshot().getElement());
  copyElements(sd,sd.getDifferential().getElement());
}",0.9659442724458204
23921,"public int totalCount(){
  return valueSets.size() + maps.size() + structures.size();
}","public int totalCount(){
  return valueSets.size() + maps.size() + structures.size()+ transforms.size();
}",0.9015544041450776
23922,"@Override public List<BaseConformance> allConformanceResources(){
  List<BaseConformance> result=new ArrayList<BaseConformance>();
  result.addAll(structures.values());
  result.addAll(codeSystems.values());
  result.addAll(valueSets.values());
  result.addAll(maps.values());
  return result;
}","@Override public List<BaseConformance> allConformanceResources(){
  List<BaseConformance> result=new ArrayList<BaseConformance>();
  result.addAll(structures.values());
  result.addAll(codeSystems.values());
  result.addAll(valueSets.values());
  result.addAll(maps.values());
  result.addAll(transforms.values());
  return result;
}",0.9394904458598726
23923,"private void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (p.getKind() == StructureDefinitionKind.LOGICAL)   return;
  if (!p.hasSnapshot()) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == IssueSeverity.ERROR || msg.getLevel() == IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}","private void seeProfile(String url,StructureDefinition p) throws FHIRException {
  if (Utilities.noString(url))   url=p.getUrl();
  if (!p.hasSnapshot() && p.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!p.hasBaseDefinition())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    StructureDefinition sd=fetchResource(StructureDefinition.class,p.getBaseDefinition());
    if (sd == null)     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ p.getBaseDefinition()+ ""String_Node_Str"");
    List<ValidationMessage> msgs=new ArrayList<ValidationMessage>();
    ProfileUtilities pu=new ProfileUtilities(this,msgs,this);
    pu.generateSnapshot(sd,p,p.getUrl(),p.getName());
    for (    ValidationMessage msg : msgs) {
      if (msg.getLevel() == IssueSeverity.ERROR || msg.getLevel() == IssueSeverity.FATAL)       throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str""+ msg.getMessage());
    }
    if (!p.hasSnapshot())     throw new DefinitionException(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getUrl()+ ""String_Node_Str"");
    pu=null;
  }
  if (structures.containsKey(p.getUrl()) && !allowLoadingDuplicates)   throw new DefinitionException(""String_Node_Str"" + p.getUrl());
  structures.put(p.getId(),p);
  structures.put(p.getUrl(),p);
  if (!p.getUrl().equals(url))   structures.put(url,p);
}",0.981542518127884
23924,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResource(Class<T> class_,String uri){
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
  }
  if (class_ == null && uri.contains(""String_Node_Str"")) {
    return null;
  }
  throw new Error(""String_Node_Str"" + class_.getName() + ""String_Node_Str""+ uri);
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResource(Class<T> class_,String uri){
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
 else     if (class_ == StructureMap.class) {
      if (transforms.containsKey(uri))       return (T)transforms.get(uri);
 else       return null;
    }
  }
  if (class_ == null && uri.contains(""String_Node_Str"")) {
    return null;
  }
  throw new Error(""String_Node_Str"" + class_.getName() + ""String_Node_Str""+ uri);
}",0.9397874852420308
23925,"public void seeResource(String url,Resource r) throws FHIRException {
  if (r instanceof StructureDefinition)   seeProfile(url,(StructureDefinition)r);
 else   if (r instanceof ValueSet)   seeValueSet(url,(ValueSet)r);
 else   if (r instanceof CodeSystem)   seeCodeSystem(url,(CodeSystem)r);
 else   if (r instanceof ConceptMap)   maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else   if (r instanceof NamingSystem)   systems.add((NamingSystem)r);
}","public void seeResource(String url,Resource r) throws FHIRException {
  if (r instanceof StructureDefinition)   seeProfile(url,(StructureDefinition)r);
 else   if (r instanceof ValueSet)   seeValueSet(url,(ValueSet)r);
 else   if (r instanceof CodeSystem)   seeCodeSystem(url,(CodeSystem)r);
 else   if (r instanceof ConceptMap)   maps.put(((ConceptMap)r).getUrl(),(ConceptMap)r);
 else   if (r instanceof StructureMap)   transforms.put(((StructureMap)r).getUrl(),(StructureMap)r);
 else   if (r instanceof NamingSystem)   systems.add((NamingSystem)r);
}",0.8997020854021847
23926,"/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().equals(""String_Node_Str"")) {
      if (criteria.getFixed() == null)       return false;
 else       if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}","/** 
 * @param element - the candidate that might be in the slice
 * @param path - for reporting any errors. the XPath for the element
 * @param slice - the definition of how slicing is determined
 * @param ed - the slice for which to test membership
 * @return
 * @throws DefinitionException 
 * @throws DefinitionException 
 * @throws Exception
 */
private boolean sliceMatches(Element element,String path,ElementDefinition slice,ElementDefinition ed,StructureDefinition profile) throws DefinitionException, FHIRException {
  if (!slice.getSlicing().hasDiscriminator())   return false;
  for (  StringType s : slice.getSlicing().getDiscriminator()) {
    String discriminator=s.getValue();
    ElementDefinition criteria=getCriteriaForDiscriminator(path,ed,discriminator,profile);
    if (discriminator.equals(""String_Node_Str"") && criteria.getPath().endsWith(""String_Node_Str"")) {
      if (criteria.getFixed() == null)       return false;
 else       if (!element.getNamedChildValue(""String_Node_Str"").equals(((UriType)criteria.getFixed()).asStringValue()))       return false;
    }
 else {
      Element value=getValueForDiscriminator(element,discriminator,criteria);
      if (!valueMatchesCriteria(value,criteria))       return false;
    }
  }
  return true;
}",0.995268138801262
23927,"private boolean loadBundle(JsonPrimitive be,boolean needToBuild,FetchedFile igf) throws Exception {
  FetchedFile f=fetcher.fetch(new Reference().setReference(""String_Node_Str"" + be.getAsString()),igf);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.setBundle((Bundle)parse(f));
    for (    BundleEntryComponent b : f.getBundle().getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(new ObjectConverter(context).convert(r.getResource()));
      for (      UriType p : b.getResource().getMeta().getProfile())       r.getProfiles().add(p.asStringValue());
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else   f=altMap.get(""String_Node_Str"" + be.getAsString());
  ImplementationGuidePackageComponent pck=pubIg.addPackage().setName(f.getTitle());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuidePackageResourceComponent res=pck.addResource();
    res.setExample(false).setName(r.getId()).setSource(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}","private boolean loadBundle(JsonPrimitive be,boolean needToBuild,FetchedFile igf) throws Exception {
  FetchedFile f=fetcher.fetch(new Reference().setReference(""String_Node_Str"" + be.getAsString()),igf);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.setBundle((Bundle)parse(f));
    for (    BundleEntryComponent b : f.getBundle().getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(convertToElement(r.getResource()));
      for (      UriType p : b.getResource().getMeta().getProfile())       r.getProfiles().add(p.asStringValue());
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else   f=altMap.get(""String_Node_Str"" + be.getAsString());
  ImplementationGuidePackageComponent pck=pubIg.addPackage().setName(f.getTitle());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuidePackageResourceComponent res=pck.addResource();
    res.setExample(false).setName(r.getId()).setSource(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}",0.9856386999244142
23928,"private void regenerate(String uri) throws Exception {
  Resource res;
  if (uri.contains(""String_Node_Str""))   res=context.fetchResource(StructureDefinition.class,uri);
 else   throw new Exception(""String_Node_Str"" + uri);
  if (res == null)   throw new Exception(""String_Node_Str"" + uri);
  BaseConformance bc=(BaseConformance)res;
  FetchedFile f=new FetchedFile();
  FetchedResource r=f.addResource();
  r.setResource(res);
  r.setId(bc.getId());
  r.setTitle(bc.getName());
  r.setValidated(true);
  r.setElement(new ObjectConverter(context).convert(bc));
  igpkp.findConfiguration(f,r);
  bc.setUserData(""String_Node_Str"",r.getConfig());
  generateOutputs(f,true);
}","private void regenerate(String uri) throws Exception {
  Resource res;
  if (uri.contains(""String_Node_Str""))   res=context.fetchResource(StructureDefinition.class,uri);
 else   throw new Exception(""String_Node_Str"" + uri);
  if (res == null)   throw new Exception(""String_Node_Str"" + uri);
  BaseConformance bc=(BaseConformance)res;
  FetchedFile f=new FetchedFile();
  FetchedResource r=f.addResource();
  r.setResource(res);
  r.setId(bc.getId());
  r.setTitle(bc.getName());
  r.setValidated(true);
  r.setElement(convertToElement(bc));
  igpkp.findConfiguration(f,r);
  bc.setUserData(""String_Node_Str"",r.getConfig());
  generateOutputs(f,true);
}",0.9712990936555892
23929,"private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=r.getConfig() == null ? null : ostr(r.getConfig(),""String_Node_Str"");
      if (ver == null)       ver=version;
      if (""String_Node_Str"".equals(ver)) {
        file.getErrors().clear();
        org.hl7.fhir.dstu2.model.Resource res2=null;
        if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else         if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
        org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor_10_20(null).convertResource(res2);
        e=new ObjectConverter(context).convert(res);
        r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
        r.setResource(res);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=r.getConfig() == null ? null : ostr(r.getConfig(),""String_Node_Str"");
      if (ver == null)       ver=version;
      if (""String_Node_Str"".equals(ver)) {
        file.getErrors().clear();
        org.hl7.fhir.dstu2.model.Resource res2=null;
        if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else         if (file.getContentType().contains(""String_Node_Str""))         res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
        org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor_10_20(null).convertResource(res2);
        e=convertToElement(res);
        r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
        r.setResource(res);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}",0.990922121356904
23930,"private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,sd.getName());
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (base != null && !sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(new ObjectConverter(context).convert(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}","private void generateSnapshot(FetchedFile f,FetchedResource r,StructureDefinition sd) throws Exception {
  boolean changed=false;
  dlog(""String_Node_Str"" + sd.getUrl());
  ProfileUtilities utils=new ProfileUtilities(context,f.getErrors(),igpkp);
  StructureDefinition base=sd.hasBaseDefinition() ? fetchSnapshotted(sd.getBaseDefinition()) : null;
  if (sd.getKind() != StructureDefinitionKind.LOGICAL) {
    if (!sd.hasSnapshot()) {
      dlog(""String_Node_Str"" + sd.getUrl());
      if (base == null)       throw new Exception(""String_Node_Str"" + sd.getBaseDefinition() + ""String_Node_Str""+ sd.getUrl()+ ""String_Node_Str"");
      List<String> errors=new ArrayList<String>();
      utils.sortDifferential(base,sd,""String_Node_Str"" + sd.getUrl(),errors);
      for (      String s : errors)       f.getErrors().add(new ValidationMessage(Source.ProfileValidator,IssueType.INVALID,sd.getUrl(),s,IssueSeverity.ERROR));
      utils.setIds(sd,sd.getName());
      String p=sd.getDifferential().getElement().get(0).getPath();
      if (p.contains(""String_Node_Str"")) {
        changed=true;
        sd.getDifferential().getElement().add(0,new ElementDefinition().setPath(p.substring(0,p.indexOf(""String_Node_Str""))));
      }
      utils.generateSnapshot(base,sd,sd.getUrl(),sd.getName());
      changed=true;
    }
  }
 else {
    dlog(""String_Node_Str"" + sd.getUrl());
    if (base != null && !sd.hasSnapshot()) {
      utils.populateLogicalSnapshot(sd);
      changed=true;
    }
  }
  if (changed || (!r.getElement().hasChild(""String_Node_Str"") && sd.hasSnapshot()))   r.setElement(convertToElement(sd));
  r.setSnapshotted(true);
  dlog(""String_Node_Str"" + sd.getUrl());
  context.seeResource(sd.getUrl(),sd);
}",0.936627906976744
23931,"public void initialize(boolean clearCache) throws Exception {
  first=true;
  if (configFile == null) {
    buildConfigFile();
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    JsonObject pp=configuration.getAsJsonObject(""String_Node_Str"");
    prePagesDir=Utilities.path(root,str(pp,""String_Node_Str""));
    prePagesXslt=Utilities.path(root,str(pp,""String_Node_Str""));
    checkDir(prePagesDir);
    checkFile(prePagesXslt);
    xslt=TextFile.fileToBytes(prePagesXslt);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  dlog(""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(""String_Node_Str"" + pagesDir);
  checkDir(pagesDir);
  dlog(""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    }
  }
 else   loadValidationPack();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  if (version.equals(""String_Node_Str""))   validator.setNoInvariantChecks(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","public void initialize(boolean clearCache) throws Exception {
  first=true;
  if (configFile == null) {
    buildConfigFile();
  }
 else   log(""String_Node_Str"" + configFile);
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  version=ostr(configuration,""String_Node_Str"");
  if (Utilities.noString(version))   version=Constants.VERSION;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    JsonObject pp=configuration.getAsJsonObject(""String_Node_Str"");
    prePagesDir=Utilities.path(root,str(pp,""String_Node_Str""));
    prePagesXslt=Utilities.path(root,str(pp,""String_Node_Str""));
    checkDir(prePagesDir);
    checkFile(prePagesXslt);
    xslt=TextFile.fileToBytes(prePagesXslt);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir,specMaps);
  historyPage=ostr(paths,""String_Node_Str"");
  if (historyPage != null)   inspector.getManual().add(historyPage);
  dlog(""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(""String_Node_Str"" + pagesDir);
  checkDir(pagesDir);
  dlog(""String_Node_Str"" + tempDir);
  Utilities.clearDirectory(tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  Utilities.clearDirectory(outputDir);
  dlog(""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  Utilities.createDirectory(vsCache);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  if (version.equals(Constants.VERSION)) {
    try {
      log(""String_Node_Str"");
      context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      log(""String_Node_Str"");
      context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    }
  }
 else   loadValidationPack();
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  context.setExpansionProfile(makeExpProfile());
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  validator.setNoBindingMsgSuppressed(true);
  validator.setNoInvariantChecks(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9639948984597272
23932,"private void generateLogicalMaps() throws Exception {
  StructureMapUtilities mu=new StructureMapUtilities(context,null,null);
  for (  FetchedFile f : fileList) {
    List<StructureMap> maps=new ArrayList<StructureMap>();
    for (    FetchedResource r : f.getResources()) {
      if (r.getResource() instanceof StructureDefinition) {
        StructureMap map=mu.generateMapFromMappings((StructureDefinition)r.getResource());
        if (map != null) {
          maps.add(map);
        }
      }
    }
    for (    StructureMap map : maps) {
      FetchedResource nr=f.addResource();
      nr.setResource(map);
      nr.setElement(new ObjectConverter(context).convert(map));
      nr.setId(map.getId());
      nr.setTitle(map.getName());
      igpkp.findConfiguration(f,nr);
    }
  }
}","private void generateLogicalMaps() throws Exception {
  StructureMapUtilities mu=new StructureMapUtilities(context,null,null);
  for (  FetchedFile f : fileList) {
    List<StructureMap> maps=new ArrayList<StructureMap>();
    for (    FetchedResource r : f.getResources()) {
      if (r.getResource() instanceof StructureDefinition) {
        StructureMap map=mu.generateMapFromMappings((StructureDefinition)r.getResource());
        if (map != null) {
          maps.add(map);
        }
      }
    }
    for (    StructureMap map : maps) {
      FetchedResource nr=f.addResource();
      nr.setResource(map);
      nr.setElement(convertToElement(map));
      nr.setId(map.getId());
      nr.setTitle(map.getName());
      igpkp.findConfiguration(f,nr);
    }
  }
}",0.8545688545688546
23933,"private boolean loadSpreadsheet(JsonPrimitive be,boolean needToBuild,FetchedFile igf,Set<String> knownValueSetIds) throws Exception {
  if (be.getAsString().startsWith(""String_Node_Str""))   return false;
  String path=Utilities.path(Utilities.getDirectoryForFile(igName),be.getAsString());
  FetchedFile f=fetcher.fetch(path);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.getValuesetsToLoad().clear();
    dlog(""String_Node_Str"" + path);
    f.setBundle(new IgSpreadsheetParser(context,execTime,igpkp.getCanonical(),f.getValuesetsToLoad(),first,context.getBinaries().get(""String_Node_Str""),knownValueSetIds).parse(f));
    for (    BundleEntryComponent b : f.getBundle().getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(new ObjectConverter(context).convert(r.getResource()));
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else {
    f=altMap.get(""String_Node_Str"" + be.getAsString());
  }
  for (  String id : f.getValuesetsToLoad().keySet()) {
    if (!knownValueSetIds.contains(id)) {
      String vr=f.getValuesetsToLoad().get(id);
      path=Utilities.path(Utilities.getDirectoryForFile(igName),vr);
      FetchedFile fv=fetcher.fetchFlexible(path);
      boolean vrchanged=noteFile(""String_Node_Str"" + vr,fv);
      if (vrchanged) {
        determineType(fv);
        checkImplicitResourceIdentity(id,fv);
      }
      knownValueSetIds.add(id);
      boolean crchanged=false;
      String cr=vr.replace(""String_Node_Str"",""String_Node_Str"");
      if (!cr.equals(vr)) {
        path=Utilities.path(Utilities.getDirectoryForFile(igName),cr);
        if (fetcher.canFetchFlexible(path)) {
          fv=fetcher.fetchFlexible(path);
          crchanged=noteFile(""String_Node_Str"" + vr,fv);
          if (crchanged) {
            determineType(fv);
            checkImplicitResourceIdentity(id,fv);
          }
        }
      }
      changed=changed || vrchanged || crchanged;
    }
  }
  ImplementationGuidePackageComponent pck=pubIg.addPackage().setName(f.getTitle());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuidePackageResourceComponent res=pck.addResource();
    res.setExample(false).setName(r.getTitle()).setSource(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}","private boolean loadSpreadsheet(JsonPrimitive be,boolean needToBuild,FetchedFile igf,Set<String> knownValueSetIds) throws Exception {
  if (be.getAsString().startsWith(""String_Node_Str""))   return false;
  String path=Utilities.path(Utilities.getDirectoryForFile(igName),be.getAsString());
  FetchedFile f=fetcher.fetch(path);
  boolean changed=noteFile(""String_Node_Str"" + be.getAsString(),f);
  if (changed) {
    f.getValuesetsToLoad().clear();
    dlog(""String_Node_Str"" + path);
    f.setBundle(new IgSpreadsheetParser(context,execTime,igpkp.getCanonical(),f.getValuesetsToLoad(),first,context.getBinaries().get(""String_Node_Str""),knownValueSetIds).parse(f));
    for (    BundleEntryComponent b : f.getBundle().getEntry()) {
      FetchedResource r=f.addResource();
      r.setResource(b.getResource());
      r.setId(b.getResource().getId());
      r.setElement(convertToElement(r.getResource()));
      r.setTitle(r.getElement().getChildValue(""String_Node_Str""));
      igpkp.findConfiguration(f,r);
    }
  }
 else {
    f=altMap.get(""String_Node_Str"" + be.getAsString());
  }
  for (  String id : f.getValuesetsToLoad().keySet()) {
    if (!knownValueSetIds.contains(id)) {
      String vr=f.getValuesetsToLoad().get(id);
      path=Utilities.path(Utilities.getDirectoryForFile(igName),vr);
      FetchedFile fv=fetcher.fetchFlexible(path);
      boolean vrchanged=noteFile(""String_Node_Str"" + vr,fv);
      if (vrchanged) {
        determineType(fv);
        checkImplicitResourceIdentity(id,fv);
      }
      knownValueSetIds.add(id);
      boolean crchanged=false;
      String cr=vr.replace(""String_Node_Str"",""String_Node_Str"");
      if (!cr.equals(vr)) {
        path=Utilities.path(Utilities.getDirectoryForFile(igName),cr);
        if (fetcher.canFetchFlexible(path)) {
          fv=fetcher.fetchFlexible(path);
          crchanged=noteFile(""String_Node_Str"" + vr,fv);
          if (crchanged) {
            determineType(fv);
            checkImplicitResourceIdentity(id,fv);
          }
        }
      }
      changed=changed || vrchanged || crchanged;
    }
  }
  ImplementationGuidePackageComponent pck=pubIg.addPackage().setName(f.getTitle());
  for (  FetchedResource r : f.getResources()) {
    bndIds.add(r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    ImplementationGuidePackageResourceComponent res=pck.addResource();
    res.setExample(false).setName(r.getTitle()).setSource(new Reference().setReference(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()));
  }
  return changed || needToBuild;
}",0.992578125
23934,"private void load(String type) throws Exception {
  dlog(""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        BaseConformance bc=(BaseConformance)r.getResource();
        boolean altered=false;
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(ConformanceResourceStatus.DRAFT);
        }
        if (altered)         r.setElement(new ObjectConverter(context).convert(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          if (!(bc instanceof StructureDefinition))           context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}","private void load(String type) throws Exception {
  dlog(""String_Node_Str"" + type);
  for (  FetchedFile f : fileList) {
    for (    FetchedResource r : f.getResources()) {
      if (r.getElement().fhirType().equals(type)) {
        dlog(""String_Node_Str"" + r.getId());
        if (!r.isValidated())         validate(f,r);
        if (r.getResource() == null)         try {
          r.setResource(parse(f));
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage(),e);
        }
        BaseConformance bc=(BaseConformance)r.getResource();
        boolean altered=false;
        if (!bc.hasDate()) {
          altered=true;
          bc.setDateElement(new DateTimeType(execTime));
        }
        if (!bc.hasStatus()) {
          altered=true;
          bc.setStatus(ConformanceResourceStatus.DRAFT);
        }
        if (altered)         r.setElement(convertToElement(bc));
        igpkp.checkForPath(f,r,bc);
        try {
          if (!(bc instanceof StructureDefinition))           context.seeResource(bc.getUrl(),bc);
        }
 catch (        Exception e) {
          throw new Exception(""String_Node_Str"" + bc.getUrl() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}",0.9853054911059552
23935,"private void updateImplementationGuide() throws Exception {
  for (  ImplementationGuidePackageComponent pck : pubIg.getPackage()) {
    for (    ImplementationGuidePackageResourceComponent res : pck.getResource()) {
      FetchedFile f=null;
      FetchedResource r=null;
      for (      FetchedFile tf : fileList) {
        for (        FetchedResource tr : tf.getResources()) {
          if (tr.getLocalRef().equals(res.getSourceReference().getReference())) {
            r=tr;
            f=tf;
          }
        }
      }
      if (r != null) {
        String path=igpkp.doReplacements(igpkp.getLinkFor(f,r),r,null,null);
        res.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(path));
        inspector.addLinkToCheck(""String_Node_Str"",path);
      }
    }
  }
  FetchedResource r=altMap.get(IG_NAME).getResources().get(0);
  r.setResource(pubIg);
  r.setElement(new ObjectConverter(context).convert(pubIg));
}","private void updateImplementationGuide() throws Exception {
  for (  ImplementationGuidePackageComponent pck : pubIg.getPackage()) {
    for (    ImplementationGuidePackageResourceComponent res : pck.getResource()) {
      FetchedFile f=null;
      FetchedResource r=null;
      for (      FetchedFile tf : fileList) {
        for (        FetchedResource tr : tf.getResources()) {
          if (tr.getLocalRef().equals(res.getSourceReference().getReference())) {
            r=tr;
            f=tf;
          }
        }
      }
      if (r != null) {
        String path=igpkp.doReplacements(igpkp.getLinkFor(f,r),r,null,null);
        res.addExtension().setUrl(""String_Node_Str"").setValue(new UriType(path));
        inspector.addLinkToCheck(""String_Node_Str"",path);
      }
    }
  }
  FetchedResource r=altMap.get(IG_NAME).getResources().get(0);
  r.setResource(pubIg);
  r.setElement(convertToElement(pubIg));
}",0.9795037756202803
23936,"private void executeTransforms() throws FHIRException, Exception {
  if (""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""))) {
    MappingServices services=new MappingServices(context,igpkp.getCanonical());
    StructureMapUtilities utils=new StructureMapUtilities(context,context.getTransforms(),services);
    for (    FetchedFile f : changeList) {
      Map<FetchedResource,List<StructureMap>> worklist=new HashMap<FetchedResource,List<StructureMap>>();
      for (      FetchedResource r : f.getResources()) {
        List<StructureMap> transforms=context.findTransformsforSource(r.getElement().getProperty().getStructure().getUrl());
        if (transforms.size() > 0) {
          worklist.put(r,transforms);
        }
      }
      for (      Entry<FetchedResource,List<StructureMap>> t : worklist.entrySet()) {
        int i=0;
        for (        StructureMap map : t.getValue()) {
          boolean ok=true;
          String tgturl=null;
          for (          StructureMapStructureComponent st : map.getStructure()) {
            if (st.getMode() == StructureMapModelMode.TARGET) {
              if (tgturl == null)               tgturl=st.getUrl();
 else               ok=false;
            }
          }
          if (ok && tgturl != null) {
            StructureDefinition tsd=context.fetchResource(StructureDefinition.class,tgturl);
            if (tsd != null) {
              Resource target=ResourceFactory.createResource(tsd.getId());
              if (t.getValue().size() > 1)               target.setId(t.getKey().getId() + ""String_Node_Str"" + Integer.toString(i));
 else               target.setId(t.getKey().getId() + ""String_Node_Str"");
              i++;
              services.reset();
              utils.transform(target,t.getKey().getElement(),map,target);
              FetchedResource nr=new FetchedResource();
              nr.setElement(new ObjectConverter(context).convert(target));
              nr.setId(target.getId());
              nr.setResource(target);
              nr.setTitle(""String_Node_Str"");
              f.getResources().add(nr);
              igpkp.findConfiguration(f,nr);
            }
          }
        }
      }
    }
  }
}","private void executeTransforms() throws FHIRException, Exception {
  if (""String_Node_Str"".equals(ostr(configuration,""String_Node_Str""))) {
    MappingServices services=new MappingServices(context,igpkp.getCanonical());
    StructureMapUtilities utils=new StructureMapUtilities(context,context.getTransforms(),services);
    for (    FetchedFile f : changeList) {
      Map<FetchedResource,List<StructureMap>> worklist=new HashMap<FetchedResource,List<StructureMap>>();
      for (      FetchedResource r : f.getResources()) {
        List<StructureMap> transforms=context.findTransformsforSource(r.getElement().getProperty().getStructure().getUrl());
        if (transforms.size() > 0) {
          worklist.put(r,transforms);
        }
      }
      for (      Entry<FetchedResource,List<StructureMap>> t : worklist.entrySet()) {
        int i=0;
        for (        StructureMap map : t.getValue()) {
          boolean ok=true;
          String tgturl=null;
          for (          StructureMapStructureComponent st : map.getStructure()) {
            if (st.getMode() == StructureMapModelMode.TARGET) {
              if (tgturl == null)               tgturl=st.getUrl();
 else               ok=false;
            }
          }
          if (ok && tgturl != null) {
            StructureDefinition tsd=context.fetchResource(StructureDefinition.class,tgturl);
            if (tsd != null) {
              Resource target=ResourceFactory.createResource(tsd.getId());
              if (t.getValue().size() > 1)               target.setId(t.getKey().getId() + ""String_Node_Str"" + Integer.toString(i));
 else               target.setId(t.getKey().getId() + ""String_Node_Str"");
              i++;
              services.reset();
              utils.transform(target,t.getKey().getElement(),map,target);
              FetchedResource nr=new FetchedResource();
              nr.setElement(convertToElement(target));
              nr.setId(target.getId());
              nr.setResource(target);
              nr.setTitle(""String_Node_Str"");
              f.getResources().add(nr);
              igpkp.findConfiguration(f,nr);
            }
          }
        }
      }
    }
  }
}",0.9913083257090576
23937,"private void checkResolveLink(String filename,Location loc,String path,String ref,List<ValidationMessage> messages) throws IOException {
  links++;
  String tgtList=""String_Node_Str"";
  boolean resolved=Utilities.existsInList(ref,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") || ref.startsWith(""String_Node_Str"");
  if (!resolved)   resolved=manual.contains(ref);
  if (!resolved && specs != null) {
    for (    SpecMapManager spec : specs) {
      resolved=resolved || spec.getBase().equals(ref) || (spec.getBase() + ""String_Node_Str"").equals(ref)|| spec.hasTarget(ref);
    }
  }
  if (!resolved) {
    if (ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"")) {
      resolved=true;
      if (specs != null) {
        for (        SpecMapManager spec : specs) {
          if (ref.startsWith(spec.getBase()))           resolved=false;
        }
      }
    }
 else {
      String page=ref;
      String name=null;
      if (page.startsWith(""String_Node_Str"")) {
        name=page.substring(1);
        page=filename;
      }
 else       if (page.contains(""String_Node_Str"")) {
        name=page.substring(page.indexOf(""String_Node_Str"") + 1);
        page=Utilities.path(rootFolder,page.substring(0,page.indexOf(""String_Node_Str"")).replace(""String_Node_Str"",File.separator));
      }
 else       page=Utilities.path(Utilities.getDirectoryForFile(filename),page.replace(""String_Node_Str"",File.separator));
      LoadedFile f=cache.get(page);
      if (f != null) {
        if (Utilities.noString(name))         resolved=true;
 else {
          resolved=f.targets.contains(name);
          tgtList=""String_Node_Str"" + f.targets.toString() + ""String_Node_Str"";
        }
      }
    }
  }
  if (!resolved)   messages.add(new ValidationMessage(Source.Publisher,IssueType.NOTFOUND,filename + (path == null ? ""String_Node_Str"" : ""String_Node_Str"" + path + (loc == null ? ""String_Node_Str"" : ""String_Node_Str"" + loc.toString())),""String_Node_Str"" + ref + ""String_Node_Str""+ tgtList,IssueSeverity.ERROR));
}","private void checkResolveLink(String filename,Location loc,String path,String ref,List<ValidationMessage> messages) throws IOException {
  links++;
  String tgtList=""String_Node_Str"";
  boolean resolved=Utilities.existsInList(ref,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") || ref.startsWith(""String_Node_Str"");
  if (!resolved)   resolved=manual.contains(ref);
  if (!resolved && specs != null) {
    for (    SpecMapManager spec : specs) {
      resolved=resolved || spec.getBase().equals(ref) || (spec.getBase() + ""String_Node_Str"").equals(ref)|| spec.hasTarget(ref);
    }
  }
  if (!resolved) {
    if (ref.startsWith(""String_Node_Str"") || ref.startsWith(""String_Node_Str"")) {
      resolved=true;
      if (specs != null) {
        for (        SpecMapManager spec : specs) {
          if (ref.startsWith(spec.getBase()))           resolved=false;
        }
      }
    }
 else {
      String page=ref;
      String name=null;
      if (page.startsWith(""String_Node_Str"")) {
        name=page.substring(1);
        page=filename;
      }
 else       if (page.contains(""String_Node_Str"")) {
        name=page.substring(page.indexOf(""String_Node_Str"") + 1);
        page=Utilities.path(rootFolder,page.substring(0,page.indexOf(""String_Node_Str"")).replace(""String_Node_Str"",File.separator));
      }
 else {
        String folder=Utilities.getDirectoryForFile(filename);
        page=Utilities.path(folder == null ? rootFolder : folder,page.replace(""String_Node_Str"",File.separator));
      }
      LoadedFile f=cache.get(page);
      if (f != null) {
        if (Utilities.noString(name))         resolved=true;
 else {
          resolved=f.targets.contains(name);
          tgtList=""String_Node_Str"" + f.targets.toString() + ""String_Node_Str"";
        }
      }
    }
  }
  if (!resolved)   messages.add(new ValidationMessage(Source.Publisher,IssueType.NOTFOUND,filename + (path == null ? ""String_Node_Str"" : ""String_Node_Str"" + path + (loc == null ? ""String_Node_Str"" : ""String_Node_Str"" + loc.toString())),""String_Node_Str"" + ref + ""String_Node_Str""+ tgtList,IssueSeverity.ERROR));
}",0.9704902427415516
23938,"private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=ostr(r.getConfig(),""String_Node_Str"");
      if (ver != null) {
        if (""String_Node_Str"".equals(ver)) {
          file.getErrors().clear();
          org.hl7.fhir.dstu2.model.Resource res2=null;
          if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else           if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
          org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor(null).convertResource(res2);
          e=new ObjectConverter(context).convert(res);
          r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
          r.setResource(res);
        }
 else         throw new Exception(""String_Node_Str"" + ver);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    FetchedResource r=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    try {
      r=file.addResource();
      String id=e.getChildValue(""String_Node_Str"");
      if (Utilities.noString(id))       throw new Exception(""String_Node_Str"" + file.getPath());
      r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
      Element m=e.getNamedChild(""String_Node_Str"");
      if (m != null) {
        List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
        for (        Element p : profiles)         r.getProfiles().add(p.getValue());
      }
      igpkp.findConfiguration(file,r);
      String ver=r.getConfig() == null ? null : ostr(r.getConfig(),""String_Node_Str"");
      if (ver != null) {
        if (""String_Node_Str"".equals(ver)) {
          file.getErrors().clear();
          org.hl7.fhir.dstu2.model.Resource res2=null;
          if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.JsonParser().parse(file.getSource());
 else           if (file.getContentType().contains(""String_Node_Str""))           res2=new org.hl7.fhir.dstu2.formats.XmlParser().parse(file.getSource());
          org.hl7.fhir.dstu3.model.Resource res=new VersionConvertor(null).convertResource(res2);
          e=new ObjectConverter(context).convert(res);
          r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
          r.setResource(res);
        }
 else         throw new Exception(""String_Node_Str"" + ver);
      }
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}",0.9928124275446324
23939,"private void generate() throws Exception {
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesRun.clear();
  for (  String rg : regenList)   regenerate(rg);
  updateImplementationGuide();
  for (  FetchedFile f : changeList)   generateOutputs(f);
  if (!changeList.isEmpty())   generateSummaryOutputs();
  cleanOutput(tempDir);
  if (runTool())   if (!changeList.isEmpty())   generateZips();
  log(""String_Node_Str"");
  List<ValidationMessage> linkmsgs=inspector.check();
  int bl=0;
  int lf=0;
  for (  ValidationMessage m : linkmsgs) {
    if (m.getLevel() == IssueSeverity.ERROR) {
      if (m.getType() == IssueType.NOTFOUND)       bl++;
 else       lf++;
    }
 else     if (m.getLevel() == IssueSeverity.FATAL) {
      throw new Exception(m.getMessage());
    }
  }
  log(""String_Node_Str"" + Integer.toString(inspector.total()) + ""String_Node_Str""+ checkPlural(""String_Node_Str"",inspector.total())+ ""String_Node_Str""+ Integer.toString(lf)+ ""String_Node_Str""+ checkPlural(""String_Node_Str"",lf)+ ""String_Node_Str""+ Integer.toString((lf * 100) / inspector.total())+ ""String_Node_Str"");
  log(""String_Node_Str"" + Integer.toString(inspector.links()) + ""String_Node_Str""+ checkPlural(""String_Node_Str"",inspector.links())+ ""String_Node_Str""+ Integer.toString(bl)+ ""String_Node_Str""+ checkPlural(""String_Node_Str"",lf)+ ""String_Node_Str""+ Integer.toString((bl * 100) / inspector.links())+ ""String_Node_Str"");
  errors.addAll(linkmsgs);
}","private void generate() throws Exception {
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesRun.clear();
  for (  String rg : regenList)   regenerate(rg);
  updateImplementationGuide();
  for (  FetchedFile f : changeList)   generateOutputs(f);
  if (!changeList.isEmpty())   generateSummaryOutputs();
  cleanOutput(tempDir);
  if (runTool())   if (!changeList.isEmpty())   generateZips();
  log(""String_Node_Str"");
  List<ValidationMessage> linkmsgs=inspector.check();
  int bl=0;
  int lf=0;
  for (  ValidationMessage m : linkmsgs) {
    if (m.getLevel() == IssueSeverity.ERROR) {
      if (m.getType() == IssueType.NOTFOUND)       bl++;
 else       lf++;
    }
 else     if (m.getLevel() == IssueSeverity.FATAL) {
      throw new Exception(m.getMessage());
    }
  }
  log(""String_Node_Str"" + Integer.toString(inspector.total()) + ""String_Node_Str""+ checkPlural(""String_Node_Str"",inspector.total())+ ""String_Node_Str""+ Integer.toString(lf)+ ""String_Node_Str""+ checkPlural(""String_Node_Str"",lf)+ ""String_Node_Str""+ Integer.toString((lf * 100) / (inspector.total() == 0 ? 1 : inspector.total()))+ ""String_Node_Str"");
  log(""String_Node_Str"" + Integer.toString(inspector.links()) + ""String_Node_Str""+ checkPlural(""String_Node_Str"",inspector.links())+ ""String_Node_Str""+ Integer.toString(bl)+ ""String_Node_Str""+ checkPlural(""String_Node_Str"",lf)+ ""String_Node_Str""+ Integer.toString((bl * 100) / (inspector.links() == 0 ? 1 : inspector.links()))+ ""String_Node_Str"");
  errors.addAll(linkmsgs);
}",0.9698331193838254
23940,"private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        ok=fpe.evaluateToBoolean(resource,element,n);
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + ""String_Node_Str"" + msg+ ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + ""String_Node_Str"" + msg+ ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}","private void checkInvariants(List<ValidationMessage> errors,String path,StructureDefinition profile,ElementDefinition ed,String typename,String typeProfile,Element resource,Element element) throws FHIRException, FHIRException {
  for (  ElementDefinitionConstraintComponent inv : ed.getConstraint()) {
    if (inv.hasExpression()) {
      ExpressionNode n=(ExpressionNode)inv.getUserData(""String_Node_Str"");
      if (n == null) {
        long t=System.nanoTime();
        n=fpe.parse(inv.getExpression());
        fpeTime=fpeTime + (System.nanoTime() - t);
        inv.setUserData(""String_Node_Str"",n);
      }
      String msg;
      boolean ok;
      try {
        long t=System.nanoTime();
        ok=fpe.evaluateToBoolean(resource,element,n);
        fpeTime=fpeTime + (System.nanoTime() - t);
        msg=fpe.forLog();
      }
 catch (      Exception ex) {
        ok=false;
        msg=ex.getMessage();
      }
      if (!ok) {
        ok=fpe.evaluateToBoolean(resource,element,n);
        if (!Utilities.noString(msg))         msg=""String_Node_Str"" + msg + ""String_Node_Str"";
        if (inv.getSeverity() == ConstraintSeverity.ERROR)         rule(errors,IssueType.INVARIANT,element.line(),element.col(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
 else         if (inv.getSeverity() == ConstraintSeverity.WARNING)         warning(errors,IssueType.INVARIANT,element.line(),element.line(),path,ok,inv.getHuman() + msg + ""String_Node_Str""+ inv.getExpression()+ ""String_Node_Str"");
      }
    }
  }
}",0.937356510331256
23941,"private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    FetchedResource r=file.addResource();
    String id=e.getChildValue(""String_Node_Str"");
    if (Utilities.noString(id))     throw new Exception(""String_Node_Str"" + file.getName());
    r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
    Element m=e.getNamedChild(""String_Node_Str"");
    if (m != null) {
      List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
      for (      Element p : profiles)       r.getProfiles().add(p.getValue());
    }
    igpkp.findConfiguration(file,r);
  }
}","private void determineType(FetchedFile file) throws Exception {
  if (file.getResources().isEmpty()) {
    file.getErrors().clear();
    Element e=null;
    try {
      if (file.getContentType().contains(""String_Node_Str""))       e=loadFromJson(file);
 else       if (file.getContentType().contains(""String_Node_Str""))       e=loadFromXml(file);
 else       throw new Exception(""String_Node_Str"" + file.getName());
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    FetchedResource r=file.addResource();
    String id=e.getChildValue(""String_Node_Str"");
    if (Utilities.noString(id))     throw new Exception(""String_Node_Str"" + file.getPath());
    r.setElement(e).setId(id).setTitle(e.getChildValue(""String_Node_Str""));
    Element m=e.getNamedChild(""String_Node_Str"");
    if (m != null) {
      List<Element> profiles=m.getChildrenByName(""String_Node_Str"");
      for (      Element p : profiles)       r.getProfiles().add(p.getValue());
    }
    igpkp.findConfiguration(file,r);
  }
}",0.9963201471941122
23942,"private void validate(FetchedFile file,FetchedResource r) throws Exception {
  validator.validate(file.getErrors(),r.getElement());
  r.setValidated(true);
  if (r.getConfig() == null)   igpkp.findConfiguration(file,r);
}","private void validate(FetchedFile file,FetchedResource r) throws Exception {
  List<ValidationMessage> errs=new ArrayList<ValidationMessage>();
  validator.validate(errs,r.getElement());
  for (  ValidationMessage vm : errs) {
    file.getErrors().add(vm.setLocation(r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ vm.getLocation()));
  }
  r.setValidated(true);
  if (r.getConfig() == null)   igpkp.findConfiguration(file,r);
}",0.5390279823269514
23943,"private int processExtension(Sheet sheet,int row,String uri,List<ValidationMessage> issues,Map<String,ElementDefinitionConstraintComponent> invariants) throws Exception {
  String name=sheet.getColumn(row,""String_Node_Str"");
  StructureDefinition ex=new StructureDefinition();
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  bundle.addEntry().setResource(ex).setFullUrl(ex.getUrl());
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(Constants.VERSION);
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      checkContextValid(ex.getContextType(),c,this.name);
      ex.addContext(c);
    }
  }
  ex.setDisplay(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exe=ex.getDifferential().addElement();
  exe.setPath(""String_Node_Str"");
  exe.setName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exu=ex.getDifferential().addElement();
  exu.setPath(""String_Node_Str"");
  exu.setFixed(new UriType(ex.getUrl()));
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (inv.getKey().equals(name))       exe.getConstraint().add(inv);
    }
  }
  parseExtensionElement(sheet,row,ex,exe,false);
  String sl=exe.getShort();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getDisplay());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(exe.getDefinition());
  ex.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.OTHER,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   ex.setStatus(ConformanceResourceStatus.fromCode(metadata(""String_Node_Str"")));
  row++;
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefinition child=ex.getDifferential().addElement();
    child.setPath(""String_Node_Str"");
    child.setName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,ex,child,true);
    if (invariants != null) {
      for (      ElementDefinitionConstraintComponent inv : invariants.values()) {
        if (inv.getKey().equals(n))         child.getConstraint().add(inv);
      }
    }
    row++;
  }
  ex.getDifferential().getElementFirstRep().getType().clear();
  StructureDefinition base=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.setIds(ex,ex.getName());
  return row;
}","private int processExtension(Sheet sheet,int row,String uri,List<ValidationMessage> issues,Map<String,ElementDefinitionConstraintComponent> invariants) throws Exception {
  String name=sheet.getColumn(row,""String_Node_Str"");
  StructureDefinition ex=new StructureDefinition();
  ex.setUrl(uri + name);
  ex.setId(tail(ex.getUrl()));
  bundle.addEntry().setResource(ex).setFullUrl(ex.getUrl());
  ex.setKind(StructureDefinitionKind.COMPLEXTYPE);
  ex.setType(""String_Node_Str"");
  ex.setBaseDefinition(""String_Node_Str"");
  ex.setDerivation(TypeDerivationRule.CONSTRAINT);
  ex.setAbstract(false);
  ex.setFhirVersion(Constants.VERSION);
  String context=null;
  if (Utilities.noString(name))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (name.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ getLocation(row));
  if (context == null) {
    ex.setContextType(readContextType(sheet.getColumn(row,""String_Node_Str""),row));
    String cc=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(cc))     for (    String c : cc.split(""String_Node_Str"")) {
      checkContextValid(ex.getContextType(),c,this.name);
      ex.addContext(c);
    }
  }
  ex.setDisplay(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exe=ex.getDifferential().addElement();
  exe.setPath(""String_Node_Str"");
  exe.setName(sheet.getColumn(row,""String_Node_Str""));
  ElementDefinition exu=ex.getDifferential().addElement();
  exu.setPath(""String_Node_Str"");
  exu.setFixed(new UriType(ex.getUrl()));
  if (invariants != null) {
    for (    ElementDefinitionConstraintComponent inv : invariants.values()) {
      if (inv.getKey().equals(name))       exe.getConstraint().add(inv);
    }
  }
  parseExtensionElement(sheet,row,ex,exe,false);
  String sl=exe.getShort();
  ex.setName(sheet.getColumn(row,""String_Node_Str""));
  if (!ex.hasName())   ex.setName(ex.getDisplay());
  if (!Utilities.noString(sl) && (!sl.contains(""String_Node_Str"") || !ex.hasName()))   ex.setName(sl);
  if (!ex.hasName())   throw new Exception(""String_Node_Str"" + ex.getUrl() + ""String_Node_Str""+ getLocation(row));
  ex.setDescription(exe.getDefinition());
  ex.setPublisher(metadata(""String_Node_Str""));
  if (hasMetadata(""String_Node_Str""))   ex.addContact().getTelecom().add(Factory.newContactPoint(ContactPointSystem.OTHER,metadata(""String_Node_Str"")));
  if (hasMetadata(""String_Node_Str""))   ex.setDateElement(Factory.newDateTime(metadata(""String_Node_Str"").substring(0,10)));
 else   ex.setDate(genDate.getTime());
  if (hasMetadata(""String_Node_Str""))   ex.setStatus(ConformanceResourceStatus.fromCode(metadata(""String_Node_Str"")));
  row++;
  while (row < sheet.getRows().size() && sheet.getColumn(row,""String_Node_Str"").startsWith(name + ""String_Node_Str"")) {
    String n=sheet.getColumn(row,""String_Node_Str"");
    ElementDefinition child=ex.getDifferential().addElement();
    child.setPath(""String_Node_Str"");
    child.setName(n.substring(n.lastIndexOf(""String_Node_Str"") + 1));
    parseExtensionElement(sheet,row,ex,child,true);
    if (invariants != null) {
      for (      ElementDefinitionConstraintComponent inv : invariants.values()) {
        if (inv.getKey().equals(n))         child.getConstraint().add(inv);
      }
    }
    row++;
  }
  ex.getDifferential().getElementFirstRep().getType().clear();
  if (ex.getDifferential().getElementFirstRep().hasRequirements()) {
    ex.setRequirements(ex.getDifferential().getElementFirstRep().getRequirements());
    ex.getDifferential().getElementFirstRep().setRequirements(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasLabel()) {
    ex.setDisplay(ex.getDifferential().getElementFirstRep().getLabel());
    ex.getDifferential().getElementFirstRep().setLabel(null);
  }
  if (ex.getDifferential().getElementFirstRep().hasCode()) {
    ex.getCode().addAll(ex.getDifferential().getElementFirstRep().getCode());
    ex.getDifferential().getElementFirstRep().getCode().clear();
  }
  StructureDefinition base=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"");
  List<String> errors=new ArrayList<String>();
  ProfileUtilities utils=new ProfileUtilities(this.context,issues,null);
  utils.sortDifferential(base,ex,""String_Node_Str"" + ex.getUrl(),errors);
  assert(errors.size() == 0);
  utils.setIds(ex,ex.getName());
  return row;
}",0.9215976331360948
23944,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
              if (outcome.getType().size() > 1)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              int start=diffCursor;
              while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))               diffCursor++;
              processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
          diffpos++;
        }
      }
    }
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor)) {
              if (outcome.getType().size() > 1)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              int start=diffCursor;
              while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))               diffCursor++;
              processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
          diffpos++;
        }
      }
    }
  }
}",0.9965490527501936
23945,"private boolean baseWalksInto(List<ElementDefinition> elements,int cursor,String cpath){
  if (cursor >= elements.size())   return false;
  String path=elements.get(cursor).getPath();
  return path.startsWith(cpath);
}","private boolean baseWalksInto(List<ElementDefinition> elements,int cursor){
  if (cursor >= elements.size())   return false;
  String path=elements.get(cursor).getPath();
  String prevPath=elements.get(cursor - 1).getPath();
  return path.startsWith(prevPath + ""String_Node_Str"");
}",0.8
23946,"public void compose(Element e,Turtle ttl,String base) throws Exception {
  ttl.prefix(""String_Node_Str"",FHIR_URI_BASE);
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  Section section=ttl.section(""String_Node_Str"");
  Subject subject;
  String id=e.getChildValue(""String_Node_Str"");
  if (base != null && id != null)   subject=section.triple(""String_Node_Str"" + base + e.getType()+ ((base.endsWith(""String_Node_Str"") || base.endsWith(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"")+ id+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + e.getType());
 else   subject=section.triple(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + e.getType());
  subject.linkedPredicate(""String_Node_Str"",""String_Node_Str"",linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  for (  Element child : e.getChildren()) {
    composeElement(section,subject,child,null);
    if (""String_Node_Str"".equals(child.getType())) {
      String refURI=getReferenceURI(child.getChildValue(""String_Node_Str""));
      if (refURI != null) {
        String uriType=getURIType(refURI);
        if (uriType != null)         section.triple(refURI,""String_Node_Str"",""String_Node_Str"" + uriType);
      }
    }
  }
}","public void compose(Element e,Turtle ttl,String base) throws Exception {
  ttl.prefix(""String_Node_Str"",FHIR_URI_BASE);
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  ttl.prefix(""String_Node_Str"",""String_Node_Str"");
  Section section=ttl.section(""String_Node_Str"");
  Subject subject;
  String id=e.getChildValue(""String_Node_Str"");
  if (base == null || id == null)   subject=section.triple(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + e.getType());
 else   if (base.endsWith(""String_Node_Str""))   subject=section.triple(""String_Node_Str"" + base + e.getType()+ ""String_Node_Str""+ id+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + e.getType());
 else   subject=section.triple(""String_Node_Str"" + Utilities.pathReverse(base,e.getType(),id) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + e.getType());
  subject.linkedPredicate(""String_Node_Str"",""String_Node_Str"",linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  for (  Element child : e.getChildren()) {
    composeElement(section,subject,child,null);
    if (""String_Node_Str"".equals(child.getType())) {
      String refURI=getReferenceURI(child.getChildValue(""String_Node_Str""));
      if (refURI != null) {
        String uriType=getURIType(refURI);
        if (uriType != null)         section.triple(refURI,""String_Node_Str"",""String_Node_Str"" + uriType);
      }
    }
  }
}",0.804027328299173
23947,"@Override public String toString(){
  return fhirType() + ""String_Node_Str"" + (children == null || hasValue() ? value : Integer.toString(children.size()) + ""String_Node_Str"")+ ""String_Node_Str"";
}","@Override public String toString(){
  return name + ""String_Node_Str"" + fhirType()+ ""String_Node_Str""+ (children == null || hasValue() ? value : Integer.toString(children.size()) + ""String_Node_Str"")+ ""String_Node_Str"";
}",0.8393285371702638
23948,"public void go() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(false);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc=builder.parse(new FileInputStream(sourceFileName));
  ValueSet vs=new ValueSet();
  vs.setUrl(""String_Node_Str"");
  Element title=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  vs.setVersion(title.getAttribute(""String_Node_Str""));
  vs.setName(title.getAttribute(""String_Node_Str""));
  vs.setImmutable(true);
  Element identifier=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  vs.setPublisher(identifier.getAttribute(""String_Node_Str""));
  vs.addIdentifier(new Identifier().setValue(identifier.getAttribute(""String_Node_Str"")));
  List<Element> authors=new ArrayList<Element>();
  XMLUtil.getNamedChildren(XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str""),""String_Node_Str"",authors);
  for (  Element a : authors)   if (!a.getAttribute(""String_Node_Str"").contains(""String_Node_Str""))   vs.addContact().setName(a.getTextContent());
  vs.setCopyright(""String_Node_Str"");
  vs.setStatus(ConformanceResourceStatus.ACTIVE);
  vs.setDateElement(new DateTimeType(title.getAttribute(""String_Node_Str"")));
  vs.getCompose().addInclude().setSystem(""String_Node_Str"");
  CodeSystem cs=new CodeSystem();
  cs.setUrl(""String_Node_Str"");
  cs.setVersion(title.getAttribute(""String_Node_Str""));
  cs.setName(title.getAttribute(""String_Node_Str""));
  identifier=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  cs.setPublisher(identifier.getAttribute(""String_Node_Str""));
  cs.setIdentifier(new Identifier().setValue(identifier.getAttribute(""String_Node_Str"")));
  authors=new ArrayList<Element>();
  XMLUtil.getNamedChildren(XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str""),""String_Node_Str"",authors);
  for (  Element a : authors)   if (!a.getAttribute(""String_Node_Str"").contains(""String_Node_Str""))   cs.addContact().setName(a.getTextContent());
  cs.setCopyright(""String_Node_Str"");
  cs.setStatus(ConformanceResourceStatus.ACTIVE);
  cs.setDateElement(new DateTimeType(title.getAttribute(""String_Node_Str"")));
  cs.setValueSet(vs.getUrl());
  Map<String,ConceptDefinitionComponent> concepts=new HashMap<String,ConceptDefinitionComponent>();
  List<Element> classes=new ArrayList<Element>();
  XMLUtil.getNamedChildren(doc.getDocumentElement(),""String_Node_Str"",classes);
  for (  Element cls : classes) {
    processClass(cls,concepts,cs);
  }
  XmlParser xml=new XmlParser();
  xml.setOutputStyle(OutputStyle.PRETTY);
  xml.compose(new FileOutputStream(targetFileNameVS),vs);
  xml.compose(new FileOutputStream(targetFileNameCS),cs);
}","public void go() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(false);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc=builder.parse(new FileInputStream(sourceFileName));
  ValueSet vs=new ValueSet();
  vs.setUrl(""String_Node_Str"");
  Element title=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  vs.setVersion(title.getAttribute(""String_Node_Str""));
  vs.setName(title.getAttribute(""String_Node_Str""));
  vs.setImmutable(true);
  Element identifier=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  vs.setPublisher(identifier.getAttribute(""String_Node_Str""));
  vs.addIdentifier(new Identifier().setValue(identifier.getAttribute(""String_Node_Str"")));
  List<Element> authors=new ArrayList<Element>();
  XMLUtil.getNamedChildren(XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str""),""String_Node_Str"",authors);
  for (  Element a : authors)   if (!a.getAttribute(""String_Node_Str"").contains(""String_Node_Str""))   vs.addContact().setName(a.getTextContent());
  vs.setCopyright(""String_Node_Str"");
  vs.setStatus(ConformanceResourceStatus.ACTIVE);
  vs.setDateElement(new DateTimeType(title.getAttribute(""String_Node_Str"")));
  vs.getCompose().addInclude().setSystem(""String_Node_Str"");
  CodeSystem cs=new CodeSystem();
  cs.setUrl(""String_Node_Str"");
  cs.setVersion(title.getAttribute(""String_Node_Str""));
  cs.setName(title.getAttribute(""String_Node_Str""));
  identifier=XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str"");
  cs.setPublisher(identifier.getAttribute(""String_Node_Str""));
  cs.setIdentifier(new Identifier().setValue(identifier.getAttribute(""String_Node_Str"")));
  cs.setHierarchyMeaning(CodeSystemHierarchyMeaning.CLASSIFIEDWITH);
  authors=new ArrayList<Element>();
  XMLUtil.getNamedChildren(XMLUtil.getNamedChild(doc.getDocumentElement(),""String_Node_Str""),""String_Node_Str"",authors);
  for (  Element a : authors)   if (!a.getAttribute(""String_Node_Str"").contains(""String_Node_Str""))   cs.addContact().setName(a.getTextContent());
  cs.setCopyright(""String_Node_Str"");
  cs.setStatus(ConformanceResourceStatus.ACTIVE);
  cs.setDateElement(new DateTimeType(title.getAttribute(""String_Node_Str"")));
  cs.setValueSet(vs.getUrl());
  Map<String,ConceptDefinitionComponent> concepts=new HashMap<String,ConceptDefinitionComponent>();
  List<Element> classes=new ArrayList<Element>();
  XMLUtil.getNamedChildren(doc.getDocumentElement(),""String_Node_Str"",classes);
  for (  Element cls : classes) {
    processClass(cls,concepts,cs);
  }
  XmlParser xml=new XmlParser();
  xml.setOutputStyle(OutputStyle.PRETTY);
  xml.compose(new FileOutputStream(targetFileNameVS),vs);
  xml.compose(new FileOutputStream(targetFileNameCS),cs);
}",0.9875518672199172
23949,"@SuppressWarnings(""String_Node_Str"") private void test(Resource resource,String expression,int count,String... types) throws FileNotFoundException, IOException, FHIRException {
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  FluentPathEngine fp=new FluentPathEngine(TestingUtilities.context);
  ExpressionNode node=fp.parse(expression);
  fp.check(null,resource.getResourceType().toString(),resource.getResourceType().toString(),node);
  List<Base> outcome=fp.evaluate(resource,node);
  if (fp.hasLog())   System.out.println(fp.takeLog());
  Assert.assertTrue(String.format(""String_Node_Str"",count,outcome.size()),outcome.size() == count);
  CommaSeparatedStringBuilder msg=new CommaSeparatedStringBuilder();
  for (  String t : types)   msg.append(t);
  for (  Base b : outcome) {
    boolean found=false;
    String type=b.fhirType();
    for (    String t : types)     if (type.equals(t))     found=true;
    Assert.assertTrue(String.format(""String_Node_Str"",type,msg),found);
  }
}","@SuppressWarnings(""String_Node_Str"") @Test public void test() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.dstu3.exceptions.FHIRException {
  if (TestingUtilities.context == null)   TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  if (fp == null)   fp=new FluentPathEngine(TestingUtilities.context);
  String input=test.getAttribute(""String_Node_Str"");
  String expression=XMLUtil.getNamedChild(test,""String_Node_Str"").getTextContent();
  boolean fail=""String_Node_Str"".equals(XMLUtil.getNamedChild(test,""String_Node_Str"").getAttribute(""String_Node_Str""));
  Resource res=null;
  List<Base> outcome=new ArrayList<Base>();
  ExpressionNode node=fp.parse(expression);
  try {
    if (Utilities.noString(input))     fp.check(null,null,null,node);
 else {
      res=new XmlParser().parse(new FileInputStream(Utilities.path(""String_Node_Str"",input)));
      fp.check(res,res.getResourceType().toString(),res.getResourceType().toString(),node);
    }
    outcome=fp.evaluate(res,node);
    Assert.assertTrue(String.format(""String_Node_Str"",expression),!fail);
  }
 catch (  Exception e) {
    Assert.assertTrue(String.format(""String_Node_Str"" + e.getMessage(),expression),fail);
  }
  if (""String_Node_Str"".equals(test.getAttribute(""String_Node_Str""))) {
    boolean ok=fp.convertToBoolean(outcome);
    outcome.clear();
    outcome.add(new BooleanType(ok));
  }
  if (fp.hasLog())   System.out.println(fp.takeLog());
  List<Element> expected=new ArrayList<Element>();
  XMLUtil.getNamedChildren(test,""String_Node_Str"",expected);
  Assert.assertTrue(String.format(""String_Node_Str"",expected.size(),outcome.size()),outcome.size() == expected.size());
  for (int i=0; i < Math.min(outcome.size(),expected.size()); i++) {
    String tn=expected.get(i).getAttribute(""String_Node_Str"");
    if (!Utilities.noString(tn)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,tn,outcome.get(i).fhirType()),tn.equals(outcome.get(i).fhirType()));
    }
    String v=expected.get(i).getTextContent();
    if (!Utilities.noString(v)) {
      Assert.assertTrue(String.format(""String_Node_Str"",i,outcome.get(i).fhirType()),outcome.get(i) instanceof PrimitiveType);
      Assert.assertTrue(String.format(""String_Node_Str"",i,v,outcome.get(i).toString()),v.equals(((PrimitiveType)outcome.get(i)).asStringValue()));
    }
  }
}",0.3019309537741369
23950,"private String cacheValue(CodeSystem cs) throws IOException {
  CodeSystem csid=new CodeSystem();
  csid.setId(cs.getId());
  csid.setVersion(cs.getVersion());
  csid.setContent(cs.getContent());
  for (  ConceptDefinitionComponent cc : cs.getConcept())   csid.getConcept().add(processCSConcept(cc));
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,csid);
  b.close();
  return new String(b.toByteArray());
}","private String cacheValue(CodeSystem cs) throws IOException {
  CodeSystem csid=new CodeSystem();
  csid.setId(cs.getId());
  csid.setVersion(cs.getVersion());
  csid.setContent(cs.getContent());
  csid.setHierarchyMeaning(CodeSystemHierarchyMeaning.GROUPEDBY);
  for (  ConceptDefinitionComponent cc : cs.getConcept())   csid.getConcept().add(processCSConcept(cc));
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,csid);
  b.close();
  return new String(b.toByteArray());
}",0.94
23951,"private List<PropertyWrapper> splitExtensions(StructureDefinition profile,List<PropertyWrapper> children) throws UnsupportedEncodingException, IOException, FHIRException {
  List<PropertyWrapper> results=new ArrayList<PropertyWrapper>();
  Map<String,PropertyWrapper> map=new HashMap<String,PropertyWrapper>();
  for (  PropertyWrapper p : children)   if (p.getName().equals(""String_Node_Str"") || p.getName().equals(""String_Node_Str"")) {
    if (p.hasValues()) {
      for (      BaseWrapper v : p.getValues()) {
        Extension ex=(Extension)v.getBase();
        String url=ex.getUrl();
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        if (p.getName().equals(""String_Node_Str"") && ed == null)         throw new DefinitionException(""String_Node_Str"" + url);
        PropertyWrapper pe=map.get(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"");
        if (pe == null) {
          if (ed == null) {
            if (url.startsWith(""String_Node_Str""))             throw new DefinitionException(""String_Node_Str"" + url);
            System.out.println(""String_Node_Str"" + url);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",p.getTypeCode(),p.getDefinition(),p.getMinCardinality(),p.getMaxCardinality(),ex));
          }
 else {
            ElementDefinition def=ed.getSnapshot().getElement().get(0);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",""String_Node_Str"",def.getDefinition(),def.getMin(),def.getMax().equals(""String_Node_Str"") ? Integer.MAX_VALUE : Integer.parseInt(def.getMax()),ex));
            ((PropertyWrapperDirect)pe).wrapped.setStructure(ed);
          }
          results.add(pe);
        }
 else         pe.getValues().add(v);
      }
    }
  }
 else   results.add(p);
  return results;
}","private List<PropertyWrapper> splitExtensions(StructureDefinition profile,List<PropertyWrapper> children) throws UnsupportedEncodingException, IOException, FHIRException {
  List<PropertyWrapper> results=new ArrayList<PropertyWrapper>();
  Map<String,PropertyWrapper> map=new HashMap<String,PropertyWrapper>();
  for (  PropertyWrapper p : children)   if (p.getName().equals(""String_Node_Str"") || p.getName().equals(""String_Node_Str"")) {
    if (p.hasValues()) {
      for (      BaseWrapper v : p.getValues()) {
        Extension ex=(Extension)v.getBase();
        String url=ex.getUrl();
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        if (p.getName().equals(""String_Node_Str"") && ed == null)         throw new DefinitionException(""String_Node_Str"" + url);
        PropertyWrapper pe=map.get(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"");
        if (pe == null) {
          if (ed == null) {
            if (url.startsWith(""String_Node_Str""))             throw new DefinitionException(""String_Node_Str"" + url);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",p.getTypeCode(),p.getDefinition(),p.getMinCardinality(),p.getMaxCardinality(),ex));
          }
 else {
            ElementDefinition def=ed.getSnapshot().getElement().get(0);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",""String_Node_Str"",def.getDefinition(),def.getMin(),def.getMax().equals(""String_Node_Str"") ? Integer.MAX_VALUE : Integer.parseInt(def.getMax()),ex));
            ((PropertyWrapperDirect)pe).wrapped.setStructure(ed);
          }
          results.add(pe);
        }
 else         pe.getValues().add(v);
      }
    }
  }
 else   results.add(p);
  return results;
}",0.9846732992739984
23952,"private String checkPrepend(String corePath,String path){
  if (pkp.prependLinks())   return corePath + path;
 else   return path;
}","private String checkPrepend(String corePath,String path){
  if (pkp.prependLinks() && !(path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")))   return corePath + path;
 else   return path;
}",0.7696793002915452
23953,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
              if (outcome.getType().size() > 1)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              int start=diffCursor;
              while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))               diffCursor++;
              processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
          diffpos++;
        }
      }
    }
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName,url);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (slicingDone || (!diffMatches.get(0).hasSlicing() && !(isExtension(diffMatches.get(0)) && !diffMatches.get(0).hasName())))) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBaseDefinition());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBaseDefinition());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            template.setName(null);
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ outcome.getPath()+ ""String_Node_Str""+ resultPathBase);
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffCursor=differential.getElement().indexOf(diffItem) + 1;
          if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
            if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"") && !baseWalksInto(base.getElement(),baseCursor,diffMatches.get(0).getPath() + ""String_Node_Str"")) {
              if (outcome.getType().size() > 1)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
              StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
              if (dt == null)               throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
              contextName=dt.getUrl();
              int start=diffCursor;
              while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))               diffCursor++;
              processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
            }
          }
          diffpos++;
        }
      }
    }
  }
}",0.9987350667603654
23954,"private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode().equals(""String_Node_Str"") || (t.getCode().equals(""String_Node_Str"") && t.hasProfile())) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasProfile() && t.getProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
        if (sd != null) {
          String disp=sd.hasDisplay() ? sd.getDisplay() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasProfile() && Utilities.isAbsoluteUrl(t.getProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
        if (sd != null) {
          String disp=sd.hasDisplay() ? sd.getDisplay() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getProfile(),null)));
      }
 else       if (t.hasProfile() && t.getProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getProfile(),null)));
 else       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getProfile(),t.getProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        c.addPiece(checkForNoChange(t,gen.new Piece(corePath + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}","private Cell genTypes(HierarchicalTableGenerator gen,Row r,ElementDefinition e,String profileBaseFileName,StructureDefinition profile,String corePath,String imagePath){
  Cell c=gen.new Cell();
  r.getCells().add(c);
  List<TypeRefComponent> types=e.getType();
  if (!e.hasType()) {
    if (e.hasContentReference()) {
      return c;
    }
 else {
      ElementDefinition d=(ElementDefinition)e.getUserData(DERIVATION_POINTER);
      if (d != null && d.hasType()) {
        types=new ArrayList<ElementDefinition.TypeRefComponent>();
        for (        TypeRefComponent tr : d.getType()) {
          TypeRefComponent tt=tr.copy();
          tt.setUserData(DERIVATION_EQUALS,true);
          types.add(tt);
        }
      }
 else       return c;
    }
  }
  boolean first=true;
  Element source=types.get(0);
  int aggMode=AGG_NONE;
  boolean allReference=!types.isEmpty();
  Set<AggregationMode> aggs=new HashSet<ElementDefinition.AggregationMode>();
  for (  TypeRefComponent t : types) {
    if (t.getCode().equals(""String_Node_Str"") && t.hasProfile()) {
      for (      Enumeration<AggregationMode> en : t.getAggregation())       aggs.add(en.getValue());
    }
 else     allReference=false;
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      boolean allSame=true;
      for (      TypeRefComponent t : types) {
        for (        AggregationMode agg : aggs) {
          boolean found=false;
          for (          Enumeration<AggregationMode> en : t.getAggregation())           if (en.getValue() == agg)           found=true;
          if (!found)           allSame=false;
        }
      }
      aggMode=allSame ? AGG_GR : AGG_IND;
      if (aggMode != AGG_GR)       allReference=false;
    }
  }
 else   aggMode=aggs.size() == 0 ? AGG_NONE : AGG_IND;
  if (allReference) {
    c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
  }
  TypeRefComponent tl=null;
  for (  TypeRefComponent t : types) {
    if (first)     first=false;
 else     if (allReference)     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
 else     c.addPiece(checkForNoChange(tl,gen.new Piece(null,""String_Node_Str"",null)));
    tl=t;
    if (t.getCode().equals(""String_Node_Str"") || (t.getCode().equals(""String_Node_Str"") && t.hasProfile())) {
      if (!allReference) {
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
      }
      if (t.hasProfile() && t.getProfile().startsWith(""String_Node_Str"")) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
        if (sd != null) {
          String disp=sd.hasDisplay() ? sd.getDisplay() : sd.getName();
          c.addPiece(checkForNoChange(t,gen.new Piece(checkPrepend(corePath,sd.getUserString(""String_Node_Str"")),disp,null)));
        }
 else {
          String rn=t.getProfile().substring(40);
          c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,rn),rn,null)));
        }
      }
 else       if (t.hasProfile() && Utilities.isAbsoluteUrl(t.getProfile())) {
        StructureDefinition sd=context.fetchResource(StructureDefinition.class,t.getProfile());
        if (sd != null) {
          String disp=sd.hasDisplay() ? sd.getDisplay() : sd.getName();
          String ref=pkp.getLinkForProfile(null,sd.getUrl());
          if (ref.contains(""String_Node_Str""))           ref=ref.substring(0,ref.indexOf(""String_Node_Str""));
          c.addPiece(checkForNoChange(t,gen.new Piece(ref,disp,null)));
        }
 else         c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getProfile(),null)));
      }
 else       if (t.hasProfile() && t.getProfile().startsWith(""String_Node_Str""))       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + profileBaseFileName + ""String_Node_Str""+ t.getProfile().substring(1).toLowerCase()+ ""String_Node_Str"",t.getProfile(),null)));
 else       if (t.hasProfile())       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + t.getProfile(),t.getProfile(),null)));
      if (!allReference) {
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        if (t.getAggregation().size() > 0) {
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
          boolean firstA=true;
          for (          Enumeration<AggregationMode> a : t.getAggregation()) {
            if (firstA=true)             firstA=false;
 else             c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
            c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a.getValue()),null));
          }
          c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        }
      }
    }
 else     if (t.hasProfile()) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfile());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        if (parts[0].startsWith(""String_Node_Str"") || parts[0].startsWith(""String_Node_Str""))         c.addPiece(checkForNoChange(t,gen.new Piece(parts[0],parts[1],t.getCode())));
 else         c.addPiece(checkForNoChange(t,gen.new Piece(corePath + parts[0],parts[1],t.getCode())));
      }
 else       c.addPiece(checkForNoChange(t,gen.new Piece(corePath + ref,t.getCode(),null)));
    }
 else     if (pkp.hasLinkFor(t.getCode())) {
      c.addPiece(checkForNoChange(t,gen.new Piece(pkp.getLinkFor(corePath,t.getCode()),t.getCode(),null)));
    }
 else     c.addPiece(checkForNoChange(t,gen.new Piece(null,t.getCode(),null)));
  }
  if (allReference) {
    c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
    if (aggs.size() > 0) {
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
      boolean firstA=true;
      for (      AggregationMode a : aggs) {
        if (firstA=true)         firstA=false;
 else         c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
        c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",codeForAggregation(a),null));
      }
      c.getPieces().add(gen.new Piece(corePath + ""String_Node_Str"",""String_Node_Str"",null));
    }
  }
  return c;
}",0.9750232702451131
23955,"public String makelink(){
  if (link == null)   return predicate;
 else   return ""String_Node_Str"" + link + ""String_Node_Str""+ predicate+ ""String_Node_Str"";
}","public String makelink(){
  if (link == null)   return predicate;
 else   return ""String_Node_Str"" + link + ""String_Node_Str""+ Utilities.escapeXml(predicate)+ ""String_Node_Str"";
}",0.9376854599406528
23956,"private void commitSection(StringBuilder b,Section section) throws Exception {
  b.append(""String_Node_Str"" + section.name + ""String_Node_Str""+ Utilities.padLeft(""String_Node_Str"",'-',75 - section.name.length())+ ""String_Node_Str"");
  b.append(""String_Node_Str"");
  for (  Subject sbj : section.subjects) {
    b.append(sbj.id);
    b.append(""String_Node_Str"");
    int i=0;
    for (    Predicate p : sbj.predicates) {
      b.append(p.makelink());
      b.append(""String_Node_Str"");
      boolean first=true;
      for (      Triple o : p.getObjects()) {
        if (first)         first=false;
 else         b.append(""String_Node_Str"");
        if (o instanceof StringType)         b.append(Utilities.escapeXml(((StringType)o).value));
 else {
          b.append(""String_Node_Str"");
          if (write((Complex)o,b,4))           b.append(""String_Node_Str"");
 else           b.append(""String_Node_Str"");
        }
      }
      String comment=p.comment == null ? ""String_Node_Str"" : ""String_Node_Str"" + p.comment;
      i++;
      if (i < sbj.predicates.size())       b.append(""String_Node_Str"" + Utilities.escapeXml(comment) + ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + Utilities.escapeXml(comment) + ""String_Node_Str"");
    }
  }
}","private void commitSection(StringBuilder b,Section section) throws Exception {
  b.append(""String_Node_Str"" + section.name + ""String_Node_Str""+ Utilities.padLeft(""String_Node_Str"",'-',75 - section.name.length())+ ""String_Node_Str"");
  b.append(""String_Node_Str"");
  for (  Subject sbj : section.subjects) {
    b.append(Utilities.escapeXml(sbj.id));
    b.append(""String_Node_Str"");
    int i=0;
    for (    Predicate p : sbj.predicates) {
      b.append(p.makelink());
      b.append(""String_Node_Str"");
      boolean first=true;
      for (      Triple o : p.getObjects()) {
        if (first)         first=false;
 else         b.append(""String_Node_Str"");
        if (o instanceof StringType)         b.append(Utilities.escapeXml(((StringType)o).value));
 else {
          b.append(""String_Node_Str"");
          if (write((Complex)o,b,4))           b.append(""String_Node_Str"");
 else           b.append(""String_Node_Str"");
        }
      }
      String comment=p.comment == null ? ""String_Node_Str"" : ""String_Node_Str"" + p.comment;
      i++;
      if (i < sbj.predicates.size())       b.append(""String_Node_Str"" + Utilities.escapeXml(comment) + ""String_Node_Str"");
 else       b.append(""String_Node_Str"" + Utilities.escapeXml(comment) + ""String_Node_Str"");
    }
  }
}",0.9916963226571768
23957,"private void cleanOutput(String folder) throws IOException {
  for (  File f : new File(folder).listFiles()) {
    if (!isValidFile(f.getAbsolutePath())) {
      if (f.isDirectory())       Utilities.clearDirectory(f.getAbsolutePath());
      f.delete();
    }
  }
}","private void cleanOutput(String folder) throws IOException {
  for (  File f : new File(folder).listFiles()) {
    if (!isValidFile(f.getAbsolutePath())) {
      if (!f.isDirectory()) {
        f.delete();
      }
    }
  }
}",0.7836734693877551
23958,"private List<PropertyWrapper> splitExtensions(StructureDefinition profile,List<PropertyWrapper> children) throws UnsupportedEncodingException, IOException, FHIRException {
  List<PropertyWrapper> results=new ArrayList<PropertyWrapper>();
  Map<String,PropertyWrapper> map=new HashMap<String,PropertyWrapper>();
  for (  PropertyWrapper p : children)   if (p.getName().equals(""String_Node_Str"") || p.getName().equals(""String_Node_Str"")) {
    if (p.hasValues()) {
      for (      BaseWrapper v : p.getValues()) {
        Extension ex=(Extension)v.getBase();
        String url=ex.getUrl();
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        if (p.getName().equals(""String_Node_Str"") && ed == null)         throw new DefinitionException(""String_Node_Str"" + url);
        PropertyWrapper pe=map.get(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"");
        if (pe == null) {
          if (ed == null) {
            if (url.startsWith(""String_Node_Str""))             throw new DefinitionException(""String_Node_Str"" + url);
            System.out.println(""String_Node_Str"" + url);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",p.getTypeCode(),p.getDefinition(),p.getMinCardinality(),p.getMaxCardinality(),ex));
          }
 else {
            ElementDefinition def=ed.getSnapshot().getElement().get(0);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",""String_Node_Str"",def.getDefinition(),def.getMin(),def.getMax().equals(""String_Node_Str"") ? Integer.MAX_VALUE : Integer.parseInt(def.getMax()),ex));
            ((PropertyWrapperDirect)pe).wrapped.setStructure(ed);
          }
          results.add(pe);
        }
 else         pe.getValues().add(v);
      }
    }
  }
 else   results.add(p);
  return results;
}","private List<PropertyWrapper> splitExtensions(StructureDefinition profile,List<PropertyWrapper> children) throws UnsupportedEncodingException, IOException, FHIRException {
  List<PropertyWrapper> results=new ArrayList<PropertyWrapper>();
  Map<String,PropertyWrapper> map=new HashMap<String,PropertyWrapper>();
  for (  PropertyWrapper p : children)   if (p.getName().equals(""String_Node_Str"") || p.getName().equals(""String_Node_Str"")) {
    if (p.hasValues()) {
      for (      BaseWrapper v : p.getValues()) {
        Extension ex=(Extension)v.getBase();
        String url=ex.getUrl();
        StructureDefinition ed=context.fetchResource(StructureDefinition.class,url);
        if (p.getName().equals(""String_Node_Str"") && ed == null)         throw new DefinitionException(""String_Node_Str"" + url);
        PropertyWrapper pe=map.get(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"");
        if (pe == null) {
          if (ed == null) {
            if (url.startsWith(""String_Node_Str""))             throw new DefinitionException(""String_Node_Str"" + url);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",p.getTypeCode(),p.getDefinition(),p.getMinCardinality(),p.getMaxCardinality(),ex));
          }
 else {
            ElementDefinition def=ed.getSnapshot().getElement().get(0);
            pe=new PropertyWrapperDirect(new Property(p.getName() + ""String_Node_Str"" + url+ ""String_Node_Str"",""String_Node_Str"",def.getDefinition(),def.getMin(),def.getMax().equals(""String_Node_Str"") ? Integer.MAX_VALUE : Integer.parseInt(def.getMax()),ex));
            ((PropertyWrapperDirect)pe).wrapped.setStructure(ed);
          }
          results.add(pe);
        }
 else         pe.getValues().add(v);
      }
    }
  }
 else   results.add(p);
  return results;
}",0.9846732992739984
23959,"private void genWrapperBase(FetchedResource r,String template,Set<String> outputTracker,Map<String,String> vars) throws FileNotFoundException, IOException {
  if (template != null) {
    template=TextFile.fileToString(Utilities.path(Utilities.getDirectoryForFile(configFile),template));
    template=template.replace(""String_Node_Str"",r.getTitle());
    template=template.replace(""String_Node_Str"",r.getElement().fhirType());
    template=template.replace(""String_Node_Str"",r.getId());
    template=template.replace(""String_Node_Str"",r.getId() + ""String_Node_Str"");
    String path=Utilities.path(tempDir,r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str"");
    TextFile.stringToFile(template,path,false);
    outputTracker.add(path);
  }
}","private void genWrapperBase(FetchedResource r,String template,Set<String> outputTracker,Map<String,String> vars) throws FileNotFoundException, IOException {
  if (template != null) {
    template=TextFile.fileToString(Utilities.path(Utilities.getDirectoryForFile(configFile),template));
    template=template.replace(""String_Node_Str"",r.getTitle());
    template=template.replace(""String_Node_Str"",r.getElement().fhirType());
    template=template.replace(""String_Node_Str"",r.getId());
    template=template.replace(""String_Node_Str"",r.getId() + ""String_Node_Str"");
    template=template.replace(""String_Node_Str"",r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    String path=Utilities.path(tempDir,r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str"");
    TextFile.stringToFile(template,path,false);
    outputTracker.add(path);
  }
}",0.9341463414634148
23960,"private void genWrapperFmt(FetchedResource r,String template,String format,Set<String> outputTracker,Map<String,String> vars) throws FileNotFoundException, IOException {
  if (template != null) {
    template=TextFile.fileToString(Utilities.path(Utilities.getDirectoryForFile(configFile),template));
    template=template.replace(""String_Node_Str"",r.getTitle() == null ? ""String_Node_Str"" : r.getTitle());
    template=template.replace(""String_Node_Str"",r.getId() + ""String_Node_Str"" + format+ ""String_Node_Str"");
    template=template.replace(""String_Node_Str"",r.getId());
    template=template.replace(""String_Node_Str"",r.getElement().fhirType());
    if (vars != null) {
      for (      String n : vars.keySet())       template=template.replace(""String_Node_Str"" + n + ""String_Node_Str"",vars.get(n));
    }
    String path=Utilities.path(tempDir,r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ format+ ""String_Node_Str"");
    TextFile.stringToFile(template,path,false);
    outputTracker.add(path);
  }
}","private void genWrapperFmt(FetchedResource r,String template,String format,Set<String> outputTracker,Map<String,String> vars) throws FileNotFoundException, IOException {
  if (template != null) {
    template=TextFile.fileToString(Utilities.path(Utilities.getDirectoryForFile(configFile),template));
    template=template.replace(""String_Node_Str"",r.getTitle() == null ? ""String_Node_Str"" : r.getTitle());
    template=template.replace(""String_Node_Str"",r.getId() + ""String_Node_Str"" + format+ ""String_Node_Str"");
    template=template.replace(""String_Node_Str"",r.getId());
    template=template.replace(""String_Node_Str"",r.getElement().fhirType());
    template=template.replace(""String_Node_Str"",r.getElement().fhirType() + ""String_Node_Str"" + r.getId());
    if (vars != null) {
      for (      String n : vars.keySet())       template=template.replace(""String_Node_Str"" + n + ""String_Node_Str"",vars.get(n));
    }
    String path=Utilities.path(tempDir,r.getElement().fhirType() + ""String_Node_Str"" + r.getId()+ ""String_Node_Str""+ format+ ""String_Node_Str"");
    TextFile.stringToFile(template,path,false);
    outputTracker.add(path);
  }
}",0.9505494505494504
23961,"private boolean loadPage(FetchedFile file){
  FetchedFile existing=altMap.get(""String_Node_Str"" + file.getPath());
  if (existing == null || existing.getTime() != file.getTime() || existing.getHash() != file.getHash()) {
    file.setNoProcess(true);
    changeList.add(file);
    altMap.put(""String_Node_Str"" + file.getPath(),file);
    return true;
  }
 else {
    return false;
  }
}","private boolean loadPage(FetchedFile file){
  FetchedFile existing=altMap.get(""String_Node_Str"" + file.getPath());
  if (existing == null || existing.getTime() != file.getTime() || existing.getHash() != file.getHash()) {
    file.setProcessMode(FetchedFile.PROCESS_NONE);
    changeList.add(file);
    altMap.put(""String_Node_Str"" + file.getPath(),file);
    return true;
  }
 else {
    return false;
  }
}",0.9393939393939394
23962,"private void initialize(boolean clearCache) throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  String vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir);
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(""String_Node_Str"" + pagesDir);
  checkDir(pagesDir);
  dlog(""String_Node_Str"" + tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  dlog(""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","private void initialize(boolean clearCache) throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  log(""String_Node_Str"" + root);
  if (paths.get(""String_Node_Str"") instanceof JsonArray) {
    for (    JsonElement e : (JsonArray)paths.get(""String_Node_Str""))     resourceDirs.add(Utilities.path(root,((JsonPrimitive)e).getAsString()));
  }
 else   resourceDirs.add(Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str"")));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  String vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  if (configuration.has(""String_Node_Str"")) {
    JsonObject pp=configuration.getAsJsonObject(""String_Node_Str"");
    prePagesDir=Utilities.path(root,str(pp,""String_Node_Str""));
    prePagesXslt=Utilities.path(root,str(pp,""String_Node_Str""));
    checkDir(prePagesDir);
    checkFile(prePagesXslt);
    xslt=TextFile.fileToBytes(prePagesXslt);
  }
  igName=Utilities.path(resourceDirs.get(0),configuration.get(""String_Node_Str"").getAsString());
  inspector=new HTLMLInspector(outputDir);
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  for (  String s : resourceDirs) {
    dlog(""String_Node_Str"" + s);
    checkDir(s);
  }
  dlog(""String_Node_Str"" + pagesDir);
  checkDir(pagesDir);
  dlog(""String_Node_Str"" + tempDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  dlog(""String_Node_Str"" + outputDir);
  forceDir(outputDir);
  dlog(""String_Node_Str"" + qaDir);
  forceDir(qaDir);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specMaps.get(0));
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9598059598059598
23963,"private boolean loadPages(FetchedFile dir) throws Exception {
  boolean changed=false;
  if (!altMap.containsKey(""String_Node_Str"" + dir.getPath())) {
    changed=true;
    altMap.put(""String_Node_Str"" + dir.getPath(),dir);
    dir.setNoProcess(true);
    changeList.add(dir);
  }
  for (  String link : dir.getFiles()) {
    FetchedFile f=fetcher.fetch(link);
    if (f.isFolder())     changed=loadPages(f) || changed;
 else     changed=loadPage(f) || changed;
  }
  return changed;
}","private boolean loadPages(FetchedFile dir) throws Exception {
  boolean changed=false;
  if (!altMap.containsKey(""String_Node_Str"" + dir.getPath())) {
    changed=true;
    altMap.put(""String_Node_Str"" + dir.getPath(),dir);
    dir.setProcessMode(FetchedFile.PROCESS_NONE);
    changeList.add(dir);
  }
  for (  String link : dir.getFiles()) {
    FetchedFile f=fetcher.fetch(link);
    if (f.isFolder())     changed=loadPages(f) || changed;
 else     changed=loadPage(f) || changed;
  }
  return changed;
}",0.9516129032258064
23964,"private void generateOutputs(FetchedFile f){
  if (f.isNoProcess()) {
    String dst=tempDir + f.getPath().substring(pagesDir.length());
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(f.getSource(),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    for (    FetchedResource r : f.getResources()) {
      try {
        saveDirectResourceOutputs(f,r,makeVars(r));
        if (r.getResource() != null) {
switch (r.getResource().getResourceType()) {
case CodeSystem:
            generateOutputsCodeSystem(f,r,(CodeSystem)r.getResource());
          break;
case ValueSet:
        generateOutputsValueSet(f,r,(ValueSet)r.getResource());
      break;
case ConceptMap:
    generateOutputsConceptMap(f,r,(ConceptMap)r.getResource());
  break;
case DataElement:
break;
case StructureDefinition:
generateOutputsStructureDefinition(f,r,(StructureDefinition)r.getResource());
break;
case StructureMap:
generateOutputsStructureMap(f,r,(StructureMap)r.getResource());
break;
default :
}
}
}
 catch (Exception e) {
log(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ r.getElement().fhirType()+ ""String_Node_Str""+ r.getId()+ ""String_Node_Str""+ e.getMessage());
e.printStackTrace();
}
}
}
}","private void generateOutputs(FetchedFile f) throws TransformerException {
  if (f.getProcessMode() == FetchedFile.PROCESS_NONE) {
    String dst=tempDir + f.getPath().substring(pagesDir.length());
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(f.getSource(),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else   if (f.getProcessMode() == FetchedFile.PROCESS_XSLT) {
    String dst=tempDir + f.getPath().substring(pagesDir.length());
    try {
      if (f.isFolder()) {
        f.getOutputNames().add(dst);
        Utilities.createDirectory(dst);
      }
 else       checkMakeFile(transform(f.getSource()),dst,f.getOutputNames());
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + dst + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    for (    FetchedResource r : f.getResources()) {
      try {
        saveDirectResourceOutputs(f,r,makeVars(r));
        if (r.getResource() != null) {
switch (r.getResource().getResourceType()) {
case CodeSystem:
            generateOutputsCodeSystem(f,r,(CodeSystem)r.getResource());
          break;
case ValueSet:
        generateOutputsValueSet(f,r,(ValueSet)r.getResource());
      break;
case ConceptMap:
    generateOutputsConceptMap(f,r,(ConceptMap)r.getResource());
  break;
case DataElement:
break;
case StructureDefinition:
generateOutputsStructureDefinition(f,r,(StructureDefinition)r.getResource());
break;
case StructureMap:
generateOutputsStructureMap(f,r,(StructureMap)r.getResource());
break;
default :
}
}
}
 catch (Exception e) {
log(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ r.getElement().fhirType()+ ""String_Node_Str""+ r.getId()+ ""String_Node_Str""+ e.getMessage());
e.printStackTrace();
}
}
}
}",0.8384921851057309
23965,"@Override protected void listChildren(List<org.hl7.fhir.dstu3.model.Property> result){
}","@Override protected void listChildren(List<org.hl7.fhir.dstu3.model.Property> childProps){
  for (  Element c : children) {
    childProps.add(new org.hl7.fhir.dstu3.model.Property(c.getName(),c.fhirType(),c.getProperty().getDefinition().getDefinition(),c.getProperty().getDefinition().getMin(),maxToInt(c.getProperty().getDefinition().getMax()),c));
  }
}",0.3693693693693693
23966,"@Override protected void listChildren(List<org.hl7.fhir.dstu3.model.Property> result){
}","@Override protected void listChildren(List<org.hl7.fhir.dstu3.model.Property> childProps){
  for (  Element c : children) {
    childProps.add(new org.hl7.fhir.dstu3.model.Property(c.getName(),c.fhirType(),c.getProperty().getDefinition().getDefinition(),c.getProperty().getDefinition().getMin(),maxToInt(c.getProperty().getDefinition().getMax()),c));
  }
}",0.3693693693693693
23967,"private void genElement(String defPath,HierarchicalTableGenerator gen,List<Row> rows,ElementDefinition element,List<ElementDefinition> all,List<StructureDefinition> profiles,boolean showMissing,String profileBaseFileName,Boolean extensions,boolean snapshot,String corePath) throws IOException {
  StructureDefinition profile=profiles == null ? null : profiles.get(profiles.size() - 1);
  String s=tail(element.getPath());
  List<ElementDefinition> children=getChildren(all,element);
  boolean isExtension=(s.equals(""String_Node_Str"") || s.equals(""String_Node_Str""));
  if (!snapshot && extensions != null && extensions != isExtension)   return;
  if (!onlyInformationIsMapping(all,element)) {
    Row row=gen.new Row();
    row.setAnchor(element.getPath());
    row.setColor(getRowColor(element));
    boolean hasDef=element != null;
    boolean ext=false;
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")) {
      if (element.hasType() && element.getType().get(0).hasProfile() && extensionIsComplex(element.getType().get(0).getProfile().get(0).getValue()))       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_EXTENSION_COMPLEX);
 else       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_EXTENSION_SIMPLE);
      ext=true;
    }
 else     if (!hasDef || element.getType().size() == 0)     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_ELEMENT);
 else     if (hasDef && element.getType().size() > 1) {
      if (allTypesAre(element.getType(),""String_Node_Str""))       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REFERENCE);
 else       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_CHOICE);
    }
 else     if (hasDef && element.getType().get(0).getCode() != null && element.getType().get(0).getCode().startsWith(""String_Node_Str""))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REUSE);
 else     if (hasDef && isPrimitive(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_PRIMITIVE);
 else     if (hasDef && isReference(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REFERENCE);
 else     if (hasDef && isDataType(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_DATATYPE);
 else     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_RESOURCE);
    String ref=defPath == null ? null : defPath + makePathLink(element);
    UnusedTracker used=new UnusedTracker();
    used.used=true;
    Cell left=gen.new Cell(null,ref,s,!hasDef ? null : element.getDefinition(),null);
    row.getCells().add(left);
    Cell gc=gen.new Cell();
    row.getCells().add(gc);
    if (element != null && element.getIsModifier())     checkForNoChange(element.getIsModifierElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    if (element != null && element.getMustSupport())     checkForNoChange(element.getMustSupportElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    if (element != null && element.getIsSummary())     checkForNoChange(element.getIsSummaryElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    if (element != null && (!element.getConstraint().isEmpty() || !element.getCondition().isEmpty()))     gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ExtensionContext extDefn=null;
    if (ext) {
      if (element != null && element.getType().size() == 1 && element.getType().get(0).hasProfile()) {
        extDefn=locateExtension(StructureDefinition.class,element.getType().get(0).getProfile().get(0).getValue());
        if (extDefn == null) {
          genCardinality(gen,element,row,hasDef,used,null);
          row.getCells().add(gen.new Cell(null,null,""String_Node_Str"" + element.getType().get(0).getProfile(),null,null));
          generateDescription(gen,row,element,null,used.used,profile.getUrl(),element.getType().get(0).getProfile().get(0).getValue(),profile,corePath);
        }
 else {
          String name=urltail(element.getType().get(0).getProfile().get(0).getValue());
          left.getPieces().get(0).setText(name);
          left.getPieces().get(0).setHint(""String_Node_Str"" + extDefn.getUrl());
          genCardinality(gen,element,row,hasDef,used,extDefn.getElement());
          ElementDefinition valueDefn=extDefn.getExtensionValueDefinition();
          if (valueDefn != null && !""String_Node_Str"".equals(valueDefn.getMax()))           genTypes(gen,row,valueDefn,profileBaseFileName,profile,corePath);
 else           row.getCells().add(gen.new Cell(null,null,""String_Node_Str"",null,null));
          generateDescription(gen,row,element,extDefn.getElement(),used.used,null,extDefn.getUrl(),profile,corePath);
        }
      }
 else {
        genCardinality(gen,element,row,hasDef,used,null);
        if (""String_Node_Str"".equals(element.getMax()))         row.getCells().add(gen.new Cell());
 else         genTypes(gen,row,element,profileBaseFileName,profile,corePath);
        generateDescription(gen,row,element,null,used.used,null,null,profile,corePath);
      }
    }
 else {
      genCardinality(gen,element,row,hasDef,used,null);
      if (hasDef && !""String_Node_Str"".equals(element.getMax()))       genTypes(gen,row,element,profileBaseFileName,profile,corePath);
 else       row.getCells().add(gen.new Cell());
      generateDescription(gen,row,element,null,used.used,null,null,profile,corePath);
    }
    if (element.hasSlicing()) {
      if (standardExtensionSlicing(element)) {
        used.used=element.hasType() && element.getType().get(0).hasProfile();
        showMissing=false;
      }
 else {
        row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_SLICE);
        row.getCells().get(2).getPieces().clear();
        for (        Cell cell : row.getCells())         for (        Piece p : cell.getPieces()) {
          p.addStyle(""String_Node_Str"");
        }
      }
    }
    if (used.used || showMissing)     rows.add(row);
    if (!used.used && !element.hasSlicing()) {
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.setStyle(""String_Node_Str"");
        p.setReference(null);
      }
    }
 else {
      for (      ElementDefinition child : children)       if (!child.getPath().endsWith(""String_Node_Str""))       genElement(defPath,gen,row.getSubRows(),child,all,profiles,showMissing,profileBaseFileName,isExtension,snapshot,corePath);
      if (!snapshot && (extensions == null || !extensions))       for (      ElementDefinition child : children)       if (child.getPath().endsWith(""String_Node_Str""))       genElement(defPath,gen,row.getSubRows(),child,all,profiles,showMissing,profileBaseFileName,true,false,corePath);
    }
  }
}","private void genElement(String defPath,HierarchicalTableGenerator gen,List<Row> rows,ElementDefinition element,List<ElementDefinition> all,List<StructureDefinition> profiles,boolean showMissing,String profileBaseFileName,Boolean extensions,boolean snapshot,String corePath) throws IOException {
  StructureDefinition profile=profiles == null ? null : profiles.get(profiles.size() - 1);
  String s=tail(element.getPath());
  List<ElementDefinition> children=getChildren(all,element);
  boolean isExtension=(s.equals(""String_Node_Str"") || s.equals(""String_Node_Str""));
  if (!snapshot && extensions != null && extensions != isExtension)   return;
  if (!onlyInformationIsMapping(all,element)) {
    Row row=gen.new Row();
    row.setAnchor(element.getPath());
    row.setColor(getRowColor(element));
    boolean hasDef=element != null;
    boolean ext=false;
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")) {
      if (element.hasType() && element.getType().get(0).hasProfile() && extensionIsComplex(element.getType().get(0).getProfile().get(0).getValue()))       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_EXTENSION_COMPLEX);
 else       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_EXTENSION_SIMPLE);
      ext=true;
    }
 else     if (!hasDef || element.getType().size() == 0)     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_ELEMENT);
 else     if (hasDef && element.getType().size() > 1) {
      if (allTypesAre(element.getType(),""String_Node_Str""))       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REFERENCE);
 else       row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_CHOICE);
    }
 else     if (hasDef && element.getType().get(0).getCode() != null && element.getType().get(0).getCode().startsWith(""String_Node_Str""))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REUSE);
 else     if (hasDef && isPrimitive(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_PRIMITIVE);
 else     if (hasDef && isReference(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_REFERENCE);
 else     if (hasDef && isDataType(element.getType().get(0).getCode()))     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_DATATYPE);
 else     row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_RESOURCE);
    String ref=defPath == null ? null : defPath + makePathLink(element);
    UnusedTracker used=new UnusedTracker();
    used.used=true;
    Cell left=gen.new Cell(null,ref,s,!hasDef ? null : element.getDefinition(),null);
    row.getCells().add(left);
    Cell gc=gen.new Cell();
    row.getCells().add(gc);
    if (element != null && element.getIsModifier())     checkForNoChange(element.getIsModifierElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
    if (element != null && element.getMustSupport())     checkForNoChange(element.getMustSupportElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
    if (element != null && element.getIsSummary())     checkForNoChange(element.getIsSummaryElement(),gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
    if (element != null && (!element.getConstraint().isEmpty() || !element.getCondition().isEmpty()))     gc.addImage(corePath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
    ExtensionContext extDefn=null;
    if (ext) {
      if (element != null && element.getType().size() == 1 && element.getType().get(0).hasProfile()) {
        extDefn=locateExtension(StructureDefinition.class,element.getType().get(0).getProfile().get(0).getValue());
        if (extDefn == null) {
          genCardinality(gen,element,row,hasDef,used,null);
          row.getCells().add(gen.new Cell(null,null,""String_Node_Str"" + element.getType().get(0).getProfile(),null,null));
          generateDescription(gen,row,element,null,used.used,profile.getUrl(),element.getType().get(0).getProfile().get(0).getValue(),profile,corePath);
        }
 else {
          String name=urltail(element.getType().get(0).getProfile().get(0).getValue());
          left.getPieces().get(0).setText(name);
          left.getPieces().get(0).setHint(""String_Node_Str"" + extDefn.getUrl());
          genCardinality(gen,element,row,hasDef,used,extDefn.getElement());
          ElementDefinition valueDefn=extDefn.getExtensionValueDefinition();
          if (valueDefn != null && !""String_Node_Str"".equals(valueDefn.getMax()))           genTypes(gen,row,valueDefn,profileBaseFileName,profile,corePath);
 else           row.getCells().add(gen.new Cell(null,null,""String_Node_Str"",null,null));
          generateDescription(gen,row,element,extDefn.getElement(),used.used,null,extDefn.getUrl(),profile,corePath);
        }
      }
 else {
        genCardinality(gen,element,row,hasDef,used,null);
        if (""String_Node_Str"".equals(element.getMax()))         row.getCells().add(gen.new Cell());
 else         genTypes(gen,row,element,profileBaseFileName,profile,corePath);
        generateDescription(gen,row,element,null,used.used,null,null,profile,corePath);
      }
    }
 else {
      genCardinality(gen,element,row,hasDef,used,null);
      if (hasDef && !""String_Node_Str"".equals(element.getMax()))       genTypes(gen,row,element,profileBaseFileName,profile,corePath);
 else       row.getCells().add(gen.new Cell());
      generateDescription(gen,row,element,null,used.used,null,null,profile,corePath);
    }
    if (element.hasSlicing()) {
      if (standardExtensionSlicing(element)) {
        used.used=element.hasType() && element.getType().get(0).hasProfile();
        showMissing=false;
      }
 else {
        row.setIcon(""String_Node_Str"",HierarchicalTableGenerator.TEXT_ICON_SLICE);
        row.getCells().get(2).getPieces().clear();
        for (        Cell cell : row.getCells())         for (        Piece p : cell.getPieces()) {
          p.addStyle(""String_Node_Str"");
        }
      }
    }
    if (used.used || showMissing)     rows.add(row);
    if (!used.used && !element.hasSlicing()) {
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.setStyle(""String_Node_Str"");
        p.setReference(null);
      }
    }
 else {
      for (      ElementDefinition child : children)       if (!child.getPath().endsWith(""String_Node_Str""))       genElement(defPath,gen,row.getSubRows(),child,all,profiles,showMissing,profileBaseFileName,isExtension,snapshot,corePath);
      if (!snapshot && (extensions == null || !extensions))       for (      ElementDefinition child : children)       if (child.getPath().endsWith(""String_Node_Str""))       genElement(defPath,gen,row.getSubRows(),child,all,profiles,showMissing,profileBaseFileName,true,false,corePath);
    }
  }
}",0.9971293239557916
23968,"private void initialize(boolean clearCache) throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  resourcesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  String vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  igName=Utilities.path(resourcesDir,configuration.get(""String_Node_Str"").getAsString());
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  checkDir(resourcesDir);
  checkDir(pagesDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(outputDir);
  forceDir(qaDir);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specDetails.get(""String_Node_Str"").getAsJsonObject());
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}","private void initialize(boolean clearCache) throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  resourcesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  String vsCache=ostr(paths,""String_Node_Str"");
  if (vsCache == null)   vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
 else   vsCache=Utilities.path(root,vsCache);
  specPath=str(paths,""String_Node_Str"");
  igName=Utilities.path(resourcesDir,configuration.get(""String_Node_Str"").getAsString());
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  checkDir(resourcesDir);
  checkDir(pagesDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(outputDir);
  forceDir(qaDir);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setLogger(logger);
  log(""String_Node_Str"" + context.getVersionRevision());
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  if (clearCache) {
    log(""String_Node_Str"" + vsCache + ""String_Node_Str"");
    Utilities.clearDirectory(vsCache);
  }
 else   log(""String_Node_Str"" + vsCache);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specDetails.get(""String_Node_Str"").getAsJsonObject());
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s),otherFilesStartup);
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s),otherFilesStartup);
  }
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str"",""String_Node_Str""));
  otherFilesStartup.add(Utilities.path(tempDir,""String_Node_Str""));
  JsonArray deps=configuration.getAsJsonArray(""String_Node_Str"");
  if (deps != null) {
    for (    JsonElement dep : deps) {
      loadIg((JsonObject)dep);
    }
  }
  log(""String_Node_Str"");
  JsonArray regenlist=configuration.getAsJsonArray(""String_Node_Str"");
  if (regenlist != null)   for (  JsonElement regen : regenlist)   regenList.add(((JsonPrimitive)regen).getAsString());
}",0.9965049629526072
23969,"public void dump() throws IOException {
  ln(""String_Node_Str"");
  ln_i(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  addNote();
  for (  Section s : sections) {
    ln_i(""String_Node_Str"");
    ln(""String_Node_Str"" + s.title + ""String_Node_Str"");
    for (    Rule r : s.rules) {
      if (!r.asserts.isEmpty()) {
        ln_i(""String_Node_Str"" + r.name + ""String_Node_Str"");
        for (        Assert a : r.asserts)         ln(""String_Node_Str"" + Utilities.escapeXml(a.test) + ""String_Node_Str""+ Utilities.escapeXml(a.message)+ ""String_Node_Str"");
        ln_o(""String_Node_Str"");
      }
    }
    ln_o(""String_Node_Str"");
  }
  ln_o(""String_Node_Str"");
  flush();
  close();
}","public void dump() throws IOException {
  ln(""String_Node_Str"");
  ln_i(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  addNote();
  for (  Section s : sections) {
    ln_i(""String_Node_Str"");
    ln(""String_Node_Str"" + Utilities.escapeXml(s.title) + ""String_Node_Str"");
    for (    Rule r : s.rules) {
      if (!r.asserts.isEmpty()) {
        ln_i(""String_Node_Str"" + Utilities.escapeXml(r.name) + ""String_Node_Str"");
        for (        Assert a : r.asserts)         ln(""String_Node_Str"" + Utilities.escapeXml(a.test) + ""String_Node_Str""+ Utilities.escapeXml(a.message)+ ""String_Node_Str"");
        ln_o(""String_Node_Str"");
      }
    }
    ln_o(""String_Node_Str"");
  }
  ln_o(""String_Node_Str"");
  flush();
  close();
}",0.8120713305898491
23970,"private void validateCnt(String cnt,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  ByteArrayInputStream file=new ByteArrayInputStream(cnt.getBytes(Charsets.UTF_8));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
  System.out.println(val.reportTimes());
}","private void validateCnt(String cnt,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  ByteArrayInputStream file=new ByteArrayInputStream(cnt.getBytes(Charsets.UTF_8));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
}",0.9375
23971,"private void composeElement(Section section,Complex ctxt,Element element,Element parent){
  String en=getFormalName(element);
  Complex t;
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY && parent != null && parent.getNamedChildValue(""String_Node_Str"") != null) {
    String url=""String_Node_Str"" + parent.getNamedChildValue(""String_Node_Str"") + ""String_Node_Str"";
    ctxt.linkedPredicate(""String_Node_Str"" + en,url,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
    t=section.subject(url);
  }
 else {
    t=ctxt.linkedPredicate(""String_Node_Str"" + en,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
  }
  if (element.getSpecial() != null)   t.linkedPredicate(""String_Node_Str"",""String_Node_Str"" + element.fhirType(),linkResolver == null ? null : linkResolver.resolveType(element.fhirType()));
  if (element.hasValue())   t.linkedPredicate(""String_Node_Str"",ttlLiteral(element.getValue(),element.getType()),linkResolver == null ? null : linkResolver.resolveType(element.getType()));
  if (element.getProperty().isList())   t.linkedPredicate(""String_Node_Str"",Integer.toString(element.getIndex()),linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  if (""String_Node_Str"".equals(element.getType()))   decorateCoding(t,element);
  if (""String_Node_Str"".equals(element.getType()))   decorateReference(t,element);
  for (  Element child : element.getChildren()) {
    if (""String_Node_Str"".equals(child.getType())) {
      String childfn=getFormalName(child);
      t.predicate(""String_Node_Str"" + childfn,ttlLiteral(child.getValue(),child.getType()));
    }
 else     composeElement(section,t,child,element);
  }
}","private void composeElement(Section section,Complex ctxt,Element element,Element parent){
  String en=""String_Node_Str"".equals(element.getType()) ? ""String_Node_Str"" : getFormalName(element);
  Complex t;
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY && parent != null && parent.getNamedChildValue(""String_Node_Str"") != null) {
    String url=""String_Node_Str"" + parent.getNamedChildValue(""String_Node_Str"") + ""String_Node_Str"";
    ctxt.linkedPredicate(""String_Node_Str"" + en,url,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
    t=section.subject(url);
  }
 else {
    t=ctxt.linkedPredicate(""String_Node_Str"" + en,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
  }
  if (element.getSpecial() != null)   t.linkedPredicate(""String_Node_Str"",""String_Node_Str"" + element.fhirType(),linkResolver == null ? null : linkResolver.resolveType(element.fhirType()));
  if (element.hasValue())   t.linkedPredicate(""String_Node_Str"",ttlLiteral(element.getValue(),element.getType()),linkResolver == null ? null : linkResolver.resolveType(element.getType()));
  if (element.getProperty().isList())   t.linkedPredicate(""String_Node_Str"",Integer.toString(element.getIndex()),linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  if (""String_Node_Str"".equals(element.getType()))   decorateCoding(t,element);
  if (""String_Node_Str"".equals(element.getType()))   decorateReference(t,element);
  for (  Element child : element.getChildren()) {
    if (""String_Node_Str"".equals(child.getType())) {
      String childfn=getFormalName(child);
      t.predicate(""String_Node_Str"" + childfn,ttlLiteral(child.getValue(),child.getType()));
    }
 else     composeElement(section,t,child,element);
  }
}",0.9811858608893956
23972,"public ValueSetExpansionOutcome expandOnServer(ValueSet vs,String fn) throws Exception {
  if (noTerminologyServer)   return new ValueSetExpansionOutcome(""String_Node_Str"");
  try {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",Integer.toString(expandCodesLimit));
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    ValueSet result=txServer.expandValueset(vs,params);
    return new ValueSetExpansionOutcome(result);
  }
 catch (  Exception e) {
    return new ValueSetExpansionOutcome(""String_Node_Str"" + vs.getUrl() + ""String_Node_Str""+ e.getMessage());
  }
}","public ValueSetExpansionOutcome expandOnServer(ValueSet vs,String fn) throws Exception {
  if (noTerminologyServer)   return new ValueSetExpansionOutcome(""String_Node_Str"");
  try {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",Integer.toString(expandCodesLimit));
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + vs.getUrl());
    ValueSet result=txServer.expandValueset(vs,params);
    return new ValueSetExpansionOutcome(result);
  }
 catch (  Exception e) {
    return new ValueSetExpansionOutcome(""String_Node_Str"" + vs.getUrl() + ""String_Node_Str""+ e.getMessage());
  }
}",0.95902228612509
23973,"private String determineCacheId(ValueSet vs) throws Exception {
  ValueSet vsid=new ValueSet();
  vsid.setCompose(vs.getCompose());
  vsid.setLockedDate(vs.getLockedDate());
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,vsid);
  b.close();
  String s=new String(b.toByteArray());
  String r=Integer.toString(s.hashCode());
  return r;
}","private String determineCacheId(ValueSet vs) throws Exception {
  ValueSet vsid=new ValueSet();
  vsid.setCompose(vs.getCompose());
  vsid.setLockedDate(vs.getLockedDate());
  JsonParser parser=new JsonParser();
  parser.setOutputStyle(OutputStyle.NORMAL);
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  parser.compose(b,vsid);
  b.close();
  String s=new String(b.toByteArray());
  for (  ConceptSetComponent inc : vs.getCompose().getInclude()) {
    CodeSystem cs=fetchCodeSystem(inc.getSystem());
    if (cs != null)     s=s + cacheValue(cs);
  }
  String r=Integer.toString(s.hashCode());
  return r;
}",0.748824082784572
23974,"private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,boolean trimDifferential,String purl) throws DefinitionException, FHIRException {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  derived.setUserData(DERIVATION_POINTER,base);
  if (derived != null) {
    boolean isExtension=checkExtensionDoco(base);
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasLabelElement()) {
      if (derived.getLabel().startsWith(""String_Node_Str""))       base.setLabel(base.getLabel() + ""String_Node_Str"" + derived.getLabel().substring(3));
 else       if (!Base.compareDeep(derived.getLabelElement(),base.getLabelElement(),false))       base.setLabelElement(derived.getLabelElement().copy());
 else       if (trimDifferential)       base.setLabelElement(derived.getLabelElement().copy());
 else       if (derived.hasLabelElement())       derived.getLabelElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirements() && !base.getPath().contains(""String_Node_Str""))     derived.setRequirements(null);
    if (base.hasRequirements() && !base.getPath().contains(""String_Node_Str""))     base.setRequirements(null);
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false)) {
        if (derived.getMin() < base.getMin())         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + Integer.toString(derived.getMin()) + ""String_Node_Str""+ Integer.toString(base.getMin())+ ""String_Node_Str"",IssueSeverity.ERROR));
        base.setMinElement(derived.getMinElement().copy());
      }
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false)) {
        if (isLargerMax(derived.getMax(),base.getMax()))         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + derived.getMax() + ""String_Node_Str""+ base.getMax()+ ""String_Node_Str"",IssueSeverity.ERROR));
        base.setMaxElement(derived.getMaxElement().copy());
      }
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && derived.getBinding().getStrength() != BindingStrength.REQUIRED)         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + base.getBinding().getStrength().toCode() + ""String_Node_Str""+ derived.getBinding().getStrength().toCode(),IssueSeverity.ERROR));
 else         if (base.hasBinding() && derived.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().hasValueSetReference() && derived.getBinding().hasValueSetReference()) {
          ValueSetExpansionOutcome expBase=context.expandVS(context.fetchResource(ValueSet.class,base.getBinding().getValueSetReference().getReference()),true);
          ValueSetExpansionOutcome expDerived=context.expandVS(context.fetchResource(ValueSet.class,derived.getBinding().getValueSetReference().getReference()),true);
          if (expBase.getValueset() == null)           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + base.getPath(),""String_Node_Str"" + base.getBinding().getValueSetReference().getReference() + ""String_Node_Str"",IssueSeverity.WARNING));
 else           if (expDerived.getValueset() == null)           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + derived.getBinding().getValueSetReference().getReference() + ""String_Node_Str"",IssueSeverity.WARNING));
 else           if (!isSubset(expBase.getValueset(),expDerived.getValueset()))           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + derived.getBinding().getValueSetReference().getReference() + ""String_Node_Str""+ base.getBinding().getValueSetReference().getReference(),IssueSeverity.ERROR));
        }
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.hasCode() && (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| ((td.getCode().equals(""String_Node_Str"") || (td.getCode().equals(""String_Node_Str"")) && pkp.isResource(ts.getCode())))))               ok=true;
            }
            if (!ok)             throw new DefinitionException(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType()) {
          TypeRefComponent tt=t.copy();
          base.getType().add(tt);
        }
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    for (    ElementDefinitionConstraintComponent s : base.getConstraint())     s.setUserData(IS_DERIVED,true);
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s.copy());
      }
    }
  }
}","private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,boolean trimDifferential,String purl) throws DefinitionException, FHIRException {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  derived.setUserData(DERIVATION_POINTER,base);
  if (derived != null) {
    boolean isExtension=checkExtensionDoco(base);
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasLabelElement()) {
      if (derived.getLabel().startsWith(""String_Node_Str""))       base.setLabel(base.getLabel() + ""String_Node_Str"" + derived.getLabel().substring(3));
 else       if (!Base.compareDeep(derived.getLabelElement(),base.getLabelElement(),false))       base.setLabelElement(derived.getLabelElement().copy());
 else       if (trimDifferential)       base.setLabelElement(derived.getLabelElement().copy());
 else       if (derived.hasLabelElement())       derived.getLabelElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirements() && !base.getPath().contains(""String_Node_Str""))     derived.setRequirements(null);
    if (base.hasRequirements() && !base.getPath().contains(""String_Node_Str""))     base.setRequirements(null);
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false)) {
        if (derived.getMin() < base.getMin())         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + source.getPath(),""String_Node_Str"" + Integer.toString(derived.getMin()) + ""String_Node_Str""+ Integer.toString(base.getMin())+ ""String_Node_Str"",IssueSeverity.ERROR));
        base.setMinElement(derived.getMinElement().copy());
      }
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false)) {
        if (isLargerMax(derived.getMax(),base.getMax()))         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + source.getPath(),""String_Node_Str"" + derived.getMax() + ""String_Node_Str""+ base.getMax()+ ""String_Node_Str"",IssueSeverity.ERROR));
        base.setMaxElement(derived.getMaxElement().copy());
      }
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && derived.getBinding().getStrength() != BindingStrength.REQUIRED)         messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + base.getBinding().getStrength().toCode() + ""String_Node_Str""+ derived.getBinding().getStrength().toCode(),IssueSeverity.ERROR));
 else         if (base.hasBinding() && derived.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().hasValueSetReference() && derived.getBinding().hasValueSetReference()) {
          ValueSetExpansionOutcome expBase=context.expandVS(context.fetchResource(ValueSet.class,base.getBinding().getValueSetReference().getReference()),true);
          ValueSetExpansionOutcome expDerived=context.expandVS(context.fetchResource(ValueSet.class,derived.getBinding().getValueSetReference().getReference()),true);
          if (expBase.getValueset() == null)           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + base.getPath(),""String_Node_Str"" + base.getBinding().getValueSetReference().getReference() + ""String_Node_Str"",IssueSeverity.WARNING));
 else           if (expDerived.getValueset() == null)           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + derived.getBinding().getValueSetReference().getReference() + ""String_Node_Str"",IssueSeverity.WARNING));
 else           if (!isSubset(expBase.getValueset(),expDerived.getValueset()))           messages.add(new ValidationMessage(Source.ProfileValidator,IssueType.BUSINESSRULE,pn + ""String_Node_Str"" + derived.getPath(),""String_Node_Str"" + derived.getBinding().getValueSetReference().getReference() + ""String_Node_Str""+ base.getBinding().getValueSetReference().getReference(),IssueSeverity.ERROR));
        }
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.hasCode() && (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| ((td.getCode().equals(""String_Node_Str"") || (td.getCode().equals(""String_Node_Str"")) && pkp.isResource(ts.getCode())))))               ok=true;
            }
            if (!ok)             throw new DefinitionException(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType()) {
          TypeRefComponent tt=t.copy();
          base.getType().add(tt);
        }
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    for (    ElementDefinitionConstraintComponent s : base.getConstraint())     s.setUserData(IS_DERIVED,true);
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s.copy());
      }
    }
  }
}",0.9989260636100784
23975,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResource(Class<T> class_,String uri){
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
  }
  if (class_ == null && uri.contains(""String_Node_Str"")) {
    return null;
  }
  throw new Error(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Resource>T fetchResource(Class<T> class_,String uri){
  if (class_ == Questionnaire.class)   return (T)questionnaire;
  if (class_ == StructureDefinition.class && !uri.contains(""String_Node_Str""))   uri=""String_Node_Str"" + uri;
  if (uri.startsWith(""String_Node_Str"")) {
    if (uri.contains(""String_Node_Str""))     uri=uri.substring(0,uri.indexOf(""String_Node_Str""));
    if (class_ == StructureDefinition.class) {
      if (structures.containsKey(uri))       return (T)structures.get(uri);
 else       return null;
    }
 else     if (class_ == ValueSet.class) {
      if (valueSets.containsKey(uri))       return (T)valueSets.get(uri);
 else       return null;
    }
 else     if (class_ == CodeSystem.class) {
      if (codeSystems.containsKey(uri))       return (T)codeSystems.get(uri);
 else       return null;
    }
 else     if (class_ == ConceptMap.class) {
      if (maps.containsKey(uri))       return (T)maps.get(uri);
 else       return null;
    }
  }
  if (class_ == null && uri.contains(""String_Node_Str"")) {
    return null;
  }
  throw new Error(""String_Node_Str"" + class_.getName() + ""String_Node_Str""+ uri);
}",0.9812286689419796
23976,"@Override public List<String> getResourceNames(){
  List<String> result=new ArrayList<String>();
  for (  StructureDefinition sd : structures.values()) {
    if (sd.getKind() == StructureDefinitionKind.RESOURCE && !sd.hasBaseType())     result.add(sd.getName());
  }
  Collections.sort(result);
  return result;
}","@Override public List<String> getResourceNames(){
  List<String> result=new ArrayList<String>();
  for (  StructureDefinition sd : structures.values()) {
    if (sd.getKind() == StructureDefinitionKind.RESOURCE && sd.getDerivation() == TypeDerivationRule.SPECIALIZATION)     result.add(sd.getName());
  }
  Collections.sort(result);
  return result;
}",0.8343373493975904
23977,"@Override public String primitiveValue(){
  if (isPrimitive())   return value;
 else {
    if (hasPrimitiveValue()) {
      for (      Element c : children) {
        if (c.getName().equals(""String_Node_Str""))         return c.primitiveValue();
      }
    }
    return null;
  }
}","@Override public String primitiveValue(){
  if (isPrimitive())   return value;
 else {
    if (hasPrimitiveValue() && children != null) {
      for (      Element c : children) {
        if (c.getName().equals(""String_Node_Str""))         return c.primitiveValue();
      }
    }
    return null;
  }
}",0.9656357388316152
23978,"public void execute() throws Exception {
  globalStart=System.nanoTime();
  initialize();
  log(""String_Node_Str"");
  load();
  long startTime=System.nanoTime();
  log(""String_Node_Str"");
  loadConformance();
  log(""String_Node_Str"");
  validate();
  log(""String_Node_Str"" + outputDir);
  generate();
  long endTime=System.nanoTime();
  clean();
  log(""String_Node_Str"" + presentDuration(endTime - startTime) + ""String_Node_Str""+ new ValidationPresenter(context).generate(ig.getName(),errors,fileList,Utilities.path(qaDir,""String_Node_Str"")));
  if (watch) {
    first=false;
    log(""String_Node_Str"");
    while (watch) {
      Thread.sleep(5000);
      if (load()) {
        log(""String_Node_Str"" + Integer.toString(changeList.size()) + (changeList.size() == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ genTime());
        startTime=System.nanoTime();
        loadConformance();
        checkDependencies();
        validate();
        generate();
        clean();
        endTime=System.nanoTime();
        log(""String_Node_Str"" + presentDuration(endTime - startTime) + ""String_Node_Str""+ new ValidationPresenter(context).generate(ig.getName(),errors,fileList,Utilities.path(qaDir,""String_Node_Str"")));
      }
    }
  }
 else   log(""String_Node_Str"");
}","public void execute() throws Exception {
  globalStart=System.nanoTime();
  initialize();
  log(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ Constants.REVISION);
  load();
  long startTime=System.nanoTime();
  log(""String_Node_Str"");
  loadConformance();
  log(""String_Node_Str"");
  validate();
  log(""String_Node_Str"" + outputDir);
  generate();
  long endTime=System.nanoTime();
  clean();
  log(""String_Node_Str"" + presentDuration(endTime - startTime) + ""String_Node_Str""+ new ValidationPresenter(context).generate(ig.getName(),errors,fileList,Utilities.path(qaDir,""String_Node_Str"")));
  if (watch) {
    first=false;
    log(""String_Node_Str"");
    while (watch) {
      Thread.sleep(5000);
      if (load()) {
        log(""String_Node_Str"" + Integer.toString(changeList.size()) + (changeList.size() == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ genTime());
        startTime=System.nanoTime();
        loadConformance();
        checkDependencies();
        validate();
        generate();
        clean();
        endTime=System.nanoTime();
        log(""String_Node_Str"" + presentDuration(endTime - startTime) + ""String_Node_Str""+ new ValidationPresenter(context).generate(ig.getName(),errors,fileList,Utilities.path(qaDir,""String_Node_Str"")));
      }
    }
  }
 else   log(""String_Node_Str"");
}",0.9770466717674062
23979,"private void findRubyExe(){
  String[] paths=System.getenv(""String_Node_Str"").split(File.pathSeparator);
  for (  String s : paths) {
    String[] files=new File(s).list();
    if (files != null)     for (    String file : files)     if (file.equals(""String_Node_Str"")) {
      rubyExe=Utilities.path(s,file);
      jekyllGem=Utilities.path(s,""String_Node_Str"");
      if (!(new File(jekyllGem).exists()))       throw new Error(""String_Node_Str"");
      return;
    }
  }
  throw new Error(""String_Node_Str"");
}","private void findRubyExe(){
  String[] paths=System.getenv(""String_Node_Str"").split(File.pathSeparator);
  for (  String s : paths) {
    String[] files=new File(s).list();
    if (files != null)     for (    String file : files)     if (file.equals(""String_Node_Str"")) {
      rubyExe=Utilities.path(s,file);
      jekyllGem=Utilities.path(s,""String_Node_Str"");
      if (!(new File(jekyllGem).exists()))       throw new Error(""String_Node_Str"");
      log(""String_Node_Str"" + rubyExe);
      return;
    }
  }
  throw new Error(""String_Node_Str"");
}",0.9566854990583804
23980,"private void initialize() throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  if (tool == GenerationTool.Jekyll)   findRubyExe();
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  resourcesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  specPath=str(paths,""String_Node_Str"");
  instanceTemplate=Utilities.path(root,str(paths,""String_Node_Str""));
  igName=Utilities.path(resourcesDir,configuration.get(""String_Node_Str"").getAsString());
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  checkDir(resourcesDir);
  checkDir(pagesDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(outputDir);
  forceDir(qaDir);
  checkFile(instanceTemplate);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  String vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specDetails.get(""String_Node_Str"").getAsJsonObject());
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s));
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s));
  }
}","private void initialize() throws Exception {
  first=true;
  log(""String_Node_Str"");
  configuration=(JsonObject)new com.google.gson.JsonParser().parse(TextFile.fileToString(configFile));
  if (!""String_Node_Str"".equals(str(configuration,""String_Node_Str"")))   throw new Exception(""String_Node_Str"");
  tool=GenerationTool.Jekyll;
  if (!configuration.has(""String_Node_Str"") || !(configuration.get(""String_Node_Str"") instanceof JsonObject))   throw new Exception(""String_Node_Str"");
  if (tool == GenerationTool.Jekyll)   findRubyExe();
  JsonObject paths=configuration.getAsJsonObject(""String_Node_Str"");
  String root=Utilities.getDirectoryForFile(configFile);
  if (Utilities.noString(root))   root=getCurentDirectory();
  resourcesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  pagesDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  tempDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  outputDir=Utilities.path(root,str(paths,""String_Node_Str"",""String_Node_Str""));
  qaDir=Utilities.path(root,str(paths,""String_Node_Str""));
  specPath=str(paths,""String_Node_Str"");
  instanceTemplate=Utilities.path(root,str(paths,""String_Node_Str""));
  igName=Utilities.path(resourcesDir,configuration.get(""String_Node_Str"").getAsString());
  log(""String_Node_Str"" + igName);
  log(""String_Node_Str"");
  checkDir(resourcesDir);
  checkDir(pagesDir);
  forceDir(tempDir);
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(Utilities.path(tempDir,""String_Node_Str""));
  forceDir(outputDir);
  forceDir(qaDir);
  checkFile(instanceTemplate);
  log(""String_Node_Str"");
  try {
    context=SimpleWorkerContext.fromClassPath(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
    log(""String_Node_Str"");
    context=SimpleWorkerContext.fromPack(""String_Node_Str"");
  }
  context.setAllowLoadingDuplicates(true);
  context.setExpandCodesLimit(1000);
  log(""String_Node_Str"" + txServer);
  String vsCache=Utilities.path(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  Utilities.createDirectory(vsCache);
  context.initTS(vsCache,txServer);
  context.connectToTSServer(txServer);
  validator=new InstanceValidator(context);
  validator.setAllowXsiLocation(true);
  loadSpecDetails(context.getBinaries().get(""String_Node_Str""));
  igpkp=new IGKnowledgeProvider(context,specPath,configuration,errors);
  igpkp.loadSpecPaths(specDetails.get(""String_Node_Str"").getAsJsonObject());
  fetcher.setPkp(igpkp);
  for (  String s : context.getBinaries().keySet())   if (needFile(s)) {
    checkMakeFile(context.getBinaries().get(s),Utilities.path(qaDir,s));
    checkMakeFile(context.getBinaries().get(s),Utilities.path(tempDir,s));
  }
}",0.9886764432894004
23981,"private ElementDefinition processLine(StructureDefinition sd,Sheet sheet,int row,Map<String,ElementDefinitionConstraintComponent> invariants,boolean profile,boolean firstTime) throws Exception {
  String path=sheet.getColumn(row,""String_Node_Str"");
  if (path.startsWith(""String_Node_Str""))   return null;
  if (Utilities.noString(path))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (path.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + getLocation(row));
  String profileName=sheet.getColumn(row,""String_Node_Str"");
  String discriminator=sheet.getColumn(row,""String_Node_Str"");
  boolean isRoot=!path.contains(""String_Node_Str"");
  ElementDefinition e=sd.getDifferential().addElement();
  if (isRoot) {
    e.setPath(path);
  }
 else {
    String arc=path.substring(0,path.lastIndexOf(""String_Node_Str""));
    String leaf=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
    if (leaf.startsWith(""String_Node_Str"")) {
      leaf=leaf.substring(1);
      e.addRepresentation(PropertyRepresentation.XMLATTR);
    }
    e.setPath(arc + ""String_Node_Str"" + leaf);
  }
  String c=sheet.getColumn(row,""String_Node_Str"");
  if (c == null || c.equals(""String_Node_Str"") || c.startsWith(""String_Node_Str"")) {
  }
 else {
    String[] card=c.split(""String_Node_Str"");
    if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))     throw new Exception(""String_Node_Str"" + c + ""String_Node_Str""+ c+ ""String_Node_Str""+ getLocation(row)+ ""String_Node_Str""+ path);
    e.setMin(Integer.parseInt(card[0]));
    e.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  }
  e.setName(profileName);
  if (!Utilities.noString(discriminator)) {
    e.getSlicing().setRules(SlicingRules.OPEN);
    for (    String d : discriminator.split(""String_Node_Str""))     if (!Utilities.noString(d))     e.getSlicing().addDiscriminator(d);
  }
  doAliases(sheet,row,e);
  e.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (e.getPath().endsWith(""String_Node_Str""))   e.setIsModifier(true);
  e.setMustSupport(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  e.setIsSummary(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  String uml=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(uml)) {
    if (uml.contains(""String_Node_Str"")) {
      String[] parts=uml.split(""String_Node_Str"");
      e.setUserData(""String_Node_Str"",parts[0]);
      e.setUserData(""String_Node_Str"",parts[1]);
      if (parts.length > 2)       e.setUserData(""String_Node_Str"",parts[2]);
    }
 else     if (uml.startsWith(""String_Node_Str"")) {
      e.setUserData(""String_Node_Str"",true);
      e.setUserData(""String_Node_Str"",uml.substring(6));
    }
 else {
      e.setUserData(""String_Node_Str"",uml);
    }
  }
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (s != null && !s.equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + getLocation(row));
  s=sheet.getColumn(row,""String_Node_Str"");
  if (s != null && !s.equals(""String_Node_Str"")) {
    for (    String sn : s.split(""String_Node_Str"")) {
      ElementDefinitionConstraintComponent inv=invariants.get(sn);
      if (inv == null)       throw new Exception(""String_Node_Str"" + sn + ""String_Node_Str""+ getLocation(row));
      e.addCondition(inv.getId());
    }
  }
  TypeParser tp=new TypeParser();
  List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,""String_Node_Str"",context,!path.contains(""String_Node_Str""));
  if (types.size() == 1 && types.get(0).getName().startsWith(""String_Node_Str""))   e.setContentReference(""String_Node_Str"" + types.get(0).getName().substring(1));
 else   e.getType().addAll(tp.convert(context,e.getPath(),types));
  String regex=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(regex) && e.hasType())   ToolingExtensions.addStringExtension(e.getType().get(0),ToolingExtensions.EXT_REGEX,regex);
  if ((path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"")) && e.hasType() && e.getType().get(0).hasProfile()&& Utilities.noString(profileName))   throw new Exception(""String_Node_Str"" + e.getType().get(0).getProfile().get(0));
  String bindingName=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(bindingName)) {
    ElementDefinitionBindingComponent binding=bindings.get(bindingName);
    if (binding == null && !bindingName.startsWith(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
    e.setBinding(binding);
  }
  e.setShort(sheet.getColumn(row,""String_Node_Str""));
  e.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))   e.setMaxLength(Integer.parseInt(sheet.getColumn(row,""String_Node_Str"")));
  e.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  e.setComments(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=e.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  e.setExample(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  processOtherExamples(e,sheet,row);
  String dh=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(dh))   ToolingExtensions.addDisplayHint(e,dh);
  e.setFixed(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  e.setPattern(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  return e;
}","private ElementDefinition processLine(StructureDefinition sd,Sheet sheet,int row,Map<String,ElementDefinitionConstraintComponent> invariants,boolean profile,boolean firstTime) throws Exception {
  String path=sheet.getColumn(row,""String_Node_Str"");
  if (path.startsWith(""String_Node_Str""))   return null;
  if (Utilities.noString(path))   throw new Exception(""String_Node_Str"" + getLocation(row));
  if (path.contains(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + getLocation(row));
  String profileName=sheet.getColumn(row,""String_Node_Str"");
  String discriminator=sheet.getColumn(row,""String_Node_Str"");
  boolean isRoot=!path.contains(""String_Node_Str"");
  ElementDefinition e=sd.getDifferential().addElement();
  if (isRoot) {
    e.setPath(path);
  }
 else {
    String arc=path.substring(0,path.lastIndexOf(""String_Node_Str""));
    String leaf=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
    if (leaf.startsWith(""String_Node_Str"")) {
      leaf=leaf.substring(1);
      e.addRepresentation(PropertyRepresentation.XMLATTR);
    }
    e.setPath(arc + ""String_Node_Str"" + leaf);
  }
  String c=sheet.getColumn(row,""String_Node_Str"");
  if (c == null || c.equals(""String_Node_Str"") || c.startsWith(""String_Node_Str"")) {
  }
 else {
    String[] card=c.split(""String_Node_Str"");
    if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))     throw new Exception(""String_Node_Str"" + c + ""String_Node_Str""+ c+ ""String_Node_Str""+ getLocation(row)+ ""String_Node_Str""+ path);
    e.setMin(Integer.parseInt(card[0]));
    e.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  }
  e.setName(profileName);
  if (!Utilities.noString(discriminator)) {
    e.getSlicing().setRules(SlicingRules.OPEN);
    for (    String d : discriminator.split(""String_Node_Str""))     if (!Utilities.noString(d))     e.getSlicing().addDiscriminator(d);
  }
  doAliases(sheet,row,e);
  e.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (e.getPath().endsWith(""String_Node_Str""))   e.setIsModifier(true);
  e.setMustSupport(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  e.setIsSummary(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  String uml=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(uml)) {
    if (uml.contains(""String_Node_Str"")) {
      String[] parts=uml.split(""String_Node_Str"");
      e.setUserData(""String_Node_Str"",parts[0]);
      e.setUserData(""String_Node_Str"",parts[1]);
      if (parts.length > 2)       e.setUserData(""String_Node_Str"",parts[2]);
    }
 else     if (uml.startsWith(""String_Node_Str"")) {
      e.setUserData(""String_Node_Str"",true);
      e.setUserData(""String_Node_Str"",uml.substring(6));
    }
 else {
      e.setUserData(""String_Node_Str"",uml);
    }
  }
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (s != null && !s.equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + getLocation(row));
  s=sheet.getColumn(row,""String_Node_Str"");
  if (s != null && !s.equals(""String_Node_Str"")) {
    for (    String sn : s.split(""String_Node_Str"")) {
      ElementDefinitionConstraintComponent inv=invariants.get(sn);
      if (inv == null)       throw new Exception(""String_Node_Str"" + sn + ""String_Node_Str""+ getLocation(row));
      e.addCondition(inv.getId());
    }
  }
  TypeParser tp=new TypeParser();
  List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,""String_Node_Str"",context,!path.contains(""String_Node_Str""));
  if (types.size() == 1 && types.get(0).getName().startsWith(""String_Node_Str""))   e.setContentReference(""String_Node_Str"" + types.get(0).getName().substring(1));
 else   e.getType().addAll(tp.convert(context,e.getPath(),types,true,e));
  String regex=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(regex) && e.hasType())   ToolingExtensions.addStringExtension(e.getType().get(0),ToolingExtensions.EXT_REGEX,regex);
  if ((path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"")) && e.hasType() && e.getType().get(0).hasProfile()&& Utilities.noString(profileName))   throw new Exception(""String_Node_Str"" + e.getType().get(0).getProfile().get(0));
  String bindingName=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(bindingName)) {
    ElementDefinitionBindingComponent binding=bindings.get(bindingName);
    if (binding == null && !bindingName.startsWith(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
    e.setBinding(binding);
  }
  e.setShort(sheet.getColumn(row,""String_Node_Str""));
  e.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))   e.setMaxLength(Integer.parseInt(sheet.getColumn(row,""String_Node_Str"")));
  e.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  e.setComments(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=e.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  e.setExample(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  processOtherExamples(e,sheet,row);
  String dh=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(dh))   ToolingExtensions.addDisplayHint(e,dh);
  e.setFixed(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  e.setPattern(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),e));
  return e;
}",0.9994037986542884
23982,"private void parseExtensionElement(Sheet sheet,int row,StructureDefinition sd,ElementDefinition exe,boolean nested) throws Exception {
  String[] card=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
  if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))   throw new Exception(""String_Node_Str"" + sheet.getColumn(row,""String_Node_Str"") + ""String_Node_Str""+ getLocation(row));
  exe.setMin(Integer.parseInt(card[0]));
  exe.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(s))   exe.addCondition(s);
  exe.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  exe.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  exe.setComments(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  doAliases(sheet,row,exe);
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=exe.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  exe.setShort(sheet.getColumn(row,""String_Node_Str""));
  exe.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (nested && exe.getIsModifier())   throw new Exception(""String_Node_Str"" + getLocation(row));
  exe.getType().add(new TypeRefComponent().setCode(""String_Node_Str""));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
    ElementDefinition exv=new ElementDefinition();
    exv.setPath(""String_Node_Str"");
    sd.getDifferential().getElement().add(exv);
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(bindingName)) {
      ElementDefinitionBindingComponent binding=bindings.get(bindingName);
      if (binding == null && !bindingName.startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
      exv.setBinding(binding);
    }
    s=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(s))     exv.setMaxLength(Integer.parseInt(s));
    TypeParser tp=new TypeParser();
    List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,""String_Node_Str"",context,false);
    exv.getType().addAll(tp.convert(context,exv.getPath(),types));
    exv.setExample(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),exv));
  }
}","private void parseExtensionElement(Sheet sheet,int row,StructureDefinition sd,ElementDefinition exe,boolean nested) throws Exception {
  String[] card=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
  if (card.length != 2 || !Utilities.isInteger(card[0]) || (!""String_Node_Str"".equals(card[1]) && !Utilities.isInteger(card[1])))   throw new Exception(""String_Node_Str"" + sheet.getColumn(row,""String_Node_Str"") + ""String_Node_Str""+ getLocation(row));
  exe.setMin(Integer.parseInt(card[0]));
  exe.setMax(""String_Node_Str"".equals(card[1]) ? ""String_Node_Str"" : card[1]);
  String s=sheet.getColumn(row,""String_Node_Str"");
  if (!Utilities.noString(s))   exe.addCondition(s);
  exe.setDefinition(Utilities.appendPeriod(processDefinition(sheet.getColumn(row,""String_Node_Str""))));
  exe.setRequirements(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  exe.setComments(Utilities.appendPeriod(sheet.getColumn(row,""String_Node_Str"")));
  doAliases(sheet,row,exe);
  for (  String n : mappings.keySet()) {
    MappingSpace m=mappings.get(n);
    String sm=sheet.getColumn(row,mappings.get(n).getColumnName());
    if (!Utilities.noString(sm)) {
      ElementDefinitionMappingComponent map=exe.addMapping();
      map.setIdentity(m.getId());
      map.setMap(sm);
    }
  }
  exe.setShort(sheet.getColumn(row,""String_Node_Str""));
  exe.setIsModifier(parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false));
  if (nested && exe.getIsModifier())   throw new Exception(""String_Node_Str"" + getLocation(row));
  exe.getType().add(new TypeRefComponent().setCode(""String_Node_Str""));
  if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
    ElementDefinition exv=new ElementDefinition();
    exv.setPath(""String_Node_Str"");
    sd.getDifferential().getElement().add(exv);
    String bindingName=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(bindingName)) {
      ElementDefinitionBindingComponent binding=bindings.get(bindingName);
      if (binding == null && !bindingName.startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + bindingName + ""String_Node_Str"");
      exv.setBinding(binding);
    }
    s=sheet.getColumn(row,""String_Node_Str"");
    if (!Utilities.noString(s))     exv.setMaxLength(Integer.parseInt(s));
    TypeParser tp=new TypeParser();
    List<TypeRef> types=tp.parse(sheet.getColumn(row,""String_Node_Str""),true,""String_Node_Str"",context,false);
    exv.getType().addAll(tp.convert(context,exv.getPath(),types,false,exv));
    exv.setExample(processValue(sheet,row,""String_Node_Str"",sheet.getColumn(row,""String_Node_Str""),exv));
  }
}",0.9950738916256158
23983,"public List<TypeRefComponent> convert(IWorkerContext context,String path,List<TypeRef> types) throws Exception {
  List<TypeRefComponent> list=new ArrayList<TypeRefComponent>();
  for (  TypeRef t : types) {
    if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
      throw new Exception(""String_Node_Str"" + path);
    }
    if (t.getParams().size() > 0) {
      if (t.getProfile() != null && t.getParams().size() != 1) {
        throw new Exception(""String_Node_Str"" + path);
      }
      for (      String param : t.getParams()) {
        TypeRefComponent childType=new TypeRefComponent();
        childType.setCode(t.getName());
        childType.addProfile(""String_Node_Str"" + param);
        list.add(childType);
      }
    }
 else     if (t.isWildcardType()) {
      for (      String n : wildcardTypes())       list.add(new TypeRefComponent().setCode(n));
    }
 else {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getName());
      if (sd == null)       throw new Exception(""String_Node_Str"" + t.getName());
      if (sd.getDerivation() == TypeDerivationRule.CONSTRAINT) {
        TypeRefComponent tc=new TypeRefComponent().setCode(sd.getBaseType());
        list.add(tc);
        tc.addProfile(sd.getUrl());
      }
 else {
        TypeRefComponent tc=new TypeRefComponent().setCode(t.getName());
        list.add(tc);
        if (t.hasProfile())         tc.addProfile(t.getProfile());
      }
    }
  }
  return list;
}","public List<TypeRefComponent> convert(IWorkerContext context,String path,List<TypeRef> types,boolean resource,ElementDefinition ed) throws Exception {
  List<TypeRefComponent> list=new ArrayList<TypeRefComponent>();
  for (  TypeRef t : types) {
    if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
      throw new Exception(""String_Node_Str"" + path);
    }
    if (t.getParams().size() > 0) {
      if (t.getProfile() != null && t.getParams().size() != 1) {
        throw new Exception(""String_Node_Str"" + path);
      }
      for (      String param : t.getParams()) {
        TypeRefComponent childType=new TypeRefComponent();
        childType.setCode(t.getName());
        childType.addProfile(""String_Node_Str"" + param);
        list.add(childType);
      }
    }
 else     if (t.isWildcardType()) {
      for (      String n : wildcardTypes())       list.add(new TypeRefComponent().setCode(n));
    }
 else     if (t.getName().startsWith(""String_Node_Str"")) {
      if (resource)       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
 else       list.add(new TypeRefComponent().setCode(""String_Node_Str""));
      ToolingExtensions.addStringExtension(ed,""String_Node_Str"",t.getName().substring(1));
    }
 else {
      StructureDefinition sd=context.fetchResource(StructureDefinition.class,""String_Node_Str"" + t.getName());
      if (sd == null)       throw new Exception(""String_Node_Str"" + t.getName());
      if (sd.getDerivation() == TypeDerivationRule.CONSTRAINT) {
        TypeRefComponent tc=new TypeRefComponent().setCode(sd.getBaseType());
        list.add(tc);
        tc.addProfile(sd.getUrl());
      }
 else {
        TypeRefComponent tc=new TypeRefComponent().setCode(t.getName());
        list.add(tc);
        if (t.hasProfile())         tc.addProfile(t.getProfile());
      }
    }
  }
  return list;
}",0.8943283582089552
23984,"private void loadFromStream(InputStream stream) throws IOException, FHIRException {
  ZipInputStream zip=new ZipInputStream(stream);
  ZipEntry ze;
  while ((ze=zip.getNextEntry()) != null) {
    if (ze.getName().endsWith(""String_Node_Str"")) {
      String name=ze.getName();
      loadFromFile(zip,name);
    }
 else     loadBytes(ze.getName(),ze,zip);
    zip.closeEntry();
  }
  zip.close();
}","private void loadFromStream(InputStream stream) throws IOException, FHIRException {
  ZipInputStream zip=new ZipInputStream(stream);
  ZipEntry ze;
  while ((ze=zip.getNextEntry()) != null) {
    if (ze.getName().endsWith(""String_Node_Str"")) {
      String name=ze.getName();
      loadFromFile(zip,name);
    }
 else     if (ze.getName().equals(""String_Node_Str"")) {
      readVersionInfo(ze,zip);
    }
 else     loadBytes(ze.getName(),ze,zip);
    zip.closeEntry();
  }
  zip.close();
}",0.8949152542372881
23985,"protected void parsePlanDefinitionProperties(JsonObject json,PlanDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setModuleMetadata(parseModuleMetadata(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getLibrary().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getActionDefinition().add(parsePlanDefinitionPlanDefinitionActionDefinitionComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
}","protected void parsePlanDefinitionProperties(JsonObject json,PlanDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setUrlElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUrlElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setTitleElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTitleElement());
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setExperimentalElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getExperimentalElement());
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setPurposeElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurposeElement());
  if (json.has(""String_Node_Str""))   res.setUsageElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUsageElement());
  if (json.has(""String_Node_Str""))   res.setPublicationDateElement(parseDate(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublicationDateElement());
  if (json.has(""String_Node_Str""))   res.setLastReviewDateElement(parseDate(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getLastReviewDateElement());
  if (json.has(""String_Node_Str""))   res.setEffectivePeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getCoverage().add(parseUsageContext(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTopic().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContributor().add(parseContributor(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPublisherElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublisherElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactDetail(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setCopyrightElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCopyrightElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getRelatedResource().add(parseRelatedResource(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getLibrary().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getActionDefinition().add(parsePlanDefinitionPlanDefinitionActionDefinitionComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
}",0.214424320827943
23986,"protected void composeConsentExceptComponentInner(Consent.ExceptComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasTypeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getTypeElement(),new Consent.ConsentExceptTypeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getTypeElement(),new Consent.ConsentExceptTypeEnumFactory(),false);
  }
  if (element.hasPeriod()) {
    composePeriod(""String_Node_Str"",element.getPeriod());
  }
  if (element.hasActor()) {
    openArray(""String_Node_Str"");
    for (    Consent.ExceptActorComponent e : element.getActor())     composeConsentExceptActorComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasAction()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getAction())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasSecurityLabel()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getSecurityLabel())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasPurpose()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getPurpose())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasData()) {
    openArray(""String_Node_Str"");
    for (    Consent.ExceptDataComponent e : element.getData())     composeConsentExceptDataComponent(null,e);
    closeArray();
  }
  ;
}","protected void composeConsentExceptComponentInner(Consent.ExceptComponent element) throws IOException {
  composeBackbone(element);
  if (element.hasTypeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getTypeElement(),new Consent.ConsentExceptTypeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getTypeElement(),new Consent.ConsentExceptTypeEnumFactory(),false);
  }
  if (element.hasPeriod()) {
    composePeriod(""String_Node_Str"",element.getPeriod());
  }
  if (element.hasActor()) {
    openArray(""String_Node_Str"");
    for (    Consent.ExceptActorComponent e : element.getActor())     composeConsentExceptActorComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasAction()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getAction())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasSecurityLabel()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getSecurityLabel())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasPurpose()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getPurpose())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasClass_()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getClass_())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasCode()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getCode())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasData()) {
    openArray(""String_Node_Str"");
    for (    Consent.ExceptDataComponent e : element.getData())     composeConsentExceptDataComponent(null,e);
    closeArray();
  }
  ;
}",0.8994943109987358
23987,"protected void parseActivityDefinitionProperties(JsonObject json,ActivityDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setModuleMetadata(parseModuleMetadata(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getLibrary().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setCategoryElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ActivityDefinition.ActivityDefinitionCategory.NULL,new ActivityDefinition.ActivityDefinitionCategoryEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCategoryElement());
  if (json.has(""String_Node_Str""))   res.setCode(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  Type timing=parseType(""String_Node_Str"",json);
  if (timing != null)   res.setTiming(timing);
  if (json.has(""String_Node_Str""))   res.setLocation(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getParticipantType().add(parseEnumeration(array.get(i).getAsString(),ActivityDefinition.ActivityParticipantType.NULL,new ActivityDefinition.ActivityParticipantTypeEnumFactory()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getParticipantType().size())       res.getParticipantType().add(parseEnumeration(null,ActivityDefinition.ActivityParticipantType.NULL,new ActivityDefinition.ActivityParticipantTypeEnumFactory()));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getParticipantType().get(i));
    }
  }
  ;
  Type product=parseType(""String_Node_Str"",json);
  if (product != null)   res.setProduct(product);
  if (json.has(""String_Node_Str""))   res.setQuantity(parseSimpleQuantity(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
}","protected void parseActivityDefinitionProperties(JsonObject json,ActivityDefinition res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setUrlElement(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUrlElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setVersionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getVersionElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setTitleElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTitleElement());
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setExperimentalElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getExperimentalElement());
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setPurposeElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurposeElement());
  if (json.has(""String_Node_Str""))   res.setUsageElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getUsageElement());
  if (json.has(""String_Node_Str""))   res.setPublicationDateElement(parseDate(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublicationDateElement());
  if (json.has(""String_Node_Str""))   res.setLastReviewDateElement(parseDate(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getLastReviewDateElement());
  if (json.has(""String_Node_Str""))   res.setEffectivePeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getCoverage().add(parseUsageContext(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTopic().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContributor().add(parseContributor(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPublisherElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublisherElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactDetail(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setCopyrightElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCopyrightElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getRelatedResource().add(parseRelatedResource(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getLibrary().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setCategoryElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),ActivityDefinition.ActivityDefinitionCategory.NULL,new ActivityDefinition.ActivityDefinitionCategoryEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getCategoryElement());
  if (json.has(""String_Node_Str""))   res.setCode(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  Type timing=parseType(""String_Node_Str"",json);
  if (timing != null)   res.setTiming(timing);
  if (json.has(""String_Node_Str""))   res.setLocation(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getParticipantType().add(parseEnumeration(array.get(i).getAsString(),ActivityDefinition.ActivityParticipantType.NULL,new ActivityDefinition.ActivityParticipantTypeEnumFactory()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getParticipantType().size())       res.getParticipantType().add(parseEnumeration(null,ActivityDefinition.ActivityParticipantType.NULL,new ActivityDefinition.ActivityParticipantTypeEnumFactory()));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getParticipantType().get(i));
    }
  }
  ;
  Type product=parseType(""String_Node_Str"",json);
  if (product != null)   res.setProduct(product);
  if (json.has(""String_Node_Str""))   res.setQuantity(parseSimpleQuantity(json.getAsJsonObject(""String_Node_Str"")));
}",0.4781496482626305
23988,"protected void composePlanDefinitionInner(PlanDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasModuleMetadata()) {
    composeModuleMetadata(""String_Node_Str"",element.getModuleMetadata());
  }
  if (element.hasLibrary()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getLibrary())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasActionDefinition()) {
    openArray(""String_Node_Str"");
    for (    PlanDefinition.PlanDefinitionActionDefinitionComponent e : element.getActionDefinition())     composePlanDefinitionPlanDefinitionActionDefinitionComponent(null,e);
    closeArray();
  }
  ;
}","protected void composePlanDefinitionInner(PlanDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUriCore(""String_Node_Str"",element.getUrlElement(),false);
    composeUriExtras(""String_Node_Str"",element.getUrlElement(),false);
  }
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTitleElement()) {
    composeStringCore(""String_Node_Str"",element.getTitleElement(),false);
    composeStringExtras(""String_Node_Str"",element.getTitleElement(),false);
  }
  if (element.hasStatusElement()) {
    composeCodeCore(""String_Node_Str"",element.getStatusElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getStatusElement(),false);
  }
  if (element.hasExperimentalElement()) {
    composeBooleanCore(""String_Node_Str"",element.getExperimentalElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getExperimentalElement(),false);
  }
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasPurposeElement()) {
    composeStringCore(""String_Node_Str"",element.getPurposeElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPurposeElement(),false);
  }
  if (element.hasUsageElement()) {
    composeStringCore(""String_Node_Str"",element.getUsageElement(),false);
    composeStringExtras(""String_Node_Str"",element.getUsageElement(),false);
  }
  if (element.hasPublicationDateElement()) {
    composeDateCore(""String_Node_Str"",element.getPublicationDateElement(),false);
    composeDateExtras(""String_Node_Str"",element.getPublicationDateElement(),false);
  }
  if (element.hasLastReviewDateElement()) {
    composeDateCore(""String_Node_Str"",element.getLastReviewDateElement(),false);
    composeDateExtras(""String_Node_Str"",element.getLastReviewDateElement(),false);
  }
  if (element.hasEffectivePeriod()) {
    composePeriod(""String_Node_Str"",element.getEffectivePeriod());
  }
  if (element.hasCoverage()) {
    openArray(""String_Node_Str"");
    for (    UsageContext e : element.getCoverage())     composeUsageContext(null,e);
    closeArray();
  }
  ;
  if (element.hasTopic()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getTopic())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasContributor()) {
    openArray(""String_Node_Str"");
    for (    Contributor e : element.getContributor())     composeContributor(null,e);
    closeArray();
  }
  ;
  if (element.hasPublisherElement()) {
    composeStringCore(""String_Node_Str"",element.getPublisherElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublisherElement(),false);
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactDetail e : element.getContact())     composeContactDetail(null,e);
    closeArray();
  }
  ;
  if (element.hasCopyrightElement()) {
    composeStringCore(""String_Node_Str"",element.getCopyrightElement(),false);
    composeStringExtras(""String_Node_Str"",element.getCopyrightElement(),false);
  }
  if (element.hasRelatedResource()) {
    openArray(""String_Node_Str"");
    for (    RelatedResource e : element.getRelatedResource())     composeRelatedResource(null,e);
    closeArray();
  }
  ;
  if (element.hasLibrary()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getLibrary())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasActionDefinition()) {
    openArray(""String_Node_Str"");
    for (    PlanDefinition.PlanDefinitionActionDefinitionComponent e : element.getActionDefinition())     composePlanDefinitionPlanDefinitionActionDefinitionComponent(null,e);
    closeArray();
  }
  ;
}",0.2506465088521981
23989,"protected void parseConsentExceptComponentProperties(JsonObject json,Consent owner,Consent.ExceptComponent res) throws IOException, FHIRFormatError {
  parseBackboneProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Consent.ConsentExceptType.NULL,new Consent.ConsentExceptTypeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setPeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getActor().add(parseConsentExceptActorComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getAction().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSecurityLabel().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getPurpose().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getData().add(parseConsentExceptDataComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
}","protected void parseConsentExceptComponentProperties(JsonObject json,Consent owner,Consent.ExceptComponent res) throws IOException, FHIRFormatError {
  parseBackboneProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setTypeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Consent.ConsentExceptType.NULL,new Consent.ConsentExceptTypeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getTypeElement());
  if (json.has(""String_Node_Str""))   res.setPeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getActor().add(parseConsentExceptActorComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getAction().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSecurityLabel().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getPurpose().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getClass_().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getCode().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getData().add(parseConsentExceptDataComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
}",0.8892171344165436
23990,"protected void composeActivityDefinitionInner(ActivityDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasModuleMetadata()) {
    composeModuleMetadata(""String_Node_Str"",element.getModuleMetadata());
  }
  if (element.hasLibrary()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getLibrary())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasCategoryElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getCategoryElement(),new ActivityDefinition.ActivityDefinitionCategoryEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getCategoryElement(),new ActivityDefinition.ActivityDefinitionCategoryEnumFactory(),false);
  }
  if (element.hasCode()) {
    composeCodeableConcept(""String_Node_Str"",element.getCode());
  }
  if (element.hasTiming()) {
    composeType(""String_Node_Str"",element.getTiming());
  }
  if (element.hasLocation()) {
    composeReference(""String_Node_Str"",element.getLocation());
  }
  if (element.hasParticipantType()) {
    openArray(""String_Node_Str"");
    for (    Enumeration<ActivityDefinition.ActivityParticipantType> e : element.getParticipantType())     composeEnumerationCore(null,e,new ActivityDefinition.ActivityParticipantTypeEnumFactory(),true);
    closeArray();
    if (anyHasExtras(element.getParticipantType())) {
      openArray(""String_Node_Str"");
      for (      Enumeration<ActivityDefinition.ActivityParticipantType> e : element.getParticipantType())       composeEnumerationExtras(null,e,new ActivityDefinition.ActivityParticipantTypeEnumFactory(),true);
      closeArray();
    }
  }
  ;
  if (element.hasProduct()) {
    composeType(""String_Node_Str"",element.getProduct());
  }
  if (element.hasQuantity()) {
    composeSimpleQuantity(""String_Node_Str"",element.getQuantity());
  }
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
}","protected void composeActivityDefinitionInner(ActivityDefinition element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasUrlElement()) {
    composeUriCore(""String_Node_Str"",element.getUrlElement(),false);
    composeUriExtras(""String_Node_Str"",element.getUrlElement(),false);
  }
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasVersionElement()) {
    composeStringCore(""String_Node_Str"",element.getVersionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getVersionElement(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTitleElement()) {
    composeStringCore(""String_Node_Str"",element.getTitleElement(),false);
    composeStringExtras(""String_Node_Str"",element.getTitleElement(),false);
  }
  if (element.hasStatusElement()) {
    composeCodeCore(""String_Node_Str"",element.getStatusElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getStatusElement(),false);
  }
  if (element.hasExperimentalElement()) {
    composeBooleanCore(""String_Node_Str"",element.getExperimentalElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getExperimentalElement(),false);
  }
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasPurposeElement()) {
    composeStringCore(""String_Node_Str"",element.getPurposeElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPurposeElement(),false);
  }
  if (element.hasUsageElement()) {
    composeStringCore(""String_Node_Str"",element.getUsageElement(),false);
    composeStringExtras(""String_Node_Str"",element.getUsageElement(),false);
  }
  if (element.hasPublicationDateElement()) {
    composeDateCore(""String_Node_Str"",element.getPublicationDateElement(),false);
    composeDateExtras(""String_Node_Str"",element.getPublicationDateElement(),false);
  }
  if (element.hasLastReviewDateElement()) {
    composeDateCore(""String_Node_Str"",element.getLastReviewDateElement(),false);
    composeDateExtras(""String_Node_Str"",element.getLastReviewDateElement(),false);
  }
  if (element.hasEffectivePeriod()) {
    composePeriod(""String_Node_Str"",element.getEffectivePeriod());
  }
  if (element.hasCoverage()) {
    openArray(""String_Node_Str"");
    for (    UsageContext e : element.getCoverage())     composeUsageContext(null,e);
    closeArray();
  }
  ;
  if (element.hasTopic()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getTopic())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasContributor()) {
    openArray(""String_Node_Str"");
    for (    Contributor e : element.getContributor())     composeContributor(null,e);
    closeArray();
  }
  ;
  if (element.hasPublisherElement()) {
    composeStringCore(""String_Node_Str"",element.getPublisherElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublisherElement(),false);
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactDetail e : element.getContact())     composeContactDetail(null,e);
    closeArray();
  }
  ;
  if (element.hasCopyrightElement()) {
    composeStringCore(""String_Node_Str"",element.getCopyrightElement(),false);
    composeStringExtras(""String_Node_Str"",element.getCopyrightElement(),false);
  }
  if (element.hasRelatedResource()) {
    openArray(""String_Node_Str"");
    for (    RelatedResource e : element.getRelatedResource())     composeRelatedResource(null,e);
    closeArray();
  }
  ;
  if (element.hasLibrary()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getLibrary())     composeReference(null,e);
    closeArray();
  }
  ;
  if (element.hasCategoryElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getCategoryElement(),new ActivityDefinition.ActivityDefinitionCategoryEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getCategoryElement(),new ActivityDefinition.ActivityDefinitionCategoryEnumFactory(),false);
  }
  if (element.hasCode()) {
    composeCodeableConcept(""String_Node_Str"",element.getCode());
  }
  if (element.hasTiming()) {
    composeType(""String_Node_Str"",element.getTiming());
  }
  if (element.hasLocation()) {
    composeReference(""String_Node_Str"",element.getLocation());
  }
  if (element.hasParticipantType()) {
    openArray(""String_Node_Str"");
    for (    Enumeration<ActivityDefinition.ActivityParticipantType> e : element.getParticipantType())     composeEnumerationCore(null,e,new ActivityDefinition.ActivityParticipantTypeEnumFactory(),true);
    closeArray();
    if (anyHasExtras(element.getParticipantType())) {
      openArray(""String_Node_Str"");
      for (      Enumeration<ActivityDefinition.ActivityParticipantType> e : element.getParticipantType())       composeEnumerationExtras(null,e,new ActivityDefinition.ActivityParticipantTypeEnumFactory(),true);
      closeArray();
    }
  }
  ;
  if (element.hasProduct()) {
    composeType(""String_Node_Str"",element.getProduct());
  }
  if (element.hasQuantity()) {
    composeSimpleQuantity(""String_Node_Str"",element.getQuantity());
  }
}",0.4810026385224274
23991,"protected void composeConsentExceptComponent(Complex parent,String parentType,String name,Consent.ExceptComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  if (element.hasTypeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasPeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getPeriod(),-1);
  for (int i=0; i < element.getActor().size(); i++)   composeConsentExceptActorComponent(t,""String_Node_Str"",""String_Node_Str"",element.getActor().get(i),i);
  for (int i=0; i < element.getAction().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getAction().get(i),i);
  for (int i=0; i < element.getSecurityLabel().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getSecurityLabel().get(i),i);
  for (int i=0; i < element.getPurpose().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getPurpose().get(i),i);
  for (int i=0; i < element.getData().size(); i++)   composeConsentExceptDataComponent(t,""String_Node_Str"",""String_Node_Str"",element.getData().get(i),i);
}","protected void composeConsentExceptComponent(Complex parent,String parentType,String name,Consent.ExceptComponent element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeBackboneElement(t,""String_Node_Str"",name,element,index);
  if (element.hasTypeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getTypeElement(),-1);
  if (element.hasPeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getPeriod(),-1);
  for (int i=0; i < element.getActor().size(); i++)   composeConsentExceptActorComponent(t,""String_Node_Str"",""String_Node_Str"",element.getActor().get(i),i);
  for (int i=0; i < element.getAction().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getAction().get(i),i);
  for (int i=0; i < element.getSecurityLabel().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getSecurityLabel().get(i),i);
  for (int i=0; i < element.getPurpose().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getPurpose().get(i),i);
  for (int i=0; i < element.getClass_().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getClass_().get(i),i);
  for (int i=0; i < element.getCode().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getCode().get(i),i);
  for (int i=0; i < element.getData().size(); i++)   composeConsentExceptDataComponent(t,""String_Node_Str"",""String_Node_Str"",element.getData().get(i),i);
}",0.9055967633175994
23992,"protected void composeActivityDefinition(Complex parent,String parentType,String name,ActivityDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasModuleMetadata())   composeModuleMetadata(t,""String_Node_Str"",""String_Node_Str"",element.getModuleMetadata(),-1);
  for (int i=0; i < element.getLibrary().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLibrary().get(i),i);
  if (element.hasCategoryElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getCategoryElement(),-1);
  if (element.hasCode())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getCode(),-1);
  if (element.hasTiming())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getTiming(),-1);
  if (element.hasLocation())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLocation(),-1);
  for (int i=0; i < element.getParticipantType().size(); i++)   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getParticipantType().get(i),i);
  if (element.hasProduct())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getProduct(),-1);
  if (element.hasQuantity())   composeQuantity(t,""String_Node_Str"",""String_Node_Str"",element.getQuantity(),-1);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
}","protected void composeActivityDefinition(Complex parent,String parentType,String name,ActivityDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasUrlElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getUrlElement(),-1);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasTitleElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getTitleElement(),-1);
  if (element.hasStatusElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasExperimentalElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getExperimentalElement(),-1);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasPurposeElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPurposeElement(),-1);
  if (element.hasUsageElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getUsageElement(),-1);
  if (element.hasPublicationDateElement())   composeDate(t,""String_Node_Str"",""String_Node_Str"",element.getPublicationDateElement(),-1);
  if (element.hasLastReviewDateElement())   composeDate(t,""String_Node_Str"",""String_Node_Str"",element.getLastReviewDateElement(),-1);
  if (element.hasEffectivePeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getEffectivePeriod(),-1);
  for (int i=0; i < element.getCoverage().size(); i++)   composeUsageContext(t,""String_Node_Str"",""String_Node_Str"",element.getCoverage().get(i),i);
  for (int i=0; i < element.getTopic().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTopic().get(i),i);
  for (int i=0; i < element.getContributor().size(); i++)   composeContributor(t,""String_Node_Str"",""String_Node_Str"",element.getContributor().get(i),i);
  if (element.hasPublisherElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublisherElement(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactDetail(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasCopyrightElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getCopyrightElement(),-1);
  for (int i=0; i < element.getRelatedResource().size(); i++)   composeRelatedResource(t,""String_Node_Str"",""String_Node_Str"",element.getRelatedResource().get(i),i);
  for (int i=0; i < element.getLibrary().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLibrary().get(i),i);
  if (element.hasCategoryElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getCategoryElement(),-1);
  if (element.hasCode())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getCode(),-1);
  if (element.hasTiming())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getTiming(),-1);
  if (element.hasLocation())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLocation(),-1);
  for (int i=0; i < element.getParticipantType().size(); i++)   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getParticipantType().get(i),i);
  if (element.hasProduct())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getProduct(),-1);
  if (element.hasQuantity())   composeQuantity(t,""String_Node_Str"",""String_Node_Str"",element.getQuantity(),-1);
}",0.4850880344951491
23993,"protected void composePlanDefinition(Complex parent,String parentType,String name,PlanDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasModuleMetadata())   composeModuleMetadata(t,""String_Node_Str"",""String_Node_Str"",element.getModuleMetadata(),-1);
  for (int i=0; i < element.getLibrary().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLibrary().get(i),i);
  for (int i=0; i < element.getActionDefinition().size(); i++)   composePlanDefinitionPlanDefinitionActionDefinitionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getActionDefinition().get(i),i);
}","protected void composePlanDefinition(Complex parent,String parentType,String name,PlanDefinition element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasUrlElement())   composeUri(t,""String_Node_Str"",""String_Node_Str"",element.getUrlElement(),-1);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasVersionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getVersionElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasTitleElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getTitleElement(),-1);
  if (element.hasStatusElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasExperimentalElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getExperimentalElement(),-1);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasPurposeElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPurposeElement(),-1);
  if (element.hasUsageElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getUsageElement(),-1);
  if (element.hasPublicationDateElement())   composeDate(t,""String_Node_Str"",""String_Node_Str"",element.getPublicationDateElement(),-1);
  if (element.hasLastReviewDateElement())   composeDate(t,""String_Node_Str"",""String_Node_Str"",element.getLastReviewDateElement(),-1);
  if (element.hasEffectivePeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getEffectivePeriod(),-1);
  for (int i=0; i < element.getCoverage().size(); i++)   composeUsageContext(t,""String_Node_Str"",""String_Node_Str"",element.getCoverage().get(i),i);
  for (int i=0; i < element.getTopic().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getTopic().get(i),i);
  for (int i=0; i < element.getContributor().size(); i++)   composeContributor(t,""String_Node_Str"",""String_Node_Str"",element.getContributor().get(i),i);
  if (element.hasPublisherElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublisherElement(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactDetail(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasCopyrightElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getCopyrightElement(),-1);
  for (int i=0; i < element.getRelatedResource().size(); i++)   composeRelatedResource(t,""String_Node_Str"",""String_Node_Str"",element.getRelatedResource().get(i),i);
  for (int i=0; i < element.getLibrary().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getLibrary().get(i),i);
  for (int i=0; i < element.getActionDefinition().size(); i++)   composePlanDefinitionPlanDefinitionActionDefinitionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getActionDefinition().get(i),i);
}",0.3277591973244147
23994,"/** 
 * this is called externally to generate a set of structures to a single ShEx file generally, it will be called with a single structure, or a long list of structures (all of them)
 * @param links HTML link rendering policy
 * @param structures list of structure definitions to render
 * @return ShEx definition of structures
 */
public String generate(HTMLLinkPolicy links,List<StructureDefinition> structures){
  ST shex_def=tmplt(SHEX_TEMPLATE);
  shex_def.add(""String_Node_Str"",tmplt(HEADER_TEMPLATE).add(""String_Node_Str"",structures.get(0).getId()).add(""String_Node_Str"",FHIR).render());
  Collections.sort(structures,new SortById());
  StringBuilder shapeDefinitions=new StringBuilder();
  uniq_structures=new LinkedList<StructureDefinition>();
  uniq_structure_urls=new HashSet<String>();
  for (  StructureDefinition sd : structures) {
    if (!uniq_structure_urls.contains(sd.getUrl())) {
      uniq_structures.add(sd);
      uniq_structure_urls.add(sd.getUrl());
    }
  }
  for (  StructureDefinition sd : uniq_structures) {
    shapeDefinitions.append(genShapeDefinition(sd,true));
  }
  shapeDefinitions.append(emitInnerTypes());
  if (doDatatypes) {
    shapeDefinitions.append(""String_Node_Str"");
    while (emittedDatatypes.size() < datatypes.size() || emittedInnerTypes.size() < innerTypes.size()) {
      shapeDefinitions.append(emitDataTypes());
      shapeDefinitions.append(emitInnerTypes());
    }
  }
  shapeDefinitions.append(""String_Node_Str"");
  for (  String r : references)   shapeDefinitions.append(""String_Node_Str"").append(tmplt(TYPED_REFERENCE_TEMPLATE).add(""String_Node_Str"",r).render()).append(""String_Node_Str"");
  shex_def.add(""String_Node_Str"",shapeDefinitions);
  return shex_def.render();
}","/** 
 * this is called externally to generate a set of structures to a single ShEx file generally, it will be called with a single structure, or a long list of structures (all of them)
 * @param links HTML link rendering policy
 * @param structures list of structure definitions to render
 * @return ShEx definition of structures
 */
public String generate(HTMLLinkPolicy links,List<StructureDefinition> structures){
  ST shex_def=tmplt(SHEX_TEMPLATE);
  String start_cmd=completeModel ? tmplt(START_TEMPLATE).add(""String_Node_Str"",structures.get(0).getId()).render() : ""String_Node_Str"";
  shex_def.add(""String_Node_Str"",tmplt(HEADER_TEMPLATE).add(""String_Node_Str"",start_cmd).add(""String_Node_Str"",FHIR).render());
  Collections.sort(structures,new SortById());
  StringBuilder shapeDefinitions=new StringBuilder();
  uniq_structures=new LinkedList<StructureDefinition>();
  uniq_structure_urls=new HashSet<String>();
  for (  StructureDefinition sd : structures) {
    if (!uniq_structure_urls.contains(sd.getUrl())) {
      uniq_structures.add(sd);
      uniq_structure_urls.add(sd.getUrl());
    }
  }
  for (  StructureDefinition sd : uniq_structures) {
    shapeDefinitions.append(genShapeDefinition(sd,true));
  }
  shapeDefinitions.append(emitInnerTypes());
  if (doDatatypes) {
    shapeDefinitions.append(""String_Node_Str"");
    while (emittedDatatypes.size() < datatypes.size() || emittedInnerTypes.size() < innerTypes.size()) {
      shapeDefinitions.append(emitDataTypes());
      shapeDefinitions.append(emitInnerTypes());
    }
  }
  shapeDefinitions.append(""String_Node_Str"");
  for (  String r : references)   shapeDefinitions.append(""String_Node_Str"").append(tmplt(TYPED_REFERENCE_TEMPLATE).add(""String_Node_Str"",r).render()).append(""String_Node_Str"");
  shex_def.add(""String_Node_Str"",shapeDefinitions);
  return shex_def.render();
}",0.9442275515895148
23995,"private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className,boolean onlySetter) throws Exception {
  String tn=typeNames.get(e);
  boolean isReferenceRefField=(root.getName().equals(""String_Node_Str"") && e.getName().equals(""String_Node_Str""));
  String simpleType=getSimpleType(tn);
  if (e.unbounded()) {
    if (!onlySetter) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      String listGenericType;
      if (tn == null && e.usesCompositeType()) {
        listGenericType=root.getName();
      }
 else {
        listGenericType=tn;
      }
      write(indent + ""String_Node_Str"" + listGenericType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ listGenericType+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      jdoc(indent,""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ ""String_Node_Str""+ listGenericType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ simpleType+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ simpleType+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        if (isJavaPrimitive(e) && !tn.startsWith(""String_Node_Str""))         write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
 else {
        if (!definitions.getBaseResources().containsKey(tn)) {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
 else {
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        if (!""String_Node_Str"".equals(className)) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          if ((definitions.getPrimitives().containsKey(e.typeCode()))) {
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          }
 else {
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          }
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
        if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
          List<String> params=e.getTypes().get(0).getParams();
          String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
          if (rn.equals(""String_Node_Str""))           rn=""String_Node_Str"";
 else           if (rn.equals(""String_Node_Str""))           rn=""String_Node_Str"";
          jdoc(indent,""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
          if (!rn.equals(""String_Node_Str"")) {
            jdoc(indent,""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
          }
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      if (!onlySetter) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (isReferenceRefField) {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
 else {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + e.getDefinition());
        write(indent + ""String_Node_Str"" + simpleType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (e.typeCode().equals(""String_Node_Str""))         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else         if (e.typeCode().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str""))         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      generateSetter(e,indent,className,tn,simpleType);
      if (simpleType.equals(""String_Node_Str"")) {
        generateSetter(e,indent,className,tn,""String_Node_Str"");
        generateSetter(e,indent,className,tn,""String_Node_Str"");
      }
      if (e.typeCode().equals(""String_Node_Str"")) {
        jdoc(indent,""String_Node_Str"" + e.getDefinition());
        write(indent + ""String_Node_Str"" + simpleType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + e.getDefinition());
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
 else {
      if (!onlySetter) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
          for (          TypeRef t : e.getTypes()) {
            jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
            String ttn=getTypename(t);
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
          }
        }
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
 else         if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        if (!onlySetter) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          if (!rn.equals(""String_Node_Str"")) {
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          }
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}","private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className,boolean onlySetter) throws Exception {
  String tn=typeNames.get(e);
  boolean isReferenceRefField=(root.getName().equals(""String_Node_Str"") && e.getName().equals(""String_Node_Str""));
  String simpleType=getSimpleType(tn);
  if (e.unbounded()) {
    if (!onlySetter) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      String listGenericType;
      if (tn == null && e.usesCompositeType()) {
        listGenericType=root.getName();
      }
 else {
        listGenericType=tn;
      }
      write(indent + ""String_Node_Str"" + listGenericType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ listGenericType+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      jdoc(indent,""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ ""String_Node_Str""+ listGenericType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ simpleType+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ simpleType+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        if (isJavaPrimitive(e) && !tn.startsWith(""String_Node_Str""))         write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
 else {
        if (!definitions.getBaseResources().containsKey(tn)) {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
 else {
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        if (!""String_Node_Str"".equals(className)) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          if ((definitions.getPrimitives().containsKey(e.typeCode()))) {
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          }
 else {
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          }
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
        if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
          List<String> params=e.getTypes().get(0).getParams();
          String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
          if (rn.equals(""String_Node_Str""))           rn=""String_Node_Str"";
 else           if (rn.equals(""String_Node_Str""))           rn=""String_Node_Str"";
          jdoc(indent,""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
          if (!rn.equals(""String_Node_Str"")) {
            jdoc(indent,""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
          }
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      if (!onlySetter) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (isReferenceRefField) {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
 else {
          write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
        }
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + e.getDefinition());
        write(indent + ""String_Node_Str"" + simpleType+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (e.typeCode().equals(""String_Node_Str""))         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else         if (e.typeCode().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str"") || e.typeCode().equals(""String_Node_Str""))         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      generateSetter(e,indent,className,tn,simpleType);
      if (simpleType.equals(""String_Node_Str"")) {
        generateSetter(e,indent,className,tn,""String_Node_Str"");
        generateSetter(e,indent,className,tn,""String_Node_Str"");
      }
    }
 else {
      if (!onlySetter) {
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
          for (          TypeRef t : e.getTypes()) {
            jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
            String ttn=getTypename(t);
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(""String_Node_Str"");
          }
        }
        write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
 else         if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        if (!onlySetter) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          if (!rn.equals(""String_Node_Str"")) {
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
            write(indent + ""String_Node_Str"");
            write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          }
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}",0.8157894736842105
23996,"public void load(String rootDir,ImplementationGuideDefn igd,List<ValidationMessage> issues,Set<String> loadedIgs) throws Exception {
  logger.log(""String_Node_Str"" + igd.getName(),LogMessageType.Process);
  String myRoot=Utilities.path(rootDir,""String_Node_Str"",igd.getCode());
  CSFile file=new CSFile(Utilities.path(rootDir,igd.getSource()));
  ImplementationGuide ig=(ImplementationGuide)new XmlParser().parse(new FileInputStream(file));
  if (!ig.getUrl().startsWith(""String_Node_Str""))   throw new Exception(""String_Node_Str"");
  if (!ig.getUrl().equals(""String_Node_Str"" + ig.getId()))   throw new Exception(""String_Node_Str"");
  if (!ig.hasName())   throw new Exception(""String_Node_Str"");
  ig.setDateElement(new DateTimeType(genDate));
  igd.setName(ig.getName());
  igd.setIg(ig);
  Map<String,Resource> resources=new HashMap<String,Resource>();
  for (  ImplementationGuideDependencyComponent d : ig.getDependency()) {
    if (d.getType() != GuideDependencyType.REFERENCE)     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ d.getType().toCode());
    if (!loadedIgs.contains(d.getUri()))     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ d.getUri());
  }
  loadedIgs.add(ig.getUrl());
  for (  UriType bin : ig.getBinary()) {
    if (!new File(Utilities.path(myRoot,bin.getValue())).exists())     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ bin.getValue());
    igd.getImageList().add(bin.getValue());
  }
  processPage(ig.getPage(),igd);
  List<Example> exr=new ArrayList<Example>();
  for (  ImplementationGuidePackageComponent p : ig.getPackage()) {
    if (!p.hasName())     throw new Exception(""String_Node_Str"" + ig.getName());
    for (    ImplementationGuidePackageResourceComponent r : p.getResource()) {
      if (!r.hasSource())       throw new Exception(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ ig.getName());
      CSFile fn=new CSFile(Utilities.path(myRoot,r.getSourceUriType().getValue()));
      if (!fn.exists())       throw new Exception(""String_Node_Str"" + r.getSourceUriType().getValue() + ""String_Node_Str""+ p.getName()+ ""String_Node_Str""+ ig.getName()+ ""String_Node_Str""+ fn.getAbsolutePath());
      String id=Utilities.changeFileExt(fn.getName(),""String_Node_Str"");
      boolean isExample=r.getExample();
      ResourceType rt=null;
      try {
        rt=new XmlParser().parse(new FileInputStream(fn)).getResourceType();
      }
 catch (      Exception e) {
        rt=null;
        isExample=true;
      }
      if (isExample) {
        if (!r.hasName())         throw new Exception(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ ig.getName());
        Example example=new Example(r.getName(),id,r.getDescription(),fn,false,ExampleType.XmlFile,false);
        example.setIg(igd.getCode());
        if (r.hasExampleFor()) {
          example.setExampleFor(r.getExampleFor().getReference());
          example.setRegistered(true);
          exr.add(example);
        }
        igd.getExamples().add(example);
        r.setUserData(ToolResourceUtilities.NAME_RES_EXAMPLE,example);
        r.setSource(new UriType(example.getId() + ""String_Node_Str""));
      }
 else       if (rt == ResourceType.ValueSet) {
        ValueSet vs=(ValueSet)new XmlParser().parse(new FileInputStream(fn));
        if (id.startsWith(""String_Node_Str""))         id=id.substring(9);
        vs.setId(id);
        vs.setUrl(""String_Node_Str"" + id);
        vs.setUserData(ToolResourceUtilities.NAME_RES_IG,igd);
        vs.setUserData(""String_Node_Str"",igd.getPath() + ""String_Node_Str"" + id+ ""String_Node_Str"");
        vs.setUserData(""String_Node_Str"",""String_Node_Str"" + id);
        vs.setUserData(""String_Node_Str"",committee);
        new CodeSystemConvertor(codeSystems).convert(new XmlParser(),vs,fn.getAbsolutePath());
        igd.getValueSets().add(vs);
        if (!r.hasName())         r.setName(vs.getName());
        if (!r.hasDescription())         r.setDescription(vs.getDescription());
        r.setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
        r.setSource(new UriType(fn.getName()));
      }
 else       if (rt == ResourceType.StructureDefinition) {
        StructureDefinition sd;
        sd=(StructureDefinition)new XmlParser().parse(new CSFileInputStream(fn));
        new ProfileUtilities(context,null,pkp).setIds(sd,sd.getId());
        if (sd.getKind() == StructureDefinitionKind.LOGICAL) {
          fn=new CSFile(Utilities.path(myRoot,r.getSourceUriType().asStringValue()));
          LogicalModel lm=new LogicalModel(sd);
          lm.setSource(fn.getAbsolutePath());
          lm.setId(sd.getId());
          igd.getLogicalModels().add(lm);
        }
 else         if (""String_Node_Str"".equals(sd.getBaseType())) {
          sd.setId(tail(sd.getUrl()));
          sd.setUserData(ToolResourceUtilities.NAME_RES_IG,igd.getCode());
          ToolResourceUtilities.updateUsage(sd,igd.getCode());
          this.context.seeExtensionDefinition(""String_Node_Str"",sd);
        }
 else {
          Profile pr=new Profile(igd.getCode());
          pr.setSource(fn.getAbsolutePath());
          pr.setTitle(sd.getName());
          if (!sd.hasId())           sd.setId(tail(sd.getUrl()));
          sd.setUrl(""String_Node_Str"" + sd.getId());
          pr.forceMetadata(""String_Node_Str"",sd.getId() + ""String_Node_Str"");
          pr.setSourceType(ConformancePackageSourceType.SturctureDefinition);
          ConstraintStructure cs=new ConstraintStructure(sd,igd);
          pr.getProfiles().add(cs);
          igd.getProfiles().add(pr);
        }
      }
 else       if (rt == ResourceType.Bundle) {
        Dictionary d=new Dictionary(id,r.getName(),igd.getCode(),fn.getAbsolutePath(),igd);
        igd.getDictionaries().add(d);
      }
 else       throw new Error(""String_Node_Str"" + rt.toString());
    }
    for (    Extension ex : p.getExtension()) {
      if (ex.getUrl().equals(ToolResourceUtilities.EXT_PROFILE_SPREADSHEET)) {
        String s=((UriType)ex.getValue()).getValue();
        File fn=new File(Utilities.path(myRoot,s));
        if (!fn.exists())         throw new Exception(""String_Node_Str"" + s + ""String_Node_Str""+ p.getName()+ ""String_Node_Str""+ ig.getName()+ ""String_Node_Str"");
        Profile pr=new Profile(igd.getCode());
        ex.setUserData(ToolResourceUtilities.NAME_RES_PROFILE,pr);
        pr.setSource(fn.getAbsolutePath());
        pr.setSourceType(ConformancePackageSourceType.Spreadsheet);
        SpreadsheetParser sparser=new SpreadsheetParser(pr.getCategory(),new CSFileInputStream(pr.getSource()),Utilities.noString(pr.getId()) ? pr.getSource() : pr.getId(),igd,rootDir,logger,registry,context.getVersion(),context,genDate,false,igd.getExtensions(),pkp,false,committee,mappings,profileIds,codeSystems);
        sparser.getBindings().putAll(commonBindings);
        sparser.setFolder(Utilities.getDirectoryForFile(pr.getSource()));
        sparser.parseConformancePackage(pr,null,Utilities.getDirectoryForFile(pr.getSource()),pr.getCategory(),issues);
        igd.getProfiles().add(pr);
        for (        BindingSpecification bs : sparser.getBindings().values()) {
          if (!commonBindings.containsValue(bs) && bs.getValueSet() != null) {
            ValueSet vs=bs.getValueSet();
            String path=vs.getUserString(""String_Node_Str"");
            path=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
            ig.getPackage().get(0).addResource().setName(vs.getName()).setDescription(vs.getDescription()).setSource(new UriType(path)).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
          }
        }
        for (        ValueSet vs : sparser.getValuesets())         p.addResource().setExample(false).setName(vs.getName()).setDescription(vs.getDescription()).setSource(new UriType(""String_Node_Str"" + vs.getId() + ""String_Node_Str"")).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
        for (        StructureDefinition exd : pr.getExtensions())         p.addResource().setExample(false).setName(exd.getName()).setDescription(exd.getDescription()).setSource(new UriType(""String_Node_Str"" + exd.getId().toLowerCase() + ""String_Node_Str"")).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,exd);
        for (        ConstraintStructure cs : pr.getProfiles()) {
          cs.setResourceInfo(p.addResource());
          cs.getResourceInfo().setExample(false).setName(cs.getDefn().getName()).setDescription(cs.getDefn().getDefinition()).setSource(new UriType(cs.getId().toLowerCase() + ""String_Node_Str""));
        }
      }
      if (ex.getUrl().equals(ToolResourceUtilities.EXT_LOGICAL_SPREADSHEET)) {
        File fn=new CSFile(Utilities.path(myRoot,((UriType)ex.getValue()).getValue()));
        String s=fn.getName();
        if (s.endsWith(""String_Node_Str""))         s=s.substring(0,s.length() - 16);
        String id=igd.getCode() + ""String_Node_Str"" + s;
        SpreadsheetParser sparser=new SpreadsheetParser(igd.getCode(),new CSFileInputStream(fn),id,igd,rootDir,logger,registry,context.getVersion(),context,genDate,false,igd.getExtensions(),pkp,false,committee,mappings,profileIds,codeSystems);
        sparser.getBindings().putAll(commonBindings);
        sparser.setFolder(Utilities.getDirectoryForFile(fn.getAbsolutePath()));
        LogicalModel lm=sparser.parseLogicalModel();
        lm.setId(id);
        lm.setSource(fn.getAbsolutePath());
        lm.getResource().setName(lm.getId());
        igd.getLogicalModels().add(lm);
      }
    }
    ToolingExtensions.removeExtension(p,ToolResourceUtilities.EXT_PROFILE_SPREADSHEET);
    ToolingExtensions.removeExtension(p,ToolResourceUtilities.EXT_LOGICAL_SPREADSHEET);
  }
  for (  Example ex : exr) {
    Profile tp=null;
    for (    Profile pr : igd.getProfiles()) {
      if ((""String_Node_Str"" + pr.getId()).equals(ex.getExampleFor())) {
        tp=pr;
        break;
      }
 else       for (      ConstraintStructure cc : pr.getProfiles()) {
        if ((""String_Node_Str"" + cc.getId()).equals(ex.getExampleFor())) {
          tp=pr;
          break;
        }
      }
    }
    if (tp != null)     tp.getExamples().add(ex);
 else     throw new Exception(""String_Node_Str"" + ex.getExampleFor());
  }
  igd.numberPages();
}","public void load(String rootDir,ImplementationGuideDefn igd,List<ValidationMessage> issues,Set<String> loadedIgs) throws Exception {
  logger.log(""String_Node_Str"" + igd.getName(),LogMessageType.Process);
  String myRoot=Utilities.path(rootDir,""String_Node_Str"",igd.getCode());
  CSFile file=new CSFile(Utilities.path(rootDir,igd.getSource()));
  ImplementationGuide ig=(ImplementationGuide)new XmlParser().parse(new FileInputStream(file));
  if (!ig.getUrl().startsWith(""String_Node_Str""))   throw new Exception(""String_Node_Str"");
  if (!ig.getUrl().equals(""String_Node_Str"" + ig.getId()))   throw new Exception(""String_Node_Str"");
  if (!ig.hasName())   throw new Exception(""String_Node_Str"");
  ig.setDateElement(new DateTimeType(genDate));
  igd.setName(ig.getName());
  igd.setIg(ig);
  Map<String,Resource> resources=new HashMap<String,Resource>();
  for (  ImplementationGuideDependencyComponent d : ig.getDependency()) {
    if (d.getType() != GuideDependencyType.REFERENCE)     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ d.getType().toCode());
    if (!loadedIgs.contains(d.getUri()))     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ d.getUri());
  }
  loadedIgs.add(ig.getUrl());
  for (  UriType bin : ig.getBinary()) {
    if (!new File(Utilities.path(myRoot,bin.getValue())).exists())     throw new Exception(""String_Node_Str"" + ig.getName() + ""String_Node_Str""+ bin.getValue());
    igd.getImageList().add(bin.getValue());
  }
  processPage(ig.getPage(),igd);
  List<Example> exr=new ArrayList<Example>();
  for (  ImplementationGuidePackageComponent p : ig.getPackage()) {
    if (!p.hasName())     throw new Exception(""String_Node_Str"" + ig.getName());
    for (    ImplementationGuidePackageResourceComponent r : p.getResource()) {
      if (!r.hasSource())       throw new Exception(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ ig.getName());
      CSFile fn=new CSFile(Utilities.path(myRoot,r.getSourceUriType().getValue()));
      if (!fn.exists())       throw new Exception(""String_Node_Str"" + r.getSourceUriType().getValue() + ""String_Node_Str""+ p.getName()+ ""String_Node_Str""+ ig.getName()+ ""String_Node_Str""+ fn.getAbsolutePath());
      String id=Utilities.changeFileExt(fn.getName(),""String_Node_Str"");
      boolean isExample=r.getExample();
      ResourceType rt=null;
      try {
        rt=new XmlParser().parse(new FileInputStream(fn)).getResourceType();
      }
 catch (      Exception e) {
        rt=null;
        isExample=true;
      }
      if (isExample) {
        if (!r.hasName())         throw new Exception(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ ig.getName());
        Example example=new Example(r.getName(),id,r.getDescription(),fn,false,ExampleType.XmlFile,false);
        example.setIg(igd.getCode());
        if (r.hasExampleFor()) {
          example.setExampleFor(r.getExampleFor().getReference());
          example.setRegistered(true);
          exr.add(example);
        }
        igd.getExamples().add(example);
        r.setUserData(ToolResourceUtilities.NAME_RES_EXAMPLE,example);
        r.setSource(new UriType(example.getId() + ""String_Node_Str""));
      }
 else       if (rt == ResourceType.ValueSet) {
        ValueSet vs=(ValueSet)new XmlParser().parse(new FileInputStream(fn));
        if (id.startsWith(""String_Node_Str""))         id=id.substring(9);
        vs.setId(id);
        vs.setUrl(""String_Node_Str"" + id);
        vs.setUserData(ToolResourceUtilities.NAME_RES_IG,igd);
        vs.setUserData(""String_Node_Str"",igd.getPath() + ""String_Node_Str"" + id+ ""String_Node_Str"");
        vs.setUserData(""String_Node_Str"",""String_Node_Str"" + id);
        vs.setUserData(""String_Node_Str"",committee);
        new CodeSystemConvertor(codeSystems).convert(new XmlParser(),vs,fn.getAbsolutePath());
        igd.getValueSets().add(vs);
        if (!r.hasName())         r.setName(vs.getName());
        if (!r.hasDescription())         r.setDescription(vs.getDescription());
        r.setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
        r.setSource(new UriType(fn.getName()));
      }
 else       if (rt == ResourceType.StructureDefinition) {
        StructureDefinition sd;
        sd=(StructureDefinition)new XmlParser().parse(new CSFileInputStream(fn));
        new ProfileUtilities(context,null,pkp).setIds(sd,sd.getId());
        if (sd.getKind() == StructureDefinitionKind.LOGICAL) {
          fn=new CSFile(Utilities.path(myRoot,r.getSourceUriType().asStringValue()));
          LogicalModel lm=new LogicalModel(sd);
          lm.setSource(fn.getAbsolutePath());
          lm.setId(sd.getId());
          igd.getLogicalModels().add(lm);
        }
 else         if (""String_Node_Str"".equals(sd.getBaseType())) {
          sd.setId(tail(sd.getUrl()));
          sd.setUserData(ToolResourceUtilities.NAME_RES_IG,igd.getCode());
          ToolResourceUtilities.updateUsage(sd,igd.getCode());
          this.context.seeExtensionDefinition(""String_Node_Str"",sd);
        }
 else {
          Profile pr=new Profile(igd.getCode());
          pr.setSource(fn.getAbsolutePath());
          pr.setTitle(sd.getName());
          if (!sd.hasId())           sd.setId(tail(sd.getUrl()));
          pr.forceMetadata(""String_Node_Str"",sd.getId() + ""String_Node_Str"");
          pr.setSourceType(ConformancePackageSourceType.SturctureDefinition);
          ConstraintStructure cs=new ConstraintStructure(sd,igd);
          pr.getProfiles().add(cs);
          igd.getProfiles().add(pr);
        }
      }
 else       if (rt == ResourceType.Bundle) {
        Dictionary d=new Dictionary(id,r.getName(),igd.getCode(),fn.getAbsolutePath(),igd);
        igd.getDictionaries().add(d);
      }
 else       logger.log(""String_Node_Str"" + rt.toString(),LogMessageType.Process);
    }
    for (    Extension ex : p.getExtension()) {
      if (ex.getUrl().equals(ToolResourceUtilities.EXT_PROFILE_SPREADSHEET)) {
        String s=((UriType)ex.getValue()).getValue();
        File fn=new File(Utilities.path(myRoot,s));
        if (!fn.exists())         throw new Exception(""String_Node_Str"" + s + ""String_Node_Str""+ p.getName()+ ""String_Node_Str""+ ig.getName()+ ""String_Node_Str"");
        Profile pr=new Profile(igd.getCode());
        ex.setUserData(ToolResourceUtilities.NAME_RES_PROFILE,pr);
        pr.setSource(fn.getAbsolutePath());
        pr.setSourceType(ConformancePackageSourceType.Spreadsheet);
        SpreadsheetParser sparser=new SpreadsheetParser(pr.getCategory(),new CSFileInputStream(pr.getSource()),Utilities.noString(pr.getId()) ? pr.getSource() : pr.getId(),igd,rootDir,logger,registry,context.getVersion(),context,genDate,false,igd.getExtensions(),pkp,false,committee,mappings,profileIds,codeSystems);
        sparser.getBindings().putAll(commonBindings);
        sparser.setFolder(Utilities.getDirectoryForFile(pr.getSource()));
        sparser.parseConformancePackage(pr,null,Utilities.getDirectoryForFile(pr.getSource()),pr.getCategory(),issues);
        igd.getProfiles().add(pr);
        for (        BindingSpecification bs : sparser.getBindings().values()) {
          if (!commonBindings.containsValue(bs) && bs.getValueSet() != null) {
            ValueSet vs=bs.getValueSet();
            String path=vs.getUserString(""String_Node_Str"");
            path=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
            ig.getPackage().get(0).addResource().setName(vs.getName()).setDescription(vs.getDescription()).setSource(new UriType(path)).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
          }
        }
        for (        ValueSet vs : sparser.getValuesets())         p.addResource().setExample(false).setName(vs.getName()).setDescription(vs.getDescription()).setSource(new UriType(""String_Node_Str"" + vs.getId() + ""String_Node_Str"")).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,vs);
        for (        StructureDefinition exd : pr.getExtensions())         p.addResource().setExample(false).setName(exd.getName()).setDescription(exd.getDescription()).setSource(new UriType(""String_Node_Str"" + exd.getId().toLowerCase() + ""String_Node_Str"")).setUserData(ToolResourceUtilities.RES_ACTUAL_RESOURCE,exd);
        for (        ConstraintStructure cs : pr.getProfiles()) {
          cs.setResourceInfo(p.addResource());
          cs.getResourceInfo().setExample(false).setName(cs.getDefn().getName()).setDescription(cs.getDefn().getDefinition()).setSource(new UriType(cs.getId().toLowerCase() + ""String_Node_Str""));
        }
      }
      if (ex.getUrl().equals(ToolResourceUtilities.EXT_LOGICAL_SPREADSHEET)) {
        File fn=new CSFile(Utilities.path(myRoot,((UriType)ex.getValue()).getValue()));
        String s=fn.getName();
        if (s.endsWith(""String_Node_Str""))         s=s.substring(0,s.length() - 16);
        String id=igd.getCode() + ""String_Node_Str"" + s;
        SpreadsheetParser sparser=new SpreadsheetParser(igd.getCode(),new CSFileInputStream(fn),id,igd,rootDir,logger,registry,context.getVersion(),context,genDate,false,igd.getExtensions(),pkp,false,committee,mappings,profileIds,codeSystems);
        sparser.getBindings().putAll(commonBindings);
        sparser.setFolder(Utilities.getDirectoryForFile(fn.getAbsolutePath()));
        LogicalModel lm=sparser.parseLogicalModel();
        lm.setId(id);
        lm.setSource(fn.getAbsolutePath());
        lm.getResource().setName(lm.getId());
        igd.getLogicalModels().add(lm);
      }
    }
    ToolingExtensions.removeExtension(p,ToolResourceUtilities.EXT_PROFILE_SPREADSHEET);
    ToolingExtensions.removeExtension(p,ToolResourceUtilities.EXT_LOGICAL_SPREADSHEET);
  }
  for (  Example ex : exr) {
    Profile tp=null;
    for (    Profile pr : igd.getProfiles()) {
      if ((""String_Node_Str"" + pr.getId()).equals(ex.getExampleFor())) {
        tp=pr;
        break;
      }
 else       for (      ConstraintStructure cc : pr.getProfiles()) {
        if ((""String_Node_Str"" + cc.getId()).equals(ex.getExampleFor())) {
          tp=pr;
          break;
        }
      }
    }
    if (tp != null)     tp.getExamples().add(ex);
 else     throw new Exception(""String_Node_Str"" + ex.getExampleFor());
  }
  igd.numberPages();
}",0.9950608831727712
23997,"/** 
 * This is not true of bundles generally, but it is true of all the conformance bundles produced by the spec: all entries must have a fullUrl, and it must equal http://hl7.org/fhir/[type]/[id]
 * @param bnd - the bundle to check
 */
private void checkBundleURLs(Bundle bnd){
  int i=0;
  for (  BundleEntryComponent e : bnd.getEntry()) {
    i++;
    if (!e.hasFullUrl())     page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INVALID,-1,-1,""String_Node_Str"" + bnd.getId(),""String_Node_Str"" + Integer.toString(i),IssueSeverity.ERROR));
 else     if (!e.getFullUrl().equals(""String_Node_Str"" + e.getResource().getResourceType().toString() + ""String_Node_Str""+ e.getResource().getId()) && e.getResource().getResourceType() != ResourceType.CodeSystem)     page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INVALID,-1,-1,""String_Node_Str"" + bnd.getId(),""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""+ e.getFullUrl()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getResource().getResourceType().toString()+ ""String_Node_Str""+ e.getResource().getId(),IssueSeverity.ERROR));
  }
}","/** 
 * This is not true of bundles generally, but it is true of all the conformance bundles produced by the spec: all entries must have a fullUrl, and it must equal http://hl7.org/fhir/[type]/[id]
 * @param bnd - the bundle to check
 */
private void checkBundleURLs(Bundle bnd){
  int i=0;
  for (  BundleEntryComponent e : bnd.getEntry()) {
    i++;
    if (!e.hasFullUrl())     page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INVALID,-1,-1,""String_Node_Str"" + bnd.getId(),""String_Node_Str"" + Integer.toString(i),IssueSeverity.ERROR));
 else     if (!e.getFullUrl().endsWith(""String_Node_Str"" + e.getResource().getResourceType().toString() + ""String_Node_Str""+ e.getResource().getId()) && e.getResource().getResourceType() != ResourceType.CodeSystem)     page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INVALID,-1,-1,""String_Node_Str"" + bnd.getId(),""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""+ e.getFullUrl()+ ""String_Node_Str""+ e.getResource().getResourceType().toString()+ ""String_Node_Str""+ e.getResource().getId(),IssueSeverity.ERROR));
 else     if (!e.getFullUrl().equals(""String_Node_Str"" + e.getResource().getResourceType().toString() + ""String_Node_Str""+ e.getResource().getId()) && e.getResource().getResourceType() != ResourceType.CodeSystem)     page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INVALID,-1,-1,""String_Node_Str"" + bnd.getId(),""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""+ e.getFullUrl()+ ""String_Node_Str"",IssueSeverity.WARNING));
  }
}",0.8194444444444444
23998,"public String xref() throws FHIRException {
  StringBuilder b=new StringBuilder();
  boolean first=true;
  b.append(""String_Node_Str"");
  List<String> vsurls=new ArrayList<String>();
  for (  BaseConformance sd : context.allConformanceResources()) {
    if (sd instanceof ValueSet)     vsurls.add(sd.getUrl());
  }
  Collections.sort(vsurls);
  Set<String> processed=new HashSet<>();
  for (  String url : vsurls) {
    ValueSet vc=context.fetchResource(ValueSet.class,url);
    for (    ConceptSetComponent ed : vc.getCompose().getInclude())     first=addLink(b,first,vc,ed,processed);
    for (    ConceptSetComponent ed : vc.getCompose().getExclude())     first=addLink(b,first,vc,ed,processed);
  }
  if (first)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
  return b.toString();
}","public String xref() throws FHIRException {
  StringBuilder b=new StringBuilder();
  boolean first=true;
  b.append(""String_Node_Str"");
  List<String> vsurls=new ArrayList<String>();
  for (  BaseConformance sd : context.allConformanceResources()) {
    if (sd instanceof ValueSet)     vsurls.add(sd.getUrl());
  }
  Collections.sort(vsurls);
  Set<String> processed=new HashSet<String>();
  for (  String url : vsurls) {
    ValueSet vc=context.fetchResource(ValueSet.class,url);
    for (    ConceptSetComponent ed : vc.getCompose().getInclude())     first=addLink(b,first,vc,ed,processed);
    for (    ConceptSetComponent ed : vc.getCompose().getExclude())     first=addLink(b,first,vc,ed,processed);
  }
  if (first)   b.append(""String_Node_Str"");
 else   b.append(""String_Node_Str"");
  return b.toString();
}",0.996300863131936
23999,"/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  System.out.println(""String_Node_Str"" + derived.getId());
  int baseCursor=0;
  int diffCursor=0;
  processPaths(derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,false,base.getUrl(),null,false);
}","/** 
 * Given a base (snapshot) profile structure, and a differential profile, generate a new snapshot profile
 * @param base - the base structure on which the differential will be applied
 * @param differential - the differential to apply to the base
 * @param url - where the base has relative urls for profile references, these need to be converted to absolutes by prepending this URL
 * @param trimDifferential - if this is true, then the snap short generator will remove any material in the element definitions that is not different to the base
 * @return
 * @throws FHIRException 
 * @throws DefinitionException 
 * @throws Exception
 */
public void generateSnapshot(StructureDefinition base,StructureDefinition derived,String url,String profileName) throws DefinitionException, FHIRException {
  if (base == null)   throw new DefinitionException(""String_Node_Str"");
  if (derived == null)   throw new DefinitionException(""String_Node_Str"");
  if (snapshotStack.contains(derived.getUrl()))   throw new DefinitionException(""String_Node_Str"" + snapshotStack.toString() + ""String_Node_Str"");
  snapshotStack.add(derived.getUrl());
  derived.setSnapshot(new StructureDefinitionSnapshotComponent());
  int baseCursor=0;
  int diffCursor=0;
  processPaths(derived.getSnapshot(),base.getSnapshot(),derived.getDifferential(),baseCursor,diffCursor,base.getSnapshot().getElement().size() - 1,derived.getDifferential().getElement().size() - 1,url,derived.getId(),null,false,base.getUrl(),null,false);
}",0.9806747461513264
24000,"public static boolean hasOID(ValueSet vs){
  return hasExtension(vs,EXT_OID);
}","public static boolean hasOID(CodeSystem cs){
  return hasExtension(cs,EXT_OID);
}",0.9
